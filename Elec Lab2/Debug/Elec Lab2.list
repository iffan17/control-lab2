
Elec Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009444  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800961c  0800961c  0000a61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800965c  0800965c  0000b010  2**0
                  CONTENTS
  4 .ARM          00000008  0800965c  0800965c  0000a65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009664  08009664  0000b010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009664  08009664  0000a664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009668  08009668  0000a668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800966c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  20000010  0800967c  0000b010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  0800967c  0000b374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000189f1  00000000  00000000  0000b040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cd7  00000000  00000000  00023a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  00026708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001084  00000000  00000000  00027c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028fae  00000000  00000000  00028cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b47  00000000  00000000  00051c5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001147a9  00000000  00000000  0006a7a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017ef4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b94  00000000  00000000  0017ef90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00184b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009604 	.word	0x08009604

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08009604 	.word	0x08009604

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f001 face 	bl	8001aae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 fa0f 	bl	8000934 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 fd8b 	bl	8001030 <MX_GPIO_Init>
  MX_DMA_Init();
 800051a:	f000 fd5f 	bl	8000fdc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800051e:	f000 fadf 	bl	8000ae0 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000522:	f000 fa53 	bl	80009cc <MX_ADC1_Init>
  MX_TIM3_Init();
 8000526:	f000 fc2f 	bl	8000d88 <MX_TIM3_Init>
  MX_TIM4_Init();
 800052a:	f000 fc7b 	bl	8000e24 <MX_TIM4_Init>
  MX_TIM5_Init();
 800052e:	f000 fcff 	bl	8000f30 <MX_TIM5_Init>
  MX_TIM2_Init();
 8000532:	f000 fbdb 	bl	8000cec <MX_TIM2_Init>
  MX_TIM1_Init();
 8000536:	f000 fb1d 	bl	8000b74 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 2);
 800053a:	2202      	movs	r2, #2
 800053c:	49bc      	ldr	r1, [pc, #752]	@ (8000830 <main+0x328>)
 800053e:	48bd      	ldr	r0, [pc, #756]	@ (8000834 <main+0x32c>)
 8000540:	f001 ff22 	bl	8002388 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000544:	48bc      	ldr	r0, [pc, #752]	@ (8000838 <main+0x330>)
 8000546:	f004 ffdb 	bl	8005500 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 800054a:	48bc      	ldr	r0, [pc, #752]	@ (800083c <main+0x334>)
 800054c:	f004 ffd8 	bl	8005500 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000550:	48bb      	ldr	r0, [pc, #748]	@ (8000840 <main+0x338>)
 8000552:	f005 f845 	bl	80055e0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000556:	48b8      	ldr	r0, [pc, #736]	@ (8000838 <main+0x330>)
 8000558:	f005 f842 	bl	80055e0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800055c:	2100      	movs	r1, #0
 800055e:	48b9      	ldr	r0, [pc, #740]	@ (8000844 <main+0x33c>)
 8000560:	f005 f918 	bl	8005794 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000564:	2100      	movs	r1, #0
 8000566:	48b5      	ldr	r0, [pc, #724]	@ (800083c <main+0x334>)
 8000568:	f005 f914 	bl	8005794 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800056c:	2104      	movs	r1, #4
 800056e:	48b5      	ldr	r0, [pc, #724]	@ (8000844 <main+0x33c>)
 8000570:	f005 f910 	bl	8005794 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000574:	2104      	movs	r1, #4
 8000576:	48b1      	ldr	r0, [pc, #708]	@ (800083c <main+0x334>)
 8000578:	f005 f90c 	bl	8005794 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 800057c:	213c      	movs	r1, #60	@ 0x3c
 800057e:	48b2      	ldr	r0, [pc, #712]	@ (8000848 <main+0x340>)
 8000580:	f005 fac0 	bl	8005b04 <HAL_TIM_Encoder_Start>



  PID.Kp =2;
 8000584:	4bb1      	ldr	r3, [pc, #708]	@ (800084c <main+0x344>)
 8000586:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800058a:	619a      	str	r2, [r3, #24]
  PID.Ki =0;
 800058c:	4baf      	ldr	r3, [pc, #700]	@ (800084c <main+0x344>)
 800058e:	f04f 0200 	mov.w	r2, #0
 8000592:	61da      	str	r2, [r3, #28]
  PID.Kd = 0;
 8000594:	4bad      	ldr	r3, [pc, #692]	@ (800084c <main+0x344>)
 8000596:	f04f 0200 	mov.w	r2, #0
 800059a:	621a      	str	r2, [r3, #32]
  set_pos = 0;
 800059c:	4bac      	ldr	r3, [pc, #688]	@ (8000850 <main+0x348>)
 800059e:	f04f 0200 	mov.w	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
  z = 0;
 80005a4:	4bab      	ldr	r3, [pc, #684]	@ (8000854 <main+0x34c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	801a      	strh	r2, [r3, #0]
  arm_pid_init_f32(&PID, 0);
 80005aa:	2100      	movs	r1, #0
 80005ac:	48a7      	ldr	r0, [pc, #668]	@ (800084c <main+0x344>)
 80005ae:	f008 ffc7 	bl	8009540 <arm_pid_init_f32>
//		  x += ADC_RawRead[(i*2)];
//		  y += ADC_RawRead[(i*2)+1];
//	  }
//
//
	  setADC = ADC_RawRead[1];
 80005b2:	4b9f      	ldr	r3, [pc, #636]	@ (8000830 <main+0x328>)
 80005b4:	885b      	ldrh	r3, [r3, #2]
 80005b6:	b21a      	sxth	r2, r3
 80005b8:	4ba7      	ldr	r3, [pc, #668]	@ (8000858 <main+0x350>)
 80005ba:	801a      	strh	r2, [r3, #0]
//	  }

	 // prev_pos = posADC;


	  if(mode == 0){
 80005bc:	4ba7      	ldr	r3, [pc, #668]	@ (800085c <main+0x354>)
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d177      	bne.n	80006b4 <main+0x1ac>
		  pos = x*360/4096;
 80005c4:	4ba6      	ldr	r3, [pc, #664]	@ (8000860 <main+0x358>)
 80005c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005ca:	461a      	mov	r2, r3
 80005cc:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80005d0:	fb02 f303 	mul.w	r3, r2, r3
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	da01      	bge.n	80005dc <main+0xd4>
 80005d8:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80005dc:	131b      	asrs	r3, r3, #12
 80005de:	ee07 3a90 	vmov	s15, r3
 80005e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005e6:	4b9f      	ldr	r3, [pc, #636]	@ (8000864 <main+0x35c>)
 80005e8:	edc3 7a00 	vstr	s15, [r3]
		  set_pos = setADC*360/4096;
 80005ec:	4b9a      	ldr	r3, [pc, #616]	@ (8000858 <main+0x350>)
 80005ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005f2:	461a      	mov	r2, r3
 80005f4:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80005f8:	fb02 f303 	mul.w	r3, r2, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	da01      	bge.n	8000604 <main+0xfc>
 8000600:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000604:	131b      	asrs	r3, r3, #12
 8000606:	ee07 3a90 	vmov	s15, r3
 800060a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800060e:	4b90      	ldr	r3, [pc, #576]	@ (8000850 <main+0x348>)
 8000610:	edc3 7a00 	vstr	s15, [r3]
		  PID.Kp = 2;
 8000614:	4b8d      	ldr	r3, [pc, #564]	@ (800084c <main+0x344>)
 8000616:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800061a:	619a      	str	r2, [r3, #24]
		  Vfeedback = (arm_pid_f32(&PID, set_pos - pos))*32676/360;
 800061c:	4b8c      	ldr	r3, [pc, #560]	@ (8000850 <main+0x348>)
 800061e:	ed93 7a00 	vldr	s14, [r3]
 8000622:	4b90      	ldr	r3, [pc, #576]	@ (8000864 <main+0x35c>)
 8000624:	edd3 7a00 	vldr	s15, [r3]
 8000628:	ee77 7a67 	vsub.f32	s15, s14, s15
 800062c:	4b87      	ldr	r3, [pc, #540]	@ (800084c <main+0x344>)
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	ed93 7a00 	vldr	s14, [r3]
 800063a:	edd7 7a04 	vldr	s15, [r7, #16]
 800063e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	edd3 6a01 	vldr	s13, [r3, #4]
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	edd3 7a03 	vldr	s15, [r3, #12]
 800064e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000652:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	edd3 6a02 	vldr	s13, [r3, #8]
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000662:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000666:	ee37 7a27 	vadd.f32	s14, s14, s15
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000674:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	68da      	ldr	r2, [r3, #12]
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	693a      	ldr	r2, [r7, #16]
 8000684:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	68fa      	ldr	r2, [r7, #12]
 800068a:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800068c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000690:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8000868 <main+0x360>
 8000694:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000698:	eddf 6a74 	vldr	s13, [pc, #464]	@ 800086c <main+0x364>
 800069c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006a0:	4b73      	ldr	r3, [pc, #460]	@ (8000870 <main+0x368>)
 80006a2:	edc3 7a00 	vstr	s15, [r3]
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	2120      	movs	r1, #32
 80006aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ae:	f003 fe55 	bl	800435c <HAL_GPIO_WritePin>
 80006b2:	e0ae      	b.n	8000812 <main+0x30a>
	  }
	  else if(mode == 1){
 80006b4:	4b69      	ldr	r3, [pc, #420]	@ (800085c <main+0x354>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d176      	bne.n	80007aa <main+0x2a2>
		  pos = posQEI*360/3072;
 80006bc:	4b6d      	ldr	r3, [pc, #436]	@ (8000874 <main+0x36c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80006c4:	fb02 f303 	mul.w	r3, r2, r3
 80006c8:	4a6b      	ldr	r2, [pc, #428]	@ (8000878 <main+0x370>)
 80006ca:	fb82 1203 	smull	r1, r2, r2, r3
 80006ce:	1252      	asrs	r2, r2, #9
 80006d0:	17db      	asrs	r3, r3, #31
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	ee07 3a90 	vmov	s15, r3
 80006d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006dc:	4b61      	ldr	r3, [pc, #388]	@ (8000864 <main+0x35c>)
 80006de:	edc3 7a00 	vstr	s15, [r3]
		  set_pos = setADC*360/4096;
 80006e2:	4b5d      	ldr	r3, [pc, #372]	@ (8000858 <main+0x350>)
 80006e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006e8:	461a      	mov	r2, r3
 80006ea:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80006ee:	fb02 f303 	mul.w	r3, r2, r3
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	da01      	bge.n	80006fa <main+0x1f2>
 80006f6:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80006fa:	131b      	asrs	r3, r3, #12
 80006fc:	ee07 3a90 	vmov	s15, r3
 8000700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000704:	4b52      	ldr	r3, [pc, #328]	@ (8000850 <main+0x348>)
 8000706:	edc3 7a00 	vstr	s15, [r3]
		  PID.Kp = 2;
 800070a:	4b50      	ldr	r3, [pc, #320]	@ (800084c <main+0x344>)
 800070c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000710:	619a      	str	r2, [r3, #24]
		  Vfeedback = (arm_pid_f32(&PID, set_pos - pos))*32676/360;
 8000712:	4b4f      	ldr	r3, [pc, #316]	@ (8000850 <main+0x348>)
 8000714:	ed93 7a00 	vldr	s14, [r3]
 8000718:	4b52      	ldr	r3, [pc, #328]	@ (8000864 <main+0x35c>)
 800071a:	edd3 7a00 	vldr	s15, [r3]
 800071e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000722:	4b4a      	ldr	r3, [pc, #296]	@ (800084c <main+0x344>)
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	edc7 7a01 	vstr	s15, [r7, #4]
    out = (S->A0 * in) +
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	ed93 7a00 	vldr	s14, [r3]
 8000730:	edd7 7a01 	vldr	s15, [r7, #4]
 8000734:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	edd3 6a01 	vldr	s13, [r3, #4]
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	edd3 7a03 	vldr	s15, [r3, #12]
 8000744:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000748:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	edd3 6a02 	vldr	s13, [r3, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	edd3 7a04 	vldr	s15, [r3, #16]
 8000758:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800075c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800076a:	edc7 7a00 	vstr	s15, [r7]
    S->state[1] = S->state[0];
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	68da      	ldr	r2, [r3, #12]
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	615a      	str	r2, [r3, #20]
    return (out);
 8000782:	edd7 7a00 	vldr	s15, [r7]
 8000786:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8000868 <main+0x360>
 800078a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800078e:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800086c <main+0x364>
 8000792:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000796:	4b36      	ldr	r3, [pc, #216]	@ (8000870 <main+0x368>)
 8000798:	edc3 7a00 	vstr	s15, [r3]
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2120      	movs	r1, #32
 80007a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a4:	f003 fdda 	bl	800435c <HAL_GPIO_WritePin>
 80007a8:	e033      	b.n	8000812 <main+0x30a>
	  }
	  else if(mode == 2){
 80007aa:	4b2c      	ldr	r3, [pc, #176]	@ (800085c <main+0x354>)
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d12f      	bne.n	8000812 <main+0x30a>
		  Vfeedback = rxBuffer[2]*32676/100;
 80007b2:	4b32      	ldr	r3, [pc, #200]	@ (800087c <main+0x374>)
 80007b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80007b8:	461a      	mov	r2, r3
 80007ba:	f647 73a4 	movw	r3, #32676	@ 0x7fa4
 80007be:	fb02 f303 	mul.w	r3, r2, r3
 80007c2:	4a2f      	ldr	r2, [pc, #188]	@ (8000880 <main+0x378>)
 80007c4:	fb82 1203 	smull	r1, r2, r2, r3
 80007c8:	1152      	asrs	r2, r2, #5
 80007ca:	17db      	asrs	r3, r3, #31
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	ee07 3a90 	vmov	s15, r3
 80007d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007d6:	4b26      	ldr	r3, [pc, #152]	@ (8000870 <main+0x368>)
 80007d8:	edc3 7a00 	vstr	s15, [r3]
		  static uint16_t timestamp;
		  if(HAL_GetTick()>=timestamp){
 80007dc:	f001 f9cc 	bl	8001b78 <HAL_GetTick>
 80007e0:	4603      	mov	r3, r0
 80007e2:	4a28      	ldr	r2, [pc, #160]	@ (8000884 <main+0x37c>)
 80007e4:	8812      	ldrh	r2, [r2, #0]
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d313      	bcc.n	8000812 <main+0x30a>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007ea:	2120      	movs	r1, #32
 80007ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f0:	f003 fdcc 	bl	800438c <HAL_GPIO_TogglePin>
			  timestamp = HAL_GetTick()+500;
 80007f4:	f001 f9c0 	bl	8001b78 <HAL_GetTick>
 80007f8:	4603      	mov	r3, r0
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000800:	b29a      	uxth	r2, r3
 8000802:	4b20      	ldr	r3, [pc, #128]	@ (8000884 <main+0x37c>)
 8000804:	801a      	strh	r2, [r3, #0]
			  b += 1;
 8000806:	4b20      	ldr	r3, [pc, #128]	@ (8000888 <main+0x380>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	3301      	adds	r3, #1
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4b1e      	ldr	r3, [pc, #120]	@ (8000888 <main+0x380>)
 8000810:	701a      	strb	r2, [r3, #0]
		  }
	  }

////////////// SPEED LIMIT //////////////////////////////////////////////////
	  //ensure smooth speed , maximum speed
	  if(Vfeedback > 32676){
 8000812:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <main+0x368>)
 8000814:	edd3 7a00 	vldr	s15, [r3]
 8000818:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000868 <main+0x360>
 800081c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000824:	dd34      	ble.n	8000890 <main+0x388>
		  Vfeedback = 32676;
 8000826:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <main+0x368>)
 8000828:	4a18      	ldr	r2, [pc, #96]	@ (800088c <main+0x384>)
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	e03d      	b.n	80008aa <main+0x3a2>
 800082e:	bf00      	nop
 8000830:	20000328 	.word	0x20000328
 8000834:	2000002c 	.word	0x2000002c
 8000838:	20000224 	.word	0x20000224
 800083c:	20000270 	.word	0x20000270
 8000840:	200001d8 	.word	0x200001d8
 8000844:	2000018c 	.word	0x2000018c
 8000848:	200002bc 	.word	0x200002bc
 800084c:	2000032c 	.word	0x2000032c
 8000850:	20000314 	.word	0x20000314
 8000854:	2000030c 	.word	0x2000030c
 8000858:	20000352 	.word	0x20000352
 800085c:	20000000 	.word	0x20000000
 8000860:	20000308 	.word	0x20000308
 8000864:	20000310 	.word	0x20000310
 8000868:	46ff4800 	.word	0x46ff4800
 800086c:	43b40000 	.word	0x43b40000
 8000870:	20000358 	.word	0x20000358
 8000874:	20000318 	.word	0x20000318
 8000878:	2aaaaaab 	.word	0x2aaaaaab
 800087c:	2000035c 	.word	0x2000035c
 8000880:	51eb851f 	.word	0x51eb851f
 8000884:	2000036c 	.word	0x2000036c
 8000888:	20000365 	.word	0x20000365
 800088c:	46ff4800 	.word	0x46ff4800
	  }
	  else if(Vfeedback < -32676){
 8000890:	4b22      	ldr	r3, [pc, #136]	@ (800091c <main+0x414>)
 8000892:	edd3 7a00 	vldr	s15, [r3]
 8000896:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8000920 <main+0x418>
 800089a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800089e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008a2:	d502      	bpl.n	80008aa <main+0x3a2>
		  Vfeedback = -32676;
 80008a4:	4b1d      	ldr	r3, [pc, #116]	@ (800091c <main+0x414>)
 80008a6:	4a1f      	ldr	r2, [pc, #124]	@ (8000924 <main+0x41c>)
 80008a8:	601a      	str	r2, [r3, #0]
	  }
////////////// PWM //////////////////////////////////////////////////////////
	  if(Vfeedback > 0){
 80008aa:	4b1c      	ldr	r3, [pc, #112]	@ (800091c <main+0x414>)
 80008ac:	edd3 7a00 	vldr	s15, [r3]
 80008b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008b8:	dd08      	ble.n	80008cc <main+0x3c4>
		  PWM1 = Vfeedback;
 80008ba:	4b18      	ldr	r3, [pc, #96]	@ (800091c <main+0x414>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a1a      	ldr	r2, [pc, #104]	@ (8000928 <main+0x420>)
 80008c0:	6013      	str	r3, [r2, #0]
		  PWM2 = 0;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	@ (800092c <main+0x424>)
 80008c4:	f04f 0200 	mov.w	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	e01c      	b.n	8000906 <main+0x3fe>
	  }
	  else if(Vfeedback < 0){
 80008cc:	4b13      	ldr	r3, [pc, #76]	@ (800091c <main+0x414>)
 80008ce:	edd3 7a00 	vldr	s15, [r3]
 80008d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008da:	d50c      	bpl.n	80008f6 <main+0x3ee>
		  PWM1 = 0;
 80008dc:	4b12      	ldr	r3, [pc, #72]	@ (8000928 <main+0x420>)
 80008de:	f04f 0200 	mov.w	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
		  PWM2 = Vfeedback * -1;
 80008e4:	4b0d      	ldr	r3, [pc, #52]	@ (800091c <main+0x414>)
 80008e6:	edd3 7a00 	vldr	s15, [r3]
 80008ea:	eef1 7a67 	vneg.f32	s15, s15
 80008ee:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <main+0x424>)
 80008f0:	edc3 7a00 	vstr	s15, [r3]
 80008f4:	e007      	b.n	8000906 <main+0x3fe>
	  }
	  else{
		  PWM1 = 0;
 80008f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <main+0x420>)
 80008f8:	f04f 0200 	mov.w	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
		  PWM2 = 0;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <main+0x424>)
 8000900:	f04f 0200 	mov.w	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
	  }
////////////// MOTOR1 or MOTOR2 /////////////////////////////////////////////
	  if(mode == 1){
 8000906:	4b0a      	ldr	r3, [pc, #40]	@ (8000930 <main+0x428>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d102      	bne.n	8000914 <main+0x40c>
		  DriveF();
 800090e:	f000 fd79 	bl	8001404 <DriveF>
 8000912:	e64e      	b.n	80005b2 <main+0xaa>
	  }
	  else{
		  DriveC();
 8000914:	f000 fda2 	bl	800145c <DriveC>
	  setADC = ADC_RawRead[1];
 8000918:	e64b      	b.n	80005b2 <main+0xaa>
 800091a:	bf00      	nop
 800091c:	20000358 	.word	0x20000358
 8000920:	c6ff4800 	.word	0xc6ff4800
 8000924:	c6ff4800 	.word	0xc6ff4800
 8000928:	2000031c 	.word	0x2000031c
 800092c:	20000320 	.word	0x20000320
 8000930:	20000000 	.word	0x20000000

08000934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b094      	sub	sp, #80	@ 0x50
 8000938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093a:	f107 0318 	add.w	r3, r7, #24
 800093e:	2238      	movs	r2, #56	@ 0x38
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f008 fe32 	bl	80095ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000956:	2000      	movs	r0, #0
 8000958:	f003 fd4a 	bl	80043f0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800095c:	2302      	movs	r3, #2
 800095e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000960:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000966:	2340      	movs	r3, #64	@ 0x40
 8000968:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096a:	2302      	movs	r3, #2
 800096c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800096e:	2302      	movs	r3, #2
 8000970:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000972:	2304      	movs	r3, #4
 8000974:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000976:	2355      	movs	r3, #85	@ 0x55
 8000978:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800097a:	2302      	movs	r3, #2
 800097c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800097e:	2302      	movs	r3, #2
 8000980:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000982:	2302      	movs	r3, #2
 8000984:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000986:	f107 0318 	add.w	r3, r7, #24
 800098a:	4618      	mov	r0, r3
 800098c:	f003 fde4 	bl	8004558 <HAL_RCC_OscConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000996:	f000 fd8d 	bl	80014b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099a:	230f      	movs	r3, #15
 800099c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800099e:	2303      	movs	r3, #3
 80009a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2104      	movs	r1, #4
 80009b2:	4618      	mov	r0, r3
 80009b4:	f004 f8e2 	bl	8004b7c <HAL_RCC_ClockConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80009be:	f000 fd79 	bl	80014b4 <Error_Handler>
  }
}
 80009c2:	bf00      	nop
 80009c4:	3750      	adds	r7, #80	@ 0x50
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08c      	sub	sp, #48	@ 0x30
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2220      	movs	r2, #32
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f008 fde1 	bl	80095ac <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009ea:	4b3a      	ldr	r3, [pc, #232]	@ (8000ad4 <MX_ADC1_Init+0x108>)
 80009ec:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80009f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009f2:	4b38      	ldr	r3, [pc, #224]	@ (8000ad4 <MX_ADC1_Init+0x108>)
 80009f4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80009f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009fa:	4b36      	ldr	r3, [pc, #216]	@ (8000ad4 <MX_ADC1_Init+0x108>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a00:	4b34      	ldr	r3, [pc, #208]	@ (8000ad4 <MX_ADC1_Init+0x108>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000a06:	4b33      	ldr	r3, [pc, #204]	@ (8000ad4 <MX_ADC1_Init+0x108>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a0c:	4b31      	ldr	r3, [pc, #196]	@ (8000ad4 <MX_ADC1_Init+0x108>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a12:	4b30      	ldr	r3, [pc, #192]	@ (8000ad4 <MX_ADC1_Init+0x108>)
 8000a14:	2204      	movs	r2, #4
 8000a16:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a18:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad4 <MX_ADC1_Init+0x108>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad4 <MX_ADC1_Init+0x108>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000a24:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad4 <MX_ADC1_Init+0x108>)
 8000a26:	2202      	movs	r2, #2
 8000a28:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad4 <MX_ADC1_Init+0x108>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000a32:	4b28      	ldr	r3, [pc, #160]	@ (8000ad4 <MX_ADC1_Init+0x108>)
 8000a34:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8000a38:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a3a:	4b26      	ldr	r3, [pc, #152]	@ (8000ad4 <MX_ADC1_Init+0x108>)
 8000a3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a40:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a42:	4b24      	ldr	r3, [pc, #144]	@ (8000ad4 <MX_ADC1_Init+0x108>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a4a:	4b22      	ldr	r3, [pc, #136]	@ (8000ad4 <MX_ADC1_Init+0x108>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000a50:	4b20      	ldr	r3, [pc, #128]	@ (8000ad4 <MX_ADC1_Init+0x108>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a58:	481e      	ldr	r0, [pc, #120]	@ (8000ad4 <MX_ADC1_Init+0x108>)
 8000a5a:	f001 fad9 	bl	8002010 <HAL_ADC_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000a64:	f000 fd26 	bl	80014b4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a70:	4619      	mov	r1, r3
 8000a72:	4818      	ldr	r0, [pc, #96]	@ (8000ad4 <MX_ADC1_Init+0x108>)
 8000a74:	f002 fda6 	bl	80035c4 <HAL_ADCEx_MultiModeConfigChannel>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000a7e:	f000 fd19 	bl	80014b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a82:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <MX_ADC1_Init+0x10c>)
 8000a84:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a86:	2306      	movs	r3, #6
 8000a88:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000a8a:	2307      	movs	r3, #7
 8000a8c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a8e:	237f      	movs	r3, #127	@ 0x7f
 8000a90:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a92:	2304      	movs	r3, #4
 8000a94:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	480d      	ldr	r0, [pc, #52]	@ (8000ad4 <MX_ADC1_Init+0x108>)
 8000aa0:	f001 ffce 	bl	8002a40 <HAL_ADC_ConfigChannel>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000aaa:	f000 fd03 	bl	80014b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	@ (8000adc <MX_ADC1_Init+0x110>)
 8000ab0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ab2:	230c      	movs	r3, #12
 8000ab4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4806      	ldr	r0, [pc, #24]	@ (8000ad4 <MX_ADC1_Init+0x108>)
 8000abc:	f001 ffc0 	bl	8002a40 <HAL_ADC_ConfigChannel>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000ac6:	f000 fcf5 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	3730      	adds	r7, #48	@ 0x30
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2000002c 	.word	0x2000002c
 8000ad8:	04300002 	.word	0x04300002
 8000adc:	14f00020 	.word	0x14f00020

08000ae0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <MX_LPUART1_UART_Init+0x8c>)
 8000ae6:	4a22      	ldr	r2, [pc, #136]	@ (8000b70 <MX_LPUART1_UART_Init+0x90>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <MX_LPUART1_UART_Init+0x8c>)
 8000aec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000af0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000af2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <MX_LPUART1_UART_Init+0x8c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000af8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b6c <MX_LPUART1_UART_Init+0x8c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000afe:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <MX_LPUART1_UART_Init+0x8c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b04:	4b19      	ldr	r3, [pc, #100]	@ (8000b6c <MX_LPUART1_UART_Init+0x8c>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0a:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <MX_LPUART1_UART_Init+0x8c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b10:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <MX_LPUART1_UART_Init+0x8c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <MX_LPUART1_UART_Init+0x8c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b1c:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <MX_LPUART1_UART_Init+0x8c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b22:	4812      	ldr	r0, [pc, #72]	@ (8000b6c <MX_LPUART1_UART_Init+0x8c>)
 8000b24:	f006 fa2e 	bl	8006f84 <HAL_UART_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b2e:	f000 fcc1 	bl	80014b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b32:	2100      	movs	r1, #0
 8000b34:	480d      	ldr	r0, [pc, #52]	@ (8000b6c <MX_LPUART1_UART_Init+0x8c>)
 8000b36:	f008 fc38 	bl	80093aa <HAL_UARTEx_SetTxFifoThreshold>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000b40:	f000 fcb8 	bl	80014b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b44:	2100      	movs	r1, #0
 8000b46:	4809      	ldr	r0, [pc, #36]	@ (8000b6c <MX_LPUART1_UART_Init+0x8c>)
 8000b48:	f008 fc6d 	bl	8009426 <HAL_UARTEx_SetRxFifoThreshold>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000b52:	f000 fcaf 	bl	80014b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b56:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <MX_LPUART1_UART_Init+0x8c>)
 8000b58:	f008 fbee 	bl	8009338 <HAL_UARTEx_DisableFifoMode>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000b62:	f000 fca7 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200000f8 	.word	0x200000f8
 8000b70:	40008000 	.word	0x40008000

08000b74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b09c      	sub	sp, #112	@ 0x70
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b7a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b88:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b94:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
 8000ba4:	615a      	str	r2, [r3, #20]
 8000ba6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2234      	movs	r2, #52	@ 0x34
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f008 fcfc 	bl	80095ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bb4:	4b4b      	ldr	r3, [pc, #300]	@ (8000ce4 <MX_TIM1_Init+0x170>)
 8000bb6:	4a4c      	ldr	r2, [pc, #304]	@ (8000ce8 <MX_TIM1_Init+0x174>)
 8000bb8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8000bba:	4b4a      	ldr	r3, [pc, #296]	@ (8000ce4 <MX_TIM1_Init+0x170>)
 8000bbc:	22a9      	movs	r2, #169	@ 0xa9
 8000bbe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc0:	4b48      	ldr	r3, [pc, #288]	@ (8000ce4 <MX_TIM1_Init+0x170>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 32675;
 8000bc6:	4b47      	ldr	r3, [pc, #284]	@ (8000ce4 <MX_TIM1_Init+0x170>)
 8000bc8:	f647 72a3 	movw	r2, #32675	@ 0x7fa3
 8000bcc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bce:	4b45      	ldr	r3, [pc, #276]	@ (8000ce4 <MX_TIM1_Init+0x170>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bd4:	4b43      	ldr	r3, [pc, #268]	@ (8000ce4 <MX_TIM1_Init+0x170>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bda:	4b42      	ldr	r3, [pc, #264]	@ (8000ce4 <MX_TIM1_Init+0x170>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000be0:	4840      	ldr	r0, [pc, #256]	@ (8000ce4 <MX_TIM1_Init+0x170>)
 8000be2:	f004 fc35 	bl	8005450 <HAL_TIM_Base_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000bec:	f000 fc62 	bl	80014b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bf6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4839      	ldr	r0, [pc, #228]	@ (8000ce4 <MX_TIM1_Init+0x170>)
 8000bfe:	f005 fa73 	bl	80060e8 <HAL_TIM_ConfigClockSource>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000c08:	f000 fc54 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c0c:	4835      	ldr	r0, [pc, #212]	@ (8000ce4 <MX_TIM1_Init+0x170>)
 8000c0e:	f004 fd5f 	bl	80056d0 <HAL_TIM_PWM_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000c18:	f000 fc4c 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c20:	2300      	movs	r3, #0
 8000c22:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c28:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	482d      	ldr	r0, [pc, #180]	@ (8000ce4 <MX_TIM1_Init+0x170>)
 8000c30:	f006 f838 	bl	8006ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000c3a:	f000 fc3b 	bl	80014b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c3e:	2360      	movs	r3, #96	@ 0x60
 8000c40:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c46:	2300      	movs	r3, #0
 8000c48:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c52:	2300      	movs	r3, #0
 8000c54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c56:	2300      	movs	r3, #0
 8000c58:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c5a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c5e:	2200      	movs	r2, #0
 8000c60:	4619      	mov	r1, r3
 8000c62:	4820      	ldr	r0, [pc, #128]	@ (8000ce4 <MX_TIM1_Init+0x170>)
 8000c64:	f005 f92c 	bl	8005ec0 <HAL_TIM_PWM_ConfigChannel>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000c6e:	f000 fc21 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c72:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c76:	2204      	movs	r2, #4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	481a      	ldr	r0, [pc, #104]	@ (8000ce4 <MX_TIM1_Init+0x170>)
 8000c7c:	f005 f920 	bl	8005ec0 <HAL_TIM_PWM_ConfigChannel>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000c86:	f000 fc15 	bl	80014b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ca2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000cb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4807      	ldr	r0, [pc, #28]	@ (8000ce4 <MX_TIM1_Init+0x170>)
 8000cc8:	f006 f882 	bl	8006dd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8000cd2:	f000 fbef 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cd6:	4803      	ldr	r0, [pc, #12]	@ (8000ce4 <MX_TIM1_Init+0x170>)
 8000cd8:	f000 fde6 	bl	80018a8 <HAL_TIM_MspPostInit>

}
 8000cdc:	bf00      	nop
 8000cde:	3770      	adds	r7, #112	@ 0x70
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	2000018c 	.word	0x2000018c
 8000ce8:	40012c00 	.word	0x40012c00

08000cec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf2:	f107 0310 	add.w	r3, r7, #16
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d84 <MX_TIM2_Init+0x98>)
 8000d0c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000d12:	4b1c      	ldr	r3, [pc, #112]	@ (8000d84 <MX_TIM2_Init+0x98>)
 8000d14:	22a9      	movs	r2, #169	@ 0xa9
 8000d16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d18:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <MX_TIM2_Init+0x98>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000d1e:	4b19      	ldr	r3, [pc, #100]	@ (8000d84 <MX_TIM2_Init+0x98>)
 8000d20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d26:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <MX_TIM2_Init+0x98>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2c:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <MX_TIM2_Init+0x98>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d32:	4814      	ldr	r0, [pc, #80]	@ (8000d84 <MX_TIM2_Init+0x98>)
 8000d34:	f004 fb8c 	bl	8005450 <HAL_TIM_Base_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d3e:	f000 fbb9 	bl	80014b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480d      	ldr	r0, [pc, #52]	@ (8000d84 <MX_TIM2_Init+0x98>)
 8000d50:	f005 f9ca 	bl	80060e8 <HAL_TIM_ConfigClockSource>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d5a:	f000 fbab 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d5e:	2320      	movs	r3, #32
 8000d60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4806      	ldr	r0, [pc, #24]	@ (8000d84 <MX_TIM2_Init+0x98>)
 8000d6c:	f005 ff9a 	bl	8006ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d76:	f000 fb9d 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	3720      	adds	r7, #32
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200001d8 	.word	0x200001d8

08000d88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8e:	f107 0310 	add.w	r3, r7, #16
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000da6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e1c <MX_TIM3_Init+0x94>)
 8000da8:	4a1d      	ldr	r2, [pc, #116]	@ (8000e20 <MX_TIM3_Init+0x98>)
 8000daa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8000dac:	4b1b      	ldr	r3, [pc, #108]	@ (8000e1c <MX_TIM3_Init+0x94>)
 8000dae:	22a9      	movs	r2, #169	@ 0xa9
 8000db0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e1c <MX_TIM3_Init+0x94>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000db8:	4b18      	ldr	r3, [pc, #96]	@ (8000e1c <MX_TIM3_Init+0x94>)
 8000dba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc0:	4b16      	ldr	r3, [pc, #88]	@ (8000e1c <MX_TIM3_Init+0x94>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc6:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <MX_TIM3_Init+0x94>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dcc:	4813      	ldr	r0, [pc, #76]	@ (8000e1c <MX_TIM3_Init+0x94>)
 8000dce:	f004 fb3f 	bl	8005450 <HAL_TIM_Base_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000dd8:	f000 fb6c 	bl	80014b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ddc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000de0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000de2:	f107 0310 	add.w	r3, r7, #16
 8000de6:	4619      	mov	r1, r3
 8000de8:	480c      	ldr	r0, [pc, #48]	@ (8000e1c <MX_TIM3_Init+0x94>)
 8000dea:	f005 f97d 	bl	80060e8 <HAL_TIM_ConfigClockSource>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000df4:	f000 fb5e 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000df8:	2320      	movs	r3, #32
 8000dfa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	4619      	mov	r1, r3
 8000e04:	4805      	ldr	r0, [pc, #20]	@ (8000e1c <MX_TIM3_Init+0x94>)
 8000e06:	f005 ff4d 	bl	8006ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e10:	f000 fb50 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e14:	bf00      	nop
 8000e16:	3720      	adds	r7, #32
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000224 	.word	0x20000224
 8000e20:	40000400 	.word	0x40000400

08000e24 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08e      	sub	sp, #56	@ 0x38
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e44:	463b      	mov	r3, r7
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]
 8000e52:	615a      	str	r2, [r3, #20]
 8000e54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e56:	4b34      	ldr	r3, [pc, #208]	@ (8000f28 <MX_TIM4_Init+0x104>)
 8000e58:	4a34      	ldr	r2, [pc, #208]	@ (8000f2c <MX_TIM4_Init+0x108>)
 8000e5a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8000e5c:	4b32      	ldr	r3, [pc, #200]	@ (8000f28 <MX_TIM4_Init+0x104>)
 8000e5e:	22a9      	movs	r2, #169	@ 0xa9
 8000e60:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e62:	4b31      	ldr	r3, [pc, #196]	@ (8000f28 <MX_TIM4_Init+0x104>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 32675;
 8000e68:	4b2f      	ldr	r3, [pc, #188]	@ (8000f28 <MX_TIM4_Init+0x104>)
 8000e6a:	f647 72a3 	movw	r2, #32675	@ 0x7fa3
 8000e6e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e70:	4b2d      	ldr	r3, [pc, #180]	@ (8000f28 <MX_TIM4_Init+0x104>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e76:	4b2c      	ldr	r3, [pc, #176]	@ (8000f28 <MX_TIM4_Init+0x104>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e7c:	482a      	ldr	r0, [pc, #168]	@ (8000f28 <MX_TIM4_Init+0x104>)
 8000e7e:	f004 fae7 	bl	8005450 <HAL_TIM_Base_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000e88:	f000 fb14 	bl	80014b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e90:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e96:	4619      	mov	r1, r3
 8000e98:	4823      	ldr	r0, [pc, #140]	@ (8000f28 <MX_TIM4_Init+0x104>)
 8000e9a:	f005 f925 	bl	80060e8 <HAL_TIM_ConfigClockSource>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000ea4:	f000 fb06 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ea8:	481f      	ldr	r0, [pc, #124]	@ (8000f28 <MX_TIM4_Init+0x104>)
 8000eaa:	f004 fc11 	bl	80056d0 <HAL_TIM_PWM_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000eb4:	f000 fafe 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ec0:	f107 031c 	add.w	r3, r7, #28
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4818      	ldr	r0, [pc, #96]	@ (8000f28 <MX_TIM4_Init+0x104>)
 8000ec8:	f005 feec 	bl	8006ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000ed2:	f000 faef 	bl	80014b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ed6:	2360      	movs	r3, #96	@ 0x60
 8000ed8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8000eda:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ede:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ee8:	463b      	mov	r3, r7
 8000eea:	2200      	movs	r2, #0
 8000eec:	4619      	mov	r1, r3
 8000eee:	480e      	ldr	r0, [pc, #56]	@ (8000f28 <MX_TIM4_Init+0x104>)
 8000ef0:	f004 ffe6 	bl	8005ec0 <HAL_TIM_PWM_ConfigChannel>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000efa:	f000 fadb 	bl	80014b4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f02:	463b      	mov	r3, r7
 8000f04:	2204      	movs	r2, #4
 8000f06:	4619      	mov	r1, r3
 8000f08:	4807      	ldr	r0, [pc, #28]	@ (8000f28 <MX_TIM4_Init+0x104>)
 8000f0a:	f004 ffd9 	bl	8005ec0 <HAL_TIM_PWM_ConfigChannel>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8000f14:	f000 face 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f18:	4803      	ldr	r0, [pc, #12]	@ (8000f28 <MX_TIM4_Init+0x104>)
 8000f1a:	f000 fcc5 	bl	80018a8 <HAL_TIM_MspPostInit>

}
 8000f1e:	bf00      	nop
 8000f20:	3738      	adds	r7, #56	@ 0x38
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000270 	.word	0x20000270
 8000f2c:	40000800 	.word	0x40000800

08000f30 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08c      	sub	sp, #48	@ 0x30
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f36:	f107 030c 	add.w	r3, r7, #12
 8000f3a:	2224      	movs	r2, #36	@ 0x24
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f008 fb34 	bl	80095ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f44:	463b      	mov	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f4e:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <MX_TIM5_Init+0xa4>)
 8000f50:	4a21      	ldr	r2, [pc, #132]	@ (8000fd8 <MX_TIM5_Init+0xa8>)
 8000f52:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f54:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd4 <MX_TIM5_Init+0xa4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd4 <MX_TIM5_Init+0xa4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000f60:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <MX_TIM5_Init+0xa4>)
 8000f62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f66:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <MX_TIM5_Init+0xa4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6e:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <MX_TIM5_Init+0xa4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f74:	2303      	movs	r3, #3
 8000f76:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	480d      	ldr	r0, [pc, #52]	@ (8000fd4 <MX_TIM5_Init+0xa4>)
 8000fa0:	f004 fd0a 	bl	80059b8 <HAL_TIM_Encoder_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000faa:	f000 fa83 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <MX_TIM5_Init+0xa4>)
 8000fbc:	f005 fe72 	bl	8006ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000fc6:	f000 fa75 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	3730      	adds	r7, #48	@ 0x30
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200002bc 	.word	0x200002bc
 8000fd8:	40000c00 	.word	0x40000c00

08000fdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000fe2:	4b12      	ldr	r3, [pc, #72]	@ (800102c <MX_DMA_Init+0x50>)
 8000fe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fe6:	4a11      	ldr	r2, [pc, #68]	@ (800102c <MX_DMA_Init+0x50>)
 8000fe8:	f043 0304 	orr.w	r3, r3, #4
 8000fec:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fee:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <MX_DMA_Init+0x50>)
 8000ff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ff2:	f003 0304 	and.w	r3, r3, #4
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <MX_DMA_Init+0x50>)
 8000ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	@ (800102c <MX_DMA_Init+0x50>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6493      	str	r3, [r2, #72]	@ 0x48
 8001006:	4b09      	ldr	r3, [pc, #36]	@ (800102c <MX_DMA_Init+0x50>)
 8001008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2100      	movs	r1, #0
 8001016:	200b      	movs	r0, #11
 8001018:	f002 fcb7 	bl	800398a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800101c:	200b      	movs	r0, #11
 800101e:	f002 fcce 	bl	80039be <HAL_NVIC_EnableIRQ>

}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40021000 	.word	0x40021000

08001030 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	@ 0x28
 8001034:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001046:	4b39      	ldr	r3, [pc, #228]	@ (800112c <MX_GPIO_Init+0xfc>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104a:	4a38      	ldr	r2, [pc, #224]	@ (800112c <MX_GPIO_Init+0xfc>)
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001052:	4b36      	ldr	r3, [pc, #216]	@ (800112c <MX_GPIO_Init+0xfc>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800105e:	4b33      	ldr	r3, [pc, #204]	@ (800112c <MX_GPIO_Init+0xfc>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001062:	4a32      	ldr	r2, [pc, #200]	@ (800112c <MX_GPIO_Init+0xfc>)
 8001064:	f043 0320 	orr.w	r3, r3, #32
 8001068:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800106a:	4b30      	ldr	r3, [pc, #192]	@ (800112c <MX_GPIO_Init+0xfc>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106e:	f003 0320 	and.w	r3, r3, #32
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	4b2d      	ldr	r3, [pc, #180]	@ (800112c <MX_GPIO_Init+0xfc>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107a:	4a2c      	ldr	r2, [pc, #176]	@ (800112c <MX_GPIO_Init+0xfc>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001082:	4b2a      	ldr	r3, [pc, #168]	@ (800112c <MX_GPIO_Init+0xfc>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108e:	4b27      	ldr	r3, [pc, #156]	@ (800112c <MX_GPIO_Init+0xfc>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001092:	4a26      	ldr	r2, [pc, #152]	@ (800112c <MX_GPIO_Init+0xfc>)
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800109a:	4b24      	ldr	r3, [pc, #144]	@ (800112c <MX_GPIO_Init+0xfc>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2130      	movs	r1, #48	@ 0x30
 80010aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ae:	f003 f955 	bl	800435c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2101      	movs	r1, #1
 80010b6:	481e      	ldr	r0, [pc, #120]	@ (8001130 <MX_GPIO_Init+0x100>)
 80010b8:	f003 f950 	bl	800435c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	4818      	ldr	r0, [pc, #96]	@ (8001134 <MX_GPIO_Init+0x104>)
 80010d4:	f002 ffc0 	bl	8004058 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 80010d8:	2330      	movs	r3, #48	@ 0x30
 80010da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010dc:	2301      	movs	r3, #1
 80010de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4619      	mov	r1, r3
 80010ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f2:	f002 ffb1 	bl	8004058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010f6:	2301      	movs	r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fa:	2301      	movs	r3, #1
 80010fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	4808      	ldr	r0, [pc, #32]	@ (8001130 <MX_GPIO_Init+0x100>)
 800110e:	f002 ffa3 	bl	8004058 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	2028      	movs	r0, #40	@ 0x28
 8001118:	f002 fc37 	bl	800398a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800111c:	2028      	movs	r0, #40	@ 0x28
 800111e:	f002 fc4e 	bl	80039be <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	@ 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000
 8001130:	48000400 	.word	0x48000400
 8001134:	48000800 	.word	0x48000800

08001138 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{ //B1 button
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13) {
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001148:	d112      	bne.n	8001170 <HAL_GPIO_EXTI_Callback+0x38>
        // Blue button interrupt occurred
        // Your code here
    	mode = mode + 1;
 800114a:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <HAL_GPIO_EXTI_Callback+0x44>)
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	b29a      	uxth	r2, r3
 8001152:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <HAL_GPIO_EXTI_Callback+0x44>)
 8001154:	801a      	strh	r2, [r3, #0]
    	mode = mode % 3;
 8001156:	4b09      	ldr	r3, [pc, #36]	@ (800117c <HAL_GPIO_EXTI_Callback+0x44>)
 8001158:	881a      	ldrh	r2, [r3, #0]
 800115a:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x48>)
 800115c:	fba3 1302 	umull	r1, r3, r3, r2
 8001160:	0859      	lsrs	r1, r3, #1
 8001162:	460b      	mov	r3, r1
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	440b      	add	r3, r1
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	b29a      	uxth	r2, r3
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <HAL_GPIO_EXTI_Callback+0x44>)
 800116e:	801a      	strh	r2, [r3, #0]
    }
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	20000000 	.word	0x20000000
 8001180:	aaaaaaab 	.word	0xaaaaaaab

08001184 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // Input reading
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if (htim == &htim2 )
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a89      	ldr	r2, [pc, #548]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001190:	4293      	cmp	r3, r2
 8001192:	f040 810b 	bne.w	80013ac <HAL_TIM_PeriodElapsedCallback+0x228>
  {
	  a +=1;
 8001196:	4b88      	ldr	r3, [pc, #544]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	3301      	adds	r3, #1
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b86      	ldr	r3, [pc, #536]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80011a0:	701a      	strb	r2, [r3, #0]
	  a = a%5;
 80011a2:	4b85      	ldr	r3, [pc, #532]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80011a4:	781a      	ldrb	r2, [r3, #0]
 80011a6:	4b85      	ldr	r3, [pc, #532]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x238>)
 80011a8:	fba3 1302 	umull	r1, r3, r3, r2
 80011ac:	0899      	lsrs	r1, r3, #2
 80011ae:	460b      	mov	r3, r1
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	440b      	add	r3, r1
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	4b7f      	ldr	r3, [pc, #508]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80011ba:	701a      	strb	r2, [r3, #0]
	  if (mode ==2) {
 80011bc:	4b80      	ldr	r3, [pc, #512]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d133      	bne.n	800122c <HAL_TIM_PeriodElapsedCallback+0xa8>
		  if(a == 0 ){
 80011c4:	4b7c      	ldr	r3, [pc, #496]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f040 80ef 	bne.w	80013ac <HAL_TIM_PeriodElapsedCallback+0x228>
			  ADCst = (uint8_t)(ADC_RawRead[0] & 0xFF);
 80011ce:	4b7d      	ldr	r3, [pc, #500]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	4b7c      	ldr	r3, [pc, #496]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80011d6:	701a      	strb	r2, [r3, #0]
			  ADCnd = (uint8_t)((ADC_RawRead[0] >> 8) & 0xFF);
 80011d8:	4b7a      	ldr	r3, [pc, #488]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	b29b      	uxth	r3, r3
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4b7a      	ldr	r3, [pc, #488]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0x248>)
 80011e4:	701a      	strb	r2, [r3, #0]

			  txBuffer[0] = 69;
 80011e6:	4b7a      	ldr	r3, [pc, #488]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80011e8:	2245      	movs	r2, #69	@ 0x45
 80011ea:	701a      	strb	r2, [r3, #0]
			  txBuffer[1] = ADCst;
 80011ec:	4b76      	ldr	r3, [pc, #472]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80011ee:	781a      	ldrb	r2, [r3, #0]
 80011f0:	4b77      	ldr	r3, [pc, #476]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80011f2:	705a      	strb	r2, [r3, #1]
			  txBuffer[2] = ADCnd;
 80011f4:	4b75      	ldr	r3, [pc, #468]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0x248>)
 80011f6:	781a      	ldrb	r2, [r3, #0]
 80011f8:	4b75      	ldr	r3, [pc, #468]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80011fa:	709a      	strb	r2, [r3, #2]
			  txBuffer[3] = '\n';
 80011fc:	4b74      	ldr	r3, [pc, #464]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80011fe:	220a      	movs	r2, #10
 8001200:	70da      	strb	r2, [r3, #3]
			  HAL_UART_Transmit_IT(&hlpuart1, txBuffer ,4);
 8001202:	2204      	movs	r2, #4
 8001204:	4972      	ldr	r1, [pc, #456]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001206:	4873      	ldr	r0, [pc, #460]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001208:	f005 ff0c 	bl	8007024 <HAL_UART_Transmit_IT>
			  HAL_UART_Receive_IT(&hlpuart1, rxBuffer, 2);
 800120c:	2202      	movs	r2, #2
 800120e:	4972      	ldr	r1, [pc, #456]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001210:	4870      	ldr	r0, [pc, #448]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001212:	f005 ff9b 	bl	800714c <HAL_UART_Receive_IT>
			  rxBuffer[2] = (rxBuffer[0])/256;
 8001216:	4b70      	ldr	r3, [pc, #448]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001218:	f9b3 3000 	ldrsh.w	r3, [r3]
 800121c:	2b00      	cmp	r3, #0
 800121e:	da00      	bge.n	8001222 <HAL_TIM_PeriodElapsedCallback+0x9e>
 8001220:	33ff      	adds	r3, #255	@ 0xff
 8001222:	121b      	asrs	r3, r3, #8
 8001224:	b21a      	sxth	r2, r3
 8001226:	4b6c      	ldr	r3, [pc, #432]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001228:	809a      	strh	r2, [r3, #4]
  }
//////////////////////////////UART//////////////////////////
  if(htim == &htim3)
  {
  }
}
 800122a:	e0bf      	b.n	80013ac <HAL_TIM_PeriodElapsedCallback+0x228>
	  else if(mode == 1){
 800122c:	4b64      	ldr	r3, [pc, #400]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d145      	bne.n	80012c0 <HAL_TIM_PeriodElapsedCallback+0x13c>
	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim5);
 8001234:	4b69      	ldr	r3, [pc, #420]	@ (80013dc <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800123a:	ee07 3a90 	vmov	s15, r3
 800123e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001242:	4b67      	ldr	r3, [pc, #412]	@ (80013e0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001244:	edc3 7a00 	vstr	s15, [r3]
	  if(QEIReadRaw > 32678)
 8001248:	4b65      	ldr	r3, [pc, #404]	@ (80013e0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800124a:	edd3 7a00 	vldr	s15, [r3]
 800124e:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80013e4 <HAL_TIM_PeriodElapsedCallback+0x260>
 8001252:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125a:	dd18      	ble.n	800128e <HAL_TIM_PeriodElapsedCallback+0x10a>
		  posQEI -= (65536-QEIReadRaw);
 800125c:	4b62      	ldr	r3, [pc, #392]	@ (80013e8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	ee07 3a90 	vmov	s15, r3
 8001264:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001268:	4b5d      	ldr	r3, [pc, #372]	@ (80013e0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800126a:	edd3 7a00 	vldr	s15, [r3]
 800126e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80013ec <HAL_TIM_PeriodElapsedCallback+0x268>
 8001272:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001276:	ee77 7a67 	vsub.f32	s15, s14, s15
 800127a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800127e:	ee17 2a90 	vmov	r2, s15
 8001282:	4b59      	ldr	r3, [pc, #356]	@ (80013e8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001284:	601a      	str	r2, [r3, #0]
		  z = 1;
 8001286:	4b5a      	ldr	r3, [pc, #360]	@ (80013f0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001288:	2201      	movs	r2, #1
 800128a:	801a      	strh	r2, [r3, #0]
 800128c:	e013      	b.n	80012b6 <HAL_TIM_PeriodElapsedCallback+0x132>
		  posQEI += QEIReadRaw;
 800128e:	4b56      	ldr	r3, [pc, #344]	@ (80013e8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	ee07 3a90 	vmov	s15, r3
 8001296:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800129a:	4b51      	ldr	r3, [pc, #324]	@ (80013e0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800129c:	edd3 7a00 	vldr	s15, [r3]
 80012a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012a8:	ee17 2a90 	vmov	r2, s15
 80012ac:	4b4e      	ldr	r3, [pc, #312]	@ (80013e8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80012ae:	601a      	str	r2, [r3, #0]
		  z = 2;
 80012b0:	4b4f      	ldr	r3, [pc, #316]	@ (80013f0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80012b2:	2202      	movs	r2, #2
 80012b4:	801a      	strh	r2, [r3, #0]
	  __HAL_TIM_SET_COUNTER(&htim5, 0);
 80012b6:	4b49      	ldr	r3, [pc, #292]	@ (80013dc <HAL_TIM_PeriodElapsedCallback+0x258>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2200      	movs	r2, #0
 80012bc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80012be:	e075      	b.n	80013ac <HAL_TIM_PeriodElapsedCallback+0x228>
	  else if(mode == 0 || mode == 2){
 80012c0:	4b3f      	ldr	r3, [pc, #252]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_TIM_PeriodElapsedCallback+0x14c>
 80012c8:	4b3d      	ldr	r3, [pc, #244]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d16d      	bne.n	80013ac <HAL_TIM_PeriodElapsedCallback+0x228>
	  posADC = ADC_RawRead[0];
 80012d0:	4b3c      	ldr	r3, [pc, #240]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	b21a      	sxth	r2, r3
 80012d6:	4b47      	ldr	r3, [pc, #284]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80012d8:	801a      	strh	r2, [r3, #0]
	  if(posADC-prev_pos < -2048){ //forward callback
 80012da:	4b46      	ldr	r3, [pc, #280]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80012dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b45      	ldr	r3, [pc, #276]	@ (80013f8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80012e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 80012ee:	da16      	bge.n	800131e <HAL_TIM_PeriodElapsedCallback+0x19a>
		  x += (4096+(posADC-prev_pos));
 80012f0:	4b40      	ldr	r3, [pc, #256]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80012f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	4b3f      	ldr	r3, [pc, #252]	@ (80013f8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80012fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	b29a      	uxth	r2, r3
 8001304:	4b3d      	ldr	r3, [pc, #244]	@ (80013fc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130a:	b29b      	uxth	r3, r3
 800130c:	4413      	add	r3, r2
 800130e:	b29b      	uxth	r3, r3
 8001310:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001314:	b29b      	uxth	r3, r3
 8001316:	b21a      	sxth	r2, r3
 8001318:	4b38      	ldr	r3, [pc, #224]	@ (80013fc <HAL_TIM_PeriodElapsedCallback+0x278>)
 800131a:	801a      	strh	r2, [r3, #0]
 800131c:	e034      	b.n	8001388 <HAL_TIM_PeriodElapsedCallback+0x204>
	  	  else if(posADC-prev_pos > 2048){ //reverse callback
 800131e:	4b35      	ldr	r3, [pc, #212]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001320:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001324:	461a      	mov	r2, r3
 8001326:	4b34      	ldr	r3, [pc, #208]	@ (80013f8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001332:	dd16      	ble.n	8001362 <HAL_TIM_PeriodElapsedCallback+0x1de>
	  		  x -= (4096-(posADC-prev_pos));
 8001334:	4b2f      	ldr	r3, [pc, #188]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001336:	f9b3 3000 	ldrsh.w	r3, [r3]
 800133a:	b29a      	uxth	r2, r3
 800133c:	4b2e      	ldr	r3, [pc, #184]	@ (80013f8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800133e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001342:	b29b      	uxth	r3, r3
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	b29a      	uxth	r2, r3
 8001348:	4b2c      	ldr	r3, [pc, #176]	@ (80013fc <HAL_TIM_PeriodElapsedCallback+0x278>)
 800134a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134e:	b29b      	uxth	r3, r3
 8001350:	4413      	add	r3, r2
 8001352:	b29b      	uxth	r3, r3
 8001354:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8001358:	b29b      	uxth	r3, r3
 800135a:	b21a      	sxth	r2, r3
 800135c:	4b27      	ldr	r3, [pc, #156]	@ (80013fc <HAL_TIM_PeriodElapsedCallback+0x278>)
 800135e:	801a      	strh	r2, [r3, #0]
 8001360:	e012      	b.n	8001388 <HAL_TIM_PeriodElapsedCallback+0x204>
	  		  x += posADC-prev_pos;
 8001362:	4b24      	ldr	r3, [pc, #144]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001368:	b29a      	uxth	r2, r3
 800136a:	4b23      	ldr	r3, [pc, #140]	@ (80013f8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800136c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001370:	b29b      	uxth	r3, r3
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	b29a      	uxth	r2, r3
 8001376:	4b21      	ldr	r3, [pc, #132]	@ (80013fc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137c:	b29b      	uxth	r3, r3
 800137e:	4413      	add	r3, r2
 8001380:	b29b      	uxth	r3, r3
 8001382:	b21a      	sxth	r2, r3
 8001384:	4b1d      	ldr	r3, [pc, #116]	@ (80013fc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001386:	801a      	strh	r2, [r3, #0]
	  y = posADC-prev_pos;
 8001388:	4b1a      	ldr	r3, [pc, #104]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800138a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800138e:	b29a      	uxth	r2, r3
 8001390:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001396:	b29b      	uxth	r3, r3
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	b29b      	uxth	r3, r3
 800139c:	b21a      	sxth	r2, r3
 800139e:	4b18      	ldr	r3, [pc, #96]	@ (8001400 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80013a0:	801a      	strh	r2, [r3, #0]
	  	  prev_pos = posADC;
 80013a2:	4b14      	ldr	r3, [pc, #80]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80013a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013a8:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80013aa:	801a      	strh	r2, [r3, #0]
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200001d8 	.word	0x200001d8
 80013b8:	20000364 	.word	0x20000364
 80013bc:	cccccccd 	.word	0xcccccccd
 80013c0:	20000000 	.word	0x20000000
 80013c4:	20000328 	.word	0x20000328
 80013c8:	20000366 	.word	0x20000366
 80013cc:	20000367 	.word	0x20000367
 80013d0:	20000368 	.word	0x20000368
 80013d4:	200000f8 	.word	0x200000f8
 80013d8:	2000035c 	.word	0x2000035c
 80013dc:	200002bc 	.word	0x200002bc
 80013e0:	20000324 	.word	0x20000324
 80013e4:	46ff4c00 	.word	0x46ff4c00
 80013e8:	20000318 	.word	0x20000318
 80013ec:	47800000 	.word	0x47800000
 80013f0:	2000030c 	.word	0x2000030c
 80013f4:	20000350 	.word	0x20000350
 80013f8:	20000354 	.word	0x20000354
 80013fc:	20000308 	.word	0x20000308
 8001400:	2000030a 	.word	0x2000030a

08001404 <DriveF>:

void DriveF(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8001408:	4b10      	ldr	r3, [pc, #64]	@ (800144c <DriveF+0x48>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2200      	movs	r2, #0
 800140e:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001410:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <DriveF+0x4c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2200      	movs	r2, #0
 8001416:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM1);
 8001418:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <DriveF+0x50>)
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <DriveF+0x48>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001426:	ee17 2a90 	vmov	r2, s15
 800142a:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM2);
 800142c:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <DriveF+0x54>)
 800142e:	edd3 7a00 	vldr	s15, [r3]
 8001432:	4b07      	ldr	r3, [pc, #28]	@ (8001450 <DriveF+0x4c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800143a:	ee17 2a90 	vmov	r2, s15
 800143e:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20000270 	.word	0x20000270
 8001450:	2000018c 	.word	0x2000018c
 8001454:	2000031c 	.word	0x2000031c
 8001458:	20000320 	.word	0x20000320

0800145c <DriveC>:
void DriveC(void){
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001460:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <DriveC+0x48>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2200      	movs	r2, #0
 8001466:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001468:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <DriveC+0x4c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2200      	movs	r2, #0
 800146e:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, PWM1);
 8001470:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <DriveC+0x50>)
 8001472:	edd3 7a00 	vldr	s15, [r3]
 8001476:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <DriveC+0x48>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800147e:	ee17 2a90 	vmov	r2, s15
 8001482:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM2);
 8001484:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <DriveC+0x54>)
 8001486:	edd3 7a00 	vldr	s15, [r3]
 800148a:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <DriveC+0x4c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001492:	ee17 2a90 	vmov	r2, s15
 8001496:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000270 	.word	0x20000270
 80014a8:	2000018c 	.word	0x2000018c
 80014ac:	2000031c 	.word	0x2000031c
 80014b0:	20000320 	.word	0x20000320

080014b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b8:	b672      	cpsid	i
}
 80014ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <Error_Handler+0x8>

080014c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <HAL_MspInit+0x44>)
 80014c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001504 <HAL_MspInit+0x44>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80014d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <HAL_MspInit+0x44>)
 80014d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <HAL_MspInit+0x44>)
 80014e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e2:	4a08      	ldr	r2, [pc, #32]	@ (8001504 <HAL_MspInit+0x44>)
 80014e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ea:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <HAL_MspInit+0x44>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80014f6:	f003 f81f 	bl	8004538 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40021000 	.word	0x40021000

08001508 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b0a0      	sub	sp, #128	@ 0x80
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001520:	f107 0318 	add.w	r3, r7, #24
 8001524:	2254      	movs	r2, #84	@ 0x54
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f008 f83f 	bl	80095ac <memset>
  if(hadc->Instance==ADC1)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001536:	f040 8081 	bne.w	800163c <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800153a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800153e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001540:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001544:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001546:	f107 0318 	add.w	r3, r7, #24
 800154a:	4618      	mov	r0, r3
 800154c:	f003 fd32 	bl	8004fb4 <HAL_RCCEx_PeriphCLKConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001556:	f7ff ffad 	bl	80014b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800155a:	4b3a      	ldr	r3, [pc, #232]	@ (8001644 <HAL_ADC_MspInit+0x13c>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155e:	4a39      	ldr	r2, [pc, #228]	@ (8001644 <HAL_ADC_MspInit+0x13c>)
 8001560:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001564:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001566:	4b37      	ldr	r3, [pc, #220]	@ (8001644 <HAL_ADC_MspInit+0x13c>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	4b34      	ldr	r3, [pc, #208]	@ (8001644 <HAL_ADC_MspInit+0x13c>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001576:	4a33      	ldr	r2, [pc, #204]	@ (8001644 <HAL_ADC_MspInit+0x13c>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157e:	4b31      	ldr	r3, [pc, #196]	@ (8001644 <HAL_ADC_MspInit+0x13c>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158a:	4b2e      	ldr	r3, [pc, #184]	@ (8001644 <HAL_ADC_MspInit+0x13c>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158e:	4a2d      	ldr	r2, [pc, #180]	@ (8001644 <HAL_ADC_MspInit+0x13c>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001596:	4b2b      	ldr	r3, [pc, #172]	@ (8001644 <HAL_ADC_MspInit+0x13c>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015a2:	2301      	movs	r3, #1
 80015a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015a6:	2303      	movs	r3, #3
 80015a8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ae:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80015b2:	4619      	mov	r1, r3
 80015b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b8:	f002 fd4e 	bl	8004058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80015bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c2:	2303      	movs	r3, #3
 80015c4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ca:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80015ce:	4619      	mov	r1, r3
 80015d0:	481d      	ldr	r0, [pc, #116]	@ (8001648 <HAL_ADC_MspInit+0x140>)
 80015d2:	f002 fd41 	bl	8004058 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80015d6:	4b1d      	ldr	r3, [pc, #116]	@ (800164c <HAL_ADC_MspInit+0x144>)
 80015d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001650 <HAL_ADC_MspInit+0x148>)
 80015da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80015dc:	4b1b      	ldr	r3, [pc, #108]	@ (800164c <HAL_ADC_MspInit+0x144>)
 80015de:	2205      	movs	r2, #5
 80015e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015e2:	4b1a      	ldr	r3, [pc, #104]	@ (800164c <HAL_ADC_MspInit+0x144>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e8:	4b18      	ldr	r3, [pc, #96]	@ (800164c <HAL_ADC_MspInit+0x144>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015ee:	4b17      	ldr	r3, [pc, #92]	@ (800164c <HAL_ADC_MspInit+0x144>)
 80015f0:	2280      	movs	r2, #128	@ 0x80
 80015f2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015f4:	4b15      	ldr	r3, [pc, #84]	@ (800164c <HAL_ADC_MspInit+0x144>)
 80015f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015fa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015fc:	4b13      	ldr	r3, [pc, #76]	@ (800164c <HAL_ADC_MspInit+0x144>)
 80015fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001602:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001604:	4b11      	ldr	r3, [pc, #68]	@ (800164c <HAL_ADC_MspInit+0x144>)
 8001606:	2220      	movs	r2, #32
 8001608:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <HAL_ADC_MspInit+0x144>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001610:	480e      	ldr	r0, [pc, #56]	@ (800164c <HAL_ADC_MspInit+0x144>)
 8001612:	f002 f9ef 	bl	80039f4 <HAL_DMA_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_ADC_MspInit+0x118>
    {
      Error_Handler();
 800161c:	f7ff ff4a 	bl	80014b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a0a      	ldr	r2, [pc, #40]	@ (800164c <HAL_ADC_MspInit+0x144>)
 8001624:	655a      	str	r2, [r3, #84]	@ 0x54
 8001626:	4a09      	ldr	r2, [pc, #36]	@ (800164c <HAL_ADC_MspInit+0x144>)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800162c:	2200      	movs	r2, #0
 800162e:	2100      	movs	r1, #0
 8001630:	2012      	movs	r0, #18
 8001632:	f002 f9aa 	bl	800398a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001636:	2012      	movs	r0, #18
 8001638:	f002 f9c1 	bl	80039be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800163c:	bf00      	nop
 800163e:	3780      	adds	r7, #128	@ 0x80
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40021000 	.word	0x40021000
 8001648:	48000400 	.word	0x48000400
 800164c:	20000098 	.word	0x20000098
 8001650:	40020008 	.word	0x40020008

08001654 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b09e      	sub	sp, #120	@ 0x78
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	2254      	movs	r2, #84	@ 0x54
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f007 ff99 	bl	80095ac <memset>
  if(huart->Instance==LPUART1)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a23      	ldr	r2, [pc, #140]	@ (800170c <HAL_UART_MspInit+0xb8>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d13e      	bne.n	8001702 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001684:	2320      	movs	r3, #32
 8001686:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001688:	2300      	movs	r3, #0
 800168a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	4618      	mov	r0, r3
 8001692:	f003 fc8f 	bl	8004fb4 <HAL_RCCEx_PeriphCLKConfig>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800169c:	f7ff ff0a 	bl	80014b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80016a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001710 <HAL_UART_MspInit+0xbc>)
 80016a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016a4:	4a1a      	ldr	r2, [pc, #104]	@ (8001710 <HAL_UART_MspInit+0xbc>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80016ac:	4b18      	ldr	r3, [pc, #96]	@ (8001710 <HAL_UART_MspInit+0xbc>)
 80016ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b8:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <HAL_UART_MspInit+0xbc>)
 80016ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016bc:	4a14      	ldr	r2, [pc, #80]	@ (8001710 <HAL_UART_MspInit+0xbc>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016c4:	4b12      	ldr	r3, [pc, #72]	@ (8001710 <HAL_UART_MspInit+0xbc>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80016d0:	230c      	movs	r3, #12
 80016d2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80016e0:	230c      	movs	r3, #12
 80016e2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80016e8:	4619      	mov	r1, r3
 80016ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ee:	f002 fcb3 	bl	8004058 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2100      	movs	r1, #0
 80016f6:	205b      	movs	r0, #91	@ 0x5b
 80016f8:	f002 f947 	bl	800398a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80016fc:	205b      	movs	r0, #91	@ 0x5b
 80016fe:	f002 f95e 	bl	80039be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001702:	bf00      	nop
 8001704:	3778      	adds	r7, #120	@ 0x78
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40008000 	.word	0x40008000
 8001710:	40021000 	.word	0x40021000

08001714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a2c      	ldr	r2, [pc, #176]	@ (80017d4 <HAL_TIM_Base_MspInit+0xc0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d10c      	bne.n	8001740 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001726:	4b2c      	ldr	r3, [pc, #176]	@ (80017d8 <HAL_TIM_Base_MspInit+0xc4>)
 8001728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800172a:	4a2b      	ldr	r2, [pc, #172]	@ (80017d8 <HAL_TIM_Base_MspInit+0xc4>)
 800172c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001730:	6613      	str	r3, [r2, #96]	@ 0x60
 8001732:	4b29      	ldr	r3, [pc, #164]	@ (80017d8 <HAL_TIM_Base_MspInit+0xc4>)
 8001734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001736:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800173e:	e044      	b.n	80017ca <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001748:	d114      	bne.n	8001774 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800174a:	4b23      	ldr	r3, [pc, #140]	@ (80017d8 <HAL_TIM_Base_MspInit+0xc4>)
 800174c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174e:	4a22      	ldr	r2, [pc, #136]	@ (80017d8 <HAL_TIM_Base_MspInit+0xc4>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6593      	str	r3, [r2, #88]	@ 0x58
 8001756:	4b20      	ldr	r3, [pc, #128]	@ (80017d8 <HAL_TIM_Base_MspInit+0xc4>)
 8001758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	201c      	movs	r0, #28
 8001768:	f002 f90f 	bl	800398a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800176c:	201c      	movs	r0, #28
 800176e:	f002 f926 	bl	80039be <HAL_NVIC_EnableIRQ>
}
 8001772:	e02a      	b.n	80017ca <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a18      	ldr	r2, [pc, #96]	@ (80017dc <HAL_TIM_Base_MspInit+0xc8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d114      	bne.n	80017a8 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800177e:	4b16      	ldr	r3, [pc, #88]	@ (80017d8 <HAL_TIM_Base_MspInit+0xc4>)
 8001780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001782:	4a15      	ldr	r2, [pc, #84]	@ (80017d8 <HAL_TIM_Base_MspInit+0xc4>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	6593      	str	r3, [r2, #88]	@ 0x58
 800178a:	4b13      	ldr	r3, [pc, #76]	@ (80017d8 <HAL_TIM_Base_MspInit+0xc4>)
 800178c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	201d      	movs	r0, #29
 800179c:	f002 f8f5 	bl	800398a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017a0:	201d      	movs	r0, #29
 80017a2:	f002 f90c 	bl	80039be <HAL_NVIC_EnableIRQ>
}
 80017a6:	e010      	b.n	80017ca <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0c      	ldr	r2, [pc, #48]	@ (80017e0 <HAL_TIM_Base_MspInit+0xcc>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d10b      	bne.n	80017ca <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017b2:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <HAL_TIM_Base_MspInit+0xc4>)
 80017b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b6:	4a08      	ldr	r2, [pc, #32]	@ (80017d8 <HAL_TIM_Base_MspInit+0xc4>)
 80017b8:	f043 0304 	orr.w	r3, r3, #4
 80017bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80017be:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_TIM_Base_MspInit+0xc4>)
 80017c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
}
 80017ca:	bf00      	nop
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40012c00 	.word	0x40012c00
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40000400 	.word	0x40000400
 80017e0:	40000800 	.word	0x40000800

080017e4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	@ 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a25      	ldr	r2, [pc, #148]	@ (8001898 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d144      	bne.n	8001890 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001806:	4b25      	ldr	r3, [pc, #148]	@ (800189c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180a:	4a24      	ldr	r2, [pc, #144]	@ (800189c <HAL_TIM_Encoder_MspInit+0xb8>)
 800180c:	f043 0308 	orr.w	r3, r3, #8
 8001810:	6593      	str	r3, [r2, #88]	@ 0x58
 8001812:	4b22      	ldr	r3, [pc, #136]	@ (800189c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181e:	4b1f      	ldr	r3, [pc, #124]	@ (800189c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001822:	4a1e      	ldr	r2, [pc, #120]	@ (800189c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800182a:	4b1c      	ldr	r3, [pc, #112]	@ (800189c <HAL_TIM_Encoder_MspInit+0xb8>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001836:	4b19      	ldr	r3, [pc, #100]	@ (800189c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183a:	4a18      	ldr	r2, [pc, #96]	@ (800189c <HAL_TIM_Encoder_MspInit+0xb8>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001842:	4b16      	ldr	r3, [pc, #88]	@ (800189c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PB2     ------> TIM5_CH1
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800184e:	2304      	movs	r3, #4
 8001850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800185e:	2302      	movs	r3, #2
 8001860:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4619      	mov	r1, r3
 8001868:	480d      	ldr	r0, [pc, #52]	@ (80018a0 <HAL_TIM_Encoder_MspInit+0xbc>)
 800186a:	f002 fbf5 	bl	8004058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800186e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8001880:	2301      	movs	r3, #1
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	4806      	ldr	r0, [pc, #24]	@ (80018a4 <HAL_TIM_Encoder_MspInit+0xc0>)
 800188c:	f002 fbe4 	bl	8004058 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001890:	bf00      	nop
 8001892:	3728      	adds	r7, #40	@ 0x28
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40000c00 	.word	0x40000c00
 800189c:	40021000 	.word	0x40021000
 80018a0:	48000400 	.word	0x48000400
 80018a4:	48000800 	.word	0x48000800

080018a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	@ 0x28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a23      	ldr	r2, [pc, #140]	@ (8001954 <HAL_TIM_MspPostInit+0xac>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d11c      	bne.n	8001904 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ca:	4b23      	ldr	r3, [pc, #140]	@ (8001958 <HAL_TIM_MspPostInit+0xb0>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ce:	4a22      	ldr	r2, [pc, #136]	@ (8001958 <HAL_TIM_MspPostInit+0xb0>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018d6:	4b20      	ldr	r3, [pc, #128]	@ (8001958 <HAL_TIM_MspPostInit+0xb0>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018e2:	2303      	movs	r3, #3
 80018e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80018f2:	2302      	movs	r3, #2
 80018f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	4817      	ldr	r0, [pc, #92]	@ (800195c <HAL_TIM_MspPostInit+0xb4>)
 80018fe:	f002 fbab 	bl	8004058 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001902:	e022      	b.n	800194a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a15      	ldr	r2, [pc, #84]	@ (8001960 <HAL_TIM_MspPostInit+0xb8>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d11d      	bne.n	800194a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190e:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <HAL_TIM_MspPostInit+0xb0>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001912:	4a11      	ldr	r2, [pc, #68]	@ (8001958 <HAL_TIM_MspPostInit+0xb0>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800191a:	4b0f      	ldr	r3, [pc, #60]	@ (8001958 <HAL_TIM_MspPostInit+0xb0>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001926:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800192a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001938:	230a      	movs	r3, #10
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4619      	mov	r1, r3
 8001942:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001946:	f002 fb87 	bl	8004058 <HAL_GPIO_Init>
}
 800194a:	bf00      	nop
 800194c:	3728      	adds	r7, #40	@ 0x28
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40012c00 	.word	0x40012c00
 8001958:	40021000 	.word	0x40021000
 800195c:	48000800 	.word	0x48000800
 8001960:	40000800 	.word	0x40000800

08001964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <NMI_Handler+0x4>

0800196c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <HardFault_Handler+0x4>

08001974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <MemManage_Handler+0x4>

0800197c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <BusFault_Handler+0x4>

08001984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <UsageFault_Handler+0x4>

0800198c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ba:	f000 f8cb 	bl	8001b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019c8:	4802      	ldr	r0, [pc, #8]	@ (80019d4 <DMA1_Channel1_IRQHandler+0x10>)
 80019ca:	f002 f9f6 	bl	8003dba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000098 	.word	0x20000098

080019d8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80019dc:	4802      	ldr	r0, [pc, #8]	@ (80019e8 <ADC1_2_IRQHandler+0x10>)
 80019de:	f000 fda7 	bl	8002530 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	2000002c 	.word	0x2000002c

080019ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019f0:	4802      	ldr	r0, [pc, #8]	@ (80019fc <TIM2_IRQHandler+0x10>)
 80019f2:	f004 f915 	bl	8005c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200001d8 	.word	0x200001d8

08001a00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a04:	4802      	ldr	r0, [pc, #8]	@ (8001a10 <TIM3_IRQHandler+0x10>)
 8001a06:	f004 f90b 	bl	8005c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000224 	.word	0x20000224

08001a14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a18:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a1c:	f002 fcd0 	bl	80043c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001a28:	4802      	ldr	r0, [pc, #8]	@ (8001a34 <LPUART1_IRQHandler+0x10>)
 8001a2a:	f005 fbdb 	bl	80071e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200000f8 	.word	0x200000f8

08001a38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a3c:	4b06      	ldr	r3, [pc, #24]	@ (8001a58 <SystemInit+0x20>)
 8001a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a42:	4a05      	ldr	r2, [pc, #20]	@ (8001a58 <SystemInit+0x20>)
 8001a44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a5c:	480d      	ldr	r0, [pc, #52]	@ (8001a94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a5e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a60:	f7ff ffea 	bl	8001a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a64:	480c      	ldr	r0, [pc, #48]	@ (8001a98 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a66:	490d      	ldr	r1, [pc, #52]	@ (8001a9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a68:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa0 <LoopForever+0xe>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a6c:	e002      	b.n	8001a74 <LoopCopyDataInit>

08001a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a72:	3304      	adds	r3, #4

08001a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a78:	d3f9      	bcc.n	8001a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a7c:	4c0a      	ldr	r4, [pc, #40]	@ (8001aa8 <LoopForever+0x16>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a80:	e001      	b.n	8001a86 <LoopFillZerobss>

08001a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a84:	3204      	adds	r2, #4

08001a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a88:	d3fb      	bcc.n	8001a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a8a:	f007 fd97 	bl	80095bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a8e:	f7fe fd3b 	bl	8000508 <main>

08001a92 <LoopForever>:

LoopForever:
    b LoopForever
 8001a92:	e7fe      	b.n	8001a92 <LoopForever>
  ldr   r0, =_estack
 8001a94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a9c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001aa0:	0800966c 	.word	0x0800966c
  ldr r2, =_sbss
 8001aa4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001aa8:	20000374 	.word	0x20000374

08001aac <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001aac:	e7fe      	b.n	8001aac <ADC3_IRQHandler>

08001aae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab8:	2003      	movs	r0, #3
 8001aba:	f001 ff5b 	bl	8003974 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f000 f80e 	bl	8001ae0 <HAL_InitTick>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d002      	beq.n	8001ad0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	71fb      	strb	r3, [r7, #7]
 8001ace:	e001      	b.n	8001ad4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ad0:	f7ff fcf6 	bl	80014c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ad4:	79fb      	ldrb	r3, [r7, #7]

}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001aec:	4b16      	ldr	r3, [pc, #88]	@ (8001b48 <HAL_InitTick+0x68>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d022      	beq.n	8001b3a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001af4:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <HAL_InitTick+0x6c>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b13      	ldr	r3, [pc, #76]	@ (8001b48 <HAL_InitTick+0x68>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b00:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f001 ff66 	bl	80039da <HAL_SYSTICK_Config>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10f      	bne.n	8001b34 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b0f      	cmp	r3, #15
 8001b18:	d809      	bhi.n	8001b2e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b22:	f001 ff32 	bl	800398a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b26:	4a0a      	ldr	r2, [pc, #40]	@ (8001b50 <HAL_InitTick+0x70>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	e007      	b.n	8001b3e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	73fb      	strb	r3, [r7, #15]
 8001b32:	e004      	b.n	8001b3e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	73fb      	strb	r3, [r7, #15]
 8001b38:	e001      	b.n	8001b3e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	2000000c 	.word	0x2000000c
 8001b4c:	20000004 	.word	0x20000004
 8001b50:	20000008 	.word	0x20000008

08001b54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b58:	4b05      	ldr	r3, [pc, #20]	@ (8001b70 <HAL_IncTick+0x1c>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b05      	ldr	r3, [pc, #20]	@ (8001b74 <HAL_IncTick+0x20>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4413      	add	r3, r2
 8001b62:	4a03      	ldr	r2, [pc, #12]	@ (8001b70 <HAL_IncTick+0x1c>)
 8001b64:	6013      	str	r3, [r2, #0]
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	20000370 	.word	0x20000370
 8001b74:	2000000c 	.word	0x2000000c

08001b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b7c:	4b03      	ldr	r3, [pc, #12]	@ (8001b8c <HAL_GetTick+0x14>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000370 	.word	0x20000370

08001b90 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	609a      	str	r2, [r3, #8]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b087      	sub	sp, #28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	3360      	adds	r3, #96	@ 0x60
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <LL_ADC_SetOffset+0x44>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	4313      	orrs	r3, r2
 8001c28:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c30:	bf00      	nop
 8001c32:	371c      	adds	r7, #28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	03fff000 	.word	0x03fff000

08001c40 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3360      	adds	r3, #96	@ 0x60
 8001c4e:	461a      	mov	r2, r3
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	3360      	adds	r3, #96	@ 0x60
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	431a      	orrs	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c96:	bf00      	nop
 8001c98:	371c      	adds	r7, #28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b087      	sub	sp, #28
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	3360      	adds	r3, #96	@ 0x60
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001ccc:	bf00      	nop
 8001cce:	371c      	adds	r7, #28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b087      	sub	sp, #28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	3360      	adds	r3, #96	@ 0x60
 8001ce8:	461a      	mov	r2, r3
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001d02:	bf00      	nop
 8001d04:	371c      	adds	r7, #28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	615a      	str	r2, [r3, #20]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b087      	sub	sp, #28
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	3330      	adds	r3, #48	@ 0x30
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	0a1b      	lsrs	r3, r3, #8
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	4413      	add	r3, r2
 8001d78:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	f003 031f 	and.w	r3, r3, #31
 8001d84:	211f      	movs	r1, #31
 8001d86:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	401a      	ands	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	0e9b      	lsrs	r3, r3, #26
 8001d92:	f003 011f 	and.w	r1, r3, #31
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	f003 031f 	and.w	r3, r3, #31
 8001d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001da0:	431a      	orrs	r2, r3
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001da6:	bf00      	nop
 8001da8:	371c      	adds	r7, #28
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dbe:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	3314      	adds	r3, #20
 8001de8:	461a      	mov	r2, r3
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	0e5b      	lsrs	r3, r3, #25
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	4413      	add	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	0d1b      	lsrs	r3, r3, #20
 8001e00:	f003 031f 	and.w	r3, r3, #31
 8001e04:	2107      	movs	r1, #7
 8001e06:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	401a      	ands	r2, r3
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	0d1b      	lsrs	r3, r3, #20
 8001e12:	f003 031f 	and.w	r3, r3, #31
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e22:	bf00      	nop
 8001e24:	371c      	adds	r7, #28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f003 0318 	and.w	r3, r3, #24
 8001e52:	4908      	ldr	r1, [pc, #32]	@ (8001e74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e54:	40d9      	lsrs	r1, r3
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	400b      	ands	r3, r1
 8001e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e66:	bf00      	nop
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	0007ffff 	.word	0x0007ffff

08001e78 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 031f 	and.w	r3, r3, #31
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001ec0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6093      	str	r3, [r2, #8]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ee4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ee8:	d101      	bne.n	8001eee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001f0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f10:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f38:	d101      	bne.n	8001f3e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f60:	f043 0201 	orr.w	r2, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <LL_ADC_IsEnabled+0x18>
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e000      	b.n	8001f8e <LL_ADC_IsEnabled+0x1a>
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001faa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fae:	f043 0204 	orr.w	r2, r3, #4
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d101      	bne.n	8001fda <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d101      	bne.n	8002000 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b089      	sub	sp, #36	@ 0x24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002018:	2300      	movs	r3, #0
 800201a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e1a9      	b.n	800237e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002034:	2b00      	cmp	r3, #0
 8002036:	d109      	bne.n	800204c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff fa65 	bl	8001508 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ff3f 	bl	8001ed4 <LL_ADC_IsDeepPowerDownEnabled>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d004      	beq.n	8002066 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff25 	bl	8001eb0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff ff5a 	bl	8001f24 <LL_ADC_IsInternalRegulatorEnabled>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d115      	bne.n	80020a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff ff3e 	bl	8001efc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002080:	4b9c      	ldr	r3, [pc, #624]	@ (80022f4 <HAL_ADC_Init+0x2e4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	099b      	lsrs	r3, r3, #6
 8002086:	4a9c      	ldr	r2, [pc, #624]	@ (80022f8 <HAL_ADC_Init+0x2e8>)
 8002088:	fba2 2303 	umull	r2, r3, r2, r3
 800208c:	099b      	lsrs	r3, r3, #6
 800208e:	3301      	adds	r3, #1
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002094:	e002      	b.n	800209c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	3b01      	subs	r3, #1
 800209a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f9      	bne.n	8002096 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff ff3c 	bl	8001f24 <LL_ADC_IsInternalRegulatorEnabled>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10d      	bne.n	80020ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b6:	f043 0210 	orr.w	r2, r3, #16
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c2:	f043 0201 	orr.w	r2, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff ff75 	bl	8001fc2 <LL_ADC_REG_IsConversionOngoing>
 80020d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020de:	f003 0310 	and.w	r3, r3, #16
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f040 8142 	bne.w	800236c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f040 813e 	bne.w	800236c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80020f8:	f043 0202 	orr.w	r2, r3, #2
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff35 	bl	8001f74 <LL_ADC_IsEnabled>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d141      	bne.n	8002194 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002118:	d004      	beq.n	8002124 <HAL_ADC_Init+0x114>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a77      	ldr	r2, [pc, #476]	@ (80022fc <HAL_ADC_Init+0x2ec>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d10f      	bne.n	8002144 <HAL_ADC_Init+0x134>
 8002124:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002128:	f7ff ff24 	bl	8001f74 <LL_ADC_IsEnabled>
 800212c:	4604      	mov	r4, r0
 800212e:	4873      	ldr	r0, [pc, #460]	@ (80022fc <HAL_ADC_Init+0x2ec>)
 8002130:	f7ff ff20 	bl	8001f74 <LL_ADC_IsEnabled>
 8002134:	4603      	mov	r3, r0
 8002136:	4323      	orrs	r3, r4
 8002138:	2b00      	cmp	r3, #0
 800213a:	bf0c      	ite	eq
 800213c:	2301      	moveq	r3, #1
 800213e:	2300      	movne	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	e012      	b.n	800216a <HAL_ADC_Init+0x15a>
 8002144:	486e      	ldr	r0, [pc, #440]	@ (8002300 <HAL_ADC_Init+0x2f0>)
 8002146:	f7ff ff15 	bl	8001f74 <LL_ADC_IsEnabled>
 800214a:	4604      	mov	r4, r0
 800214c:	486d      	ldr	r0, [pc, #436]	@ (8002304 <HAL_ADC_Init+0x2f4>)
 800214e:	f7ff ff11 	bl	8001f74 <LL_ADC_IsEnabled>
 8002152:	4603      	mov	r3, r0
 8002154:	431c      	orrs	r4, r3
 8002156:	486c      	ldr	r0, [pc, #432]	@ (8002308 <HAL_ADC_Init+0x2f8>)
 8002158:	f7ff ff0c 	bl	8001f74 <LL_ADC_IsEnabled>
 800215c:	4603      	mov	r3, r0
 800215e:	4323      	orrs	r3, r4
 8002160:	2b00      	cmp	r3, #0
 8002162:	bf0c      	ite	eq
 8002164:	2301      	moveq	r3, #1
 8002166:	2300      	movne	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d012      	beq.n	8002194 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002176:	d004      	beq.n	8002182 <HAL_ADC_Init+0x172>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a5f      	ldr	r2, [pc, #380]	@ (80022fc <HAL_ADC_Init+0x2ec>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d101      	bne.n	8002186 <HAL_ADC_Init+0x176>
 8002182:	4a62      	ldr	r2, [pc, #392]	@ (800230c <HAL_ADC_Init+0x2fc>)
 8002184:	e000      	b.n	8002188 <HAL_ADC_Init+0x178>
 8002186:	4a62      	ldr	r2, [pc, #392]	@ (8002310 <HAL_ADC_Init+0x300>)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4619      	mov	r1, r3
 800218e:	4610      	mov	r0, r2
 8002190:	f7ff fcfe 	bl	8001b90 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	7f5b      	ldrb	r3, [r3, #29]
 8002198:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800219e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80021a4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80021aa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021b2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d106      	bne.n	80021d0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c6:	3b01      	subs	r3, #1
 80021c8:	045b      	lsls	r3, r3, #17
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d009      	beq.n	80021ec <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021dc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	4b48      	ldr	r3, [pc, #288]	@ (8002314 <HAL_ADC_Init+0x304>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	69b9      	ldr	r1, [r7, #24]
 80021fc:	430b      	orrs	r3, r1
 80021fe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fee4 	bl	8001fe8 <LL_ADC_INJ_IsConversionOngoing>
 8002220:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d17f      	bne.n	8002328 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d17c      	bne.n	8002328 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002232:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800223a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800224a:	f023 0302 	bic.w	r3, r3, #2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	69b9      	ldr	r1, [r7, #24]
 8002254:	430b      	orrs	r3, r1
 8002256:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d017      	beq.n	8002290 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691a      	ldr	r2, [r3, #16]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800226e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002278:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800227c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6911      	ldr	r1, [r2, #16]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	430b      	orrs	r3, r1
 800228a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800228e:	e013      	b.n	80022b8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800229e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80022b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022b4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d12a      	bne.n	8002318 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80022cc:	f023 0304 	bic.w	r3, r3, #4
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022d8:	4311      	orrs	r1, r2
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80022de:	4311      	orrs	r1, r2
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80022e4:	430a      	orrs	r2, r1
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0201 	orr.w	r2, r2, #1
 80022f0:	611a      	str	r2, [r3, #16]
 80022f2:	e019      	b.n	8002328 <HAL_ADC_Init+0x318>
 80022f4:	20000004 	.word	0x20000004
 80022f8:	053e2d63 	.word	0x053e2d63
 80022fc:	50000100 	.word	0x50000100
 8002300:	50000400 	.word	0x50000400
 8002304:	50000500 	.word	0x50000500
 8002308:	50000600 	.word	0x50000600
 800230c:	50000300 	.word	0x50000300
 8002310:	50000700 	.word	0x50000700
 8002314:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	691a      	ldr	r2, [r3, #16]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0201 	bic.w	r2, r2, #1
 8002326:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d10c      	bne.n	800234a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002336:	f023 010f 	bic.w	r1, r3, #15
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	1e5a      	subs	r2, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	631a      	str	r2, [r3, #48]	@ 0x30
 8002348:	e007      	b.n	800235a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 020f 	bic.w	r2, r2, #15
 8002358:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235e:	f023 0303 	bic.w	r3, r3, #3
 8002362:	f043 0201 	orr.w	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	65da      	str	r2, [r3, #92]	@ 0x5c
 800236a:	e007      	b.n	800237c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002370:	f043 0210 	orr.w	r2, r3, #16
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800237c:	7ffb      	ldrb	r3, [r7, #31]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3724      	adds	r7, #36	@ 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd90      	pop	{r4, r7, pc}
 8002386:	bf00      	nop

08002388 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800239c:	d004      	beq.n	80023a8 <HAL_ADC_Start_DMA+0x20>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a5a      	ldr	r2, [pc, #360]	@ (800250c <HAL_ADC_Start_DMA+0x184>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d101      	bne.n	80023ac <HAL_ADC_Start_DMA+0x24>
 80023a8:	4b59      	ldr	r3, [pc, #356]	@ (8002510 <HAL_ADC_Start_DMA+0x188>)
 80023aa:	e000      	b.n	80023ae <HAL_ADC_Start_DMA+0x26>
 80023ac:	4b59      	ldr	r3, [pc, #356]	@ (8002514 <HAL_ADC_Start_DMA+0x18c>)
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fd62 	bl	8001e78 <LL_ADC_GetMultimode>
 80023b4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fe01 	bl	8001fc2 <LL_ADC_REG_IsConversionOngoing>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f040 809b 	bne.w	80024fe <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_ADC_Start_DMA+0x4e>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e096      	b.n	8002504 <HAL_ADC_Start_DMA+0x17c>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a4d      	ldr	r2, [pc, #308]	@ (8002518 <HAL_ADC_Start_DMA+0x190>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d008      	beq.n	80023fa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d005      	beq.n	80023fa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d002      	beq.n	80023fa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	2b09      	cmp	r3, #9
 80023f8:	d17a      	bne.n	80024f0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 ff60 	bl	80032c0 <ADC_Enable>
 8002400:	4603      	mov	r3, r0
 8002402:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002404:	7dfb      	ldrb	r3, [r7, #23]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d16d      	bne.n	80024e6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800240e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a3a      	ldr	r2, [pc, #232]	@ (800250c <HAL_ADC_Start_DMA+0x184>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d009      	beq.n	800243c <HAL_ADC_Start_DMA+0xb4>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a3b      	ldr	r2, [pc, #236]	@ (800251c <HAL_ADC_Start_DMA+0x194>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d002      	beq.n	8002438 <HAL_ADC_Start_DMA+0xb0>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	e003      	b.n	8002440 <HAL_ADC_Start_DMA+0xb8>
 8002438:	4b39      	ldr	r3, [pc, #228]	@ (8002520 <HAL_ADC_Start_DMA+0x198>)
 800243a:	e001      	b.n	8002440 <HAL_ADC_Start_DMA+0xb8>
 800243c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	6812      	ldr	r2, [r2, #0]
 8002444:	4293      	cmp	r3, r2
 8002446:	d002      	beq.n	800244e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d105      	bne.n	800245a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002452:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800245e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d006      	beq.n	8002474 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800246a:	f023 0206 	bic.w	r2, r3, #6
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	661a      	str	r2, [r3, #96]	@ 0x60
 8002472:	e002      	b.n	800247a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247e:	4a29      	ldr	r2, [pc, #164]	@ (8002524 <HAL_ADC_Start_DMA+0x19c>)
 8002480:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002486:	4a28      	ldr	r2, [pc, #160]	@ (8002528 <HAL_ADC_Start_DMA+0x1a0>)
 8002488:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800248e:	4a27      	ldr	r2, [pc, #156]	@ (800252c <HAL_ADC_Start_DMA+0x1a4>)
 8002490:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	221c      	movs	r2, #28
 8002498:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f042 0210 	orr.w	r2, r2, #16
 80024b0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f042 0201 	orr.w	r2, r2, #1
 80024c0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	3340      	adds	r3, #64	@ 0x40
 80024cc:	4619      	mov	r1, r3
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f001 fb37 	bl	8003b44 <HAL_DMA_Start_IT>
 80024d6:	4603      	mov	r3, r0
 80024d8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fd5b 	bl	8001f9a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80024e4:	e00d      	b.n	8002502 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80024ee:	e008      	b.n	8002502 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80024fc:	e001      	b.n	8002502 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024fe:	2302      	movs	r3, #2
 8002500:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002502:	7dfb      	ldrb	r3, [r7, #23]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	50000100 	.word	0x50000100
 8002510:	50000300 	.word	0x50000300
 8002514:	50000700 	.word	0x50000700
 8002518:	50000600 	.word	0x50000600
 800251c:	50000500 	.word	0x50000500
 8002520:	50000400 	.word	0x50000400
 8002524:	080033ed 	.word	0x080033ed
 8002528:	080034c5 	.word	0x080034c5
 800252c:	080034e1 	.word	0x080034e1

08002530 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	@ 0x28
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002538:	2300      	movs	r3, #0
 800253a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002554:	d004      	beq.n	8002560 <HAL_ADC_IRQHandler+0x30>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a8e      	ldr	r2, [pc, #568]	@ (8002794 <HAL_ADC_IRQHandler+0x264>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d101      	bne.n	8002564 <HAL_ADC_IRQHandler+0x34>
 8002560:	4b8d      	ldr	r3, [pc, #564]	@ (8002798 <HAL_ADC_IRQHandler+0x268>)
 8002562:	e000      	b.n	8002566 <HAL_ADC_IRQHandler+0x36>
 8002564:	4b8d      	ldr	r3, [pc, #564]	@ (800279c <HAL_ADC_IRQHandler+0x26c>)
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fc86 	bl	8001e78 <LL_ADC_GetMultimode>
 800256c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d017      	beq.n	80025a8 <HAL_ADC_IRQHandler+0x78>
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d012      	beq.n	80025a8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	2b00      	cmp	r3, #0
 800258c:	d105      	bne.n	800259a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002592:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f001 f808 	bl	80035b0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2202      	movs	r2, #2
 80025a6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d004      	beq.n	80025bc <HAL_ADC_IRQHandler+0x8c>
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10b      	bne.n	80025d4 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 8094 	beq.w	80026f0 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 808e 	beq.w	80026f0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d8:	f003 0310 	and.w	r3, r3, #16
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d105      	bne.n	80025ec <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fb9f 	bl	8001d34 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d072      	beq.n	80026e2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a64      	ldr	r2, [pc, #400]	@ (8002794 <HAL_ADC_IRQHandler+0x264>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d009      	beq.n	800261a <HAL_ADC_IRQHandler+0xea>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a65      	ldr	r2, [pc, #404]	@ (80027a0 <HAL_ADC_IRQHandler+0x270>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d002      	beq.n	8002616 <HAL_ADC_IRQHandler+0xe6>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	e003      	b.n	800261e <HAL_ADC_IRQHandler+0xee>
 8002616:	4b63      	ldr	r3, [pc, #396]	@ (80027a4 <HAL_ADC_IRQHandler+0x274>)
 8002618:	e001      	b.n	800261e <HAL_ADC_IRQHandler+0xee>
 800261a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6812      	ldr	r2, [r2, #0]
 8002622:	4293      	cmp	r3, r2
 8002624:	d008      	beq.n	8002638 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	2b05      	cmp	r3, #5
 8002630:	d002      	beq.n	8002638 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2b09      	cmp	r3, #9
 8002636:	d104      	bne.n	8002642 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	623b      	str	r3, [r7, #32]
 8002640:	e014      	b.n	800266c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a53      	ldr	r2, [pc, #332]	@ (8002794 <HAL_ADC_IRQHandler+0x264>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d009      	beq.n	8002660 <HAL_ADC_IRQHandler+0x130>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a53      	ldr	r2, [pc, #332]	@ (80027a0 <HAL_ADC_IRQHandler+0x270>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d002      	beq.n	800265c <HAL_ADC_IRQHandler+0x12c>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	e003      	b.n	8002664 <HAL_ADC_IRQHandler+0x134>
 800265c:	4b51      	ldr	r3, [pc, #324]	@ (80027a4 <HAL_ADC_IRQHandler+0x274>)
 800265e:	e001      	b.n	8002664 <HAL_ADC_IRQHandler+0x134>
 8002660:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002664:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d135      	bne.n	80026e2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0308 	and.w	r3, r3, #8
 8002680:	2b08      	cmp	r3, #8
 8002682:	d12e      	bne.n	80026e2 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fc9a 	bl	8001fc2 <LL_ADC_REG_IsConversionOngoing>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d11a      	bne.n	80026ca <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 020c 	bic.w	r2, r2, #12
 80026a2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d112      	bne.n	80026e2 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c0:	f043 0201 	orr.w	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026c8:	e00b      	b.n	80026e2 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ce:	f043 0210 	orr.w	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026da:	f043 0201 	orr.w	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f984 	bl	80029f0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	220c      	movs	r2, #12
 80026ee:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f003 0320 	and.w	r3, r3, #32
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d004      	beq.n	8002704 <HAL_ADC_IRQHandler+0x1d4>
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	f003 0320 	and.w	r3, r3, #32
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10b      	bne.n	800271c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 80b3 	beq.w	8002876 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 80ad 	beq.w	8002876 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	2b00      	cmp	r3, #0
 8002726:	d105      	bne.n	8002734 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800272c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fb3a 	bl	8001db2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800273e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff faf5 	bl	8001d34 <LL_ADC_REG_IsTriggerSourceSWStart>
 800274a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a10      	ldr	r2, [pc, #64]	@ (8002794 <HAL_ADC_IRQHandler+0x264>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d009      	beq.n	800276a <HAL_ADC_IRQHandler+0x23a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a11      	ldr	r2, [pc, #68]	@ (80027a0 <HAL_ADC_IRQHandler+0x270>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d002      	beq.n	8002766 <HAL_ADC_IRQHandler+0x236>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	e003      	b.n	800276e <HAL_ADC_IRQHandler+0x23e>
 8002766:	4b0f      	ldr	r3, [pc, #60]	@ (80027a4 <HAL_ADC_IRQHandler+0x274>)
 8002768:	e001      	b.n	800276e <HAL_ADC_IRQHandler+0x23e>
 800276a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	4293      	cmp	r3, r2
 8002774:	d008      	beq.n	8002788 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	2b06      	cmp	r3, #6
 8002780:	d002      	beq.n	8002788 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2b07      	cmp	r3, #7
 8002786:	d10f      	bne.n	80027a8 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	623b      	str	r3, [r7, #32]
 8002790:	e01f      	b.n	80027d2 <HAL_ADC_IRQHandler+0x2a2>
 8002792:	bf00      	nop
 8002794:	50000100 	.word	0x50000100
 8002798:	50000300 	.word	0x50000300
 800279c:	50000700 	.word	0x50000700
 80027a0:	50000500 	.word	0x50000500
 80027a4:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a8b      	ldr	r2, [pc, #556]	@ (80029dc <HAL_ADC_IRQHandler+0x4ac>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d009      	beq.n	80027c6 <HAL_ADC_IRQHandler+0x296>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a8a      	ldr	r2, [pc, #552]	@ (80029e0 <HAL_ADC_IRQHandler+0x4b0>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d002      	beq.n	80027c2 <HAL_ADC_IRQHandler+0x292>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	e003      	b.n	80027ca <HAL_ADC_IRQHandler+0x29a>
 80027c2:	4b88      	ldr	r3, [pc, #544]	@ (80029e4 <HAL_ADC_IRQHandler+0x4b4>)
 80027c4:	e001      	b.n	80027ca <HAL_ADC_IRQHandler+0x29a>
 80027c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80027ca:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d047      	beq.n	8002868 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d007      	beq.n	80027f2 <HAL_ADC_IRQHandler+0x2c2>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d03f      	beq.n	8002868 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d13a      	bne.n	8002868 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027fc:	2b40      	cmp	r3, #64	@ 0x40
 80027fe:	d133      	bne.n	8002868 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d12e      	bne.n	8002868 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff fbea 	bl	8001fe8 <LL_ADC_INJ_IsConversionOngoing>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d11a      	bne.n	8002850 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002828:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800283a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d112      	bne.n	8002868 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002846:	f043 0201 	orr.w	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800284e:	e00b      	b.n	8002868 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002854:	f043 0210 	orr.w	r2, r3, #16
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002860:	f043 0201 	orr.w	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 fe79 	bl	8003560 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2260      	movs	r2, #96	@ 0x60
 8002874:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800287c:	2b00      	cmp	r3, #0
 800287e:	d011      	beq.n	80028a4 <HAL_ADC_IRQHandler+0x374>
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00c      	beq.n	80028a4 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f8be 	bl	8002a18 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2280      	movs	r2, #128	@ 0x80
 80028a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d012      	beq.n	80028d4 <HAL_ADC_IRQHandler+0x3a4>
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00d      	beq.n	80028d4 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028bc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 fe5f 	bl	8003588 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d012      	beq.n	8002904 <HAL_ADC_IRQHandler+0x3d4>
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00d      	beq.n	8002904 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 fe51 	bl	800359c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002902:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f003 0310 	and.w	r3, r3, #16
 800290a:	2b00      	cmp	r3, #0
 800290c:	d043      	beq.n	8002996 <HAL_ADC_IRQHandler+0x466>
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	2b00      	cmp	r3, #0
 8002916:	d03e      	beq.n	8002996 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800291c:	2b00      	cmp	r3, #0
 800291e:	d102      	bne.n	8002926 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002920:	2301      	movs	r3, #1
 8002922:	627b      	str	r3, [r7, #36]	@ 0x24
 8002924:	e021      	b.n	800296a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d015      	beq.n	8002958 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002934:	d004      	beq.n	8002940 <HAL_ADC_IRQHandler+0x410>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a28      	ldr	r2, [pc, #160]	@ (80029dc <HAL_ADC_IRQHandler+0x4ac>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d101      	bne.n	8002944 <HAL_ADC_IRQHandler+0x414>
 8002940:	4b29      	ldr	r3, [pc, #164]	@ (80029e8 <HAL_ADC_IRQHandler+0x4b8>)
 8002942:	e000      	b.n	8002946 <HAL_ADC_IRQHandler+0x416>
 8002944:	4b29      	ldr	r3, [pc, #164]	@ (80029ec <HAL_ADC_IRQHandler+0x4bc>)
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff faa4 	bl	8001e94 <LL_ADC_GetMultiDMATransfer>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00b      	beq.n	800296a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002952:	2301      	movs	r3, #1
 8002954:	627b      	str	r3, [r7, #36]	@ 0x24
 8002956:	e008      	b.n	800296a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002966:	2301      	movs	r3, #1
 8002968:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296c:	2b01      	cmp	r3, #1
 800296e:	d10e      	bne.n	800298e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002974:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002980:	f043 0202 	orr.w	r2, r3, #2
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f84f 	bl	8002a2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2210      	movs	r2, #16
 8002994:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800299c:	2b00      	cmp	r3, #0
 800299e:	d018      	beq.n	80029d2 <HAL_ADC_IRQHandler+0x4a2>
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d013      	beq.n	80029d2 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ae:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ba:	f043 0208 	orr.w	r2, r3, #8
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029ca:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 fdd1 	bl	8003574 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80029d2:	bf00      	nop
 80029d4:	3728      	adds	r7, #40	@ 0x28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	50000100 	.word	0x50000100
 80029e0:	50000500 	.word	0x50000500
 80029e4:	50000400 	.word	0x50000400
 80029e8:	50000300 	.word	0x50000300
 80029ec:	50000700 	.word	0x50000700

080029f0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b0b6      	sub	sp, #216	@ 0xd8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d102      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x24>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	f000 bc13 	b.w	800328a <HAL_ADC_ConfigChannel+0x84a>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff faa6 	bl	8001fc2 <LL_ADC_REG_IsConversionOngoing>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f040 83f3 	bne.w	8003264 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	6859      	ldr	r1, [r3, #4]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	f7ff f965 	bl	8001d5a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fa94 	bl	8001fc2 <LL_ADC_REG_IsConversionOngoing>
 8002a9a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff faa0 	bl	8001fe8 <LL_ADC_INJ_IsConversionOngoing>
 8002aa8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002aac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f040 81d9 	bne.w	8002e68 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ab6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f040 81d4 	bne.w	8002e68 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ac8:	d10f      	bne.n	8002aea <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	f7ff f97f 	bl	8001dd8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff f913 	bl	8001d0e <LL_ADC_SetSamplingTimeCommonConfig>
 8002ae8:	e00e      	b.n	8002b08 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6818      	ldr	r0, [r3, #0]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	6819      	ldr	r1, [r3, #0]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	461a      	mov	r2, r3
 8002af8:	f7ff f96e 	bl	8001dd8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2100      	movs	r1, #0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff f903 	bl	8001d0e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	695a      	ldr	r2, [r3, #20]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	08db      	lsrs	r3, r3, #3
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d022      	beq.n	8002b70 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	6919      	ldr	r1, [r3, #16]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b3a:	f7ff f85d 	bl	8001bf8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	6919      	ldr	r1, [r3, #16]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	f7ff f8a9 	bl	8001ca2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d102      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x126>
 8002b60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b64:	e000      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x128>
 8002b66:	2300      	movs	r3, #0
 8002b68:	461a      	mov	r2, r3
 8002b6a:	f7ff f8b5 	bl	8001cd8 <LL_ADC_SetOffsetSaturation>
 8002b6e:	e17b      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2100      	movs	r1, #0
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff f862 	bl	8001c40 <LL_ADC_GetOffsetChannel>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10a      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x15c>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff f857 	bl	8001c40 <LL_ADC_GetOffsetChannel>
 8002b92:	4603      	mov	r3, r0
 8002b94:	0e9b      	lsrs	r3, r3, #26
 8002b96:	f003 021f 	and.w	r2, r3, #31
 8002b9a:	e01e      	b.n	8002bda <HAL_ADC_ConfigChannel+0x19a>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff f84c 	bl	8001c40 <LL_ADC_GetOffsetChannel>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002bb2:	fa93 f3a3 	rbit	r3, r3
 8002bb6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bbe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002bca:	2320      	movs	r3, #32
 8002bcc:	e004      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002bce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bd2:	fab3 f383 	clz	r3, r3
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d105      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x1b2>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	0e9b      	lsrs	r3, r3, #26
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	e018      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x1e4>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002c06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002c0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002c16:	2320      	movs	r3, #32
 8002c18:	e004      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002c1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c1e:	fab3 f383 	clz	r3, r3
 8002c22:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d106      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff f81b 	bl	8001c6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fe ffff 	bl	8001c40 <LL_ADC_GetOffsetChannel>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10a      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x222>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2101      	movs	r1, #1
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fe fff4 	bl	8001c40 <LL_ADC_GetOffsetChannel>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	0e9b      	lsrs	r3, r3, #26
 8002c5c:	f003 021f 	and.w	r2, r3, #31
 8002c60:	e01e      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x260>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2101      	movs	r1, #1
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fe ffe9 	bl	8001c40 <LL_ADC_GetOffsetChannel>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c78:	fa93 f3a3 	rbit	r3, r3
 8002c7c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002c80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002c88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002c90:	2320      	movs	r3, #32
 8002c92:	e004      	b.n	8002c9e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002c94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c98:	fab3 f383 	clz	r3, r3
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d105      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x278>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	0e9b      	lsrs	r3, r3, #26
 8002cb2:	f003 031f 	and.w	r3, r3, #31
 8002cb6:	e018      	b.n	8002cea <HAL_ADC_ConfigChannel+0x2aa>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cc4:	fa93 f3a3 	rbit	r3, r3
 8002cc8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002ccc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002cd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002cd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002cdc:	2320      	movs	r3, #32
 8002cde:	e004      	b.n	8002cea <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002ce0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ce4:	fab3 f383 	clz	r3, r3
 8002ce8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d106      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe ffb8 	bl	8001c6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2102      	movs	r1, #2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fe ff9c 	bl	8001c40 <LL_ADC_GetOffsetChannel>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10a      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x2e8>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2102      	movs	r1, #2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fe ff91 	bl	8001c40 <LL_ADC_GetOffsetChannel>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	0e9b      	lsrs	r3, r3, #26
 8002d22:	f003 021f 	and.w	r2, r3, #31
 8002d26:	e01e      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x326>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2102      	movs	r1, #2
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe ff86 	bl	8001c40 <LL_ADC_GetOffsetChannel>
 8002d34:	4603      	mov	r3, r0
 8002d36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002d46:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002d4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002d56:	2320      	movs	r3, #32
 8002d58:	e004      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002d5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d105      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x33e>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	0e9b      	lsrs	r3, r3, #26
 8002d78:	f003 031f 	and.w	r3, r3, #31
 8002d7c:	e016      	b.n	8002dac <HAL_ADC_ConfigChannel+0x36c>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d86:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d8a:	fa93 f3a3 	rbit	r3, r3
 8002d8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002d90:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002d96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002d9e:	2320      	movs	r3, #32
 8002da0:	e004      	b.n	8002dac <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002da2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002da6:	fab3 f383 	clz	r3, r3
 8002daa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d106      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2200      	movs	r2, #0
 8002db6:	2102      	movs	r1, #2
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fe ff57 	bl	8001c6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2103      	movs	r1, #3
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fe ff3b 	bl	8001c40 <LL_ADC_GetOffsetChannel>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10a      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x3aa>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2103      	movs	r1, #3
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe ff30 	bl	8001c40 <LL_ADC_GetOffsetChannel>
 8002de0:	4603      	mov	r3, r0
 8002de2:	0e9b      	lsrs	r3, r3, #26
 8002de4:	f003 021f 	and.w	r2, r3, #31
 8002de8:	e017      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x3da>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2103      	movs	r1, #3
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fe ff25 	bl	8001c40 <LL_ADC_GetOffsetChannel>
 8002df6:	4603      	mov	r3, r0
 8002df8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dfc:	fa93 f3a3 	rbit	r3, r3
 8002e00:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002e02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e04:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002e06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002e0c:	2320      	movs	r3, #32
 8002e0e:	e003      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002e10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d105      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x3f2>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	0e9b      	lsrs	r3, r3, #26
 8002e2c:	f003 031f 	and.w	r3, r3, #31
 8002e30:	e011      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x416>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e3a:	fa93 f3a3 	rbit	r3, r3
 8002e3e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002e40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e42:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002e44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002e4a:	2320      	movs	r3, #32
 8002e4c:	e003      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002e4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e50:	fab3 f383 	clz	r3, r3
 8002e54:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d106      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2103      	movs	r1, #3
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe ff02 	bl	8001c6c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff f881 	bl	8001f74 <LL_ADC_IsEnabled>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f040 813d 	bne.w	80030f4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	6819      	ldr	r1, [r3, #0]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	461a      	mov	r2, r3
 8002e88:	f7fe ffd2 	bl	8001e30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	4aa2      	ldr	r2, [pc, #648]	@ (800311c <HAL_ADC_ConfigChannel+0x6dc>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	f040 812e 	bne.w	80030f4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10b      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x480>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	0e9b      	lsrs	r3, r3, #26
 8002eae:	3301      	adds	r3, #1
 8002eb0:	f003 031f 	and.w	r3, r3, #31
 8002eb4:	2b09      	cmp	r3, #9
 8002eb6:	bf94      	ite	ls
 8002eb8:	2301      	movls	r3, #1
 8002eba:	2300      	movhi	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	e019      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x4b4>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ec8:	fa93 f3a3 	rbit	r3, r3
 8002ecc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002ece:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ed0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002ed2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002ed8:	2320      	movs	r3, #32
 8002eda:	e003      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002edc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ede:	fab3 f383 	clz	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f003 031f 	and.w	r3, r3, #31
 8002eea:	2b09      	cmp	r3, #9
 8002eec:	bf94      	ite	ls
 8002eee:	2301      	movls	r3, #1
 8002ef0:	2300      	movhi	r3, #0
 8002ef2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d079      	beq.n	8002fec <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d107      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x4d4>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	0e9b      	lsrs	r3, r3, #26
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	069b      	lsls	r3, r3, #26
 8002f0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f12:	e015      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x500>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f1c:	fa93 f3a3 	rbit	r3, r3
 8002f20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002f22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f24:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002f26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002f2c:	2320      	movs	r3, #32
 8002f2e:	e003      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002f30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f32:	fab3 f383 	clz	r3, r3
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	3301      	adds	r3, #1
 8002f3a:	069b      	lsls	r3, r3, #26
 8002f3c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d109      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x520>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	0e9b      	lsrs	r3, r3, #26
 8002f52:	3301      	adds	r3, #1
 8002f54:	f003 031f 	and.w	r3, r3, #31
 8002f58:	2101      	movs	r1, #1
 8002f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5e:	e017      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x550>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f68:	fa93 f3a3 	rbit	r3, r3
 8002f6c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002f6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f70:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002f78:	2320      	movs	r3, #32
 8002f7a:	e003      	b.n	8002f84 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002f7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f7e:	fab3 f383 	clz	r3, r3
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	3301      	adds	r3, #1
 8002f86:	f003 031f 	and.w	r3, r3, #31
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f90:	ea42 0103 	orr.w	r1, r2, r3
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10a      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x576>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	0e9b      	lsrs	r3, r3, #26
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	f003 021f 	and.w	r2, r3, #31
 8002fac:	4613      	mov	r3, r2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	4413      	add	r3, r2
 8002fb2:	051b      	lsls	r3, r3, #20
 8002fb4:	e018      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x5a8>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fbe:	fa93 f3a3 	rbit	r3, r3
 8002fc2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002fce:	2320      	movs	r3, #32
 8002fd0:	e003      	b.n	8002fda <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fd4:	fab3 f383 	clz	r3, r3
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	3301      	adds	r3, #1
 8002fdc:	f003 021f 	and.w	r2, r3, #31
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	4413      	add	r3, r2
 8002fe6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	e07e      	b.n	80030ea <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d107      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x5c8>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	0e9b      	lsrs	r3, r3, #26
 8002ffe:	3301      	adds	r3, #1
 8003000:	069b      	lsls	r3, r3, #26
 8003002:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003006:	e015      	b.n	8003034 <HAL_ADC_ConfigChannel+0x5f4>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003010:	fa93 f3a3 	rbit	r3, r3
 8003014:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003018:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800301a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003020:	2320      	movs	r3, #32
 8003022:	e003      	b.n	800302c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003026:	fab3 f383 	clz	r3, r3
 800302a:	b2db      	uxtb	r3, r3
 800302c:	3301      	adds	r3, #1
 800302e:	069b      	lsls	r3, r3, #26
 8003030:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800303c:	2b00      	cmp	r3, #0
 800303e:	d109      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x614>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	0e9b      	lsrs	r3, r3, #26
 8003046:	3301      	adds	r3, #1
 8003048:	f003 031f 	and.w	r3, r3, #31
 800304c:	2101      	movs	r1, #1
 800304e:	fa01 f303 	lsl.w	r3, r1, r3
 8003052:	e017      	b.n	8003084 <HAL_ADC_ConfigChannel+0x644>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	fa93 f3a3 	rbit	r3, r3
 8003060:	61fb      	str	r3, [r7, #28]
  return result;
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800306c:	2320      	movs	r3, #32
 800306e:	e003      	b.n	8003078 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003072:	fab3 f383 	clz	r3, r3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	3301      	adds	r3, #1
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	2101      	movs	r1, #1
 8003080:	fa01 f303 	lsl.w	r3, r1, r3
 8003084:	ea42 0103 	orr.w	r1, r2, r3
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10d      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x670>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	0e9b      	lsrs	r3, r3, #26
 800309a:	3301      	adds	r3, #1
 800309c:	f003 021f 	and.w	r2, r3, #31
 80030a0:	4613      	mov	r3, r2
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	4413      	add	r3, r2
 80030a6:	3b1e      	subs	r3, #30
 80030a8:	051b      	lsls	r3, r3, #20
 80030aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80030ae:	e01b      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x6a8>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	fa93 f3a3 	rbit	r3, r3
 80030bc:	613b      	str	r3, [r7, #16]
  return result;
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80030c8:	2320      	movs	r3, #32
 80030ca:	e003      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	fab3 f383 	clz	r3, r3
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	3301      	adds	r3, #1
 80030d6:	f003 021f 	and.w	r2, r3, #31
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	3b1e      	subs	r3, #30
 80030e2:	051b      	lsls	r3, r3, #20
 80030e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030e8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030ee:	4619      	mov	r1, r3
 80030f0:	f7fe fe72 	bl	8001dd8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	4b09      	ldr	r3, [pc, #36]	@ (8003120 <HAL_ADC_ConfigChannel+0x6e0>)
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80be 	beq.w	800327e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800310a:	d004      	beq.n	8003116 <HAL_ADC_ConfigChannel+0x6d6>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a04      	ldr	r2, [pc, #16]	@ (8003124 <HAL_ADC_ConfigChannel+0x6e4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d10a      	bne.n	800312c <HAL_ADC_ConfigChannel+0x6ec>
 8003116:	4b04      	ldr	r3, [pc, #16]	@ (8003128 <HAL_ADC_ConfigChannel+0x6e8>)
 8003118:	e009      	b.n	800312e <HAL_ADC_ConfigChannel+0x6ee>
 800311a:	bf00      	nop
 800311c:	407f0000 	.word	0x407f0000
 8003120:	80080000 	.word	0x80080000
 8003124:	50000100 	.word	0x50000100
 8003128:	50000300 	.word	0x50000300
 800312c:	4b59      	ldr	r3, [pc, #356]	@ (8003294 <HAL_ADC_ConfigChannel+0x854>)
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe fd54 	bl	8001bdc <LL_ADC_GetCommonPathInternalCh>
 8003134:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a56      	ldr	r2, [pc, #344]	@ (8003298 <HAL_ADC_ConfigChannel+0x858>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d004      	beq.n	800314c <HAL_ADC_ConfigChannel+0x70c>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a55      	ldr	r2, [pc, #340]	@ (800329c <HAL_ADC_ConfigChannel+0x85c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d13a      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800314c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003150:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d134      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003160:	d005      	beq.n	800316e <HAL_ADC_ConfigChannel+0x72e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a4e      	ldr	r2, [pc, #312]	@ (80032a0 <HAL_ADC_ConfigChannel+0x860>)
 8003168:	4293      	cmp	r3, r2
 800316a:	f040 8085 	bne.w	8003278 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003176:	d004      	beq.n	8003182 <HAL_ADC_ConfigChannel+0x742>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a49      	ldr	r2, [pc, #292]	@ (80032a4 <HAL_ADC_ConfigChannel+0x864>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d101      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x746>
 8003182:	4a49      	ldr	r2, [pc, #292]	@ (80032a8 <HAL_ADC_ConfigChannel+0x868>)
 8003184:	e000      	b.n	8003188 <HAL_ADC_ConfigChannel+0x748>
 8003186:	4a43      	ldr	r2, [pc, #268]	@ (8003294 <HAL_ADC_ConfigChannel+0x854>)
 8003188:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800318c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003190:	4619      	mov	r1, r3
 8003192:	4610      	mov	r0, r2
 8003194:	f7fe fd0f 	bl	8001bb6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003198:	4b44      	ldr	r3, [pc, #272]	@ (80032ac <HAL_ADC_ConfigChannel+0x86c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	099b      	lsrs	r3, r3, #6
 800319e:	4a44      	ldr	r2, [pc, #272]	@ (80032b0 <HAL_ADC_ConfigChannel+0x870>)
 80031a0:	fba2 2303 	umull	r2, r3, r2, r3
 80031a4:	099b      	lsrs	r3, r3, #6
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	4613      	mov	r3, r2
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031b2:	e002      	b.n	80031ba <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1f9      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031c0:	e05a      	b.n	8003278 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a3b      	ldr	r2, [pc, #236]	@ (80032b4 <HAL_ADC_ConfigChannel+0x874>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d125      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d11f      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a31      	ldr	r2, [pc, #196]	@ (80032a4 <HAL_ADC_ConfigChannel+0x864>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d104      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x7ac>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a34      	ldr	r2, [pc, #208]	@ (80032b8 <HAL_ADC_ConfigChannel+0x878>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d047      	beq.n	800327c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031f4:	d004      	beq.n	8003200 <HAL_ADC_ConfigChannel+0x7c0>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a2a      	ldr	r2, [pc, #168]	@ (80032a4 <HAL_ADC_ConfigChannel+0x864>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d101      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x7c4>
 8003200:	4a29      	ldr	r2, [pc, #164]	@ (80032a8 <HAL_ADC_ConfigChannel+0x868>)
 8003202:	e000      	b.n	8003206 <HAL_ADC_ConfigChannel+0x7c6>
 8003204:	4a23      	ldr	r2, [pc, #140]	@ (8003294 <HAL_ADC_ConfigChannel+0x854>)
 8003206:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800320a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800320e:	4619      	mov	r1, r3
 8003210:	4610      	mov	r0, r2
 8003212:	f7fe fcd0 	bl	8001bb6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003216:	e031      	b.n	800327c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a27      	ldr	r2, [pc, #156]	@ (80032bc <HAL_ADC_ConfigChannel+0x87c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d12d      	bne.n	800327e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003222:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d127      	bne.n	800327e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a1c      	ldr	r2, [pc, #112]	@ (80032a4 <HAL_ADC_ConfigChannel+0x864>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d022      	beq.n	800327e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003240:	d004      	beq.n	800324c <HAL_ADC_ConfigChannel+0x80c>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a17      	ldr	r2, [pc, #92]	@ (80032a4 <HAL_ADC_ConfigChannel+0x864>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d101      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x810>
 800324c:	4a16      	ldr	r2, [pc, #88]	@ (80032a8 <HAL_ADC_ConfigChannel+0x868>)
 800324e:	e000      	b.n	8003252 <HAL_ADC_ConfigChannel+0x812>
 8003250:	4a10      	ldr	r2, [pc, #64]	@ (8003294 <HAL_ADC_ConfigChannel+0x854>)
 8003252:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003256:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800325a:	4619      	mov	r1, r3
 800325c:	4610      	mov	r0, r2
 800325e:	f7fe fcaa 	bl	8001bb6 <LL_ADC_SetCommonPathInternalCh>
 8003262:	e00c      	b.n	800327e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003268:	f043 0220 	orr.w	r2, r3, #32
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003276:	e002      	b.n	800327e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003278:	bf00      	nop
 800327a:	e000      	b.n	800327e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800327c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003286:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800328a:	4618      	mov	r0, r3
 800328c:	37d8      	adds	r7, #216	@ 0xd8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	50000700 	.word	0x50000700
 8003298:	c3210000 	.word	0xc3210000
 800329c:	90c00010 	.word	0x90c00010
 80032a0:	50000600 	.word	0x50000600
 80032a4:	50000100 	.word	0x50000100
 80032a8:	50000300 	.word	0x50000300
 80032ac:	20000004 	.word	0x20000004
 80032b0:	053e2d63 	.word	0x053e2d63
 80032b4:	c7520000 	.word	0xc7520000
 80032b8:	50000500 	.word	0x50000500
 80032bc:	cb840000 	.word	0xcb840000

080032c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fe fe4f 	bl	8001f74 <LL_ADC_IsEnabled>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d176      	bne.n	80033ca <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	4b3c      	ldr	r3, [pc, #240]	@ (80033d4 <ADC_Enable+0x114>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00d      	beq.n	8003306 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ee:	f043 0210 	orr.w	r2, r3, #16
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032fa:	f043 0201 	orr.w	r2, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e062      	b.n	80033cc <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f7fe fe1e 	bl	8001f4c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003318:	d004      	beq.n	8003324 <ADC_Enable+0x64>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a2e      	ldr	r2, [pc, #184]	@ (80033d8 <ADC_Enable+0x118>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d101      	bne.n	8003328 <ADC_Enable+0x68>
 8003324:	4b2d      	ldr	r3, [pc, #180]	@ (80033dc <ADC_Enable+0x11c>)
 8003326:	e000      	b.n	800332a <ADC_Enable+0x6a>
 8003328:	4b2d      	ldr	r3, [pc, #180]	@ (80033e0 <ADC_Enable+0x120>)
 800332a:	4618      	mov	r0, r3
 800332c:	f7fe fc56 	bl	8001bdc <LL_ADC_GetCommonPathInternalCh>
 8003330:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003332:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003336:	2b00      	cmp	r3, #0
 8003338:	d013      	beq.n	8003362 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800333a:	4b2a      	ldr	r3, [pc, #168]	@ (80033e4 <ADC_Enable+0x124>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	099b      	lsrs	r3, r3, #6
 8003340:	4a29      	ldr	r2, [pc, #164]	@ (80033e8 <ADC_Enable+0x128>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	099b      	lsrs	r3, r3, #6
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	4613      	mov	r3, r2
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4413      	add	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003354:	e002      	b.n	800335c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	3b01      	subs	r3, #1
 800335a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f9      	bne.n	8003356 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003362:	f7fe fc09 	bl	8001b78 <HAL_GetTick>
 8003366:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003368:	e028      	b.n	80033bc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7fe fe00 	bl	8001f74 <LL_ADC_IsEnabled>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d104      	bne.n	8003384 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7fe fde4 	bl	8001f4c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003384:	f7fe fbf8 	bl	8001b78 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d914      	bls.n	80033bc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b01      	cmp	r3, #1
 800339e:	d00d      	beq.n	80033bc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a4:	f043 0210 	orr.w	r2, r3, #16
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b0:	f043 0201 	orr.w	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e007      	b.n	80033cc <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d1cf      	bne.n	800336a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	8000003f 	.word	0x8000003f
 80033d8:	50000100 	.word	0x50000100
 80033dc:	50000300 	.word	0x50000300
 80033e0:	50000700 	.word	0x50000700
 80033e4:	20000004 	.word	0x20000004
 80033e8:	053e2d63 	.word	0x053e2d63

080033ec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003402:	2b00      	cmp	r3, #0
 8003404:	d14b      	bne.n	800349e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d021      	beq.n	8003464 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f7fe fc85 	bl	8001d34 <LL_ADC_REG_IsTriggerSourceSWStart>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d032      	beq.n	8003496 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d12b      	bne.n	8003496 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003442:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d11f      	bne.n	8003496 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345a:	f043 0201 	orr.w	r2, r3, #1
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003462:	e018      	b.n	8003496 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d111      	bne.n	8003496 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003476:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003482:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d105      	bne.n	8003496 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348e:	f043 0201 	orr.w	r2, r3, #1
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f7ff faaa 	bl	80029f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800349c:	e00e      	b.n	80034bc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f7ff fabe 	bl	8002a2c <HAL_ADC_ErrorCallback>
}
 80034b0:	e004      	b.n	80034bc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	4798      	blx	r3
}
 80034bc:	bf00      	nop
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f7ff fa96 	bl	8002a04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034d8:	bf00      	nop
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ec:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034fe:	f043 0204 	orr.w	r2, r3, #4
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f7ff fa90 	bl	8002a2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800350c:	bf00      	nop
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <LL_ADC_IsEnabled>:
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <LL_ADC_IsEnabled+0x18>
 8003528:	2301      	movs	r3, #1
 800352a:	e000      	b.n	800352e <LL_ADC_IsEnabled+0x1a>
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <LL_ADC_REG_IsConversionOngoing>:
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	2b04      	cmp	r3, #4
 800354c:	d101      	bne.n	8003552 <LL_ADC_REG_IsConversionOngoing+0x18>
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80035c4:	b590      	push	{r4, r7, lr}
 80035c6:	b0a1      	sub	sp, #132	@ 0x84
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ce:	2300      	movs	r3, #0
 80035d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035de:	2302      	movs	r3, #2
 80035e0:	e0e7      	b.n	80037b2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80035ea:	2300      	movs	r3, #0
 80035ec:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80035ee:	2300      	movs	r3, #0
 80035f0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035fa:	d102      	bne.n	8003602 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80035fc:	4b6f      	ldr	r3, [pc, #444]	@ (80037bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035fe:	60bb      	str	r3, [r7, #8]
 8003600:	e009      	b.n	8003616 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a6e      	ldr	r2, [pc, #440]	@ (80037c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d102      	bne.n	8003612 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800360c:	4b6d      	ldr	r3, [pc, #436]	@ (80037c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800360e:	60bb      	str	r3, [r7, #8]
 8003610:	e001      	b.n	8003616 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003612:	2300      	movs	r3, #0
 8003614:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10b      	bne.n	8003634 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003620:	f043 0220 	orr.w	r2, r3, #32
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e0be      	b.n	80037b2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff ff7f 	bl	800353a <LL_ADC_REG_IsConversionOngoing>
 800363c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff ff79 	bl	800353a <LL_ADC_REG_IsConversionOngoing>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	f040 80a0 	bne.w	8003790 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003650:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003652:	2b00      	cmp	r3, #0
 8003654:	f040 809c 	bne.w	8003790 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003660:	d004      	beq.n	800366c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a55      	ldr	r2, [pc, #340]	@ (80037bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d101      	bne.n	8003670 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800366c:	4b56      	ldr	r3, [pc, #344]	@ (80037c8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800366e:	e000      	b.n	8003672 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003670:	4b56      	ldr	r3, [pc, #344]	@ (80037cc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003672:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d04b      	beq.n	8003714 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800367c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	6859      	ldr	r1, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800368e:	035b      	lsls	r3, r3, #13
 8003690:	430b      	orrs	r3, r1
 8003692:	431a      	orrs	r2, r3
 8003694:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003696:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036a0:	d004      	beq.n	80036ac <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a45      	ldr	r2, [pc, #276]	@ (80037bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d10f      	bne.n	80036cc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80036ac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80036b0:	f7ff ff30 	bl	8003514 <LL_ADC_IsEnabled>
 80036b4:	4604      	mov	r4, r0
 80036b6:	4841      	ldr	r0, [pc, #260]	@ (80037bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036b8:	f7ff ff2c 	bl	8003514 <LL_ADC_IsEnabled>
 80036bc:	4603      	mov	r3, r0
 80036be:	4323      	orrs	r3, r4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf0c      	ite	eq
 80036c4:	2301      	moveq	r3, #1
 80036c6:	2300      	movne	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	e012      	b.n	80036f2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80036cc:	483c      	ldr	r0, [pc, #240]	@ (80037c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80036ce:	f7ff ff21 	bl	8003514 <LL_ADC_IsEnabled>
 80036d2:	4604      	mov	r4, r0
 80036d4:	483b      	ldr	r0, [pc, #236]	@ (80037c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80036d6:	f7ff ff1d 	bl	8003514 <LL_ADC_IsEnabled>
 80036da:	4603      	mov	r3, r0
 80036dc:	431c      	orrs	r4, r3
 80036de:	483c      	ldr	r0, [pc, #240]	@ (80037d0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80036e0:	f7ff ff18 	bl	8003514 <LL_ADC_IsEnabled>
 80036e4:	4603      	mov	r3, r0
 80036e6:	4323      	orrs	r3, r4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf0c      	ite	eq
 80036ec:	2301      	moveq	r3, #1
 80036ee:	2300      	movne	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d056      	beq.n	80037a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80036f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80036fe:	f023 030f 	bic.w	r3, r3, #15
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	6811      	ldr	r1, [r2, #0]
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	6892      	ldr	r2, [r2, #8]
 800370a:	430a      	orrs	r2, r1
 800370c:	431a      	orrs	r2, r3
 800370e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003710:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003712:	e047      	b.n	80037a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003714:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800371c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800371e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003728:	d004      	beq.n	8003734 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a23      	ldr	r2, [pc, #140]	@ (80037bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d10f      	bne.n	8003754 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003734:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003738:	f7ff feec 	bl	8003514 <LL_ADC_IsEnabled>
 800373c:	4604      	mov	r4, r0
 800373e:	481f      	ldr	r0, [pc, #124]	@ (80037bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003740:	f7ff fee8 	bl	8003514 <LL_ADC_IsEnabled>
 8003744:	4603      	mov	r3, r0
 8003746:	4323      	orrs	r3, r4
 8003748:	2b00      	cmp	r3, #0
 800374a:	bf0c      	ite	eq
 800374c:	2301      	moveq	r3, #1
 800374e:	2300      	movne	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	e012      	b.n	800377a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003754:	481a      	ldr	r0, [pc, #104]	@ (80037c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003756:	f7ff fedd 	bl	8003514 <LL_ADC_IsEnabled>
 800375a:	4604      	mov	r4, r0
 800375c:	4819      	ldr	r0, [pc, #100]	@ (80037c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800375e:	f7ff fed9 	bl	8003514 <LL_ADC_IsEnabled>
 8003762:	4603      	mov	r3, r0
 8003764:	431c      	orrs	r4, r3
 8003766:	481a      	ldr	r0, [pc, #104]	@ (80037d0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003768:	f7ff fed4 	bl	8003514 <LL_ADC_IsEnabled>
 800376c:	4603      	mov	r3, r0
 800376e:	4323      	orrs	r3, r4
 8003770:	2b00      	cmp	r3, #0
 8003772:	bf0c      	ite	eq
 8003774:	2301      	moveq	r3, #1
 8003776:	2300      	movne	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d012      	beq.n	80037a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800377e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003786:	f023 030f 	bic.w	r3, r3, #15
 800378a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800378c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800378e:	e009      	b.n	80037a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003794:	f043 0220 	orr.w	r2, r3, #32
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80037a2:	e000      	b.n	80037a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80037ae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3784      	adds	r7, #132	@ 0x84
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd90      	pop	{r4, r7, pc}
 80037ba:	bf00      	nop
 80037bc:	50000100 	.word	0x50000100
 80037c0:	50000400 	.word	0x50000400
 80037c4:	50000500 	.word	0x50000500
 80037c8:	50000300 	.word	0x50000300
 80037cc:	50000700 	.word	0x50000700
 80037d0:	50000600 	.word	0x50000600

080037d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003818 <__NVIC_SetPriorityGrouping+0x44>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037f0:	4013      	ands	r3, r2
 80037f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003806:	4a04      	ldr	r2, [pc, #16]	@ (8003818 <__NVIC_SetPriorityGrouping+0x44>)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	60d3      	str	r3, [r2, #12]
}
 800380c:	bf00      	nop
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003820:	4b04      	ldr	r3, [pc, #16]	@ (8003834 <__NVIC_GetPriorityGrouping+0x18>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	0a1b      	lsrs	r3, r3, #8
 8003826:	f003 0307 	and.w	r3, r3, #7
}
 800382a:	4618      	mov	r0, r3
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	e000ed00 	.word	0xe000ed00

08003838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003846:	2b00      	cmp	r3, #0
 8003848:	db0b      	blt.n	8003862 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800384a:	79fb      	ldrb	r3, [r7, #7]
 800384c:	f003 021f 	and.w	r2, r3, #31
 8003850:	4907      	ldr	r1, [pc, #28]	@ (8003870 <__NVIC_EnableIRQ+0x38>)
 8003852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	2001      	movs	r0, #1
 800385a:	fa00 f202 	lsl.w	r2, r0, r2
 800385e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	e000e100 	.word	0xe000e100

08003874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	4603      	mov	r3, r0
 800387c:	6039      	str	r1, [r7, #0]
 800387e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003884:	2b00      	cmp	r3, #0
 8003886:	db0a      	blt.n	800389e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	b2da      	uxtb	r2, r3
 800388c:	490c      	ldr	r1, [pc, #48]	@ (80038c0 <__NVIC_SetPriority+0x4c>)
 800388e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003892:	0112      	lsls	r2, r2, #4
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	440b      	add	r3, r1
 8003898:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800389c:	e00a      	b.n	80038b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	4908      	ldr	r1, [pc, #32]	@ (80038c4 <__NVIC_SetPriority+0x50>)
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	3b04      	subs	r3, #4
 80038ac:	0112      	lsls	r2, r2, #4
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	440b      	add	r3, r1
 80038b2:	761a      	strb	r2, [r3, #24]
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	e000e100 	.word	0xe000e100
 80038c4:	e000ed00 	.word	0xe000ed00

080038c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b089      	sub	sp, #36	@ 0x24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f1c3 0307 	rsb	r3, r3, #7
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	bf28      	it	cs
 80038e6:	2304      	movcs	r3, #4
 80038e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3304      	adds	r3, #4
 80038ee:	2b06      	cmp	r3, #6
 80038f0:	d902      	bls.n	80038f8 <NVIC_EncodePriority+0x30>
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	3b03      	subs	r3, #3
 80038f6:	e000      	b.n	80038fa <NVIC_EncodePriority+0x32>
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	43da      	mvns	r2, r3
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	401a      	ands	r2, r3
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003910:	f04f 31ff 	mov.w	r1, #4294967295
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	fa01 f303 	lsl.w	r3, r1, r3
 800391a:	43d9      	mvns	r1, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003920:	4313      	orrs	r3, r2
         );
}
 8003922:	4618      	mov	r0, r3
 8003924:	3724      	adds	r7, #36	@ 0x24
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
	...

08003930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3b01      	subs	r3, #1
 800393c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003940:	d301      	bcc.n	8003946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003942:	2301      	movs	r3, #1
 8003944:	e00f      	b.n	8003966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003946:	4a0a      	ldr	r2, [pc, #40]	@ (8003970 <SysTick_Config+0x40>)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3b01      	subs	r3, #1
 800394c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800394e:	210f      	movs	r1, #15
 8003950:	f04f 30ff 	mov.w	r0, #4294967295
 8003954:	f7ff ff8e 	bl	8003874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003958:	4b05      	ldr	r3, [pc, #20]	@ (8003970 <SysTick_Config+0x40>)
 800395a:	2200      	movs	r2, #0
 800395c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800395e:	4b04      	ldr	r3, [pc, #16]	@ (8003970 <SysTick_Config+0x40>)
 8003960:	2207      	movs	r2, #7
 8003962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	e000e010 	.word	0xe000e010

08003974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff ff29 	bl	80037d4 <__NVIC_SetPriorityGrouping>
}
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b086      	sub	sp, #24
 800398e:	af00      	add	r7, sp, #0
 8003990:	4603      	mov	r3, r0
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	607a      	str	r2, [r7, #4]
 8003996:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003998:	f7ff ff40 	bl	800381c <__NVIC_GetPriorityGrouping>
 800399c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68b9      	ldr	r1, [r7, #8]
 80039a2:	6978      	ldr	r0, [r7, #20]
 80039a4:	f7ff ff90 	bl	80038c8 <NVIC_EncodePriority>
 80039a8:	4602      	mov	r2, r0
 80039aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ae:	4611      	mov	r1, r2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff ff5f 	bl	8003874 <__NVIC_SetPriority>
}
 80039b6:	bf00      	nop
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	4603      	mov	r3, r0
 80039c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff ff33 	bl	8003838 <__NVIC_EnableIRQ>
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff ffa4 	bl	8003930 <SysTick_Config>
 80039e8:	4603      	mov	r3, r0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e08d      	b.n	8003b22 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	4b47      	ldr	r3, [pc, #284]	@ (8003b2c <HAL_DMA_Init+0x138>)
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d80f      	bhi.n	8003a32 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	4b45      	ldr	r3, [pc, #276]	@ (8003b30 <HAL_DMA_Init+0x13c>)
 8003a1a:	4413      	add	r3, r2
 8003a1c:	4a45      	ldr	r2, [pc, #276]	@ (8003b34 <HAL_DMA_Init+0x140>)
 8003a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a22:	091b      	lsrs	r3, r3, #4
 8003a24:	009a      	lsls	r2, r3, #2
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a42      	ldr	r2, [pc, #264]	@ (8003b38 <HAL_DMA_Init+0x144>)
 8003a2e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a30:	e00e      	b.n	8003a50 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	4b40      	ldr	r3, [pc, #256]	@ (8003b3c <HAL_DMA_Init+0x148>)
 8003a3a:	4413      	add	r3, r2
 8003a3c:	4a3d      	ldr	r2, [pc, #244]	@ (8003b34 <HAL_DMA_Init+0x140>)
 8003a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	009a      	lsls	r2, r3, #2
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a3c      	ldr	r2, [pc, #240]	@ (8003b40 <HAL_DMA_Init+0x14c>)
 8003a4e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fa76 	bl	8003f94 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ab0:	d102      	bne.n	8003ab8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003acc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d010      	beq.n	8003af8 <HAL_DMA_Init+0x104>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d80c      	bhi.n	8003af8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fa96 	bl	8004010 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003af4:	605a      	str	r2, [r3, #4]
 8003af6:	e008      	b.n	8003b0a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40020407 	.word	0x40020407
 8003b30:	bffdfff8 	.word	0xbffdfff8
 8003b34:	cccccccd 	.word	0xcccccccd
 8003b38:	40020000 	.word	0x40020000
 8003b3c:	bffdfbf8 	.word	0xbffdfbf8
 8003b40:	40020400 	.word	0x40020400

08003b44 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_DMA_Start_IT+0x20>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e066      	b.n	8003c32 <HAL_DMA_Start_IT+0xee>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d155      	bne.n	8003c24 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0201 	bic.w	r2, r2, #1
 8003b94:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	68b9      	ldr	r1, [r7, #8]
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f9bb 	bl	8003f18 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d008      	beq.n	8003bbc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f042 020e 	orr.w	r2, r2, #14
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e00f      	b.n	8003bdc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0204 	bic.w	r2, r2, #4
 8003bca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 020a 	orr.w	r2, r2, #10
 8003bda:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d007      	beq.n	8003bfa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bf4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bf8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d007      	beq.n	8003c12 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c10:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0201 	orr.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	e005      	b.n	8003c30 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b085      	sub	sp, #20
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d005      	beq.n	8003c5e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2204      	movs	r2, #4
 8003c56:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	73fb      	strb	r3, [r7, #15]
 8003c5c:	e037      	b.n	8003cce <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 020e 	bic.w	r2, r2, #14
 8003c6c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c7c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0201 	bic.w	r2, r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c92:	f003 021f 	and.w	r2, r3, #31
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003caa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00c      	beq.n	8003cce <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cbe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cc2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ccc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d00d      	beq.n	8003d20 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2204      	movs	r2, #4
 8003d08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	73fb      	strb	r3, [r7, #15]
 8003d1e:	e047      	b.n	8003db0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 020e 	bic.w	r2, r2, #14
 8003d2e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0201 	bic.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d54:	f003 021f 	and.w	r2, r3, #31
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d62:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d6c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00c      	beq.n	8003d90 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d84:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d8e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	4798      	blx	r3
    }
  }
  return status;
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	2204      	movs	r2, #4
 8003ddc:	409a      	lsls	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4013      	ands	r3, r2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d026      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x7a>
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d021      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0320 	and.w	r3, r3, #32
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d107      	bne.n	8003e0e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 0204 	bic.w	r2, r2, #4
 8003e0c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e12:	f003 021f 	and.w	r2, r3, #31
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1a:	2104      	movs	r1, #4
 8003e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e20:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d071      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003e32:	e06c      	b.n	8003f0e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e38:	f003 031f 	and.w	r3, r3, #31
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	409a      	lsls	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d02e      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d029      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0320 	and.w	r3, r3, #32
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10b      	bne.n	8003e78 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 020a 	bic.w	r2, r2, #10
 8003e6e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e7c:	f003 021f 	and.w	r2, r3, #31
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e84:	2102      	movs	r1, #2
 8003e86:	fa01 f202 	lsl.w	r2, r1, r2
 8003e8a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d038      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003ea4:	e033      	b.n	8003f0e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eaa:	f003 031f 	and.w	r3, r3, #31
 8003eae:	2208      	movs	r2, #8
 8003eb0:	409a      	lsls	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d02a      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d025      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 020e 	bic.w	r2, r2, #14
 8003ed2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed8:	f003 021f 	and.w	r2, r3, #31
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d004      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003f0e:	bf00      	nop
 8003f10:	bf00      	nop
}
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f2e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d004      	beq.n	8003f42 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f40:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f46:	f003 021f 	and.w	r2, r3, #31
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4e:	2101      	movs	r1, #1
 8003f50:	fa01 f202 	lsl.w	r2, r1, r2
 8003f54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	2b10      	cmp	r3, #16
 8003f64:	d108      	bne.n	8003f78 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f76:	e007      	b.n	8003f88 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	60da      	str	r2, [r3, #12]
}
 8003f88:	bf00      	nop
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	4b16      	ldr	r3, [pc, #88]	@ (8003ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d802      	bhi.n	8003fae <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003fa8:	4b15      	ldr	r3, [pc, #84]	@ (8004000 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	e001      	b.n	8003fb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003fae:	4b15      	ldr	r3, [pc, #84]	@ (8004004 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003fb0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	3b08      	subs	r3, #8
 8003fbe:	4a12      	ldr	r2, [pc, #72]	@ (8004008 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc4:	091b      	lsrs	r3, r3, #4
 8003fc6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fcc:	089b      	lsrs	r3, r3, #2
 8003fce:	009a      	lsls	r2, r3, #2
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a0b      	ldr	r2, [pc, #44]	@ (800400c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003fde:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f003 031f 	and.w	r3, r3, #31
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	409a      	lsls	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003fee:	bf00      	nop
 8003ff0:	371c      	adds	r7, #28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	40020407 	.word	0x40020407
 8004000:	40020800 	.word	0x40020800
 8004004:	40020820 	.word	0x40020820
 8004008:	cccccccd 	.word	0xcccccccd
 800400c:	40020880 	.word	0x40020880

08004010 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4b0b      	ldr	r3, [pc, #44]	@ (8004050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004024:	4413      	add	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	461a      	mov	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a08      	ldr	r2, [pc, #32]	@ (8004054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004032:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3b01      	subs	r3, #1
 8004038:	f003 031f 	and.w	r3, r3, #31
 800403c:	2201      	movs	r2, #1
 800403e:	409a      	lsls	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004044:	bf00      	nop
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	1000823f 	.word	0x1000823f
 8004054:	40020940 	.word	0x40020940

08004058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004062:	2300      	movs	r3, #0
 8004064:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004066:	e15a      	b.n	800431e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	2101      	movs	r1, #1
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	fa01 f303 	lsl.w	r3, r1, r3
 8004074:	4013      	ands	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 814c 	beq.w	8004318 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f003 0303 	and.w	r3, r3, #3
 8004088:	2b01      	cmp	r3, #1
 800408a:	d005      	beq.n	8004098 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004094:	2b02      	cmp	r3, #2
 8004096:	d130      	bne.n	80040fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	2203      	movs	r2, #3
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	43db      	mvns	r3, r3
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4013      	ands	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4313      	orrs	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040ce:	2201      	movs	r2, #1
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	43db      	mvns	r3, r3
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4013      	ands	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	091b      	lsrs	r3, r3, #4
 80040e4:	f003 0201 	and.w	r2, r3, #1
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	2b03      	cmp	r3, #3
 8004104:	d017      	beq.n	8004136 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	2203      	movs	r2, #3
 8004112:	fa02 f303 	lsl.w	r3, r2, r3
 8004116:	43db      	mvns	r3, r3
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4013      	ands	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4313      	orrs	r3, r2
 800412e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d123      	bne.n	800418a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	08da      	lsrs	r2, r3, #3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3208      	adds	r2, #8
 800414a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800414e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	220f      	movs	r2, #15
 800415a:	fa02 f303 	lsl.w	r3, r2, r3
 800415e:	43db      	mvns	r3, r3
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4013      	ands	r3, r2
 8004164:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	08da      	lsrs	r2, r3, #3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3208      	adds	r2, #8
 8004184:	6939      	ldr	r1, [r7, #16]
 8004186:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	2203      	movs	r2, #3
 8004196:	fa02 f303 	lsl.w	r3, r2, r3
 800419a:	43db      	mvns	r3, r3
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4013      	ands	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f003 0203 	and.w	r2, r3, #3
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 80a6 	beq.w	8004318 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041cc:	4b5b      	ldr	r3, [pc, #364]	@ (800433c <HAL_GPIO_Init+0x2e4>)
 80041ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041d0:	4a5a      	ldr	r2, [pc, #360]	@ (800433c <HAL_GPIO_Init+0x2e4>)
 80041d2:	f043 0301 	orr.w	r3, r3, #1
 80041d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80041d8:	4b58      	ldr	r3, [pc, #352]	@ (800433c <HAL_GPIO_Init+0x2e4>)
 80041da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	60bb      	str	r3, [r7, #8]
 80041e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041e4:	4a56      	ldr	r2, [pc, #344]	@ (8004340 <HAL_GPIO_Init+0x2e8>)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	089b      	lsrs	r3, r3, #2
 80041ea:	3302      	adds	r3, #2
 80041ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f003 0303 	and.w	r3, r3, #3
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	220f      	movs	r2, #15
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	43db      	mvns	r3, r3
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	4013      	ands	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800420e:	d01f      	beq.n	8004250 <HAL_GPIO_Init+0x1f8>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a4c      	ldr	r2, [pc, #304]	@ (8004344 <HAL_GPIO_Init+0x2ec>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d019      	beq.n	800424c <HAL_GPIO_Init+0x1f4>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a4b      	ldr	r2, [pc, #300]	@ (8004348 <HAL_GPIO_Init+0x2f0>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d013      	beq.n	8004248 <HAL_GPIO_Init+0x1f0>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a4a      	ldr	r2, [pc, #296]	@ (800434c <HAL_GPIO_Init+0x2f4>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d00d      	beq.n	8004244 <HAL_GPIO_Init+0x1ec>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a49      	ldr	r2, [pc, #292]	@ (8004350 <HAL_GPIO_Init+0x2f8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d007      	beq.n	8004240 <HAL_GPIO_Init+0x1e8>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a48      	ldr	r2, [pc, #288]	@ (8004354 <HAL_GPIO_Init+0x2fc>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d101      	bne.n	800423c <HAL_GPIO_Init+0x1e4>
 8004238:	2305      	movs	r3, #5
 800423a:	e00a      	b.n	8004252 <HAL_GPIO_Init+0x1fa>
 800423c:	2306      	movs	r3, #6
 800423e:	e008      	b.n	8004252 <HAL_GPIO_Init+0x1fa>
 8004240:	2304      	movs	r3, #4
 8004242:	e006      	b.n	8004252 <HAL_GPIO_Init+0x1fa>
 8004244:	2303      	movs	r3, #3
 8004246:	e004      	b.n	8004252 <HAL_GPIO_Init+0x1fa>
 8004248:	2302      	movs	r3, #2
 800424a:	e002      	b.n	8004252 <HAL_GPIO_Init+0x1fa>
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <HAL_GPIO_Init+0x1fa>
 8004250:	2300      	movs	r3, #0
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	f002 0203 	and.w	r2, r2, #3
 8004258:	0092      	lsls	r2, r2, #2
 800425a:	4093      	lsls	r3, r2
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004262:	4937      	ldr	r1, [pc, #220]	@ (8004340 <HAL_GPIO_Init+0x2e8>)
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	089b      	lsrs	r3, r3, #2
 8004268:	3302      	adds	r3, #2
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004270:	4b39      	ldr	r3, [pc, #228]	@ (8004358 <HAL_GPIO_Init+0x300>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	43db      	mvns	r3, r3
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4013      	ands	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004294:	4a30      	ldr	r2, [pc, #192]	@ (8004358 <HAL_GPIO_Init+0x300>)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800429a:	4b2f      	ldr	r3, [pc, #188]	@ (8004358 <HAL_GPIO_Init+0x300>)
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	43db      	mvns	r3, r3
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4013      	ands	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042be:	4a26      	ldr	r2, [pc, #152]	@ (8004358 <HAL_GPIO_Init+0x300>)
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80042c4:	4b24      	ldr	r3, [pc, #144]	@ (8004358 <HAL_GPIO_Init+0x300>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	43db      	mvns	r3, r3
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4013      	ands	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80042e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004358 <HAL_GPIO_Init+0x300>)
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80042ee:	4b1a      	ldr	r3, [pc, #104]	@ (8004358 <HAL_GPIO_Init+0x300>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	43db      	mvns	r3, r3
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4013      	ands	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4313      	orrs	r3, r2
 8004310:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004312:	4a11      	ldr	r2, [pc, #68]	@ (8004358 <HAL_GPIO_Init+0x300>)
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	3301      	adds	r3, #1
 800431c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	f47f ae9d 	bne.w	8004068 <HAL_GPIO_Init+0x10>
  }
}
 800432e:	bf00      	nop
 8004330:	bf00      	nop
 8004332:	371c      	adds	r7, #28
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	40021000 	.word	0x40021000
 8004340:	40010000 	.word	0x40010000
 8004344:	48000400 	.word	0x48000400
 8004348:	48000800 	.word	0x48000800
 800434c:	48000c00 	.word	0x48000c00
 8004350:	48001000 	.word	0x48001000
 8004354:	48001400 	.word	0x48001400
 8004358:	40010400 	.word	0x40010400

0800435c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	807b      	strh	r3, [r7, #2]
 8004368:	4613      	mov	r3, r2
 800436a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800436c:	787b      	ldrb	r3, [r7, #1]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004372:	887a      	ldrh	r2, [r7, #2]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004378:	e002      	b.n	8004380 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800437a:	887a      	ldrh	r2, [r7, #2]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800439e:	887a      	ldrh	r2, [r7, #2]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4013      	ands	r3, r2
 80043a4:	041a      	lsls	r2, r3, #16
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	43d9      	mvns	r1, r3
 80043aa:	887b      	ldrh	r3, [r7, #2]
 80043ac:	400b      	ands	r3, r1
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	619a      	str	r2, [r3, #24]
}
 80043b4:	bf00      	nop
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	4603      	mov	r3, r0
 80043c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043ca:	4b08      	ldr	r3, [pc, #32]	@ (80043ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043cc:	695a      	ldr	r2, [r3, #20]
 80043ce:	88fb      	ldrh	r3, [r7, #6]
 80043d0:	4013      	ands	r3, r2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d006      	beq.n	80043e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043d6:	4a05      	ldr	r2, [pc, #20]	@ (80043ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043d8:	88fb      	ldrh	r3, [r7, #6]
 80043da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043dc:	88fb      	ldrh	r3, [r7, #6]
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fc feaa 	bl	8001138 <HAL_GPIO_EXTI_Callback>
  }
}
 80043e4:	bf00      	nop
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40010400 	.word	0x40010400

080043f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d141      	bne.n	8004482 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043fe:	4b4b      	ldr	r3, [pc, #300]	@ (800452c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004406:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800440a:	d131      	bne.n	8004470 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800440c:	4b47      	ldr	r3, [pc, #284]	@ (800452c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800440e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004412:	4a46      	ldr	r2, [pc, #280]	@ (800452c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004414:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004418:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800441c:	4b43      	ldr	r3, [pc, #268]	@ (800452c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004424:	4a41      	ldr	r2, [pc, #260]	@ (800452c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004426:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800442a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800442c:	4b40      	ldr	r3, [pc, #256]	@ (8004530 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2232      	movs	r2, #50	@ 0x32
 8004432:	fb02 f303 	mul.w	r3, r2, r3
 8004436:	4a3f      	ldr	r2, [pc, #252]	@ (8004534 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004438:	fba2 2303 	umull	r2, r3, r2, r3
 800443c:	0c9b      	lsrs	r3, r3, #18
 800443e:	3301      	adds	r3, #1
 8004440:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004442:	e002      	b.n	800444a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	3b01      	subs	r3, #1
 8004448:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800444a:	4b38      	ldr	r3, [pc, #224]	@ (800452c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004452:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004456:	d102      	bne.n	800445e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f2      	bne.n	8004444 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800445e:	4b33      	ldr	r3, [pc, #204]	@ (800452c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004466:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800446a:	d158      	bne.n	800451e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e057      	b.n	8004520 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004470:	4b2e      	ldr	r3, [pc, #184]	@ (800452c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004472:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004476:	4a2d      	ldr	r2, [pc, #180]	@ (800452c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004478:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800447c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004480:	e04d      	b.n	800451e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004488:	d141      	bne.n	800450e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800448a:	4b28      	ldr	r3, [pc, #160]	@ (800452c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004492:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004496:	d131      	bne.n	80044fc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004498:	4b24      	ldr	r3, [pc, #144]	@ (800452c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800449a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800449e:	4a23      	ldr	r2, [pc, #140]	@ (800452c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80044a8:	4b20      	ldr	r3, [pc, #128]	@ (800452c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044b0:	4a1e      	ldr	r2, [pc, #120]	@ (800452c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004530 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2232      	movs	r2, #50	@ 0x32
 80044be:	fb02 f303 	mul.w	r3, r2, r3
 80044c2:	4a1c      	ldr	r2, [pc, #112]	@ (8004534 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80044c4:	fba2 2303 	umull	r2, r3, r2, r3
 80044c8:	0c9b      	lsrs	r3, r3, #18
 80044ca:	3301      	adds	r3, #1
 80044cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044ce:	e002      	b.n	80044d6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044d6:	4b15      	ldr	r3, [pc, #84]	@ (800452c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044e2:	d102      	bne.n	80044ea <HAL_PWREx_ControlVoltageScaling+0xfa>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1f2      	bne.n	80044d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044ea:	4b10      	ldr	r3, [pc, #64]	@ (800452c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044f6:	d112      	bne.n	800451e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e011      	b.n	8004520 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044fc:	4b0b      	ldr	r3, [pc, #44]	@ (800452c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004502:	4a0a      	ldr	r2, [pc, #40]	@ (800452c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004504:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004508:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800450c:	e007      	b.n	800451e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800450e:	4b07      	ldr	r3, [pc, #28]	@ (800452c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004516:	4a05      	ldr	r2, [pc, #20]	@ (800452c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004518:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800451c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	40007000 	.word	0x40007000
 8004530:	20000004 	.word	0x20000004
 8004534:	431bde83 	.word	0x431bde83

08004538 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800453c:	4b05      	ldr	r3, [pc, #20]	@ (8004554 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	4a04      	ldr	r2, [pc, #16]	@ (8004554 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004542:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004546:	6093      	str	r3, [r2, #8]
}
 8004548:	bf00      	nop
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	40007000 	.word	0x40007000

08004558 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b088      	sub	sp, #32
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e2fe      	b.n	8004b68 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d075      	beq.n	8004662 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004576:	4b97      	ldr	r3, [pc, #604]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 030c 	and.w	r3, r3, #12
 800457e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004580:	4b94      	ldr	r3, [pc, #592]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f003 0303 	and.w	r3, r3, #3
 8004588:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	2b0c      	cmp	r3, #12
 800458e:	d102      	bne.n	8004596 <HAL_RCC_OscConfig+0x3e>
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2b03      	cmp	r3, #3
 8004594:	d002      	beq.n	800459c <HAL_RCC_OscConfig+0x44>
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	2b08      	cmp	r3, #8
 800459a:	d10b      	bne.n	80045b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800459c:	4b8d      	ldr	r3, [pc, #564]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d05b      	beq.n	8004660 <HAL_RCC_OscConfig+0x108>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d157      	bne.n	8004660 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e2d9      	b.n	8004b68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045bc:	d106      	bne.n	80045cc <HAL_RCC_OscConfig+0x74>
 80045be:	4b85      	ldr	r3, [pc, #532]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a84      	ldr	r2, [pc, #528]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 80045c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	e01d      	b.n	8004608 <HAL_RCC_OscConfig+0xb0>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045d4:	d10c      	bne.n	80045f0 <HAL_RCC_OscConfig+0x98>
 80045d6:	4b7f      	ldr	r3, [pc, #508]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a7e      	ldr	r2, [pc, #504]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 80045dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045e0:	6013      	str	r3, [r2, #0]
 80045e2:	4b7c      	ldr	r3, [pc, #496]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a7b      	ldr	r2, [pc, #492]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 80045e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	e00b      	b.n	8004608 <HAL_RCC_OscConfig+0xb0>
 80045f0:	4b78      	ldr	r3, [pc, #480]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a77      	ldr	r2, [pc, #476]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 80045f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	4b75      	ldr	r3, [pc, #468]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a74      	ldr	r2, [pc, #464]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 8004602:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d013      	beq.n	8004638 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004610:	f7fd fab2 	bl	8001b78 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004618:	f7fd faae 	bl	8001b78 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b64      	cmp	r3, #100	@ 0x64
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e29e      	b.n	8004b68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800462a:	4b6a      	ldr	r3, [pc, #424]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0f0      	beq.n	8004618 <HAL_RCC_OscConfig+0xc0>
 8004636:	e014      	b.n	8004662 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004638:	f7fd fa9e 	bl	8001b78 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004640:	f7fd fa9a 	bl	8001b78 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b64      	cmp	r3, #100	@ 0x64
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e28a      	b.n	8004b68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004652:	4b60      	ldr	r3, [pc, #384]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f0      	bne.n	8004640 <HAL_RCC_OscConfig+0xe8>
 800465e:	e000      	b.n	8004662 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d075      	beq.n	800475a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800466e:	4b59      	ldr	r3, [pc, #356]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 030c 	and.w	r3, r3, #12
 8004676:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004678:	4b56      	ldr	r3, [pc, #344]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f003 0303 	and.w	r3, r3, #3
 8004680:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	2b0c      	cmp	r3, #12
 8004686:	d102      	bne.n	800468e <HAL_RCC_OscConfig+0x136>
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	2b02      	cmp	r3, #2
 800468c:	d002      	beq.n	8004694 <HAL_RCC_OscConfig+0x13c>
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	2b04      	cmp	r3, #4
 8004692:	d11f      	bne.n	80046d4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004694:	4b4f      	ldr	r3, [pc, #316]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800469c:	2b00      	cmp	r3, #0
 800469e:	d005      	beq.n	80046ac <HAL_RCC_OscConfig+0x154>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e25d      	b.n	8004b68 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ac:	4b49      	ldr	r3, [pc, #292]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	061b      	lsls	r3, r3, #24
 80046ba:	4946      	ldr	r1, [pc, #280]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80046c0:	4b45      	ldr	r3, [pc, #276]	@ (80047d8 <HAL_RCC_OscConfig+0x280>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fd fa0b 	bl	8001ae0 <HAL_InitTick>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d043      	beq.n	8004758 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e249      	b.n	8004b68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d023      	beq.n	8004724 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046dc:	4b3d      	ldr	r3, [pc, #244]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a3c      	ldr	r2, [pc, #240]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 80046e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e8:	f7fd fa46 	bl	8001b78 <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046f0:	f7fd fa42 	bl	8001b78 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e232      	b.n	8004b68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004702:	4b34      	ldr	r3, [pc, #208]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0f0      	beq.n	80046f0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800470e:	4b31      	ldr	r3, [pc, #196]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	061b      	lsls	r3, r3, #24
 800471c:	492d      	ldr	r1, [pc, #180]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 800471e:	4313      	orrs	r3, r2
 8004720:	604b      	str	r3, [r1, #4]
 8004722:	e01a      	b.n	800475a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004724:	4b2b      	ldr	r3, [pc, #172]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a2a      	ldr	r2, [pc, #168]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 800472a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800472e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004730:	f7fd fa22 	bl	8001b78 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004738:	f7fd fa1e 	bl	8001b78 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e20e      	b.n	8004b68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800474a:	4b22      	ldr	r3, [pc, #136]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1f0      	bne.n	8004738 <HAL_RCC_OscConfig+0x1e0>
 8004756:	e000      	b.n	800475a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004758:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	2b00      	cmp	r3, #0
 8004764:	d041      	beq.n	80047ea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d01c      	beq.n	80047a8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800476e:	4b19      	ldr	r3, [pc, #100]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 8004770:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004774:	4a17      	ldr	r2, [pc, #92]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 8004776:	f043 0301 	orr.w	r3, r3, #1
 800477a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477e:	f7fd f9fb 	bl	8001b78 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004786:	f7fd f9f7 	bl	8001b78 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e1e7      	b.n	8004b68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004798:	4b0e      	ldr	r3, [pc, #56]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 800479a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0ef      	beq.n	8004786 <HAL_RCC_OscConfig+0x22e>
 80047a6:	e020      	b.n	80047ea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047a8:	4b0a      	ldr	r3, [pc, #40]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 80047aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047ae:	4a09      	ldr	r2, [pc, #36]	@ (80047d4 <HAL_RCC_OscConfig+0x27c>)
 80047b0:	f023 0301 	bic.w	r3, r3, #1
 80047b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b8:	f7fd f9de 	bl	8001b78 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047be:	e00d      	b.n	80047dc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047c0:	f7fd f9da 	bl	8001b78 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d906      	bls.n	80047dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e1ca      	b.n	8004b68 <HAL_RCC_OscConfig+0x610>
 80047d2:	bf00      	nop
 80047d4:	40021000 	.word	0x40021000
 80047d8:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047dc:	4b8c      	ldr	r3, [pc, #560]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 80047de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1ea      	bne.n	80047c0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 80a6 	beq.w	8004944 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047f8:	2300      	movs	r3, #0
 80047fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047fc:	4b84      	ldr	r3, [pc, #528]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 80047fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_RCC_OscConfig+0x2b4>
 8004808:	2301      	movs	r3, #1
 800480a:	e000      	b.n	800480e <HAL_RCC_OscConfig+0x2b6>
 800480c:	2300      	movs	r3, #0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00d      	beq.n	800482e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004812:	4b7f      	ldr	r3, [pc, #508]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 8004814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004816:	4a7e      	ldr	r2, [pc, #504]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 8004818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800481c:	6593      	str	r3, [r2, #88]	@ 0x58
 800481e:	4b7c      	ldr	r3, [pc, #496]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 8004820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800482a:	2301      	movs	r3, #1
 800482c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800482e:	4b79      	ldr	r3, [pc, #484]	@ (8004a14 <HAL_RCC_OscConfig+0x4bc>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004836:	2b00      	cmp	r3, #0
 8004838:	d118      	bne.n	800486c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800483a:	4b76      	ldr	r3, [pc, #472]	@ (8004a14 <HAL_RCC_OscConfig+0x4bc>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a75      	ldr	r2, [pc, #468]	@ (8004a14 <HAL_RCC_OscConfig+0x4bc>)
 8004840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004846:	f7fd f997 	bl	8001b78 <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800484c:	e008      	b.n	8004860 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800484e:	f7fd f993 	bl	8001b78 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e183      	b.n	8004b68 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004860:	4b6c      	ldr	r3, [pc, #432]	@ (8004a14 <HAL_RCC_OscConfig+0x4bc>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0f0      	beq.n	800484e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d108      	bne.n	8004886 <HAL_RCC_OscConfig+0x32e>
 8004874:	4b66      	ldr	r3, [pc, #408]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 8004876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800487a:	4a65      	ldr	r2, [pc, #404]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 800487c:	f043 0301 	orr.w	r3, r3, #1
 8004880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004884:	e024      	b.n	80048d0 <HAL_RCC_OscConfig+0x378>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	2b05      	cmp	r3, #5
 800488c:	d110      	bne.n	80048b0 <HAL_RCC_OscConfig+0x358>
 800488e:	4b60      	ldr	r3, [pc, #384]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 8004890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004894:	4a5e      	ldr	r2, [pc, #376]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 8004896:	f043 0304 	orr.w	r3, r3, #4
 800489a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800489e:	4b5c      	ldr	r3, [pc, #368]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 80048a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048a4:	4a5a      	ldr	r2, [pc, #360]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 80048a6:	f043 0301 	orr.w	r3, r3, #1
 80048aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048ae:	e00f      	b.n	80048d0 <HAL_RCC_OscConfig+0x378>
 80048b0:	4b57      	ldr	r3, [pc, #348]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 80048b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b6:	4a56      	ldr	r2, [pc, #344]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 80048b8:	f023 0301 	bic.w	r3, r3, #1
 80048bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048c0:	4b53      	ldr	r3, [pc, #332]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 80048c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c6:	4a52      	ldr	r2, [pc, #328]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 80048c8:	f023 0304 	bic.w	r3, r3, #4
 80048cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d016      	beq.n	8004906 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d8:	f7fd f94e 	bl	8001b78 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048de:	e00a      	b.n	80048f6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e0:	f7fd f94a 	bl	8001b78 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e138      	b.n	8004b68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048f6:	4b46      	ldr	r3, [pc, #280]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 80048f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0ed      	beq.n	80048e0 <HAL_RCC_OscConfig+0x388>
 8004904:	e015      	b.n	8004932 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004906:	f7fd f937 	bl	8001b78 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800490c:	e00a      	b.n	8004924 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800490e:	f7fd f933 	bl	8001b78 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	f241 3288 	movw	r2, #5000	@ 0x1388
 800491c:	4293      	cmp	r3, r2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e121      	b.n	8004b68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004924:	4b3a      	ldr	r3, [pc, #232]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 8004926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1ed      	bne.n	800490e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004932:	7ffb      	ldrb	r3, [r7, #31]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d105      	bne.n	8004944 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004938:	4b35      	ldr	r3, [pc, #212]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 800493a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800493c:	4a34      	ldr	r2, [pc, #208]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 800493e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004942:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0320 	and.w	r3, r3, #32
 800494c:	2b00      	cmp	r3, #0
 800494e:	d03c      	beq.n	80049ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d01c      	beq.n	8004992 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004958:	4b2d      	ldr	r3, [pc, #180]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 800495a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800495e:	4a2c      	ldr	r2, [pc, #176]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 8004960:	f043 0301 	orr.w	r3, r3, #1
 8004964:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004968:	f7fd f906 	bl	8001b78 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004970:	f7fd f902 	bl	8001b78 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e0f2      	b.n	8004b68 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004982:	4b23      	ldr	r3, [pc, #140]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 8004984:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0ef      	beq.n	8004970 <HAL_RCC_OscConfig+0x418>
 8004990:	e01b      	b.n	80049ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004992:	4b1f      	ldr	r3, [pc, #124]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 8004994:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004998:	4a1d      	ldr	r2, [pc, #116]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 800499a:	f023 0301 	bic.w	r3, r3, #1
 800499e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a2:	f7fd f8e9 	bl	8001b78 <HAL_GetTick>
 80049a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049a8:	e008      	b.n	80049bc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049aa:	f7fd f8e5 	bl	8001b78 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e0d5      	b.n	8004b68 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049bc:	4b14      	ldr	r3, [pc, #80]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 80049be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1ef      	bne.n	80049aa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 80c9 	beq.w	8004b66 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 030c 	and.w	r3, r3, #12
 80049dc:	2b0c      	cmp	r3, #12
 80049de:	f000 8083 	beq.w	8004ae8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d15e      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ea:	4b09      	ldr	r3, [pc, #36]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a08      	ldr	r2, [pc, #32]	@ (8004a10 <HAL_RCC_OscConfig+0x4b8>)
 80049f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f6:	f7fd f8bf 	bl	8001b78 <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049fc:	e00c      	b.n	8004a18 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049fe:	f7fd f8bb 	bl	8001b78 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d905      	bls.n	8004a18 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e0ab      	b.n	8004b68 <HAL_RCC_OscConfig+0x610>
 8004a10:	40021000 	.word	0x40021000
 8004a14:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a18:	4b55      	ldr	r3, [pc, #340]	@ (8004b70 <HAL_RCC_OscConfig+0x618>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1ec      	bne.n	80049fe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a24:	4b52      	ldr	r3, [pc, #328]	@ (8004b70 <HAL_RCC_OscConfig+0x618>)
 8004a26:	68da      	ldr	r2, [r3, #12]
 8004a28:	4b52      	ldr	r3, [pc, #328]	@ (8004b74 <HAL_RCC_OscConfig+0x61c>)
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6a11      	ldr	r1, [r2, #32]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a34:	3a01      	subs	r2, #1
 8004a36:	0112      	lsls	r2, r2, #4
 8004a38:	4311      	orrs	r1, r2
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004a3e:	0212      	lsls	r2, r2, #8
 8004a40:	4311      	orrs	r1, r2
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004a46:	0852      	lsrs	r2, r2, #1
 8004a48:	3a01      	subs	r2, #1
 8004a4a:	0552      	lsls	r2, r2, #21
 8004a4c:	4311      	orrs	r1, r2
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a52:	0852      	lsrs	r2, r2, #1
 8004a54:	3a01      	subs	r2, #1
 8004a56:	0652      	lsls	r2, r2, #25
 8004a58:	4311      	orrs	r1, r2
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004a5e:	06d2      	lsls	r2, r2, #27
 8004a60:	430a      	orrs	r2, r1
 8004a62:	4943      	ldr	r1, [pc, #268]	@ (8004b70 <HAL_RCC_OscConfig+0x618>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a68:	4b41      	ldr	r3, [pc, #260]	@ (8004b70 <HAL_RCC_OscConfig+0x618>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a40      	ldr	r2, [pc, #256]	@ (8004b70 <HAL_RCC_OscConfig+0x618>)
 8004a6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a72:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a74:	4b3e      	ldr	r3, [pc, #248]	@ (8004b70 <HAL_RCC_OscConfig+0x618>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	4a3d      	ldr	r2, [pc, #244]	@ (8004b70 <HAL_RCC_OscConfig+0x618>)
 8004a7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a80:	f7fd f87a 	bl	8001b78 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a88:	f7fd f876 	bl	8001b78 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e066      	b.n	8004b68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a9a:	4b35      	ldr	r3, [pc, #212]	@ (8004b70 <HAL_RCC_OscConfig+0x618>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0f0      	beq.n	8004a88 <HAL_RCC_OscConfig+0x530>
 8004aa6:	e05e      	b.n	8004b66 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa8:	4b31      	ldr	r3, [pc, #196]	@ (8004b70 <HAL_RCC_OscConfig+0x618>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a30      	ldr	r2, [pc, #192]	@ (8004b70 <HAL_RCC_OscConfig+0x618>)
 8004aae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fd f860 	bl	8001b78 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004abc:	f7fd f85c 	bl	8001b78 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e04c      	b.n	8004b68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ace:	4b28      	ldr	r3, [pc, #160]	@ (8004b70 <HAL_RCC_OscConfig+0x618>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f0      	bne.n	8004abc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004ada:	4b25      	ldr	r3, [pc, #148]	@ (8004b70 <HAL_RCC_OscConfig+0x618>)
 8004adc:	68da      	ldr	r2, [r3, #12]
 8004ade:	4924      	ldr	r1, [pc, #144]	@ (8004b70 <HAL_RCC_OscConfig+0x618>)
 8004ae0:	4b25      	ldr	r3, [pc, #148]	@ (8004b78 <HAL_RCC_OscConfig+0x620>)
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	60cb      	str	r3, [r1, #12]
 8004ae6:	e03e      	b.n	8004b66 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e039      	b.n	8004b68 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004af4:	4b1e      	ldr	r3, [pc, #120]	@ (8004b70 <HAL_RCC_OscConfig+0x618>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f003 0203 	and.w	r2, r3, #3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d12c      	bne.n	8004b62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b12:	3b01      	subs	r3, #1
 8004b14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d123      	bne.n	8004b62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b24:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d11b      	bne.n	8004b62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b34:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d113      	bne.n	8004b62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b44:	085b      	lsrs	r3, r3, #1
 8004b46:	3b01      	subs	r3, #1
 8004b48:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d109      	bne.n	8004b62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b58:	085b      	lsrs	r3, r3, #1
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d001      	beq.n	8004b66 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e000      	b.n	8004b68 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3720      	adds	r7, #32
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40021000 	.word	0x40021000
 8004b74:	019f800c 	.word	0x019f800c
 8004b78:	feeefffc 	.word	0xfeeefffc

08004b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b86:	2300      	movs	r3, #0
 8004b88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e11e      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b94:	4b91      	ldr	r3, [pc, #580]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 030f 	and.w	r3, r3, #15
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d910      	bls.n	8004bc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba2:	4b8e      	ldr	r3, [pc, #568]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f023 020f 	bic.w	r2, r3, #15
 8004baa:	498c      	ldr	r1, [pc, #560]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb2:	4b8a      	ldr	r3, [pc, #552]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d001      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e106      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d073      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	2b03      	cmp	r3, #3
 8004bd6:	d129      	bne.n	8004c2c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bd8:	4b81      	ldr	r3, [pc, #516]	@ (8004de0 <HAL_RCC_ClockConfig+0x264>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0f4      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004be8:	f000 f99e 	bl	8004f28 <RCC_GetSysClockFreqFromPLLSource>
 8004bec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	4a7c      	ldr	r2, [pc, #496]	@ (8004de4 <HAL_RCC_ClockConfig+0x268>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d93f      	bls.n	8004c76 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004bf6:	4b7a      	ldr	r3, [pc, #488]	@ (8004de0 <HAL_RCC_ClockConfig+0x264>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d009      	beq.n	8004c16 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d033      	beq.n	8004c76 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d12f      	bne.n	8004c76 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c16:	4b72      	ldr	r3, [pc, #456]	@ (8004de0 <HAL_RCC_ClockConfig+0x264>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c1e:	4a70      	ldr	r2, [pc, #448]	@ (8004de0 <HAL_RCC_ClockConfig+0x264>)
 8004c20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c24:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c26:	2380      	movs	r3, #128	@ 0x80
 8004c28:	617b      	str	r3, [r7, #20]
 8004c2a:	e024      	b.n	8004c76 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d107      	bne.n	8004c44 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c34:	4b6a      	ldr	r3, [pc, #424]	@ (8004de0 <HAL_RCC_ClockConfig+0x264>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d109      	bne.n	8004c54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0c6      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c44:	4b66      	ldr	r3, [pc, #408]	@ (8004de0 <HAL_RCC_ClockConfig+0x264>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e0be      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004c54:	f000 f8ce 	bl	8004df4 <HAL_RCC_GetSysClockFreq>
 8004c58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	4a61      	ldr	r2, [pc, #388]	@ (8004de4 <HAL_RCC_ClockConfig+0x268>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d909      	bls.n	8004c76 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c62:	4b5f      	ldr	r3, [pc, #380]	@ (8004de0 <HAL_RCC_ClockConfig+0x264>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c6a:	4a5d      	ldr	r2, [pc, #372]	@ (8004de0 <HAL_RCC_ClockConfig+0x264>)
 8004c6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c70:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004c72:	2380      	movs	r3, #128	@ 0x80
 8004c74:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c76:	4b5a      	ldr	r3, [pc, #360]	@ (8004de0 <HAL_RCC_ClockConfig+0x264>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f023 0203 	bic.w	r2, r3, #3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	4957      	ldr	r1, [pc, #348]	@ (8004de0 <HAL_RCC_ClockConfig+0x264>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c88:	f7fc ff76 	bl	8001b78 <HAL_GetTick>
 8004c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c8e:	e00a      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c90:	f7fc ff72 	bl	8001b78 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e095      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ca6:	4b4e      	ldr	r3, [pc, #312]	@ (8004de0 <HAL_RCC_ClockConfig+0x264>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 020c 	and.w	r2, r3, #12
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d1eb      	bne.n	8004c90 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d023      	beq.n	8004d0c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0304 	and.w	r3, r3, #4
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d005      	beq.n	8004cdc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cd0:	4b43      	ldr	r3, [pc, #268]	@ (8004de0 <HAL_RCC_ClockConfig+0x264>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	4a42      	ldr	r2, [pc, #264]	@ (8004de0 <HAL_RCC_ClockConfig+0x264>)
 8004cd6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004cda:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0308 	and.w	r3, r3, #8
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d007      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004ce8:	4b3d      	ldr	r3, [pc, #244]	@ (8004de0 <HAL_RCC_ClockConfig+0x264>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004cf0:	4a3b      	ldr	r2, [pc, #236]	@ (8004de0 <HAL_RCC_ClockConfig+0x264>)
 8004cf2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004cf6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cf8:	4b39      	ldr	r3, [pc, #228]	@ (8004de0 <HAL_RCC_ClockConfig+0x264>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	4936      	ldr	r1, [pc, #216]	@ (8004de0 <HAL_RCC_ClockConfig+0x264>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	608b      	str	r3, [r1, #8]
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2b80      	cmp	r3, #128	@ 0x80
 8004d10:	d105      	bne.n	8004d1e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004d12:	4b33      	ldr	r3, [pc, #204]	@ (8004de0 <HAL_RCC_ClockConfig+0x264>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	4a32      	ldr	r2, [pc, #200]	@ (8004de0 <HAL_RCC_ClockConfig+0x264>)
 8004d18:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d1c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d1e:	4b2f      	ldr	r3, [pc, #188]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d21d      	bcs.n	8004d68 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f023 020f 	bic.w	r2, r3, #15
 8004d34:	4929      	ldr	r1, [pc, #164]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004d3c:	f7fc ff1c 	bl	8001b78 <HAL_GetTick>
 8004d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d42:	e00a      	b.n	8004d5a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d44:	f7fc ff18 	bl	8001b78 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e03b      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d5a:	4b20      	ldr	r3, [pc, #128]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d1ed      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d008      	beq.n	8004d86 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d74:	4b1a      	ldr	r3, [pc, #104]	@ (8004de0 <HAL_RCC_ClockConfig+0x264>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	4917      	ldr	r1, [pc, #92]	@ (8004de0 <HAL_RCC_ClockConfig+0x264>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0308 	and.w	r3, r3, #8
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d009      	beq.n	8004da6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d92:	4b13      	ldr	r3, [pc, #76]	@ (8004de0 <HAL_RCC_ClockConfig+0x264>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	490f      	ldr	r1, [pc, #60]	@ (8004de0 <HAL_RCC_ClockConfig+0x264>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004da6:	f000 f825 	bl	8004df4 <HAL_RCC_GetSysClockFreq>
 8004daa:	4602      	mov	r2, r0
 8004dac:	4b0c      	ldr	r3, [pc, #48]	@ (8004de0 <HAL_RCC_ClockConfig+0x264>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	091b      	lsrs	r3, r3, #4
 8004db2:	f003 030f 	and.w	r3, r3, #15
 8004db6:	490c      	ldr	r1, [pc, #48]	@ (8004de8 <HAL_RCC_ClockConfig+0x26c>)
 8004db8:	5ccb      	ldrb	r3, [r1, r3]
 8004dba:	f003 031f 	and.w	r3, r3, #31
 8004dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8004dec <HAL_RCC_ClockConfig+0x270>)
 8004dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8004df0 <HAL_RCC_ClockConfig+0x274>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fc fe88 	bl	8001ae0 <HAL_InitTick>
 8004dd0:	4603      	mov	r3, r0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	40022000 	.word	0x40022000
 8004de0:	40021000 	.word	0x40021000
 8004de4:	04c4b400 	.word	0x04c4b400
 8004de8:	0800961c 	.word	0x0800961c
 8004dec:	20000004 	.word	0x20000004
 8004df0:	20000008 	.word	0x20000008

08004df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004dfa:	4b2c      	ldr	r3, [pc, #176]	@ (8004eac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 030c 	and.w	r3, r3, #12
 8004e02:	2b04      	cmp	r3, #4
 8004e04:	d102      	bne.n	8004e0c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e06:	4b2a      	ldr	r3, [pc, #168]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	e047      	b.n	8004e9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004e0c:	4b27      	ldr	r3, [pc, #156]	@ (8004eac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f003 030c 	and.w	r3, r3, #12
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	d102      	bne.n	8004e1e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e18:	4b26      	ldr	r3, [pc, #152]	@ (8004eb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e1a:	613b      	str	r3, [r7, #16]
 8004e1c:	e03e      	b.n	8004e9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004e1e:	4b23      	ldr	r3, [pc, #140]	@ (8004eac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 030c 	and.w	r3, r3, #12
 8004e26:	2b0c      	cmp	r3, #12
 8004e28:	d136      	bne.n	8004e98 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e2a:	4b20      	ldr	r3, [pc, #128]	@ (8004eac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f003 0303 	and.w	r3, r3, #3
 8004e32:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e34:	4b1d      	ldr	r3, [pc, #116]	@ (8004eac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	091b      	lsrs	r3, r3, #4
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	3301      	adds	r3, #1
 8004e40:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d10c      	bne.n	8004e62 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e48:	4a1a      	ldr	r2, [pc, #104]	@ (8004eb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e50:	4a16      	ldr	r2, [pc, #88]	@ (8004eac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e52:	68d2      	ldr	r2, [r2, #12]
 8004e54:	0a12      	lsrs	r2, r2, #8
 8004e56:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e5a:	fb02 f303 	mul.w	r3, r2, r3
 8004e5e:	617b      	str	r3, [r7, #20]
      break;
 8004e60:	e00c      	b.n	8004e7c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e62:	4a13      	ldr	r2, [pc, #76]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6a:	4a10      	ldr	r2, [pc, #64]	@ (8004eac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e6c:	68d2      	ldr	r2, [r2, #12]
 8004e6e:	0a12      	lsrs	r2, r2, #8
 8004e70:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e74:	fb02 f303 	mul.w	r3, r2, r3
 8004e78:	617b      	str	r3, [r7, #20]
      break;
 8004e7a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004eac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	0e5b      	lsrs	r3, r3, #25
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	3301      	adds	r3, #1
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e94:	613b      	str	r3, [r7, #16]
 8004e96:	e001      	b.n	8004e9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004e9c:	693b      	ldr	r3, [r7, #16]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	371c      	adds	r7, #28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40021000 	.word	0x40021000
 8004eb0:	00f42400 	.word	0x00f42400
 8004eb4:	016e3600 	.word	0x016e3600

08004eb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ebc:	4b03      	ldr	r3, [pc, #12]	@ (8004ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	20000004 	.word	0x20000004

08004ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ed4:	f7ff fff0 	bl	8004eb8 <HAL_RCC_GetHCLKFreq>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	4b06      	ldr	r3, [pc, #24]	@ (8004ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	0a1b      	lsrs	r3, r3, #8
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	4904      	ldr	r1, [pc, #16]	@ (8004ef8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ee6:	5ccb      	ldrb	r3, [r1, r3]
 8004ee8:	f003 031f 	and.w	r3, r3, #31
 8004eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	0800962c 	.word	0x0800962c

08004efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f00:	f7ff ffda 	bl	8004eb8 <HAL_RCC_GetHCLKFreq>
 8004f04:	4602      	mov	r2, r0
 8004f06:	4b06      	ldr	r3, [pc, #24]	@ (8004f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	0adb      	lsrs	r3, r3, #11
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	4904      	ldr	r1, [pc, #16]	@ (8004f24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f12:	5ccb      	ldrb	r3, [r1, r3]
 8004f14:	f003 031f 	and.w	r3, r3, #31
 8004f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	40021000 	.word	0x40021000
 8004f24:	0800962c 	.word	0x0800962c

08004f28 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8004fa8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f003 0303 	and.w	r3, r3, #3
 8004f36:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f38:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	091b      	lsrs	r3, r3, #4
 8004f3e:	f003 030f 	and.w	r3, r3, #15
 8004f42:	3301      	adds	r3, #1
 8004f44:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	2b03      	cmp	r3, #3
 8004f4a:	d10c      	bne.n	8004f66 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f4c:	4a17      	ldr	r2, [pc, #92]	@ (8004fac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f54:	4a14      	ldr	r2, [pc, #80]	@ (8004fa8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f56:	68d2      	ldr	r2, [r2, #12]
 8004f58:	0a12      	lsrs	r2, r2, #8
 8004f5a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f5e:	fb02 f303 	mul.w	r3, r2, r3
 8004f62:	617b      	str	r3, [r7, #20]
    break;
 8004f64:	e00c      	b.n	8004f80 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f66:	4a12      	ldr	r2, [pc, #72]	@ (8004fb0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6e:	4a0e      	ldr	r2, [pc, #56]	@ (8004fa8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f70:	68d2      	ldr	r2, [r2, #12]
 8004f72:	0a12      	lsrs	r2, r2, #8
 8004f74:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f78:	fb02 f303 	mul.w	r3, r2, r3
 8004f7c:	617b      	str	r3, [r7, #20]
    break;
 8004f7e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f80:	4b09      	ldr	r3, [pc, #36]	@ (8004fa8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	0e5b      	lsrs	r3, r3, #25
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f98:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004f9a:	687b      	ldr	r3, [r7, #4]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	371c      	adds	r7, #28
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	016e3600 	.word	0x016e3600
 8004fb0:	00f42400 	.word	0x00f42400

08004fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 8098 	beq.w	8005102 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fd6:	4b43      	ldr	r3, [pc, #268]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10d      	bne.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fe2:	4b40      	ldr	r3, [pc, #256]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fe6:	4a3f      	ldr	r2, [pc, #252]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fec:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fee:	4b3d      	ldr	r3, [pc, #244]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ff6:	60bb      	str	r3, [r7, #8]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ffe:	4b3a      	ldr	r3, [pc, #232]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a39      	ldr	r2, [pc, #228]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005004:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005008:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800500a:	f7fc fdb5 	bl	8001b78 <HAL_GetTick>
 800500e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005010:	e009      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005012:	f7fc fdb1 	bl	8001b78 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d902      	bls.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	74fb      	strb	r3, [r7, #19]
        break;
 8005024:	e005      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005026:	4b30      	ldr	r3, [pc, #192]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0ef      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005032:	7cfb      	ldrb	r3, [r7, #19]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d159      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005038:	4b2a      	ldr	r3, [pc, #168]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800503a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800503e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005042:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d01e      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	429a      	cmp	r2, r3
 8005052:	d019      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005054:	4b23      	ldr	r3, [pc, #140]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800505a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800505e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005060:	4b20      	ldr	r3, [pc, #128]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005066:	4a1f      	ldr	r2, [pc, #124]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800506c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005070:	4b1c      	ldr	r3, [pc, #112]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005076:	4a1b      	ldr	r2, [pc, #108]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005078:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800507c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005080:	4a18      	ldr	r2, [pc, #96]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d016      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005092:	f7fc fd71 	bl	8001b78 <HAL_GetTick>
 8005096:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005098:	e00b      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509a:	f7fc fd6d 	bl	8001b78 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d902      	bls.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	74fb      	strb	r3, [r7, #19]
            break;
 80050b0:	e006      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050b2:	4b0c      	ldr	r3, [pc, #48]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0ec      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80050c0:	7cfb      	ldrb	r3, [r7, #19]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10b      	bne.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050c6:	4b07      	ldr	r3, [pc, #28]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050d4:	4903      	ldr	r1, [pc, #12]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80050dc:	e008      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050de:	7cfb      	ldrb	r3, [r7, #19]
 80050e0:	74bb      	strb	r3, [r7, #18]
 80050e2:	e005      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80050e4:	40021000 	.word	0x40021000
 80050e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ec:	7cfb      	ldrb	r3, [r7, #19]
 80050ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050f0:	7c7b      	ldrb	r3, [r7, #17]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d105      	bne.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050f6:	4ba7      	ldr	r3, [pc, #668]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050fa:	4aa6      	ldr	r2, [pc, #664]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005100:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800510e:	4ba1      	ldr	r3, [pc, #644]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005114:	f023 0203 	bic.w	r2, r3, #3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	499d      	ldr	r1, [pc, #628]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00a      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005130:	4b98      	ldr	r3, [pc, #608]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005136:	f023 020c 	bic.w	r2, r3, #12
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	4995      	ldr	r1, [pc, #596]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005140:	4313      	orrs	r3, r2
 8005142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0304 	and.w	r3, r3, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005152:	4b90      	ldr	r3, [pc, #576]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005158:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	498c      	ldr	r1, [pc, #560]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005162:	4313      	orrs	r3, r2
 8005164:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0308 	and.w	r3, r3, #8
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00a      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005174:	4b87      	ldr	r3, [pc, #540]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800517a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	4984      	ldr	r1, [pc, #528]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0310 	and.w	r3, r3, #16
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005196:	4b7f      	ldr	r3, [pc, #508]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800519c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	497b      	ldr	r1, [pc, #492]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0320 	and.w	r3, r3, #32
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00a      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051b8:	4b76      	ldr	r3, [pc, #472]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	4973      	ldr	r1, [pc, #460]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051da:	4b6e      	ldr	r3, [pc, #440]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	496a      	ldr	r1, [pc, #424]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00a      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051fc:	4b65      	ldr	r3, [pc, #404]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005202:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	4962      	ldr	r1, [pc, #392]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800520c:	4313      	orrs	r3, r2
 800520e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00a      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800521e:	4b5d      	ldr	r3, [pc, #372]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005224:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522c:	4959      	ldr	r1, [pc, #356]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800522e:	4313      	orrs	r3, r2
 8005230:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00a      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005240:	4b54      	ldr	r3, [pc, #336]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005242:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005246:	f023 0203 	bic.w	r2, r3, #3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800524e:	4951      	ldr	r1, [pc, #324]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005250:	4313      	orrs	r3, r2
 8005252:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005262:	4b4c      	ldr	r3, [pc, #304]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005268:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005270:	4948      	ldr	r1, [pc, #288]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005272:	4313      	orrs	r3, r2
 8005274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005280:	2b00      	cmp	r3, #0
 8005282:	d015      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005284:	4b43      	ldr	r3, [pc, #268]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800528a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005292:	4940      	ldr	r1, [pc, #256]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005294:	4313      	orrs	r3, r2
 8005296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800529e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052a2:	d105      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052a4:	4b3b      	ldr	r3, [pc, #236]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	4a3a      	ldr	r2, [pc, #232]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d015      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80052bc:	4b35      	ldr	r3, [pc, #212]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ca:	4932      	ldr	r1, [pc, #200]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052da:	d105      	bne.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052dc:	4b2d      	ldr	r3, [pc, #180]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	4a2c      	ldr	r2, [pc, #176]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d015      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80052f4:	4b27      	ldr	r3, [pc, #156]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052fa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005302:	4924      	ldr	r1, [pc, #144]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005304:	4313      	orrs	r3, r2
 8005306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800530e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005312:	d105      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005314:	4b1f      	ldr	r3, [pc, #124]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	4a1e      	ldr	r2, [pc, #120]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800531a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800531e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d015      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800532c:	4b19      	ldr	r3, [pc, #100]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800532e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005332:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800533a:	4916      	ldr	r1, [pc, #88]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800533c:	4313      	orrs	r3, r2
 800533e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005346:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800534a:	d105      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800534c:	4b11      	ldr	r3, [pc, #68]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	4a10      	ldr	r2, [pc, #64]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005352:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005356:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d019      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005364:	4b0b      	ldr	r3, [pc, #44]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800536a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005372:	4908      	ldr	r1, [pc, #32]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005374:	4313      	orrs	r3, r2
 8005376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005382:	d109      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005384:	4b03      	ldr	r3, [pc, #12]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	4a02      	ldr	r2, [pc, #8]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800538a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800538e:	60d3      	str	r3, [r2, #12]
 8005390:	e002      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005392:	bf00      	nop
 8005394:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d015      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80053a4:	4b29      	ldr	r3, [pc, #164]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053aa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b2:	4926      	ldr	r1, [pc, #152]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053c2:	d105      	bne.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80053c4:	4b21      	ldr	r3, [pc, #132]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	4a20      	ldr	r2, [pc, #128]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053ce:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d015      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80053dc:	4b1b      	ldr	r3, [pc, #108]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053e2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053ea:	4918      	ldr	r1, [pc, #96]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053fa:	d105      	bne.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80053fc:	4b13      	ldr	r3, [pc, #76]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	4a12      	ldr	r2, [pc, #72]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005402:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005406:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d015      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005414:	4b0d      	ldr	r3, [pc, #52]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005416:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800541a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005422:	490a      	ldr	r1, [pc, #40]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005424:	4313      	orrs	r3, r2
 8005426:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800542e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005432:	d105      	bne.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005434:	4b05      	ldr	r3, [pc, #20]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	4a04      	ldr	r2, [pc, #16]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800543a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800543e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005440:	7cbb      	ldrb	r3, [r7, #18]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3718      	adds	r7, #24
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	40021000 	.word	0x40021000

08005450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e049      	b.n	80054f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d106      	bne.n	800547c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7fc f94c 	bl	8001714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2202      	movs	r2, #2
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	3304      	adds	r3, #4
 800548c:	4619      	mov	r1, r3
 800548e:	4610      	mov	r0, r2
 8005490:	f000 ff68 	bl	8006364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
	...

08005500 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b01      	cmp	r3, #1
 8005512:	d001      	beq.n	8005518 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e04c      	b.n	80055b2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a26      	ldr	r2, [pc, #152]	@ (80055c0 <HAL_TIM_Base_Start+0xc0>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d022      	beq.n	8005570 <HAL_TIM_Base_Start+0x70>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005532:	d01d      	beq.n	8005570 <HAL_TIM_Base_Start+0x70>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a22      	ldr	r2, [pc, #136]	@ (80055c4 <HAL_TIM_Base_Start+0xc4>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d018      	beq.n	8005570 <HAL_TIM_Base_Start+0x70>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a21      	ldr	r2, [pc, #132]	@ (80055c8 <HAL_TIM_Base_Start+0xc8>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d013      	beq.n	8005570 <HAL_TIM_Base_Start+0x70>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a1f      	ldr	r2, [pc, #124]	@ (80055cc <HAL_TIM_Base_Start+0xcc>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d00e      	beq.n	8005570 <HAL_TIM_Base_Start+0x70>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a1e      	ldr	r2, [pc, #120]	@ (80055d0 <HAL_TIM_Base_Start+0xd0>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d009      	beq.n	8005570 <HAL_TIM_Base_Start+0x70>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a1c      	ldr	r2, [pc, #112]	@ (80055d4 <HAL_TIM_Base_Start+0xd4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d004      	beq.n	8005570 <HAL_TIM_Base_Start+0x70>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a1b      	ldr	r2, [pc, #108]	@ (80055d8 <HAL_TIM_Base_Start+0xd8>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d115      	bne.n	800559c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	4b19      	ldr	r3, [pc, #100]	@ (80055dc <HAL_TIM_Base_Start+0xdc>)
 8005578:	4013      	ands	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2b06      	cmp	r3, #6
 8005580:	d015      	beq.n	80055ae <HAL_TIM_Base_Start+0xae>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005588:	d011      	beq.n	80055ae <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f042 0201 	orr.w	r2, r2, #1
 8005598:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800559a:	e008      	b.n	80055ae <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f042 0201 	orr.w	r2, r2, #1
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	e000      	b.n	80055b0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	40012c00 	.word	0x40012c00
 80055c4:	40000400 	.word	0x40000400
 80055c8:	40000800 	.word	0x40000800
 80055cc:	40000c00 	.word	0x40000c00
 80055d0:	40013400 	.word	0x40013400
 80055d4:	40014000 	.word	0x40014000
 80055d8:	40015000 	.word	0x40015000
 80055dc:	00010007 	.word	0x00010007

080055e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d001      	beq.n	80055f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e054      	b.n	80056a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0201 	orr.w	r2, r2, #1
 800560e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a26      	ldr	r2, [pc, #152]	@ (80056b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d022      	beq.n	8005660 <HAL_TIM_Base_Start_IT+0x80>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005622:	d01d      	beq.n	8005660 <HAL_TIM_Base_Start_IT+0x80>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a22      	ldr	r2, [pc, #136]	@ (80056b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d018      	beq.n	8005660 <HAL_TIM_Base_Start_IT+0x80>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a21      	ldr	r2, [pc, #132]	@ (80056b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d013      	beq.n	8005660 <HAL_TIM_Base_Start_IT+0x80>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a1f      	ldr	r2, [pc, #124]	@ (80056bc <HAL_TIM_Base_Start_IT+0xdc>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d00e      	beq.n	8005660 <HAL_TIM_Base_Start_IT+0x80>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a1e      	ldr	r2, [pc, #120]	@ (80056c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d009      	beq.n	8005660 <HAL_TIM_Base_Start_IT+0x80>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a1c      	ldr	r2, [pc, #112]	@ (80056c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d004      	beq.n	8005660 <HAL_TIM_Base_Start_IT+0x80>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a1b      	ldr	r2, [pc, #108]	@ (80056c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d115      	bne.n	800568c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689a      	ldr	r2, [r3, #8]
 8005666:	4b19      	ldr	r3, [pc, #100]	@ (80056cc <HAL_TIM_Base_Start_IT+0xec>)
 8005668:	4013      	ands	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b06      	cmp	r3, #6
 8005670:	d015      	beq.n	800569e <HAL_TIM_Base_Start_IT+0xbe>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005678:	d011      	beq.n	800569e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f042 0201 	orr.w	r2, r2, #1
 8005688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800568a:	e008      	b.n	800569e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0201 	orr.w	r2, r2, #1
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	e000      	b.n	80056a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800569e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	40012c00 	.word	0x40012c00
 80056b4:	40000400 	.word	0x40000400
 80056b8:	40000800 	.word	0x40000800
 80056bc:	40000c00 	.word	0x40000c00
 80056c0:	40013400 	.word	0x40013400
 80056c4:	40014000 	.word	0x40014000
 80056c8:	40015000 	.word	0x40015000
 80056cc:	00010007 	.word	0x00010007

080056d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e049      	b.n	8005776 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d106      	bne.n	80056fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f841 	bl	800577e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	3304      	adds	r3, #4
 800570c:	4619      	mov	r1, r3
 800570e:	4610      	mov	r0, r2
 8005710:	f000 fe28 	bl	8006364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800577e:	b480      	push	{r7}
 8005780:	b083      	sub	sp, #12
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
	...

08005794 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d109      	bne.n	80057b8 <HAL_TIM_PWM_Start+0x24>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	bf14      	ite	ne
 80057b0:	2301      	movne	r3, #1
 80057b2:	2300      	moveq	r3, #0
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	e03c      	b.n	8005832 <HAL_TIM_PWM_Start+0x9e>
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d109      	bne.n	80057d2 <HAL_TIM_PWM_Start+0x3e>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	bf14      	ite	ne
 80057ca:	2301      	movne	r3, #1
 80057cc:	2300      	moveq	r3, #0
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	e02f      	b.n	8005832 <HAL_TIM_PWM_Start+0x9e>
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b08      	cmp	r3, #8
 80057d6:	d109      	bne.n	80057ec <HAL_TIM_PWM_Start+0x58>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	bf14      	ite	ne
 80057e4:	2301      	movne	r3, #1
 80057e6:	2300      	moveq	r3, #0
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	e022      	b.n	8005832 <HAL_TIM_PWM_Start+0x9e>
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	2b0c      	cmp	r3, #12
 80057f0:	d109      	bne.n	8005806 <HAL_TIM_PWM_Start+0x72>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	bf14      	ite	ne
 80057fe:	2301      	movne	r3, #1
 8005800:	2300      	moveq	r3, #0
 8005802:	b2db      	uxtb	r3, r3
 8005804:	e015      	b.n	8005832 <HAL_TIM_PWM_Start+0x9e>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b10      	cmp	r3, #16
 800580a:	d109      	bne.n	8005820 <HAL_TIM_PWM_Start+0x8c>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b01      	cmp	r3, #1
 8005816:	bf14      	ite	ne
 8005818:	2301      	movne	r3, #1
 800581a:	2300      	moveq	r3, #0
 800581c:	b2db      	uxtb	r3, r3
 800581e:	e008      	b.n	8005832 <HAL_TIM_PWM_Start+0x9e>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b01      	cmp	r3, #1
 800582a:	bf14      	ite	ne
 800582c:	2301      	movne	r3, #1
 800582e:	2300      	moveq	r3, #0
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e0a6      	b.n	8005988 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d104      	bne.n	800584a <HAL_TIM_PWM_Start+0xb6>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2202      	movs	r2, #2
 8005844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005848:	e023      	b.n	8005892 <HAL_TIM_PWM_Start+0xfe>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b04      	cmp	r3, #4
 800584e:	d104      	bne.n	800585a <HAL_TIM_PWM_Start+0xc6>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005858:	e01b      	b.n	8005892 <HAL_TIM_PWM_Start+0xfe>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b08      	cmp	r3, #8
 800585e:	d104      	bne.n	800586a <HAL_TIM_PWM_Start+0xd6>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005868:	e013      	b.n	8005892 <HAL_TIM_PWM_Start+0xfe>
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b0c      	cmp	r3, #12
 800586e:	d104      	bne.n	800587a <HAL_TIM_PWM_Start+0xe6>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005878:	e00b      	b.n	8005892 <HAL_TIM_PWM_Start+0xfe>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b10      	cmp	r3, #16
 800587e:	d104      	bne.n	800588a <HAL_TIM_PWM_Start+0xf6>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005888:	e003      	b.n	8005892 <HAL_TIM_PWM_Start+0xfe>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2202      	movs	r2, #2
 800588e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2201      	movs	r2, #1
 8005898:	6839      	ldr	r1, [r7, #0]
 800589a:	4618      	mov	r0, r3
 800589c:	f001 f9dc 	bl	8006c58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a3a      	ldr	r2, [pc, #232]	@ (8005990 <HAL_TIM_PWM_Start+0x1fc>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d018      	beq.n	80058dc <HAL_TIM_PWM_Start+0x148>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a39      	ldr	r2, [pc, #228]	@ (8005994 <HAL_TIM_PWM_Start+0x200>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d013      	beq.n	80058dc <HAL_TIM_PWM_Start+0x148>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a37      	ldr	r2, [pc, #220]	@ (8005998 <HAL_TIM_PWM_Start+0x204>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d00e      	beq.n	80058dc <HAL_TIM_PWM_Start+0x148>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a36      	ldr	r2, [pc, #216]	@ (800599c <HAL_TIM_PWM_Start+0x208>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d009      	beq.n	80058dc <HAL_TIM_PWM_Start+0x148>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a34      	ldr	r2, [pc, #208]	@ (80059a0 <HAL_TIM_PWM_Start+0x20c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d004      	beq.n	80058dc <HAL_TIM_PWM_Start+0x148>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a33      	ldr	r2, [pc, #204]	@ (80059a4 <HAL_TIM_PWM_Start+0x210>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d101      	bne.n	80058e0 <HAL_TIM_PWM_Start+0x14c>
 80058dc:	2301      	movs	r3, #1
 80058de:	e000      	b.n	80058e2 <HAL_TIM_PWM_Start+0x14e>
 80058e0:	2300      	movs	r3, #0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d007      	beq.n	80058f6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a25      	ldr	r2, [pc, #148]	@ (8005990 <HAL_TIM_PWM_Start+0x1fc>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d022      	beq.n	8005946 <HAL_TIM_PWM_Start+0x1b2>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005908:	d01d      	beq.n	8005946 <HAL_TIM_PWM_Start+0x1b2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a26      	ldr	r2, [pc, #152]	@ (80059a8 <HAL_TIM_PWM_Start+0x214>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d018      	beq.n	8005946 <HAL_TIM_PWM_Start+0x1b2>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a24      	ldr	r2, [pc, #144]	@ (80059ac <HAL_TIM_PWM_Start+0x218>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d013      	beq.n	8005946 <HAL_TIM_PWM_Start+0x1b2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a23      	ldr	r2, [pc, #140]	@ (80059b0 <HAL_TIM_PWM_Start+0x21c>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d00e      	beq.n	8005946 <HAL_TIM_PWM_Start+0x1b2>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a19      	ldr	r2, [pc, #100]	@ (8005994 <HAL_TIM_PWM_Start+0x200>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d009      	beq.n	8005946 <HAL_TIM_PWM_Start+0x1b2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a18      	ldr	r2, [pc, #96]	@ (8005998 <HAL_TIM_PWM_Start+0x204>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d004      	beq.n	8005946 <HAL_TIM_PWM_Start+0x1b2>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a18      	ldr	r2, [pc, #96]	@ (80059a4 <HAL_TIM_PWM_Start+0x210>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d115      	bne.n	8005972 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	4b19      	ldr	r3, [pc, #100]	@ (80059b4 <HAL_TIM_PWM_Start+0x220>)
 800594e:	4013      	ands	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2b06      	cmp	r3, #6
 8005956:	d015      	beq.n	8005984 <HAL_TIM_PWM_Start+0x1f0>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800595e:	d011      	beq.n	8005984 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f042 0201 	orr.w	r2, r2, #1
 800596e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005970:	e008      	b.n	8005984 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f042 0201 	orr.w	r2, r2, #1
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	e000      	b.n	8005986 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005984:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	40012c00 	.word	0x40012c00
 8005994:	40013400 	.word	0x40013400
 8005998:	40014000 	.word	0x40014000
 800599c:	40014400 	.word	0x40014400
 80059a0:	40014800 	.word	0x40014800
 80059a4:	40015000 	.word	0x40015000
 80059a8:	40000400 	.word	0x40000400
 80059ac:	40000800 	.word	0x40000800
 80059b0:	40000c00 	.word	0x40000c00
 80059b4:	00010007 	.word	0x00010007

080059b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e097      	b.n	8005afc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d106      	bne.n	80059e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7fb feff 	bl	80017e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2202      	movs	r2, #2
 80059ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6812      	ldr	r2, [r2, #0]
 80059f8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80059fc:	f023 0307 	bic.w	r3, r3, #7
 8005a00:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	3304      	adds	r3, #4
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	f000 fca9 	bl	8006364 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a3a:	f023 0303 	bic.w	r3, r3, #3
 8005a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	021b      	lsls	r3, r3, #8
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005a58:	f023 030c 	bic.w	r3, r3, #12
 8005a5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68da      	ldr	r2, [r3, #12]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	021b      	lsls	r3, r3, #8
 8005a74:	4313      	orrs	r3, r2
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	011a      	lsls	r2, r3, #4
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	031b      	lsls	r3, r3, #12
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005a96:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005a9e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	011b      	lsls	r3, r3, #4
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3718      	adds	r7, #24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b14:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b1c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b24:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b2c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d110      	bne.n	8005b56 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b34:	7bfb      	ldrb	r3, [r7, #15]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d102      	bne.n	8005b40 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b3a:	7b7b      	ldrb	r3, [r7, #13]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d001      	beq.n	8005b44 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e069      	b.n	8005c18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b54:	e031      	b.n	8005bba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	2b04      	cmp	r3, #4
 8005b5a:	d110      	bne.n	8005b7e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b5c:	7bbb      	ldrb	r3, [r7, #14]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d102      	bne.n	8005b68 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b62:	7b3b      	ldrb	r3, [r7, #12]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d001      	beq.n	8005b6c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e055      	b.n	8005c18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b7c:	e01d      	b.n	8005bba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b7e:	7bfb      	ldrb	r3, [r7, #15]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d108      	bne.n	8005b96 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b84:	7bbb      	ldrb	r3, [r7, #14]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d105      	bne.n	8005b96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b8a:	7b7b      	ldrb	r3, [r7, #13]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d102      	bne.n	8005b96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b90:	7b3b      	ldrb	r3, [r7, #12]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d001      	beq.n	8005b9a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e03e      	b.n	8005c18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2202      	movs	r2, #2
 8005bae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <HAL_TIM_Encoder_Start+0xc4>
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d008      	beq.n	8005bd8 <HAL_TIM_Encoder_Start+0xd4>
 8005bc6:	e00f      	b.n	8005be8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	2100      	movs	r1, #0
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f001 f841 	bl	8006c58 <TIM_CCxChannelCmd>
      break;
 8005bd6:	e016      	b.n	8005c06 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	2104      	movs	r1, #4
 8005be0:	4618      	mov	r0, r3
 8005be2:	f001 f839 	bl	8006c58 <TIM_CCxChannelCmd>
      break;
 8005be6:	e00e      	b.n	8005c06 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2201      	movs	r2, #1
 8005bee:	2100      	movs	r1, #0
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f001 f831 	bl	8006c58 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	2104      	movs	r1, #4
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f001 f82a 	bl	8006c58 <TIM_CCxChannelCmd>
      break;
 8005c04:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f042 0201 	orr.w	r2, r2, #1
 8005c14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d020      	beq.n	8005c84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d01b      	beq.n	8005c84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f06f 0202 	mvn.w	r2, #2
 8005c54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fb5c 	bl	8006328 <HAL_TIM_IC_CaptureCallback>
 8005c70:	e005      	b.n	8005c7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fb4e 	bl	8006314 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 fb5f 	bl	800633c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	f003 0304 	and.w	r3, r3, #4
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d020      	beq.n	8005cd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f003 0304 	and.w	r3, r3, #4
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d01b      	beq.n	8005cd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f06f 0204 	mvn.w	r2, #4
 8005ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2202      	movs	r2, #2
 8005ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fb36 	bl	8006328 <HAL_TIM_IC_CaptureCallback>
 8005cbc:	e005      	b.n	8005cca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fb28 	bl	8006314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 fb39 	bl	800633c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f003 0308 	and.w	r3, r3, #8
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d020      	beq.n	8005d1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f003 0308 	and.w	r3, r3, #8
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d01b      	beq.n	8005d1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f06f 0208 	mvn.w	r2, #8
 8005cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2204      	movs	r2, #4
 8005cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	f003 0303 	and.w	r3, r3, #3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fb10 	bl	8006328 <HAL_TIM_IC_CaptureCallback>
 8005d08:	e005      	b.n	8005d16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fb02 	bl	8006314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fb13 	bl	800633c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f003 0310 	and.w	r3, r3, #16
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d020      	beq.n	8005d68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f003 0310 	and.w	r3, r3, #16
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d01b      	beq.n	8005d68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f06f 0210 	mvn.w	r2, #16
 8005d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2208      	movs	r2, #8
 8005d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d003      	beq.n	8005d56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 faea 	bl	8006328 <HAL_TIM_IC_CaptureCallback>
 8005d54:	e005      	b.n	8005d62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fadc 	bl	8006314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 faed 	bl	800633c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00c      	beq.n	8005d8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d007      	beq.n	8005d8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f06f 0201 	mvn.w	r2, #1
 8005d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7fb f9fc 	bl	8001184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d104      	bne.n	8005da0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00c      	beq.n	8005dba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d007      	beq.n	8005dba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f001 f8a9 	bl	8006f0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00c      	beq.n	8005dde <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d007      	beq.n	8005dde <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f001 f8a1 	bl	8006f20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00c      	beq.n	8005e02 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d007      	beq.n	8005e02 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 faa7 	bl	8006350 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f003 0320 	and.w	r3, r3, #32
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00c      	beq.n	8005e26 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f003 0320 	and.w	r3, r3, #32
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d007      	beq.n	8005e26 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f06f 0220 	mvn.w	r2, #32
 8005e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f001 f869 	bl	8006ef8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00c      	beq.n	8005e4a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d007      	beq.n	8005e4a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f001 f875 	bl	8006f34 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00c      	beq.n	8005e6e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d007      	beq.n	8005e6e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f001 f86d 	bl	8006f48 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00c      	beq.n	8005e92 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d007      	beq.n	8005e92 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f001 f865 	bl	8006f5c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00c      	beq.n	8005eb6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d007      	beq.n	8005eb6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f001 f85d 	bl	8006f70 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005eb6:	bf00      	nop
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d101      	bne.n	8005ede <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005eda:	2302      	movs	r3, #2
 8005edc:	e0ff      	b.n	80060de <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b14      	cmp	r3, #20
 8005eea:	f200 80f0 	bhi.w	80060ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005eee:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef4:	08005f49 	.word	0x08005f49
 8005ef8:	080060cf 	.word	0x080060cf
 8005efc:	080060cf 	.word	0x080060cf
 8005f00:	080060cf 	.word	0x080060cf
 8005f04:	08005f89 	.word	0x08005f89
 8005f08:	080060cf 	.word	0x080060cf
 8005f0c:	080060cf 	.word	0x080060cf
 8005f10:	080060cf 	.word	0x080060cf
 8005f14:	08005fcb 	.word	0x08005fcb
 8005f18:	080060cf 	.word	0x080060cf
 8005f1c:	080060cf 	.word	0x080060cf
 8005f20:	080060cf 	.word	0x080060cf
 8005f24:	0800600b 	.word	0x0800600b
 8005f28:	080060cf 	.word	0x080060cf
 8005f2c:	080060cf 	.word	0x080060cf
 8005f30:	080060cf 	.word	0x080060cf
 8005f34:	0800604d 	.word	0x0800604d
 8005f38:	080060cf 	.word	0x080060cf
 8005f3c:	080060cf 	.word	0x080060cf
 8005f40:	080060cf 	.word	0x080060cf
 8005f44:	0800608d 	.word	0x0800608d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68b9      	ldr	r1, [r7, #8]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 fabc 	bl	80064cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	699a      	ldr	r2, [r3, #24]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0208 	orr.w	r2, r2, #8
 8005f62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	699a      	ldr	r2, [r3, #24]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 0204 	bic.w	r2, r2, #4
 8005f72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6999      	ldr	r1, [r3, #24]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	691a      	ldr	r2, [r3, #16]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	619a      	str	r2, [r3, #24]
      break;
 8005f86:	e0a5      	b.n	80060d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68b9      	ldr	r1, [r7, #8]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 fb36 	bl	8006600 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699a      	ldr	r2, [r3, #24]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	699a      	ldr	r2, [r3, #24]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6999      	ldr	r1, [r3, #24]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	021a      	lsls	r2, r3, #8
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	619a      	str	r2, [r3, #24]
      break;
 8005fc8:	e084      	b.n	80060d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68b9      	ldr	r1, [r7, #8]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 fba9 	bl	8006728 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	69da      	ldr	r2, [r3, #28]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f042 0208 	orr.w	r2, r2, #8
 8005fe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	69da      	ldr	r2, [r3, #28]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0204 	bic.w	r2, r2, #4
 8005ff4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69d9      	ldr	r1, [r3, #28]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	691a      	ldr	r2, [r3, #16]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	430a      	orrs	r2, r1
 8006006:	61da      	str	r2, [r3, #28]
      break;
 8006008:	e064      	b.n	80060d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68b9      	ldr	r1, [r7, #8]
 8006010:	4618      	mov	r0, r3
 8006012:	f000 fc1b 	bl	800684c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	69da      	ldr	r2, [r3, #28]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	69da      	ldr	r2, [r3, #28]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	69d9      	ldr	r1, [r3, #28]
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	021a      	lsls	r2, r3, #8
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	61da      	str	r2, [r3, #28]
      break;
 800604a:	e043      	b.n	80060d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68b9      	ldr	r1, [r7, #8]
 8006052:	4618      	mov	r0, r3
 8006054:	f000 fc8e 	bl	8006974 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f042 0208 	orr.w	r2, r2, #8
 8006066:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0204 	bic.w	r2, r2, #4
 8006076:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	691a      	ldr	r2, [r3, #16]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800608a:	e023      	b.n	80060d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68b9      	ldr	r1, [r7, #8]
 8006092:	4618      	mov	r0, r3
 8006094:	f000 fcd8 	bl	8006a48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060a6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060b6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	021a      	lsls	r2, r3, #8
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80060cc:	e002      	b.n	80060d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	75fb      	strb	r3, [r7, #23]
      break;
 80060d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3718      	adds	r7, #24
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop

080060e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d101      	bne.n	8006104 <HAL_TIM_ConfigClockSource+0x1c>
 8006100:	2302      	movs	r3, #2
 8006102:	e0f6      	b.n	80062f2 <HAL_TIM_ConfigClockSource+0x20a>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006122:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006126:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800612e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a6f      	ldr	r2, [pc, #444]	@ (80062fc <HAL_TIM_ConfigClockSource+0x214>)
 800613e:	4293      	cmp	r3, r2
 8006140:	f000 80c1 	beq.w	80062c6 <HAL_TIM_ConfigClockSource+0x1de>
 8006144:	4a6d      	ldr	r2, [pc, #436]	@ (80062fc <HAL_TIM_ConfigClockSource+0x214>)
 8006146:	4293      	cmp	r3, r2
 8006148:	f200 80c6 	bhi.w	80062d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800614c:	4a6c      	ldr	r2, [pc, #432]	@ (8006300 <HAL_TIM_ConfigClockSource+0x218>)
 800614e:	4293      	cmp	r3, r2
 8006150:	f000 80b9 	beq.w	80062c6 <HAL_TIM_ConfigClockSource+0x1de>
 8006154:	4a6a      	ldr	r2, [pc, #424]	@ (8006300 <HAL_TIM_ConfigClockSource+0x218>)
 8006156:	4293      	cmp	r3, r2
 8006158:	f200 80be 	bhi.w	80062d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800615c:	4a69      	ldr	r2, [pc, #420]	@ (8006304 <HAL_TIM_ConfigClockSource+0x21c>)
 800615e:	4293      	cmp	r3, r2
 8006160:	f000 80b1 	beq.w	80062c6 <HAL_TIM_ConfigClockSource+0x1de>
 8006164:	4a67      	ldr	r2, [pc, #412]	@ (8006304 <HAL_TIM_ConfigClockSource+0x21c>)
 8006166:	4293      	cmp	r3, r2
 8006168:	f200 80b6 	bhi.w	80062d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800616c:	4a66      	ldr	r2, [pc, #408]	@ (8006308 <HAL_TIM_ConfigClockSource+0x220>)
 800616e:	4293      	cmp	r3, r2
 8006170:	f000 80a9 	beq.w	80062c6 <HAL_TIM_ConfigClockSource+0x1de>
 8006174:	4a64      	ldr	r2, [pc, #400]	@ (8006308 <HAL_TIM_ConfigClockSource+0x220>)
 8006176:	4293      	cmp	r3, r2
 8006178:	f200 80ae 	bhi.w	80062d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800617c:	4a63      	ldr	r2, [pc, #396]	@ (800630c <HAL_TIM_ConfigClockSource+0x224>)
 800617e:	4293      	cmp	r3, r2
 8006180:	f000 80a1 	beq.w	80062c6 <HAL_TIM_ConfigClockSource+0x1de>
 8006184:	4a61      	ldr	r2, [pc, #388]	@ (800630c <HAL_TIM_ConfigClockSource+0x224>)
 8006186:	4293      	cmp	r3, r2
 8006188:	f200 80a6 	bhi.w	80062d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800618c:	4a60      	ldr	r2, [pc, #384]	@ (8006310 <HAL_TIM_ConfigClockSource+0x228>)
 800618e:	4293      	cmp	r3, r2
 8006190:	f000 8099 	beq.w	80062c6 <HAL_TIM_ConfigClockSource+0x1de>
 8006194:	4a5e      	ldr	r2, [pc, #376]	@ (8006310 <HAL_TIM_ConfigClockSource+0x228>)
 8006196:	4293      	cmp	r3, r2
 8006198:	f200 809e 	bhi.w	80062d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800619c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80061a0:	f000 8091 	beq.w	80062c6 <HAL_TIM_ConfigClockSource+0x1de>
 80061a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80061a8:	f200 8096 	bhi.w	80062d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80061ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061b0:	f000 8089 	beq.w	80062c6 <HAL_TIM_ConfigClockSource+0x1de>
 80061b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061b8:	f200 808e 	bhi.w	80062d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80061bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061c0:	d03e      	beq.n	8006240 <HAL_TIM_ConfigClockSource+0x158>
 80061c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061c6:	f200 8087 	bhi.w	80062d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80061ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061ce:	f000 8086 	beq.w	80062de <HAL_TIM_ConfigClockSource+0x1f6>
 80061d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061d6:	d87f      	bhi.n	80062d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80061d8:	2b70      	cmp	r3, #112	@ 0x70
 80061da:	d01a      	beq.n	8006212 <HAL_TIM_ConfigClockSource+0x12a>
 80061dc:	2b70      	cmp	r3, #112	@ 0x70
 80061de:	d87b      	bhi.n	80062d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80061e0:	2b60      	cmp	r3, #96	@ 0x60
 80061e2:	d050      	beq.n	8006286 <HAL_TIM_ConfigClockSource+0x19e>
 80061e4:	2b60      	cmp	r3, #96	@ 0x60
 80061e6:	d877      	bhi.n	80062d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80061e8:	2b50      	cmp	r3, #80	@ 0x50
 80061ea:	d03c      	beq.n	8006266 <HAL_TIM_ConfigClockSource+0x17e>
 80061ec:	2b50      	cmp	r3, #80	@ 0x50
 80061ee:	d873      	bhi.n	80062d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80061f0:	2b40      	cmp	r3, #64	@ 0x40
 80061f2:	d058      	beq.n	80062a6 <HAL_TIM_ConfigClockSource+0x1be>
 80061f4:	2b40      	cmp	r3, #64	@ 0x40
 80061f6:	d86f      	bhi.n	80062d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80061f8:	2b30      	cmp	r3, #48	@ 0x30
 80061fa:	d064      	beq.n	80062c6 <HAL_TIM_ConfigClockSource+0x1de>
 80061fc:	2b30      	cmp	r3, #48	@ 0x30
 80061fe:	d86b      	bhi.n	80062d8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006200:	2b20      	cmp	r3, #32
 8006202:	d060      	beq.n	80062c6 <HAL_TIM_ConfigClockSource+0x1de>
 8006204:	2b20      	cmp	r3, #32
 8006206:	d867      	bhi.n	80062d8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006208:	2b00      	cmp	r3, #0
 800620a:	d05c      	beq.n	80062c6 <HAL_TIM_ConfigClockSource+0x1de>
 800620c:	2b10      	cmp	r3, #16
 800620e:	d05a      	beq.n	80062c6 <HAL_TIM_ConfigClockSource+0x1de>
 8006210:	e062      	b.n	80062d8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006222:	f000 fcf9 	bl	8006c18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006234:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	609a      	str	r2, [r3, #8]
      break;
 800623e:	e04f      	b.n	80062e0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006250:	f000 fce2 	bl	8006c18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689a      	ldr	r2, [r3, #8]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006262:	609a      	str	r2, [r3, #8]
      break;
 8006264:	e03c      	b.n	80062e0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006272:	461a      	mov	r2, r3
 8006274:	f000 fc54 	bl	8006b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2150      	movs	r1, #80	@ 0x50
 800627e:	4618      	mov	r0, r3
 8006280:	f000 fcad 	bl	8006bde <TIM_ITRx_SetConfig>
      break;
 8006284:	e02c      	b.n	80062e0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006292:	461a      	mov	r2, r3
 8006294:	f000 fc73 	bl	8006b7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2160      	movs	r1, #96	@ 0x60
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 fc9d 	bl	8006bde <TIM_ITRx_SetConfig>
      break;
 80062a4:	e01c      	b.n	80062e0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062b2:	461a      	mov	r2, r3
 80062b4:	f000 fc34 	bl	8006b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2140      	movs	r1, #64	@ 0x40
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 fc8d 	bl	8006bde <TIM_ITRx_SetConfig>
      break;
 80062c4:	e00c      	b.n	80062e0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4619      	mov	r1, r3
 80062d0:	4610      	mov	r0, r2
 80062d2:	f000 fc84 	bl	8006bde <TIM_ITRx_SetConfig>
      break;
 80062d6:	e003      	b.n	80062e0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	73fb      	strb	r3, [r7, #15]
      break;
 80062dc:	e000      	b.n	80062e0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80062de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	00100070 	.word	0x00100070
 8006300:	00100060 	.word	0x00100060
 8006304:	00100050 	.word	0x00100050
 8006308:	00100040 	.word	0x00100040
 800630c:	00100030 	.word	0x00100030
 8006310:	00100020 	.word	0x00100020

08006314 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a4c      	ldr	r2, [pc, #304]	@ (80064a8 <TIM_Base_SetConfig+0x144>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d017      	beq.n	80063ac <TIM_Base_SetConfig+0x48>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006382:	d013      	beq.n	80063ac <TIM_Base_SetConfig+0x48>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a49      	ldr	r2, [pc, #292]	@ (80064ac <TIM_Base_SetConfig+0x148>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d00f      	beq.n	80063ac <TIM_Base_SetConfig+0x48>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a48      	ldr	r2, [pc, #288]	@ (80064b0 <TIM_Base_SetConfig+0x14c>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d00b      	beq.n	80063ac <TIM_Base_SetConfig+0x48>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a47      	ldr	r2, [pc, #284]	@ (80064b4 <TIM_Base_SetConfig+0x150>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d007      	beq.n	80063ac <TIM_Base_SetConfig+0x48>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a46      	ldr	r2, [pc, #280]	@ (80064b8 <TIM_Base_SetConfig+0x154>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d003      	beq.n	80063ac <TIM_Base_SetConfig+0x48>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a45      	ldr	r2, [pc, #276]	@ (80064bc <TIM_Base_SetConfig+0x158>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d108      	bne.n	80063be <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a39      	ldr	r2, [pc, #228]	@ (80064a8 <TIM_Base_SetConfig+0x144>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d023      	beq.n	800640e <TIM_Base_SetConfig+0xaa>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063cc:	d01f      	beq.n	800640e <TIM_Base_SetConfig+0xaa>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a36      	ldr	r2, [pc, #216]	@ (80064ac <TIM_Base_SetConfig+0x148>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d01b      	beq.n	800640e <TIM_Base_SetConfig+0xaa>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a35      	ldr	r2, [pc, #212]	@ (80064b0 <TIM_Base_SetConfig+0x14c>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d017      	beq.n	800640e <TIM_Base_SetConfig+0xaa>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a34      	ldr	r2, [pc, #208]	@ (80064b4 <TIM_Base_SetConfig+0x150>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d013      	beq.n	800640e <TIM_Base_SetConfig+0xaa>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a33      	ldr	r2, [pc, #204]	@ (80064b8 <TIM_Base_SetConfig+0x154>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d00f      	beq.n	800640e <TIM_Base_SetConfig+0xaa>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a33      	ldr	r2, [pc, #204]	@ (80064c0 <TIM_Base_SetConfig+0x15c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d00b      	beq.n	800640e <TIM_Base_SetConfig+0xaa>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a32      	ldr	r2, [pc, #200]	@ (80064c4 <TIM_Base_SetConfig+0x160>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d007      	beq.n	800640e <TIM_Base_SetConfig+0xaa>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a31      	ldr	r2, [pc, #196]	@ (80064c8 <TIM_Base_SetConfig+0x164>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d003      	beq.n	800640e <TIM_Base_SetConfig+0xaa>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a2c      	ldr	r2, [pc, #176]	@ (80064bc <TIM_Base_SetConfig+0x158>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d108      	bne.n	8006420 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	4313      	orrs	r3, r2
 800641e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a18      	ldr	r2, [pc, #96]	@ (80064a8 <TIM_Base_SetConfig+0x144>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d013      	beq.n	8006474 <TIM_Base_SetConfig+0x110>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a1a      	ldr	r2, [pc, #104]	@ (80064b8 <TIM_Base_SetConfig+0x154>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d00f      	beq.n	8006474 <TIM_Base_SetConfig+0x110>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a1a      	ldr	r2, [pc, #104]	@ (80064c0 <TIM_Base_SetConfig+0x15c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d00b      	beq.n	8006474 <TIM_Base_SetConfig+0x110>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a19      	ldr	r2, [pc, #100]	@ (80064c4 <TIM_Base_SetConfig+0x160>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d007      	beq.n	8006474 <TIM_Base_SetConfig+0x110>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a18      	ldr	r2, [pc, #96]	@ (80064c8 <TIM_Base_SetConfig+0x164>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d003      	beq.n	8006474 <TIM_Base_SetConfig+0x110>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a13      	ldr	r2, [pc, #76]	@ (80064bc <TIM_Base_SetConfig+0x158>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d103      	bne.n	800647c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	691a      	ldr	r2, [r3, #16]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b01      	cmp	r3, #1
 800648c:	d105      	bne.n	800649a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f023 0201 	bic.w	r2, r3, #1
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	611a      	str	r2, [r3, #16]
  }
}
 800649a:	bf00      	nop
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	40012c00 	.word	0x40012c00
 80064ac:	40000400 	.word	0x40000400
 80064b0:	40000800 	.word	0x40000800
 80064b4:	40000c00 	.word	0x40000c00
 80064b8:	40013400 	.word	0x40013400
 80064bc:	40015000 	.word	0x40015000
 80064c0:	40014000 	.word	0x40014000
 80064c4:	40014400 	.word	0x40014400
 80064c8:	40014800 	.word	0x40014800

080064cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	f023 0201 	bic.w	r2, r3, #1
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f023 0303 	bic.w	r3, r3, #3
 8006506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4313      	orrs	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f023 0302 	bic.w	r3, r3, #2
 8006518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	4313      	orrs	r3, r2
 8006522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a30      	ldr	r2, [pc, #192]	@ (80065e8 <TIM_OC1_SetConfig+0x11c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d013      	beq.n	8006554 <TIM_OC1_SetConfig+0x88>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a2f      	ldr	r2, [pc, #188]	@ (80065ec <TIM_OC1_SetConfig+0x120>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d00f      	beq.n	8006554 <TIM_OC1_SetConfig+0x88>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a2e      	ldr	r2, [pc, #184]	@ (80065f0 <TIM_OC1_SetConfig+0x124>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d00b      	beq.n	8006554 <TIM_OC1_SetConfig+0x88>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a2d      	ldr	r2, [pc, #180]	@ (80065f4 <TIM_OC1_SetConfig+0x128>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d007      	beq.n	8006554 <TIM_OC1_SetConfig+0x88>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a2c      	ldr	r2, [pc, #176]	@ (80065f8 <TIM_OC1_SetConfig+0x12c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d003      	beq.n	8006554 <TIM_OC1_SetConfig+0x88>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a2b      	ldr	r2, [pc, #172]	@ (80065fc <TIM_OC1_SetConfig+0x130>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d10c      	bne.n	800656e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	f023 0308 	bic.w	r3, r3, #8
 800655a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	4313      	orrs	r3, r2
 8006564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f023 0304 	bic.w	r3, r3, #4
 800656c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a1d      	ldr	r2, [pc, #116]	@ (80065e8 <TIM_OC1_SetConfig+0x11c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d013      	beq.n	800659e <TIM_OC1_SetConfig+0xd2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a1c      	ldr	r2, [pc, #112]	@ (80065ec <TIM_OC1_SetConfig+0x120>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d00f      	beq.n	800659e <TIM_OC1_SetConfig+0xd2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a1b      	ldr	r2, [pc, #108]	@ (80065f0 <TIM_OC1_SetConfig+0x124>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d00b      	beq.n	800659e <TIM_OC1_SetConfig+0xd2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a1a      	ldr	r2, [pc, #104]	@ (80065f4 <TIM_OC1_SetConfig+0x128>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d007      	beq.n	800659e <TIM_OC1_SetConfig+0xd2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a19      	ldr	r2, [pc, #100]	@ (80065f8 <TIM_OC1_SetConfig+0x12c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d003      	beq.n	800659e <TIM_OC1_SetConfig+0xd2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a18      	ldr	r2, [pc, #96]	@ (80065fc <TIM_OC1_SetConfig+0x130>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d111      	bne.n	80065c2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	4313      	orrs	r3, r2
 80065c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	621a      	str	r2, [r3, #32]
}
 80065dc:	bf00      	nop
 80065de:	371c      	adds	r7, #28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	40012c00 	.word	0x40012c00
 80065ec:	40013400 	.word	0x40013400
 80065f0:	40014000 	.word	0x40014000
 80065f4:	40014400 	.word	0x40014400
 80065f8:	40014800 	.word	0x40014800
 80065fc:	40015000 	.word	0x40015000

08006600 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	f023 0210 	bic.w	r2, r3, #16
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800662e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800663a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	021b      	lsls	r3, r3, #8
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	4313      	orrs	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f023 0320 	bic.w	r3, r3, #32
 800664e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	011b      	lsls	r3, r3, #4
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	4313      	orrs	r3, r2
 800665a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a2c      	ldr	r2, [pc, #176]	@ (8006710 <TIM_OC2_SetConfig+0x110>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d007      	beq.n	8006674 <TIM_OC2_SetConfig+0x74>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a2b      	ldr	r2, [pc, #172]	@ (8006714 <TIM_OC2_SetConfig+0x114>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d003      	beq.n	8006674 <TIM_OC2_SetConfig+0x74>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a2a      	ldr	r2, [pc, #168]	@ (8006718 <TIM_OC2_SetConfig+0x118>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d10d      	bne.n	8006690 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800667a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	011b      	lsls	r3, r3, #4
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4313      	orrs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800668e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a1f      	ldr	r2, [pc, #124]	@ (8006710 <TIM_OC2_SetConfig+0x110>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d013      	beq.n	80066c0 <TIM_OC2_SetConfig+0xc0>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a1e      	ldr	r2, [pc, #120]	@ (8006714 <TIM_OC2_SetConfig+0x114>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d00f      	beq.n	80066c0 <TIM_OC2_SetConfig+0xc0>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a1e      	ldr	r2, [pc, #120]	@ (800671c <TIM_OC2_SetConfig+0x11c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d00b      	beq.n	80066c0 <TIM_OC2_SetConfig+0xc0>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a1d      	ldr	r2, [pc, #116]	@ (8006720 <TIM_OC2_SetConfig+0x120>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d007      	beq.n	80066c0 <TIM_OC2_SetConfig+0xc0>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a1c      	ldr	r2, [pc, #112]	@ (8006724 <TIM_OC2_SetConfig+0x124>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d003      	beq.n	80066c0 <TIM_OC2_SetConfig+0xc0>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a17      	ldr	r2, [pc, #92]	@ (8006718 <TIM_OC2_SetConfig+0x118>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d113      	bne.n	80066e8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	4313      	orrs	r3, r2
 80066da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	621a      	str	r2, [r3, #32]
}
 8006702:	bf00      	nop
 8006704:	371c      	adds	r7, #28
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	40012c00 	.word	0x40012c00
 8006714:	40013400 	.word	0x40013400
 8006718:	40015000 	.word	0x40015000
 800671c:	40014000 	.word	0x40014000
 8006720:	40014400 	.word	0x40014400
 8006724:	40014800 	.word	0x40014800

08006728 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a1b      	ldr	r3, [r3, #32]
 800673c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800675a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f023 0303 	bic.w	r3, r3, #3
 8006762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	4313      	orrs	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	021b      	lsls	r3, r3, #8
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	4313      	orrs	r3, r2
 8006780:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a2b      	ldr	r2, [pc, #172]	@ (8006834 <TIM_OC3_SetConfig+0x10c>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d007      	beq.n	800679a <TIM_OC3_SetConfig+0x72>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a2a      	ldr	r2, [pc, #168]	@ (8006838 <TIM_OC3_SetConfig+0x110>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d003      	beq.n	800679a <TIM_OC3_SetConfig+0x72>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a29      	ldr	r2, [pc, #164]	@ (800683c <TIM_OC3_SetConfig+0x114>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d10d      	bne.n	80067b6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	021b      	lsls	r3, r3, #8
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a1e      	ldr	r2, [pc, #120]	@ (8006834 <TIM_OC3_SetConfig+0x10c>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d013      	beq.n	80067e6 <TIM_OC3_SetConfig+0xbe>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006838 <TIM_OC3_SetConfig+0x110>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d00f      	beq.n	80067e6 <TIM_OC3_SetConfig+0xbe>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006840 <TIM_OC3_SetConfig+0x118>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d00b      	beq.n	80067e6 <TIM_OC3_SetConfig+0xbe>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a1c      	ldr	r2, [pc, #112]	@ (8006844 <TIM_OC3_SetConfig+0x11c>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d007      	beq.n	80067e6 <TIM_OC3_SetConfig+0xbe>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a1b      	ldr	r2, [pc, #108]	@ (8006848 <TIM_OC3_SetConfig+0x120>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d003      	beq.n	80067e6 <TIM_OC3_SetConfig+0xbe>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a16      	ldr	r2, [pc, #88]	@ (800683c <TIM_OC3_SetConfig+0x114>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d113      	bne.n	800680e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	011b      	lsls	r3, r3, #4
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	4313      	orrs	r3, r2
 800680c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	685a      	ldr	r2, [r3, #4]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	621a      	str	r2, [r3, #32]
}
 8006828:	bf00      	nop
 800682a:	371c      	adds	r7, #28
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	40012c00 	.word	0x40012c00
 8006838:	40013400 	.word	0x40013400
 800683c:	40015000 	.word	0x40015000
 8006840:	40014000 	.word	0x40014000
 8006844:	40014400 	.word	0x40014400
 8006848:	40014800 	.word	0x40014800

0800684c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800684c:	b480      	push	{r7}
 800684e:	b087      	sub	sp, #28
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800687a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800687e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	021b      	lsls	r3, r3, #8
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	4313      	orrs	r3, r2
 8006892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800689a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	031b      	lsls	r3, r3, #12
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a2c      	ldr	r2, [pc, #176]	@ (800695c <TIM_OC4_SetConfig+0x110>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d007      	beq.n	80068c0 <TIM_OC4_SetConfig+0x74>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a2b      	ldr	r2, [pc, #172]	@ (8006960 <TIM_OC4_SetConfig+0x114>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d003      	beq.n	80068c0 <TIM_OC4_SetConfig+0x74>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a2a      	ldr	r2, [pc, #168]	@ (8006964 <TIM_OC4_SetConfig+0x118>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d10d      	bne.n	80068dc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	031b      	lsls	r3, r3, #12
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a1f      	ldr	r2, [pc, #124]	@ (800695c <TIM_OC4_SetConfig+0x110>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d013      	beq.n	800690c <TIM_OC4_SetConfig+0xc0>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a1e      	ldr	r2, [pc, #120]	@ (8006960 <TIM_OC4_SetConfig+0x114>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d00f      	beq.n	800690c <TIM_OC4_SetConfig+0xc0>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a1e      	ldr	r2, [pc, #120]	@ (8006968 <TIM_OC4_SetConfig+0x11c>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d00b      	beq.n	800690c <TIM_OC4_SetConfig+0xc0>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a1d      	ldr	r2, [pc, #116]	@ (800696c <TIM_OC4_SetConfig+0x120>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d007      	beq.n	800690c <TIM_OC4_SetConfig+0xc0>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006970 <TIM_OC4_SetConfig+0x124>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d003      	beq.n	800690c <TIM_OC4_SetConfig+0xc0>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a17      	ldr	r2, [pc, #92]	@ (8006964 <TIM_OC4_SetConfig+0x118>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d113      	bne.n	8006934 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006912:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800691a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	695b      	ldr	r3, [r3, #20]
 8006920:	019b      	lsls	r3, r3, #6
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	4313      	orrs	r3, r2
 8006926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	019b      	lsls	r3, r3, #6
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	4313      	orrs	r3, r2
 8006932:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	621a      	str	r2, [r3, #32]
}
 800694e:	bf00      	nop
 8006950:	371c      	adds	r7, #28
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	40012c00 	.word	0x40012c00
 8006960:	40013400 	.word	0x40013400
 8006964:	40015000 	.word	0x40015000
 8006968:	40014000 	.word	0x40014000
 800696c:	40014400 	.word	0x40014400
 8006970:	40014800 	.word	0x40014800

08006974 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006974:	b480      	push	{r7}
 8006976:	b087      	sub	sp, #28
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a1b      	ldr	r3, [r3, #32]
 8006988:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800699a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80069b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	041b      	lsls	r3, r3, #16
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a19      	ldr	r2, [pc, #100]	@ (8006a30 <TIM_OC5_SetConfig+0xbc>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d013      	beq.n	80069f6 <TIM_OC5_SetConfig+0x82>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a18      	ldr	r2, [pc, #96]	@ (8006a34 <TIM_OC5_SetConfig+0xc0>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d00f      	beq.n	80069f6 <TIM_OC5_SetConfig+0x82>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a17      	ldr	r2, [pc, #92]	@ (8006a38 <TIM_OC5_SetConfig+0xc4>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d00b      	beq.n	80069f6 <TIM_OC5_SetConfig+0x82>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a16      	ldr	r2, [pc, #88]	@ (8006a3c <TIM_OC5_SetConfig+0xc8>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d007      	beq.n	80069f6 <TIM_OC5_SetConfig+0x82>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a15      	ldr	r2, [pc, #84]	@ (8006a40 <TIM_OC5_SetConfig+0xcc>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d003      	beq.n	80069f6 <TIM_OC5_SetConfig+0x82>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a14      	ldr	r2, [pc, #80]	@ (8006a44 <TIM_OC5_SetConfig+0xd0>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d109      	bne.n	8006a0a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	021b      	lsls	r3, r3, #8
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	685a      	ldr	r2, [r3, #4]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	621a      	str	r2, [r3, #32]
}
 8006a24:	bf00      	nop
 8006a26:	371c      	adds	r7, #28
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	40012c00 	.word	0x40012c00
 8006a34:	40013400 	.word	0x40013400
 8006a38:	40014000 	.word	0x40014000
 8006a3c:	40014400 	.word	0x40014400
 8006a40:	40014800 	.word	0x40014800
 8006a44:	40015000 	.word	0x40015000

08006a48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a1b      	ldr	r3, [r3, #32]
 8006a5c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	021b      	lsls	r3, r3, #8
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	051b      	lsls	r3, r3, #20
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a1a      	ldr	r2, [pc, #104]	@ (8006b08 <TIM_OC6_SetConfig+0xc0>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d013      	beq.n	8006acc <TIM_OC6_SetConfig+0x84>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a19      	ldr	r2, [pc, #100]	@ (8006b0c <TIM_OC6_SetConfig+0xc4>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d00f      	beq.n	8006acc <TIM_OC6_SetConfig+0x84>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a18      	ldr	r2, [pc, #96]	@ (8006b10 <TIM_OC6_SetConfig+0xc8>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d00b      	beq.n	8006acc <TIM_OC6_SetConfig+0x84>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a17      	ldr	r2, [pc, #92]	@ (8006b14 <TIM_OC6_SetConfig+0xcc>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d007      	beq.n	8006acc <TIM_OC6_SetConfig+0x84>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a16      	ldr	r2, [pc, #88]	@ (8006b18 <TIM_OC6_SetConfig+0xd0>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d003      	beq.n	8006acc <TIM_OC6_SetConfig+0x84>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a15      	ldr	r2, [pc, #84]	@ (8006b1c <TIM_OC6_SetConfig+0xd4>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d109      	bne.n	8006ae0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	695b      	ldr	r3, [r3, #20]
 8006ad8:	029b      	lsls	r3, r3, #10
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	621a      	str	r2, [r3, #32]
}
 8006afa:	bf00      	nop
 8006afc:	371c      	adds	r7, #28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	40012c00 	.word	0x40012c00
 8006b0c:	40013400 	.word	0x40013400
 8006b10:	40014000 	.word	0x40014000
 8006b14:	40014400 	.word	0x40014400
 8006b18:	40014800 	.word	0x40014800
 8006b1c:	40015000 	.word	0x40015000

08006b20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b087      	sub	sp, #28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	f023 0201 	bic.w	r2, r3, #1
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	011b      	lsls	r3, r3, #4
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f023 030a 	bic.w	r3, r3, #10
 8006b5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	621a      	str	r2, [r3, #32]
}
 8006b72:	bf00      	nop
 8006b74:	371c      	adds	r7, #28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b087      	sub	sp, #28
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	60f8      	str	r0, [r7, #12]
 8006b86:	60b9      	str	r1, [r7, #8]
 8006b88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	f023 0210 	bic.w	r2, r3, #16
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ba8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	031b      	lsls	r3, r3, #12
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006bba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	011b      	lsls	r3, r3, #4
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	621a      	str	r2, [r3, #32]
}
 8006bd2:	bf00      	nop
 8006bd4:	371c      	adds	r7, #28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b085      	sub	sp, #20
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006bf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bfa:	683a      	ldr	r2, [r7, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	f043 0307 	orr.w	r3, r3, #7
 8006c04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	609a      	str	r2, [r3, #8]
}
 8006c0c:	bf00      	nop
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	021a      	lsls	r2, r3, #8
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	609a      	str	r2, [r3, #8]
}
 8006c4c:	bf00      	nop
 8006c4e:	371c      	adds	r7, #28
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b087      	sub	sp, #28
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f003 031f 	and.w	r3, r3, #31
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6a1a      	ldr	r2, [r3, #32]
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	43db      	mvns	r3, r3
 8006c7a:	401a      	ands	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6a1a      	ldr	r2, [r3, #32]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f003 031f 	and.w	r3, r3, #31
 8006c8a:	6879      	ldr	r1, [r7, #4]
 8006c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c90:	431a      	orrs	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	621a      	str	r2, [r3, #32]
}
 8006c96:	bf00      	nop
 8006c98:	371c      	adds	r7, #28
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
	...

08006ca4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d101      	bne.n	8006cbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cb8:	2302      	movs	r3, #2
 8006cba:	e074      	b.n	8006da6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a34      	ldr	r2, [pc, #208]	@ (8006db4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d009      	beq.n	8006cfa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a33      	ldr	r2, [pc, #204]	@ (8006db8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d004      	beq.n	8006cfa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a31      	ldr	r2, [pc, #196]	@ (8006dbc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d108      	bne.n	8006d0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006d00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a21      	ldr	r2, [pc, #132]	@ (8006db4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d022      	beq.n	8006d7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d3c:	d01d      	beq.n	8006d7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a1f      	ldr	r2, [pc, #124]	@ (8006dc0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d018      	beq.n	8006d7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d013      	beq.n	8006d7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a1c      	ldr	r2, [pc, #112]	@ (8006dc8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d00e      	beq.n	8006d7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a15      	ldr	r2, [pc, #84]	@ (8006db8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d009      	beq.n	8006d7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a18      	ldr	r2, [pc, #96]	@ (8006dcc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d004      	beq.n	8006d7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a11      	ldr	r2, [pc, #68]	@ (8006dbc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d10c      	bne.n	8006d94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	40012c00 	.word	0x40012c00
 8006db8:	40013400 	.word	0x40013400
 8006dbc:	40015000 	.word	0x40015000
 8006dc0:	40000400 	.word	0x40000400
 8006dc4:	40000800 	.word	0x40000800
 8006dc8:	40000c00 	.word	0x40000c00
 8006dcc:	40014000 	.word	0x40014000

08006dd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d101      	bne.n	8006dec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006de8:	2302      	movs	r3, #2
 8006dea:	e078      	b.n	8006ede <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e52:	4313      	orrs	r3, r2
 8006e54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	041b      	lsls	r3, r3, #16
 8006e62:	4313      	orrs	r3, r2
 8006e64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	69db      	ldr	r3, [r3, #28]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a1c      	ldr	r2, [pc, #112]	@ (8006eec <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d009      	beq.n	8006e92 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a1b      	ldr	r2, [pc, #108]	@ (8006ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d004      	beq.n	8006e92 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a19      	ldr	r2, [pc, #100]	@ (8006ef4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d11c      	bne.n	8006ecc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e9c:	051b      	lsls	r3, r3, #20
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3714      	adds	r7, #20
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	40012c00 	.word	0x40012c00
 8006ef0:	40013400 	.word	0x40013400
 8006ef4:	40015000 	.word	0x40015000

08006ef8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e042      	b.n	800701c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d106      	bne.n	8006fae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7fa fb53 	bl	8001654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2224      	movs	r2, #36	@ 0x24
 8006fb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f022 0201 	bic.w	r2, r2, #1
 8006fc4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d002      	beq.n	8006fd4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 ff52 	bl	8007e78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fc53 	bl	8007880 <UART_SetConfig>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d101      	bne.n	8006fe4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e01b      	b.n	800701c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685a      	ldr	r2, [r3, #4]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ff2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	689a      	ldr	r2, [r3, #8]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007002:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f042 0201 	orr.w	r2, r2, #1
 8007012:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 ffd1 	bl	8007fbc <UART_CheckIdleState>
 800701a:	4603      	mov	r3, r0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007024:	b480      	push	{r7}
 8007026:	b091      	sub	sp, #68	@ 0x44
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	4613      	mov	r3, r2
 8007030:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007038:	2b20      	cmp	r3, #32
 800703a:	d178      	bne.n	800712e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d002      	beq.n	8007048 <HAL_UART_Transmit_IT+0x24>
 8007042:	88fb      	ldrh	r3, [r7, #6]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d101      	bne.n	800704c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e071      	b.n	8007130 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	88fa      	ldrh	r2, [r7, #6]
 8007056:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	88fa      	ldrh	r2, [r7, #6]
 800705e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2221      	movs	r2, #33	@ 0x21
 8007074:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800707c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007080:	d12a      	bne.n	80070d8 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800708a:	d107      	bne.n	800709c <HAL_UART_Transmit_IT+0x78>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d103      	bne.n	800709c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	4a29      	ldr	r2, [pc, #164]	@ (800713c <HAL_UART_Transmit_IT+0x118>)
 8007098:	679a      	str	r2, [r3, #120]	@ 0x78
 800709a:	e002      	b.n	80070a2 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4a28      	ldr	r2, [pc, #160]	@ (8007140 <HAL_UART_Transmit_IT+0x11c>)
 80070a0:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	3308      	adds	r3, #8
 80070a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ac:	e853 3f00 	ldrex	r3, [r3]
 80070b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80070b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	3308      	adds	r3, #8
 80070c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80070c2:	637a      	str	r2, [r7, #52]	@ 0x34
 80070c4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80070c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070ca:	e841 2300 	strex	r3, r2, [r1]
 80070ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80070d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1e5      	bne.n	80070a2 <HAL_UART_Transmit_IT+0x7e>
 80070d6:	e028      	b.n	800712a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070e0:	d107      	bne.n	80070f2 <HAL_UART_Transmit_IT+0xce>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d103      	bne.n	80070f2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	4a15      	ldr	r2, [pc, #84]	@ (8007144 <HAL_UART_Transmit_IT+0x120>)
 80070ee:	679a      	str	r2, [r3, #120]	@ 0x78
 80070f0:	e002      	b.n	80070f8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	4a14      	ldr	r2, [pc, #80]	@ (8007148 <HAL_UART_Transmit_IT+0x124>)
 80070f6:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	e853 3f00 	ldrex	r3, [r3]
 8007104:	613b      	str	r3, [r7, #16]
   return(result);
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800710c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007116:	623b      	str	r3, [r7, #32]
 8007118:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711a:	69f9      	ldr	r1, [r7, #28]
 800711c:	6a3a      	ldr	r2, [r7, #32]
 800711e:	e841 2300 	strex	r3, r2, [r1]
 8007122:	61bb      	str	r3, [r7, #24]
   return(result);
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1e6      	bne.n	80070f8 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800712a:	2300      	movs	r3, #0
 800712c:	e000      	b.n	8007130 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800712e:	2302      	movs	r3, #2
  }
}
 8007130:	4618      	mov	r0, r3
 8007132:	3744      	adds	r7, #68	@ 0x44
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	08008783 	.word	0x08008783
 8007140:	080086a3 	.word	0x080086a3
 8007144:	080085e1 	.word	0x080085e1
 8007148:	08008529 	.word	0x08008529

0800714c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b08a      	sub	sp, #40	@ 0x28
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	4613      	mov	r3, r2
 8007158:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007160:	2b20      	cmp	r3, #32
 8007162:	d137      	bne.n	80071d4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d002      	beq.n	8007170 <HAL_UART_Receive_IT+0x24>
 800716a:	88fb      	ldrh	r3, [r7, #6]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e030      	b.n	80071d6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a18      	ldr	r2, [pc, #96]	@ (80071e0 <HAL_UART_Receive_IT+0x94>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d01f      	beq.n	80071c4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d018      	beq.n	80071c4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	e853 3f00 	ldrex	r3, [r3]
 800719e:	613b      	str	r3, [r7, #16]
   return(result);
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80071a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	461a      	mov	r2, r3
 80071ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b0:	623b      	str	r3, [r7, #32]
 80071b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b4:	69f9      	ldr	r1, [r7, #28]
 80071b6:	6a3a      	ldr	r2, [r7, #32]
 80071b8:	e841 2300 	strex	r3, r2, [r1]
 80071bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1e6      	bne.n	8007192 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80071c4:	88fb      	ldrh	r3, [r7, #6]
 80071c6:	461a      	mov	r2, r3
 80071c8:	68b9      	ldr	r1, [r7, #8]
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f001 f80e 	bl	80081ec <UART_Start_Receive_IT>
 80071d0:	4603      	mov	r3, r0
 80071d2:	e000      	b.n	80071d6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80071d4:	2302      	movs	r3, #2
  }
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3728      	adds	r7, #40	@ 0x28
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	40008000 	.word	0x40008000

080071e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b0ba      	sub	sp, #232	@ 0xe8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800720a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800720e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007212:	4013      	ands	r3, r2
 8007214:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007218:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800721c:	2b00      	cmp	r3, #0
 800721e:	d11b      	bne.n	8007258 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007224:	f003 0320 	and.w	r3, r3, #32
 8007228:	2b00      	cmp	r3, #0
 800722a:	d015      	beq.n	8007258 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800722c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007230:	f003 0320 	and.w	r3, r3, #32
 8007234:	2b00      	cmp	r3, #0
 8007236:	d105      	bne.n	8007244 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007238:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800723c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d009      	beq.n	8007258 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 82e3 	beq.w	8007814 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	4798      	blx	r3
      }
      return;
 8007256:	e2dd      	b.n	8007814 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007258:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800725c:	2b00      	cmp	r3, #0
 800725e:	f000 8123 	beq.w	80074a8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007262:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007266:	4b8d      	ldr	r3, [pc, #564]	@ (800749c <HAL_UART_IRQHandler+0x2b8>)
 8007268:	4013      	ands	r3, r2
 800726a:	2b00      	cmp	r3, #0
 800726c:	d106      	bne.n	800727c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800726e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007272:	4b8b      	ldr	r3, [pc, #556]	@ (80074a0 <HAL_UART_IRQHandler+0x2bc>)
 8007274:	4013      	ands	r3, r2
 8007276:	2b00      	cmp	r3, #0
 8007278:	f000 8116 	beq.w	80074a8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800727c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	2b00      	cmp	r3, #0
 8007286:	d011      	beq.n	80072ac <HAL_UART_IRQHandler+0xc8>
 8007288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800728c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00b      	beq.n	80072ac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2201      	movs	r2, #1
 800729a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072a2:	f043 0201 	orr.w	r2, r3, #1
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072b0:	f003 0302 	and.w	r3, r3, #2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d011      	beq.n	80072dc <HAL_UART_IRQHandler+0xf8>
 80072b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072bc:	f003 0301 	and.w	r3, r3, #1
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00b      	beq.n	80072dc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2202      	movs	r2, #2
 80072ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072d2:	f043 0204 	orr.w	r2, r3, #4
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072e0:	f003 0304 	and.w	r3, r3, #4
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d011      	beq.n	800730c <HAL_UART_IRQHandler+0x128>
 80072e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00b      	beq.n	800730c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2204      	movs	r2, #4
 80072fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007302:	f043 0202 	orr.w	r2, r3, #2
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800730c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007310:	f003 0308 	and.w	r3, r3, #8
 8007314:	2b00      	cmp	r3, #0
 8007316:	d017      	beq.n	8007348 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800731c:	f003 0320 	and.w	r3, r3, #32
 8007320:	2b00      	cmp	r3, #0
 8007322:	d105      	bne.n	8007330 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007324:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007328:	4b5c      	ldr	r3, [pc, #368]	@ (800749c <HAL_UART_IRQHandler+0x2b8>)
 800732a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00b      	beq.n	8007348 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2208      	movs	r2, #8
 8007336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800733e:	f043 0208 	orr.w	r2, r3, #8
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800734c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007350:	2b00      	cmp	r3, #0
 8007352:	d012      	beq.n	800737a <HAL_UART_IRQHandler+0x196>
 8007354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007358:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00c      	beq.n	800737a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007368:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007370:	f043 0220 	orr.w	r2, r3, #32
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 8249 	beq.w	8007818 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800738a:	f003 0320 	and.w	r3, r3, #32
 800738e:	2b00      	cmp	r3, #0
 8007390:	d013      	beq.n	80073ba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007396:	f003 0320 	and.w	r3, r3, #32
 800739a:	2b00      	cmp	r3, #0
 800739c:	d105      	bne.n	80073aa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800739e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d007      	beq.n	80073ba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ce:	2b40      	cmp	r3, #64	@ 0x40
 80073d0:	d005      	beq.n	80073de <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80073d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d054      	beq.n	8007488 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f001 f826 	bl	8008430 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ee:	2b40      	cmp	r3, #64	@ 0x40
 80073f0:	d146      	bne.n	8007480 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3308      	adds	r3, #8
 80073f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007408:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800740c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007410:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	3308      	adds	r3, #8
 800741a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800741e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007422:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007426:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800742a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800742e:	e841 2300 	strex	r3, r2, [r1]
 8007432:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007436:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1d9      	bne.n	80073f2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007444:	2b00      	cmp	r3, #0
 8007446:	d017      	beq.n	8007478 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800744e:	4a15      	ldr	r2, [pc, #84]	@ (80074a4 <HAL_UART_IRQHandler+0x2c0>)
 8007450:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007458:	4618      	mov	r0, r3
 800745a:	f7fc fc47 	bl	8003cec <HAL_DMA_Abort_IT>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d019      	beq.n	8007498 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800746a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007472:	4610      	mov	r0, r2
 8007474:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007476:	e00f      	b.n	8007498 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f9eb 	bl	8007854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800747e:	e00b      	b.n	8007498 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f9e7 	bl	8007854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007486:	e007      	b.n	8007498 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f9e3 	bl	8007854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007496:	e1bf      	b.n	8007818 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007498:	bf00      	nop
    return;
 800749a:	e1bd      	b.n	8007818 <HAL_UART_IRQHandler+0x634>
 800749c:	10000001 	.word	0x10000001
 80074a0:	04000120 	.word	0x04000120
 80074a4:	080084fd 	.word	0x080084fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	f040 8153 	bne.w	8007758 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80074b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074b6:	f003 0310 	and.w	r3, r3, #16
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f000 814c 	beq.w	8007758 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80074c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074c4:	f003 0310 	and.w	r3, r3, #16
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 8145 	beq.w	8007758 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2210      	movs	r2, #16
 80074d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074e0:	2b40      	cmp	r3, #64	@ 0x40
 80074e2:	f040 80bb 	bne.w	800765c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80074f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 818f 	beq.w	800781c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007504:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007508:	429a      	cmp	r2, r3
 800750a:	f080 8187 	bcs.w	800781c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007514:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0320 	and.w	r3, r3, #32
 8007526:	2b00      	cmp	r3, #0
 8007528:	f040 8087 	bne.w	800763a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007534:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007538:	e853 3f00 	ldrex	r3, [r3]
 800753c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007540:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007544:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007548:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	461a      	mov	r2, r3
 8007552:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007556:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800755a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007562:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007566:	e841 2300 	strex	r3, r2, [r1]
 800756a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800756e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1da      	bne.n	800752c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	3308      	adds	r3, #8
 800757c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007580:	e853 3f00 	ldrex	r3, [r3]
 8007584:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007586:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007588:	f023 0301 	bic.w	r3, r3, #1
 800758c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	3308      	adds	r3, #8
 8007596:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800759a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800759e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80075a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80075a6:	e841 2300 	strex	r3, r2, [r1]
 80075aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80075ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1e1      	bne.n	8007576 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	3308      	adds	r3, #8
 80075b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80075bc:	e853 3f00 	ldrex	r3, [r3]
 80075c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80075c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80075c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	3308      	adds	r3, #8
 80075d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80075d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80075d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80075dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80075de:	e841 2300 	strex	r3, r2, [r1]
 80075e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80075e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1e3      	bne.n	80075b2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2220      	movs	r2, #32
 80075ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007600:	e853 3f00 	ldrex	r3, [r3]
 8007604:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007606:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007608:	f023 0310 	bic.w	r3, r3, #16
 800760c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	461a      	mov	r2, r3
 8007616:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800761a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800761c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007620:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007622:	e841 2300 	strex	r3, r2, [r1]
 8007626:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007628:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1e4      	bne.n	80075f8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007634:	4618      	mov	r0, r3
 8007636:	f7fc fb00 	bl	8003c3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2202      	movs	r2, #2
 800763e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800764c:	b29b      	uxth	r3, r3
 800764e:	1ad3      	subs	r3, r2, r3
 8007650:	b29b      	uxth	r3, r3
 8007652:	4619      	mov	r1, r3
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f907 	bl	8007868 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800765a:	e0df      	b.n	800781c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007668:	b29b      	uxth	r3, r3
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007676:	b29b      	uxth	r3, r3
 8007678:	2b00      	cmp	r3, #0
 800767a:	f000 80d1 	beq.w	8007820 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800767e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007682:	2b00      	cmp	r3, #0
 8007684:	f000 80cc 	beq.w	8007820 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007690:	e853 3f00 	ldrex	r3, [r3]
 8007694:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007698:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800769c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	461a      	mov	r2, r3
 80076a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80076aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80076ac:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076b2:	e841 2300 	strex	r3, r2, [r1]
 80076b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1e4      	bne.n	8007688 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3308      	adds	r3, #8
 80076c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c8:	e853 3f00 	ldrex	r3, [r3]
 80076cc:	623b      	str	r3, [r7, #32]
   return(result);
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076d4:	f023 0301 	bic.w	r3, r3, #1
 80076d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	3308      	adds	r3, #8
 80076e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80076e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80076e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076ee:	e841 2300 	strex	r3, r2, [r1]
 80076f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1e1      	bne.n	80076be <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2220      	movs	r2, #32
 80076fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	e853 3f00 	ldrex	r3, [r3]
 800771a:	60fb      	str	r3, [r7, #12]
   return(result);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f023 0310 	bic.w	r3, r3, #16
 8007722:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	461a      	mov	r2, r3
 800772c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007730:	61fb      	str	r3, [r7, #28]
 8007732:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007734:	69b9      	ldr	r1, [r7, #24]
 8007736:	69fa      	ldr	r2, [r7, #28]
 8007738:	e841 2300 	strex	r3, r2, [r1]
 800773c:	617b      	str	r3, [r7, #20]
   return(result);
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1e4      	bne.n	800770e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2202      	movs	r2, #2
 8007748:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800774a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800774e:	4619      	mov	r1, r3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f889 	bl	8007868 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007756:	e063      	b.n	8007820 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800775c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00e      	beq.n	8007782 <HAL_UART_IRQHandler+0x59e>
 8007764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007768:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d008      	beq.n	8007782 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007778:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f001 fdbe 	bl	80092fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007780:	e051      	b.n	8007826 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800778a:	2b00      	cmp	r3, #0
 800778c:	d014      	beq.n	80077b8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800778e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007796:	2b00      	cmp	r3, #0
 8007798:	d105      	bne.n	80077a6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800779a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800779e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d008      	beq.n	80077b8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d03a      	beq.n	8007824 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	4798      	blx	r3
    }
    return;
 80077b6:	e035      	b.n	8007824 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80077b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d009      	beq.n	80077d8 <HAL_UART_IRQHandler+0x5f4>
 80077c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d003      	beq.n	80077d8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f001 f84b 	bl	800886c <UART_EndTransmit_IT>
    return;
 80077d6:	e026      	b.n	8007826 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80077d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d009      	beq.n	80077f8 <HAL_UART_IRQHandler+0x614>
 80077e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077e8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d003      	beq.n	80077f8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f001 fd97 	bl	8009324 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80077f6:	e016      	b.n	8007826 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80077f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d010      	beq.n	8007826 <HAL_UART_IRQHandler+0x642>
 8007804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007808:	2b00      	cmp	r3, #0
 800780a:	da0c      	bge.n	8007826 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f001 fd7f 	bl	8009310 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007812:	e008      	b.n	8007826 <HAL_UART_IRQHandler+0x642>
      return;
 8007814:	bf00      	nop
 8007816:	e006      	b.n	8007826 <HAL_UART_IRQHandler+0x642>
    return;
 8007818:	bf00      	nop
 800781a:	e004      	b.n	8007826 <HAL_UART_IRQHandler+0x642>
      return;
 800781c:	bf00      	nop
 800781e:	e002      	b.n	8007826 <HAL_UART_IRQHandler+0x642>
      return;
 8007820:	bf00      	nop
 8007822:	e000      	b.n	8007826 <HAL_UART_IRQHandler+0x642>
    return;
 8007824:	bf00      	nop
  }
}
 8007826:	37e8      	adds	r7, #232	@ 0xe8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007834:	bf00      	nop
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	460b      	mov	r3, r1
 8007872:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007884:	b08c      	sub	sp, #48	@ 0x30
 8007886:	af00      	add	r7, sp, #0
 8007888:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800788a:	2300      	movs	r3, #0
 800788c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	689a      	ldr	r2, [r3, #8]
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	431a      	orrs	r2, r3
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	431a      	orrs	r2, r3
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	69db      	ldr	r3, [r3, #28]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	4baa      	ldr	r3, [pc, #680]	@ (8007b58 <UART_SetConfig+0x2d8>)
 80078b0:	4013      	ands	r3, r2
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	6812      	ldr	r2, [r2, #0]
 80078b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80078b8:	430b      	orrs	r3, r1
 80078ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	68da      	ldr	r2, [r3, #12]
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	430a      	orrs	r2, r1
 80078d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a9f      	ldr	r2, [pc, #636]	@ (8007b5c <UART_SetConfig+0x2dc>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d004      	beq.n	80078ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078e8:	4313      	orrs	r3, r2
 80078ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80078f6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	6812      	ldr	r2, [r2, #0]
 80078fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007900:	430b      	orrs	r3, r1
 8007902:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800790a:	f023 010f 	bic.w	r1, r3, #15
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	430a      	orrs	r2, r1
 8007918:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a90      	ldr	r2, [pc, #576]	@ (8007b60 <UART_SetConfig+0x2e0>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d125      	bne.n	8007970 <UART_SetConfig+0xf0>
 8007924:	4b8f      	ldr	r3, [pc, #572]	@ (8007b64 <UART_SetConfig+0x2e4>)
 8007926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800792a:	f003 0303 	and.w	r3, r3, #3
 800792e:	2b03      	cmp	r3, #3
 8007930:	d81a      	bhi.n	8007968 <UART_SetConfig+0xe8>
 8007932:	a201      	add	r2, pc, #4	@ (adr r2, 8007938 <UART_SetConfig+0xb8>)
 8007934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007938:	08007949 	.word	0x08007949
 800793c:	08007959 	.word	0x08007959
 8007940:	08007951 	.word	0x08007951
 8007944:	08007961 	.word	0x08007961
 8007948:	2301      	movs	r3, #1
 800794a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800794e:	e116      	b.n	8007b7e <UART_SetConfig+0x2fe>
 8007950:	2302      	movs	r3, #2
 8007952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007956:	e112      	b.n	8007b7e <UART_SetConfig+0x2fe>
 8007958:	2304      	movs	r3, #4
 800795a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800795e:	e10e      	b.n	8007b7e <UART_SetConfig+0x2fe>
 8007960:	2308      	movs	r3, #8
 8007962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007966:	e10a      	b.n	8007b7e <UART_SetConfig+0x2fe>
 8007968:	2310      	movs	r3, #16
 800796a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800796e:	e106      	b.n	8007b7e <UART_SetConfig+0x2fe>
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a7c      	ldr	r2, [pc, #496]	@ (8007b68 <UART_SetConfig+0x2e8>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d138      	bne.n	80079ec <UART_SetConfig+0x16c>
 800797a:	4b7a      	ldr	r3, [pc, #488]	@ (8007b64 <UART_SetConfig+0x2e4>)
 800797c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007980:	f003 030c 	and.w	r3, r3, #12
 8007984:	2b0c      	cmp	r3, #12
 8007986:	d82d      	bhi.n	80079e4 <UART_SetConfig+0x164>
 8007988:	a201      	add	r2, pc, #4	@ (adr r2, 8007990 <UART_SetConfig+0x110>)
 800798a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798e:	bf00      	nop
 8007990:	080079c5 	.word	0x080079c5
 8007994:	080079e5 	.word	0x080079e5
 8007998:	080079e5 	.word	0x080079e5
 800799c:	080079e5 	.word	0x080079e5
 80079a0:	080079d5 	.word	0x080079d5
 80079a4:	080079e5 	.word	0x080079e5
 80079a8:	080079e5 	.word	0x080079e5
 80079ac:	080079e5 	.word	0x080079e5
 80079b0:	080079cd 	.word	0x080079cd
 80079b4:	080079e5 	.word	0x080079e5
 80079b8:	080079e5 	.word	0x080079e5
 80079bc:	080079e5 	.word	0x080079e5
 80079c0:	080079dd 	.word	0x080079dd
 80079c4:	2300      	movs	r3, #0
 80079c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079ca:	e0d8      	b.n	8007b7e <UART_SetConfig+0x2fe>
 80079cc:	2302      	movs	r3, #2
 80079ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079d2:	e0d4      	b.n	8007b7e <UART_SetConfig+0x2fe>
 80079d4:	2304      	movs	r3, #4
 80079d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079da:	e0d0      	b.n	8007b7e <UART_SetConfig+0x2fe>
 80079dc:	2308      	movs	r3, #8
 80079de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079e2:	e0cc      	b.n	8007b7e <UART_SetConfig+0x2fe>
 80079e4:	2310      	movs	r3, #16
 80079e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079ea:	e0c8      	b.n	8007b7e <UART_SetConfig+0x2fe>
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a5e      	ldr	r2, [pc, #376]	@ (8007b6c <UART_SetConfig+0x2ec>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d125      	bne.n	8007a42 <UART_SetConfig+0x1c2>
 80079f6:	4b5b      	ldr	r3, [pc, #364]	@ (8007b64 <UART_SetConfig+0x2e4>)
 80079f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007a00:	2b30      	cmp	r3, #48	@ 0x30
 8007a02:	d016      	beq.n	8007a32 <UART_SetConfig+0x1b2>
 8007a04:	2b30      	cmp	r3, #48	@ 0x30
 8007a06:	d818      	bhi.n	8007a3a <UART_SetConfig+0x1ba>
 8007a08:	2b20      	cmp	r3, #32
 8007a0a:	d00a      	beq.n	8007a22 <UART_SetConfig+0x1a2>
 8007a0c:	2b20      	cmp	r3, #32
 8007a0e:	d814      	bhi.n	8007a3a <UART_SetConfig+0x1ba>
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d002      	beq.n	8007a1a <UART_SetConfig+0x19a>
 8007a14:	2b10      	cmp	r3, #16
 8007a16:	d008      	beq.n	8007a2a <UART_SetConfig+0x1aa>
 8007a18:	e00f      	b.n	8007a3a <UART_SetConfig+0x1ba>
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a20:	e0ad      	b.n	8007b7e <UART_SetConfig+0x2fe>
 8007a22:	2302      	movs	r3, #2
 8007a24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a28:	e0a9      	b.n	8007b7e <UART_SetConfig+0x2fe>
 8007a2a:	2304      	movs	r3, #4
 8007a2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a30:	e0a5      	b.n	8007b7e <UART_SetConfig+0x2fe>
 8007a32:	2308      	movs	r3, #8
 8007a34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a38:	e0a1      	b.n	8007b7e <UART_SetConfig+0x2fe>
 8007a3a:	2310      	movs	r3, #16
 8007a3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a40:	e09d      	b.n	8007b7e <UART_SetConfig+0x2fe>
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a4a      	ldr	r2, [pc, #296]	@ (8007b70 <UART_SetConfig+0x2f0>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d125      	bne.n	8007a98 <UART_SetConfig+0x218>
 8007a4c:	4b45      	ldr	r3, [pc, #276]	@ (8007b64 <UART_SetConfig+0x2e4>)
 8007a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007a56:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a58:	d016      	beq.n	8007a88 <UART_SetConfig+0x208>
 8007a5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a5c:	d818      	bhi.n	8007a90 <UART_SetConfig+0x210>
 8007a5e:	2b80      	cmp	r3, #128	@ 0x80
 8007a60:	d00a      	beq.n	8007a78 <UART_SetConfig+0x1f8>
 8007a62:	2b80      	cmp	r3, #128	@ 0x80
 8007a64:	d814      	bhi.n	8007a90 <UART_SetConfig+0x210>
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <UART_SetConfig+0x1f0>
 8007a6a:	2b40      	cmp	r3, #64	@ 0x40
 8007a6c:	d008      	beq.n	8007a80 <UART_SetConfig+0x200>
 8007a6e:	e00f      	b.n	8007a90 <UART_SetConfig+0x210>
 8007a70:	2300      	movs	r3, #0
 8007a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a76:	e082      	b.n	8007b7e <UART_SetConfig+0x2fe>
 8007a78:	2302      	movs	r3, #2
 8007a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a7e:	e07e      	b.n	8007b7e <UART_SetConfig+0x2fe>
 8007a80:	2304      	movs	r3, #4
 8007a82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a86:	e07a      	b.n	8007b7e <UART_SetConfig+0x2fe>
 8007a88:	2308      	movs	r3, #8
 8007a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a8e:	e076      	b.n	8007b7e <UART_SetConfig+0x2fe>
 8007a90:	2310      	movs	r3, #16
 8007a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a96:	e072      	b.n	8007b7e <UART_SetConfig+0x2fe>
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a35      	ldr	r2, [pc, #212]	@ (8007b74 <UART_SetConfig+0x2f4>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d12a      	bne.n	8007af8 <UART_SetConfig+0x278>
 8007aa2:	4b30      	ldr	r3, [pc, #192]	@ (8007b64 <UART_SetConfig+0x2e4>)
 8007aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007aac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ab0:	d01a      	beq.n	8007ae8 <UART_SetConfig+0x268>
 8007ab2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ab6:	d81b      	bhi.n	8007af0 <UART_SetConfig+0x270>
 8007ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007abc:	d00c      	beq.n	8007ad8 <UART_SetConfig+0x258>
 8007abe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ac2:	d815      	bhi.n	8007af0 <UART_SetConfig+0x270>
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d003      	beq.n	8007ad0 <UART_SetConfig+0x250>
 8007ac8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007acc:	d008      	beq.n	8007ae0 <UART_SetConfig+0x260>
 8007ace:	e00f      	b.n	8007af0 <UART_SetConfig+0x270>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ad6:	e052      	b.n	8007b7e <UART_SetConfig+0x2fe>
 8007ad8:	2302      	movs	r3, #2
 8007ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ade:	e04e      	b.n	8007b7e <UART_SetConfig+0x2fe>
 8007ae0:	2304      	movs	r3, #4
 8007ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ae6:	e04a      	b.n	8007b7e <UART_SetConfig+0x2fe>
 8007ae8:	2308      	movs	r3, #8
 8007aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aee:	e046      	b.n	8007b7e <UART_SetConfig+0x2fe>
 8007af0:	2310      	movs	r3, #16
 8007af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007af6:	e042      	b.n	8007b7e <UART_SetConfig+0x2fe>
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a17      	ldr	r2, [pc, #92]	@ (8007b5c <UART_SetConfig+0x2dc>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d13a      	bne.n	8007b78 <UART_SetConfig+0x2f8>
 8007b02:	4b18      	ldr	r3, [pc, #96]	@ (8007b64 <UART_SetConfig+0x2e4>)
 8007b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007b0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b10:	d01a      	beq.n	8007b48 <UART_SetConfig+0x2c8>
 8007b12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b16:	d81b      	bhi.n	8007b50 <UART_SetConfig+0x2d0>
 8007b18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b1c:	d00c      	beq.n	8007b38 <UART_SetConfig+0x2b8>
 8007b1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b22:	d815      	bhi.n	8007b50 <UART_SetConfig+0x2d0>
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d003      	beq.n	8007b30 <UART_SetConfig+0x2b0>
 8007b28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b2c:	d008      	beq.n	8007b40 <UART_SetConfig+0x2c0>
 8007b2e:	e00f      	b.n	8007b50 <UART_SetConfig+0x2d0>
 8007b30:	2300      	movs	r3, #0
 8007b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b36:	e022      	b.n	8007b7e <UART_SetConfig+0x2fe>
 8007b38:	2302      	movs	r3, #2
 8007b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b3e:	e01e      	b.n	8007b7e <UART_SetConfig+0x2fe>
 8007b40:	2304      	movs	r3, #4
 8007b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b46:	e01a      	b.n	8007b7e <UART_SetConfig+0x2fe>
 8007b48:	2308      	movs	r3, #8
 8007b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b4e:	e016      	b.n	8007b7e <UART_SetConfig+0x2fe>
 8007b50:	2310      	movs	r3, #16
 8007b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b56:	e012      	b.n	8007b7e <UART_SetConfig+0x2fe>
 8007b58:	cfff69f3 	.word	0xcfff69f3
 8007b5c:	40008000 	.word	0x40008000
 8007b60:	40013800 	.word	0x40013800
 8007b64:	40021000 	.word	0x40021000
 8007b68:	40004400 	.word	0x40004400
 8007b6c:	40004800 	.word	0x40004800
 8007b70:	40004c00 	.word	0x40004c00
 8007b74:	40005000 	.word	0x40005000
 8007b78:	2310      	movs	r3, #16
 8007b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4aae      	ldr	r2, [pc, #696]	@ (8007e3c <UART_SetConfig+0x5bc>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	f040 8097 	bne.w	8007cb8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007b8e:	2b08      	cmp	r3, #8
 8007b90:	d823      	bhi.n	8007bda <UART_SetConfig+0x35a>
 8007b92:	a201      	add	r2, pc, #4	@ (adr r2, 8007b98 <UART_SetConfig+0x318>)
 8007b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b98:	08007bbd 	.word	0x08007bbd
 8007b9c:	08007bdb 	.word	0x08007bdb
 8007ba0:	08007bc5 	.word	0x08007bc5
 8007ba4:	08007bdb 	.word	0x08007bdb
 8007ba8:	08007bcb 	.word	0x08007bcb
 8007bac:	08007bdb 	.word	0x08007bdb
 8007bb0:	08007bdb 	.word	0x08007bdb
 8007bb4:	08007bdb 	.word	0x08007bdb
 8007bb8:	08007bd3 	.word	0x08007bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bbc:	f7fd f988 	bl	8004ed0 <HAL_RCC_GetPCLK1Freq>
 8007bc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007bc2:	e010      	b.n	8007be6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bc4:	4b9e      	ldr	r3, [pc, #632]	@ (8007e40 <UART_SetConfig+0x5c0>)
 8007bc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007bc8:	e00d      	b.n	8007be6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bca:	f7fd f913 	bl	8004df4 <HAL_RCC_GetSysClockFreq>
 8007bce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007bd0:	e009      	b.n	8007be6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007bd8:	e005      	b.n	8007be6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007be4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f000 8130 	beq.w	8007e4e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf2:	4a94      	ldr	r2, [pc, #592]	@ (8007e44 <UART_SetConfig+0x5c4>)
 8007bf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c00:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	685a      	ldr	r2, [r3, #4]
 8007c06:	4613      	mov	r3, r2
 8007c08:	005b      	lsls	r3, r3, #1
 8007c0a:	4413      	add	r3, r2
 8007c0c:	69ba      	ldr	r2, [r7, #24]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d305      	bcc.n	8007c1e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c18:	69ba      	ldr	r2, [r7, #24]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d903      	bls.n	8007c26 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007c24:	e113      	b.n	8007e4e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c28:	2200      	movs	r2, #0
 8007c2a:	60bb      	str	r3, [r7, #8]
 8007c2c:	60fa      	str	r2, [r7, #12]
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c32:	4a84      	ldr	r2, [pc, #528]	@ (8007e44 <UART_SetConfig+0x5c4>)
 8007c34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	603b      	str	r3, [r7, #0]
 8007c3e:	607a      	str	r2, [r7, #4]
 8007c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c48:	f7f8 fae6 	bl	8000218 <__aeabi_uldivmod>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4610      	mov	r0, r2
 8007c52:	4619      	mov	r1, r3
 8007c54:	f04f 0200 	mov.w	r2, #0
 8007c58:	f04f 0300 	mov.w	r3, #0
 8007c5c:	020b      	lsls	r3, r1, #8
 8007c5e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007c62:	0202      	lsls	r2, r0, #8
 8007c64:	6979      	ldr	r1, [r7, #20]
 8007c66:	6849      	ldr	r1, [r1, #4]
 8007c68:	0849      	lsrs	r1, r1, #1
 8007c6a:	2000      	movs	r0, #0
 8007c6c:	460c      	mov	r4, r1
 8007c6e:	4605      	mov	r5, r0
 8007c70:	eb12 0804 	adds.w	r8, r2, r4
 8007c74:	eb43 0905 	adc.w	r9, r3, r5
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	469a      	mov	sl, r3
 8007c80:	4693      	mov	fp, r2
 8007c82:	4652      	mov	r2, sl
 8007c84:	465b      	mov	r3, fp
 8007c86:	4640      	mov	r0, r8
 8007c88:	4649      	mov	r1, r9
 8007c8a:	f7f8 fac5 	bl	8000218 <__aeabi_uldivmod>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	460b      	mov	r3, r1
 8007c92:	4613      	mov	r3, r2
 8007c94:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c96:	6a3b      	ldr	r3, [r7, #32]
 8007c98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c9c:	d308      	bcc.n	8007cb0 <UART_SetConfig+0x430>
 8007c9e:	6a3b      	ldr	r3, [r7, #32]
 8007ca0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ca4:	d204      	bcs.n	8007cb0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	6a3a      	ldr	r2, [r7, #32]
 8007cac:	60da      	str	r2, [r3, #12]
 8007cae:	e0ce      	b.n	8007e4e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007cb6:	e0ca      	b.n	8007e4e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	69db      	ldr	r3, [r3, #28]
 8007cbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cc0:	d166      	bne.n	8007d90 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007cc2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007cc6:	2b08      	cmp	r3, #8
 8007cc8:	d827      	bhi.n	8007d1a <UART_SetConfig+0x49a>
 8007cca:	a201      	add	r2, pc, #4	@ (adr r2, 8007cd0 <UART_SetConfig+0x450>)
 8007ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd0:	08007cf5 	.word	0x08007cf5
 8007cd4:	08007cfd 	.word	0x08007cfd
 8007cd8:	08007d05 	.word	0x08007d05
 8007cdc:	08007d1b 	.word	0x08007d1b
 8007ce0:	08007d0b 	.word	0x08007d0b
 8007ce4:	08007d1b 	.word	0x08007d1b
 8007ce8:	08007d1b 	.word	0x08007d1b
 8007cec:	08007d1b 	.word	0x08007d1b
 8007cf0:	08007d13 	.word	0x08007d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cf4:	f7fd f8ec 	bl	8004ed0 <HAL_RCC_GetPCLK1Freq>
 8007cf8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007cfa:	e014      	b.n	8007d26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cfc:	f7fd f8fe 	bl	8004efc <HAL_RCC_GetPCLK2Freq>
 8007d00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d02:	e010      	b.n	8007d26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d04:	4b4e      	ldr	r3, [pc, #312]	@ (8007e40 <UART_SetConfig+0x5c0>)
 8007d06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d08:	e00d      	b.n	8007d26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d0a:	f7fd f873 	bl	8004df4 <HAL_RCC_GetSysClockFreq>
 8007d0e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d10:	e009      	b.n	8007d26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d18:	e005      	b.n	8007d26 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007d24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f000 8090 	beq.w	8007e4e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d32:	4a44      	ldr	r2, [pc, #272]	@ (8007e44 <UART_SetConfig+0x5c4>)
 8007d34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d38:	461a      	mov	r2, r3
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d40:	005a      	lsls	r2, r3, #1
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	085b      	lsrs	r3, r3, #1
 8007d48:	441a      	add	r2, r3
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d54:	6a3b      	ldr	r3, [r7, #32]
 8007d56:	2b0f      	cmp	r3, #15
 8007d58:	d916      	bls.n	8007d88 <UART_SetConfig+0x508>
 8007d5a:	6a3b      	ldr	r3, [r7, #32]
 8007d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d60:	d212      	bcs.n	8007d88 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	f023 030f 	bic.w	r3, r3, #15
 8007d6a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	085b      	lsrs	r3, r3, #1
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	f003 0307 	and.w	r3, r3, #7
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	8bfb      	ldrh	r3, [r7, #30]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	8bfa      	ldrh	r2, [r7, #30]
 8007d84:	60da      	str	r2, [r3, #12]
 8007d86:	e062      	b.n	8007e4e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007d8e:	e05e      	b.n	8007e4e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d90:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007d94:	2b08      	cmp	r3, #8
 8007d96:	d828      	bhi.n	8007dea <UART_SetConfig+0x56a>
 8007d98:	a201      	add	r2, pc, #4	@ (adr r2, 8007da0 <UART_SetConfig+0x520>)
 8007d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9e:	bf00      	nop
 8007da0:	08007dc5 	.word	0x08007dc5
 8007da4:	08007dcd 	.word	0x08007dcd
 8007da8:	08007dd5 	.word	0x08007dd5
 8007dac:	08007deb 	.word	0x08007deb
 8007db0:	08007ddb 	.word	0x08007ddb
 8007db4:	08007deb 	.word	0x08007deb
 8007db8:	08007deb 	.word	0x08007deb
 8007dbc:	08007deb 	.word	0x08007deb
 8007dc0:	08007de3 	.word	0x08007de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dc4:	f7fd f884 	bl	8004ed0 <HAL_RCC_GetPCLK1Freq>
 8007dc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007dca:	e014      	b.n	8007df6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dcc:	f7fd f896 	bl	8004efc <HAL_RCC_GetPCLK2Freq>
 8007dd0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007dd2:	e010      	b.n	8007df6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8007e40 <UART_SetConfig+0x5c0>)
 8007dd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007dd8:	e00d      	b.n	8007df6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dda:	f7fd f80b 	bl	8004df4 <HAL_RCC_GetSysClockFreq>
 8007dde:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007de0:	e009      	b.n	8007df6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007de2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007de6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007de8:	e005      	b.n	8007df6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007dea:	2300      	movs	r3, #0
 8007dec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007df4:	bf00      	nop
    }

    if (pclk != 0U)
 8007df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d028      	beq.n	8007e4e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e00:	4a10      	ldr	r2, [pc, #64]	@ (8007e44 <UART_SetConfig+0x5c4>)
 8007e02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e06:	461a      	mov	r2, r3
 8007e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	085b      	lsrs	r3, r3, #1
 8007e14:	441a      	add	r2, r3
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e20:	6a3b      	ldr	r3, [r7, #32]
 8007e22:	2b0f      	cmp	r3, #15
 8007e24:	d910      	bls.n	8007e48 <UART_SetConfig+0x5c8>
 8007e26:	6a3b      	ldr	r3, [r7, #32]
 8007e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e2c:	d20c      	bcs.n	8007e48 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e2e:	6a3b      	ldr	r3, [r7, #32]
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	60da      	str	r2, [r3, #12]
 8007e38:	e009      	b.n	8007e4e <UART_SetConfig+0x5ce>
 8007e3a:	bf00      	nop
 8007e3c:	40008000 	.word	0x40008000
 8007e40:	00f42400 	.word	0x00f42400
 8007e44:	08009634 	.word	0x08009634
      }
      else
      {
        ret = HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	2200      	movs	r2, #0
 8007e62:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	2200      	movs	r2, #0
 8007e68:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007e6a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3730      	adds	r7, #48	@ 0x30
 8007e72:	46bd      	mov	sp, r7
 8007e74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007e78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e84:	f003 0308 	and.w	r3, r3, #8
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00a      	beq.n	8007ea2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00a      	beq.n	8007ec4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	430a      	orrs	r2, r1
 8007ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec8:	f003 0302 	and.w	r3, r3, #2
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00a      	beq.n	8007ee6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	430a      	orrs	r2, r1
 8007ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eea:	f003 0304 	and.w	r3, r3, #4
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00a      	beq.n	8007f08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	430a      	orrs	r2, r1
 8007f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f0c:	f003 0310 	and.w	r3, r3, #16
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00a      	beq.n	8007f2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	430a      	orrs	r2, r1
 8007f28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f2e:	f003 0320 	and.w	r3, r3, #32
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00a      	beq.n	8007f4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	430a      	orrs	r2, r1
 8007f4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d01a      	beq.n	8007f8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f76:	d10a      	bne.n	8007f8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	430a      	orrs	r2, r1
 8007f8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00a      	beq.n	8007fb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	430a      	orrs	r2, r1
 8007fae:	605a      	str	r2, [r3, #4]
  }
}
 8007fb0:	bf00      	nop
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b098      	sub	sp, #96	@ 0x60
 8007fc0:	af02      	add	r7, sp, #8
 8007fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fcc:	f7f9 fdd4 	bl	8001b78 <HAL_GetTick>
 8007fd0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 0308 	and.w	r3, r3, #8
 8007fdc:	2b08      	cmp	r3, #8
 8007fde:	d12f      	bne.n	8008040 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fe0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f88e 	bl	8008110 <UART_WaitOnFlagUntilTimeout>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d022      	beq.n	8008040 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008002:	e853 3f00 	ldrex	r3, [r3]
 8008006:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800800a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800800e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	461a      	mov	r2, r3
 8008016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008018:	647b      	str	r3, [r7, #68]	@ 0x44
 800801a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800801e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008020:	e841 2300 	strex	r3, r2, [r1]
 8008024:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1e6      	bne.n	8007ffa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2220      	movs	r2, #32
 8008030:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800803c:	2303      	movs	r3, #3
 800803e:	e063      	b.n	8008108 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0304 	and.w	r3, r3, #4
 800804a:	2b04      	cmp	r3, #4
 800804c:	d149      	bne.n	80080e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800804e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008052:	9300      	str	r3, [sp, #0]
 8008054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008056:	2200      	movs	r2, #0
 8008058:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f857 	bl	8008110 <UART_WaitOnFlagUntilTimeout>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d03c      	beq.n	80080e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008070:	e853 3f00 	ldrex	r3, [r3]
 8008074:	623b      	str	r3, [r7, #32]
   return(result);
 8008076:	6a3b      	ldr	r3, [r7, #32]
 8008078:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800807c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	461a      	mov	r2, r3
 8008084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008086:	633b      	str	r3, [r7, #48]	@ 0x30
 8008088:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800808c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800808e:	e841 2300 	strex	r3, r2, [r1]
 8008092:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1e6      	bne.n	8008068 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3308      	adds	r3, #8
 80080a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	e853 3f00 	ldrex	r3, [r3]
 80080a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f023 0301 	bic.w	r3, r3, #1
 80080b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	3308      	adds	r3, #8
 80080b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080ba:	61fa      	str	r2, [r7, #28]
 80080bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080be:	69b9      	ldr	r1, [r7, #24]
 80080c0:	69fa      	ldr	r2, [r7, #28]
 80080c2:	e841 2300 	strex	r3, r2, [r1]
 80080c6:	617b      	str	r3, [r7, #20]
   return(result);
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1e5      	bne.n	800809a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2220      	movs	r2, #32
 80080d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e012      	b.n	8008108 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2220      	movs	r2, #32
 80080e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2220      	movs	r2, #32
 80080ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3758      	adds	r7, #88	@ 0x58
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	603b      	str	r3, [r7, #0]
 800811c:	4613      	mov	r3, r2
 800811e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008120:	e04f      	b.n	80081c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008128:	d04b      	beq.n	80081c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800812a:	f7f9 fd25 	bl	8001b78 <HAL_GetTick>
 800812e:	4602      	mov	r2, r0
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	69ba      	ldr	r2, [r7, #24]
 8008136:	429a      	cmp	r2, r3
 8008138:	d302      	bcc.n	8008140 <UART_WaitOnFlagUntilTimeout+0x30>
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d101      	bne.n	8008144 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e04e      	b.n	80081e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 0304 	and.w	r3, r3, #4
 800814e:	2b00      	cmp	r3, #0
 8008150:	d037      	beq.n	80081c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	2b80      	cmp	r3, #128	@ 0x80
 8008156:	d034      	beq.n	80081c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2b40      	cmp	r3, #64	@ 0x40
 800815c:	d031      	beq.n	80081c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	69db      	ldr	r3, [r3, #28]
 8008164:	f003 0308 	and.w	r3, r3, #8
 8008168:	2b08      	cmp	r3, #8
 800816a:	d110      	bne.n	800818e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2208      	movs	r2, #8
 8008172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 f95b 	bl	8008430 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2208      	movs	r2, #8
 800817e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e029      	b.n	80081e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	69db      	ldr	r3, [r3, #28]
 8008194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800819c:	d111      	bne.n	80081c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f000 f941 	bl	8008430 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2220      	movs	r2, #32
 80081b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e00f      	b.n	80081e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	69da      	ldr	r2, [r3, #28]
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	4013      	ands	r3, r2
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	bf0c      	ite	eq
 80081d2:	2301      	moveq	r3, #1
 80081d4:	2300      	movne	r3, #0
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	461a      	mov	r2, r3
 80081da:	79fb      	ldrb	r3, [r7, #7]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d0a0      	beq.n	8008122 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
	...

080081ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b0a3      	sub	sp, #140	@ 0x8c
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	4613      	mov	r3, r2
 80081f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	88fa      	ldrh	r2, [r7, #6]
 8008204:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	88fa      	ldrh	r2, [r7, #6]
 800820c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2200      	movs	r2, #0
 8008214:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800821e:	d10e      	bne.n	800823e <UART_Start_Receive_IT+0x52>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d105      	bne.n	8008234 <UART_Start_Receive_IT+0x48>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800822e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008232:	e02d      	b.n	8008290 <UART_Start_Receive_IT+0xa4>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	22ff      	movs	r2, #255	@ 0xff
 8008238:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800823c:	e028      	b.n	8008290 <UART_Start_Receive_IT+0xa4>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10d      	bne.n	8008262 <UART_Start_Receive_IT+0x76>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d104      	bne.n	8008258 <UART_Start_Receive_IT+0x6c>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	22ff      	movs	r2, #255	@ 0xff
 8008252:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008256:	e01b      	b.n	8008290 <UART_Start_Receive_IT+0xa4>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	227f      	movs	r2, #127	@ 0x7f
 800825c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008260:	e016      	b.n	8008290 <UART_Start_Receive_IT+0xa4>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800826a:	d10d      	bne.n	8008288 <UART_Start_Receive_IT+0x9c>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d104      	bne.n	800827e <UART_Start_Receive_IT+0x92>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	227f      	movs	r2, #127	@ 0x7f
 8008278:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800827c:	e008      	b.n	8008290 <UART_Start_Receive_IT+0xa4>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	223f      	movs	r2, #63	@ 0x3f
 8008282:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008286:	e003      	b.n	8008290 <UART_Start_Receive_IT+0xa4>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2200      	movs	r2, #0
 8008294:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2222      	movs	r2, #34	@ 0x22
 800829c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3308      	adds	r3, #8
 80082a6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082aa:	e853 3f00 	ldrex	r3, [r3]
 80082ae:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80082b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80082b2:	f043 0301 	orr.w	r3, r3, #1
 80082b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	3308      	adds	r3, #8
 80082c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80082c4:	673a      	str	r2, [r7, #112]	@ 0x70
 80082c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80082ca:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80082cc:	e841 2300 	strex	r3, r2, [r1]
 80082d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80082d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1e3      	bne.n	80082a0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082e0:	d14f      	bne.n	8008382 <UART_Start_Receive_IT+0x196>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80082e8:	88fa      	ldrh	r2, [r7, #6]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d349      	bcc.n	8008382 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082f6:	d107      	bne.n	8008308 <UART_Start_Receive_IT+0x11c>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d103      	bne.n	8008308 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	4a47      	ldr	r2, [pc, #284]	@ (8008420 <UART_Start_Receive_IT+0x234>)
 8008304:	675a      	str	r2, [r3, #116]	@ 0x74
 8008306:	e002      	b.n	800830e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	4a46      	ldr	r2, [pc, #280]	@ (8008424 <UART_Start_Receive_IT+0x238>)
 800830c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d01a      	beq.n	800834c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800831e:	e853 3f00 	ldrex	r3, [r3]
 8008322:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008324:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008326:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800832a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	461a      	mov	r2, r3
 8008334:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008338:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800833a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800833e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008340:	e841 2300 	strex	r3, r2, [r1]
 8008344:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1e4      	bne.n	8008316 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	3308      	adds	r3, #8
 8008352:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008356:	e853 3f00 	ldrex	r3, [r3]
 800835a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800835c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008362:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3308      	adds	r3, #8
 800836a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800836c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800836e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008370:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008372:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008374:	e841 2300 	strex	r3, r2, [r1]
 8008378:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800837a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1e5      	bne.n	800834c <UART_Start_Receive_IT+0x160>
 8008380:	e046      	b.n	8008410 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800838a:	d107      	bne.n	800839c <UART_Start_Receive_IT+0x1b0>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d103      	bne.n	800839c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	4a24      	ldr	r2, [pc, #144]	@ (8008428 <UART_Start_Receive_IT+0x23c>)
 8008398:	675a      	str	r2, [r3, #116]	@ 0x74
 800839a:	e002      	b.n	80083a2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	4a23      	ldr	r2, [pc, #140]	@ (800842c <UART_Start_Receive_IT+0x240>)
 80083a0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d019      	beq.n	80083de <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b2:	e853 3f00 	ldrex	r3, [r3]
 80083b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ba:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80083be:	677b      	str	r3, [r7, #116]	@ 0x74
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	461a      	mov	r2, r3
 80083c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80083c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80083ca:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80083ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083d0:	e841 2300 	strex	r3, r2, [r1]
 80083d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80083d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d1e6      	bne.n	80083aa <UART_Start_Receive_IT+0x1be>
 80083dc:	e018      	b.n	8008410 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	e853 3f00 	ldrex	r3, [r3]
 80083ea:	613b      	str	r3, [r7, #16]
   return(result);
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	f043 0320 	orr.w	r3, r3, #32
 80083f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	461a      	mov	r2, r3
 80083fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083fc:	623b      	str	r3, [r7, #32]
 80083fe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008400:	69f9      	ldr	r1, [r7, #28]
 8008402:	6a3a      	ldr	r2, [r7, #32]
 8008404:	e841 2300 	strex	r3, r2, [r1]
 8008408:	61bb      	str	r3, [r7, #24]
   return(result);
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1e6      	bne.n	80083de <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	378c      	adds	r7, #140	@ 0x8c
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	08008f95 	.word	0x08008f95
 8008424:	08008c35 	.word	0x08008c35
 8008428:	08008a7d 	.word	0x08008a7d
 800842c:	080088c5 	.word	0x080088c5

08008430 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008430:	b480      	push	{r7}
 8008432:	b095      	sub	sp, #84	@ 0x54
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008440:	e853 3f00 	ldrex	r3, [r3]
 8008444:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008448:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800844c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	461a      	mov	r2, r3
 8008454:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008456:	643b      	str	r3, [r7, #64]	@ 0x40
 8008458:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800845c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800845e:	e841 2300 	strex	r3, r2, [r1]
 8008462:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1e6      	bne.n	8008438 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3308      	adds	r3, #8
 8008470:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008472:	6a3b      	ldr	r3, [r7, #32]
 8008474:	e853 3f00 	ldrex	r3, [r3]
 8008478:	61fb      	str	r3, [r7, #28]
   return(result);
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008480:	f023 0301 	bic.w	r3, r3, #1
 8008484:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3308      	adds	r3, #8
 800848c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800848e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008490:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008492:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008494:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008496:	e841 2300 	strex	r3, r2, [r1]
 800849a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800849c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1e3      	bne.n	800846a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d118      	bne.n	80084dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	e853 3f00 	ldrex	r3, [r3]
 80084b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	f023 0310 	bic.w	r3, r3, #16
 80084be:	647b      	str	r3, [r7, #68]	@ 0x44
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	461a      	mov	r2, r3
 80084c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084c8:	61bb      	str	r3, [r7, #24]
 80084ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084cc:	6979      	ldr	r1, [r7, #20]
 80084ce:	69ba      	ldr	r2, [r7, #24]
 80084d0:	e841 2300 	strex	r3, r2, [r1]
 80084d4:	613b      	str	r3, [r7, #16]
   return(result);
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1e6      	bne.n	80084aa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2220      	movs	r2, #32
 80084e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80084f0:	bf00      	nop
 80084f2:	3754      	adds	r7, #84	@ 0x54
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008508:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2200      	movs	r2, #0
 800850e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2200      	movs	r2, #0
 8008516:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f7ff f99a 	bl	8007854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008520:	bf00      	nop
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008528:	b480      	push	{r7}
 800852a:	b08f      	sub	sp, #60	@ 0x3c
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008536:	2b21      	cmp	r3, #33	@ 0x21
 8008538:	d14c      	bne.n	80085d4 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008540:	b29b      	uxth	r3, r3
 8008542:	2b00      	cmp	r3, #0
 8008544:	d132      	bne.n	80085ac <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854c:	6a3b      	ldr	r3, [r7, #32]
 800854e:	e853 3f00 	ldrex	r3, [r3]
 8008552:	61fb      	str	r3, [r7, #28]
   return(result);
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800855a:	637b      	str	r3, [r7, #52]	@ 0x34
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	461a      	mov	r2, r3
 8008562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008564:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008566:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008568:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800856a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800856c:	e841 2300 	strex	r3, r2, [r1]
 8008570:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008574:	2b00      	cmp	r3, #0
 8008576:	d1e6      	bne.n	8008546 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	e853 3f00 	ldrex	r3, [r3]
 8008584:	60bb      	str	r3, [r7, #8]
   return(result);
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800858c:	633b      	str	r3, [r7, #48]	@ 0x30
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	461a      	mov	r2, r3
 8008594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008596:	61bb      	str	r3, [r7, #24]
 8008598:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859a:	6979      	ldr	r1, [r7, #20]
 800859c:	69ba      	ldr	r2, [r7, #24]
 800859e:	e841 2300 	strex	r3, r2, [r1]
 80085a2:	613b      	str	r3, [r7, #16]
   return(result);
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1e6      	bne.n	8008578 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80085aa:	e013      	b.n	80085d4 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085b0:	781a      	ldrb	r2, [r3, #0]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085bc:	1c5a      	adds	r2, r3, #1
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	3b01      	subs	r3, #1
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80085d4:	bf00      	nop
 80085d6:	373c      	adds	r7, #60	@ 0x3c
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b091      	sub	sp, #68	@ 0x44
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ee:	2b21      	cmp	r3, #33	@ 0x21
 80085f0:	d151      	bne.n	8008696 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d132      	bne.n	8008664 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008606:	e853 3f00 	ldrex	r3, [r3]
 800860a:	623b      	str	r3, [r7, #32]
   return(result);
 800860c:	6a3b      	ldr	r3, [r7, #32]
 800860e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008612:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	461a      	mov	r2, r3
 800861a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800861c:	633b      	str	r3, [r7, #48]	@ 0x30
 800861e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008620:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008622:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008624:	e841 2300 	strex	r3, r2, [r1]
 8008628:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800862a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1e6      	bne.n	80085fe <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	e853 3f00 	ldrex	r3, [r3]
 800863c:	60fb      	str	r3, [r7, #12]
   return(result);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008644:	637b      	str	r3, [r7, #52]	@ 0x34
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	461a      	mov	r2, r3
 800864c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800864e:	61fb      	str	r3, [r7, #28]
 8008650:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008652:	69b9      	ldr	r1, [r7, #24]
 8008654:	69fa      	ldr	r2, [r7, #28]
 8008656:	e841 2300 	strex	r3, r2, [r1]
 800865a:	617b      	str	r3, [r7, #20]
   return(result);
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1e6      	bne.n	8008630 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008662:	e018      	b.n	8008696 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008668:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800866a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800866c:	881b      	ldrh	r3, [r3, #0]
 800866e:	461a      	mov	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008678:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800867e:	1c9a      	adds	r2, r3, #2
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800868a:	b29b      	uxth	r3, r3
 800868c:	3b01      	subs	r3, #1
 800868e:	b29a      	uxth	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8008696:	bf00      	nop
 8008698:	3744      	adds	r7, #68	@ 0x44
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr

080086a2 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80086a2:	b480      	push	{r7}
 80086a4:	b091      	sub	sp, #68	@ 0x44
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086b0:	2b21      	cmp	r3, #33	@ 0x21
 80086b2:	d160      	bne.n	8008776 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80086ba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80086bc:	e057      	b.n	800876e <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d133      	bne.n	8008732 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	3308      	adds	r3, #8
 80086d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d4:	e853 3f00 	ldrex	r3, [r3]
 80086d8:	623b      	str	r3, [r7, #32]
   return(result);
 80086da:	6a3b      	ldr	r3, [r7, #32]
 80086dc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80086e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	3308      	adds	r3, #8
 80086e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80086ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80086ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086f2:	e841 2300 	strex	r3, r2, [r1]
 80086f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1e5      	bne.n	80086ca <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	e853 3f00 	ldrex	r3, [r3]
 800870a:	60fb      	str	r3, [r7, #12]
   return(result);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008712:	637b      	str	r3, [r7, #52]	@ 0x34
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	461a      	mov	r2, r3
 800871a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800871c:	61fb      	str	r3, [r7, #28]
 800871e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008720:	69b9      	ldr	r1, [r7, #24]
 8008722:	69fa      	ldr	r2, [r7, #28]
 8008724:	e841 2300 	strex	r3, r2, [r1]
 8008728:	617b      	str	r3, [r7, #20]
   return(result);
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1e6      	bne.n	80086fe <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008730:	e021      	b.n	8008776 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	69db      	ldr	r3, [r3, #28]
 8008738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800873c:	2b00      	cmp	r3, #0
 800873e:	d013      	beq.n	8008768 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008744:	781a      	ldrb	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008750:	1c5a      	adds	r2, r3, #1
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800875c:	b29b      	uxth	r3, r3
 800875e:	3b01      	subs	r3, #1
 8008760:	b29a      	uxth	r2, r3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008768:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800876a:	3b01      	subs	r3, #1
 800876c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800876e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1a4      	bne.n	80086be <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008774:	e7ff      	b.n	8008776 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8008776:	bf00      	nop
 8008778:	3744      	adds	r7, #68	@ 0x44
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008782:	b480      	push	{r7}
 8008784:	b091      	sub	sp, #68	@ 0x44
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008790:	2b21      	cmp	r3, #33	@ 0x21
 8008792:	d165      	bne.n	8008860 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800879a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800879c:	e05c      	b.n	8008858 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d133      	bne.n	8008812 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	3308      	adds	r3, #8
 80087b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b2:	6a3b      	ldr	r3, [r7, #32]
 80087b4:	e853 3f00 	ldrex	r3, [r3]
 80087b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80087c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	3308      	adds	r3, #8
 80087c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80087ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80087cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087d2:	e841 2300 	strex	r3, r2, [r1]
 80087d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80087d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1e5      	bne.n	80087aa <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	e853 3f00 	ldrex	r3, [r3]
 80087ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	461a      	mov	r2, r3
 80087fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fc:	61bb      	str	r3, [r7, #24]
 80087fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008800:	6979      	ldr	r1, [r7, #20]
 8008802:	69ba      	ldr	r2, [r7, #24]
 8008804:	e841 2300 	strex	r3, r2, [r1]
 8008808:	613b      	str	r3, [r7, #16]
   return(result);
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1e6      	bne.n	80087de <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008810:	e026      	b.n	8008860 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	69db      	ldr	r3, [r3, #28]
 8008818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800881c:	2b00      	cmp	r3, #0
 800881e:	d018      	beq.n	8008852 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008824:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008828:	881b      	ldrh	r3, [r3, #0]
 800882a:	461a      	mov	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008834:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800883a:	1c9a      	adds	r2, r3, #2
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008846:	b29b      	uxth	r3, r3
 8008848:	3b01      	subs	r3, #1
 800884a:	b29a      	uxth	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008852:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008854:	3b01      	subs	r3, #1
 8008856:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008858:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800885a:	2b00      	cmp	r3, #0
 800885c:	d19f      	bne.n	800879e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800885e:	e7ff      	b.n	8008860 <UART_TxISR_16BIT_FIFOEN+0xde>
 8008860:	bf00      	nop
 8008862:	3744      	adds	r7, #68	@ 0x44
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b088      	sub	sp, #32
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	e853 3f00 	ldrex	r3, [r3]
 8008880:	60bb      	str	r3, [r7, #8]
   return(result);
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008888:	61fb      	str	r3, [r7, #28]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	461a      	mov	r2, r3
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	61bb      	str	r3, [r7, #24]
 8008894:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008896:	6979      	ldr	r1, [r7, #20]
 8008898:	69ba      	ldr	r2, [r7, #24]
 800889a:	e841 2300 	strex	r3, r2, [r1]
 800889e:	613b      	str	r3, [r7, #16]
   return(result);
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1e6      	bne.n	8008874 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2220      	movs	r2, #32
 80088aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f7fe ffb9 	bl	800782c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088ba:	bf00      	nop
 80088bc:	3720      	adds	r7, #32
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
	...

080088c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b09c      	sub	sp, #112	@ 0x70
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80088d2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088dc:	2b22      	cmp	r3, #34	@ 0x22
 80088de:	f040 80be 	bne.w	8008a5e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80088ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80088f0:	b2d9      	uxtb	r1, r3
 80088f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088fc:	400a      	ands	r2, r1
 80088fe:	b2d2      	uxtb	r2, r2
 8008900:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008906:	1c5a      	adds	r2, r3, #1
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008912:	b29b      	uxth	r3, r3
 8008914:	3b01      	subs	r3, #1
 8008916:	b29a      	uxth	r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008924:	b29b      	uxth	r3, r3
 8008926:	2b00      	cmp	r3, #0
 8008928:	f040 80a1 	bne.w	8008a6e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008932:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008934:	e853 3f00 	ldrex	r3, [r3]
 8008938:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800893a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800893c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008940:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800894a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800894c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008950:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008952:	e841 2300 	strex	r3, r2, [r1]
 8008956:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008958:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1e6      	bne.n	800892c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	3308      	adds	r3, #8
 8008964:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008968:	e853 3f00 	ldrex	r3, [r3]
 800896c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800896e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008970:	f023 0301 	bic.w	r3, r3, #1
 8008974:	667b      	str	r3, [r7, #100]	@ 0x64
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	3308      	adds	r3, #8
 800897c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800897e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008980:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008982:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008984:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008986:	e841 2300 	strex	r3, r2, [r1]
 800898a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800898c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1e5      	bne.n	800895e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2220      	movs	r2, #32
 8008996:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a33      	ldr	r2, [pc, #204]	@ (8008a78 <UART_RxISR_8BIT+0x1b4>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d01f      	beq.n	80089f0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d018      	beq.n	80089f0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c6:	e853 3f00 	ldrex	r3, [r3]
 80089ca:	623b      	str	r3, [r7, #32]
   return(result);
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80089d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	461a      	mov	r2, r3
 80089da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80089de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089e4:	e841 2300 	strex	r3, r2, [r1]
 80089e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1e6      	bne.n	80089be <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d12e      	bne.n	8008a56 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	e853 3f00 	ldrex	r3, [r3]
 8008a0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f023 0310 	bic.w	r3, r3, #16
 8008a12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a1c:	61fb      	str	r3, [r7, #28]
 8008a1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a20:	69b9      	ldr	r1, [r7, #24]
 8008a22:	69fa      	ldr	r2, [r7, #28]
 8008a24:	e841 2300 	strex	r3, r2, [r1]
 8008a28:	617b      	str	r3, [r7, #20]
   return(result);
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1e6      	bne.n	80089fe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	69db      	ldr	r3, [r3, #28]
 8008a36:	f003 0310 	and.w	r3, r3, #16
 8008a3a:	2b10      	cmp	r3, #16
 8008a3c:	d103      	bne.n	8008a46 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2210      	movs	r2, #16
 8008a44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f7fe ff0a 	bl	8007868 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a54:	e00b      	b.n	8008a6e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f7fe fef2 	bl	8007840 <HAL_UART_RxCpltCallback>
}
 8008a5c:	e007      	b.n	8008a6e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	699a      	ldr	r2, [r3, #24]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f042 0208 	orr.w	r2, r2, #8
 8008a6c:	619a      	str	r2, [r3, #24]
}
 8008a6e:	bf00      	nop
 8008a70:	3770      	adds	r7, #112	@ 0x70
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	40008000 	.word	0x40008000

08008a7c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b09c      	sub	sp, #112	@ 0x70
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008a8a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a94:	2b22      	cmp	r3, #34	@ 0x22
 8008a96:	f040 80be 	bne.w	8008c16 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aa0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008aa8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008aaa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008aae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008ab2:	4013      	ands	r3, r2
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ab8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008abe:	1c9a      	adds	r2, r3, #2
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	3b01      	subs	r3, #1
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	f040 80a1 	bne.w	8008c26 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008aec:	e853 3f00 	ldrex	r3, [r3]
 8008af0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008af2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008af4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008af8:	667b      	str	r3, [r7, #100]	@ 0x64
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	461a      	mov	r2, r3
 8008b00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b02:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b04:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b06:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008b08:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008b0a:	e841 2300 	strex	r3, r2, [r1]
 8008b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008b10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1e6      	bne.n	8008ae4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	3308      	adds	r3, #8
 8008b1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b20:	e853 3f00 	ldrex	r3, [r3]
 8008b24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b28:	f023 0301 	bic.w	r3, r3, #1
 8008b2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	3308      	adds	r3, #8
 8008b34:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008b36:	643a      	str	r2, [r7, #64]	@ 0x40
 8008b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b3e:	e841 2300 	strex	r3, r2, [r1]
 8008b42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1e5      	bne.n	8008b16 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2220      	movs	r2, #32
 8008b4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a33      	ldr	r2, [pc, #204]	@ (8008c30 <UART_RxISR_16BIT+0x1b4>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d01f      	beq.n	8008ba8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d018      	beq.n	8008ba8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7c:	6a3b      	ldr	r3, [r7, #32]
 8008b7e:	e853 3f00 	ldrex	r3, [r3]
 8008b82:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	461a      	mov	r2, r3
 8008b92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b96:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b9c:	e841 2300 	strex	r3, r2, [r1]
 8008ba0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d1e6      	bne.n	8008b76 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d12e      	bne.n	8008c0e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	e853 3f00 	ldrex	r3, [r3]
 8008bc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	f023 0310 	bic.w	r3, r3, #16
 8008bca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008bd4:	61bb      	str	r3, [r7, #24]
 8008bd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd8:	6979      	ldr	r1, [r7, #20]
 8008bda:	69ba      	ldr	r2, [r7, #24]
 8008bdc:	e841 2300 	strex	r3, r2, [r1]
 8008be0:	613b      	str	r3, [r7, #16]
   return(result);
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1e6      	bne.n	8008bb6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	69db      	ldr	r3, [r3, #28]
 8008bee:	f003 0310 	and.w	r3, r3, #16
 8008bf2:	2b10      	cmp	r3, #16
 8008bf4:	d103      	bne.n	8008bfe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2210      	movs	r2, #16
 8008bfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008c04:	4619      	mov	r1, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7fe fe2e 	bl	8007868 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c0c:	e00b      	b.n	8008c26 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7fe fe16 	bl	8007840 <HAL_UART_RxCpltCallback>
}
 8008c14:	e007      	b.n	8008c26 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	699a      	ldr	r2, [r3, #24]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f042 0208 	orr.w	r2, r2, #8
 8008c24:	619a      	str	r2, [r3, #24]
}
 8008c26:	bf00      	nop
 8008c28:	3770      	adds	r7, #112	@ 0x70
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	40008000 	.word	0x40008000

08008c34 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b0ac      	sub	sp, #176	@ 0xb0
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008c42:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	69db      	ldr	r3, [r3, #28]
 8008c4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c6a:	2b22      	cmp	r3, #34	@ 0x22
 8008c6c:	f040 8182 	bne.w	8008f74 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008c76:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c7a:	e125      	b.n	8008ec8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c82:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c86:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008c8a:	b2d9      	uxtb	r1, r3
 8008c8c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008c90:	b2da      	uxtb	r2, r3
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c96:	400a      	ands	r2, r1
 8008c98:	b2d2      	uxtb	r2, r2
 8008c9a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ca0:	1c5a      	adds	r2, r3, #1
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	69db      	ldr	r3, [r3, #28]
 8008cbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008cc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cc6:	f003 0307 	and.w	r3, r3, #7
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d053      	beq.n	8008d76 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cd2:	f003 0301 	and.w	r3, r3, #1
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d011      	beq.n	8008cfe <UART_RxISR_8BIT_FIFOEN+0xca>
 8008cda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00b      	beq.n	8008cfe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2201      	movs	r2, #1
 8008cec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cf4:	f043 0201 	orr.w	r2, r3, #1
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d02:	f003 0302 	and.w	r3, r3, #2
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d011      	beq.n	8008d2e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008d0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008d0e:	f003 0301 	and.w	r3, r3, #1
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00b      	beq.n	8008d2e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d24:	f043 0204 	orr.w	r2, r3, #4
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d32:	f003 0304 	and.w	r3, r3, #4
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d011      	beq.n	8008d5e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008d3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008d3e:	f003 0301 	and.w	r3, r3, #1
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00b      	beq.n	8008d5e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2204      	movs	r2, #4
 8008d4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d54:	f043 0202 	orr.w	r2, r3, #2
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d006      	beq.n	8008d76 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f7fe fd73 	bl	8007854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f040 80a2 	bne.w	8008ec8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d8c:	e853 3f00 	ldrex	r3, [r3]
 8008d90:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008d92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	461a      	mov	r2, r3
 8008da2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008da6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008da8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008daa:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008dac:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008dae:	e841 2300 	strex	r3, r2, [r1]
 8008db2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008db4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1e4      	bne.n	8008d84 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	3308      	adds	r3, #8
 8008dc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008dc4:	e853 3f00 	ldrex	r3, [r3]
 8008dc8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008dca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008dcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008dd0:	f023 0301 	bic.w	r3, r3, #1
 8008dd4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	3308      	adds	r3, #8
 8008dde:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008de2:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008de4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008de8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008dea:	e841 2300 	strex	r3, r2, [r1]
 8008dee:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008df0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1e1      	bne.n	8008dba <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2220      	movs	r2, #32
 8008dfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a5f      	ldr	r2, [pc, #380]	@ (8008f8c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d021      	beq.n	8008e58 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d01a      	beq.n	8008e58 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e2a:	e853 3f00 	ldrex	r3, [r3]
 8008e2e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008e30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e32:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008e36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	461a      	mov	r2, r3
 8008e40:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008e44:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e46:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e48:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008e4a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008e4c:	e841 2300 	strex	r3, r2, [r1]
 8008e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008e52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1e4      	bne.n	8008e22 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d130      	bne.n	8008ec2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e6e:	e853 3f00 	ldrex	r3, [r3]
 8008e72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e76:	f023 0310 	bic.w	r3, r3, #16
 8008e7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	461a      	mov	r2, r3
 8008e84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e88:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e90:	e841 2300 	strex	r3, r2, [r1]
 8008e94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1e4      	bne.n	8008e66 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	69db      	ldr	r3, [r3, #28]
 8008ea2:	f003 0310 	and.w	r3, r3, #16
 8008ea6:	2b10      	cmp	r3, #16
 8008ea8:	d103      	bne.n	8008eb2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2210      	movs	r2, #16
 8008eb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008eb8:	4619      	mov	r1, r3
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f7fe fcd4 	bl	8007868 <HAL_UARTEx_RxEventCallback>
 8008ec0:	e002      	b.n	8008ec8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7fe fcbc 	bl	8007840 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ec8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d006      	beq.n	8008ede <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008ed0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ed4:	f003 0320 	and.w	r3, r3, #32
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f47f aecf 	bne.w	8008c7c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ee4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008ee8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d049      	beq.n	8008f84 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008ef6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d242      	bcs.n	8008f84 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	3308      	adds	r3, #8
 8008f04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f06:	6a3b      	ldr	r3, [r7, #32]
 8008f08:	e853 3f00 	ldrex	r3, [r3]
 8008f0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	3308      	adds	r3, #8
 8008f1e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008f22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f2a:	e841 2300 	strex	r3, r2, [r1]
 8008f2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1e3      	bne.n	8008efe <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4a15      	ldr	r2, [pc, #84]	@ (8008f90 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008f3a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	e853 3f00 	ldrex	r3, [r3]
 8008f48:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	f043 0320 	orr.w	r3, r3, #32
 8008f50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008f5e:	61bb      	str	r3, [r7, #24]
 8008f60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f62:	6979      	ldr	r1, [r7, #20]
 8008f64:	69ba      	ldr	r2, [r7, #24]
 8008f66:	e841 2300 	strex	r3, r2, [r1]
 8008f6a:	613b      	str	r3, [r7, #16]
   return(result);
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1e4      	bne.n	8008f3c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f72:	e007      	b.n	8008f84 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	699a      	ldr	r2, [r3, #24]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f042 0208 	orr.w	r2, r2, #8
 8008f82:	619a      	str	r2, [r3, #24]
}
 8008f84:	bf00      	nop
 8008f86:	37b0      	adds	r7, #176	@ 0xb0
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	40008000 	.word	0x40008000
 8008f90:	080088c5 	.word	0x080088c5

08008f94 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b0ae      	sub	sp, #184	@ 0xb8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008fa2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	69db      	ldr	r3, [r3, #28]
 8008fac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fca:	2b22      	cmp	r3, #34	@ 0x22
 8008fcc:	f040 8186 	bne.w	80092dc <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008fd6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008fda:	e129      	b.n	8009230 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008fee:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008ff2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ffe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009004:	1c9a      	adds	r2, r3, #2
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009010:	b29b      	uxth	r3, r3
 8009012:	3b01      	subs	r3, #1
 8009014:	b29a      	uxth	r2, r3
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	69db      	ldr	r3, [r3, #28]
 8009022:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009026:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800902a:	f003 0307 	and.w	r3, r3, #7
 800902e:	2b00      	cmp	r3, #0
 8009030:	d053      	beq.n	80090da <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009032:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	2b00      	cmp	r3, #0
 800903c:	d011      	beq.n	8009062 <UART_RxISR_16BIT_FIFOEN+0xce>
 800903e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00b      	beq.n	8009062 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2201      	movs	r2, #1
 8009050:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009058:	f043 0201 	orr.w	r2, r3, #1
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009062:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009066:	f003 0302 	and.w	r3, r3, #2
 800906a:	2b00      	cmp	r3, #0
 800906c:	d011      	beq.n	8009092 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800906e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009072:	f003 0301 	and.w	r3, r3, #1
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00b      	beq.n	8009092 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2202      	movs	r2, #2
 8009080:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009088:	f043 0204 	orr.w	r2, r3, #4
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009092:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009096:	f003 0304 	and.w	r3, r3, #4
 800909a:	2b00      	cmp	r3, #0
 800909c:	d011      	beq.n	80090c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800909e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80090a2:	f003 0301 	and.w	r3, r3, #1
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00b      	beq.n	80090c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2204      	movs	r2, #4
 80090b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090b8:	f043 0202 	orr.w	r2, r3, #2
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d006      	beq.n	80090da <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f7fe fbc1 	bl	8007854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f040 80a4 	bne.w	8009230 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090f0:	e853 3f00 	ldrex	r3, [r3]
 80090f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80090f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80090f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	461a      	mov	r2, r3
 8009106:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800910a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800910e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009110:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009112:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009116:	e841 2300 	strex	r3, r2, [r1]
 800911a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800911c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1e2      	bne.n	80090e8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3308      	adds	r3, #8
 8009128:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800912c:	e853 3f00 	ldrex	r3, [r3]
 8009130:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009132:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009134:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009138:	f023 0301 	bic.w	r3, r3, #1
 800913c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	3308      	adds	r3, #8
 8009146:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800914a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800914c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009150:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009152:	e841 2300 	strex	r3, r2, [r1]
 8009156:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009158:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1e1      	bne.n	8009122 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2220      	movs	r2, #32
 8009162:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a5f      	ldr	r2, [pc, #380]	@ (80092f4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d021      	beq.n	80091c0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009186:	2b00      	cmp	r3, #0
 8009188:	d01a      	beq.n	80091c0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009190:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009192:	e853 3f00 	ldrex	r3, [r3]
 8009196:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009198:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800919a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800919e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	461a      	mov	r2, r3
 80091a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80091ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80091ae:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80091b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80091b4:	e841 2300 	strex	r3, r2, [r1]
 80091b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80091ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1e4      	bne.n	800918a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d130      	bne.n	800922a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d6:	e853 3f00 	ldrex	r3, [r3]
 80091da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091de:	f023 0310 	bic.w	r3, r3, #16
 80091e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	461a      	mov	r2, r3
 80091ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80091f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80091f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091f8:	e841 2300 	strex	r3, r2, [r1]
 80091fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009200:	2b00      	cmp	r3, #0
 8009202:	d1e4      	bne.n	80091ce <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	69db      	ldr	r3, [r3, #28]
 800920a:	f003 0310 	and.w	r3, r3, #16
 800920e:	2b10      	cmp	r3, #16
 8009210:	d103      	bne.n	800921a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2210      	movs	r2, #16
 8009218:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009220:	4619      	mov	r1, r3
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f7fe fb20 	bl	8007868 <HAL_UARTEx_RxEventCallback>
 8009228:	e002      	b.n	8009230 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f7fe fb08 	bl	8007840 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009230:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009234:	2b00      	cmp	r3, #0
 8009236:	d006      	beq.n	8009246 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009238:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800923c:	f003 0320 	and.w	r3, r3, #32
 8009240:	2b00      	cmp	r3, #0
 8009242:	f47f aecb 	bne.w	8008fdc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800924c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009250:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009254:	2b00      	cmp	r3, #0
 8009256:	d049      	beq.n	80092ec <UART_RxISR_16BIT_FIFOEN+0x358>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800925e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009262:	429a      	cmp	r2, r3
 8009264:	d242      	bcs.n	80092ec <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	3308      	adds	r3, #8
 800926c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009270:	e853 3f00 	ldrex	r3, [r3]
 8009274:	623b      	str	r3, [r7, #32]
   return(result);
 8009276:	6a3b      	ldr	r3, [r7, #32]
 8009278:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800927c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	3308      	adds	r3, #8
 8009286:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800928a:	633a      	str	r2, [r7, #48]	@ 0x30
 800928c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009290:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009292:	e841 2300 	strex	r3, r2, [r1]
 8009296:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800929a:	2b00      	cmp	r3, #0
 800929c:	d1e3      	bne.n	8009266 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a15      	ldr	r2, [pc, #84]	@ (80092f8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80092a2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	e853 3f00 	ldrex	r3, [r3]
 80092b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f043 0320 	orr.w	r3, r3, #32
 80092b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	461a      	mov	r2, r3
 80092c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80092c6:	61fb      	str	r3, [r7, #28]
 80092c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ca:	69b9      	ldr	r1, [r7, #24]
 80092cc:	69fa      	ldr	r2, [r7, #28]
 80092ce:	e841 2300 	strex	r3, r2, [r1]
 80092d2:	617b      	str	r3, [r7, #20]
   return(result);
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d1e4      	bne.n	80092a4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092da:	e007      	b.n	80092ec <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	699a      	ldr	r2, [r3, #24]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f042 0208 	orr.w	r2, r2, #8
 80092ea:	619a      	str	r2, [r3, #24]
}
 80092ec:	bf00      	nop
 80092ee:	37b8      	adds	r7, #184	@ 0xb8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	40008000 	.word	0x40008000
 80092f8:	08008a7d 	.word	0x08008a7d

080092fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009304:	bf00      	nop
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009318:	bf00      	nop
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800932c:	bf00      	nop
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009346:	2b01      	cmp	r3, #1
 8009348:	d101      	bne.n	800934e <HAL_UARTEx_DisableFifoMode+0x16>
 800934a:	2302      	movs	r3, #2
 800934c:	e027      	b.n	800939e <HAL_UARTEx_DisableFifoMode+0x66>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2201      	movs	r2, #1
 8009352:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2224      	movs	r2, #36	@ 0x24
 800935a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f022 0201 	bic.w	r2, r2, #1
 8009374:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800937c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2220      	movs	r2, #32
 8009390:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3714      	adds	r7, #20
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b084      	sub	sp, #16
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d101      	bne.n	80093c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80093be:	2302      	movs	r3, #2
 80093c0:	e02d      	b.n	800941e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2201      	movs	r2, #1
 80093c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2224      	movs	r2, #36	@ 0x24
 80093ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f022 0201 	bic.w	r2, r2, #1
 80093e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	683a      	ldr	r2, [r7, #0]
 80093fa:	430a      	orrs	r2, r1
 80093fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f850 	bl	80094a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2220      	movs	r2, #32
 8009410:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b084      	sub	sp, #16
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
 800942e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009436:	2b01      	cmp	r3, #1
 8009438:	d101      	bne.n	800943e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800943a:	2302      	movs	r3, #2
 800943c:	e02d      	b.n	800949a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2201      	movs	r2, #1
 8009442:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2224      	movs	r2, #36	@ 0x24
 800944a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f022 0201 	bic.w	r2, r2, #1
 8009464:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	430a      	orrs	r2, r1
 8009478:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f812 	bl	80094a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2220      	movs	r2, #32
 800948c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
	...

080094a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d108      	bne.n	80094c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80094c4:	e031      	b.n	800952a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80094c6:	2308      	movs	r3, #8
 80094c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80094ca:	2308      	movs	r3, #8
 80094cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	0e5b      	lsrs	r3, r3, #25
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	f003 0307 	and.w	r3, r3, #7
 80094dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	0f5b      	lsrs	r3, r3, #29
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	f003 0307 	and.w	r3, r3, #7
 80094ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094ee:	7bbb      	ldrb	r3, [r7, #14]
 80094f0:	7b3a      	ldrb	r2, [r7, #12]
 80094f2:	4911      	ldr	r1, [pc, #68]	@ (8009538 <UARTEx_SetNbDataToProcess+0x94>)
 80094f4:	5c8a      	ldrb	r2, [r1, r2]
 80094f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80094fa:	7b3a      	ldrb	r2, [r7, #12]
 80094fc:	490f      	ldr	r1, [pc, #60]	@ (800953c <UARTEx_SetNbDataToProcess+0x98>)
 80094fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009500:	fb93 f3f2 	sdiv	r3, r3, r2
 8009504:	b29a      	uxth	r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800950c:	7bfb      	ldrb	r3, [r7, #15]
 800950e:	7b7a      	ldrb	r2, [r7, #13]
 8009510:	4909      	ldr	r1, [pc, #36]	@ (8009538 <UARTEx_SetNbDataToProcess+0x94>)
 8009512:	5c8a      	ldrb	r2, [r1, r2]
 8009514:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009518:	7b7a      	ldrb	r2, [r7, #13]
 800951a:	4908      	ldr	r1, [pc, #32]	@ (800953c <UARTEx_SetNbDataToProcess+0x98>)
 800951c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800951e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009522:	b29a      	uxth	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800952a:	bf00      	nop
 800952c:	3714      	adds	r7, #20
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	0800964c 	.word	0x0800964c
 800953c:	08009654 	.word	0x08009654

08009540 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	ed93 7a06 	vldr	s14, [r3, #24]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	edd3 7a07 	vldr	s15, [r3, #28]
 8009556:	ee37 7a27 	vadd.f32	s14, s14, s15
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	edd3 7a08 	vldr	s15, [r3, #32]
 8009560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	edd3 7a06 	vldr	s15, [r3, #24]
 8009570:	eeb1 7a67 	vneg.f32	s14, s15
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	edd3 7a08 	vldr	s15, [r3, #32]
 800957a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800957e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6a1a      	ldr	r2, [r3, #32]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d006      	beq.n	80095a4 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	330c      	adds	r3, #12
 800959a:	220c      	movs	r2, #12
 800959c:	2100      	movs	r1, #0
 800959e:	4618      	mov	r0, r3
 80095a0:	f000 f804 	bl	80095ac <memset>
  }

}
 80095a4:	bf00      	nop
 80095a6:	3708      	adds	r7, #8
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <memset>:
 80095ac:	4402      	add	r2, r0
 80095ae:	4603      	mov	r3, r0
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d100      	bne.n	80095b6 <memset+0xa>
 80095b4:	4770      	bx	lr
 80095b6:	f803 1b01 	strb.w	r1, [r3], #1
 80095ba:	e7f9      	b.n	80095b0 <memset+0x4>

080095bc <__libc_init_array>:
 80095bc:	b570      	push	{r4, r5, r6, lr}
 80095be:	4d0d      	ldr	r5, [pc, #52]	@ (80095f4 <__libc_init_array+0x38>)
 80095c0:	4c0d      	ldr	r4, [pc, #52]	@ (80095f8 <__libc_init_array+0x3c>)
 80095c2:	1b64      	subs	r4, r4, r5
 80095c4:	10a4      	asrs	r4, r4, #2
 80095c6:	2600      	movs	r6, #0
 80095c8:	42a6      	cmp	r6, r4
 80095ca:	d109      	bne.n	80095e0 <__libc_init_array+0x24>
 80095cc:	4d0b      	ldr	r5, [pc, #44]	@ (80095fc <__libc_init_array+0x40>)
 80095ce:	4c0c      	ldr	r4, [pc, #48]	@ (8009600 <__libc_init_array+0x44>)
 80095d0:	f000 f818 	bl	8009604 <_init>
 80095d4:	1b64      	subs	r4, r4, r5
 80095d6:	10a4      	asrs	r4, r4, #2
 80095d8:	2600      	movs	r6, #0
 80095da:	42a6      	cmp	r6, r4
 80095dc:	d105      	bne.n	80095ea <__libc_init_array+0x2e>
 80095de:	bd70      	pop	{r4, r5, r6, pc}
 80095e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80095e4:	4798      	blx	r3
 80095e6:	3601      	adds	r6, #1
 80095e8:	e7ee      	b.n	80095c8 <__libc_init_array+0xc>
 80095ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80095ee:	4798      	blx	r3
 80095f0:	3601      	adds	r6, #1
 80095f2:	e7f2      	b.n	80095da <__libc_init_array+0x1e>
 80095f4:	08009664 	.word	0x08009664
 80095f8:	08009664 	.word	0x08009664
 80095fc:	08009664 	.word	0x08009664
 8009600:	08009668 	.word	0x08009668

08009604 <_init>:
 8009604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009606:	bf00      	nop
 8009608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800960a:	bc08      	pop	{r3}
 800960c:	469e      	mov	lr, r3
 800960e:	4770      	bx	lr

08009610 <_fini>:
 8009610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009612:	bf00      	nop
 8009614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009616:	bc08      	pop	{r3}
 8009618:	469e      	mov	lr, r3
 800961a:	4770      	bx	lr
