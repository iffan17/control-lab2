
Elec Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081f0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080083c8  080083c8  000093c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008408  08008408  0000a010  2**0
                  CONTENTS
  4 .ARM          00000008  08008408  08008408  00009408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008410  08008410  0000a010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008410  08008410  00009410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008414  08008414  00009414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008418  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000010  08008428  0000a010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08008428  0000a370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001896d  00000000  00000000  0000a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cba  00000000  00000000  000229ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  00025668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001084  00000000  00000000  00026b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028fae  00000000  00000000  00027c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018af7  00000000  00000000  00050bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011479f  00000000  00000000  000696b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017de50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b94  00000000  00000000  0017de94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00183a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080083b0 	.word	0x080083b0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080083b0 	.word	0x080083b0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f001 fa70 	bl	80019f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f9df 	bl	80008d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 fd5b 	bl	8000fd0 <MX_GPIO_Init>
  MX_DMA_Init();
 800051a:	f000 fd2f 	bl	8000f7c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800051e:	f000 faaf 	bl	8000a80 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000522:	f000 fa23 	bl	800096c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000526:	f000 fbff 	bl	8000d28 <MX_TIM3_Init>
  MX_TIM4_Init();
 800052a:	f000 fc4b 	bl	8000dc4 <MX_TIM4_Init>
  MX_TIM5_Init();
 800052e:	f000 fccf 	bl	8000ed0 <MX_TIM5_Init>
  MX_TIM2_Init();
 8000532:	f000 fbab 	bl	8000c8c <MX_TIM2_Init>
  MX_TIM1_Init();
 8000536:	f000 faed 	bl	8000b14 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 2);
 800053a:	2202      	movs	r2, #2
 800053c:	49b4      	ldr	r1, [pc, #720]	@ (8000810 <main+0x308>)
 800053e:	48b5      	ldr	r0, [pc, #724]	@ (8000814 <main+0x30c>)
 8000540:	f001 fec4 	bl	80022cc <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000544:	48b4      	ldr	r0, [pc, #720]	@ (8000818 <main+0x310>)
 8000546:	f004 ff7d 	bl	8005444 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 800054a:	48b4      	ldr	r0, [pc, #720]	@ (800081c <main+0x314>)
 800054c:	f004 ff7a 	bl	8005444 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000550:	48b3      	ldr	r0, [pc, #716]	@ (8000820 <main+0x318>)
 8000552:	f004 ffe7 	bl	8005524 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000556:	48b0      	ldr	r0, [pc, #704]	@ (8000818 <main+0x310>)
 8000558:	f004 ffe4 	bl	8005524 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800055c:	2100      	movs	r1, #0
 800055e:	48b1      	ldr	r0, [pc, #708]	@ (8000824 <main+0x31c>)
 8000560:	f005 f8ba 	bl	80056d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000564:	2100      	movs	r1, #0
 8000566:	48ad      	ldr	r0, [pc, #692]	@ (800081c <main+0x314>)
 8000568:	f005 f8b6 	bl	80056d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800056c:	2104      	movs	r1, #4
 800056e:	48ad      	ldr	r0, [pc, #692]	@ (8000824 <main+0x31c>)
 8000570:	f005 f8b2 	bl	80056d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000574:	2104      	movs	r1, #4
 8000576:	48a9      	ldr	r0, [pc, #676]	@ (800081c <main+0x314>)
 8000578:	f005 f8ae 	bl	80056d8 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 800057c:	213c      	movs	r1, #60	@ 0x3c
 800057e:	48aa      	ldr	r0, [pc, #680]	@ (8000828 <main+0x320>)
 8000580:	f005 fa62 	bl	8005a48 <HAL_TIM_Encoder_Start>



  PID.Kp =2;
 8000584:	4ba9      	ldr	r3, [pc, #676]	@ (800082c <main+0x324>)
 8000586:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800058a:	619a      	str	r2, [r3, #24]
  PID.Ki =0;
 800058c:	4ba7      	ldr	r3, [pc, #668]	@ (800082c <main+0x324>)
 800058e:	f04f 0200 	mov.w	r2, #0
 8000592:	61da      	str	r2, [r3, #28]
  PID.Kd = 0;
 8000594:	4ba5      	ldr	r3, [pc, #660]	@ (800082c <main+0x324>)
 8000596:	f04f 0200 	mov.w	r2, #0
 800059a:	621a      	str	r2, [r3, #32]
  set_pos = 0;
 800059c:	4ba4      	ldr	r3, [pc, #656]	@ (8000830 <main+0x328>)
 800059e:	f04f 0200 	mov.w	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
  z = 0;
 80005a4:	4ba3      	ldr	r3, [pc, #652]	@ (8000834 <main+0x32c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	801a      	strh	r2, [r3, #0]
  arm_pid_init_f32(&PID, 0);
 80005aa:	2100      	movs	r1, #0
 80005ac:	489f      	ldr	r0, [pc, #636]	@ (800082c <main+0x324>)
 80005ae:	f007 fe9d 	bl	80082ec <arm_pid_init_f32>
//		  x += ADC_RawRead[(i*2)];
//		  y += ADC_RawRead[(i*2)+1];
//	  }
//
//
	  setADC = ADC_RawRead[1];
 80005b2:	4b97      	ldr	r3, [pc, #604]	@ (8000810 <main+0x308>)
 80005b4:	885b      	ldrh	r3, [r3, #2]
 80005b6:	b21a      	sxth	r2, r3
 80005b8:	4b9f      	ldr	r3, [pc, #636]	@ (8000838 <main+0x330>)
 80005ba:	801a      	strh	r2, [r3, #0]
//	  }

	 // prev_pos = posADC;


	  if(mode == 0){
 80005bc:	4b9f      	ldr	r3, [pc, #636]	@ (800083c <main+0x334>)
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d171      	bne.n	80006a8 <main+0x1a0>
		  pos = x*360/4096;
 80005c4:	4b9e      	ldr	r3, [pc, #632]	@ (8000840 <main+0x338>)
 80005c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005ca:	461a      	mov	r2, r3
 80005cc:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80005d0:	fb02 f303 	mul.w	r3, r2, r3
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	da01      	bge.n	80005dc <main+0xd4>
 80005d8:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80005dc:	131b      	asrs	r3, r3, #12
 80005de:	ee07 3a90 	vmov	s15, r3
 80005e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005e6:	4b97      	ldr	r3, [pc, #604]	@ (8000844 <main+0x33c>)
 80005e8:	edc3 7a00 	vstr	s15, [r3]
		  set_pos = setADC*360/4096;
 80005ec:	4b92      	ldr	r3, [pc, #584]	@ (8000838 <main+0x330>)
 80005ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005f2:	461a      	mov	r2, r3
 80005f4:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80005f8:	fb02 f303 	mul.w	r3, r2, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	da01      	bge.n	8000604 <main+0xfc>
 8000600:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000604:	131b      	asrs	r3, r3, #12
 8000606:	ee07 3a90 	vmov	s15, r3
 800060a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800060e:	4b88      	ldr	r3, [pc, #544]	@ (8000830 <main+0x328>)
 8000610:	edc3 7a00 	vstr	s15, [r3]
		  PID.Kp = 2;
 8000614:	4b85      	ldr	r3, [pc, #532]	@ (800082c <main+0x324>)
 8000616:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800061a:	619a      	str	r2, [r3, #24]
		  Vfeedback = (arm_pid_f32(&PID, set_pos - pos))*32676/360;
 800061c:	4b84      	ldr	r3, [pc, #528]	@ (8000830 <main+0x328>)
 800061e:	ed93 7a00 	vldr	s14, [r3]
 8000622:	4b88      	ldr	r3, [pc, #544]	@ (8000844 <main+0x33c>)
 8000624:	edd3 7a00 	vldr	s15, [r3]
 8000628:	ee77 7a67 	vsub.f32	s15, s14, s15
 800062c:	4b7f      	ldr	r3, [pc, #508]	@ (800082c <main+0x324>)
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	ed93 7a00 	vldr	s14, [r3]
 800063a:	edd7 7a04 	vldr	s15, [r7, #16]
 800063e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	edd3 6a01 	vldr	s13, [r3, #4]
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	edd3 7a03 	vldr	s15, [r3, #12]
 800064e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000652:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	edd3 6a02 	vldr	s13, [r3, #8]
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000662:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000666:	ee37 7a27 	vadd.f32	s14, s14, s15
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000674:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	68da      	ldr	r2, [r3, #12]
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	693a      	ldr	r2, [r7, #16]
 8000684:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	68fa      	ldr	r2, [r7, #12]
 800068a:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800068c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000690:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8000848 <main+0x340>
 8000694:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000698:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 800084c <main+0x344>
 800069c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006a0:	4b6b      	ldr	r3, [pc, #428]	@ (8000850 <main+0x348>)
 80006a2:	edc3 7a00 	vstr	s15, [r3]
 80006a6:	e087      	b.n	80007b8 <main+0x2b0>
	  }
	  else if(mode == 1){
 80006a8:	4b64      	ldr	r3, [pc, #400]	@ (800083c <main+0x334>)
 80006aa:	881b      	ldrh	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d170      	bne.n	8000792 <main+0x28a>
		  pos = posQEI*360/3072;
 80006b0:	4b68      	ldr	r3, [pc, #416]	@ (8000854 <main+0x34c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80006b8:	fb02 f303 	mul.w	r3, r2, r3
 80006bc:	4a66      	ldr	r2, [pc, #408]	@ (8000858 <main+0x350>)
 80006be:	fb82 1203 	smull	r1, r2, r2, r3
 80006c2:	1252      	asrs	r2, r2, #9
 80006c4:	17db      	asrs	r3, r3, #31
 80006c6:	1ad3      	subs	r3, r2, r3
 80006c8:	ee07 3a90 	vmov	s15, r3
 80006cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006d0:	4b5c      	ldr	r3, [pc, #368]	@ (8000844 <main+0x33c>)
 80006d2:	edc3 7a00 	vstr	s15, [r3]
		  set_pos = setADC*360/4096;
 80006d6:	4b58      	ldr	r3, [pc, #352]	@ (8000838 <main+0x330>)
 80006d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006dc:	461a      	mov	r2, r3
 80006de:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80006e2:	fb02 f303 	mul.w	r3, r2, r3
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	da01      	bge.n	80006ee <main+0x1e6>
 80006ea:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80006ee:	131b      	asrs	r3, r3, #12
 80006f0:	ee07 3a90 	vmov	s15, r3
 80006f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006f8:	4b4d      	ldr	r3, [pc, #308]	@ (8000830 <main+0x328>)
 80006fa:	edc3 7a00 	vstr	s15, [r3]
		  PID.Kp = 2;
 80006fe:	4b4b      	ldr	r3, [pc, #300]	@ (800082c <main+0x324>)
 8000700:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000704:	619a      	str	r2, [r3, #24]
		  Vfeedback = (arm_pid_f32(&PID, set_pos - pos))*32676/360;
 8000706:	4b4a      	ldr	r3, [pc, #296]	@ (8000830 <main+0x328>)
 8000708:	ed93 7a00 	vldr	s14, [r3]
 800070c:	4b4d      	ldr	r3, [pc, #308]	@ (8000844 <main+0x33c>)
 800070e:	edd3 7a00 	vldr	s15, [r3]
 8000712:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000716:	4b45      	ldr	r3, [pc, #276]	@ (800082c <main+0x324>)
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	edc7 7a01 	vstr	s15, [r7, #4]
    out = (S->A0 * in) +
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	ed93 7a00 	vldr	s14, [r3]
 8000724:	edd7 7a01 	vldr	s15, [r7, #4]
 8000728:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	edd3 6a01 	vldr	s13, [r3, #4]
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	edd3 7a03 	vldr	s15, [r3, #12]
 8000738:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800073c:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	edd3 6a02 	vldr	s13, [r3, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	edd3 7a04 	vldr	s15, [r3, #16]
 800074c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000750:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800075a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800075e:	edc7 7a00 	vstr	s15, [r7]
    S->state[1] = S->state[0];
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	68da      	ldr	r2, [r3, #12]
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	683a      	ldr	r2, [r7, #0]
 8000774:	615a      	str	r2, [r3, #20]
    return (out);
 8000776:	edd7 7a00 	vldr	s15, [r7]
 800077a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8000848 <main+0x340>
 800077e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000782:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800084c <main+0x344>
 8000786:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800078a:	4b31      	ldr	r3, [pc, #196]	@ (8000850 <main+0x348>)
 800078c:	edc3 7a00 	vstr	s15, [r3]
 8000790:	e012      	b.n	80007b8 <main+0x2b0>
	  }
	  else if(mode == 2){
 8000792:	4b2a      	ldr	r3, [pc, #168]	@ (800083c <main+0x334>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	2b02      	cmp	r3, #2
 8000798:	d10e      	bne.n	80007b8 <main+0x2b0>
		  Vfeedback = rxBuffer[2];
 800079a:	4b30      	ldr	r3, [pc, #192]	@ (800085c <main+0x354>)
 800079c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80007a0:	ee07 3a90 	vmov	s15, r3
 80007a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007a8:	4b29      	ldr	r3, [pc, #164]	@ (8000850 <main+0x348>)
 80007aa:	edc3 7a00 	vstr	s15, [r3]
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007ae:	2120      	movs	r1, #32
 80007b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b4:	f003 fd8c 	bl	80042d0 <HAL_GPIO_TogglePin>
	  }

////////////// SPEED LIMIT //////////////////////////////////////////////////
	  //ensure smooth speed , maximum speed
	  if(Vfeedback > 32676){
 80007b8:	4b25      	ldr	r3, [pc, #148]	@ (8000850 <main+0x348>)
 80007ba:	edd3 7a00 	vldr	s15, [r3]
 80007be:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8000848 <main+0x340>
 80007c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ca:	dd03      	ble.n	80007d4 <main+0x2cc>
		  Vfeedback = 32676;
 80007cc:	4b20      	ldr	r3, [pc, #128]	@ (8000850 <main+0x348>)
 80007ce:	4a24      	ldr	r2, [pc, #144]	@ (8000860 <main+0x358>)
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	e00c      	b.n	80007ee <main+0x2e6>
	  }
	  else if(Vfeedback < -32676){
 80007d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000850 <main+0x348>)
 80007d6:	edd3 7a00 	vldr	s15, [r3]
 80007da:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8000864 <main+0x35c>
 80007de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007e6:	d502      	bpl.n	80007ee <main+0x2e6>
		  Vfeedback = -32676;
 80007e8:	4b19      	ldr	r3, [pc, #100]	@ (8000850 <main+0x348>)
 80007ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000868 <main+0x360>)
 80007ec:	601a      	str	r2, [r3, #0]
	  }
////////////// PWM //////////////////////////////////////////////////////////
	  if(Vfeedback > 0){
 80007ee:	4b18      	ldr	r3, [pc, #96]	@ (8000850 <main+0x348>)
 80007f0:	edd3 7a00 	vldr	s15, [r3]
 80007f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80007f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007fc:	dd3a      	ble.n	8000874 <main+0x36c>
		  PWM1 = Vfeedback;
 80007fe:	4b14      	ldr	r3, [pc, #80]	@ (8000850 <main+0x348>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a1a      	ldr	r2, [pc, #104]	@ (800086c <main+0x364>)
 8000804:	6013      	str	r3, [r2, #0]
		  PWM2 = 0;
 8000806:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <main+0x368>)
 8000808:	f04f 0200 	mov.w	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	e04e      	b.n	80008ae <main+0x3a6>
 8000810:	20000328 	.word	0x20000328
 8000814:	2000002c 	.word	0x2000002c
 8000818:	20000224 	.word	0x20000224
 800081c:	20000270 	.word	0x20000270
 8000820:	200001d8 	.word	0x200001d8
 8000824:	2000018c 	.word	0x2000018c
 8000828:	200002bc 	.word	0x200002bc
 800082c:	2000032c 	.word	0x2000032c
 8000830:	20000314 	.word	0x20000314
 8000834:	2000030c 	.word	0x2000030c
 8000838:	20000352 	.word	0x20000352
 800083c:	20000000 	.word	0x20000000
 8000840:	20000308 	.word	0x20000308
 8000844:	20000310 	.word	0x20000310
 8000848:	46ff4800 	.word	0x46ff4800
 800084c:	43b40000 	.word	0x43b40000
 8000850:	20000358 	.word	0x20000358
 8000854:	20000318 	.word	0x20000318
 8000858:	2aaaaaab 	.word	0x2aaaaaab
 800085c:	2000035c 	.word	0x2000035c
 8000860:	46ff4800 	.word	0x46ff4800
 8000864:	c6ff4800 	.word	0xc6ff4800
 8000868:	c6ff4800 	.word	0xc6ff4800
 800086c:	2000031c 	.word	0x2000031c
 8000870:	20000320 	.word	0x20000320
	  }
	  else if(Vfeedback < 0){
 8000874:	4b13      	ldr	r3, [pc, #76]	@ (80008c4 <main+0x3bc>)
 8000876:	edd3 7a00 	vldr	s15, [r3]
 800087a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800087e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000882:	d50c      	bpl.n	800089e <main+0x396>
		  PWM1 = 0;
 8000884:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <main+0x3c0>)
 8000886:	f04f 0200 	mov.w	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
		  PWM2 = Vfeedback * -1;
 800088c:	4b0d      	ldr	r3, [pc, #52]	@ (80008c4 <main+0x3bc>)
 800088e:	edd3 7a00 	vldr	s15, [r3]
 8000892:	eef1 7a67 	vneg.f32	s15, s15
 8000896:	4b0d      	ldr	r3, [pc, #52]	@ (80008cc <main+0x3c4>)
 8000898:	edc3 7a00 	vstr	s15, [r3]
 800089c:	e007      	b.n	80008ae <main+0x3a6>
	  }
	  else{
		  PWM1 = 0;
 800089e:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <main+0x3c0>)
 80008a0:	f04f 0200 	mov.w	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
		  PWM2 = 0;
 80008a6:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <main+0x3c4>)
 80008a8:	f04f 0200 	mov.w	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
	  }
////////////// MOTOR1 or MOTOR2 /////////////////////////////////////////////
	  if(mode == 1){
 80008ae:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <main+0x3c8>)
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d102      	bne.n	80008bc <main+0x3b4>
		  DriveF();
 80008b6:	f000 fd47 	bl	8001348 <DriveF>
 80008ba:	e67a      	b.n	80005b2 <main+0xaa>
	  }
	  else{
		  DriveC();
 80008bc:	f000 fd70 	bl	80013a0 <DriveC>
	  setADC = ADC_RawRead[1];
 80008c0:	e677      	b.n	80005b2 <main+0xaa>
 80008c2:	bf00      	nop
 80008c4:	20000358 	.word	0x20000358
 80008c8:	2000031c 	.word	0x2000031c
 80008cc:	20000320 	.word	0x20000320
 80008d0:	20000000 	.word	0x20000000

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b094      	sub	sp, #80	@ 0x50
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	f107 0318 	add.w	r3, r7, #24
 80008de:	2238      	movs	r2, #56	@ 0x38
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f007 fd38 	bl	8008358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80008f6:	2000      	movs	r0, #0
 80008f8:	f003 fd1c 	bl	8004334 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008fc:	2302      	movs	r3, #2
 80008fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000900:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000906:	2340      	movs	r3, #64	@ 0x40
 8000908:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090a:	2302      	movs	r3, #2
 800090c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800090e:	2302      	movs	r3, #2
 8000910:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000912:	2304      	movs	r3, #4
 8000914:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000916:	2355      	movs	r3, #85	@ 0x55
 8000918:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800091a:	2302      	movs	r3, #2
 800091c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800091e:	2302      	movs	r3, #2
 8000920:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000922:	2302      	movs	r3, #2
 8000924:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000926:	f107 0318 	add.w	r3, r7, #24
 800092a:	4618      	mov	r0, r3
 800092c:	f003 fdb6 	bl	800449c <HAL_RCC_OscConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000936:	f000 fd5f 	bl	80013f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093a:	230f      	movs	r3, #15
 800093c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093e:	2303      	movs	r3, #3
 8000940:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2104      	movs	r1, #4
 8000952:	4618      	mov	r0, r3
 8000954:	f004 f8b4 	bl	8004ac0 <HAL_RCC_ClockConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800095e:	f000 fd4b 	bl	80013f8 <Error_Handler>
  }
}
 8000962:	bf00      	nop
 8000964:	3750      	adds	r7, #80	@ 0x50
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08c      	sub	sp, #48	@ 0x30
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000972:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2220      	movs	r2, #32
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f007 fce7 	bl	8008358 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800098a:	4b3a      	ldr	r3, [pc, #232]	@ (8000a74 <MX_ADC1_Init+0x108>)
 800098c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000990:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000992:	4b38      	ldr	r3, [pc, #224]	@ (8000a74 <MX_ADC1_Init+0x108>)
 8000994:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000998:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800099a:	4b36      	ldr	r3, [pc, #216]	@ (8000a74 <MX_ADC1_Init+0x108>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009a0:	4b34      	ldr	r3, [pc, #208]	@ (8000a74 <MX_ADC1_Init+0x108>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80009a6:	4b33      	ldr	r3, [pc, #204]	@ (8000a74 <MX_ADC1_Init+0x108>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009ac:	4b31      	ldr	r3, [pc, #196]	@ (8000a74 <MX_ADC1_Init+0x108>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009b2:	4b30      	ldr	r3, [pc, #192]	@ (8000a74 <MX_ADC1_Init+0x108>)
 80009b4:	2204      	movs	r2, #4
 80009b6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000a74 <MX_ADC1_Init+0x108>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009be:	4b2d      	ldr	r3, [pc, #180]	@ (8000a74 <MX_ADC1_Init+0x108>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80009c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000a74 <MX_ADC1_Init+0x108>)
 80009c6:	2202      	movs	r2, #2
 80009c8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000a74 <MX_ADC1_Init+0x108>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80009d2:	4b28      	ldr	r3, [pc, #160]	@ (8000a74 <MX_ADC1_Init+0x108>)
 80009d4:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 80009d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80009da:	4b26      	ldr	r3, [pc, #152]	@ (8000a74 <MX_ADC1_Init+0x108>)
 80009dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009e2:	4b24      	ldr	r3, [pc, #144]	@ (8000a74 <MX_ADC1_Init+0x108>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009ea:	4b22      	ldr	r3, [pc, #136]	@ (8000a74 <MX_ADC1_Init+0x108>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80009f0:	4b20      	ldr	r3, [pc, #128]	@ (8000a74 <MX_ADC1_Init+0x108>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009f8:	481e      	ldr	r0, [pc, #120]	@ (8000a74 <MX_ADC1_Init+0x108>)
 80009fa:	f001 faab 	bl	8001f54 <HAL_ADC_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000a04:	f000 fcf8 	bl	80013f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4818      	ldr	r0, [pc, #96]	@ (8000a74 <MX_ADC1_Init+0x108>)
 8000a14:	f002 fd78 	bl	8003508 <HAL_ADCEx_MultiModeConfigChannel>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000a1e:	f000 fceb 	bl	80013f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a22:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <MX_ADC1_Init+0x10c>)
 8000a24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a26:	2306      	movs	r3, #6
 8000a28:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000a2a:	2307      	movs	r3, #7
 8000a2c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a2e:	237f      	movs	r3, #127	@ 0x7f
 8000a30:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a32:	2304      	movs	r3, #4
 8000a34:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480d      	ldr	r0, [pc, #52]	@ (8000a74 <MX_ADC1_Init+0x108>)
 8000a40:	f001 ffa0 	bl	8002984 <HAL_ADC_ConfigChannel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000a4a:	f000 fcd5 	bl	80013f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a7c <MX_ADC1_Init+0x110>)
 8000a50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a52:	230c      	movs	r3, #12
 8000a54:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4806      	ldr	r0, [pc, #24]	@ (8000a74 <MX_ADC1_Init+0x108>)
 8000a5c:	f001 ff92 	bl	8002984 <HAL_ADC_ConfigChannel>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000a66:	f000 fcc7 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	3730      	adds	r7, #48	@ 0x30
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000002c 	.word	0x2000002c
 8000a78:	04300002 	.word	0x04300002
 8000a7c:	14f00020 	.word	0x14f00020

08000a80 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a84:	4b21      	ldr	r3, [pc, #132]	@ (8000b0c <MX_LPUART1_UART_Init+0x8c>)
 8000a86:	4a22      	ldr	r2, [pc, #136]	@ (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000a88:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000a8a:	4b20      	ldr	r3, [pc, #128]	@ (8000b0c <MX_LPUART1_UART_Init+0x8c>)
 8000a8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a90:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b1e      	ldr	r3, [pc, #120]	@ (8000b0c <MX_LPUART1_UART_Init+0x8c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b1c      	ldr	r3, [pc, #112]	@ (8000b0c <MX_LPUART1_UART_Init+0x8c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b0c <MX_LPUART1_UART_Init+0x8c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <MX_LPUART1_UART_Init+0x8c>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b18      	ldr	r3, [pc, #96]	@ (8000b0c <MX_LPUART1_UART_Init+0x8c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab0:	4b16      	ldr	r3, [pc, #88]	@ (8000b0c <MX_LPUART1_UART_Init+0x8c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab6:	4b15      	ldr	r3, [pc, #84]	@ (8000b0c <MX_LPUART1_UART_Init+0x8c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000abc:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <MX_LPUART1_UART_Init+0x8c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ac2:	4812      	ldr	r0, [pc, #72]	@ (8000b0c <MX_LPUART1_UART_Init+0x8c>)
 8000ac4:	f006 fa00 	bl	8006ec8 <HAL_UART_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ace:	f000 fc93 	bl	80013f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	480d      	ldr	r0, [pc, #52]	@ (8000b0c <MX_LPUART1_UART_Init+0x8c>)
 8000ad6:	f007 fb3e 	bl	8008156 <HAL_UARTEx_SetTxFifoThreshold>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000ae0:	f000 fc8a 	bl	80013f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4809      	ldr	r0, [pc, #36]	@ (8000b0c <MX_LPUART1_UART_Init+0x8c>)
 8000ae8:	f007 fb73 	bl	80081d2 <HAL_UARTEx_SetRxFifoThreshold>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000af2:	f000 fc81 	bl	80013f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	@ (8000b0c <MX_LPUART1_UART_Init+0x8c>)
 8000af8:	f007 faf4 	bl	80080e4 <HAL_UARTEx_DisableFifoMode>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000b02:	f000 fc79 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200000f8 	.word	0x200000f8
 8000b10:	40008000 	.word	0x40008000

08000b14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b09c      	sub	sp, #112	@ 0x70
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b1a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b28:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b34:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
 8000b44:	615a      	str	r2, [r3, #20]
 8000b46:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2234      	movs	r2, #52	@ 0x34
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f007 fc02 	bl	8008358 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b54:	4b4b      	ldr	r3, [pc, #300]	@ (8000c84 <MX_TIM1_Init+0x170>)
 8000b56:	4a4c      	ldr	r2, [pc, #304]	@ (8000c88 <MX_TIM1_Init+0x174>)
 8000b58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8000b5a:	4b4a      	ldr	r3, [pc, #296]	@ (8000c84 <MX_TIM1_Init+0x170>)
 8000b5c:	22a9      	movs	r2, #169	@ 0xa9
 8000b5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b60:	4b48      	ldr	r3, [pc, #288]	@ (8000c84 <MX_TIM1_Init+0x170>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 32675;
 8000b66:	4b47      	ldr	r3, [pc, #284]	@ (8000c84 <MX_TIM1_Init+0x170>)
 8000b68:	f647 72a3 	movw	r2, #32675	@ 0x7fa3
 8000b6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6e:	4b45      	ldr	r3, [pc, #276]	@ (8000c84 <MX_TIM1_Init+0x170>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b74:	4b43      	ldr	r3, [pc, #268]	@ (8000c84 <MX_TIM1_Init+0x170>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7a:	4b42      	ldr	r3, [pc, #264]	@ (8000c84 <MX_TIM1_Init+0x170>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b80:	4840      	ldr	r0, [pc, #256]	@ (8000c84 <MX_TIM1_Init+0x170>)
 8000b82:	f004 fc07 	bl	8005394 <HAL_TIM_Base_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000b8c:	f000 fc34 	bl	80013f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b94:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b96:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4839      	ldr	r0, [pc, #228]	@ (8000c84 <MX_TIM1_Init+0x170>)
 8000b9e:	f005 fa45 	bl	800602c <HAL_TIM_ConfigClockSource>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ba8:	f000 fc26 	bl	80013f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bac:	4835      	ldr	r0, [pc, #212]	@ (8000c84 <MX_TIM1_Init+0x170>)
 8000bae:	f004 fd31 	bl	8005614 <HAL_TIM_PWM_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000bb8:	f000 fc1e 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bc8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000bcc:	4619      	mov	r1, r3
 8000bce:	482d      	ldr	r0, [pc, #180]	@ (8000c84 <MX_TIM1_Init+0x170>)
 8000bd0:	f006 f80a 	bl	8006be8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000bda:	f000 fc0d 	bl	80013f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bde:	2360      	movs	r3, #96	@ 0x60
 8000be0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000be6:	2300      	movs	r3, #0
 8000be8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bea:	2300      	movs	r3, #0
 8000bec:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bfa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000bfe:	2200      	movs	r2, #0
 8000c00:	4619      	mov	r1, r3
 8000c02:	4820      	ldr	r0, [pc, #128]	@ (8000c84 <MX_TIM1_Init+0x170>)
 8000c04:	f005 f8fe 	bl	8005e04 <HAL_TIM_PWM_ConfigChannel>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000c0e:	f000 fbf3 	bl	80013f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c12:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c16:	2204      	movs	r2, #4
 8000c18:	4619      	mov	r1, r3
 8000c1a:	481a      	ldr	r0, [pc, #104]	@ (8000c84 <MX_TIM1_Init+0x170>)
 8000c1c:	f005 f8f2 	bl	8005e04 <HAL_TIM_PWM_ConfigChannel>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000c26:	f000 fbe7 	bl	80013f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c54:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	4619      	mov	r1, r3
 8000c66:	4807      	ldr	r0, [pc, #28]	@ (8000c84 <MX_TIM1_Init+0x170>)
 8000c68:	f006 f854 	bl	8006d14 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8000c72:	f000 fbc1 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c76:	4803      	ldr	r0, [pc, #12]	@ (8000c84 <MX_TIM1_Init+0x170>)
 8000c78:	f000 fdb8 	bl	80017ec <HAL_TIM_MspPostInit>

}
 8000c7c:	bf00      	nop
 8000c7e:	3770      	adds	r7, #112	@ 0x70
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	2000018c 	.word	0x2000018c
 8000c88:	40012c00 	.word	0x40012c00

08000c8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c92:	f107 0310 	add.w	r3, r7, #16
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000caa:	4b1e      	ldr	r3, [pc, #120]	@ (8000d24 <MX_TIM2_Init+0x98>)
 8000cac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cb0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d24 <MX_TIM2_Init+0x98>)
 8000cb4:	22a9      	movs	r2, #169	@ 0xa9
 8000cb6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d24 <MX_TIM2_Init+0x98>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000cbe:	4b19      	ldr	r3, [pc, #100]	@ (8000d24 <MX_TIM2_Init+0x98>)
 8000cc0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cc4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc6:	4b17      	ldr	r3, [pc, #92]	@ (8000d24 <MX_TIM2_Init+0x98>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ccc:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <MX_TIM2_Init+0x98>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cd2:	4814      	ldr	r0, [pc, #80]	@ (8000d24 <MX_TIM2_Init+0x98>)
 8000cd4:	f004 fb5e 	bl	8005394 <HAL_TIM_Base_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000cde:	f000 fb8b 	bl	80013f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ce6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	4619      	mov	r1, r3
 8000cee:	480d      	ldr	r0, [pc, #52]	@ (8000d24 <MX_TIM2_Init+0x98>)
 8000cf0:	f005 f99c 	bl	800602c <HAL_TIM_ConfigClockSource>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000cfa:	f000 fb7d 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cfe:	2320      	movs	r3, #32
 8000d00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4806      	ldr	r0, [pc, #24]	@ (8000d24 <MX_TIM2_Init+0x98>)
 8000d0c:	f005 ff6c 	bl	8006be8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d16:	f000 fb6f 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	3720      	adds	r7, #32
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200001d8 	.word	0x200001d8

08000d28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2e:	f107 0310 	add.w	r3, r7, #16
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d46:	4b1d      	ldr	r3, [pc, #116]	@ (8000dbc <MX_TIM3_Init+0x94>)
 8000d48:	4a1d      	ldr	r2, [pc, #116]	@ (8000dc0 <MX_TIM3_Init+0x98>)
 8000d4a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dbc <MX_TIM3_Init+0x94>)
 8000d4e:	22a9      	movs	r2, #169	@ 0xa9
 8000d50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d52:	4b1a      	ldr	r3, [pc, #104]	@ (8000dbc <MX_TIM3_Init+0x94>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000d58:	4b18      	ldr	r3, [pc, #96]	@ (8000dbc <MX_TIM3_Init+0x94>)
 8000d5a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d60:	4b16      	ldr	r3, [pc, #88]	@ (8000dbc <MX_TIM3_Init+0x94>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d66:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <MX_TIM3_Init+0x94>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d6c:	4813      	ldr	r0, [pc, #76]	@ (8000dbc <MX_TIM3_Init+0x94>)
 8000d6e:	f004 fb11 	bl	8005394 <HAL_TIM_Base_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000d78:	f000 fb3e 	bl	80013f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d82:	f107 0310 	add.w	r3, r7, #16
 8000d86:	4619      	mov	r1, r3
 8000d88:	480c      	ldr	r0, [pc, #48]	@ (8000dbc <MX_TIM3_Init+0x94>)
 8000d8a:	f005 f94f 	bl	800602c <HAL_TIM_ConfigClockSource>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d94:	f000 fb30 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d98:	2320      	movs	r3, #32
 8000d9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	4619      	mov	r1, r3
 8000da4:	4805      	ldr	r0, [pc, #20]	@ (8000dbc <MX_TIM3_Init+0x94>)
 8000da6:	f005 ff1f 	bl	8006be8 <HAL_TIMEx_MasterConfigSynchronization>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000db0:	f000 fb22 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	3720      	adds	r7, #32
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000224 	.word	0x20000224
 8000dc0:	40000400 	.word	0x40000400

08000dc4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08e      	sub	sp, #56	@ 0x38
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de4:	463b      	mov	r3, r7
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]
 8000df2:	615a      	str	r2, [r3, #20]
 8000df4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000df6:	4b34      	ldr	r3, [pc, #208]	@ (8000ec8 <MX_TIM4_Init+0x104>)
 8000df8:	4a34      	ldr	r2, [pc, #208]	@ (8000ecc <MX_TIM4_Init+0x108>)
 8000dfa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8000dfc:	4b32      	ldr	r3, [pc, #200]	@ (8000ec8 <MX_TIM4_Init+0x104>)
 8000dfe:	22a9      	movs	r2, #169	@ 0xa9
 8000e00:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e02:	4b31      	ldr	r3, [pc, #196]	@ (8000ec8 <MX_TIM4_Init+0x104>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 32675;
 8000e08:	4b2f      	ldr	r3, [pc, #188]	@ (8000ec8 <MX_TIM4_Init+0x104>)
 8000e0a:	f647 72a3 	movw	r2, #32675	@ 0x7fa3
 8000e0e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e10:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec8 <MX_TIM4_Init+0x104>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e16:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec8 <MX_TIM4_Init+0x104>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e1c:	482a      	ldr	r0, [pc, #168]	@ (8000ec8 <MX_TIM4_Init+0x104>)
 8000e1e:	f004 fab9 	bl	8005394 <HAL_TIM_Base_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000e28:	f000 fae6 	bl	80013f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e30:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e36:	4619      	mov	r1, r3
 8000e38:	4823      	ldr	r0, [pc, #140]	@ (8000ec8 <MX_TIM4_Init+0x104>)
 8000e3a:	f005 f8f7 	bl	800602c <HAL_TIM_ConfigClockSource>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000e44:	f000 fad8 	bl	80013f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e48:	481f      	ldr	r0, [pc, #124]	@ (8000ec8 <MX_TIM4_Init+0x104>)
 8000e4a:	f004 fbe3 	bl	8005614 <HAL_TIM_PWM_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000e54:	f000 fad0 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	4619      	mov	r1, r3
 8000e66:	4818      	ldr	r0, [pc, #96]	@ (8000ec8 <MX_TIM4_Init+0x104>)
 8000e68:	f005 febe 	bl	8006be8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000e72:	f000 fac1 	bl	80013f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e76:	2360      	movs	r3, #96	@ 0x60
 8000e78:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8000e7a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e7e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e88:	463b      	mov	r3, r7
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	480e      	ldr	r0, [pc, #56]	@ (8000ec8 <MX_TIM4_Init+0x104>)
 8000e90:	f004 ffb8 	bl	8005e04 <HAL_TIM_PWM_ConfigChannel>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000e9a:	f000 faad 	bl	80013f8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4807      	ldr	r0, [pc, #28]	@ (8000ec8 <MX_TIM4_Init+0x104>)
 8000eaa:	f004 ffab 	bl	8005e04 <HAL_TIM_PWM_ConfigChannel>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8000eb4:	f000 faa0 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000eb8:	4803      	ldr	r0, [pc, #12]	@ (8000ec8 <MX_TIM4_Init+0x104>)
 8000eba:	f000 fc97 	bl	80017ec <HAL_TIM_MspPostInit>

}
 8000ebe:	bf00      	nop
 8000ec0:	3738      	adds	r7, #56	@ 0x38
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000270 	.word	0x20000270
 8000ecc:	40000800 	.word	0x40000800

08000ed0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08c      	sub	sp, #48	@ 0x30
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	2224      	movs	r2, #36	@ 0x24
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f007 fa3a 	bl	8008358 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000eee:	4b21      	ldr	r3, [pc, #132]	@ (8000f74 <MX_TIM5_Init+0xa4>)
 8000ef0:	4a21      	ldr	r2, [pc, #132]	@ (8000f78 <MX_TIM5_Init+0xa8>)
 8000ef2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f74 <MX_TIM5_Init+0xa4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efa:	4b1e      	ldr	r3, [pc, #120]	@ (8000f74 <MX_TIM5_Init+0xa4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000f00:	4b1c      	ldr	r3, [pc, #112]	@ (8000f74 <MX_TIM5_Init+0xa4>)
 8000f02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f06:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f08:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <MX_TIM5_Init+0xa4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0e:	4b19      	ldr	r3, [pc, #100]	@ (8000f74 <MX_TIM5_Init+0xa4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f14:	2303      	movs	r3, #3
 8000f16:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	480d      	ldr	r0, [pc, #52]	@ (8000f74 <MX_TIM5_Init+0xa4>)
 8000f40:	f004 fcdc 	bl	80058fc <HAL_TIM_Encoder_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000f4a:	f000 fa55 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f56:	463b      	mov	r3, r7
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4806      	ldr	r0, [pc, #24]	@ (8000f74 <MX_TIM5_Init+0xa4>)
 8000f5c:	f005 fe44 	bl	8006be8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000f66:	f000 fa47 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	3730      	adds	r7, #48	@ 0x30
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200002bc 	.word	0x200002bc
 8000f78:	40000c00 	.word	0x40000c00

08000f7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f82:	4b12      	ldr	r3, [pc, #72]	@ (8000fcc <MX_DMA_Init+0x50>)
 8000f84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f86:	4a11      	ldr	r2, [pc, #68]	@ (8000fcc <MX_DMA_Init+0x50>)
 8000f88:	f043 0304 	orr.w	r3, r3, #4
 8000f8c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fcc <MX_DMA_Init+0x50>)
 8000f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f92:	f003 0304 	and.w	r3, r3, #4
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <MX_DMA_Init+0x50>)
 8000f9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f9e:	4a0b      	ldr	r2, [pc, #44]	@ (8000fcc <MX_DMA_Init+0x50>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fa6:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <MX_DMA_Init+0x50>)
 8000fa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	200b      	movs	r0, #11
 8000fb8:	f002 fc89 	bl	80038ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fbc:	200b      	movs	r0, #11
 8000fbe:	f002 fca0 	bl	8003902 <HAL_NVIC_EnableIRQ>

}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	@ 0x28
 8000fd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	4b39      	ldr	r3, [pc, #228]	@ (80010cc <MX_GPIO_Init+0xfc>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fea:	4a38      	ldr	r2, [pc, #224]	@ (80010cc <MX_GPIO_Init+0xfc>)
 8000fec:	f043 0304 	orr.w	r3, r3, #4
 8000ff0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ff2:	4b36      	ldr	r3, [pc, #216]	@ (80010cc <MX_GPIO_Init+0xfc>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ffe:	4b33      	ldr	r3, [pc, #204]	@ (80010cc <MX_GPIO_Init+0xfc>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001002:	4a32      	ldr	r2, [pc, #200]	@ (80010cc <MX_GPIO_Init+0xfc>)
 8001004:	f043 0320 	orr.w	r3, r3, #32
 8001008:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800100a:	4b30      	ldr	r3, [pc, #192]	@ (80010cc <MX_GPIO_Init+0xfc>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100e:	f003 0320 	and.w	r3, r3, #32
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	4b2d      	ldr	r3, [pc, #180]	@ (80010cc <MX_GPIO_Init+0xfc>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101a:	4a2c      	ldr	r2, [pc, #176]	@ (80010cc <MX_GPIO_Init+0xfc>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001022:	4b2a      	ldr	r3, [pc, #168]	@ (80010cc <MX_GPIO_Init+0xfc>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	4b27      	ldr	r3, [pc, #156]	@ (80010cc <MX_GPIO_Init+0xfc>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001032:	4a26      	ldr	r2, [pc, #152]	@ (80010cc <MX_GPIO_Init+0xfc>)
 8001034:	f043 0302 	orr.w	r3, r3, #2
 8001038:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800103a:	4b24      	ldr	r3, [pc, #144]	@ (80010cc <MX_GPIO_Init+0xfc>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	2130      	movs	r1, #48	@ 0x30
 800104a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800104e:	f003 f927 	bl	80042a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2101      	movs	r1, #1
 8001056:	481e      	ldr	r0, [pc, #120]	@ (80010d0 <MX_GPIO_Init+0x100>)
 8001058:	f003 f922 	bl	80042a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800105c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001062:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	4818      	ldr	r0, [pc, #96]	@ (80010d4 <MX_GPIO_Init+0x104>)
 8001074:	f002 ff92 	bl	8003f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8001078:	2330      	movs	r3, #48	@ 0x30
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107c:	2301      	movs	r3, #1
 800107e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001092:	f002 ff83 	bl	8003f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001096:	2301      	movs	r3, #1
 8001098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109a:	2301      	movs	r3, #1
 800109c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	4808      	ldr	r0, [pc, #32]	@ (80010d0 <MX_GPIO_Init+0x100>)
 80010ae:	f002 ff75 	bl	8003f9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	2028      	movs	r0, #40	@ 0x28
 80010b8:	f002 fc09 	bl	80038ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010bc:	2028      	movs	r0, #40	@ 0x28
 80010be:	f002 fc20 	bl	8003902 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010c2:	bf00      	nop
 80010c4:	3728      	adds	r7, #40	@ 0x28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	48000400 	.word	0x48000400
 80010d4:	48000800 	.word	0x48000800

080010d8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{ //B1 button
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13) {
 80010e2:	88fb      	ldrh	r3, [r7, #6]
 80010e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010e8:	d112      	bne.n	8001110 <HAL_GPIO_EXTI_Callback+0x38>
        // Blue button interrupt occurred
        // Your code here
    	mode = mode + 1;
 80010ea:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <HAL_GPIO_EXTI_Callback+0x44>)
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	3301      	adds	r3, #1
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <HAL_GPIO_EXTI_Callback+0x44>)
 80010f4:	801a      	strh	r2, [r3, #0]
    	mode = mode % 3;
 80010f6:	4b09      	ldr	r3, [pc, #36]	@ (800111c <HAL_GPIO_EXTI_Callback+0x44>)
 80010f8:	881a      	ldrh	r2, [r3, #0]
 80010fa:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <HAL_GPIO_EXTI_Callback+0x48>)
 80010fc:	fba3 1302 	umull	r1, r3, r3, r2
 8001100:	0859      	lsrs	r1, r3, #1
 8001102:	460b      	mov	r3, r1
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	440b      	add	r3, r1
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	b29a      	uxth	r2, r3
 800110c:	4b03      	ldr	r3, [pc, #12]	@ (800111c <HAL_GPIO_EXTI_Callback+0x44>)
 800110e:	801a      	strh	r2, [r3, #0]
    }
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	20000000 	.word	0x20000000
 8001120:	aaaaaaab 	.word	0xaaaaaaab

08001124 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // Input reading
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if (htim == &htim2 )
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a74      	ldr	r2, [pc, #464]	@ (8001300 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001130:	4293      	cmp	r3, r2
 8001132:	f040 80df 	bne.w	80012f4 <HAL_TIM_PeriodElapsedCallback+0x1d0>
  {

	  if (mode ==2) {
 8001136:	4b73      	ldr	r3, [pc, #460]	@ (8001304 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d127      	bne.n	800118e <HAL_TIM_PeriodElapsedCallback+0x6a>
		  a = 5;
 800113e:	4b72      	ldr	r3, [pc, #456]	@ (8001308 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001140:	2205      	movs	r2, #5
 8001142:	701a      	strb	r2, [r3, #0]
		  ADCst = (uint8_t)(ADC_RawRead[1] & 0xFF);
 8001144:	4b71      	ldr	r3, [pc, #452]	@ (800130c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001146:	885b      	ldrh	r3, [r3, #2]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4b71      	ldr	r3, [pc, #452]	@ (8001310 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800114c:	701a      	strb	r2, [r3, #0]
		  ADCnd = (uint8_t)((ADC_RawRead[1] >> 8) & 0xFF);
 800114e:	4b6f      	ldr	r3, [pc, #444]	@ (800130c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001150:	885b      	ldrh	r3, [r3, #2]
 8001152:	0a1b      	lsrs	r3, r3, #8
 8001154:	b29b      	uxth	r3, r3
 8001156:	b2da      	uxtb	r2, r3
 8001158:	4b6e      	ldr	r3, [pc, #440]	@ (8001314 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800115a:	701a      	strb	r2, [r3, #0]
		  txBuffer[0] = 69;
 800115c:	4b6e      	ldr	r3, [pc, #440]	@ (8001318 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800115e:	2245      	movs	r2, #69	@ 0x45
 8001160:	701a      	strb	r2, [r3, #0]
		  txBuffer[1] = ADCst ;
 8001162:	4b6b      	ldr	r3, [pc, #428]	@ (8001310 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001164:	781a      	ldrb	r2, [r3, #0]
 8001166:	4b6c      	ldr	r3, [pc, #432]	@ (8001318 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001168:	705a      	strb	r2, [r3, #1]
		  txBuffer[2] = ADCnd ;
 800116a:	4b6a      	ldr	r3, [pc, #424]	@ (8001314 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800116c:	781a      	ldrb	r2, [r3, #0]
 800116e:	4b6a      	ldr	r3, [pc, #424]	@ (8001318 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001170:	709a      	strb	r2, [r3, #2]
		  txBuffer[3] = '\n';
 8001172:	4b69      	ldr	r3, [pc, #420]	@ (8001318 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001174:	220a      	movs	r2, #10
 8001176:	70da      	strb	r2, [r3, #3]
//		  HAL_UART_Transmit(&hlpuart1, txBuffer, 4, 10);
//		  HAL_UART_Receive(&hlpuart1, rxBuffer, 4, 10);
		  rxBuffer[2] = (rxBuffer[0]-69)/256;
 8001178:	4b68      	ldr	r3, [pc, #416]	@ (800131c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800117a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800117e:	3b45      	subs	r3, #69	@ 0x45
 8001180:	2b00      	cmp	r3, #0
 8001182:	da00      	bge.n	8001186 <HAL_TIM_PeriodElapsedCallback+0x62>
 8001184:	33ff      	adds	r3, #255	@ 0xff
 8001186:	121b      	asrs	r3, r3, #8
 8001188:	b21a      	sxth	r2, r3
 800118a:	4b64      	ldr	r3, [pc, #400]	@ (800131c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800118c:	809a      	strh	r2, [r3, #4]
	  }
	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim5);
 800118e:	4b64      	ldr	r3, [pc, #400]	@ (8001320 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001194:	ee07 3a90 	vmov	s15, r3
 8001198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800119c:	4b61      	ldr	r3, [pc, #388]	@ (8001324 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800119e:	edc3 7a00 	vstr	s15, [r3]
	  //spd =  QEIReadRaw * 1000 / 250 * 8;
	  if(QEIReadRaw > 32678)
 80011a2:	4b60      	ldr	r3, [pc, #384]	@ (8001324 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8001328 <HAL_TIM_PeriodElapsedCallback+0x204>
 80011ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b4:	dd18      	ble.n	80011e8 <HAL_TIM_PeriodElapsedCallback+0xc4>
	  {
		  posQEI -= (65536-QEIReadRaw);
 80011b6:	4b5d      	ldr	r3, [pc, #372]	@ (800132c <HAL_TIM_PeriodElapsedCallback+0x208>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011c2:	4b58      	ldr	r3, [pc, #352]	@ (8001324 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80011c4:	edd3 7a00 	vldr	s15, [r3]
 80011c8:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8001330 <HAL_TIM_PeriodElapsedCallback+0x20c>
 80011cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80011d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d8:	ee17 2a90 	vmov	r2, s15
 80011dc:	4b53      	ldr	r3, [pc, #332]	@ (800132c <HAL_TIM_PeriodElapsedCallback+0x208>)
 80011de:	601a      	str	r2, [r3, #0]
		  z = 1;
 80011e0:	4b54      	ldr	r3, [pc, #336]	@ (8001334 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	801a      	strh	r2, [r3, #0]
 80011e6:	e013      	b.n	8001210 <HAL_TIM_PeriodElapsedCallback+0xec>
	  }
	  else
	  {
		  posQEI += QEIReadRaw;
 80011e8:	4b50      	ldr	r3, [pc, #320]	@ (800132c <HAL_TIM_PeriodElapsedCallback+0x208>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001324 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80011f6:	edd3 7a00 	vldr	s15, [r3]
 80011fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001202:	ee17 2a90 	vmov	r2, s15
 8001206:	4b49      	ldr	r3, [pc, #292]	@ (800132c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001208:	601a      	str	r2, [r3, #0]
		  z = 2;
 800120a:	4b4a      	ldr	r3, [pc, #296]	@ (8001334 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800120c:	2202      	movs	r2, #2
 800120e:	801a      	strh	r2, [r3, #0]
	  }
	  __HAL_TIM_SET_COUNTER(&htim5, 0);
 8001210:	4b43      	ldr	r3, [pc, #268]	@ (8001320 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2200      	movs	r2, #0
 8001216:	625a      	str	r2, [r3, #36]	@ 0x24

	  posADC = ADC_RawRead[0];
 8001218:	4b3c      	ldr	r3, [pc, #240]	@ (800130c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	b21a      	sxth	r2, r3
 800121e:	4b46      	ldr	r3, [pc, #280]	@ (8001338 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001220:	801a      	strh	r2, [r3, #0]
	  if(posADC-prev_pos < -2048){ //forward callback
 8001222:	4b45      	ldr	r3, [pc, #276]	@ (8001338 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001224:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001228:	461a      	mov	r2, r3
 800122a:	4b44      	ldr	r3, [pc, #272]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0x218>)
 800122c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 8001236:	da16      	bge.n	8001266 <HAL_TIM_PeriodElapsedCallback+0x142>
		  x += (4096+(posADC-prev_pos));
 8001238:	4b3f      	ldr	r3, [pc, #252]	@ (8001338 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800123a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123e:	b29a      	uxth	r2, r3
 8001240:	4b3e      	ldr	r3, [pc, #248]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001242:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001246:	b29b      	uxth	r3, r3
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	b29a      	uxth	r2, r3
 800124c:	4b3c      	ldr	r3, [pc, #240]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800124e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001252:	b29b      	uxth	r3, r3
 8001254:	4413      	add	r3, r2
 8001256:	b29b      	uxth	r3, r3
 8001258:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800125c:	b29b      	uxth	r3, r3
 800125e:	b21a      	sxth	r2, r3
 8001260:	4b37      	ldr	r3, [pc, #220]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001262:	801a      	strh	r2, [r3, #0]
 8001264:	e034      	b.n	80012d0 <HAL_TIM_PeriodElapsedCallback+0x1ac>
	  	  }
	  	  else if(posADC-prev_pos > 2048){ //reverse callback
 8001266:	4b34      	ldr	r3, [pc, #208]	@ (8001338 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001268:	f9b3 3000 	ldrsh.w	r3, [r3]
 800126c:	461a      	mov	r2, r3
 800126e:	4b33      	ldr	r3, [pc, #204]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001270:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800127a:	dd16      	ble.n	80012aa <HAL_TIM_PeriodElapsedCallback+0x186>
	  		  x -= (4096-(posADC-prev_pos));
 800127c:	4b2e      	ldr	r3, [pc, #184]	@ (8001338 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800127e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001282:	b29a      	uxth	r2, r3
 8001284:	4b2d      	ldr	r3, [pc, #180]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001286:	f9b3 3000 	ldrsh.w	r3, [r3]
 800128a:	b29b      	uxth	r3, r3
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	b29a      	uxth	r2, r3
 8001290:	4b2b      	ldr	r3, [pc, #172]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001292:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001296:	b29b      	uxth	r3, r3
 8001298:	4413      	add	r3, r2
 800129a:	b29b      	uxth	r3, r3
 800129c:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	4b26      	ldr	r3, [pc, #152]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80012a6:	801a      	strh	r2, [r3, #0]
 80012a8:	e012      	b.n	80012d0 <HAL_TIM_PeriodElapsedCallback+0x1ac>
	  	  }
	  	  else{
	  		  x += posADC-prev_pos;
 80012aa:	4b23      	ldr	r3, [pc, #140]	@ (8001338 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80012ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	4b22      	ldr	r3, [pc, #136]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80012b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	b29a      	uxth	r2, r3
 80012be:	4b20      	ldr	r3, [pc, #128]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80012c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	4413      	add	r3, r2
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	b21a      	sxth	r2, r3
 80012cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80012ce:	801a      	strh	r2, [r3, #0]
	  	  }
	  y = posADC-prev_pos;
 80012d0:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80012d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	4b18      	ldr	r3, [pc, #96]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80012da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80012e8:	801a      	strh	r2, [r3, #0]
	  	  prev_pos = posADC;
 80012ea:	4b13      	ldr	r3, [pc, #76]	@ (8001338 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80012ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012f0:	4b12      	ldr	r3, [pc, #72]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80012f2:	801a      	strh	r2, [r3, #0]
  }
//////////////////////////////UART//////////////////////////
  if(htim == &htim3)
  {
  }
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	200001d8 	.word	0x200001d8
 8001304:	20000000 	.word	0x20000000
 8001308:	20000364 	.word	0x20000364
 800130c:	20000328 	.word	0x20000328
 8001310:	20000365 	.word	0x20000365
 8001314:	20000366 	.word	0x20000366
 8001318:	20000368 	.word	0x20000368
 800131c:	2000035c 	.word	0x2000035c
 8001320:	200002bc 	.word	0x200002bc
 8001324:	20000324 	.word	0x20000324
 8001328:	46ff4c00 	.word	0x46ff4c00
 800132c:	20000318 	.word	0x20000318
 8001330:	47800000 	.word	0x47800000
 8001334:	2000030c 	.word	0x2000030c
 8001338:	20000350 	.word	0x20000350
 800133c:	20000354 	.word	0x20000354
 8001340:	20000308 	.word	0x20000308
 8001344:	2000030a 	.word	0x2000030a

08001348 <DriveF>:

void DriveF(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 800134c:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <DriveF+0x48>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2200      	movs	r2, #0
 8001352:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001354:	4b0f      	ldr	r3, [pc, #60]	@ (8001394 <DriveF+0x4c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2200      	movs	r2, #0
 800135a:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM1);
 800135c:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <DriveF+0x50>)
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <DriveF+0x48>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800136a:	ee17 2a90 	vmov	r2, s15
 800136e:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM2);
 8001370:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <DriveF+0x54>)
 8001372:	edd3 7a00 	vldr	s15, [r3]
 8001376:	4b07      	ldr	r3, [pc, #28]	@ (8001394 <DriveF+0x4c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800137e:	ee17 2a90 	vmov	r2, s15
 8001382:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000270 	.word	0x20000270
 8001394:	2000018c 	.word	0x2000018c
 8001398:	2000031c 	.word	0x2000031c
 800139c:	20000320 	.word	0x20000320

080013a0 <DriveC>:
void DriveC(void){
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80013a4:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <DriveC+0x48>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2200      	movs	r2, #0
 80013aa:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80013ac:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <DriveC+0x4c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2200      	movs	r2, #0
 80013b2:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, PWM1);
 80013b4:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <DriveC+0x50>)
 80013b6:	edd3 7a00 	vldr	s15, [r3]
 80013ba:	4b0b      	ldr	r3, [pc, #44]	@ (80013e8 <DriveC+0x48>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013c2:	ee17 2a90 	vmov	r2, s15
 80013c6:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM2);
 80013c8:	4b0a      	ldr	r3, [pc, #40]	@ (80013f4 <DriveC+0x54>)
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	4b07      	ldr	r3, [pc, #28]	@ (80013ec <DriveC+0x4c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013d6:	ee17 2a90 	vmov	r2, s15
 80013da:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000270 	.word	0x20000270
 80013ec:	2000018c 	.word	0x2000018c
 80013f0:	2000031c 	.word	0x2000031c
 80013f4:	20000320 	.word	0x20000320

080013f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fc:	b672      	cpsid	i
}
 80013fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <Error_Handler+0x8>

08001404 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	4b0f      	ldr	r3, [pc, #60]	@ (8001448 <HAL_MspInit+0x44>)
 800140c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800140e:	4a0e      	ldr	r2, [pc, #56]	@ (8001448 <HAL_MspInit+0x44>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6613      	str	r3, [r2, #96]	@ 0x60
 8001416:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <HAL_MspInit+0x44>)
 8001418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <HAL_MspInit+0x44>)
 8001424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001426:	4a08      	ldr	r2, [pc, #32]	@ (8001448 <HAL_MspInit+0x44>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800142c:	6593      	str	r3, [r2, #88]	@ 0x58
 800142e:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <HAL_MspInit+0x44>)
 8001430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800143a:	f003 f81f 	bl	800447c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40021000 	.word	0x40021000

0800144c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b0a0      	sub	sp, #128	@ 0x80
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001464:	f107 0318 	add.w	r3, r7, #24
 8001468:	2254      	movs	r2, #84	@ 0x54
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f006 ff73 	bl	8008358 <memset>
  if(hadc->Instance==ADC1)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800147a:	f040 8081 	bne.w	8001580 <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800147e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001482:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001484:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001488:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800148a:	f107 0318 	add.w	r3, r7, #24
 800148e:	4618      	mov	r0, r3
 8001490:	f003 fd32 	bl	8004ef8 <HAL_RCCEx_PeriphCLKConfig>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800149a:	f7ff ffad 	bl	80013f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800149e:	4b3a      	ldr	r3, [pc, #232]	@ (8001588 <HAL_ADC_MspInit+0x13c>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a2:	4a39      	ldr	r2, [pc, #228]	@ (8001588 <HAL_ADC_MspInit+0x13c>)
 80014a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014aa:	4b37      	ldr	r3, [pc, #220]	@ (8001588 <HAL_ADC_MspInit+0x13c>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	4b34      	ldr	r3, [pc, #208]	@ (8001588 <HAL_ADC_MspInit+0x13c>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ba:	4a33      	ldr	r2, [pc, #204]	@ (8001588 <HAL_ADC_MspInit+0x13c>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014c2:	4b31      	ldr	r3, [pc, #196]	@ (8001588 <HAL_ADC_MspInit+0x13c>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001588 <HAL_ADC_MspInit+0x13c>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d2:	4a2d      	ldr	r2, [pc, #180]	@ (8001588 <HAL_ADC_MspInit+0x13c>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014da:	4b2b      	ldr	r3, [pc, #172]	@ (8001588 <HAL_ADC_MspInit+0x13c>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014e6:	2301      	movs	r3, #1
 80014e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ea:	2303      	movs	r3, #3
 80014ec:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80014f6:	4619      	mov	r1, r3
 80014f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014fc:	f002 fd4e 	bl	8003f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001500:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001504:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001506:	2303      	movs	r3, #3
 8001508:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001512:	4619      	mov	r1, r3
 8001514:	481d      	ldr	r0, [pc, #116]	@ (800158c <HAL_ADC_MspInit+0x140>)
 8001516:	f002 fd41 	bl	8003f9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800151a:	4b1d      	ldr	r3, [pc, #116]	@ (8001590 <HAL_ADC_MspInit+0x144>)
 800151c:	4a1d      	ldr	r2, [pc, #116]	@ (8001594 <HAL_ADC_MspInit+0x148>)
 800151e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001520:	4b1b      	ldr	r3, [pc, #108]	@ (8001590 <HAL_ADC_MspInit+0x144>)
 8001522:	2205      	movs	r2, #5
 8001524:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001526:	4b1a      	ldr	r3, [pc, #104]	@ (8001590 <HAL_ADC_MspInit+0x144>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800152c:	4b18      	ldr	r3, [pc, #96]	@ (8001590 <HAL_ADC_MspInit+0x144>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001532:	4b17      	ldr	r3, [pc, #92]	@ (8001590 <HAL_ADC_MspInit+0x144>)
 8001534:	2280      	movs	r2, #128	@ 0x80
 8001536:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001538:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <HAL_ADC_MspInit+0x144>)
 800153a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800153e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001540:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <HAL_ADC_MspInit+0x144>)
 8001542:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001546:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001548:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <HAL_ADC_MspInit+0x144>)
 800154a:	2220      	movs	r2, #32
 800154c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800154e:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <HAL_ADC_MspInit+0x144>)
 8001550:	2200      	movs	r2, #0
 8001552:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001554:	480e      	ldr	r0, [pc, #56]	@ (8001590 <HAL_ADC_MspInit+0x144>)
 8001556:	f002 f9ef 	bl	8003938 <HAL_DMA_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_ADC_MspInit+0x118>
    {
      Error_Handler();
 8001560:	f7ff ff4a 	bl	80013f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a0a      	ldr	r2, [pc, #40]	@ (8001590 <HAL_ADC_MspInit+0x144>)
 8001568:	655a      	str	r2, [r3, #84]	@ 0x54
 800156a:	4a09      	ldr	r2, [pc, #36]	@ (8001590 <HAL_ADC_MspInit+0x144>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001570:	2200      	movs	r2, #0
 8001572:	2100      	movs	r1, #0
 8001574:	2012      	movs	r0, #18
 8001576:	f002 f9aa 	bl	80038ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800157a:	2012      	movs	r0, #18
 800157c:	f002 f9c1 	bl	8003902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001580:	bf00      	nop
 8001582:	3780      	adds	r7, #128	@ 0x80
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40021000 	.word	0x40021000
 800158c:	48000400 	.word	0x48000400
 8001590:	20000098 	.word	0x20000098
 8001594:	40020008 	.word	0x40020008

08001598 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b09e      	sub	sp, #120	@ 0x78
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	2254      	movs	r2, #84	@ 0x54
 80015b6:	2100      	movs	r1, #0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f006 fecd 	bl	8008358 <memset>
  if(huart->Instance==LPUART1)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a23      	ldr	r2, [pc, #140]	@ (8001650 <HAL_UART_MspInit+0xb8>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d13e      	bne.n	8001646 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80015c8:	2320      	movs	r3, #32
 80015ca:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d0:	f107 0310 	add.w	r3, r7, #16
 80015d4:	4618      	mov	r0, r3
 80015d6:	f003 fc8f 	bl	8004ef8 <HAL_RCCEx_PeriphCLKConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015e0:	f7ff ff0a 	bl	80013f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80015e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <HAL_UART_MspInit+0xbc>)
 80015e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001654 <HAL_UART_MspInit+0xbc>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80015f0:	4b18      	ldr	r3, [pc, #96]	@ (8001654 <HAL_UART_MspInit+0xbc>)
 80015f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fc:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <HAL_UART_MspInit+0xbc>)
 80015fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001600:	4a14      	ldr	r2, [pc, #80]	@ (8001654 <HAL_UART_MspInit+0xbc>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001608:	4b12      	ldr	r3, [pc, #72]	@ (8001654 <HAL_UART_MspInit+0xbc>)
 800160a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001614:	230c      	movs	r3, #12
 8001616:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001624:	230c      	movs	r3, #12
 8001626:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800162c:	4619      	mov	r1, r3
 800162e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001632:	f002 fcb3 	bl	8003f9c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	205b      	movs	r0, #91	@ 0x5b
 800163c:	f002 f947 	bl	80038ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001640:	205b      	movs	r0, #91	@ 0x5b
 8001642:	f002 f95e 	bl	8003902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001646:	bf00      	nop
 8001648:	3778      	adds	r7, #120	@ 0x78
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40008000 	.word	0x40008000
 8001654:	40021000 	.word	0x40021000

08001658 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a2c      	ldr	r2, [pc, #176]	@ (8001718 <HAL_TIM_Base_MspInit+0xc0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d10c      	bne.n	8001684 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800166a:	4b2c      	ldr	r3, [pc, #176]	@ (800171c <HAL_TIM_Base_MspInit+0xc4>)
 800166c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800166e:	4a2b      	ldr	r2, [pc, #172]	@ (800171c <HAL_TIM_Base_MspInit+0xc4>)
 8001670:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001674:	6613      	str	r3, [r2, #96]	@ 0x60
 8001676:	4b29      	ldr	r3, [pc, #164]	@ (800171c <HAL_TIM_Base_MspInit+0xc4>)
 8001678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800167a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001682:	e044      	b.n	800170e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800168c:	d114      	bne.n	80016b8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800168e:	4b23      	ldr	r3, [pc, #140]	@ (800171c <HAL_TIM_Base_MspInit+0xc4>)
 8001690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001692:	4a22      	ldr	r2, [pc, #136]	@ (800171c <HAL_TIM_Base_MspInit+0xc4>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6593      	str	r3, [r2, #88]	@ 0x58
 800169a:	4b20      	ldr	r3, [pc, #128]	@ (800171c <HAL_TIM_Base_MspInit+0xc4>)
 800169c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	201c      	movs	r0, #28
 80016ac:	f002 f90f 	bl	80038ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016b0:	201c      	movs	r0, #28
 80016b2:	f002 f926 	bl	8003902 <HAL_NVIC_EnableIRQ>
}
 80016b6:	e02a      	b.n	800170e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a18      	ldr	r2, [pc, #96]	@ (8001720 <HAL_TIM_Base_MspInit+0xc8>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d114      	bne.n	80016ec <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016c2:	4b16      	ldr	r3, [pc, #88]	@ (800171c <HAL_TIM_Base_MspInit+0xc4>)
 80016c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c6:	4a15      	ldr	r2, [pc, #84]	@ (800171c <HAL_TIM_Base_MspInit+0xc4>)
 80016c8:	f043 0302 	orr.w	r3, r3, #2
 80016cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ce:	4b13      	ldr	r3, [pc, #76]	@ (800171c <HAL_TIM_Base_MspInit+0xc4>)
 80016d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2100      	movs	r1, #0
 80016de:	201d      	movs	r0, #29
 80016e0:	f002 f8f5 	bl	80038ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016e4:	201d      	movs	r0, #29
 80016e6:	f002 f90c 	bl	8003902 <HAL_NVIC_EnableIRQ>
}
 80016ea:	e010      	b.n	800170e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001724 <HAL_TIM_Base_MspInit+0xcc>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d10b      	bne.n	800170e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016f6:	4b09      	ldr	r3, [pc, #36]	@ (800171c <HAL_TIM_Base_MspInit+0xc4>)
 80016f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fa:	4a08      	ldr	r2, [pc, #32]	@ (800171c <HAL_TIM_Base_MspInit+0xc4>)
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	6593      	str	r3, [r2, #88]	@ 0x58
 8001702:	4b06      	ldr	r3, [pc, #24]	@ (800171c <HAL_TIM_Base_MspInit+0xc4>)
 8001704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001706:	f003 0304 	and.w	r3, r3, #4
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
}
 800170e:	bf00      	nop
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40012c00 	.word	0x40012c00
 800171c:	40021000 	.word	0x40021000
 8001720:	40000400 	.word	0x40000400
 8001724:	40000800 	.word	0x40000800

08001728 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	@ 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a25      	ldr	r2, [pc, #148]	@ (80017dc <HAL_TIM_Encoder_MspInit+0xb4>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d144      	bne.n	80017d4 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800174a:	4b25      	ldr	r3, [pc, #148]	@ (80017e0 <HAL_TIM_Encoder_MspInit+0xb8>)
 800174c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174e:	4a24      	ldr	r2, [pc, #144]	@ (80017e0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	6593      	str	r3, [r2, #88]	@ 0x58
 8001756:	4b22      	ldr	r3, [pc, #136]	@ (80017e0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001762:	4b1f      	ldr	r3, [pc, #124]	@ (80017e0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001766:	4a1e      	ldr	r2, [pc, #120]	@ (80017e0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001768:	f043 0302 	orr.w	r3, r3, #2
 800176c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800176e:	4b1c      	ldr	r3, [pc, #112]	@ (80017e0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800177a:	4b19      	ldr	r3, [pc, #100]	@ (80017e0 <HAL_TIM_Encoder_MspInit+0xb8>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800177e:	4a18      	ldr	r2, [pc, #96]	@ (80017e0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001786:	4b16      	ldr	r3, [pc, #88]	@ (80017e0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PB2     ------> TIM5_CH1
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001792:	2304      	movs	r3, #4
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80017a2:	2302      	movs	r3, #2
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	480d      	ldr	r0, [pc, #52]	@ (80017e4 <HAL_TIM_Encoder_MspInit+0xbc>)
 80017ae:	f002 fbf5 	bl	8003f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	2300      	movs	r3, #0
 80017c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 80017c4:	2301      	movs	r3, #1
 80017c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4619      	mov	r1, r3
 80017ce:	4806      	ldr	r0, [pc, #24]	@ (80017e8 <HAL_TIM_Encoder_MspInit+0xc0>)
 80017d0:	f002 fbe4 	bl	8003f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80017d4:	bf00      	nop
 80017d6:	3728      	adds	r7, #40	@ 0x28
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40000c00 	.word	0x40000c00
 80017e0:	40021000 	.word	0x40021000
 80017e4:	48000400 	.word	0x48000400
 80017e8:	48000800 	.word	0x48000800

080017ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	@ 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a23      	ldr	r2, [pc, #140]	@ (8001898 <HAL_TIM_MspPostInit+0xac>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d11c      	bne.n	8001848 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800180e:	4b23      	ldr	r3, [pc, #140]	@ (800189c <HAL_TIM_MspPostInit+0xb0>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001812:	4a22      	ldr	r2, [pc, #136]	@ (800189c <HAL_TIM_MspPostInit+0xb0>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800181a:	4b20      	ldr	r3, [pc, #128]	@ (800189c <HAL_TIM_MspPostInit+0xb0>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001826:	2303      	movs	r3, #3
 8001828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001836:	2302      	movs	r3, #2
 8001838:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	4817      	ldr	r0, [pc, #92]	@ (80018a0 <HAL_TIM_MspPostInit+0xb4>)
 8001842:	f002 fbab 	bl	8003f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001846:	e022      	b.n	800188e <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a15      	ldr	r2, [pc, #84]	@ (80018a4 <HAL_TIM_MspPostInit+0xb8>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d11d      	bne.n	800188e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001852:	4b12      	ldr	r3, [pc, #72]	@ (800189c <HAL_TIM_MspPostInit+0xb0>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001856:	4a11      	ldr	r2, [pc, #68]	@ (800189c <HAL_TIM_MspPostInit+0xb0>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800185e:	4b0f      	ldr	r3, [pc, #60]	@ (800189c <HAL_TIM_MspPostInit+0xb0>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800186a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800186e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800187c:	230a      	movs	r3, #10
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	4619      	mov	r1, r3
 8001886:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800188a:	f002 fb87 	bl	8003f9c <HAL_GPIO_Init>
}
 800188e:	bf00      	nop
 8001890:	3728      	adds	r7, #40	@ 0x28
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40012c00 	.word	0x40012c00
 800189c:	40021000 	.word	0x40021000
 80018a0:	48000800 	.word	0x48000800
 80018a4:	40000800 	.word	0x40000800

080018a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <NMI_Handler+0x4>

080018b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <HardFault_Handler+0x4>

080018b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <MemManage_Handler+0x4>

080018c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <BusFault_Handler+0x4>

080018c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <UsageFault_Handler+0x4>

080018d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018fe:	f000 f8cb 	bl	8001a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800190c:	4802      	ldr	r0, [pc, #8]	@ (8001918 <DMA1_Channel1_IRQHandler+0x10>)
 800190e:	f002 f9f6 	bl	8003cfe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000098 	.word	0x20000098

0800191c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001920:	4802      	ldr	r0, [pc, #8]	@ (800192c <ADC1_2_IRQHandler+0x10>)
 8001922:	f000 fda7 	bl	8002474 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	2000002c 	.word	0x2000002c

08001930 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001934:	4802      	ldr	r0, [pc, #8]	@ (8001940 <TIM2_IRQHandler+0x10>)
 8001936:	f004 f915 	bl	8005b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200001d8 	.word	0x200001d8

08001944 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001948:	4802      	ldr	r0, [pc, #8]	@ (8001954 <TIM3_IRQHandler+0x10>)
 800194a:	f004 f90b 	bl	8005b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000224 	.word	0x20000224

08001958 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800195c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001960:	f002 fcd0 	bl	8004304 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}

08001968 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800196c:	4802      	ldr	r0, [pc, #8]	@ (8001978 <LPUART1_IRQHandler+0x10>)
 800196e:	f005 fafb 	bl	8006f68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	200000f8 	.word	0x200000f8

0800197c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001980:	4b06      	ldr	r3, [pc, #24]	@ (800199c <SystemInit+0x20>)
 8001982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001986:	4a05      	ldr	r2, [pc, #20]	@ (800199c <SystemInit+0x20>)
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019a0:	480d      	ldr	r0, [pc, #52]	@ (80019d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019a4:	f7ff ffea 	bl	800197c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a8:	480c      	ldr	r0, [pc, #48]	@ (80019dc <LoopForever+0x6>)
  ldr r1, =_edata
 80019aa:	490d      	ldr	r1, [pc, #52]	@ (80019e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019ac:	4a0d      	ldr	r2, [pc, #52]	@ (80019e4 <LoopForever+0xe>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019b0:	e002      	b.n	80019b8 <LoopCopyDataInit>

080019b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b6:	3304      	adds	r3, #4

080019b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019bc:	d3f9      	bcc.n	80019b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019be:	4a0a      	ldr	r2, [pc, #40]	@ (80019e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019c0:	4c0a      	ldr	r4, [pc, #40]	@ (80019ec <LoopForever+0x16>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c4:	e001      	b.n	80019ca <LoopFillZerobss>

080019c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c8:	3204      	adds	r2, #4

080019ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019cc:	d3fb      	bcc.n	80019c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ce:	f006 fccb 	bl	8008368 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019d2:	f7fe fd99 	bl	8000508 <main>

080019d6 <LoopForever>:

LoopForever:
    b LoopForever
 80019d6:	e7fe      	b.n	80019d6 <LoopForever>
  ldr   r0, =_estack
 80019d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80019e4:	08008418 	.word	0x08008418
  ldr r2, =_sbss
 80019e8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80019ec:	20000370 	.word	0x20000370

080019f0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019f0:	e7fe      	b.n	80019f0 <ADC3_IRQHandler>

080019f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fc:	2003      	movs	r0, #3
 80019fe:	f001 ff5b 	bl	80038b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a02:	2000      	movs	r0, #0
 8001a04:	f000 f80e 	bl	8001a24 <HAL_InitTick>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d002      	beq.n	8001a14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	71fb      	strb	r3, [r7, #7]
 8001a12:	e001      	b.n	8001a18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a14:	f7ff fcf6 	bl	8001404 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a18:	79fb      	ldrb	r3, [r7, #7]

}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a30:	4b16      	ldr	r3, [pc, #88]	@ (8001a8c <HAL_InitTick+0x68>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d022      	beq.n	8001a7e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a38:	4b15      	ldr	r3, [pc, #84]	@ (8001a90 <HAL_InitTick+0x6c>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b13      	ldr	r3, [pc, #76]	@ (8001a8c <HAL_InitTick+0x68>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a44:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f001 ff66 	bl	800391e <HAL_SYSTICK_Config>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10f      	bne.n	8001a78 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b0f      	cmp	r3, #15
 8001a5c:	d809      	bhi.n	8001a72 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	f04f 30ff 	mov.w	r0, #4294967295
 8001a66:	f001 ff32 	bl	80038ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a94 <HAL_InitTick+0x70>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	e007      	b.n	8001a82 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	73fb      	strb	r3, [r7, #15]
 8001a76:	e004      	b.n	8001a82 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	73fb      	strb	r3, [r7, #15]
 8001a7c:	e001      	b.n	8001a82 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	2000000c 	.word	0x2000000c
 8001a90:	20000004 	.word	0x20000004
 8001a94:	20000008 	.word	0x20000008

08001a98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a9c:	4b05      	ldr	r3, [pc, #20]	@ (8001ab4 <HAL_IncTick+0x1c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <HAL_IncTick+0x20>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	4a03      	ldr	r2, [pc, #12]	@ (8001ab4 <HAL_IncTick+0x1c>)
 8001aa8:	6013      	str	r3, [r2, #0]
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	2000036c 	.word	0x2000036c
 8001ab8:	2000000c 	.word	0x2000000c

08001abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac0:	4b03      	ldr	r3, [pc, #12]	@ (8001ad0 <HAL_GetTick+0x14>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	2000036c 	.word	0x2000036c

08001ad4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	609a      	str	r2, [r3, #8]
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	609a      	str	r2, [r3, #8]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b087      	sub	sp, #28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	3360      	adds	r3, #96	@ 0x60
 8001b4e:	461a      	mov	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b08      	ldr	r3, [pc, #32]	@ (8001b80 <LL_ADC_SetOffset+0x44>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b74:	bf00      	nop
 8001b76:	371c      	adds	r7, #28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	03fff000 	.word	0x03fff000

08001b84 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3360      	adds	r3, #96	@ 0x60
 8001b92:	461a      	mov	r2, r3
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b087      	sub	sp, #28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	3360      	adds	r3, #96	@ 0x60
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bda:	bf00      	nop
 8001bdc:	371c      	adds	r7, #28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b087      	sub	sp, #28
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3360      	adds	r3, #96	@ 0x60
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001c10:	bf00      	nop
 8001c12:	371c      	adds	r7, #28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	3360      	adds	r3, #96	@ 0x60
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	431a      	orrs	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001c46:	bf00      	nop
 8001c48:	371c      	adds	r7, #28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	615a      	str	r2, [r3, #20]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b087      	sub	sp, #28
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	60f8      	str	r0, [r7, #12]
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	3330      	adds	r3, #48	@ 0x30
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	0a1b      	lsrs	r3, r3, #8
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	4413      	add	r3, r2
 8001cbc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	211f      	movs	r1, #31
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	401a      	ands	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	0e9b      	lsrs	r3, r3, #26
 8001cd6:	f003 011f 	and.w	r1, r3, #31
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cea:	bf00      	nop
 8001cec:	371c      	adds	r7, #28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d02:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	3314      	adds	r3, #20
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	0e5b      	lsrs	r3, r3, #25
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	4413      	add	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	0d1b      	lsrs	r3, r3, #20
 8001d44:	f003 031f 	and.w	r3, r3, #31
 8001d48:	2107      	movs	r1, #7
 8001d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	401a      	ands	r2, r3
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	0d1b      	lsrs	r3, r3, #20
 8001d56:	f003 031f 	and.w	r3, r3, #31
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d60:	431a      	orrs	r2, r3
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d66:	bf00      	nop
 8001d68:	371c      	adds	r7, #28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	401a      	ands	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f003 0318 	and.w	r3, r3, #24
 8001d96:	4908      	ldr	r1, [pc, #32]	@ (8001db8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d98:	40d9      	lsrs	r1, r3
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	400b      	ands	r3, r1
 8001d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da2:	431a      	orrs	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	0007ffff 	.word	0x0007ffff

08001dbc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 031f 	and.w	r3, r3, #31
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6093      	str	r3, [r2, #8]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e2c:	d101      	bne.n	8001e32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e54:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e7c:	d101      	bne.n	8001e82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ea0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ea4:	f043 0201 	orr.w	r2, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <LL_ADC_IsEnabled+0x18>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <LL_ADC_IsEnabled+0x1a>
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001eee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ef2:	f043 0204 	orr.w	r2, r3, #4
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	d101      	bne.n	8001f1e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d101      	bne.n	8001f44 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f54:	b590      	push	{r4, r7, lr}
 8001f56:	b089      	sub	sp, #36	@ 0x24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e1a9      	b.n	80022c2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d109      	bne.n	8001f90 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff fa65 	bl	800144c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff3f 	bl	8001e18 <LL_ADC_IsDeepPowerDownEnabled>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d004      	beq.n	8001faa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff25 	bl	8001df4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ff5a 	bl	8001e68 <LL_ADC_IsInternalRegulatorEnabled>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d115      	bne.n	8001fe6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ff3e 	bl	8001e40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fc4:	4b9c      	ldr	r3, [pc, #624]	@ (8002238 <HAL_ADC_Init+0x2e4>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	099b      	lsrs	r3, r3, #6
 8001fca:	4a9c      	ldr	r2, [pc, #624]	@ (800223c <HAL_ADC_Init+0x2e8>)
 8001fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd0:	099b      	lsrs	r3, r3, #6
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fd8:	e002      	b.n	8001fe0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f9      	bne.n	8001fda <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ff3c 	bl	8001e68 <LL_ADC_IsInternalRegulatorEnabled>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10d      	bne.n	8002012 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ffa:	f043 0210 	orr.w	r2, r3, #16
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002006:	f043 0201 	orr.w	r2, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff ff75 	bl	8001f06 <LL_ADC_REG_IsConversionOngoing>
 800201c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	2b00      	cmp	r3, #0
 8002028:	f040 8142 	bne.w	80022b0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	2b00      	cmp	r3, #0
 8002030:	f040 813e 	bne.w	80022b0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002038:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800203c:	f043 0202 	orr.w	r2, r3, #2
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff ff35 	bl	8001eb8 <LL_ADC_IsEnabled>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d141      	bne.n	80020d8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800205c:	d004      	beq.n	8002068 <HAL_ADC_Init+0x114>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a77      	ldr	r2, [pc, #476]	@ (8002240 <HAL_ADC_Init+0x2ec>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d10f      	bne.n	8002088 <HAL_ADC_Init+0x134>
 8002068:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800206c:	f7ff ff24 	bl	8001eb8 <LL_ADC_IsEnabled>
 8002070:	4604      	mov	r4, r0
 8002072:	4873      	ldr	r0, [pc, #460]	@ (8002240 <HAL_ADC_Init+0x2ec>)
 8002074:	f7ff ff20 	bl	8001eb8 <LL_ADC_IsEnabled>
 8002078:	4603      	mov	r3, r0
 800207a:	4323      	orrs	r3, r4
 800207c:	2b00      	cmp	r3, #0
 800207e:	bf0c      	ite	eq
 8002080:	2301      	moveq	r3, #1
 8002082:	2300      	movne	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	e012      	b.n	80020ae <HAL_ADC_Init+0x15a>
 8002088:	486e      	ldr	r0, [pc, #440]	@ (8002244 <HAL_ADC_Init+0x2f0>)
 800208a:	f7ff ff15 	bl	8001eb8 <LL_ADC_IsEnabled>
 800208e:	4604      	mov	r4, r0
 8002090:	486d      	ldr	r0, [pc, #436]	@ (8002248 <HAL_ADC_Init+0x2f4>)
 8002092:	f7ff ff11 	bl	8001eb8 <LL_ADC_IsEnabled>
 8002096:	4603      	mov	r3, r0
 8002098:	431c      	orrs	r4, r3
 800209a:	486c      	ldr	r0, [pc, #432]	@ (800224c <HAL_ADC_Init+0x2f8>)
 800209c:	f7ff ff0c 	bl	8001eb8 <LL_ADC_IsEnabled>
 80020a0:	4603      	mov	r3, r0
 80020a2:	4323      	orrs	r3, r4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf0c      	ite	eq
 80020a8:	2301      	moveq	r3, #1
 80020aa:	2300      	movne	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d012      	beq.n	80020d8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020ba:	d004      	beq.n	80020c6 <HAL_ADC_Init+0x172>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a5f      	ldr	r2, [pc, #380]	@ (8002240 <HAL_ADC_Init+0x2ec>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d101      	bne.n	80020ca <HAL_ADC_Init+0x176>
 80020c6:	4a62      	ldr	r2, [pc, #392]	@ (8002250 <HAL_ADC_Init+0x2fc>)
 80020c8:	e000      	b.n	80020cc <HAL_ADC_Init+0x178>
 80020ca:	4a62      	ldr	r2, [pc, #392]	@ (8002254 <HAL_ADC_Init+0x300>)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	4619      	mov	r1, r3
 80020d2:	4610      	mov	r0, r2
 80020d4:	f7ff fcfe 	bl	8001ad4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	7f5b      	ldrb	r3, [r3, #29]
 80020dc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020e2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80020e8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80020ee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020f6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002102:	2b01      	cmp	r3, #1
 8002104:	d106      	bne.n	8002114 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800210a:	3b01      	subs	r3, #1
 800210c:	045b      	lsls	r3, r3, #17
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002118:	2b00      	cmp	r3, #0
 800211a:	d009      	beq.n	8002130 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002120:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002128:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	4b48      	ldr	r3, [pc, #288]	@ (8002258 <HAL_ADC_Init+0x304>)
 8002138:	4013      	ands	r3, r2
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6812      	ldr	r2, [r2, #0]
 800213e:	69b9      	ldr	r1, [r7, #24]
 8002140:	430b      	orrs	r3, r1
 8002142:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fee4 	bl	8001f2c <LL_ADC_INJ_IsConversionOngoing>
 8002164:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d17f      	bne.n	800226c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d17c      	bne.n	800226c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002176:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800217e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800218e:	f023 0302 	bic.w	r3, r3, #2
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6812      	ldr	r2, [r2, #0]
 8002196:	69b9      	ldr	r1, [r7, #24]
 8002198:	430b      	orrs	r3, r1
 800219a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d017      	beq.n	80021d4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	691a      	ldr	r2, [r3, #16]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80021b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80021bc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80021c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6911      	ldr	r1, [r2, #16]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	430b      	orrs	r3, r1
 80021ce:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80021d2:	e013      	b.n	80021fc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80021e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80021f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021f8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002202:	2b01      	cmp	r3, #1
 8002204:	d12a      	bne.n	800225c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002210:	f023 0304 	bic.w	r3, r3, #4
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800221c:	4311      	orrs	r1, r2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002222:	4311      	orrs	r1, r2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002228:	430a      	orrs	r2, r1
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f042 0201 	orr.w	r2, r2, #1
 8002234:	611a      	str	r2, [r3, #16]
 8002236:	e019      	b.n	800226c <HAL_ADC_Init+0x318>
 8002238:	20000004 	.word	0x20000004
 800223c:	053e2d63 	.word	0x053e2d63
 8002240:	50000100 	.word	0x50000100
 8002244:	50000400 	.word	0x50000400
 8002248:	50000500 	.word	0x50000500
 800224c:	50000600 	.word	0x50000600
 8002250:	50000300 	.word	0x50000300
 8002254:	50000700 	.word	0x50000700
 8002258:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691a      	ldr	r2, [r3, #16]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0201 	bic.w	r2, r2, #1
 800226a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d10c      	bne.n	800228e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	f023 010f 	bic.w	r1, r3, #15
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	1e5a      	subs	r2, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	631a      	str	r2, [r3, #48]	@ 0x30
 800228c:	e007      	b.n	800229e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 020f 	bic.w	r2, r2, #15
 800229c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a2:	f023 0303 	bic.w	r3, r3, #3
 80022a6:	f043 0201 	orr.w	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022ae:	e007      	b.n	80022c0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b4:	f043 0210 	orr.w	r2, r3, #16
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3724      	adds	r7, #36	@ 0x24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd90      	pop	{r4, r7, pc}
 80022ca:	bf00      	nop

080022cc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022e0:	d004      	beq.n	80022ec <HAL_ADC_Start_DMA+0x20>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a5a      	ldr	r2, [pc, #360]	@ (8002450 <HAL_ADC_Start_DMA+0x184>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d101      	bne.n	80022f0 <HAL_ADC_Start_DMA+0x24>
 80022ec:	4b59      	ldr	r3, [pc, #356]	@ (8002454 <HAL_ADC_Start_DMA+0x188>)
 80022ee:	e000      	b.n	80022f2 <HAL_ADC_Start_DMA+0x26>
 80022f0:	4b59      	ldr	r3, [pc, #356]	@ (8002458 <HAL_ADC_Start_DMA+0x18c>)
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff fd62 	bl	8001dbc <LL_ADC_GetMultimode>
 80022f8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff fe01 	bl	8001f06 <LL_ADC_REG_IsConversionOngoing>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	f040 809b 	bne.w	8002442 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <HAL_ADC_Start_DMA+0x4e>
 8002316:	2302      	movs	r3, #2
 8002318:	e096      	b.n	8002448 <HAL_ADC_Start_DMA+0x17c>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a4d      	ldr	r2, [pc, #308]	@ (800245c <HAL_ADC_Start_DMA+0x190>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d008      	beq.n	800233e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d005      	beq.n	800233e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	2b05      	cmp	r3, #5
 8002336:	d002      	beq.n	800233e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	2b09      	cmp	r3, #9
 800233c:	d17a      	bne.n	8002434 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 ff60 	bl	8003204 <ADC_Enable>
 8002344:	4603      	mov	r3, r0
 8002346:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002348:	7dfb      	ldrb	r3, [r7, #23]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d16d      	bne.n	800242a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002352:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002356:	f023 0301 	bic.w	r3, r3, #1
 800235a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a3a      	ldr	r2, [pc, #232]	@ (8002450 <HAL_ADC_Start_DMA+0x184>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d009      	beq.n	8002380 <HAL_ADC_Start_DMA+0xb4>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a3b      	ldr	r2, [pc, #236]	@ (8002460 <HAL_ADC_Start_DMA+0x194>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d002      	beq.n	800237c <HAL_ADC_Start_DMA+0xb0>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	e003      	b.n	8002384 <HAL_ADC_Start_DMA+0xb8>
 800237c:	4b39      	ldr	r3, [pc, #228]	@ (8002464 <HAL_ADC_Start_DMA+0x198>)
 800237e:	e001      	b.n	8002384 <HAL_ADC_Start_DMA+0xb8>
 8002380:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	4293      	cmp	r3, r2
 800238a:	d002      	beq.n	8002392 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d105      	bne.n	800239e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002396:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d006      	beq.n	80023b8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ae:	f023 0206 	bic.w	r2, r3, #6
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	661a      	str	r2, [r3, #96]	@ 0x60
 80023b6:	e002      	b.n	80023be <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c2:	4a29      	ldr	r2, [pc, #164]	@ (8002468 <HAL_ADC_Start_DMA+0x19c>)
 80023c4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ca:	4a28      	ldr	r2, [pc, #160]	@ (800246c <HAL_ADC_Start_DMA+0x1a0>)
 80023cc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d2:	4a27      	ldr	r2, [pc, #156]	@ (8002470 <HAL_ADC_Start_DMA+0x1a4>)
 80023d4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	221c      	movs	r2, #28
 80023dc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f042 0210 	orr.w	r2, r2, #16
 80023f4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 0201 	orr.w	r2, r2, #1
 8002404:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	3340      	adds	r3, #64	@ 0x40
 8002410:	4619      	mov	r1, r3
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f001 fb37 	bl	8003a88 <HAL_DMA_Start_IT>
 800241a:	4603      	mov	r3, r0
 800241c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fd5b 	bl	8001ede <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002428:	e00d      	b.n	8002446 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002432:	e008      	b.n	8002446 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002440:	e001      	b.n	8002446 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002442:	2302      	movs	r3, #2
 8002444:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002446:	7dfb      	ldrb	r3, [r7, #23]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	50000100 	.word	0x50000100
 8002454:	50000300 	.word	0x50000300
 8002458:	50000700 	.word	0x50000700
 800245c:	50000600 	.word	0x50000600
 8002460:	50000500 	.word	0x50000500
 8002464:	50000400 	.word	0x50000400
 8002468:	08003331 	.word	0x08003331
 800246c:	08003409 	.word	0x08003409
 8002470:	08003425 	.word	0x08003425

08002474 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08a      	sub	sp, #40	@ 0x28
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800247c:	2300      	movs	r3, #0
 800247e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002498:	d004      	beq.n	80024a4 <HAL_ADC_IRQHandler+0x30>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a8e      	ldr	r2, [pc, #568]	@ (80026d8 <HAL_ADC_IRQHandler+0x264>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d101      	bne.n	80024a8 <HAL_ADC_IRQHandler+0x34>
 80024a4:	4b8d      	ldr	r3, [pc, #564]	@ (80026dc <HAL_ADC_IRQHandler+0x268>)
 80024a6:	e000      	b.n	80024aa <HAL_ADC_IRQHandler+0x36>
 80024a8:	4b8d      	ldr	r3, [pc, #564]	@ (80026e0 <HAL_ADC_IRQHandler+0x26c>)
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fc86 	bl	8001dbc <LL_ADC_GetMultimode>
 80024b0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d017      	beq.n	80024ec <HAL_ADC_IRQHandler+0x78>
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d012      	beq.n	80024ec <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d105      	bne.n	80024de <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f001 f808 	bl	80034f4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2202      	movs	r2, #2
 80024ea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d004      	beq.n	8002500 <HAL_ADC_IRQHandler+0x8c>
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10b      	bne.n	8002518 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 8094 	beq.w	8002634 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 808e 	beq.w	8002634 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	2b00      	cmp	r3, #0
 8002522:	d105      	bne.n	8002530 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002528:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fb9f 	bl	8001c78 <LL_ADC_REG_IsTriggerSourceSWStart>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d072      	beq.n	8002626 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a64      	ldr	r2, [pc, #400]	@ (80026d8 <HAL_ADC_IRQHandler+0x264>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d009      	beq.n	800255e <HAL_ADC_IRQHandler+0xea>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a65      	ldr	r2, [pc, #404]	@ (80026e4 <HAL_ADC_IRQHandler+0x270>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d002      	beq.n	800255a <HAL_ADC_IRQHandler+0xe6>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	e003      	b.n	8002562 <HAL_ADC_IRQHandler+0xee>
 800255a:	4b63      	ldr	r3, [pc, #396]	@ (80026e8 <HAL_ADC_IRQHandler+0x274>)
 800255c:	e001      	b.n	8002562 <HAL_ADC_IRQHandler+0xee>
 800255e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	4293      	cmp	r3, r2
 8002568:	d008      	beq.n	800257c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	2b05      	cmp	r3, #5
 8002574:	d002      	beq.n	800257c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	2b09      	cmp	r3, #9
 800257a:	d104      	bne.n	8002586 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	623b      	str	r3, [r7, #32]
 8002584:	e014      	b.n	80025b0 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a53      	ldr	r2, [pc, #332]	@ (80026d8 <HAL_ADC_IRQHandler+0x264>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d009      	beq.n	80025a4 <HAL_ADC_IRQHandler+0x130>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a53      	ldr	r2, [pc, #332]	@ (80026e4 <HAL_ADC_IRQHandler+0x270>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d002      	beq.n	80025a0 <HAL_ADC_IRQHandler+0x12c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	e003      	b.n	80025a8 <HAL_ADC_IRQHandler+0x134>
 80025a0:	4b51      	ldr	r3, [pc, #324]	@ (80026e8 <HAL_ADC_IRQHandler+0x274>)
 80025a2:	e001      	b.n	80025a8 <HAL_ADC_IRQHandler+0x134>
 80025a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80025a8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d135      	bne.n	8002626 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d12e      	bne.n	8002626 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff fc9a 	bl	8001f06 <LL_ADC_REG_IsConversionOngoing>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d11a      	bne.n	800260e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 020c 	bic.w	r2, r2, #12
 80025e6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d112      	bne.n	8002626 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002604:	f043 0201 	orr.w	r2, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800260c:	e00b      	b.n	8002626 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002612:	f043 0210 	orr.w	r2, r3, #16
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800261e:	f043 0201 	orr.w	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f984 	bl	8002934 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	220c      	movs	r2, #12
 8002632:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b00      	cmp	r3, #0
 800263c:	d004      	beq.n	8002648 <HAL_ADC_IRQHandler+0x1d4>
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	f003 0320 	and.w	r3, r3, #32
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10b      	bne.n	8002660 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 80b3 	beq.w	80027ba <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 80ad 	beq.w	80027ba <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2b00      	cmp	r3, #0
 800266a:	d105      	bne.n	8002678 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002670:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fb3a 	bl	8001cf6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002682:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff faf5 	bl	8001c78 <LL_ADC_REG_IsTriggerSourceSWStart>
 800268e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a10      	ldr	r2, [pc, #64]	@ (80026d8 <HAL_ADC_IRQHandler+0x264>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d009      	beq.n	80026ae <HAL_ADC_IRQHandler+0x23a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a11      	ldr	r2, [pc, #68]	@ (80026e4 <HAL_ADC_IRQHandler+0x270>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d002      	beq.n	80026aa <HAL_ADC_IRQHandler+0x236>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	e003      	b.n	80026b2 <HAL_ADC_IRQHandler+0x23e>
 80026aa:	4b0f      	ldr	r3, [pc, #60]	@ (80026e8 <HAL_ADC_IRQHandler+0x274>)
 80026ac:	e001      	b.n	80026b2 <HAL_ADC_IRQHandler+0x23e>
 80026ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6812      	ldr	r2, [r2, #0]
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d008      	beq.n	80026cc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2b06      	cmp	r3, #6
 80026c4:	d002      	beq.n	80026cc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2b07      	cmp	r3, #7
 80026ca:	d10f      	bne.n	80026ec <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	623b      	str	r3, [r7, #32]
 80026d4:	e01f      	b.n	8002716 <HAL_ADC_IRQHandler+0x2a2>
 80026d6:	bf00      	nop
 80026d8:	50000100 	.word	0x50000100
 80026dc:	50000300 	.word	0x50000300
 80026e0:	50000700 	.word	0x50000700
 80026e4:	50000500 	.word	0x50000500
 80026e8:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a8b      	ldr	r2, [pc, #556]	@ (8002920 <HAL_ADC_IRQHandler+0x4ac>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d009      	beq.n	800270a <HAL_ADC_IRQHandler+0x296>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a8a      	ldr	r2, [pc, #552]	@ (8002924 <HAL_ADC_IRQHandler+0x4b0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d002      	beq.n	8002706 <HAL_ADC_IRQHandler+0x292>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	e003      	b.n	800270e <HAL_ADC_IRQHandler+0x29a>
 8002706:	4b88      	ldr	r3, [pc, #544]	@ (8002928 <HAL_ADC_IRQHandler+0x4b4>)
 8002708:	e001      	b.n	800270e <HAL_ADC_IRQHandler+0x29a>
 800270a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800270e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d047      	beq.n	80027ac <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d007      	beq.n	8002736 <HAL_ADC_IRQHandler+0x2c2>
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d03f      	beq.n	80027ac <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002732:	2b00      	cmp	r3, #0
 8002734:	d13a      	bne.n	80027ac <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002740:	2b40      	cmp	r3, #64	@ 0x40
 8002742:	d133      	bne.n	80027ac <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d12e      	bne.n	80027ac <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fbea 	bl	8001f2c <LL_ADC_INJ_IsConversionOngoing>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d11a      	bne.n	8002794 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800276c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002772:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002782:	2b00      	cmp	r3, #0
 8002784:	d112      	bne.n	80027ac <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278a:	f043 0201 	orr.w	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002792:	e00b      	b.n	80027ac <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002798:	f043 0210 	orr.w	r2, r3, #16
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a4:	f043 0201 	orr.w	r2, r3, #1
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fe79 	bl	80034a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2260      	movs	r2, #96	@ 0x60
 80027b8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d011      	beq.n	80027e8 <HAL_ADC_IRQHandler+0x374>
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00c      	beq.n	80027e8 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f8be 	bl	800295c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2280      	movs	r2, #128	@ 0x80
 80027e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d012      	beq.n	8002818 <HAL_ADC_IRQHandler+0x3a4>
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00d      	beq.n	8002818 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002800:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 fe5f 	bl	80034cc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002816:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800281e:	2b00      	cmp	r3, #0
 8002820:	d012      	beq.n	8002848 <HAL_ADC_IRQHandler+0x3d4>
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00d      	beq.n	8002848 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002830:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 fe51 	bl	80034e0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002846:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f003 0310 	and.w	r3, r3, #16
 800284e:	2b00      	cmp	r3, #0
 8002850:	d043      	beq.n	80028da <HAL_ADC_IRQHandler+0x466>
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	2b00      	cmp	r3, #0
 800285a:	d03e      	beq.n	80028da <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002860:	2b00      	cmp	r3, #0
 8002862:	d102      	bne.n	800286a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002864:	2301      	movs	r3, #1
 8002866:	627b      	str	r3, [r7, #36]	@ 0x24
 8002868:	e021      	b.n	80028ae <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d015      	beq.n	800289c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002878:	d004      	beq.n	8002884 <HAL_ADC_IRQHandler+0x410>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a28      	ldr	r2, [pc, #160]	@ (8002920 <HAL_ADC_IRQHandler+0x4ac>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d101      	bne.n	8002888 <HAL_ADC_IRQHandler+0x414>
 8002884:	4b29      	ldr	r3, [pc, #164]	@ (800292c <HAL_ADC_IRQHandler+0x4b8>)
 8002886:	e000      	b.n	800288a <HAL_ADC_IRQHandler+0x416>
 8002888:	4b29      	ldr	r3, [pc, #164]	@ (8002930 <HAL_ADC_IRQHandler+0x4bc>)
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff faa4 	bl	8001dd8 <LL_ADC_GetMultiDMATransfer>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00b      	beq.n	80028ae <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002896:	2301      	movs	r3, #1
 8002898:	627b      	str	r3, [r7, #36]	@ 0x24
 800289a:	e008      	b.n	80028ae <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80028aa:	2301      	movs	r3, #1
 80028ac:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d10e      	bne.n	80028d2 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028c4:	f043 0202 	orr.w	r2, r3, #2
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f84f 	bl	8002970 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2210      	movs	r2, #16
 80028d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d018      	beq.n	8002916 <HAL_ADC_IRQHandler+0x4a2>
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d013      	beq.n	8002916 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028fe:	f043 0208 	orr.w	r2, r3, #8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800290e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 fdd1 	bl	80034b8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002916:	bf00      	nop
 8002918:	3728      	adds	r7, #40	@ 0x28
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	50000100 	.word	0x50000100
 8002924:	50000500 	.word	0x50000500
 8002928:	50000400 	.word	0x50000400
 800292c:	50000300 	.word	0x50000300
 8002930:	50000700 	.word	0x50000700

08002934 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b0b6      	sub	sp, #216	@ 0xd8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002994:	2300      	movs	r3, #0
 8002996:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d102      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x24>
 80029a2:	2302      	movs	r3, #2
 80029a4:	f000 bc13 	b.w	80031ce <HAL_ADC_ConfigChannel+0x84a>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff faa6 	bl	8001f06 <LL_ADC_REG_IsConversionOngoing>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f040 83f3 	bne.w	80031a8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	6859      	ldr	r1, [r3, #4]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	f7ff f965 	bl	8001c9e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fa94 	bl	8001f06 <LL_ADC_REG_IsConversionOngoing>
 80029de:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff faa0 	bl	8001f2c <LL_ADC_INJ_IsConversionOngoing>
 80029ec:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f040 81d9 	bne.w	8002dac <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f040 81d4 	bne.w	8002dac <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a0c:	d10f      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2200      	movs	r2, #0
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f7ff f97f 	bl	8001d1c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff f913 	bl	8001c52 <LL_ADC_SetSamplingTimeCommonConfig>
 8002a2c:	e00e      	b.n	8002a4c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6819      	ldr	r1, [r3, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f7ff f96e 	bl	8001d1c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2100      	movs	r1, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff f903 	bl	8001c52 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	08db      	lsrs	r3, r3, #3
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d022      	beq.n	8002ab4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	6919      	ldr	r1, [r3, #16]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002a7e:	f7ff f85d 	bl	8001b3c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6818      	ldr	r0, [r3, #0]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6919      	ldr	r1, [r3, #16]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f7ff f8a9 	bl	8001be6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6818      	ldr	r0, [r3, #0]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d102      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x126>
 8002aa4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aa8:	e000      	b.n	8002aac <HAL_ADC_ConfigChannel+0x128>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	461a      	mov	r2, r3
 8002aae:	f7ff f8b5 	bl	8001c1c <LL_ADC_SetOffsetSaturation>
 8002ab2:	e17b      	b.n	8002dac <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2100      	movs	r1, #0
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff f862 	bl	8001b84 <LL_ADC_GetOffsetChannel>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10a      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x15c>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2100      	movs	r1, #0
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff f857 	bl	8001b84 <LL_ADC_GetOffsetChannel>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	0e9b      	lsrs	r3, r3, #26
 8002ada:	f003 021f 	and.w	r2, r3, #31
 8002ade:	e01e      	b.n	8002b1e <HAL_ADC_ConfigChannel+0x19a>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff f84c 	bl	8001b84 <LL_ADC_GetOffsetChannel>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002afe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002b0e:	2320      	movs	r3, #32
 8002b10:	e004      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002b12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b16:	fab3 f383 	clz	r3, r3
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d105      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x1b2>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	0e9b      	lsrs	r3, r3, #26
 8002b30:	f003 031f 	and.w	r3, r3, #31
 8002b34:	e018      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x1e4>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b42:	fa93 f3a3 	rbit	r3, r3
 8002b46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002b4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002b52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002b5a:	2320      	movs	r3, #32
 8002b5c:	e004      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002b5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b62:	fab3 f383 	clz	r3, r3
 8002b66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d106      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2200      	movs	r2, #0
 8002b72:	2100      	movs	r1, #0
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff f81b 	bl	8001bb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe ffff 	bl	8001b84 <LL_ADC_GetOffsetChannel>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10a      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x222>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2101      	movs	r1, #1
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe fff4 	bl	8001b84 <LL_ADC_GetOffsetChannel>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	0e9b      	lsrs	r3, r3, #26
 8002ba0:	f003 021f 	and.w	r2, r3, #31
 8002ba4:	e01e      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x260>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2101      	movs	r1, #1
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7fe ffe9 	bl	8001b84 <LL_ADC_GetOffsetChannel>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bbc:	fa93 f3a3 	rbit	r3, r3
 8002bc0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002bc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002bcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002bd4:	2320      	movs	r3, #32
 8002bd6:	e004      	b.n	8002be2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002bd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bdc:	fab3 f383 	clz	r3, r3
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d105      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x278>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	0e9b      	lsrs	r3, r3, #26
 8002bf6:	f003 031f 	and.w	r3, r3, #31
 8002bfa:	e018      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x2aa>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c08:	fa93 f3a3 	rbit	r3, r3
 8002c0c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002c10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002c18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002c20:	2320      	movs	r3, #32
 8002c22:	e004      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002c24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c28:	fab3 f383 	clz	r3, r3
 8002c2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d106      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2200      	movs	r2, #0
 8002c38:	2101      	movs	r1, #1
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fe ffb8 	bl	8001bb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2102      	movs	r1, #2
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fe ff9c 	bl	8001b84 <LL_ADC_GetOffsetChannel>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10a      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x2e8>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2102      	movs	r1, #2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fe ff91 	bl	8001b84 <LL_ADC_GetOffsetChannel>
 8002c62:	4603      	mov	r3, r0
 8002c64:	0e9b      	lsrs	r3, r3, #26
 8002c66:	f003 021f 	and.w	r2, r3, #31
 8002c6a:	e01e      	b.n	8002caa <HAL_ADC_ConfigChannel+0x326>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2102      	movs	r1, #2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe ff86 	bl	8001b84 <LL_ADC_GetOffsetChannel>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002c8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002c92:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002c9a:	2320      	movs	r3, #32
 8002c9c:	e004      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002c9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ca2:	fab3 f383 	clz	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d105      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x33e>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	0e9b      	lsrs	r3, r3, #26
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	e016      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x36c>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cce:	fa93 f3a3 	rbit	r3, r3
 8002cd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002cd4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002cd6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002cda:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002ce2:	2320      	movs	r3, #32
 8002ce4:	e004      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002ce6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d106      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2102      	movs	r1, #2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fe ff57 	bl	8001bb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2103      	movs	r1, #3
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fe ff3b 	bl	8001b84 <LL_ADC_GetOffsetChannel>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10a      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x3aa>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2103      	movs	r1, #3
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe ff30 	bl	8001b84 <LL_ADC_GetOffsetChannel>
 8002d24:	4603      	mov	r3, r0
 8002d26:	0e9b      	lsrs	r3, r3, #26
 8002d28:	f003 021f 	and.w	r2, r3, #31
 8002d2c:	e017      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x3da>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2103      	movs	r1, #3
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fe ff25 	bl	8001b84 <LL_ADC_GetOffsetChannel>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d40:	fa93 f3a3 	rbit	r3, r3
 8002d44:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002d46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d48:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002d4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002d50:	2320      	movs	r3, #32
 8002d52:	e003      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002d54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d56:	fab3 f383 	clz	r3, r3
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d105      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0x3f2>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	0e9b      	lsrs	r3, r3, #26
 8002d70:	f003 031f 	and.w	r3, r3, #31
 8002d74:	e011      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x416>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d7e:	fa93 f3a3 	rbit	r3, r3
 8002d82:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002d84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d86:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002d88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002d8e:	2320      	movs	r3, #32
 8002d90:	e003      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002d92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d94:	fab3 f383 	clz	r3, r3
 8002d98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d106      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2200      	movs	r2, #0
 8002da4:	2103      	movs	r1, #3
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fe ff02 	bl	8001bb0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff f881 	bl	8001eb8 <LL_ADC_IsEnabled>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f040 813d 	bne.w	8003038 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	6819      	ldr	r1, [r3, #0]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	f7fe ffd2 	bl	8001d74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	4aa2      	ldr	r2, [pc, #648]	@ (8003060 <HAL_ADC_ConfigChannel+0x6dc>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	f040 812e 	bne.w	8003038 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10b      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x480>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	0e9b      	lsrs	r3, r3, #26
 8002df2:	3301      	adds	r3, #1
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	2b09      	cmp	r3, #9
 8002dfa:	bf94      	ite	ls
 8002dfc:	2301      	movls	r3, #1
 8002dfe:	2300      	movhi	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	e019      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x4b4>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e0c:	fa93 f3a3 	rbit	r3, r3
 8002e10:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002e12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e14:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002e16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002e1c:	2320      	movs	r3, #32
 8002e1e:	e003      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002e20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e22:	fab3 f383 	clz	r3, r3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	3301      	adds	r3, #1
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	2b09      	cmp	r3, #9
 8002e30:	bf94      	ite	ls
 8002e32:	2301      	movls	r3, #1
 8002e34:	2300      	movhi	r3, #0
 8002e36:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d079      	beq.n	8002f30 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d107      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x4d4>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	0e9b      	lsrs	r3, r3, #26
 8002e4e:	3301      	adds	r3, #1
 8002e50:	069b      	lsls	r3, r3, #26
 8002e52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e56:	e015      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x500>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e60:	fa93 f3a3 	rbit	r3, r3
 8002e64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002e66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e68:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002e70:	2320      	movs	r3, #32
 8002e72:	e003      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e76:	fab3 f383 	clz	r3, r3
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	069b      	lsls	r3, r3, #26
 8002e80:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d109      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x520>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	0e9b      	lsrs	r3, r3, #26
 8002e96:	3301      	adds	r3, #1
 8002e98:	f003 031f 	and.w	r3, r3, #31
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea2:	e017      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x550>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eac:	fa93 f3a3 	rbit	r3, r3
 8002eb0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002eb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002eb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002ebc:	2320      	movs	r3, #32
 8002ebe:	e003      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002ec0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ec2:	fab3 f383 	clz	r3, r3
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	3301      	adds	r3, #1
 8002eca:	f003 031f 	and.w	r3, r3, #31
 8002ece:	2101      	movs	r1, #1
 8002ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed4:	ea42 0103 	orr.w	r1, r2, r3
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10a      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x576>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	0e9b      	lsrs	r3, r3, #26
 8002eea:	3301      	adds	r3, #1
 8002eec:	f003 021f 	and.w	r2, r3, #31
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	4413      	add	r3, r2
 8002ef6:	051b      	lsls	r3, r3, #20
 8002ef8:	e018      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x5a8>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f02:	fa93 f3a3 	rbit	r3, r3
 8002f06:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002f12:	2320      	movs	r3, #32
 8002f14:	e003      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f18:	fab3 f383 	clz	r3, r3
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	f003 021f 	and.w	r2, r3, #31
 8002f24:	4613      	mov	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4413      	add	r3, r2
 8002f2a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	e07e      	b.n	800302e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d107      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x5c8>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	0e9b      	lsrs	r3, r3, #26
 8002f42:	3301      	adds	r3, #1
 8002f44:	069b      	lsls	r3, r3, #26
 8002f46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f4a:	e015      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x5f4>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f54:	fa93 f3a3 	rbit	r3, r3
 8002f58:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f5c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002f64:	2320      	movs	r3, #32
 8002f66:	e003      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f6a:	fab3 f383 	clz	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	3301      	adds	r3, #1
 8002f72:	069b      	lsls	r3, r3, #26
 8002f74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d109      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x614>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	0e9b      	lsrs	r3, r3, #26
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	f003 031f 	and.w	r3, r3, #31
 8002f90:	2101      	movs	r1, #1
 8002f92:	fa01 f303 	lsl.w	r3, r1, r3
 8002f96:	e017      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x644>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	fa93 f3a3 	rbit	r3, r3
 8002fa4:	61fb      	str	r3, [r7, #28]
  return result;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002fb0:	2320      	movs	r3, #32
 8002fb2:	e003      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb6:	fab3 f383 	clz	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	f003 031f 	and.w	r3, r3, #31
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc8:	ea42 0103 	orr.w	r1, r2, r3
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10d      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x670>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	0e9b      	lsrs	r3, r3, #26
 8002fde:	3301      	adds	r3, #1
 8002fe0:	f003 021f 	and.w	r2, r3, #31
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	4413      	add	r3, r2
 8002fea:	3b1e      	subs	r3, #30
 8002fec:	051b      	lsls	r3, r3, #20
 8002fee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ff2:	e01b      	b.n	800302c <HAL_ADC_ConfigChannel+0x6a8>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	fa93 f3a3 	rbit	r3, r3
 8003000:	613b      	str	r3, [r7, #16]
  return result;
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800300c:	2320      	movs	r3, #32
 800300e:	e003      	b.n	8003018 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	fab3 f383 	clz	r3, r3
 8003016:	b2db      	uxtb	r3, r3
 8003018:	3301      	adds	r3, #1
 800301a:	f003 021f 	and.w	r2, r3, #31
 800301e:	4613      	mov	r3, r2
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4413      	add	r3, r2
 8003024:	3b1e      	subs	r3, #30
 8003026:	051b      	lsls	r3, r3, #20
 8003028:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800302c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003032:	4619      	mov	r1, r3
 8003034:	f7fe fe72 	bl	8001d1c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4b09      	ldr	r3, [pc, #36]	@ (8003064 <HAL_ADC_ConfigChannel+0x6e0>)
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 80be 	beq.w	80031c2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800304e:	d004      	beq.n	800305a <HAL_ADC_ConfigChannel+0x6d6>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a04      	ldr	r2, [pc, #16]	@ (8003068 <HAL_ADC_ConfigChannel+0x6e4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d10a      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x6ec>
 800305a:	4b04      	ldr	r3, [pc, #16]	@ (800306c <HAL_ADC_ConfigChannel+0x6e8>)
 800305c:	e009      	b.n	8003072 <HAL_ADC_ConfigChannel+0x6ee>
 800305e:	bf00      	nop
 8003060:	407f0000 	.word	0x407f0000
 8003064:	80080000 	.word	0x80080000
 8003068:	50000100 	.word	0x50000100
 800306c:	50000300 	.word	0x50000300
 8003070:	4b59      	ldr	r3, [pc, #356]	@ (80031d8 <HAL_ADC_ConfigChannel+0x854>)
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe fd54 	bl	8001b20 <LL_ADC_GetCommonPathInternalCh>
 8003078:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a56      	ldr	r2, [pc, #344]	@ (80031dc <HAL_ADC_ConfigChannel+0x858>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d004      	beq.n	8003090 <HAL_ADC_ConfigChannel+0x70c>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a55      	ldr	r2, [pc, #340]	@ (80031e0 <HAL_ADC_ConfigChannel+0x85c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d13a      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003090:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003094:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d134      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030a4:	d005      	beq.n	80030b2 <HAL_ADC_ConfigChannel+0x72e>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a4e      	ldr	r2, [pc, #312]	@ (80031e4 <HAL_ADC_ConfigChannel+0x860>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	f040 8085 	bne.w	80031bc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030ba:	d004      	beq.n	80030c6 <HAL_ADC_ConfigChannel+0x742>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a49      	ldr	r2, [pc, #292]	@ (80031e8 <HAL_ADC_ConfigChannel+0x864>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d101      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x746>
 80030c6:	4a49      	ldr	r2, [pc, #292]	@ (80031ec <HAL_ADC_ConfigChannel+0x868>)
 80030c8:	e000      	b.n	80030cc <HAL_ADC_ConfigChannel+0x748>
 80030ca:	4a43      	ldr	r2, [pc, #268]	@ (80031d8 <HAL_ADC_ConfigChannel+0x854>)
 80030cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030d4:	4619      	mov	r1, r3
 80030d6:	4610      	mov	r0, r2
 80030d8:	f7fe fd0f 	bl	8001afa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030dc:	4b44      	ldr	r3, [pc, #272]	@ (80031f0 <HAL_ADC_ConfigChannel+0x86c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	099b      	lsrs	r3, r3, #6
 80030e2:	4a44      	ldr	r2, [pc, #272]	@ (80031f4 <HAL_ADC_ConfigChannel+0x870>)
 80030e4:	fba2 2303 	umull	r2, r3, r2, r3
 80030e8:	099b      	lsrs	r3, r3, #6
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030f6:	e002      	b.n	80030fe <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1f9      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003104:	e05a      	b.n	80031bc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a3b      	ldr	r2, [pc, #236]	@ (80031f8 <HAL_ADC_ConfigChannel+0x874>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d125      	bne.n	800315c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003110:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003114:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d11f      	bne.n	800315c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a31      	ldr	r2, [pc, #196]	@ (80031e8 <HAL_ADC_ConfigChannel+0x864>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d104      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x7ac>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a34      	ldr	r2, [pc, #208]	@ (80031fc <HAL_ADC_ConfigChannel+0x878>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d047      	beq.n	80031c0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003138:	d004      	beq.n	8003144 <HAL_ADC_ConfigChannel+0x7c0>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a2a      	ldr	r2, [pc, #168]	@ (80031e8 <HAL_ADC_ConfigChannel+0x864>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d101      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x7c4>
 8003144:	4a29      	ldr	r2, [pc, #164]	@ (80031ec <HAL_ADC_ConfigChannel+0x868>)
 8003146:	e000      	b.n	800314a <HAL_ADC_ConfigChannel+0x7c6>
 8003148:	4a23      	ldr	r2, [pc, #140]	@ (80031d8 <HAL_ADC_ConfigChannel+0x854>)
 800314a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800314e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003152:	4619      	mov	r1, r3
 8003154:	4610      	mov	r0, r2
 8003156:	f7fe fcd0 	bl	8001afa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800315a:	e031      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a27      	ldr	r2, [pc, #156]	@ (8003200 <HAL_ADC_ConfigChannel+0x87c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d12d      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003166:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800316a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d127      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a1c      	ldr	r2, [pc, #112]	@ (80031e8 <HAL_ADC_ConfigChannel+0x864>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d022      	beq.n	80031c2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003184:	d004      	beq.n	8003190 <HAL_ADC_ConfigChannel+0x80c>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a17      	ldr	r2, [pc, #92]	@ (80031e8 <HAL_ADC_ConfigChannel+0x864>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d101      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x810>
 8003190:	4a16      	ldr	r2, [pc, #88]	@ (80031ec <HAL_ADC_ConfigChannel+0x868>)
 8003192:	e000      	b.n	8003196 <HAL_ADC_ConfigChannel+0x812>
 8003194:	4a10      	ldr	r2, [pc, #64]	@ (80031d8 <HAL_ADC_ConfigChannel+0x854>)
 8003196:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800319a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800319e:	4619      	mov	r1, r3
 80031a0:	4610      	mov	r0, r2
 80031a2:	f7fe fcaa 	bl	8001afa <LL_ADC_SetCommonPathInternalCh>
 80031a6:	e00c      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ac:	f043 0220 	orr.w	r2, r3, #32
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80031ba:	e002      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031bc:	bf00      	nop
 80031be:	e000      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80031ca:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	37d8      	adds	r7, #216	@ 0xd8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	50000700 	.word	0x50000700
 80031dc:	c3210000 	.word	0xc3210000
 80031e0:	90c00010 	.word	0x90c00010
 80031e4:	50000600 	.word	0x50000600
 80031e8:	50000100 	.word	0x50000100
 80031ec:	50000300 	.word	0x50000300
 80031f0:	20000004 	.word	0x20000004
 80031f4:	053e2d63 	.word	0x053e2d63
 80031f8:	c7520000 	.word	0xc7520000
 80031fc:	50000500 	.word	0x50000500
 8003200:	cb840000 	.word	0xcb840000

08003204 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800320c:	2300      	movs	r3, #0
 800320e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f7fe fe4f 	bl	8001eb8 <LL_ADC_IsEnabled>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d176      	bne.n	800330e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	4b3c      	ldr	r3, [pc, #240]	@ (8003318 <ADC_Enable+0x114>)
 8003228:	4013      	ands	r3, r2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00d      	beq.n	800324a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003232:	f043 0210 	orr.w	r2, r3, #16
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800323e:	f043 0201 	orr.w	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e062      	b.n	8003310 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7fe fe1e 	bl	8001e90 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800325c:	d004      	beq.n	8003268 <ADC_Enable+0x64>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a2e      	ldr	r2, [pc, #184]	@ (800331c <ADC_Enable+0x118>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d101      	bne.n	800326c <ADC_Enable+0x68>
 8003268:	4b2d      	ldr	r3, [pc, #180]	@ (8003320 <ADC_Enable+0x11c>)
 800326a:	e000      	b.n	800326e <ADC_Enable+0x6a>
 800326c:	4b2d      	ldr	r3, [pc, #180]	@ (8003324 <ADC_Enable+0x120>)
 800326e:	4618      	mov	r0, r3
 8003270:	f7fe fc56 	bl	8001b20 <LL_ADC_GetCommonPathInternalCh>
 8003274:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003276:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800327a:	2b00      	cmp	r3, #0
 800327c:	d013      	beq.n	80032a6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800327e:	4b2a      	ldr	r3, [pc, #168]	@ (8003328 <ADC_Enable+0x124>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	099b      	lsrs	r3, r3, #6
 8003284:	4a29      	ldr	r2, [pc, #164]	@ (800332c <ADC_Enable+0x128>)
 8003286:	fba2 2303 	umull	r2, r3, r2, r3
 800328a:	099b      	lsrs	r3, r3, #6
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	4613      	mov	r3, r2
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003298:	e002      	b.n	80032a0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	3b01      	subs	r3, #1
 800329e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f9      	bne.n	800329a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80032a6:	f7fe fc09 	bl	8001abc <HAL_GetTick>
 80032aa:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032ac:	e028      	b.n	8003300 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fe fe00 	bl	8001eb8 <LL_ADC_IsEnabled>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d104      	bne.n	80032c8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe fde4 	bl	8001e90 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032c8:	f7fe fbf8 	bl	8001abc <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d914      	bls.n	8003300 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d00d      	beq.n	8003300 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e8:	f043 0210 	orr.w	r2, r3, #16
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032f4:	f043 0201 	orr.w	r2, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e007      	b.n	8003310 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b01      	cmp	r3, #1
 800330c:	d1cf      	bne.n	80032ae <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	8000003f 	.word	0x8000003f
 800331c:	50000100 	.word	0x50000100
 8003320:	50000300 	.word	0x50000300
 8003324:	50000700 	.word	0x50000700
 8003328:	20000004 	.word	0x20000004
 800332c:	053e2d63 	.word	0x053e2d63

08003330 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003342:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003346:	2b00      	cmp	r3, #0
 8003348:	d14b      	bne.n	80033e2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b00      	cmp	r3, #0
 8003362:	d021      	beq.n	80033a8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7fe fc85 	bl	8001c78 <LL_ADC_REG_IsTriggerSourceSWStart>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d032      	beq.n	80033da <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d12b      	bne.n	80033da <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003386:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003392:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d11f      	bne.n	80033da <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339e:	f043 0201 	orr.w	r2, r3, #1
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80033a6:	e018      	b.n	80033da <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d111      	bne.n	80033da <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d105      	bne.n	80033da <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d2:	f043 0201 	orr.w	r2, r3, #1
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f7ff faaa 	bl	8002934 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80033e0:	e00e      	b.n	8003400 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e6:	f003 0310 	and.w	r3, r3, #16
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f7ff fabe 	bl	8002970 <HAL_ADC_ErrorCallback>
}
 80033f4:	e004      	b.n	8003400 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	4798      	blx	r3
}
 8003400:	bf00      	nop
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003414:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f7ff fa96 	bl	8002948 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800341c:	bf00      	nop
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003430:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003436:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003442:	f043 0204 	orr.w	r2, r3, #4
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f7ff fa90 	bl	8002970 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003450:	bf00      	nop
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <LL_ADC_IsEnabled>:
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <LL_ADC_IsEnabled+0x18>
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <LL_ADC_IsEnabled+0x1a>
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <LL_ADC_REG_IsConversionOngoing>:
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b04      	cmp	r3, #4
 8003490:	d101      	bne.n	8003496 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003508:	b590      	push	{r4, r7, lr}
 800350a:	b0a1      	sub	sp, #132	@ 0x84
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003522:	2302      	movs	r3, #2
 8003524:	e0e7      	b.n	80036f6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800352e:	2300      	movs	r3, #0
 8003530:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003532:	2300      	movs	r3, #0
 8003534:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800353e:	d102      	bne.n	8003546 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003540:	4b6f      	ldr	r3, [pc, #444]	@ (8003700 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	e009      	b.n	800355a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a6e      	ldr	r2, [pc, #440]	@ (8003704 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d102      	bne.n	8003556 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003550:	4b6d      	ldr	r3, [pc, #436]	@ (8003708 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	e001      	b.n	800355a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003556:	2300      	movs	r3, #0
 8003558:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10b      	bne.n	8003578 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003564:	f043 0220 	orr.w	r2, r3, #32
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e0be      	b.n	80036f6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff ff7f 	bl	800347e <LL_ADC_REG_IsConversionOngoing>
 8003580:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff ff79 	bl	800347e <LL_ADC_REG_IsConversionOngoing>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	f040 80a0 	bne.w	80036d4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003594:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003596:	2b00      	cmp	r3, #0
 8003598:	f040 809c 	bne.w	80036d4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035a4:	d004      	beq.n	80035b0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a55      	ldr	r2, [pc, #340]	@ (8003700 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d101      	bne.n	80035b4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80035b0:	4b56      	ldr	r3, [pc, #344]	@ (800370c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80035b2:	e000      	b.n	80035b6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80035b4:	4b56      	ldr	r3, [pc, #344]	@ (8003710 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80035b6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d04b      	beq.n	8003658 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80035c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	6859      	ldr	r1, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80035d2:	035b      	lsls	r3, r3, #13
 80035d4:	430b      	orrs	r3, r1
 80035d6:	431a      	orrs	r2, r3
 80035d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035da:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035e4:	d004      	beq.n	80035f0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a45      	ldr	r2, [pc, #276]	@ (8003700 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d10f      	bne.n	8003610 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80035f0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80035f4:	f7ff ff30 	bl	8003458 <LL_ADC_IsEnabled>
 80035f8:	4604      	mov	r4, r0
 80035fa:	4841      	ldr	r0, [pc, #260]	@ (8003700 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035fc:	f7ff ff2c 	bl	8003458 <LL_ADC_IsEnabled>
 8003600:	4603      	mov	r3, r0
 8003602:	4323      	orrs	r3, r4
 8003604:	2b00      	cmp	r3, #0
 8003606:	bf0c      	ite	eq
 8003608:	2301      	moveq	r3, #1
 800360a:	2300      	movne	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	e012      	b.n	8003636 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003610:	483c      	ldr	r0, [pc, #240]	@ (8003704 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003612:	f7ff ff21 	bl	8003458 <LL_ADC_IsEnabled>
 8003616:	4604      	mov	r4, r0
 8003618:	483b      	ldr	r0, [pc, #236]	@ (8003708 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800361a:	f7ff ff1d 	bl	8003458 <LL_ADC_IsEnabled>
 800361e:	4603      	mov	r3, r0
 8003620:	431c      	orrs	r4, r3
 8003622:	483c      	ldr	r0, [pc, #240]	@ (8003714 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003624:	f7ff ff18 	bl	8003458 <LL_ADC_IsEnabled>
 8003628:	4603      	mov	r3, r0
 800362a:	4323      	orrs	r3, r4
 800362c:	2b00      	cmp	r3, #0
 800362e:	bf0c      	ite	eq
 8003630:	2301      	moveq	r3, #1
 8003632:	2300      	movne	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d056      	beq.n	80036e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800363a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003642:	f023 030f 	bic.w	r3, r3, #15
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	6811      	ldr	r1, [r2, #0]
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	6892      	ldr	r2, [r2, #8]
 800364e:	430a      	orrs	r2, r1
 8003650:	431a      	orrs	r2, r3
 8003652:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003654:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003656:	e047      	b.n	80036e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003658:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003660:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003662:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800366c:	d004      	beq.n	8003678 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a23      	ldr	r2, [pc, #140]	@ (8003700 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d10f      	bne.n	8003698 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003678:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800367c:	f7ff feec 	bl	8003458 <LL_ADC_IsEnabled>
 8003680:	4604      	mov	r4, r0
 8003682:	481f      	ldr	r0, [pc, #124]	@ (8003700 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003684:	f7ff fee8 	bl	8003458 <LL_ADC_IsEnabled>
 8003688:	4603      	mov	r3, r0
 800368a:	4323      	orrs	r3, r4
 800368c:	2b00      	cmp	r3, #0
 800368e:	bf0c      	ite	eq
 8003690:	2301      	moveq	r3, #1
 8003692:	2300      	movne	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	e012      	b.n	80036be <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003698:	481a      	ldr	r0, [pc, #104]	@ (8003704 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800369a:	f7ff fedd 	bl	8003458 <LL_ADC_IsEnabled>
 800369e:	4604      	mov	r4, r0
 80036a0:	4819      	ldr	r0, [pc, #100]	@ (8003708 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80036a2:	f7ff fed9 	bl	8003458 <LL_ADC_IsEnabled>
 80036a6:	4603      	mov	r3, r0
 80036a8:	431c      	orrs	r4, r3
 80036aa:	481a      	ldr	r0, [pc, #104]	@ (8003714 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80036ac:	f7ff fed4 	bl	8003458 <LL_ADC_IsEnabled>
 80036b0:	4603      	mov	r3, r0
 80036b2:	4323      	orrs	r3, r4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bf0c      	ite	eq
 80036b8:	2301      	moveq	r3, #1
 80036ba:	2300      	movne	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d012      	beq.n	80036e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80036c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80036ca:	f023 030f 	bic.w	r3, r3, #15
 80036ce:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80036d0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036d2:	e009      	b.n	80036e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d8:	f043 0220 	orr.w	r2, r3, #32
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80036e6:	e000      	b.n	80036ea <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80036f2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3784      	adds	r7, #132	@ 0x84
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd90      	pop	{r4, r7, pc}
 80036fe:	bf00      	nop
 8003700:	50000100 	.word	0x50000100
 8003704:	50000400 	.word	0x50000400
 8003708:	50000500 	.word	0x50000500
 800370c:	50000300 	.word	0x50000300
 8003710:	50000700 	.word	0x50000700
 8003714:	50000600 	.word	0x50000600

08003718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003728:	4b0c      	ldr	r3, [pc, #48]	@ (800375c <__NVIC_SetPriorityGrouping+0x44>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003734:	4013      	ands	r3, r2
 8003736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003740:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003744:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800374a:	4a04      	ldr	r2, [pc, #16]	@ (800375c <__NVIC_SetPriorityGrouping+0x44>)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	60d3      	str	r3, [r2, #12]
}
 8003750:	bf00      	nop
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	e000ed00 	.word	0xe000ed00

08003760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003764:	4b04      	ldr	r3, [pc, #16]	@ (8003778 <__NVIC_GetPriorityGrouping+0x18>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	0a1b      	lsrs	r3, r3, #8
 800376a:	f003 0307 	and.w	r3, r3, #7
}
 800376e:	4618      	mov	r0, r3
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	e000ed00 	.word	0xe000ed00

0800377c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378a:	2b00      	cmp	r3, #0
 800378c:	db0b      	blt.n	80037a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	f003 021f 	and.w	r2, r3, #31
 8003794:	4907      	ldr	r1, [pc, #28]	@ (80037b4 <__NVIC_EnableIRQ+0x38>)
 8003796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	2001      	movs	r0, #1
 800379e:	fa00 f202 	lsl.w	r2, r0, r2
 80037a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	e000e100 	.word	0xe000e100

080037b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	6039      	str	r1, [r7, #0]
 80037c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	db0a      	blt.n	80037e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	490c      	ldr	r1, [pc, #48]	@ (8003804 <__NVIC_SetPriority+0x4c>)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	0112      	lsls	r2, r2, #4
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	440b      	add	r3, r1
 80037dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037e0:	e00a      	b.n	80037f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	4908      	ldr	r1, [pc, #32]	@ (8003808 <__NVIC_SetPriority+0x50>)
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	3b04      	subs	r3, #4
 80037f0:	0112      	lsls	r2, r2, #4
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	440b      	add	r3, r1
 80037f6:	761a      	strb	r2, [r3, #24]
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000e100 	.word	0xe000e100
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800380c:	b480      	push	{r7}
 800380e:	b089      	sub	sp, #36	@ 0x24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f1c3 0307 	rsb	r3, r3, #7
 8003826:	2b04      	cmp	r3, #4
 8003828:	bf28      	it	cs
 800382a:	2304      	movcs	r3, #4
 800382c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	3304      	adds	r3, #4
 8003832:	2b06      	cmp	r3, #6
 8003834:	d902      	bls.n	800383c <NVIC_EncodePriority+0x30>
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	3b03      	subs	r3, #3
 800383a:	e000      	b.n	800383e <NVIC_EncodePriority+0x32>
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003840:	f04f 32ff 	mov.w	r2, #4294967295
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43da      	mvns	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	401a      	ands	r2, r3
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003854:	f04f 31ff 	mov.w	r1, #4294967295
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	fa01 f303 	lsl.w	r3, r1, r3
 800385e:	43d9      	mvns	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003864:	4313      	orrs	r3, r2
         );
}
 8003866:	4618      	mov	r0, r3
 8003868:	3724      	adds	r7, #36	@ 0x24
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
	...

08003874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3b01      	subs	r3, #1
 8003880:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003884:	d301      	bcc.n	800388a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003886:	2301      	movs	r3, #1
 8003888:	e00f      	b.n	80038aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800388a:	4a0a      	ldr	r2, [pc, #40]	@ (80038b4 <SysTick_Config+0x40>)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3b01      	subs	r3, #1
 8003890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003892:	210f      	movs	r1, #15
 8003894:	f04f 30ff 	mov.w	r0, #4294967295
 8003898:	f7ff ff8e 	bl	80037b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800389c:	4b05      	ldr	r3, [pc, #20]	@ (80038b4 <SysTick_Config+0x40>)
 800389e:	2200      	movs	r2, #0
 80038a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038a2:	4b04      	ldr	r3, [pc, #16]	@ (80038b4 <SysTick_Config+0x40>)
 80038a4:	2207      	movs	r2, #7
 80038a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	e000e010 	.word	0xe000e010

080038b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff ff29 	bl	8003718 <__NVIC_SetPriorityGrouping>
}
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b086      	sub	sp, #24
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	4603      	mov	r3, r0
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	607a      	str	r2, [r7, #4]
 80038da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038dc:	f7ff ff40 	bl	8003760 <__NVIC_GetPriorityGrouping>
 80038e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	6978      	ldr	r0, [r7, #20]
 80038e8:	f7ff ff90 	bl	800380c <NVIC_EncodePriority>
 80038ec:	4602      	mov	r2, r0
 80038ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038f2:	4611      	mov	r1, r2
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff ff5f 	bl	80037b8 <__NVIC_SetPriority>
}
 80038fa:	bf00      	nop
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b082      	sub	sp, #8
 8003906:	af00      	add	r7, sp, #0
 8003908:	4603      	mov	r3, r0
 800390a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800390c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff ff33 	bl	800377c <__NVIC_EnableIRQ>
}
 8003916:	bf00      	nop
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff ffa4 	bl	8003874 <SysTick_Config>
 800392c:	4603      	mov	r3, r0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
	...

08003938 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e08d      	b.n	8003a66 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	461a      	mov	r2, r3
 8003950:	4b47      	ldr	r3, [pc, #284]	@ (8003a70 <HAL_DMA_Init+0x138>)
 8003952:	429a      	cmp	r2, r3
 8003954:	d80f      	bhi.n	8003976 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	4b45      	ldr	r3, [pc, #276]	@ (8003a74 <HAL_DMA_Init+0x13c>)
 800395e:	4413      	add	r3, r2
 8003960:	4a45      	ldr	r2, [pc, #276]	@ (8003a78 <HAL_DMA_Init+0x140>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	009a      	lsls	r2, r3, #2
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a42      	ldr	r2, [pc, #264]	@ (8003a7c <HAL_DMA_Init+0x144>)
 8003972:	641a      	str	r2, [r3, #64]	@ 0x40
 8003974:	e00e      	b.n	8003994 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	4b40      	ldr	r3, [pc, #256]	@ (8003a80 <HAL_DMA_Init+0x148>)
 800397e:	4413      	add	r3, r2
 8003980:	4a3d      	ldr	r2, [pc, #244]	@ (8003a78 <HAL_DMA_Init+0x140>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	091b      	lsrs	r3, r3, #4
 8003988:	009a      	lsls	r2, r3, #2
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a3c      	ldr	r2, [pc, #240]	@ (8003a84 <HAL_DMA_Init+0x14c>)
 8003992:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80039aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80039b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fa76 	bl	8003ed8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039f4:	d102      	bne.n	80039fc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a10:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d010      	beq.n	8003a3c <HAL_DMA_Init+0x104>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d80c      	bhi.n	8003a3c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 fa96 	bl	8003f54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a38:	605a      	str	r2, [r3, #4]
 8003a3a:	e008      	b.n	8003a4e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40020407 	.word	0x40020407
 8003a74:	bffdfff8 	.word	0xbffdfff8
 8003a78:	cccccccd 	.word	0xcccccccd
 8003a7c:	40020000 	.word	0x40020000
 8003a80:	bffdfbf8 	.word	0xbffdfbf8
 8003a84:	40020400 	.word	0x40020400

08003a88 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
 8003a94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_DMA_Start_IT+0x20>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e066      	b.n	8003b76 <HAL_DMA_Start_IT+0xee>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d155      	bne.n	8003b68 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0201 	bic.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	68b9      	ldr	r1, [r7, #8]
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f9bb 	bl	8003e5c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d008      	beq.n	8003b00 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f042 020e 	orr.w	r2, r2, #14
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	e00f      	b.n	8003b20 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0204 	bic.w	r2, r2, #4
 8003b0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 020a 	orr.w	r2, r2, #10
 8003b1e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d007      	beq.n	8003b3e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b3c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d007      	beq.n	8003b56 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b54:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0201 	orr.w	r2, r2, #1
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	e005      	b.n	8003b74 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b70:	2302      	movs	r3, #2
 8003b72:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b085      	sub	sp, #20
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d005      	beq.n	8003ba2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2204      	movs	r2, #4
 8003b9a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	73fb      	strb	r3, [r7, #15]
 8003ba0:	e037      	b.n	8003c12 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 020e 	bic.w	r2, r2, #14
 8003bb0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bc0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0201 	bic.w	r2, r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd6:	f003 021f 	and.w	r2, r3, #31
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bde:	2101      	movs	r1, #1
 8003be0:	fa01 f202 	lsl.w	r2, r1, r2
 8003be4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003bee:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00c      	beq.n	8003c12 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c02:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c06:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c10:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d00d      	beq.n	8003c64 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2204      	movs	r2, #4
 8003c4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	73fb      	strb	r3, [r7, #15]
 8003c62:	e047      	b.n	8003cf4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 020e 	bic.w	r2, r2, #14
 8003c72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0201 	bic.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c8e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c98:	f003 021f 	and.w	r2, r3, #31
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003cb0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00c      	beq.n	8003cd4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cc8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003cd2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	4798      	blx	r3
    }
  }
  return status;
 8003cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b084      	sub	sp, #16
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	2204      	movs	r2, #4
 8003d20:	409a      	lsls	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4013      	ands	r3, r2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d026      	beq.n	8003d78 <HAL_DMA_IRQHandler+0x7a>
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d021      	beq.n	8003d78 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d107      	bne.n	8003d52 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0204 	bic.w	r2, r2, #4
 8003d50:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d56:	f003 021f 	and.w	r2, r3, #31
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5e:	2104      	movs	r1, #4
 8003d60:	fa01 f202 	lsl.w	r2, r1, r2
 8003d64:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d071      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003d76:	e06c      	b.n	8003e52 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	2202      	movs	r2, #2
 8003d82:	409a      	lsls	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4013      	ands	r3, r2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d02e      	beq.n	8003dea <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d029      	beq.n	8003dea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0320 	and.w	r3, r3, #32
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10b      	bne.n	8003dbc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 020a 	bic.w	r2, r2, #10
 8003db2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc0:	f003 021f 	and.w	r2, r3, #31
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc8:	2102      	movs	r1, #2
 8003dca:	fa01 f202 	lsl.w	r2, r1, r2
 8003dce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d038      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003de8:	e033      	b.n	8003e52 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dee:	f003 031f 	and.w	r3, r3, #31
 8003df2:	2208      	movs	r2, #8
 8003df4:	409a      	lsls	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d02a      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d025      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 020e 	bic.w	r2, r2, #14
 8003e16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1c:	f003 021f 	and.w	r2, r3, #31
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e24:	2101      	movs	r1, #1
 8003e26:	fa01 f202 	lsl.w	r2, r1, r2
 8003e2a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d004      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e52:	bf00      	nop
 8003e54:	bf00      	nop
}
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e72:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d004      	beq.n	8003e86 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e84:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8a:	f003 021f 	and.w	r2, r3, #31
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	2101      	movs	r1, #1
 8003e94:	fa01 f202 	lsl.w	r2, r1, r2
 8003e98:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	2b10      	cmp	r3, #16
 8003ea8:	d108      	bne.n	8003ebc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003eba:	e007      	b.n	8003ecc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	60da      	str	r2, [r3, #12]
}
 8003ecc:	bf00      	nop
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4b16      	ldr	r3, [pc, #88]	@ (8003f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d802      	bhi.n	8003ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003eec:	4b15      	ldr	r3, [pc, #84]	@ (8003f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	e001      	b.n	8003ef6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003ef2:	4b15      	ldr	r3, [pc, #84]	@ (8003f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003ef4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	3b08      	subs	r3, #8
 8003f02:	4a12      	ldr	r2, [pc, #72]	@ (8003f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003f04:	fba2 2303 	umull	r2, r3, r2, r3
 8003f08:	091b      	lsrs	r3, r3, #4
 8003f0a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f10:	089b      	lsrs	r3, r3, #2
 8003f12:	009a      	lsls	r2, r3, #2
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	4413      	add	r3, r2
 8003f18:	461a      	mov	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a0b      	ldr	r2, [pc, #44]	@ (8003f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003f22:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f003 031f 	and.w	r3, r3, #31
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	409a      	lsls	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f32:	bf00      	nop
 8003f34:	371c      	adds	r7, #28
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40020407 	.word	0x40020407
 8003f44:	40020800 	.word	0x40020800
 8003f48:	40020820 	.word	0x40020820
 8003f4c:	cccccccd 	.word	0xcccccccd
 8003f50:	40020880 	.word	0x40020880

08003f54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4b0b      	ldr	r3, [pc, #44]	@ (8003f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a08      	ldr	r2, [pc, #32]	@ (8003f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f76:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	f003 031f 	and.w	r3, r3, #31
 8003f80:	2201      	movs	r2, #1
 8003f82:	409a      	lsls	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003f88:	bf00      	nop
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	1000823f 	.word	0x1000823f
 8003f98:	40020940 	.word	0x40020940

08003f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003faa:	e15a      	b.n	8004262 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb8:	4013      	ands	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 814c 	beq.w	800425c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 0303 	and.w	r3, r3, #3
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d005      	beq.n	8003fdc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d130      	bne.n	800403e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	43db      	mvns	r3, r3
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004012:	2201      	movs	r2, #1
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	43db      	mvns	r3, r3
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4013      	ands	r3, r2
 8004020:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	091b      	lsrs	r3, r3, #4
 8004028:	f003 0201 	and.w	r2, r3, #1
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	4313      	orrs	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	2b03      	cmp	r3, #3
 8004048:	d017      	beq.n	800407a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	2203      	movs	r2, #3
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	43db      	mvns	r3, r3
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4013      	ands	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d123      	bne.n	80040ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	08da      	lsrs	r2, r3, #3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3208      	adds	r2, #8
 800408e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004092:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	220f      	movs	r2, #15
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	43db      	mvns	r3, r3
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4013      	ands	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	08da      	lsrs	r2, r3, #3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3208      	adds	r2, #8
 80040c8:	6939      	ldr	r1, [r7, #16]
 80040ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	2203      	movs	r2, #3
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43db      	mvns	r3, r3
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4013      	ands	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f003 0203 	and.w	r2, r3, #3
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 80a6 	beq.w	800425c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004110:	4b5b      	ldr	r3, [pc, #364]	@ (8004280 <HAL_GPIO_Init+0x2e4>)
 8004112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004114:	4a5a      	ldr	r2, [pc, #360]	@ (8004280 <HAL_GPIO_Init+0x2e4>)
 8004116:	f043 0301 	orr.w	r3, r3, #1
 800411a:	6613      	str	r3, [r2, #96]	@ 0x60
 800411c:	4b58      	ldr	r3, [pc, #352]	@ (8004280 <HAL_GPIO_Init+0x2e4>)
 800411e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004128:	4a56      	ldr	r2, [pc, #344]	@ (8004284 <HAL_GPIO_Init+0x2e8>)
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	089b      	lsrs	r3, r3, #2
 800412e:	3302      	adds	r3, #2
 8004130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004134:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f003 0303 	and.w	r3, r3, #3
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	220f      	movs	r2, #15
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	43db      	mvns	r3, r3
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4013      	ands	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004152:	d01f      	beq.n	8004194 <HAL_GPIO_Init+0x1f8>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a4c      	ldr	r2, [pc, #304]	@ (8004288 <HAL_GPIO_Init+0x2ec>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d019      	beq.n	8004190 <HAL_GPIO_Init+0x1f4>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a4b      	ldr	r2, [pc, #300]	@ (800428c <HAL_GPIO_Init+0x2f0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d013      	beq.n	800418c <HAL_GPIO_Init+0x1f0>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a4a      	ldr	r2, [pc, #296]	@ (8004290 <HAL_GPIO_Init+0x2f4>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d00d      	beq.n	8004188 <HAL_GPIO_Init+0x1ec>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a49      	ldr	r2, [pc, #292]	@ (8004294 <HAL_GPIO_Init+0x2f8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d007      	beq.n	8004184 <HAL_GPIO_Init+0x1e8>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a48      	ldr	r2, [pc, #288]	@ (8004298 <HAL_GPIO_Init+0x2fc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d101      	bne.n	8004180 <HAL_GPIO_Init+0x1e4>
 800417c:	2305      	movs	r3, #5
 800417e:	e00a      	b.n	8004196 <HAL_GPIO_Init+0x1fa>
 8004180:	2306      	movs	r3, #6
 8004182:	e008      	b.n	8004196 <HAL_GPIO_Init+0x1fa>
 8004184:	2304      	movs	r3, #4
 8004186:	e006      	b.n	8004196 <HAL_GPIO_Init+0x1fa>
 8004188:	2303      	movs	r3, #3
 800418a:	e004      	b.n	8004196 <HAL_GPIO_Init+0x1fa>
 800418c:	2302      	movs	r3, #2
 800418e:	e002      	b.n	8004196 <HAL_GPIO_Init+0x1fa>
 8004190:	2301      	movs	r3, #1
 8004192:	e000      	b.n	8004196 <HAL_GPIO_Init+0x1fa>
 8004194:	2300      	movs	r3, #0
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	f002 0203 	and.w	r2, r2, #3
 800419c:	0092      	lsls	r2, r2, #2
 800419e:	4093      	lsls	r3, r2
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041a6:	4937      	ldr	r1, [pc, #220]	@ (8004284 <HAL_GPIO_Init+0x2e8>)
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	089b      	lsrs	r3, r3, #2
 80041ac:	3302      	adds	r3, #2
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041b4:	4b39      	ldr	r3, [pc, #228]	@ (800429c <HAL_GPIO_Init+0x300>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	43db      	mvns	r3, r3
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	4013      	ands	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041d8:	4a30      	ldr	r2, [pc, #192]	@ (800429c <HAL_GPIO_Init+0x300>)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041de:	4b2f      	ldr	r3, [pc, #188]	@ (800429c <HAL_GPIO_Init+0x300>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	43db      	mvns	r3, r3
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4013      	ands	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4313      	orrs	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004202:	4a26      	ldr	r2, [pc, #152]	@ (800429c <HAL_GPIO_Init+0x300>)
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004208:	4b24      	ldr	r3, [pc, #144]	@ (800429c <HAL_GPIO_Init+0x300>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	43db      	mvns	r3, r3
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4013      	ands	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800422c:	4a1b      	ldr	r2, [pc, #108]	@ (800429c <HAL_GPIO_Init+0x300>)
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004232:	4b1a      	ldr	r3, [pc, #104]	@ (800429c <HAL_GPIO_Init+0x300>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	43db      	mvns	r3, r3
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4013      	ands	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004256:	4a11      	ldr	r2, [pc, #68]	@ (800429c <HAL_GPIO_Init+0x300>)
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	3301      	adds	r3, #1
 8004260:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	fa22 f303 	lsr.w	r3, r2, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	f47f ae9d 	bne.w	8003fac <HAL_GPIO_Init+0x10>
  }
}
 8004272:	bf00      	nop
 8004274:	bf00      	nop
 8004276:	371c      	adds	r7, #28
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	40021000 	.word	0x40021000
 8004284:	40010000 	.word	0x40010000
 8004288:	48000400 	.word	0x48000400
 800428c:	48000800 	.word	0x48000800
 8004290:	48000c00 	.word	0x48000c00
 8004294:	48001000 	.word	0x48001000
 8004298:	48001400 	.word	0x48001400
 800429c:	40010400 	.word	0x40010400

080042a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	807b      	strh	r3, [r7, #2]
 80042ac:	4613      	mov	r3, r2
 80042ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042b0:	787b      	ldrb	r3, [r7, #1]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042b6:	887a      	ldrh	r2, [r7, #2]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042bc:	e002      	b.n	80042c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042be:	887a      	ldrh	r2, [r7, #2]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042e2:	887a      	ldrh	r2, [r7, #2]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4013      	ands	r3, r2
 80042e8:	041a      	lsls	r2, r3, #16
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	43d9      	mvns	r1, r3
 80042ee:	887b      	ldrh	r3, [r7, #2]
 80042f0:	400b      	ands	r3, r1
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	619a      	str	r2, [r3, #24]
}
 80042f8:	bf00      	nop
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	4603      	mov	r3, r0
 800430c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800430e:	4b08      	ldr	r3, [pc, #32]	@ (8004330 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004310:	695a      	ldr	r2, [r3, #20]
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	4013      	ands	r3, r2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d006      	beq.n	8004328 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800431a:	4a05      	ldr	r2, [pc, #20]	@ (8004330 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800431c:	88fb      	ldrh	r3, [r7, #6]
 800431e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004320:	88fb      	ldrh	r3, [r7, #6]
 8004322:	4618      	mov	r0, r3
 8004324:	f7fc fed8 	bl	80010d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004328:	bf00      	nop
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40010400 	.word	0x40010400

08004334 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d141      	bne.n	80043c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004342:	4b4b      	ldr	r3, [pc, #300]	@ (8004470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800434a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800434e:	d131      	bne.n	80043b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004350:	4b47      	ldr	r3, [pc, #284]	@ (8004470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004356:	4a46      	ldr	r2, [pc, #280]	@ (8004470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800435c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004360:	4b43      	ldr	r3, [pc, #268]	@ (8004470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004368:	4a41      	ldr	r2, [pc, #260]	@ (8004470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800436a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800436e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004370:	4b40      	ldr	r3, [pc, #256]	@ (8004474 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2232      	movs	r2, #50	@ 0x32
 8004376:	fb02 f303 	mul.w	r3, r2, r3
 800437a:	4a3f      	ldr	r2, [pc, #252]	@ (8004478 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800437c:	fba2 2303 	umull	r2, r3, r2, r3
 8004380:	0c9b      	lsrs	r3, r3, #18
 8004382:	3301      	adds	r3, #1
 8004384:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004386:	e002      	b.n	800438e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	3b01      	subs	r3, #1
 800438c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800438e:	4b38      	ldr	r3, [pc, #224]	@ (8004470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004396:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800439a:	d102      	bne.n	80043a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f2      	bne.n	8004388 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043a2:	4b33      	ldr	r3, [pc, #204]	@ (8004470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ae:	d158      	bne.n	8004462 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e057      	b.n	8004464 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043b4:	4b2e      	ldr	r3, [pc, #184]	@ (8004470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043ba:	4a2d      	ldr	r2, [pc, #180]	@ (8004470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80043c4:	e04d      	b.n	8004462 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043cc:	d141      	bne.n	8004452 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043ce:	4b28      	ldr	r3, [pc, #160]	@ (8004470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80043d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043da:	d131      	bne.n	8004440 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043dc:	4b24      	ldr	r3, [pc, #144]	@ (8004470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043e2:	4a23      	ldr	r2, [pc, #140]	@ (8004470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043ec:	4b20      	ldr	r3, [pc, #128]	@ (8004470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004474 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2232      	movs	r2, #50	@ 0x32
 8004402:	fb02 f303 	mul.w	r3, r2, r3
 8004406:	4a1c      	ldr	r2, [pc, #112]	@ (8004478 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004408:	fba2 2303 	umull	r2, r3, r2, r3
 800440c:	0c9b      	lsrs	r3, r3, #18
 800440e:	3301      	adds	r3, #1
 8004410:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004412:	e002      	b.n	800441a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	3b01      	subs	r3, #1
 8004418:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800441a:	4b15      	ldr	r3, [pc, #84]	@ (8004470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004422:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004426:	d102      	bne.n	800442e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f2      	bne.n	8004414 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800442e:	4b10      	ldr	r3, [pc, #64]	@ (8004470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800443a:	d112      	bne.n	8004462 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e011      	b.n	8004464 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004440:	4b0b      	ldr	r3, [pc, #44]	@ (8004470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004442:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004446:	4a0a      	ldr	r2, [pc, #40]	@ (8004470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800444c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004450:	e007      	b.n	8004462 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004452:	4b07      	ldr	r3, [pc, #28]	@ (8004470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800445a:	4a05      	ldr	r2, [pc, #20]	@ (8004470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800445c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004460:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	40007000 	.word	0x40007000
 8004474:	20000004 	.word	0x20000004
 8004478:	431bde83 	.word	0x431bde83

0800447c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004480:	4b05      	ldr	r3, [pc, #20]	@ (8004498 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	4a04      	ldr	r2, [pc, #16]	@ (8004498 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004486:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800448a:	6093      	str	r3, [r2, #8]
}
 800448c:	bf00      	nop
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40007000 	.word	0x40007000

0800449c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e2fe      	b.n	8004aac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d075      	beq.n	80045a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044ba:	4b97      	ldr	r3, [pc, #604]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044c4:	4b94      	ldr	r3, [pc, #592]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f003 0303 	and.w	r3, r3, #3
 80044cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2b0c      	cmp	r3, #12
 80044d2:	d102      	bne.n	80044da <HAL_RCC_OscConfig+0x3e>
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d002      	beq.n	80044e0 <HAL_RCC_OscConfig+0x44>
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d10b      	bne.n	80044f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e0:	4b8d      	ldr	r3, [pc, #564]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d05b      	beq.n	80045a4 <HAL_RCC_OscConfig+0x108>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d157      	bne.n	80045a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e2d9      	b.n	8004aac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004500:	d106      	bne.n	8004510 <HAL_RCC_OscConfig+0x74>
 8004502:	4b85      	ldr	r3, [pc, #532]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a84      	ldr	r2, [pc, #528]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 8004508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	e01d      	b.n	800454c <HAL_RCC_OscConfig+0xb0>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004518:	d10c      	bne.n	8004534 <HAL_RCC_OscConfig+0x98>
 800451a:	4b7f      	ldr	r3, [pc, #508]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a7e      	ldr	r2, [pc, #504]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 8004520:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	4b7c      	ldr	r3, [pc, #496]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a7b      	ldr	r2, [pc, #492]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 800452c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	e00b      	b.n	800454c <HAL_RCC_OscConfig+0xb0>
 8004534:	4b78      	ldr	r3, [pc, #480]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a77      	ldr	r2, [pc, #476]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 800453a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	4b75      	ldr	r3, [pc, #468]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a74      	ldr	r2, [pc, #464]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 8004546:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800454a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d013      	beq.n	800457c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004554:	f7fd fab2 	bl	8001abc <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800455c:	f7fd faae 	bl	8001abc <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b64      	cmp	r3, #100	@ 0x64
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e29e      	b.n	8004aac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800456e:	4b6a      	ldr	r3, [pc, #424]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f0      	beq.n	800455c <HAL_RCC_OscConfig+0xc0>
 800457a:	e014      	b.n	80045a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457c:	f7fd fa9e 	bl	8001abc <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004584:	f7fd fa9a 	bl	8001abc <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b64      	cmp	r3, #100	@ 0x64
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e28a      	b.n	8004aac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004596:	4b60      	ldr	r3, [pc, #384]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1f0      	bne.n	8004584 <HAL_RCC_OscConfig+0xe8>
 80045a2:	e000      	b.n	80045a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d075      	beq.n	800469e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045b2:	4b59      	ldr	r3, [pc, #356]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 030c 	and.w	r3, r3, #12
 80045ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045bc:	4b56      	ldr	r3, [pc, #344]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f003 0303 	and.w	r3, r3, #3
 80045c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	2b0c      	cmp	r3, #12
 80045ca:	d102      	bne.n	80045d2 <HAL_RCC_OscConfig+0x136>
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d002      	beq.n	80045d8 <HAL_RCC_OscConfig+0x13c>
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d11f      	bne.n	8004618 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045d8:	4b4f      	ldr	r3, [pc, #316]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d005      	beq.n	80045f0 <HAL_RCC_OscConfig+0x154>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e25d      	b.n	8004aac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f0:	4b49      	ldr	r3, [pc, #292]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	061b      	lsls	r3, r3, #24
 80045fe:	4946      	ldr	r1, [pc, #280]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 8004600:	4313      	orrs	r3, r2
 8004602:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004604:	4b45      	ldr	r3, [pc, #276]	@ (800471c <HAL_RCC_OscConfig+0x280>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f7fd fa0b 	bl	8001a24 <HAL_InitTick>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d043      	beq.n	800469c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e249      	b.n	8004aac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d023      	beq.n	8004668 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004620:	4b3d      	ldr	r3, [pc, #244]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a3c      	ldr	r2, [pc, #240]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 8004626:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800462a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462c:	f7fd fa46 	bl	8001abc <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004634:	f7fd fa42 	bl	8001abc <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e232      	b.n	8004aac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004646:	4b34      	ldr	r3, [pc, #208]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004652:	4b31      	ldr	r3, [pc, #196]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	061b      	lsls	r3, r3, #24
 8004660:	492d      	ldr	r1, [pc, #180]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 8004662:	4313      	orrs	r3, r2
 8004664:	604b      	str	r3, [r1, #4]
 8004666:	e01a      	b.n	800469e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004668:	4b2b      	ldr	r3, [pc, #172]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a2a      	ldr	r2, [pc, #168]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 800466e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004674:	f7fd fa22 	bl	8001abc <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800467c:	f7fd fa1e 	bl	8001abc <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e20e      	b.n	8004aac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800468e:	4b22      	ldr	r3, [pc, #136]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f0      	bne.n	800467c <HAL_RCC_OscConfig+0x1e0>
 800469a:	e000      	b.n	800469e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800469c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d041      	beq.n	800472e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d01c      	beq.n	80046ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046b2:	4b19      	ldr	r3, [pc, #100]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 80046b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046b8:	4a17      	ldr	r2, [pc, #92]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 80046ba:	f043 0301 	orr.w	r3, r3, #1
 80046be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c2:	f7fd f9fb 	bl	8001abc <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ca:	f7fd f9f7 	bl	8001abc <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e1e7      	b.n	8004aac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046dc:	4b0e      	ldr	r3, [pc, #56]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 80046de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0ef      	beq.n	80046ca <HAL_RCC_OscConfig+0x22e>
 80046ea:	e020      	b.n	800472e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 80046ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046f2:	4a09      	ldr	r2, [pc, #36]	@ (8004718 <HAL_RCC_OscConfig+0x27c>)
 80046f4:	f023 0301 	bic.w	r3, r3, #1
 80046f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fc:	f7fd f9de 	bl	8001abc <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004702:	e00d      	b.n	8004720 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004704:	f7fd f9da 	bl	8001abc <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d906      	bls.n	8004720 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e1ca      	b.n	8004aac <HAL_RCC_OscConfig+0x610>
 8004716:	bf00      	nop
 8004718:	40021000 	.word	0x40021000
 800471c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004720:	4b8c      	ldr	r3, [pc, #560]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 8004722:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1ea      	bne.n	8004704 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0304 	and.w	r3, r3, #4
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 80a6 	beq.w	8004888 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800473c:	2300      	movs	r3, #0
 800473e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004740:	4b84      	ldr	r3, [pc, #528]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 8004742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d101      	bne.n	8004750 <HAL_RCC_OscConfig+0x2b4>
 800474c:	2301      	movs	r3, #1
 800474e:	e000      	b.n	8004752 <HAL_RCC_OscConfig+0x2b6>
 8004750:	2300      	movs	r3, #0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00d      	beq.n	8004772 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004756:	4b7f      	ldr	r3, [pc, #508]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 8004758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800475a:	4a7e      	ldr	r2, [pc, #504]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 800475c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004760:	6593      	str	r3, [r2, #88]	@ 0x58
 8004762:	4b7c      	ldr	r3, [pc, #496]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 8004764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800476e:	2301      	movs	r3, #1
 8004770:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004772:	4b79      	ldr	r3, [pc, #484]	@ (8004958 <HAL_RCC_OscConfig+0x4bc>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800477a:	2b00      	cmp	r3, #0
 800477c:	d118      	bne.n	80047b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800477e:	4b76      	ldr	r3, [pc, #472]	@ (8004958 <HAL_RCC_OscConfig+0x4bc>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a75      	ldr	r2, [pc, #468]	@ (8004958 <HAL_RCC_OscConfig+0x4bc>)
 8004784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800478a:	f7fd f997 	bl	8001abc <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004792:	f7fd f993 	bl	8001abc <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e183      	b.n	8004aac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047a4:	4b6c      	ldr	r3, [pc, #432]	@ (8004958 <HAL_RCC_OscConfig+0x4bc>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0f0      	beq.n	8004792 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d108      	bne.n	80047ca <HAL_RCC_OscConfig+0x32e>
 80047b8:	4b66      	ldr	r3, [pc, #408]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 80047ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047be:	4a65      	ldr	r2, [pc, #404]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 80047c0:	f043 0301 	orr.w	r3, r3, #1
 80047c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047c8:	e024      	b.n	8004814 <HAL_RCC_OscConfig+0x378>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	2b05      	cmp	r3, #5
 80047d0:	d110      	bne.n	80047f4 <HAL_RCC_OscConfig+0x358>
 80047d2:	4b60      	ldr	r3, [pc, #384]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 80047d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d8:	4a5e      	ldr	r2, [pc, #376]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 80047da:	f043 0304 	orr.w	r3, r3, #4
 80047de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047e2:	4b5c      	ldr	r3, [pc, #368]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 80047e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e8:	4a5a      	ldr	r2, [pc, #360]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 80047ea:	f043 0301 	orr.w	r3, r3, #1
 80047ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047f2:	e00f      	b.n	8004814 <HAL_RCC_OscConfig+0x378>
 80047f4:	4b57      	ldr	r3, [pc, #348]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 80047f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fa:	4a56      	ldr	r2, [pc, #344]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 80047fc:	f023 0301 	bic.w	r3, r3, #1
 8004800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004804:	4b53      	ldr	r3, [pc, #332]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 8004806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800480a:	4a52      	ldr	r2, [pc, #328]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 800480c:	f023 0304 	bic.w	r3, r3, #4
 8004810:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d016      	beq.n	800484a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481c:	f7fd f94e 	bl	8001abc <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004822:	e00a      	b.n	800483a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004824:	f7fd f94a 	bl	8001abc <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004832:	4293      	cmp	r3, r2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e138      	b.n	8004aac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800483a:	4b46      	ldr	r3, [pc, #280]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 800483c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0ed      	beq.n	8004824 <HAL_RCC_OscConfig+0x388>
 8004848:	e015      	b.n	8004876 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484a:	f7fd f937 	bl	8001abc <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004850:	e00a      	b.n	8004868 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004852:	f7fd f933 	bl	8001abc <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004860:	4293      	cmp	r3, r2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e121      	b.n	8004aac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004868:	4b3a      	ldr	r3, [pc, #232]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 800486a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1ed      	bne.n	8004852 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004876:	7ffb      	ldrb	r3, [r7, #31]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d105      	bne.n	8004888 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800487c:	4b35      	ldr	r3, [pc, #212]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 800487e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004880:	4a34      	ldr	r2, [pc, #208]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 8004882:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004886:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b00      	cmp	r3, #0
 8004892:	d03c      	beq.n	800490e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d01c      	beq.n	80048d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800489c:	4b2d      	ldr	r3, [pc, #180]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 800489e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048a2:	4a2c      	ldr	r2, [pc, #176]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 80048a4:	f043 0301 	orr.w	r3, r3, #1
 80048a8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ac:	f7fd f906 	bl	8001abc <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048b4:	f7fd f902 	bl	8001abc <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e0f2      	b.n	8004aac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048c6:	4b23      	ldr	r3, [pc, #140]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 80048c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0ef      	beq.n	80048b4 <HAL_RCC_OscConfig+0x418>
 80048d4:	e01b      	b.n	800490e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048d6:	4b1f      	ldr	r3, [pc, #124]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 80048d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 80048de:	f023 0301 	bic.w	r3, r3, #1
 80048e2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e6:	f7fd f8e9 	bl	8001abc <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048ec:	e008      	b.n	8004900 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ee:	f7fd f8e5 	bl	8001abc <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e0d5      	b.n	8004aac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004900:	4b14      	ldr	r3, [pc, #80]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 8004902:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1ef      	bne.n	80048ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 80c9 	beq.w	8004aaa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004918:	4b0e      	ldr	r3, [pc, #56]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f003 030c 	and.w	r3, r3, #12
 8004920:	2b0c      	cmp	r3, #12
 8004922:	f000 8083 	beq.w	8004a2c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	2b02      	cmp	r3, #2
 800492c:	d15e      	bne.n	80049ec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800492e:	4b09      	ldr	r3, [pc, #36]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a08      	ldr	r2, [pc, #32]	@ (8004954 <HAL_RCC_OscConfig+0x4b8>)
 8004934:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493a:	f7fd f8bf 	bl	8001abc <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004940:	e00c      	b.n	800495c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004942:	f7fd f8bb 	bl	8001abc <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d905      	bls.n	800495c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e0ab      	b.n	8004aac <HAL_RCC_OscConfig+0x610>
 8004954:	40021000 	.word	0x40021000
 8004958:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800495c:	4b55      	ldr	r3, [pc, #340]	@ (8004ab4 <HAL_RCC_OscConfig+0x618>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1ec      	bne.n	8004942 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004968:	4b52      	ldr	r3, [pc, #328]	@ (8004ab4 <HAL_RCC_OscConfig+0x618>)
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	4b52      	ldr	r3, [pc, #328]	@ (8004ab8 <HAL_RCC_OscConfig+0x61c>)
 800496e:	4013      	ands	r3, r2
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6a11      	ldr	r1, [r2, #32]
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004978:	3a01      	subs	r2, #1
 800497a:	0112      	lsls	r2, r2, #4
 800497c:	4311      	orrs	r1, r2
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004982:	0212      	lsls	r2, r2, #8
 8004984:	4311      	orrs	r1, r2
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800498a:	0852      	lsrs	r2, r2, #1
 800498c:	3a01      	subs	r2, #1
 800498e:	0552      	lsls	r2, r2, #21
 8004990:	4311      	orrs	r1, r2
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004996:	0852      	lsrs	r2, r2, #1
 8004998:	3a01      	subs	r2, #1
 800499a:	0652      	lsls	r2, r2, #25
 800499c:	4311      	orrs	r1, r2
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80049a2:	06d2      	lsls	r2, r2, #27
 80049a4:	430a      	orrs	r2, r1
 80049a6:	4943      	ldr	r1, [pc, #268]	@ (8004ab4 <HAL_RCC_OscConfig+0x618>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049ac:	4b41      	ldr	r3, [pc, #260]	@ (8004ab4 <HAL_RCC_OscConfig+0x618>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a40      	ldr	r2, [pc, #256]	@ (8004ab4 <HAL_RCC_OscConfig+0x618>)
 80049b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049b8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ab4 <HAL_RCC_OscConfig+0x618>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	4a3d      	ldr	r2, [pc, #244]	@ (8004ab4 <HAL_RCC_OscConfig+0x618>)
 80049be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c4:	f7fd f87a 	bl	8001abc <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049cc:	f7fd f876 	bl	8001abc <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e066      	b.n	8004aac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049de:	4b35      	ldr	r3, [pc, #212]	@ (8004ab4 <HAL_RCC_OscConfig+0x618>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f0      	beq.n	80049cc <HAL_RCC_OscConfig+0x530>
 80049ea:	e05e      	b.n	8004aaa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ec:	4b31      	ldr	r3, [pc, #196]	@ (8004ab4 <HAL_RCC_OscConfig+0x618>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a30      	ldr	r2, [pc, #192]	@ (8004ab4 <HAL_RCC_OscConfig+0x618>)
 80049f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f8:	f7fd f860 	bl	8001abc <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a00:	f7fd f85c 	bl	8001abc <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e04c      	b.n	8004aac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a12:	4b28      	ldr	r3, [pc, #160]	@ (8004ab4 <HAL_RCC_OscConfig+0x618>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f0      	bne.n	8004a00 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004a1e:	4b25      	ldr	r3, [pc, #148]	@ (8004ab4 <HAL_RCC_OscConfig+0x618>)
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	4924      	ldr	r1, [pc, #144]	@ (8004ab4 <HAL_RCC_OscConfig+0x618>)
 8004a24:	4b25      	ldr	r3, [pc, #148]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 8004a26:	4013      	ands	r3, r2
 8004a28:	60cb      	str	r3, [r1, #12]
 8004a2a:	e03e      	b.n	8004aaa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	69db      	ldr	r3, [r3, #28]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d101      	bne.n	8004a38 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e039      	b.n	8004aac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004a38:	4b1e      	ldr	r3, [pc, #120]	@ (8004ab4 <HAL_RCC_OscConfig+0x618>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f003 0203 	and.w	r2, r3, #3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d12c      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a56:	3b01      	subs	r3, #1
 8004a58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d123      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a68:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d11b      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a78:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d113      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a88:	085b      	lsrs	r3, r3, #1
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d109      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a9c:	085b      	lsrs	r3, r3, #1
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d001      	beq.n	8004aaa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3720      	adds	r7, #32
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	019f800c 	.word	0x019f800c
 8004abc:	feeefffc 	.word	0xfeeefffc

08004ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004aca:	2300      	movs	r3, #0
 8004acc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e11e      	b.n	8004d16 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ad8:	4b91      	ldr	r3, [pc, #580]	@ (8004d20 <HAL_RCC_ClockConfig+0x260>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 030f 	and.w	r3, r3, #15
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d910      	bls.n	8004b08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae6:	4b8e      	ldr	r3, [pc, #568]	@ (8004d20 <HAL_RCC_ClockConfig+0x260>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f023 020f 	bic.w	r2, r3, #15
 8004aee:	498c      	ldr	r1, [pc, #560]	@ (8004d20 <HAL_RCC_ClockConfig+0x260>)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004af6:	4b8a      	ldr	r3, [pc, #552]	@ (8004d20 <HAL_RCC_ClockConfig+0x260>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 030f 	and.w	r3, r3, #15
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d001      	beq.n	8004b08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e106      	b.n	8004d16 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d073      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d129      	bne.n	8004b70 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b1c:	4b81      	ldr	r3, [pc, #516]	@ (8004d24 <HAL_RCC_ClockConfig+0x264>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e0f4      	b.n	8004d16 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004b2c:	f000 f99e 	bl	8004e6c <RCC_GetSysClockFreqFromPLLSource>
 8004b30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	4a7c      	ldr	r2, [pc, #496]	@ (8004d28 <HAL_RCC_ClockConfig+0x268>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d93f      	bls.n	8004bba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b3a:	4b7a      	ldr	r3, [pc, #488]	@ (8004d24 <HAL_RCC_ClockConfig+0x264>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d009      	beq.n	8004b5a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d033      	beq.n	8004bba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d12f      	bne.n	8004bba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b5a:	4b72      	ldr	r3, [pc, #456]	@ (8004d24 <HAL_RCC_ClockConfig+0x264>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b62:	4a70      	ldr	r2, [pc, #448]	@ (8004d24 <HAL_RCC_ClockConfig+0x264>)
 8004b64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b68:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b6a:	2380      	movs	r3, #128	@ 0x80
 8004b6c:	617b      	str	r3, [r7, #20]
 8004b6e:	e024      	b.n	8004bba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d107      	bne.n	8004b88 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b78:	4b6a      	ldr	r3, [pc, #424]	@ (8004d24 <HAL_RCC_ClockConfig+0x264>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d109      	bne.n	8004b98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e0c6      	b.n	8004d16 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b88:	4b66      	ldr	r3, [pc, #408]	@ (8004d24 <HAL_RCC_ClockConfig+0x264>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e0be      	b.n	8004d16 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004b98:	f000 f8ce 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 8004b9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	4a61      	ldr	r2, [pc, #388]	@ (8004d28 <HAL_RCC_ClockConfig+0x268>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d909      	bls.n	8004bba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ba6:	4b5f      	ldr	r3, [pc, #380]	@ (8004d24 <HAL_RCC_ClockConfig+0x264>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bae:	4a5d      	ldr	r2, [pc, #372]	@ (8004d24 <HAL_RCC_ClockConfig+0x264>)
 8004bb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bb4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004bb6:	2380      	movs	r3, #128	@ 0x80
 8004bb8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bba:	4b5a      	ldr	r3, [pc, #360]	@ (8004d24 <HAL_RCC_ClockConfig+0x264>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f023 0203 	bic.w	r2, r3, #3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	4957      	ldr	r1, [pc, #348]	@ (8004d24 <HAL_RCC_ClockConfig+0x264>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bcc:	f7fc ff76 	bl	8001abc <HAL_GetTick>
 8004bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd2:	e00a      	b.n	8004bea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bd4:	f7fc ff72 	bl	8001abc <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e095      	b.n	8004d16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bea:	4b4e      	ldr	r3, [pc, #312]	@ (8004d24 <HAL_RCC_ClockConfig+0x264>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 020c 	and.w	r2, r3, #12
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d1eb      	bne.n	8004bd4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d023      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c14:	4b43      	ldr	r3, [pc, #268]	@ (8004d24 <HAL_RCC_ClockConfig+0x264>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	4a42      	ldr	r2, [pc, #264]	@ (8004d24 <HAL_RCC_ClockConfig+0x264>)
 8004c1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c1e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d007      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004c2c:	4b3d      	ldr	r3, [pc, #244]	@ (8004d24 <HAL_RCC_ClockConfig+0x264>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004c34:	4a3b      	ldr	r2, [pc, #236]	@ (8004d24 <HAL_RCC_ClockConfig+0x264>)
 8004c36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c3c:	4b39      	ldr	r3, [pc, #228]	@ (8004d24 <HAL_RCC_ClockConfig+0x264>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	4936      	ldr	r1, [pc, #216]	@ (8004d24 <HAL_RCC_ClockConfig+0x264>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	608b      	str	r3, [r1, #8]
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2b80      	cmp	r3, #128	@ 0x80
 8004c54:	d105      	bne.n	8004c62 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c56:	4b33      	ldr	r3, [pc, #204]	@ (8004d24 <HAL_RCC_ClockConfig+0x264>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	4a32      	ldr	r2, [pc, #200]	@ (8004d24 <HAL_RCC_ClockConfig+0x264>)
 8004c5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c60:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c62:	4b2f      	ldr	r3, [pc, #188]	@ (8004d20 <HAL_RCC_ClockConfig+0x260>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d21d      	bcs.n	8004cac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c70:	4b2b      	ldr	r3, [pc, #172]	@ (8004d20 <HAL_RCC_ClockConfig+0x260>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f023 020f 	bic.w	r2, r3, #15
 8004c78:	4929      	ldr	r1, [pc, #164]	@ (8004d20 <HAL_RCC_ClockConfig+0x260>)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c80:	f7fc ff1c 	bl	8001abc <HAL_GetTick>
 8004c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c86:	e00a      	b.n	8004c9e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c88:	f7fc ff18 	bl	8001abc <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e03b      	b.n	8004d16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9e:	4b20      	ldr	r3, [pc, #128]	@ (8004d20 <HAL_RCC_ClockConfig+0x260>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d1ed      	bne.n	8004c88 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0304 	and.w	r3, r3, #4
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d008      	beq.n	8004cca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8004d24 <HAL_RCC_ClockConfig+0x264>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	4917      	ldr	r1, [pc, #92]	@ (8004d24 <HAL_RCC_ClockConfig+0x264>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d009      	beq.n	8004cea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cd6:	4b13      	ldr	r3, [pc, #76]	@ (8004d24 <HAL_RCC_ClockConfig+0x264>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	490f      	ldr	r1, [pc, #60]	@ (8004d24 <HAL_RCC_ClockConfig+0x264>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cea:	f000 f825 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8004d24 <HAL_RCC_ClockConfig+0x264>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	091b      	lsrs	r3, r3, #4
 8004cf6:	f003 030f 	and.w	r3, r3, #15
 8004cfa:	490c      	ldr	r1, [pc, #48]	@ (8004d2c <HAL_RCC_ClockConfig+0x26c>)
 8004cfc:	5ccb      	ldrb	r3, [r1, r3]
 8004cfe:	f003 031f 	and.w	r3, r3, #31
 8004d02:	fa22 f303 	lsr.w	r3, r2, r3
 8004d06:	4a0a      	ldr	r2, [pc, #40]	@ (8004d30 <HAL_RCC_ClockConfig+0x270>)
 8004d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d34 <HAL_RCC_ClockConfig+0x274>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fc fe88 	bl	8001a24 <HAL_InitTick>
 8004d14:	4603      	mov	r3, r0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	40022000 	.word	0x40022000
 8004d24:	40021000 	.word	0x40021000
 8004d28:	04c4b400 	.word	0x04c4b400
 8004d2c:	080083c8 	.word	0x080083c8
 8004d30:	20000004 	.word	0x20000004
 8004d34:	20000008 	.word	0x20000008

08004d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8004df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 030c 	and.w	r3, r3, #12
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d102      	bne.n	8004d50 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d4c:	613b      	str	r3, [r7, #16]
 8004d4e:	e047      	b.n	8004de0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004d50:	4b27      	ldr	r3, [pc, #156]	@ (8004df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f003 030c 	and.w	r3, r3, #12
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d102      	bne.n	8004d62 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d5c:	4b26      	ldr	r3, [pc, #152]	@ (8004df8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d5e:	613b      	str	r3, [r7, #16]
 8004d60:	e03e      	b.n	8004de0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004d62:	4b23      	ldr	r3, [pc, #140]	@ (8004df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 030c 	and.w	r3, r3, #12
 8004d6a:	2b0c      	cmp	r3, #12
 8004d6c:	d136      	bne.n	8004ddc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d6e:	4b20      	ldr	r3, [pc, #128]	@ (8004df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d78:	4b1d      	ldr	r3, [pc, #116]	@ (8004df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	091b      	lsrs	r3, r3, #4
 8004d7e:	f003 030f 	and.w	r3, r3, #15
 8004d82:	3301      	adds	r3, #1
 8004d84:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d10c      	bne.n	8004da6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d8c:	4a1a      	ldr	r2, [pc, #104]	@ (8004df8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d94:	4a16      	ldr	r2, [pc, #88]	@ (8004df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d96:	68d2      	ldr	r2, [r2, #12]
 8004d98:	0a12      	lsrs	r2, r2, #8
 8004d9a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d9e:	fb02 f303 	mul.w	r3, r2, r3
 8004da2:	617b      	str	r3, [r7, #20]
      break;
 8004da4:	e00c      	b.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004da6:	4a13      	ldr	r2, [pc, #76]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dae:	4a10      	ldr	r2, [pc, #64]	@ (8004df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004db0:	68d2      	ldr	r2, [r2, #12]
 8004db2:	0a12      	lsrs	r2, r2, #8
 8004db4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004db8:	fb02 f303 	mul.w	r3, r2, r3
 8004dbc:	617b      	str	r3, [r7, #20]
      break;
 8004dbe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8004df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	0e5b      	lsrs	r3, r3, #25
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	3301      	adds	r3, #1
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd8:	613b      	str	r3, [r7, #16]
 8004dda:	e001      	b.n	8004de0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004de0:	693b      	ldr	r3, [r7, #16]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	371c      	adds	r7, #28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	40021000 	.word	0x40021000
 8004df4:	00f42400 	.word	0x00f42400
 8004df8:	016e3600 	.word	0x016e3600

08004dfc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e00:	4b03      	ldr	r3, [pc, #12]	@ (8004e10 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e02:	681b      	ldr	r3, [r3, #0]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	20000004 	.word	0x20000004

08004e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e18:	f7ff fff0 	bl	8004dfc <HAL_RCC_GetHCLKFreq>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	4b06      	ldr	r3, [pc, #24]	@ (8004e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	0a1b      	lsrs	r3, r3, #8
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	4904      	ldr	r1, [pc, #16]	@ (8004e3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e2a:	5ccb      	ldrb	r3, [r1, r3]
 8004e2c:	f003 031f 	and.w	r3, r3, #31
 8004e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	080083d8 	.word	0x080083d8

08004e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e44:	f7ff ffda 	bl	8004dfc <HAL_RCC_GetHCLKFreq>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	4b06      	ldr	r3, [pc, #24]	@ (8004e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	0adb      	lsrs	r3, r3, #11
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	4904      	ldr	r1, [pc, #16]	@ (8004e68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e56:	5ccb      	ldrb	r3, [r1, r3]
 8004e58:	f003 031f 	and.w	r3, r3, #31
 8004e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40021000 	.word	0x40021000
 8004e68:	080083d8 	.word	0x080083d8

08004e6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e72:	4b1e      	ldr	r3, [pc, #120]	@ (8004eec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004eec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	091b      	lsrs	r3, r3, #4
 8004e82:	f003 030f 	and.w	r3, r3, #15
 8004e86:	3301      	adds	r3, #1
 8004e88:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	2b03      	cmp	r3, #3
 8004e8e:	d10c      	bne.n	8004eaa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e90:	4a17      	ldr	r2, [pc, #92]	@ (8004ef0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e98:	4a14      	ldr	r2, [pc, #80]	@ (8004eec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e9a:	68d2      	ldr	r2, [r2, #12]
 8004e9c:	0a12      	lsrs	r2, r2, #8
 8004e9e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ea2:	fb02 f303 	mul.w	r3, r2, r3
 8004ea6:	617b      	str	r3, [r7, #20]
    break;
 8004ea8:	e00c      	b.n	8004ec4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004eaa:	4a12      	ldr	r2, [pc, #72]	@ (8004ef4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb2:	4a0e      	ldr	r2, [pc, #56]	@ (8004eec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004eb4:	68d2      	ldr	r2, [r2, #12]
 8004eb6:	0a12      	lsrs	r2, r2, #8
 8004eb8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ebc:	fb02 f303 	mul.w	r3, r2, r3
 8004ec0:	617b      	str	r3, [r7, #20]
    break;
 8004ec2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ec4:	4b09      	ldr	r3, [pc, #36]	@ (8004eec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	0e5b      	lsrs	r3, r3, #25
 8004eca:	f003 0303 	and.w	r3, r3, #3
 8004ece:	3301      	adds	r3, #1
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004edc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004ede:	687b      	ldr	r3, [r7, #4]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	371c      	adds	r7, #28
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	016e3600 	.word	0x016e3600
 8004ef4:	00f42400 	.word	0x00f42400

08004ef8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f00:	2300      	movs	r3, #0
 8004f02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f04:	2300      	movs	r3, #0
 8004f06:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 8098 	beq.w	8005046 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f16:	2300      	movs	r3, #0
 8004f18:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f1a:	4b43      	ldr	r3, [pc, #268]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10d      	bne.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f26:	4b40      	ldr	r3, [pc, #256]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f2a:	4a3f      	ldr	r2, [pc, #252]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f30:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f32:	4b3d      	ldr	r3, [pc, #244]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f3a:	60bb      	str	r3, [r7, #8]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f42:	4b3a      	ldr	r3, [pc, #232]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a39      	ldr	r2, [pc, #228]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f4e:	f7fc fdb5 	bl	8001abc <HAL_GetTick>
 8004f52:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f54:	e009      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f56:	f7fc fdb1 	bl	8001abc <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d902      	bls.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	74fb      	strb	r3, [r7, #19]
        break;
 8004f68:	e005      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f6a:	4b30      	ldr	r3, [pc, #192]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0ef      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004f76:	7cfb      	ldrb	r3, [r7, #19]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d159      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f7c:	4b2a      	ldr	r3, [pc, #168]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f86:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d01e      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d019      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f98:	4b23      	ldr	r3, [pc, #140]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fa2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fa4:	4b20      	ldr	r3, [pc, #128]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004faa:	4a1f      	ldr	r2, [pc, #124]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fba:	4a1b      	ldr	r2, [pc, #108]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004fc4:	4a18      	ldr	r2, [pc, #96]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d016      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd6:	f7fc fd71 	bl	8001abc <HAL_GetTick>
 8004fda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fdc:	e00b      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fde:	f7fc fd6d 	bl	8001abc <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d902      	bls.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	74fb      	strb	r3, [r7, #19]
            break;
 8004ff4:	e006      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0ec      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005004:	7cfb      	ldrb	r3, [r7, #19]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10b      	bne.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800500a:	4b07      	ldr	r3, [pc, #28]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800500c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005010:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005018:	4903      	ldr	r1, [pc, #12]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800501a:	4313      	orrs	r3, r2
 800501c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005020:	e008      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005022:	7cfb      	ldrb	r3, [r7, #19]
 8005024:	74bb      	strb	r3, [r7, #18]
 8005026:	e005      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005028:	40021000 	.word	0x40021000
 800502c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005030:	7cfb      	ldrb	r3, [r7, #19]
 8005032:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005034:	7c7b      	ldrb	r3, [r7, #17]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d105      	bne.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800503a:	4ba7      	ldr	r3, [pc, #668]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800503c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800503e:	4aa6      	ldr	r2, [pc, #664]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005040:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005044:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005052:	4ba1      	ldr	r3, [pc, #644]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005058:	f023 0203 	bic.w	r2, r3, #3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	499d      	ldr	r1, [pc, #628]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005062:	4313      	orrs	r3, r2
 8005064:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00a      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005074:	4b98      	ldr	r3, [pc, #608]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800507a:	f023 020c 	bic.w	r2, r3, #12
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	4995      	ldr	r1, [pc, #596]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005084:	4313      	orrs	r3, r2
 8005086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005096:	4b90      	ldr	r3, [pc, #576]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800509c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	498c      	ldr	r1, [pc, #560]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00a      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050b8:	4b87      	ldr	r3, [pc, #540]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	4984      	ldr	r1, [pc, #528]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0310 	and.w	r3, r3, #16
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050da:	4b7f      	ldr	r3, [pc, #508]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	497b      	ldr	r1, [pc, #492]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0320 	and.w	r3, r3, #32
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00a      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050fc:	4b76      	ldr	r3, [pc, #472]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005102:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	4973      	ldr	r1, [pc, #460]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800510c:	4313      	orrs	r3, r2
 800510e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800511e:	4b6e      	ldr	r3, [pc, #440]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005124:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	69db      	ldr	r3, [r3, #28]
 800512c:	496a      	ldr	r1, [pc, #424]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00a      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005140:	4b65      	ldr	r3, [pc, #404]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005146:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	4962      	ldr	r1, [pc, #392]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005150:	4313      	orrs	r3, r2
 8005152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005162:	4b5d      	ldr	r3, [pc, #372]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005168:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005170:	4959      	ldr	r1, [pc, #356]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005184:	4b54      	ldr	r3, [pc, #336]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005186:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800518a:	f023 0203 	bic.w	r2, r3, #3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005192:	4951      	ldr	r1, [pc, #324]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005194:	4313      	orrs	r3, r2
 8005196:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051a6:	4b4c      	ldr	r3, [pc, #304]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b4:	4948      	ldr	r1, [pc, #288]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d015      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051c8:	4b43      	ldr	r3, [pc, #268]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d6:	4940      	ldr	r1, [pc, #256]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051e6:	d105      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051e8:	4b3b      	ldr	r3, [pc, #236]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	4a3a      	ldr	r2, [pc, #232]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d015      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005200:	4b35      	ldr	r3, [pc, #212]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005206:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800520e:	4932      	ldr	r1, [pc, #200]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005210:	4313      	orrs	r3, r2
 8005212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800521a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800521e:	d105      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005220:	4b2d      	ldr	r3, [pc, #180]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	4a2c      	ldr	r2, [pc, #176]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005226:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800522a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d015      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005238:	4b27      	ldr	r3, [pc, #156]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800523a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800523e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005246:	4924      	ldr	r1, [pc, #144]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005248:	4313      	orrs	r3, r2
 800524a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005252:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005256:	d105      	bne.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005258:	4b1f      	ldr	r3, [pc, #124]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	4a1e      	ldr	r2, [pc, #120]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800525e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005262:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d015      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005270:	4b19      	ldr	r3, [pc, #100]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005276:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800527e:	4916      	ldr	r1, [pc, #88]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005280:	4313      	orrs	r3, r2
 8005282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800528a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800528e:	d105      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005290:	4b11      	ldr	r3, [pc, #68]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	4a10      	ldr	r2, [pc, #64]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005296:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800529a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d019      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052a8:	4b0b      	ldr	r3, [pc, #44]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b6:	4908      	ldr	r1, [pc, #32]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052c6:	d109      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052c8:	4b03      	ldr	r3, [pc, #12]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	4a02      	ldr	r2, [pc, #8]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052d2:	60d3      	str	r3, [r2, #12]
 80052d4:	e002      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80052d6:	bf00      	nop
 80052d8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d015      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80052e8:	4b29      	ldr	r3, [pc, #164]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f6:	4926      	ldr	r1, [pc, #152]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005302:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005306:	d105      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005308:	4b21      	ldr	r3, [pc, #132]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	4a20      	ldr	r2, [pc, #128]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800530e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005312:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d015      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005320:	4b1b      	ldr	r3, [pc, #108]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005326:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800532e:	4918      	ldr	r1, [pc, #96]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005330:	4313      	orrs	r3, r2
 8005332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800533a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800533e:	d105      	bne.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005340:	4b13      	ldr	r3, [pc, #76]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	4a12      	ldr	r2, [pc, #72]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005346:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800534a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d015      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005358:	4b0d      	ldr	r3, [pc, #52]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800535a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800535e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005366:	490a      	ldr	r1, [pc, #40]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005368:	4313      	orrs	r3, r2
 800536a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005372:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005376:	d105      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005378:	4b05      	ldr	r3, [pc, #20]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	4a04      	ldr	r2, [pc, #16]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800537e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005382:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005384:	7cbb      	ldrb	r3, [r7, #18]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3718      	adds	r7, #24
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	40021000 	.word	0x40021000

08005394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e049      	b.n	800543a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d106      	bne.n	80053c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7fc f94c 	bl	8001658 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3304      	adds	r3, #4
 80053d0:	4619      	mov	r1, r3
 80053d2:	4610      	mov	r0, r2
 80053d4:	f000 ff68 	bl	80062a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
	...

08005444 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b01      	cmp	r3, #1
 8005456:	d001      	beq.n	800545c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e04c      	b.n	80054f6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a26      	ldr	r2, [pc, #152]	@ (8005504 <HAL_TIM_Base_Start+0xc0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d022      	beq.n	80054b4 <HAL_TIM_Base_Start+0x70>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005476:	d01d      	beq.n	80054b4 <HAL_TIM_Base_Start+0x70>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a22      	ldr	r2, [pc, #136]	@ (8005508 <HAL_TIM_Base_Start+0xc4>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d018      	beq.n	80054b4 <HAL_TIM_Base_Start+0x70>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a21      	ldr	r2, [pc, #132]	@ (800550c <HAL_TIM_Base_Start+0xc8>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d013      	beq.n	80054b4 <HAL_TIM_Base_Start+0x70>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a1f      	ldr	r2, [pc, #124]	@ (8005510 <HAL_TIM_Base_Start+0xcc>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d00e      	beq.n	80054b4 <HAL_TIM_Base_Start+0x70>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a1e      	ldr	r2, [pc, #120]	@ (8005514 <HAL_TIM_Base_Start+0xd0>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d009      	beq.n	80054b4 <HAL_TIM_Base_Start+0x70>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005518 <HAL_TIM_Base_Start+0xd4>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d004      	beq.n	80054b4 <HAL_TIM_Base_Start+0x70>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a1b      	ldr	r2, [pc, #108]	@ (800551c <HAL_TIM_Base_Start+0xd8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d115      	bne.n	80054e0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	4b19      	ldr	r3, [pc, #100]	@ (8005520 <HAL_TIM_Base_Start+0xdc>)
 80054bc:	4013      	ands	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b06      	cmp	r3, #6
 80054c4:	d015      	beq.n	80054f2 <HAL_TIM_Base_Start+0xae>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054cc:	d011      	beq.n	80054f2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f042 0201 	orr.w	r2, r2, #1
 80054dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054de:	e008      	b.n	80054f2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0201 	orr.w	r2, r2, #1
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	e000      	b.n	80054f4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40012c00 	.word	0x40012c00
 8005508:	40000400 	.word	0x40000400
 800550c:	40000800 	.word	0x40000800
 8005510:	40000c00 	.word	0x40000c00
 8005514:	40013400 	.word	0x40013400
 8005518:	40014000 	.word	0x40014000
 800551c:	40015000 	.word	0x40015000
 8005520:	00010007 	.word	0x00010007

08005524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b01      	cmp	r3, #1
 8005536:	d001      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e054      	b.n	80055e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0201 	orr.w	r2, r2, #1
 8005552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a26      	ldr	r2, [pc, #152]	@ (80055f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d022      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005566:	d01d      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a22      	ldr	r2, [pc, #136]	@ (80055f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d018      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a21      	ldr	r2, [pc, #132]	@ (80055fc <HAL_TIM_Base_Start_IT+0xd8>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d013      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a1f      	ldr	r2, [pc, #124]	@ (8005600 <HAL_TIM_Base_Start_IT+0xdc>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00e      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a1e      	ldr	r2, [pc, #120]	@ (8005604 <HAL_TIM_Base_Start_IT+0xe0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d009      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a1c      	ldr	r2, [pc, #112]	@ (8005608 <HAL_TIM_Base_Start_IT+0xe4>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d004      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a1b      	ldr	r2, [pc, #108]	@ (800560c <HAL_TIM_Base_Start_IT+0xe8>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d115      	bne.n	80055d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	4b19      	ldr	r3, [pc, #100]	@ (8005610 <HAL_TIM_Base_Start_IT+0xec>)
 80055ac:	4013      	ands	r3, r2
 80055ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b06      	cmp	r3, #6
 80055b4:	d015      	beq.n	80055e2 <HAL_TIM_Base_Start_IT+0xbe>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055bc:	d011      	beq.n	80055e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f042 0201 	orr.w	r2, r2, #1
 80055cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ce:	e008      	b.n	80055e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0201 	orr.w	r2, r2, #1
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	e000      	b.n	80055e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	40012c00 	.word	0x40012c00
 80055f8:	40000400 	.word	0x40000400
 80055fc:	40000800 	.word	0x40000800
 8005600:	40000c00 	.word	0x40000c00
 8005604:	40013400 	.word	0x40013400
 8005608:	40014000 	.word	0x40014000
 800560c:	40015000 	.word	0x40015000
 8005610:	00010007 	.word	0x00010007

08005614 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e049      	b.n	80056ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d106      	bne.n	8005640 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f841 	bl	80056c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3304      	adds	r3, #4
 8005650:	4619      	mov	r1, r3
 8005652:	4610      	mov	r0, r2
 8005654:	f000 fe28 	bl	80062a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056ca:	bf00      	nop
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
	...

080056d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d109      	bne.n	80056fc <HAL_TIM_PWM_Start+0x24>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	bf14      	ite	ne
 80056f4:	2301      	movne	r3, #1
 80056f6:	2300      	moveq	r3, #0
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	e03c      	b.n	8005776 <HAL_TIM_PWM_Start+0x9e>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d109      	bne.n	8005716 <HAL_TIM_PWM_Start+0x3e>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b01      	cmp	r3, #1
 800570c:	bf14      	ite	ne
 800570e:	2301      	movne	r3, #1
 8005710:	2300      	moveq	r3, #0
 8005712:	b2db      	uxtb	r3, r3
 8005714:	e02f      	b.n	8005776 <HAL_TIM_PWM_Start+0x9e>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b08      	cmp	r3, #8
 800571a:	d109      	bne.n	8005730 <HAL_TIM_PWM_Start+0x58>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b01      	cmp	r3, #1
 8005726:	bf14      	ite	ne
 8005728:	2301      	movne	r3, #1
 800572a:	2300      	moveq	r3, #0
 800572c:	b2db      	uxtb	r3, r3
 800572e:	e022      	b.n	8005776 <HAL_TIM_PWM_Start+0x9e>
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	2b0c      	cmp	r3, #12
 8005734:	d109      	bne.n	800574a <HAL_TIM_PWM_Start+0x72>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b01      	cmp	r3, #1
 8005740:	bf14      	ite	ne
 8005742:	2301      	movne	r3, #1
 8005744:	2300      	moveq	r3, #0
 8005746:	b2db      	uxtb	r3, r3
 8005748:	e015      	b.n	8005776 <HAL_TIM_PWM_Start+0x9e>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b10      	cmp	r3, #16
 800574e:	d109      	bne.n	8005764 <HAL_TIM_PWM_Start+0x8c>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b01      	cmp	r3, #1
 800575a:	bf14      	ite	ne
 800575c:	2301      	movne	r3, #1
 800575e:	2300      	moveq	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	e008      	b.n	8005776 <HAL_TIM_PWM_Start+0x9e>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b01      	cmp	r3, #1
 800576e:	bf14      	ite	ne
 8005770:	2301      	movne	r3, #1
 8005772:	2300      	moveq	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e0a6      	b.n	80058cc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d104      	bne.n	800578e <HAL_TIM_PWM_Start+0xb6>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800578c:	e023      	b.n	80057d6 <HAL_TIM_PWM_Start+0xfe>
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b04      	cmp	r3, #4
 8005792:	d104      	bne.n	800579e <HAL_TIM_PWM_Start+0xc6>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800579c:	e01b      	b.n	80057d6 <HAL_TIM_PWM_Start+0xfe>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d104      	bne.n	80057ae <HAL_TIM_PWM_Start+0xd6>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2202      	movs	r2, #2
 80057a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057ac:	e013      	b.n	80057d6 <HAL_TIM_PWM_Start+0xfe>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b0c      	cmp	r3, #12
 80057b2:	d104      	bne.n	80057be <HAL_TIM_PWM_Start+0xe6>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057bc:	e00b      	b.n	80057d6 <HAL_TIM_PWM_Start+0xfe>
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b10      	cmp	r3, #16
 80057c2:	d104      	bne.n	80057ce <HAL_TIM_PWM_Start+0xf6>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2202      	movs	r2, #2
 80057c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057cc:	e003      	b.n	80057d6 <HAL_TIM_PWM_Start+0xfe>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2202      	movs	r2, #2
 80057d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2201      	movs	r2, #1
 80057dc:	6839      	ldr	r1, [r7, #0]
 80057de:	4618      	mov	r0, r3
 80057e0:	f001 f9dc 	bl	8006b9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a3a      	ldr	r2, [pc, #232]	@ (80058d4 <HAL_TIM_PWM_Start+0x1fc>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d018      	beq.n	8005820 <HAL_TIM_PWM_Start+0x148>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a39      	ldr	r2, [pc, #228]	@ (80058d8 <HAL_TIM_PWM_Start+0x200>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d013      	beq.n	8005820 <HAL_TIM_PWM_Start+0x148>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a37      	ldr	r2, [pc, #220]	@ (80058dc <HAL_TIM_PWM_Start+0x204>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00e      	beq.n	8005820 <HAL_TIM_PWM_Start+0x148>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a36      	ldr	r2, [pc, #216]	@ (80058e0 <HAL_TIM_PWM_Start+0x208>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d009      	beq.n	8005820 <HAL_TIM_PWM_Start+0x148>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a34      	ldr	r2, [pc, #208]	@ (80058e4 <HAL_TIM_PWM_Start+0x20c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d004      	beq.n	8005820 <HAL_TIM_PWM_Start+0x148>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a33      	ldr	r2, [pc, #204]	@ (80058e8 <HAL_TIM_PWM_Start+0x210>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d101      	bne.n	8005824 <HAL_TIM_PWM_Start+0x14c>
 8005820:	2301      	movs	r3, #1
 8005822:	e000      	b.n	8005826 <HAL_TIM_PWM_Start+0x14e>
 8005824:	2300      	movs	r3, #0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d007      	beq.n	800583a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005838:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a25      	ldr	r2, [pc, #148]	@ (80058d4 <HAL_TIM_PWM_Start+0x1fc>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d022      	beq.n	800588a <HAL_TIM_PWM_Start+0x1b2>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800584c:	d01d      	beq.n	800588a <HAL_TIM_PWM_Start+0x1b2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a26      	ldr	r2, [pc, #152]	@ (80058ec <HAL_TIM_PWM_Start+0x214>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d018      	beq.n	800588a <HAL_TIM_PWM_Start+0x1b2>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a24      	ldr	r2, [pc, #144]	@ (80058f0 <HAL_TIM_PWM_Start+0x218>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d013      	beq.n	800588a <HAL_TIM_PWM_Start+0x1b2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a23      	ldr	r2, [pc, #140]	@ (80058f4 <HAL_TIM_PWM_Start+0x21c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00e      	beq.n	800588a <HAL_TIM_PWM_Start+0x1b2>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a19      	ldr	r2, [pc, #100]	@ (80058d8 <HAL_TIM_PWM_Start+0x200>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d009      	beq.n	800588a <HAL_TIM_PWM_Start+0x1b2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a18      	ldr	r2, [pc, #96]	@ (80058dc <HAL_TIM_PWM_Start+0x204>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d004      	beq.n	800588a <HAL_TIM_PWM_Start+0x1b2>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a18      	ldr	r2, [pc, #96]	@ (80058e8 <HAL_TIM_PWM_Start+0x210>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d115      	bne.n	80058b6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689a      	ldr	r2, [r3, #8]
 8005890:	4b19      	ldr	r3, [pc, #100]	@ (80058f8 <HAL_TIM_PWM_Start+0x220>)
 8005892:	4013      	ands	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2b06      	cmp	r3, #6
 800589a:	d015      	beq.n	80058c8 <HAL_TIM_PWM_Start+0x1f0>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058a2:	d011      	beq.n	80058c8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0201 	orr.w	r2, r2, #1
 80058b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b4:	e008      	b.n	80058c8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f042 0201 	orr.w	r2, r2, #1
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	e000      	b.n	80058ca <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	40012c00 	.word	0x40012c00
 80058d8:	40013400 	.word	0x40013400
 80058dc:	40014000 	.word	0x40014000
 80058e0:	40014400 	.word	0x40014400
 80058e4:	40014800 	.word	0x40014800
 80058e8:	40015000 	.word	0x40015000
 80058ec:	40000400 	.word	0x40000400
 80058f0:	40000800 	.word	0x40000800
 80058f4:	40000c00 	.word	0x40000c00
 80058f8:	00010007 	.word	0x00010007

080058fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e097      	b.n	8005a40 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d106      	bne.n	800592a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7fb feff 	bl	8001728 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2202      	movs	r2, #2
 800592e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6812      	ldr	r2, [r2, #0]
 800593c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005940:	f023 0307 	bic.w	r3, r3, #7
 8005944:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	3304      	adds	r3, #4
 800594e:	4619      	mov	r1, r3
 8005950:	4610      	mov	r0, r2
 8005952:	f000 fca9 	bl	80062a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800597e:	f023 0303 	bic.w	r3, r3, #3
 8005982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	021b      	lsls	r3, r3, #8
 800598e:	4313      	orrs	r3, r2
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	4313      	orrs	r3, r2
 8005994:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800599c:	f023 030c 	bic.w	r3, r3, #12
 80059a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80059a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	68da      	ldr	r2, [r3, #12]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	021b      	lsls	r3, r3, #8
 80059b8:	4313      	orrs	r3, r2
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	4313      	orrs	r3, r2
 80059be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	011a      	lsls	r2, r3, #4
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	031b      	lsls	r3, r3, #12
 80059cc:	4313      	orrs	r3, r2
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80059da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80059e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	011b      	lsls	r3, r3, #4
 80059ee:	4313      	orrs	r3, r2
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3718      	adds	r7, #24
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a58:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a60:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a68:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a70:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d110      	bne.n	8005a9a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a78:	7bfb      	ldrb	r3, [r7, #15]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d102      	bne.n	8005a84 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a7e:	7b7b      	ldrb	r3, [r7, #13]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d001      	beq.n	8005a88 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e069      	b.n	8005b5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a98:	e031      	b.n	8005afe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b04      	cmp	r3, #4
 8005a9e:	d110      	bne.n	8005ac2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005aa0:	7bbb      	ldrb	r3, [r7, #14]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d102      	bne.n	8005aac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005aa6:	7b3b      	ldrb	r3, [r7, #12]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d001      	beq.n	8005ab0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e055      	b.n	8005b5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ac0:	e01d      	b.n	8005afe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ac2:	7bfb      	ldrb	r3, [r7, #15]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d108      	bne.n	8005ada <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ac8:	7bbb      	ldrb	r3, [r7, #14]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d105      	bne.n	8005ada <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ace:	7b7b      	ldrb	r3, [r7, #13]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d102      	bne.n	8005ada <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ad4:	7b3b      	ldrb	r3, [r7, #12]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d001      	beq.n	8005ade <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e03e      	b.n	8005b5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2202      	movs	r2, #2
 8005ae2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2202      	movs	r2, #2
 8005aea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2202      	movs	r2, #2
 8005af2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2202      	movs	r2, #2
 8005afa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <HAL_TIM_Encoder_Start+0xc4>
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	2b04      	cmp	r3, #4
 8005b08:	d008      	beq.n	8005b1c <HAL_TIM_Encoder_Start+0xd4>
 8005b0a:	e00f      	b.n	8005b2c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2201      	movs	r2, #1
 8005b12:	2100      	movs	r1, #0
 8005b14:	4618      	mov	r0, r3
 8005b16:	f001 f841 	bl	8006b9c <TIM_CCxChannelCmd>
      break;
 8005b1a:	e016      	b.n	8005b4a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2201      	movs	r2, #1
 8005b22:	2104      	movs	r1, #4
 8005b24:	4618      	mov	r0, r3
 8005b26:	f001 f839 	bl	8006b9c <TIM_CCxChannelCmd>
      break;
 8005b2a:	e00e      	b.n	8005b4a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2201      	movs	r2, #1
 8005b32:	2100      	movs	r1, #0
 8005b34:	4618      	mov	r0, r3
 8005b36:	f001 f831 	bl	8006b9c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	2104      	movs	r1, #4
 8005b42:	4618      	mov	r0, r3
 8005b44:	f001 f82a 	bl	8006b9c <TIM_CCxChannelCmd>
      break;
 8005b48:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f042 0201 	orr.w	r2, r2, #1
 8005b58:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d020      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d01b      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f06f 0202 	mvn.w	r2, #2
 8005b98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	f003 0303 	and.w	r3, r3, #3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fb5c 	bl	800626c <HAL_TIM_IC_CaptureCallback>
 8005bb4:	e005      	b.n	8005bc2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fb4e 	bl	8006258 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 fb5f 	bl	8006280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f003 0304 	and.w	r3, r3, #4
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d020      	beq.n	8005c14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f003 0304 	and.w	r3, r3, #4
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d01b      	beq.n	8005c14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f06f 0204 	mvn.w	r2, #4
 8005be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2202      	movs	r2, #2
 8005bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fb36 	bl	800626c <HAL_TIM_IC_CaptureCallback>
 8005c00:	e005      	b.n	8005c0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fb28 	bl	8006258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fb39 	bl	8006280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	f003 0308 	and.w	r3, r3, #8
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d020      	beq.n	8005c60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f003 0308 	and.w	r3, r3, #8
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d01b      	beq.n	8005c60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f06f 0208 	mvn.w	r2, #8
 8005c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2204      	movs	r2, #4
 8005c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	f003 0303 	and.w	r3, r3, #3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fb10 	bl	800626c <HAL_TIM_IC_CaptureCallback>
 8005c4c:	e005      	b.n	8005c5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 fb02 	bl	8006258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fb13 	bl	8006280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f003 0310 	and.w	r3, r3, #16
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d020      	beq.n	8005cac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f003 0310 	and.w	r3, r3, #16
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d01b      	beq.n	8005cac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f06f 0210 	mvn.w	r2, #16
 8005c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2208      	movs	r2, #8
 8005c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 faea 	bl	800626c <HAL_TIM_IC_CaptureCallback>
 8005c98:	e005      	b.n	8005ca6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fadc 	bl	8006258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 faed 	bl	8006280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00c      	beq.n	8005cd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d007      	beq.n	8005cd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f06f 0201 	mvn.w	r2, #1
 8005cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7fb fa2a 	bl	8001124 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d104      	bne.n	8005ce4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00c      	beq.n	8005cfe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d007      	beq.n	8005cfe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f001 f8a9 	bl	8006e50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00c      	beq.n	8005d22 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d007      	beq.n	8005d22 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f001 f8a1 	bl	8006e64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00c      	beq.n	8005d46 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d007      	beq.n	8005d46 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 faa7 	bl	8006294 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	f003 0320 	and.w	r3, r3, #32
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00c      	beq.n	8005d6a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f003 0320 	and.w	r3, r3, #32
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d007      	beq.n	8005d6a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f06f 0220 	mvn.w	r2, #32
 8005d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f001 f869 	bl	8006e3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00c      	beq.n	8005d8e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d007      	beq.n	8005d8e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f001 f875 	bl	8006e78 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00c      	beq.n	8005db2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d007      	beq.n	8005db2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f001 f86d 	bl	8006e8c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00c      	beq.n	8005dd6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d007      	beq.n	8005dd6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f001 f865 	bl	8006ea0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00c      	beq.n	8005dfa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d007      	beq.n	8005dfa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f001 f85d 	bl	8006eb4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dfa:	bf00      	nop
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
	...

08005e04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e10:	2300      	movs	r3, #0
 8005e12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d101      	bne.n	8005e22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	e0ff      	b.n	8006022 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b14      	cmp	r3, #20
 8005e2e:	f200 80f0 	bhi.w	8006012 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005e32:	a201      	add	r2, pc, #4	@ (adr r2, 8005e38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e38:	08005e8d 	.word	0x08005e8d
 8005e3c:	08006013 	.word	0x08006013
 8005e40:	08006013 	.word	0x08006013
 8005e44:	08006013 	.word	0x08006013
 8005e48:	08005ecd 	.word	0x08005ecd
 8005e4c:	08006013 	.word	0x08006013
 8005e50:	08006013 	.word	0x08006013
 8005e54:	08006013 	.word	0x08006013
 8005e58:	08005f0f 	.word	0x08005f0f
 8005e5c:	08006013 	.word	0x08006013
 8005e60:	08006013 	.word	0x08006013
 8005e64:	08006013 	.word	0x08006013
 8005e68:	08005f4f 	.word	0x08005f4f
 8005e6c:	08006013 	.word	0x08006013
 8005e70:	08006013 	.word	0x08006013
 8005e74:	08006013 	.word	0x08006013
 8005e78:	08005f91 	.word	0x08005f91
 8005e7c:	08006013 	.word	0x08006013
 8005e80:	08006013 	.word	0x08006013
 8005e84:	08006013 	.word	0x08006013
 8005e88:	08005fd1 	.word	0x08005fd1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68b9      	ldr	r1, [r7, #8]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 fabc 	bl	8006410 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699a      	ldr	r2, [r3, #24]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0208 	orr.w	r2, r2, #8
 8005ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	699a      	ldr	r2, [r3, #24]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0204 	bic.w	r2, r2, #4
 8005eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6999      	ldr	r1, [r3, #24]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	691a      	ldr	r2, [r3, #16]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	619a      	str	r2, [r3, #24]
      break;
 8005eca:	e0a5      	b.n	8006018 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68b9      	ldr	r1, [r7, #8]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 fb36 	bl	8006544 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	699a      	ldr	r2, [r3, #24]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	699a      	ldr	r2, [r3, #24]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6999      	ldr	r1, [r3, #24]
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	021a      	lsls	r2, r3, #8
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	619a      	str	r2, [r3, #24]
      break;
 8005f0c:	e084      	b.n	8006018 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68b9      	ldr	r1, [r7, #8]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 fba9 	bl	800666c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	69da      	ldr	r2, [r3, #28]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f042 0208 	orr.w	r2, r2, #8
 8005f28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	69da      	ldr	r2, [r3, #28]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0204 	bic.w	r2, r2, #4
 8005f38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	69d9      	ldr	r1, [r3, #28]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	691a      	ldr	r2, [r3, #16]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	61da      	str	r2, [r3, #28]
      break;
 8005f4c:	e064      	b.n	8006018 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68b9      	ldr	r1, [r7, #8]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 fc1b 	bl	8006790 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69da      	ldr	r2, [r3, #28]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	69da      	ldr	r2, [r3, #28]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69d9      	ldr	r1, [r3, #28]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	021a      	lsls	r2, r3, #8
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	61da      	str	r2, [r3, #28]
      break;
 8005f8e:	e043      	b.n	8006018 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68b9      	ldr	r1, [r7, #8]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 fc8e 	bl	80068b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f042 0208 	orr.w	r2, r2, #8
 8005faa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0204 	bic.w	r2, r2, #4
 8005fba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	691a      	ldr	r2, [r3, #16]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005fce:	e023      	b.n	8006018 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68b9      	ldr	r1, [r7, #8]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 fcd8 	bl	800698c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ffa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	021a      	lsls	r2, r3, #8
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006010:	e002      	b.n	8006018 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	75fb      	strb	r3, [r7, #23]
      break;
 8006016:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006020:	7dfb      	ldrb	r3, [r7, #23]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3718      	adds	r7, #24
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop

0800602c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006040:	2b01      	cmp	r3, #1
 8006042:	d101      	bne.n	8006048 <HAL_TIM_ConfigClockSource+0x1c>
 8006044:	2302      	movs	r3, #2
 8006046:	e0f6      	b.n	8006236 <HAL_TIM_ConfigClockSource+0x20a>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006066:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800606a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006072:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a6f      	ldr	r2, [pc, #444]	@ (8006240 <HAL_TIM_ConfigClockSource+0x214>)
 8006082:	4293      	cmp	r3, r2
 8006084:	f000 80c1 	beq.w	800620a <HAL_TIM_ConfigClockSource+0x1de>
 8006088:	4a6d      	ldr	r2, [pc, #436]	@ (8006240 <HAL_TIM_ConfigClockSource+0x214>)
 800608a:	4293      	cmp	r3, r2
 800608c:	f200 80c6 	bhi.w	800621c <HAL_TIM_ConfigClockSource+0x1f0>
 8006090:	4a6c      	ldr	r2, [pc, #432]	@ (8006244 <HAL_TIM_ConfigClockSource+0x218>)
 8006092:	4293      	cmp	r3, r2
 8006094:	f000 80b9 	beq.w	800620a <HAL_TIM_ConfigClockSource+0x1de>
 8006098:	4a6a      	ldr	r2, [pc, #424]	@ (8006244 <HAL_TIM_ConfigClockSource+0x218>)
 800609a:	4293      	cmp	r3, r2
 800609c:	f200 80be 	bhi.w	800621c <HAL_TIM_ConfigClockSource+0x1f0>
 80060a0:	4a69      	ldr	r2, [pc, #420]	@ (8006248 <HAL_TIM_ConfigClockSource+0x21c>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	f000 80b1 	beq.w	800620a <HAL_TIM_ConfigClockSource+0x1de>
 80060a8:	4a67      	ldr	r2, [pc, #412]	@ (8006248 <HAL_TIM_ConfigClockSource+0x21c>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	f200 80b6 	bhi.w	800621c <HAL_TIM_ConfigClockSource+0x1f0>
 80060b0:	4a66      	ldr	r2, [pc, #408]	@ (800624c <HAL_TIM_ConfigClockSource+0x220>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	f000 80a9 	beq.w	800620a <HAL_TIM_ConfigClockSource+0x1de>
 80060b8:	4a64      	ldr	r2, [pc, #400]	@ (800624c <HAL_TIM_ConfigClockSource+0x220>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	f200 80ae 	bhi.w	800621c <HAL_TIM_ConfigClockSource+0x1f0>
 80060c0:	4a63      	ldr	r2, [pc, #396]	@ (8006250 <HAL_TIM_ConfigClockSource+0x224>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	f000 80a1 	beq.w	800620a <HAL_TIM_ConfigClockSource+0x1de>
 80060c8:	4a61      	ldr	r2, [pc, #388]	@ (8006250 <HAL_TIM_ConfigClockSource+0x224>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	f200 80a6 	bhi.w	800621c <HAL_TIM_ConfigClockSource+0x1f0>
 80060d0:	4a60      	ldr	r2, [pc, #384]	@ (8006254 <HAL_TIM_ConfigClockSource+0x228>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	f000 8099 	beq.w	800620a <HAL_TIM_ConfigClockSource+0x1de>
 80060d8:	4a5e      	ldr	r2, [pc, #376]	@ (8006254 <HAL_TIM_ConfigClockSource+0x228>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	f200 809e 	bhi.w	800621c <HAL_TIM_ConfigClockSource+0x1f0>
 80060e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80060e4:	f000 8091 	beq.w	800620a <HAL_TIM_ConfigClockSource+0x1de>
 80060e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80060ec:	f200 8096 	bhi.w	800621c <HAL_TIM_ConfigClockSource+0x1f0>
 80060f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060f4:	f000 8089 	beq.w	800620a <HAL_TIM_ConfigClockSource+0x1de>
 80060f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060fc:	f200 808e 	bhi.w	800621c <HAL_TIM_ConfigClockSource+0x1f0>
 8006100:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006104:	d03e      	beq.n	8006184 <HAL_TIM_ConfigClockSource+0x158>
 8006106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800610a:	f200 8087 	bhi.w	800621c <HAL_TIM_ConfigClockSource+0x1f0>
 800610e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006112:	f000 8086 	beq.w	8006222 <HAL_TIM_ConfigClockSource+0x1f6>
 8006116:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800611a:	d87f      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x1f0>
 800611c:	2b70      	cmp	r3, #112	@ 0x70
 800611e:	d01a      	beq.n	8006156 <HAL_TIM_ConfigClockSource+0x12a>
 8006120:	2b70      	cmp	r3, #112	@ 0x70
 8006122:	d87b      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x1f0>
 8006124:	2b60      	cmp	r3, #96	@ 0x60
 8006126:	d050      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0x19e>
 8006128:	2b60      	cmp	r3, #96	@ 0x60
 800612a:	d877      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x1f0>
 800612c:	2b50      	cmp	r3, #80	@ 0x50
 800612e:	d03c      	beq.n	80061aa <HAL_TIM_ConfigClockSource+0x17e>
 8006130:	2b50      	cmp	r3, #80	@ 0x50
 8006132:	d873      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x1f0>
 8006134:	2b40      	cmp	r3, #64	@ 0x40
 8006136:	d058      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x1be>
 8006138:	2b40      	cmp	r3, #64	@ 0x40
 800613a:	d86f      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x1f0>
 800613c:	2b30      	cmp	r3, #48	@ 0x30
 800613e:	d064      	beq.n	800620a <HAL_TIM_ConfigClockSource+0x1de>
 8006140:	2b30      	cmp	r3, #48	@ 0x30
 8006142:	d86b      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x1f0>
 8006144:	2b20      	cmp	r3, #32
 8006146:	d060      	beq.n	800620a <HAL_TIM_ConfigClockSource+0x1de>
 8006148:	2b20      	cmp	r3, #32
 800614a:	d867      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x1f0>
 800614c:	2b00      	cmp	r3, #0
 800614e:	d05c      	beq.n	800620a <HAL_TIM_ConfigClockSource+0x1de>
 8006150:	2b10      	cmp	r3, #16
 8006152:	d05a      	beq.n	800620a <HAL_TIM_ConfigClockSource+0x1de>
 8006154:	e062      	b.n	800621c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006166:	f000 fcf9 	bl	8006b5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006178:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	609a      	str	r2, [r3, #8]
      break;
 8006182:	e04f      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006194:	f000 fce2 	bl	8006b5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689a      	ldr	r2, [r3, #8]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061a6:	609a      	str	r2, [r3, #8]
      break;
 80061a8:	e03c      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061b6:	461a      	mov	r2, r3
 80061b8:	f000 fc54 	bl	8006a64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2150      	movs	r1, #80	@ 0x50
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 fcad 	bl	8006b22 <TIM_ITRx_SetConfig>
      break;
 80061c8:	e02c      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061d6:	461a      	mov	r2, r3
 80061d8:	f000 fc73 	bl	8006ac2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2160      	movs	r1, #96	@ 0x60
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 fc9d 	bl	8006b22 <TIM_ITRx_SetConfig>
      break;
 80061e8:	e01c      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061f6:	461a      	mov	r2, r3
 80061f8:	f000 fc34 	bl	8006a64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2140      	movs	r1, #64	@ 0x40
 8006202:	4618      	mov	r0, r3
 8006204:	f000 fc8d 	bl	8006b22 <TIM_ITRx_SetConfig>
      break;
 8006208:	e00c      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4619      	mov	r1, r3
 8006214:	4610      	mov	r0, r2
 8006216:	f000 fc84 	bl	8006b22 <TIM_ITRx_SetConfig>
      break;
 800621a:	e003      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	73fb      	strb	r3, [r7, #15]
      break;
 8006220:	e000      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006222:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006234:	7bfb      	ldrb	r3, [r7, #15]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	00100070 	.word	0x00100070
 8006244:	00100060 	.word	0x00100060
 8006248:	00100050 	.word	0x00100050
 800624c:	00100040 	.word	0x00100040
 8006250:	00100030 	.word	0x00100030
 8006254:	00100020 	.word	0x00100020

08006258 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a4c      	ldr	r2, [pc, #304]	@ (80063ec <TIM_Base_SetConfig+0x144>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d017      	beq.n	80062f0 <TIM_Base_SetConfig+0x48>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062c6:	d013      	beq.n	80062f0 <TIM_Base_SetConfig+0x48>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a49      	ldr	r2, [pc, #292]	@ (80063f0 <TIM_Base_SetConfig+0x148>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d00f      	beq.n	80062f0 <TIM_Base_SetConfig+0x48>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a48      	ldr	r2, [pc, #288]	@ (80063f4 <TIM_Base_SetConfig+0x14c>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d00b      	beq.n	80062f0 <TIM_Base_SetConfig+0x48>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a47      	ldr	r2, [pc, #284]	@ (80063f8 <TIM_Base_SetConfig+0x150>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d007      	beq.n	80062f0 <TIM_Base_SetConfig+0x48>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a46      	ldr	r2, [pc, #280]	@ (80063fc <TIM_Base_SetConfig+0x154>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d003      	beq.n	80062f0 <TIM_Base_SetConfig+0x48>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a45      	ldr	r2, [pc, #276]	@ (8006400 <TIM_Base_SetConfig+0x158>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d108      	bne.n	8006302 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	4313      	orrs	r3, r2
 8006300:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a39      	ldr	r2, [pc, #228]	@ (80063ec <TIM_Base_SetConfig+0x144>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d023      	beq.n	8006352 <TIM_Base_SetConfig+0xaa>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006310:	d01f      	beq.n	8006352 <TIM_Base_SetConfig+0xaa>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a36      	ldr	r2, [pc, #216]	@ (80063f0 <TIM_Base_SetConfig+0x148>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d01b      	beq.n	8006352 <TIM_Base_SetConfig+0xaa>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a35      	ldr	r2, [pc, #212]	@ (80063f4 <TIM_Base_SetConfig+0x14c>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d017      	beq.n	8006352 <TIM_Base_SetConfig+0xaa>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a34      	ldr	r2, [pc, #208]	@ (80063f8 <TIM_Base_SetConfig+0x150>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d013      	beq.n	8006352 <TIM_Base_SetConfig+0xaa>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a33      	ldr	r2, [pc, #204]	@ (80063fc <TIM_Base_SetConfig+0x154>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d00f      	beq.n	8006352 <TIM_Base_SetConfig+0xaa>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a33      	ldr	r2, [pc, #204]	@ (8006404 <TIM_Base_SetConfig+0x15c>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d00b      	beq.n	8006352 <TIM_Base_SetConfig+0xaa>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a32      	ldr	r2, [pc, #200]	@ (8006408 <TIM_Base_SetConfig+0x160>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d007      	beq.n	8006352 <TIM_Base_SetConfig+0xaa>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a31      	ldr	r2, [pc, #196]	@ (800640c <TIM_Base_SetConfig+0x164>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d003      	beq.n	8006352 <TIM_Base_SetConfig+0xaa>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a2c      	ldr	r2, [pc, #176]	@ (8006400 <TIM_Base_SetConfig+0x158>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d108      	bne.n	8006364 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	4313      	orrs	r3, r2
 8006362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	4313      	orrs	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	689a      	ldr	r2, [r3, #8]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a18      	ldr	r2, [pc, #96]	@ (80063ec <TIM_Base_SetConfig+0x144>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d013      	beq.n	80063b8 <TIM_Base_SetConfig+0x110>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a1a      	ldr	r2, [pc, #104]	@ (80063fc <TIM_Base_SetConfig+0x154>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d00f      	beq.n	80063b8 <TIM_Base_SetConfig+0x110>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a1a      	ldr	r2, [pc, #104]	@ (8006404 <TIM_Base_SetConfig+0x15c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d00b      	beq.n	80063b8 <TIM_Base_SetConfig+0x110>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a19      	ldr	r2, [pc, #100]	@ (8006408 <TIM_Base_SetConfig+0x160>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d007      	beq.n	80063b8 <TIM_Base_SetConfig+0x110>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a18      	ldr	r2, [pc, #96]	@ (800640c <TIM_Base_SetConfig+0x164>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d003      	beq.n	80063b8 <TIM_Base_SetConfig+0x110>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a13      	ldr	r2, [pc, #76]	@ (8006400 <TIM_Base_SetConfig+0x158>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d103      	bne.n	80063c0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	691a      	ldr	r2, [r3, #16]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d105      	bne.n	80063de <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	f023 0201 	bic.w	r2, r3, #1
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	611a      	str	r2, [r3, #16]
  }
}
 80063de:	bf00      	nop
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	40012c00 	.word	0x40012c00
 80063f0:	40000400 	.word	0x40000400
 80063f4:	40000800 	.word	0x40000800
 80063f8:	40000c00 	.word	0x40000c00
 80063fc:	40013400 	.word	0x40013400
 8006400:	40015000 	.word	0x40015000
 8006404:	40014000 	.word	0x40014000
 8006408:	40014400 	.word	0x40014400
 800640c:	40014800 	.word	0x40014800

08006410 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	f023 0201 	bic.w	r2, r3, #1
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800643e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f023 0303 	bic.w	r3, r3, #3
 800644a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	4313      	orrs	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f023 0302 	bic.w	r3, r3, #2
 800645c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	4313      	orrs	r3, r2
 8006466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a30      	ldr	r2, [pc, #192]	@ (800652c <TIM_OC1_SetConfig+0x11c>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d013      	beq.n	8006498 <TIM_OC1_SetConfig+0x88>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a2f      	ldr	r2, [pc, #188]	@ (8006530 <TIM_OC1_SetConfig+0x120>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d00f      	beq.n	8006498 <TIM_OC1_SetConfig+0x88>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a2e      	ldr	r2, [pc, #184]	@ (8006534 <TIM_OC1_SetConfig+0x124>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d00b      	beq.n	8006498 <TIM_OC1_SetConfig+0x88>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a2d      	ldr	r2, [pc, #180]	@ (8006538 <TIM_OC1_SetConfig+0x128>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d007      	beq.n	8006498 <TIM_OC1_SetConfig+0x88>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a2c      	ldr	r2, [pc, #176]	@ (800653c <TIM_OC1_SetConfig+0x12c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d003      	beq.n	8006498 <TIM_OC1_SetConfig+0x88>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a2b      	ldr	r2, [pc, #172]	@ (8006540 <TIM_OC1_SetConfig+0x130>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d10c      	bne.n	80064b2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f023 0308 	bic.w	r3, r3, #8
 800649e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f023 0304 	bic.w	r3, r3, #4
 80064b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a1d      	ldr	r2, [pc, #116]	@ (800652c <TIM_OC1_SetConfig+0x11c>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d013      	beq.n	80064e2 <TIM_OC1_SetConfig+0xd2>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a1c      	ldr	r2, [pc, #112]	@ (8006530 <TIM_OC1_SetConfig+0x120>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d00f      	beq.n	80064e2 <TIM_OC1_SetConfig+0xd2>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a1b      	ldr	r2, [pc, #108]	@ (8006534 <TIM_OC1_SetConfig+0x124>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d00b      	beq.n	80064e2 <TIM_OC1_SetConfig+0xd2>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a1a      	ldr	r2, [pc, #104]	@ (8006538 <TIM_OC1_SetConfig+0x128>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d007      	beq.n	80064e2 <TIM_OC1_SetConfig+0xd2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a19      	ldr	r2, [pc, #100]	@ (800653c <TIM_OC1_SetConfig+0x12c>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d003      	beq.n	80064e2 <TIM_OC1_SetConfig+0xd2>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a18      	ldr	r2, [pc, #96]	@ (8006540 <TIM_OC1_SetConfig+0x130>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d111      	bne.n	8006506 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	4313      	orrs	r3, r2
 8006504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	621a      	str	r2, [r3, #32]
}
 8006520:	bf00      	nop
 8006522:	371c      	adds	r7, #28
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	40012c00 	.word	0x40012c00
 8006530:	40013400 	.word	0x40013400
 8006534:	40014000 	.word	0x40014000
 8006538:	40014400 	.word	0x40014400
 800653c:	40014800 	.word	0x40014800
 8006540:	40015000 	.word	0x40015000

08006544 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006544:	b480      	push	{r7}
 8006546:	b087      	sub	sp, #28
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	f023 0210 	bic.w	r2, r3, #16
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006572:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800657e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	021b      	lsls	r3, r3, #8
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	4313      	orrs	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f023 0320 	bic.w	r3, r3, #32
 8006592:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	011b      	lsls	r3, r3, #4
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	4313      	orrs	r3, r2
 800659e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a2c      	ldr	r2, [pc, #176]	@ (8006654 <TIM_OC2_SetConfig+0x110>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d007      	beq.n	80065b8 <TIM_OC2_SetConfig+0x74>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a2b      	ldr	r2, [pc, #172]	@ (8006658 <TIM_OC2_SetConfig+0x114>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d003      	beq.n	80065b8 <TIM_OC2_SetConfig+0x74>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a2a      	ldr	r2, [pc, #168]	@ (800665c <TIM_OC2_SetConfig+0x118>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d10d      	bne.n	80065d4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	011b      	lsls	r3, r3, #4
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a1f      	ldr	r2, [pc, #124]	@ (8006654 <TIM_OC2_SetConfig+0x110>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d013      	beq.n	8006604 <TIM_OC2_SetConfig+0xc0>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a1e      	ldr	r2, [pc, #120]	@ (8006658 <TIM_OC2_SetConfig+0x114>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d00f      	beq.n	8006604 <TIM_OC2_SetConfig+0xc0>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a1e      	ldr	r2, [pc, #120]	@ (8006660 <TIM_OC2_SetConfig+0x11c>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d00b      	beq.n	8006604 <TIM_OC2_SetConfig+0xc0>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a1d      	ldr	r2, [pc, #116]	@ (8006664 <TIM_OC2_SetConfig+0x120>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d007      	beq.n	8006604 <TIM_OC2_SetConfig+0xc0>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a1c      	ldr	r2, [pc, #112]	@ (8006668 <TIM_OC2_SetConfig+0x124>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d003      	beq.n	8006604 <TIM_OC2_SetConfig+0xc0>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a17      	ldr	r2, [pc, #92]	@ (800665c <TIM_OC2_SetConfig+0x118>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d113      	bne.n	800662c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800660a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006612:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	4313      	orrs	r3, r2
 800661e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	4313      	orrs	r3, r2
 800662a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	621a      	str	r2, [r3, #32]
}
 8006646:	bf00      	nop
 8006648:	371c      	adds	r7, #28
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	40012c00 	.word	0x40012c00
 8006658:	40013400 	.word	0x40013400
 800665c:	40015000 	.word	0x40015000
 8006660:	40014000 	.word	0x40014000
 8006664:	40014400 	.word	0x40014400
 8006668:	40014800 	.word	0x40014800

0800666c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800666c:	b480      	push	{r7}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800669a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800669e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 0303 	bic.w	r3, r3, #3
 80066a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	021b      	lsls	r3, r3, #8
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a2b      	ldr	r2, [pc, #172]	@ (8006778 <TIM_OC3_SetConfig+0x10c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d007      	beq.n	80066de <TIM_OC3_SetConfig+0x72>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a2a      	ldr	r2, [pc, #168]	@ (800677c <TIM_OC3_SetConfig+0x110>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d003      	beq.n	80066de <TIM_OC3_SetConfig+0x72>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a29      	ldr	r2, [pc, #164]	@ (8006780 <TIM_OC3_SetConfig+0x114>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d10d      	bne.n	80066fa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	021b      	lsls	r3, r3, #8
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a1e      	ldr	r2, [pc, #120]	@ (8006778 <TIM_OC3_SetConfig+0x10c>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d013      	beq.n	800672a <TIM_OC3_SetConfig+0xbe>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a1d      	ldr	r2, [pc, #116]	@ (800677c <TIM_OC3_SetConfig+0x110>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d00f      	beq.n	800672a <TIM_OC3_SetConfig+0xbe>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a1d      	ldr	r2, [pc, #116]	@ (8006784 <TIM_OC3_SetConfig+0x118>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d00b      	beq.n	800672a <TIM_OC3_SetConfig+0xbe>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a1c      	ldr	r2, [pc, #112]	@ (8006788 <TIM_OC3_SetConfig+0x11c>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d007      	beq.n	800672a <TIM_OC3_SetConfig+0xbe>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a1b      	ldr	r2, [pc, #108]	@ (800678c <TIM_OC3_SetConfig+0x120>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d003      	beq.n	800672a <TIM_OC3_SetConfig+0xbe>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a16      	ldr	r2, [pc, #88]	@ (8006780 <TIM_OC3_SetConfig+0x114>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d113      	bne.n	8006752 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	011b      	lsls	r3, r3, #4
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	4313      	orrs	r3, r2
 8006744:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	011b      	lsls	r3, r3, #4
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	4313      	orrs	r3, r2
 8006750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	685a      	ldr	r2, [r3, #4]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	621a      	str	r2, [r3, #32]
}
 800676c:	bf00      	nop
 800676e:	371c      	adds	r7, #28
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	40012c00 	.word	0x40012c00
 800677c:	40013400 	.word	0x40013400
 8006780:	40015000 	.word	0x40015000
 8006784:	40014000 	.word	0x40014000
 8006788:	40014400 	.word	0x40014400
 800678c:	40014800 	.word	0x40014800

08006790 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	021b      	lsls	r3, r3, #8
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	031b      	lsls	r3, r3, #12
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a2c      	ldr	r2, [pc, #176]	@ (80068a0 <TIM_OC4_SetConfig+0x110>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d007      	beq.n	8006804 <TIM_OC4_SetConfig+0x74>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a2b      	ldr	r2, [pc, #172]	@ (80068a4 <TIM_OC4_SetConfig+0x114>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d003      	beq.n	8006804 <TIM_OC4_SetConfig+0x74>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a2a      	ldr	r2, [pc, #168]	@ (80068a8 <TIM_OC4_SetConfig+0x118>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d10d      	bne.n	8006820 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800680a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	031b      	lsls	r3, r3, #12
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	4313      	orrs	r3, r2
 8006816:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800681e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a1f      	ldr	r2, [pc, #124]	@ (80068a0 <TIM_OC4_SetConfig+0x110>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d013      	beq.n	8006850 <TIM_OC4_SetConfig+0xc0>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a1e      	ldr	r2, [pc, #120]	@ (80068a4 <TIM_OC4_SetConfig+0x114>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d00f      	beq.n	8006850 <TIM_OC4_SetConfig+0xc0>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a1e      	ldr	r2, [pc, #120]	@ (80068ac <TIM_OC4_SetConfig+0x11c>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d00b      	beq.n	8006850 <TIM_OC4_SetConfig+0xc0>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a1d      	ldr	r2, [pc, #116]	@ (80068b0 <TIM_OC4_SetConfig+0x120>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d007      	beq.n	8006850 <TIM_OC4_SetConfig+0xc0>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a1c      	ldr	r2, [pc, #112]	@ (80068b4 <TIM_OC4_SetConfig+0x124>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d003      	beq.n	8006850 <TIM_OC4_SetConfig+0xc0>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a17      	ldr	r2, [pc, #92]	@ (80068a8 <TIM_OC4_SetConfig+0x118>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d113      	bne.n	8006878 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006856:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800685e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	019b      	lsls	r3, r3, #6
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	4313      	orrs	r3, r2
 800686a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	019b      	lsls	r3, r3, #6
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	4313      	orrs	r3, r2
 8006876:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	621a      	str	r2, [r3, #32]
}
 8006892:	bf00      	nop
 8006894:	371c      	adds	r7, #28
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	40012c00 	.word	0x40012c00
 80068a4:	40013400 	.word	0x40013400
 80068a8:	40015000 	.word	0x40015000
 80068ac:	40014000 	.word	0x40014000
 80068b0:	40014400 	.word	0x40014400
 80068b4:	40014800 	.word	0x40014800

080068b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b087      	sub	sp, #28
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80068fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	041b      	lsls	r3, r3, #16
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	4313      	orrs	r3, r2
 8006908:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a19      	ldr	r2, [pc, #100]	@ (8006974 <TIM_OC5_SetConfig+0xbc>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d013      	beq.n	800693a <TIM_OC5_SetConfig+0x82>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a18      	ldr	r2, [pc, #96]	@ (8006978 <TIM_OC5_SetConfig+0xc0>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d00f      	beq.n	800693a <TIM_OC5_SetConfig+0x82>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a17      	ldr	r2, [pc, #92]	@ (800697c <TIM_OC5_SetConfig+0xc4>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d00b      	beq.n	800693a <TIM_OC5_SetConfig+0x82>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a16      	ldr	r2, [pc, #88]	@ (8006980 <TIM_OC5_SetConfig+0xc8>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d007      	beq.n	800693a <TIM_OC5_SetConfig+0x82>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a15      	ldr	r2, [pc, #84]	@ (8006984 <TIM_OC5_SetConfig+0xcc>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d003      	beq.n	800693a <TIM_OC5_SetConfig+0x82>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a14      	ldr	r2, [pc, #80]	@ (8006988 <TIM_OC5_SetConfig+0xd0>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d109      	bne.n	800694e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006940:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	021b      	lsls	r3, r3, #8
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	4313      	orrs	r3, r2
 800694c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	621a      	str	r2, [r3, #32]
}
 8006968:	bf00      	nop
 800696a:	371c      	adds	r7, #28
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	40012c00 	.word	0x40012c00
 8006978:	40013400 	.word	0x40013400
 800697c:	40014000 	.word	0x40014000
 8006980:	40014400 	.word	0x40014400
 8006984:	40014800 	.word	0x40014800
 8006988:	40015000 	.word	0x40015000

0800698c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800698c:	b480      	push	{r7}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	021b      	lsls	r3, r3, #8
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	051b      	lsls	r3, r3, #20
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	4313      	orrs	r3, r2
 80069de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a1a      	ldr	r2, [pc, #104]	@ (8006a4c <TIM_OC6_SetConfig+0xc0>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d013      	beq.n	8006a10 <TIM_OC6_SetConfig+0x84>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a19      	ldr	r2, [pc, #100]	@ (8006a50 <TIM_OC6_SetConfig+0xc4>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d00f      	beq.n	8006a10 <TIM_OC6_SetConfig+0x84>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a18      	ldr	r2, [pc, #96]	@ (8006a54 <TIM_OC6_SetConfig+0xc8>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d00b      	beq.n	8006a10 <TIM_OC6_SetConfig+0x84>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a17      	ldr	r2, [pc, #92]	@ (8006a58 <TIM_OC6_SetConfig+0xcc>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d007      	beq.n	8006a10 <TIM_OC6_SetConfig+0x84>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a16      	ldr	r2, [pc, #88]	@ (8006a5c <TIM_OC6_SetConfig+0xd0>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d003      	beq.n	8006a10 <TIM_OC6_SetConfig+0x84>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a15      	ldr	r2, [pc, #84]	@ (8006a60 <TIM_OC6_SetConfig+0xd4>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d109      	bne.n	8006a24 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	029b      	lsls	r3, r3, #10
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	621a      	str	r2, [r3, #32]
}
 8006a3e:	bf00      	nop
 8006a40:	371c      	adds	r7, #28
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	40012c00 	.word	0x40012c00
 8006a50:	40013400 	.word	0x40013400
 8006a54:	40014000 	.word	0x40014000
 8006a58:	40014400 	.word	0x40014400
 8006a5c:	40014800 	.word	0x40014800
 8006a60:	40015000 	.word	0x40015000

08006a64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b087      	sub	sp, #28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6a1b      	ldr	r3, [r3, #32]
 8006a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	f023 0201 	bic.w	r2, r3, #1
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	011b      	lsls	r3, r3, #4
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f023 030a 	bic.w	r3, r3, #10
 8006aa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006aa2:	697a      	ldr	r2, [r7, #20]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	621a      	str	r2, [r3, #32]
}
 8006ab6:	bf00      	nop
 8006ab8:	371c      	adds	r7, #28
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b087      	sub	sp, #28
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	60f8      	str	r0, [r7, #12]
 8006aca:	60b9      	str	r1, [r7, #8]
 8006acc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6a1b      	ldr	r3, [r3, #32]
 8006ad8:	f023 0210 	bic.w	r2, r3, #16
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	699b      	ldr	r3, [r3, #24]
 8006ae4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006aec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	031b      	lsls	r3, r3, #12
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006afe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	011b      	lsls	r3, r3, #4
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	621a      	str	r2, [r3, #32]
}
 8006b16:	bf00      	nop
 8006b18:	371c      	adds	r7, #28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b085      	sub	sp, #20
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006b38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b3e:	683a      	ldr	r2, [r7, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	f043 0307 	orr.w	r3, r3, #7
 8006b48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	609a      	str	r2, [r3, #8]
}
 8006b50:	bf00      	nop
 8006b52:	3714      	adds	r7, #20
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
 8006b68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	021a      	lsls	r2, r3, #8
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	609a      	str	r2, [r3, #8]
}
 8006b90:	bf00      	nop
 8006b92:	371c      	adds	r7, #28
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b087      	sub	sp, #28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f003 031f 	and.w	r3, r3, #31
 8006bae:	2201      	movs	r2, #1
 8006bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6a1a      	ldr	r2, [r3, #32]
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	43db      	mvns	r3, r3
 8006bbe:	401a      	ands	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6a1a      	ldr	r2, [r3, #32]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f003 031f 	and.w	r3, r3, #31
 8006bce:	6879      	ldr	r1, [r7, #4]
 8006bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd4:	431a      	orrs	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	621a      	str	r2, [r3, #32]
}
 8006bda:	bf00      	nop
 8006bdc:	371c      	adds	r7, #28
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
	...

08006be8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d101      	bne.n	8006c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	e074      	b.n	8006cea <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a34      	ldr	r2, [pc, #208]	@ (8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d009      	beq.n	8006c3e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a33      	ldr	r2, [pc, #204]	@ (8006cfc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d004      	beq.n	8006c3e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a31      	ldr	r2, [pc, #196]	@ (8006d00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d108      	bne.n	8006c50 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006c44:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a21      	ldr	r2, [pc, #132]	@ (8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d022      	beq.n	8006cbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c80:	d01d      	beq.n	8006cbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a1f      	ldr	r2, [pc, #124]	@ (8006d04 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d018      	beq.n	8006cbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a1d      	ldr	r2, [pc, #116]	@ (8006d08 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d013      	beq.n	8006cbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8006d0c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d00e      	beq.n	8006cbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a15      	ldr	r2, [pc, #84]	@ (8006cfc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d009      	beq.n	8006cbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a18      	ldr	r2, [pc, #96]	@ (8006d10 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d004      	beq.n	8006cbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a11      	ldr	r2, [pc, #68]	@ (8006d00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d10c      	bne.n	8006cd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	40012c00 	.word	0x40012c00
 8006cfc:	40013400 	.word	0x40013400
 8006d00:	40015000 	.word	0x40015000
 8006d04:	40000400 	.word	0x40000400
 8006d08:	40000800 	.word	0x40000800
 8006d0c:	40000c00 	.word	0x40000c00
 8006d10:	40014000 	.word	0x40014000

08006d14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d101      	bne.n	8006d30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	e078      	b.n	8006e22 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d96:	4313      	orrs	r3, r2
 8006d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	041b      	lsls	r3, r3, #16
 8006da6:	4313      	orrs	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a1c      	ldr	r2, [pc, #112]	@ (8006e30 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d009      	beq.n	8006dd6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a1b      	ldr	r2, [pc, #108]	@ (8006e34 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d004      	beq.n	8006dd6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a19      	ldr	r2, [pc, #100]	@ (8006e38 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d11c      	bne.n	8006e10 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de0:	051b      	lsls	r3, r3, #20
 8006de2:	4313      	orrs	r3, r2
 8006de4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	6a1b      	ldr	r3, [r3, #32]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	40012c00 	.word	0x40012c00
 8006e34:	40013400 	.word	0x40013400
 8006e38:	40015000 	.word	0x40015000

08006e3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006ebc:	bf00      	nop
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e042      	b.n	8006f60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d106      	bne.n	8006ef2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7fa fb53 	bl	8001598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2224      	movs	r2, #36	@ 0x24
 8006ef6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 0201 	bic.w	r2, r2, #1
 8006f08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d002      	beq.n	8006f18 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fe68 	bl	8007be8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fb69 	bl	80075f0 <UART_SetConfig>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d101      	bne.n	8006f28 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e01b      	b.n	8006f60 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689a      	ldr	r2, [r3, #8]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f042 0201 	orr.w	r2, r2, #1
 8006f56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 fee7 	bl	8007d2c <UART_CheckIdleState>
 8006f5e:	4603      	mov	r3, r0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b0ba      	sub	sp, #232	@ 0xe8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	69db      	ldr	r3, [r3, #28]
 8006f76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006f92:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006f96:	4013      	ands	r3, r2
 8006f98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006f9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d11b      	bne.n	8006fdc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fa8:	f003 0320 	and.w	r3, r3, #32
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d015      	beq.n	8006fdc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fb4:	f003 0320 	and.w	r3, r3, #32
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d105      	bne.n	8006fc8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d009      	beq.n	8006fdc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 82e3 	beq.w	8007598 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	4798      	blx	r3
      }
      return;
 8006fda:	e2dd      	b.n	8007598 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006fdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 8123 	beq.w	800722c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006fe6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006fea:	4b8d      	ldr	r3, [pc, #564]	@ (8007220 <HAL_UART_IRQHandler+0x2b8>)
 8006fec:	4013      	ands	r3, r2
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d106      	bne.n	8007000 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006ff2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006ff6:	4b8b      	ldr	r3, [pc, #556]	@ (8007224 <HAL_UART_IRQHandler+0x2bc>)
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f000 8116 	beq.w	800722c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	2b00      	cmp	r3, #0
 800700a:	d011      	beq.n	8007030 <HAL_UART_IRQHandler+0xc8>
 800700c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00b      	beq.n	8007030 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2201      	movs	r2, #1
 800701e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007026:	f043 0201 	orr.w	r2, r3, #1
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007034:	f003 0302 	and.w	r3, r3, #2
 8007038:	2b00      	cmp	r3, #0
 800703a:	d011      	beq.n	8007060 <HAL_UART_IRQHandler+0xf8>
 800703c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00b      	beq.n	8007060 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2202      	movs	r2, #2
 800704e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007056:	f043 0204 	orr.w	r2, r3, #4
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007064:	f003 0304 	and.w	r3, r3, #4
 8007068:	2b00      	cmp	r3, #0
 800706a:	d011      	beq.n	8007090 <HAL_UART_IRQHandler+0x128>
 800706c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00b      	beq.n	8007090 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2204      	movs	r2, #4
 800707e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007086:	f043 0202 	orr.w	r2, r3, #2
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007094:	f003 0308 	and.w	r3, r3, #8
 8007098:	2b00      	cmp	r3, #0
 800709a:	d017      	beq.n	80070cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800709c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070a0:	f003 0320 	and.w	r3, r3, #32
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d105      	bne.n	80070b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80070a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80070ac:	4b5c      	ldr	r3, [pc, #368]	@ (8007220 <HAL_UART_IRQHandler+0x2b8>)
 80070ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00b      	beq.n	80070cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2208      	movs	r2, #8
 80070ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070c2:	f043 0208 	orr.w	r2, r3, #8
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80070cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d012      	beq.n	80070fe <HAL_UART_IRQHandler+0x196>
 80070d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00c      	beq.n	80070fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070f4:	f043 0220 	orr.w	r2, r3, #32
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 8249 	beq.w	800759c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800710a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800710e:	f003 0320 	and.w	r3, r3, #32
 8007112:	2b00      	cmp	r3, #0
 8007114:	d013      	beq.n	800713e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800711a:	f003 0320 	and.w	r3, r3, #32
 800711e:	2b00      	cmp	r3, #0
 8007120:	d105      	bne.n	800712e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d007      	beq.n	800713e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007132:	2b00      	cmp	r3, #0
 8007134:	d003      	beq.n	800713e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007144:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007152:	2b40      	cmp	r3, #64	@ 0x40
 8007154:	d005      	beq.n	8007162 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800715a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800715e:	2b00      	cmp	r3, #0
 8007160:	d054      	beq.n	800720c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fef9 	bl	8007f5a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007172:	2b40      	cmp	r3, #64	@ 0x40
 8007174:	d146      	bne.n	8007204 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3308      	adds	r3, #8
 800717c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007180:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007184:	e853 3f00 	ldrex	r3, [r3]
 8007188:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800718c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007190:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007194:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	3308      	adds	r3, #8
 800719e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80071a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80071a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80071ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80071b2:	e841 2300 	strex	r3, r2, [r1]
 80071b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80071ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1d9      	bne.n	8007176 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d017      	beq.n	80071fc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071d2:	4a15      	ldr	r2, [pc, #84]	@ (8007228 <HAL_UART_IRQHandler+0x2c0>)
 80071d4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071dc:	4618      	mov	r0, r3
 80071de:	f7fc fd27 	bl	8003c30 <HAL_DMA_Abort_IT>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d019      	beq.n	800721c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80071f6:	4610      	mov	r0, r2
 80071f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071fa:	e00f      	b.n	800721c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f9e1 	bl	80075c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007202:	e00b      	b.n	800721c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f9dd 	bl	80075c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800720a:	e007      	b.n	800721c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f9d9 	bl	80075c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800721a:	e1bf      	b.n	800759c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800721c:	bf00      	nop
    return;
 800721e:	e1bd      	b.n	800759c <HAL_UART_IRQHandler+0x634>
 8007220:	10000001 	.word	0x10000001
 8007224:	04000120 	.word	0x04000120
 8007228:	08008027 	.word	0x08008027

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007230:	2b01      	cmp	r3, #1
 8007232:	f040 8153 	bne.w	80074dc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800723a:	f003 0310 	and.w	r3, r3, #16
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 814c 	beq.w	80074dc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007248:	f003 0310 	and.w	r3, r3, #16
 800724c:	2b00      	cmp	r3, #0
 800724e:	f000 8145 	beq.w	80074dc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2210      	movs	r2, #16
 8007258:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007264:	2b40      	cmp	r3, #64	@ 0x40
 8007266:	f040 80bb 	bne.w	80073e0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007278:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 818f 	beq.w	80075a0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007288:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800728c:	429a      	cmp	r2, r3
 800728e:	f080 8187 	bcs.w	80075a0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007298:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 0320 	and.w	r3, r3, #32
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f040 8087 	bne.w	80073be <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80072bc:	e853 3f00 	ldrex	r3, [r3]
 80072c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80072c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	461a      	mov	r2, r3
 80072d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80072da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80072de:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80072e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80072ea:	e841 2300 	strex	r3, r2, [r1]
 80072ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80072f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1da      	bne.n	80072b0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3308      	adds	r3, #8
 8007300:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007302:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007304:	e853 3f00 	ldrex	r3, [r3]
 8007308:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800730a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800730c:	f023 0301 	bic.w	r3, r3, #1
 8007310:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3308      	adds	r3, #8
 800731a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800731e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007322:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007324:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007326:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800732a:	e841 2300 	strex	r3, r2, [r1]
 800732e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007330:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1e1      	bne.n	80072fa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	3308      	adds	r3, #8
 800733c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007340:	e853 3f00 	ldrex	r3, [r3]
 8007344:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007346:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007348:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800734c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	3308      	adds	r3, #8
 8007356:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800735a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800735c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007360:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007362:	e841 2300 	strex	r3, r2, [r1]
 8007366:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007368:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1e3      	bne.n	8007336 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2220      	movs	r2, #32
 8007372:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007382:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007384:	e853 3f00 	ldrex	r3, [r3]
 8007388:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800738a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800738c:	f023 0310 	bic.w	r3, r3, #16
 8007390:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	461a      	mov	r2, r3
 800739a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800739e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073a0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80073a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073a6:	e841 2300 	strex	r3, r2, [r1]
 80073aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80073ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1e4      	bne.n	800737c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fc fbe0 	bl	8003b7e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2202      	movs	r2, #2
 80073c2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	4619      	mov	r1, r3
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f8fd 	bl	80075d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80073de:	e0df      	b.n	80075a0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 80d1 	beq.w	80075a4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007402:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007406:	2b00      	cmp	r3, #0
 8007408:	f000 80cc 	beq.w	80075a4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007414:	e853 3f00 	ldrex	r3, [r3]
 8007418:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800741a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800741c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007420:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	461a      	mov	r2, r3
 800742a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800742e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007430:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007432:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007434:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007436:	e841 2300 	strex	r3, r2, [r1]
 800743a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800743c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1e4      	bne.n	800740c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	3308      	adds	r3, #8
 8007448:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744c:	e853 3f00 	ldrex	r3, [r3]
 8007450:	623b      	str	r3, [r7, #32]
   return(result);
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007458:	f023 0301 	bic.w	r3, r3, #1
 800745c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	3308      	adds	r3, #8
 8007466:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800746a:	633a      	str	r2, [r7, #48]	@ 0x30
 800746c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007470:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007472:	e841 2300 	strex	r3, r2, [r1]
 8007476:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1e1      	bne.n	8007442 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2220      	movs	r2, #32
 8007482:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	e853 3f00 	ldrex	r3, [r3]
 800749e:	60fb      	str	r3, [r7, #12]
   return(result);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f023 0310 	bic.w	r3, r3, #16
 80074a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	461a      	mov	r2, r3
 80074b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80074b4:	61fb      	str	r3, [r7, #28]
 80074b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b8:	69b9      	ldr	r1, [r7, #24]
 80074ba:	69fa      	ldr	r2, [r7, #28]
 80074bc:	e841 2300 	strex	r3, r2, [r1]
 80074c0:	617b      	str	r3, [r7, #20]
   return(result);
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1e4      	bne.n	8007492 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f87f 	bl	80075d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074da:	e063      	b.n	80075a4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80074dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00e      	beq.n	8007506 <HAL_UART_IRQHandler+0x59e>
 80074e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d008      	beq.n	8007506 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80074fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fdd2 	bl	80080a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007504:	e051      	b.n	80075aa <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800750a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800750e:	2b00      	cmp	r3, #0
 8007510:	d014      	beq.n	800753c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800751a:	2b00      	cmp	r3, #0
 800751c:	d105      	bne.n	800752a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800751e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007522:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d008      	beq.n	800753c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800752e:	2b00      	cmp	r3, #0
 8007530:	d03a      	beq.n	80075a8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	4798      	blx	r3
    }
    return;
 800753a:	e035      	b.n	80075a8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800753c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007544:	2b00      	cmp	r3, #0
 8007546:	d009      	beq.n	800755c <HAL_UART_IRQHandler+0x5f4>
 8007548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800754c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007550:	2b00      	cmp	r3, #0
 8007552:	d003      	beq.n	800755c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 fd7c 	bl	8008052 <UART_EndTransmit_IT>
    return;
 800755a:	e026      	b.n	80075aa <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800755c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007560:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d009      	beq.n	800757c <HAL_UART_IRQHandler+0x614>
 8007568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800756c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d003      	beq.n	800757c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fdab 	bl	80080d0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800757a:	e016      	b.n	80075aa <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800757c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007580:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d010      	beq.n	80075aa <HAL_UART_IRQHandler+0x642>
 8007588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800758c:	2b00      	cmp	r3, #0
 800758e:	da0c      	bge.n	80075aa <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fd93 	bl	80080bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007596:	e008      	b.n	80075aa <HAL_UART_IRQHandler+0x642>
      return;
 8007598:	bf00      	nop
 800759a:	e006      	b.n	80075aa <HAL_UART_IRQHandler+0x642>
    return;
 800759c:	bf00      	nop
 800759e:	e004      	b.n	80075aa <HAL_UART_IRQHandler+0x642>
      return;
 80075a0:	bf00      	nop
 80075a2:	e002      	b.n	80075aa <HAL_UART_IRQHandler+0x642>
      return;
 80075a4:	bf00      	nop
 80075a6:	e000      	b.n	80075aa <HAL_UART_IRQHandler+0x642>
    return;
 80075a8:	bf00      	nop
  }
}
 80075aa:	37e8      	adds	r7, #232	@ 0xe8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	460b      	mov	r3, r1
 80075e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075f4:	b08c      	sub	sp, #48	@ 0x30
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075fa:	2300      	movs	r3, #0
 80075fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	689a      	ldr	r2, [r3, #8]
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	431a      	orrs	r2, r3
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	431a      	orrs	r2, r3
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	4313      	orrs	r3, r2
 8007616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	4baa      	ldr	r3, [pc, #680]	@ (80078c8 <UART_SetConfig+0x2d8>)
 8007620:	4013      	ands	r3, r2
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	6812      	ldr	r2, [r2, #0]
 8007626:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007628:	430b      	orrs	r3, r1
 800762a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	68da      	ldr	r2, [r3, #12]
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	430a      	orrs	r2, r1
 8007640:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a9f      	ldr	r2, [pc, #636]	@ (80078cc <UART_SetConfig+0x2dc>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d004      	beq.n	800765c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007658:	4313      	orrs	r3, r2
 800765a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007666:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	6812      	ldr	r2, [r2, #0]
 800766e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007670:	430b      	orrs	r3, r1
 8007672:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800767a:	f023 010f 	bic.w	r1, r3, #15
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	430a      	orrs	r2, r1
 8007688:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a90      	ldr	r2, [pc, #576]	@ (80078d0 <UART_SetConfig+0x2e0>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d125      	bne.n	80076e0 <UART_SetConfig+0xf0>
 8007694:	4b8f      	ldr	r3, [pc, #572]	@ (80078d4 <UART_SetConfig+0x2e4>)
 8007696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800769a:	f003 0303 	and.w	r3, r3, #3
 800769e:	2b03      	cmp	r3, #3
 80076a0:	d81a      	bhi.n	80076d8 <UART_SetConfig+0xe8>
 80076a2:	a201      	add	r2, pc, #4	@ (adr r2, 80076a8 <UART_SetConfig+0xb8>)
 80076a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a8:	080076b9 	.word	0x080076b9
 80076ac:	080076c9 	.word	0x080076c9
 80076b0:	080076c1 	.word	0x080076c1
 80076b4:	080076d1 	.word	0x080076d1
 80076b8:	2301      	movs	r3, #1
 80076ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076be:	e116      	b.n	80078ee <UART_SetConfig+0x2fe>
 80076c0:	2302      	movs	r3, #2
 80076c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076c6:	e112      	b.n	80078ee <UART_SetConfig+0x2fe>
 80076c8:	2304      	movs	r3, #4
 80076ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ce:	e10e      	b.n	80078ee <UART_SetConfig+0x2fe>
 80076d0:	2308      	movs	r3, #8
 80076d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076d6:	e10a      	b.n	80078ee <UART_SetConfig+0x2fe>
 80076d8:	2310      	movs	r3, #16
 80076da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076de:	e106      	b.n	80078ee <UART_SetConfig+0x2fe>
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a7c      	ldr	r2, [pc, #496]	@ (80078d8 <UART_SetConfig+0x2e8>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d138      	bne.n	800775c <UART_SetConfig+0x16c>
 80076ea:	4b7a      	ldr	r3, [pc, #488]	@ (80078d4 <UART_SetConfig+0x2e4>)
 80076ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076f0:	f003 030c 	and.w	r3, r3, #12
 80076f4:	2b0c      	cmp	r3, #12
 80076f6:	d82d      	bhi.n	8007754 <UART_SetConfig+0x164>
 80076f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007700 <UART_SetConfig+0x110>)
 80076fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fe:	bf00      	nop
 8007700:	08007735 	.word	0x08007735
 8007704:	08007755 	.word	0x08007755
 8007708:	08007755 	.word	0x08007755
 800770c:	08007755 	.word	0x08007755
 8007710:	08007745 	.word	0x08007745
 8007714:	08007755 	.word	0x08007755
 8007718:	08007755 	.word	0x08007755
 800771c:	08007755 	.word	0x08007755
 8007720:	0800773d 	.word	0x0800773d
 8007724:	08007755 	.word	0x08007755
 8007728:	08007755 	.word	0x08007755
 800772c:	08007755 	.word	0x08007755
 8007730:	0800774d 	.word	0x0800774d
 8007734:	2300      	movs	r3, #0
 8007736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800773a:	e0d8      	b.n	80078ee <UART_SetConfig+0x2fe>
 800773c:	2302      	movs	r3, #2
 800773e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007742:	e0d4      	b.n	80078ee <UART_SetConfig+0x2fe>
 8007744:	2304      	movs	r3, #4
 8007746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800774a:	e0d0      	b.n	80078ee <UART_SetConfig+0x2fe>
 800774c:	2308      	movs	r3, #8
 800774e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007752:	e0cc      	b.n	80078ee <UART_SetConfig+0x2fe>
 8007754:	2310      	movs	r3, #16
 8007756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800775a:	e0c8      	b.n	80078ee <UART_SetConfig+0x2fe>
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a5e      	ldr	r2, [pc, #376]	@ (80078dc <UART_SetConfig+0x2ec>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d125      	bne.n	80077b2 <UART_SetConfig+0x1c2>
 8007766:	4b5b      	ldr	r3, [pc, #364]	@ (80078d4 <UART_SetConfig+0x2e4>)
 8007768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800776c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007770:	2b30      	cmp	r3, #48	@ 0x30
 8007772:	d016      	beq.n	80077a2 <UART_SetConfig+0x1b2>
 8007774:	2b30      	cmp	r3, #48	@ 0x30
 8007776:	d818      	bhi.n	80077aa <UART_SetConfig+0x1ba>
 8007778:	2b20      	cmp	r3, #32
 800777a:	d00a      	beq.n	8007792 <UART_SetConfig+0x1a2>
 800777c:	2b20      	cmp	r3, #32
 800777e:	d814      	bhi.n	80077aa <UART_SetConfig+0x1ba>
 8007780:	2b00      	cmp	r3, #0
 8007782:	d002      	beq.n	800778a <UART_SetConfig+0x19a>
 8007784:	2b10      	cmp	r3, #16
 8007786:	d008      	beq.n	800779a <UART_SetConfig+0x1aa>
 8007788:	e00f      	b.n	80077aa <UART_SetConfig+0x1ba>
 800778a:	2300      	movs	r3, #0
 800778c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007790:	e0ad      	b.n	80078ee <UART_SetConfig+0x2fe>
 8007792:	2302      	movs	r3, #2
 8007794:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007798:	e0a9      	b.n	80078ee <UART_SetConfig+0x2fe>
 800779a:	2304      	movs	r3, #4
 800779c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077a0:	e0a5      	b.n	80078ee <UART_SetConfig+0x2fe>
 80077a2:	2308      	movs	r3, #8
 80077a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077a8:	e0a1      	b.n	80078ee <UART_SetConfig+0x2fe>
 80077aa:	2310      	movs	r3, #16
 80077ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077b0:	e09d      	b.n	80078ee <UART_SetConfig+0x2fe>
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a4a      	ldr	r2, [pc, #296]	@ (80078e0 <UART_SetConfig+0x2f0>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d125      	bne.n	8007808 <UART_SetConfig+0x218>
 80077bc:	4b45      	ldr	r3, [pc, #276]	@ (80078d4 <UART_SetConfig+0x2e4>)
 80077be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80077c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80077c8:	d016      	beq.n	80077f8 <UART_SetConfig+0x208>
 80077ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80077cc:	d818      	bhi.n	8007800 <UART_SetConfig+0x210>
 80077ce:	2b80      	cmp	r3, #128	@ 0x80
 80077d0:	d00a      	beq.n	80077e8 <UART_SetConfig+0x1f8>
 80077d2:	2b80      	cmp	r3, #128	@ 0x80
 80077d4:	d814      	bhi.n	8007800 <UART_SetConfig+0x210>
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d002      	beq.n	80077e0 <UART_SetConfig+0x1f0>
 80077da:	2b40      	cmp	r3, #64	@ 0x40
 80077dc:	d008      	beq.n	80077f0 <UART_SetConfig+0x200>
 80077de:	e00f      	b.n	8007800 <UART_SetConfig+0x210>
 80077e0:	2300      	movs	r3, #0
 80077e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077e6:	e082      	b.n	80078ee <UART_SetConfig+0x2fe>
 80077e8:	2302      	movs	r3, #2
 80077ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ee:	e07e      	b.n	80078ee <UART_SetConfig+0x2fe>
 80077f0:	2304      	movs	r3, #4
 80077f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077f6:	e07a      	b.n	80078ee <UART_SetConfig+0x2fe>
 80077f8:	2308      	movs	r3, #8
 80077fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077fe:	e076      	b.n	80078ee <UART_SetConfig+0x2fe>
 8007800:	2310      	movs	r3, #16
 8007802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007806:	e072      	b.n	80078ee <UART_SetConfig+0x2fe>
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a35      	ldr	r2, [pc, #212]	@ (80078e4 <UART_SetConfig+0x2f4>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d12a      	bne.n	8007868 <UART_SetConfig+0x278>
 8007812:	4b30      	ldr	r3, [pc, #192]	@ (80078d4 <UART_SetConfig+0x2e4>)
 8007814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007818:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800781c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007820:	d01a      	beq.n	8007858 <UART_SetConfig+0x268>
 8007822:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007826:	d81b      	bhi.n	8007860 <UART_SetConfig+0x270>
 8007828:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800782c:	d00c      	beq.n	8007848 <UART_SetConfig+0x258>
 800782e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007832:	d815      	bhi.n	8007860 <UART_SetConfig+0x270>
 8007834:	2b00      	cmp	r3, #0
 8007836:	d003      	beq.n	8007840 <UART_SetConfig+0x250>
 8007838:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800783c:	d008      	beq.n	8007850 <UART_SetConfig+0x260>
 800783e:	e00f      	b.n	8007860 <UART_SetConfig+0x270>
 8007840:	2300      	movs	r3, #0
 8007842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007846:	e052      	b.n	80078ee <UART_SetConfig+0x2fe>
 8007848:	2302      	movs	r3, #2
 800784a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800784e:	e04e      	b.n	80078ee <UART_SetConfig+0x2fe>
 8007850:	2304      	movs	r3, #4
 8007852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007856:	e04a      	b.n	80078ee <UART_SetConfig+0x2fe>
 8007858:	2308      	movs	r3, #8
 800785a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800785e:	e046      	b.n	80078ee <UART_SetConfig+0x2fe>
 8007860:	2310      	movs	r3, #16
 8007862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007866:	e042      	b.n	80078ee <UART_SetConfig+0x2fe>
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a17      	ldr	r2, [pc, #92]	@ (80078cc <UART_SetConfig+0x2dc>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d13a      	bne.n	80078e8 <UART_SetConfig+0x2f8>
 8007872:	4b18      	ldr	r3, [pc, #96]	@ (80078d4 <UART_SetConfig+0x2e4>)
 8007874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007878:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800787c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007880:	d01a      	beq.n	80078b8 <UART_SetConfig+0x2c8>
 8007882:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007886:	d81b      	bhi.n	80078c0 <UART_SetConfig+0x2d0>
 8007888:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800788c:	d00c      	beq.n	80078a8 <UART_SetConfig+0x2b8>
 800788e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007892:	d815      	bhi.n	80078c0 <UART_SetConfig+0x2d0>
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <UART_SetConfig+0x2b0>
 8007898:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800789c:	d008      	beq.n	80078b0 <UART_SetConfig+0x2c0>
 800789e:	e00f      	b.n	80078c0 <UART_SetConfig+0x2d0>
 80078a0:	2300      	movs	r3, #0
 80078a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078a6:	e022      	b.n	80078ee <UART_SetConfig+0x2fe>
 80078a8:	2302      	movs	r3, #2
 80078aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078ae:	e01e      	b.n	80078ee <UART_SetConfig+0x2fe>
 80078b0:	2304      	movs	r3, #4
 80078b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078b6:	e01a      	b.n	80078ee <UART_SetConfig+0x2fe>
 80078b8:	2308      	movs	r3, #8
 80078ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078be:	e016      	b.n	80078ee <UART_SetConfig+0x2fe>
 80078c0:	2310      	movs	r3, #16
 80078c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078c6:	e012      	b.n	80078ee <UART_SetConfig+0x2fe>
 80078c8:	cfff69f3 	.word	0xcfff69f3
 80078cc:	40008000 	.word	0x40008000
 80078d0:	40013800 	.word	0x40013800
 80078d4:	40021000 	.word	0x40021000
 80078d8:	40004400 	.word	0x40004400
 80078dc:	40004800 	.word	0x40004800
 80078e0:	40004c00 	.word	0x40004c00
 80078e4:	40005000 	.word	0x40005000
 80078e8:	2310      	movs	r3, #16
 80078ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4aae      	ldr	r2, [pc, #696]	@ (8007bac <UART_SetConfig+0x5bc>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	f040 8097 	bne.w	8007a28 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80078fe:	2b08      	cmp	r3, #8
 8007900:	d823      	bhi.n	800794a <UART_SetConfig+0x35a>
 8007902:	a201      	add	r2, pc, #4	@ (adr r2, 8007908 <UART_SetConfig+0x318>)
 8007904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007908:	0800792d 	.word	0x0800792d
 800790c:	0800794b 	.word	0x0800794b
 8007910:	08007935 	.word	0x08007935
 8007914:	0800794b 	.word	0x0800794b
 8007918:	0800793b 	.word	0x0800793b
 800791c:	0800794b 	.word	0x0800794b
 8007920:	0800794b 	.word	0x0800794b
 8007924:	0800794b 	.word	0x0800794b
 8007928:	08007943 	.word	0x08007943
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800792c:	f7fd fa72 	bl	8004e14 <HAL_RCC_GetPCLK1Freq>
 8007930:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007932:	e010      	b.n	8007956 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007934:	4b9e      	ldr	r3, [pc, #632]	@ (8007bb0 <UART_SetConfig+0x5c0>)
 8007936:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007938:	e00d      	b.n	8007956 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800793a:	f7fd f9fd 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 800793e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007940:	e009      	b.n	8007956 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007942:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007946:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007948:	e005      	b.n	8007956 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800794a:	2300      	movs	r3, #0
 800794c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007954:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007958:	2b00      	cmp	r3, #0
 800795a:	f000 8130 	beq.w	8007bbe <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007962:	4a94      	ldr	r2, [pc, #592]	@ (8007bb4 <UART_SetConfig+0x5c4>)
 8007964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007968:	461a      	mov	r2, r3
 800796a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007970:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	685a      	ldr	r2, [r3, #4]
 8007976:	4613      	mov	r3, r2
 8007978:	005b      	lsls	r3, r3, #1
 800797a:	4413      	add	r3, r2
 800797c:	69ba      	ldr	r2, [r7, #24]
 800797e:	429a      	cmp	r2, r3
 8007980:	d305      	bcc.n	800798e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007988:	69ba      	ldr	r2, [r7, #24]
 800798a:	429a      	cmp	r2, r3
 800798c:	d903      	bls.n	8007996 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007994:	e113      	b.n	8007bbe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007998:	2200      	movs	r2, #0
 800799a:	60bb      	str	r3, [r7, #8]
 800799c:	60fa      	str	r2, [r7, #12]
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a2:	4a84      	ldr	r2, [pc, #528]	@ (8007bb4 <UART_SetConfig+0x5c4>)
 80079a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	2200      	movs	r2, #0
 80079ac:	603b      	str	r3, [r7, #0]
 80079ae:	607a      	str	r2, [r7, #4]
 80079b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80079b8:	f7f8 fc2e 	bl	8000218 <__aeabi_uldivmod>
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	4610      	mov	r0, r2
 80079c2:	4619      	mov	r1, r3
 80079c4:	f04f 0200 	mov.w	r2, #0
 80079c8:	f04f 0300 	mov.w	r3, #0
 80079cc:	020b      	lsls	r3, r1, #8
 80079ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80079d2:	0202      	lsls	r2, r0, #8
 80079d4:	6979      	ldr	r1, [r7, #20]
 80079d6:	6849      	ldr	r1, [r1, #4]
 80079d8:	0849      	lsrs	r1, r1, #1
 80079da:	2000      	movs	r0, #0
 80079dc:	460c      	mov	r4, r1
 80079de:	4605      	mov	r5, r0
 80079e0:	eb12 0804 	adds.w	r8, r2, r4
 80079e4:	eb43 0905 	adc.w	r9, r3, r5
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	469a      	mov	sl, r3
 80079f0:	4693      	mov	fp, r2
 80079f2:	4652      	mov	r2, sl
 80079f4:	465b      	mov	r3, fp
 80079f6:	4640      	mov	r0, r8
 80079f8:	4649      	mov	r1, r9
 80079fa:	f7f8 fc0d 	bl	8000218 <__aeabi_uldivmod>
 80079fe:	4602      	mov	r2, r0
 8007a00:	460b      	mov	r3, r1
 8007a02:	4613      	mov	r3, r2
 8007a04:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a0c:	d308      	bcc.n	8007a20 <UART_SetConfig+0x430>
 8007a0e:	6a3b      	ldr	r3, [r7, #32]
 8007a10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a14:	d204      	bcs.n	8007a20 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6a3a      	ldr	r2, [r7, #32]
 8007a1c:	60da      	str	r2, [r3, #12]
 8007a1e:	e0ce      	b.n	8007bbe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007a26:	e0ca      	b.n	8007bbe <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	69db      	ldr	r3, [r3, #28]
 8007a2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a30:	d166      	bne.n	8007b00 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007a32:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a36:	2b08      	cmp	r3, #8
 8007a38:	d827      	bhi.n	8007a8a <UART_SetConfig+0x49a>
 8007a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a40 <UART_SetConfig+0x450>)
 8007a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a40:	08007a65 	.word	0x08007a65
 8007a44:	08007a6d 	.word	0x08007a6d
 8007a48:	08007a75 	.word	0x08007a75
 8007a4c:	08007a8b 	.word	0x08007a8b
 8007a50:	08007a7b 	.word	0x08007a7b
 8007a54:	08007a8b 	.word	0x08007a8b
 8007a58:	08007a8b 	.word	0x08007a8b
 8007a5c:	08007a8b 	.word	0x08007a8b
 8007a60:	08007a83 	.word	0x08007a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a64:	f7fd f9d6 	bl	8004e14 <HAL_RCC_GetPCLK1Freq>
 8007a68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a6a:	e014      	b.n	8007a96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a6c:	f7fd f9e8 	bl	8004e40 <HAL_RCC_GetPCLK2Freq>
 8007a70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a72:	e010      	b.n	8007a96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a74:	4b4e      	ldr	r3, [pc, #312]	@ (8007bb0 <UART_SetConfig+0x5c0>)
 8007a76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a78:	e00d      	b.n	8007a96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a7a:	f7fd f95d 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 8007a7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a80:	e009      	b.n	8007a96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a88:	e005      	b.n	8007a96 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007a94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 8090 	beq.w	8007bbe <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa2:	4a44      	ldr	r2, [pc, #272]	@ (8007bb4 <UART_SetConfig+0x5c4>)
 8007aa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aac:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ab0:	005a      	lsls	r2, r3, #1
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	085b      	lsrs	r3, r3, #1
 8007ab8:	441a      	add	r2, r3
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ac4:	6a3b      	ldr	r3, [r7, #32]
 8007ac6:	2b0f      	cmp	r3, #15
 8007ac8:	d916      	bls.n	8007af8 <UART_SetConfig+0x508>
 8007aca:	6a3b      	ldr	r3, [r7, #32]
 8007acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ad0:	d212      	bcs.n	8007af8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ad2:	6a3b      	ldr	r3, [r7, #32]
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	f023 030f 	bic.w	r3, r3, #15
 8007ada:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007adc:	6a3b      	ldr	r3, [r7, #32]
 8007ade:	085b      	lsrs	r3, r3, #1
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	f003 0307 	and.w	r3, r3, #7
 8007ae6:	b29a      	uxth	r2, r3
 8007ae8:	8bfb      	ldrh	r3, [r7, #30]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	8bfa      	ldrh	r2, [r7, #30]
 8007af4:	60da      	str	r2, [r3, #12]
 8007af6:	e062      	b.n	8007bbe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007afe:	e05e      	b.n	8007bbe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b00:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007b04:	2b08      	cmp	r3, #8
 8007b06:	d828      	bhi.n	8007b5a <UART_SetConfig+0x56a>
 8007b08:	a201      	add	r2, pc, #4	@ (adr r2, 8007b10 <UART_SetConfig+0x520>)
 8007b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0e:	bf00      	nop
 8007b10:	08007b35 	.word	0x08007b35
 8007b14:	08007b3d 	.word	0x08007b3d
 8007b18:	08007b45 	.word	0x08007b45
 8007b1c:	08007b5b 	.word	0x08007b5b
 8007b20:	08007b4b 	.word	0x08007b4b
 8007b24:	08007b5b 	.word	0x08007b5b
 8007b28:	08007b5b 	.word	0x08007b5b
 8007b2c:	08007b5b 	.word	0x08007b5b
 8007b30:	08007b53 	.word	0x08007b53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b34:	f7fd f96e 	bl	8004e14 <HAL_RCC_GetPCLK1Freq>
 8007b38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b3a:	e014      	b.n	8007b66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b3c:	f7fd f980 	bl	8004e40 <HAL_RCC_GetPCLK2Freq>
 8007b40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b42:	e010      	b.n	8007b66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b44:	4b1a      	ldr	r3, [pc, #104]	@ (8007bb0 <UART_SetConfig+0x5c0>)
 8007b46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b48:	e00d      	b.n	8007b66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b4a:	f7fd f8f5 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 8007b4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b50:	e009      	b.n	8007b66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b58:	e005      	b.n	8007b66 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007b64:	bf00      	nop
    }

    if (pclk != 0U)
 8007b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d028      	beq.n	8007bbe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b70:	4a10      	ldr	r2, [pc, #64]	@ (8007bb4 <UART_SetConfig+0x5c4>)
 8007b72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b76:	461a      	mov	r2, r3
 8007b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	085b      	lsrs	r3, r3, #1
 8007b84:	441a      	add	r2, r3
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	2b0f      	cmp	r3, #15
 8007b94:	d910      	bls.n	8007bb8 <UART_SetConfig+0x5c8>
 8007b96:	6a3b      	ldr	r3, [r7, #32]
 8007b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b9c:	d20c      	bcs.n	8007bb8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b9e:	6a3b      	ldr	r3, [r7, #32]
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	60da      	str	r2, [r3, #12]
 8007ba8:	e009      	b.n	8007bbe <UART_SetConfig+0x5ce>
 8007baa:	bf00      	nop
 8007bac:	40008000 	.word	0x40008000
 8007bb0:	00f42400 	.word	0x00f42400
 8007bb4:	080083e0 	.word	0x080083e0
      }
      else
      {
        ret = HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007bda:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3730      	adds	r7, #48	@ 0x30
 8007be2:	46bd      	mov	sp, r7
 8007be4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007be8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf4:	f003 0308 	and.w	r3, r3, #8
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00a      	beq.n	8007c12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00a      	beq.n	8007c34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	430a      	orrs	r2, r1
 8007c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c38:	f003 0302 	and.w	r3, r3, #2
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00a      	beq.n	8007c56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	430a      	orrs	r2, r1
 8007c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c5a:	f003 0304 	and.w	r3, r3, #4
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00a      	beq.n	8007c78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	430a      	orrs	r2, r1
 8007c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c7c:	f003 0310 	and.w	r3, r3, #16
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00a      	beq.n	8007c9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	430a      	orrs	r2, r1
 8007c98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c9e:	f003 0320 	and.w	r3, r3, #32
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00a      	beq.n	8007cbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d01a      	beq.n	8007cfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	430a      	orrs	r2, r1
 8007cdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ce2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ce6:	d10a      	bne.n	8007cfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00a      	beq.n	8007d20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	605a      	str	r2, [r3, #4]
  }
}
 8007d20:	bf00      	nop
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b098      	sub	sp, #96	@ 0x60
 8007d30:	af02      	add	r7, sp, #8
 8007d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d3c:	f7f9 febe 	bl	8001abc <HAL_GetTick>
 8007d40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0308 	and.w	r3, r3, #8
 8007d4c:	2b08      	cmp	r3, #8
 8007d4e:	d12f      	bne.n	8007db0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f88e 	bl	8007e80 <UART_WaitOnFlagUntilTimeout>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d022      	beq.n	8007db0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d72:	e853 3f00 	ldrex	r3, [r3]
 8007d76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	461a      	mov	r2, r3
 8007d86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d88:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d90:	e841 2300 	strex	r3, r2, [r1]
 8007d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1e6      	bne.n	8007d6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2220      	movs	r2, #32
 8007da0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dac:	2303      	movs	r3, #3
 8007dae:	e063      	b.n	8007e78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0304 	and.w	r3, r3, #4
 8007dba:	2b04      	cmp	r3, #4
 8007dbc:	d149      	bne.n	8007e52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dbe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f857 	bl	8007e80 <UART_WaitOnFlagUntilTimeout>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d03c      	beq.n	8007e52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de0:	e853 3f00 	ldrex	r3, [r3]
 8007de4:	623b      	str	r3, [r7, #32]
   return(result);
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007dec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	461a      	mov	r2, r3
 8007df4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007df6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007df8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007dfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dfe:	e841 2300 	strex	r3, r2, [r1]
 8007e02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1e6      	bne.n	8007dd8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	3308      	adds	r3, #8
 8007e10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	e853 3f00 	ldrex	r3, [r3]
 8007e18:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f023 0301 	bic.w	r3, r3, #1
 8007e20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	3308      	adds	r3, #8
 8007e28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e2a:	61fa      	str	r2, [r7, #28]
 8007e2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2e:	69b9      	ldr	r1, [r7, #24]
 8007e30:	69fa      	ldr	r2, [r7, #28]
 8007e32:	e841 2300 	strex	r3, r2, [r1]
 8007e36:	617b      	str	r3, [r7, #20]
   return(result);
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1e5      	bne.n	8007e0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2220      	movs	r2, #32
 8007e42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e012      	b.n	8007e78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2220      	movs	r2, #32
 8007e56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3758      	adds	r7, #88	@ 0x58
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	603b      	str	r3, [r7, #0]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e90:	e04f      	b.n	8007f32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e98:	d04b      	beq.n	8007f32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e9a:	f7f9 fe0f 	bl	8001abc <HAL_GetTick>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	69ba      	ldr	r2, [r7, #24]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d302      	bcc.n	8007eb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d101      	bne.n	8007eb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e04e      	b.n	8007f52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 0304 	and.w	r3, r3, #4
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d037      	beq.n	8007f32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	2b80      	cmp	r3, #128	@ 0x80
 8007ec6:	d034      	beq.n	8007f32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	2b40      	cmp	r3, #64	@ 0x40
 8007ecc:	d031      	beq.n	8007f32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	69db      	ldr	r3, [r3, #28]
 8007ed4:	f003 0308 	and.w	r3, r3, #8
 8007ed8:	2b08      	cmp	r3, #8
 8007eda:	d110      	bne.n	8007efe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2208      	movs	r2, #8
 8007ee2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f000 f838 	bl	8007f5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2208      	movs	r2, #8
 8007eee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e029      	b.n	8007f52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	69db      	ldr	r3, [r3, #28]
 8007f04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f0c:	d111      	bne.n	8007f32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f000 f81e 	bl	8007f5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2220      	movs	r2, #32
 8007f22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e00f      	b.n	8007f52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	69da      	ldr	r2, [r3, #28]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	bf0c      	ite	eq
 8007f42:	2301      	moveq	r3, #1
 8007f44:	2300      	movne	r3, #0
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	461a      	mov	r2, r3
 8007f4a:	79fb      	ldrb	r3, [r7, #7]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d0a0      	beq.n	8007e92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	b095      	sub	sp, #84	@ 0x54
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f6a:	e853 3f00 	ldrex	r3, [r3]
 8007f6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f80:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f82:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f88:	e841 2300 	strex	r3, r2, [r1]
 8007f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1e6      	bne.n	8007f62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3308      	adds	r3, #8
 8007f9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9c:	6a3b      	ldr	r3, [r7, #32]
 8007f9e:	e853 3f00 	ldrex	r3, [r3]
 8007fa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007faa:	f023 0301 	bic.w	r3, r3, #1
 8007fae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	3308      	adds	r3, #8
 8007fb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007fba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007fbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fc0:	e841 2300 	strex	r3, r2, [r1]
 8007fc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1e3      	bne.n	8007f94 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d118      	bne.n	8008006 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	e853 3f00 	ldrex	r3, [r3]
 8007fe0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	f023 0310 	bic.w	r3, r3, #16
 8007fe8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ff2:	61bb      	str	r3, [r7, #24]
 8007ff4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff6:	6979      	ldr	r1, [r7, #20]
 8007ff8:	69ba      	ldr	r2, [r7, #24]
 8007ffa:	e841 2300 	strex	r3, r2, [r1]
 8007ffe:	613b      	str	r3, [r7, #16]
   return(result);
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1e6      	bne.n	8007fd4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2220      	movs	r2, #32
 800800a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800801a:	bf00      	nop
 800801c:	3754      	adds	r7, #84	@ 0x54
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b084      	sub	sp, #16
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008032:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f7ff fabd 	bl	80075c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800804a:	bf00      	nop
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b088      	sub	sp, #32
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	e853 3f00 	ldrex	r3, [r3]
 8008066:	60bb      	str	r3, [r7, #8]
   return(result);
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800806e:	61fb      	str	r3, [r7, #28]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	461a      	mov	r2, r3
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	61bb      	str	r3, [r7, #24]
 800807a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807c:	6979      	ldr	r1, [r7, #20]
 800807e:	69ba      	ldr	r2, [r7, #24]
 8008080:	e841 2300 	strex	r3, r2, [r1]
 8008084:	613b      	str	r3, [r7, #16]
   return(result);
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1e6      	bne.n	800805a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2220      	movs	r2, #32
 8008090:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7ff fa88 	bl	80075b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080a0:	bf00      	nop
 80080a2:	3720      	adds	r7, #32
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80080d8:	bf00      	nop
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d101      	bne.n	80080fa <HAL_UARTEx_DisableFifoMode+0x16>
 80080f6:	2302      	movs	r3, #2
 80080f8:	e027      	b.n	800814a <HAL_UARTEx_DisableFifoMode+0x66>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2201      	movs	r2, #1
 80080fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2224      	movs	r2, #36	@ 0x24
 8008106:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f022 0201 	bic.w	r2, r2, #1
 8008120:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008128:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2220      	movs	r2, #32
 800813c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3714      	adds	r7, #20
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr

08008156 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b084      	sub	sp, #16
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
 800815e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008166:	2b01      	cmp	r3, #1
 8008168:	d101      	bne.n	800816e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800816a:	2302      	movs	r3, #2
 800816c:	e02d      	b.n	80081ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2224      	movs	r2, #36	@ 0x24
 800817a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f022 0201 	bic.w	r2, r2, #1
 8008194:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	683a      	ldr	r2, [r7, #0]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f850 	bl	8008250 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2220      	movs	r2, #32
 80081bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b084      	sub	sp, #16
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d101      	bne.n	80081ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80081e6:	2302      	movs	r3, #2
 80081e8:	e02d      	b.n	8008246 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2224      	movs	r2, #36	@ 0x24
 80081f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f022 0201 	bic.w	r2, r2, #1
 8008210:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	683a      	ldr	r2, [r7, #0]
 8008222:	430a      	orrs	r2, r1
 8008224:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f812 	bl	8008250 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2220      	movs	r2, #32
 8008238:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
	...

08008250 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800825c:	2b00      	cmp	r3, #0
 800825e:	d108      	bne.n	8008272 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008270:	e031      	b.n	80082d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008272:	2308      	movs	r3, #8
 8008274:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008276:	2308      	movs	r3, #8
 8008278:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	0e5b      	lsrs	r3, r3, #25
 8008282:	b2db      	uxtb	r3, r3
 8008284:	f003 0307 	and.w	r3, r3, #7
 8008288:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	0f5b      	lsrs	r3, r3, #29
 8008292:	b2db      	uxtb	r3, r3
 8008294:	f003 0307 	and.w	r3, r3, #7
 8008298:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800829a:	7bbb      	ldrb	r3, [r7, #14]
 800829c:	7b3a      	ldrb	r2, [r7, #12]
 800829e:	4911      	ldr	r1, [pc, #68]	@ (80082e4 <UARTEx_SetNbDataToProcess+0x94>)
 80082a0:	5c8a      	ldrb	r2, [r1, r2]
 80082a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80082a6:	7b3a      	ldrb	r2, [r7, #12]
 80082a8:	490f      	ldr	r1, [pc, #60]	@ (80082e8 <UARTEx_SetNbDataToProcess+0x98>)
 80082aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082b8:	7bfb      	ldrb	r3, [r7, #15]
 80082ba:	7b7a      	ldrb	r2, [r7, #13]
 80082bc:	4909      	ldr	r1, [pc, #36]	@ (80082e4 <UARTEx_SetNbDataToProcess+0x94>)
 80082be:	5c8a      	ldrb	r2, [r1, r2]
 80082c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80082c4:	7b7a      	ldrb	r2, [r7, #13]
 80082c6:	4908      	ldr	r1, [pc, #32]	@ (80082e8 <UARTEx_SetNbDataToProcess+0x98>)
 80082c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80082d6:	bf00      	nop
 80082d8:	3714      	adds	r7, #20
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	080083f8 	.word	0x080083f8
 80082e8:	08008400 	.word	0x08008400

080082ec <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	ed93 7a06 	vldr	s14, [r3, #24]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	edd3 7a07 	vldr	s15, [r3, #28]
 8008302:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	edd3 7a08 	vldr	s15, [r3, #32]
 800830c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	edd3 7a06 	vldr	s15, [r3, #24]
 800831c:	eeb1 7a67 	vneg.f32	s14, s15
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	edd3 7a08 	vldr	s15, [r3, #32]
 8008326:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800832a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a1a      	ldr	r2, [r3, #32]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d006      	beq.n	8008350 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	330c      	adds	r3, #12
 8008346:	220c      	movs	r2, #12
 8008348:	2100      	movs	r1, #0
 800834a:	4618      	mov	r0, r3
 800834c:	f000 f804 	bl	8008358 <memset>
  }

}
 8008350:	bf00      	nop
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <memset>:
 8008358:	4402      	add	r2, r0
 800835a:	4603      	mov	r3, r0
 800835c:	4293      	cmp	r3, r2
 800835e:	d100      	bne.n	8008362 <memset+0xa>
 8008360:	4770      	bx	lr
 8008362:	f803 1b01 	strb.w	r1, [r3], #1
 8008366:	e7f9      	b.n	800835c <memset+0x4>

08008368 <__libc_init_array>:
 8008368:	b570      	push	{r4, r5, r6, lr}
 800836a:	4d0d      	ldr	r5, [pc, #52]	@ (80083a0 <__libc_init_array+0x38>)
 800836c:	4c0d      	ldr	r4, [pc, #52]	@ (80083a4 <__libc_init_array+0x3c>)
 800836e:	1b64      	subs	r4, r4, r5
 8008370:	10a4      	asrs	r4, r4, #2
 8008372:	2600      	movs	r6, #0
 8008374:	42a6      	cmp	r6, r4
 8008376:	d109      	bne.n	800838c <__libc_init_array+0x24>
 8008378:	4d0b      	ldr	r5, [pc, #44]	@ (80083a8 <__libc_init_array+0x40>)
 800837a:	4c0c      	ldr	r4, [pc, #48]	@ (80083ac <__libc_init_array+0x44>)
 800837c:	f000 f818 	bl	80083b0 <_init>
 8008380:	1b64      	subs	r4, r4, r5
 8008382:	10a4      	asrs	r4, r4, #2
 8008384:	2600      	movs	r6, #0
 8008386:	42a6      	cmp	r6, r4
 8008388:	d105      	bne.n	8008396 <__libc_init_array+0x2e>
 800838a:	bd70      	pop	{r4, r5, r6, pc}
 800838c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008390:	4798      	blx	r3
 8008392:	3601      	adds	r6, #1
 8008394:	e7ee      	b.n	8008374 <__libc_init_array+0xc>
 8008396:	f855 3b04 	ldr.w	r3, [r5], #4
 800839a:	4798      	blx	r3
 800839c:	3601      	adds	r6, #1
 800839e:	e7f2      	b.n	8008386 <__libc_init_array+0x1e>
 80083a0:	08008410 	.word	0x08008410
 80083a4:	08008410 	.word	0x08008410
 80083a8:	08008410 	.word	0x08008410
 80083ac:	08008414 	.word	0x08008414

080083b0 <_init>:
 80083b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b2:	bf00      	nop
 80083b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083b6:	bc08      	pop	{r3}
 80083b8:	469e      	mov	lr, r3
 80083ba:	4770      	bx	lr

080083bc <_fini>:
 80083bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083be:	bf00      	nop
 80083c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083c2:	bc08      	pop	{r3}
 80083c4:	469e      	mov	lr, r3
 80083c6:	4770      	bx	lr
