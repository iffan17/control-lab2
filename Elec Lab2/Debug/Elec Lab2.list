
Elec Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007500  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080076d8  080076d8  000086d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007718  08007718  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  08007718  08007718  00008718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007720  08007720  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007720  08007720  00008720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007724  08007724  00008724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007728  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  2000000c  08007734  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  08007734  000094f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018446  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cbf  00000000  00000000  00021482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  00024148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000106c  00000000  00000000  00025648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dd6  00000000  00000000  000266b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189a3  00000000  00000000  0004f48a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011411e  00000000  00000000  00067e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017bf4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b10  00000000  00000000  0017bf90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00181aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080076c0 	.word	0x080076c0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080076c0 	.word	0x080076c0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f001 f86a 	bl	80015e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f95d 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 fcbf 	bl	8000e98 <MX_GPIO_Init>
  MX_DMA_Init();
 800051a:	f000 fc93 	bl	8000e44 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800051e:	f000 fa2d 	bl	800097c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000522:	f000 f9a1 	bl	8000868 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000526:	f000 fb71 	bl	8000c0c <MX_TIM3_Init>
  MX_TIM4_Init();
 800052a:	f000 fbbd 	bl	8000ca8 <MX_TIM4_Init>
  MX_TIM5_Init();
 800052e:	f000 fc33 	bl	8000d98 <MX_TIM5_Init>
  MX_TIM2_Init();
 8000532:	f000 fb1d 	bl	8000b70 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000536:	f000 fa6b 	bl	8000a10 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 200);
 800053a:	22c8      	movs	r2, #200	@ 0xc8
 800053c:	498a      	ldr	r1, [pc, #552]	@ (8000768 <main+0x260>)
 800053e:	488b      	ldr	r0, [pc, #556]	@ (800076c <main+0x264>)
 8000540:	f001 fcbe 	bl	8001ec0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000544:	488a      	ldr	r0, [pc, #552]	@ (8000770 <main+0x268>)
 8000546:	f004 fca9 	bl	8004e9c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 800054a:	488a      	ldr	r0, [pc, #552]	@ (8000774 <main+0x26c>)
 800054c:	f004 fca6 	bl	8004e9c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000550:	4889      	ldr	r0, [pc, #548]	@ (8000778 <main+0x270>)
 8000552:	f004 fd13 	bl	8004f7c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000556:	2100      	movs	r1, #0
 8000558:	4888      	ldr	r0, [pc, #544]	@ (800077c <main+0x274>)
 800055a:	f004 fde9 	bl	8005130 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800055e:	2100      	movs	r1, #0
 8000560:	4884      	ldr	r0, [pc, #528]	@ (8000774 <main+0x26c>)
 8000562:	f004 fde5 	bl	8005130 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 8000566:	213c      	movs	r1, #60	@ 0x3c
 8000568:	4885      	ldr	r0, [pc, #532]	@ (8000780 <main+0x278>)
 800056a:	f004 ff99 	bl	80054a0 <HAL_TIM_Encoder_Start>

  PID.Kp =0.1;
 800056e:	4b85      	ldr	r3, [pc, #532]	@ (8000784 <main+0x27c>)
 8000570:	4a85      	ldr	r2, [pc, #532]	@ (8000788 <main+0x280>)
 8000572:	619a      	str	r2, [r3, #24]
  PID.Ki =0;
 8000574:	4b83      	ldr	r3, [pc, #524]	@ (8000784 <main+0x27c>)
 8000576:	f04f 0200 	mov.w	r2, #0
 800057a:	61da      	str	r2, [r3, #28]
  PID.Kd = 0;
 800057c:	4b81      	ldr	r3, [pc, #516]	@ (8000784 <main+0x27c>)
 800057e:	f04f 0200 	mov.w	r2, #0
 8000582:	621a      	str	r2, [r3, #32]
  set_pos = 0;
 8000584:	4b81      	ldr	r3, [pc, #516]	@ (800078c <main+0x284>)
 8000586:	f04f 0200 	mov.w	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
  z = 0;
 800058c:	4b80      	ldr	r3, [pc, #512]	@ (8000790 <main+0x288>)
 800058e:	2200      	movs	r2, #0
 8000590:	801a      	strh	r2, [r3, #0]
  arm_pid_init_f32(&PID, 0);
 8000592:	2100      	movs	r1, #0
 8000594:	487b      	ldr	r0, [pc, #492]	@ (8000784 <main+0x27c>)
 8000596:	f007 f831 	bl	80075fc <arm_pid_init_f32>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Degree = (QEIReadRaw/48)*360;
 800059a:	4b7e      	ldr	r3, [pc, #504]	@ (8000794 <main+0x28c>)
 800059c:	ed93 7a00 	vldr	s14, [r3]
 80005a0:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8000798 <main+0x290>
 80005a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005a8:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 800079c <main+0x294>
 80005ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005b0:	4b7b      	ldr	r3, [pc, #492]	@ (80007a0 <main+0x298>)
 80005b2:	edc3 7a00 	vstr	s15, [r3]
	  for (uint16_t i =0; i < 100;i++)
 80005b6:	2300      	movs	r3, #0
 80005b8:	81fb      	strh	r3, [r7, #14]
 80005ba:	e019      	b.n	80005f0 <main+0xe8>
	  {
		  x += ADC_RawRead[(i*2)];
 80005bc:	89fb      	ldrh	r3, [r7, #14]
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	4a69      	ldr	r2, [pc, #420]	@ (8000768 <main+0x260>)
 80005c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b76      	ldr	r3, [pc, #472]	@ (80007a4 <main+0x29c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4413      	add	r3, r2
 80005ce:	4a75      	ldr	r2, [pc, #468]	@ (80007a4 <main+0x29c>)
 80005d0:	6013      	str	r3, [r2, #0]
		  y += ADC_RawRead[(i*2)+1];
 80005d2:	89fb      	ldrh	r3, [r7, #14]
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	3301      	adds	r3, #1
 80005d8:	4a63      	ldr	r2, [pc, #396]	@ (8000768 <main+0x260>)
 80005da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005de:	461a      	mov	r2, r3
 80005e0:	4b71      	ldr	r3, [pc, #452]	@ (80007a8 <main+0x2a0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4413      	add	r3, r2
 80005e6:	4a70      	ldr	r2, [pc, #448]	@ (80007a8 <main+0x2a0>)
 80005e8:	6013      	str	r3, [r2, #0]
	  for (uint16_t i =0; i < 100;i++)
 80005ea:	89fb      	ldrh	r3, [r7, #14]
 80005ec:	3301      	adds	r3, #1
 80005ee:	81fb      	strh	r3, [r7, #14]
 80005f0:	89fb      	ldrh	r3, [r7, #14]
 80005f2:	2b63      	cmp	r3, #99	@ 0x63
 80005f4:	d9e2      	bls.n	80005bc <main+0xb4>
	  }
	  position = x/100;
 80005f6:	4b6b      	ldr	r3, [pc, #428]	@ (80007a4 <main+0x29c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a6c      	ldr	r2, [pc, #432]	@ (80007ac <main+0x2a4>)
 80005fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000600:	095b      	lsrs	r3, r3, #5
 8000602:	ee07 3a90 	vmov	s15, r3
 8000606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800060a:	4b69      	ldr	r3, [pc, #420]	@ (80007b0 <main+0x2a8>)
 800060c:	edc3 7a00 	vstr	s15, [r3]
	  setposition = y/100;
 8000610:	4b65      	ldr	r3, [pc, #404]	@ (80007a8 <main+0x2a0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a65      	ldr	r2, [pc, #404]	@ (80007ac <main+0x2a4>)
 8000616:	fba2 2303 	umull	r2, r3, r2, r3
 800061a:	095b      	lsrs	r3, r3, #5
 800061c:	ee07 3a90 	vmov	s15, r3
 8000620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000624:	4b63      	ldr	r3, [pc, #396]	@ (80007b4 <main+0x2ac>)
 8000626:	edc3 7a00 	vstr	s15, [r3]
	  x = 0;
 800062a:	4b5e      	ldr	r3, [pc, #376]	@ (80007a4 <main+0x29c>)
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
	  y = 0;
 8000630:	4b5d      	ldr	r3, [pc, #372]	@ (80007a8 <main+0x2a0>)
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]

	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim5);
 8000636:	4b52      	ldr	r3, [pc, #328]	@ (8000780 <main+0x278>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800063c:	ee07 3a90 	vmov	s15, r3
 8000640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000644:	4b53      	ldr	r3, [pc, #332]	@ (8000794 <main+0x28c>)
 8000646:	edc3 7a00 	vstr	s15, [r3]


	  Vfeedback = (arm_pid_f32(&PID, set_pos - pos))*32676/3072;
 800064a:	4b50      	ldr	r3, [pc, #320]	@ (800078c <main+0x284>)
 800064c:	ed93 7a00 	vldr	s14, [r3]
 8000650:	4b59      	ldr	r3, [pc, #356]	@ (80007b8 <main+0x2b0>)
 8000652:	edd3 7a00 	vldr	s15, [r3]
 8000656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800065a:	4b4a      	ldr	r3, [pc, #296]	@ (8000784 <main+0x27c>)
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	edc7 7a01 	vstr	s15, [r7, #4]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	ed93 7a00 	vldr	s14, [r3]
 8000668:	edd7 7a01 	vldr	s15, [r7, #4]
 800066c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	edd3 6a01 	vldr	s13, [r3, #4]
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	edd3 7a03 	vldr	s15, [r3, #12]
 800067c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000680:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	edd3 6a02 	vldr	s13, [r3, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000694:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800069e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006a2:	edc7 7a00 	vstr	s15, [r7]

    /* Update state */
    S->state[1] = S->state[0];
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	68da      	ldr	r2, [r3, #12]
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	683a      	ldr	r2, [r7, #0]
 80006b8:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80006ba:	edd7 7a00 	vldr	s15, [r7]
 80006be:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80007bc <main+0x2b4>
 80006c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80006c6:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 80007c0 <main+0x2b8>
 80006ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006ce:	4b3d      	ldr	r3, [pc, #244]	@ (80007c4 <main+0x2bc>)
 80006d0:	edc3 7a00 	vstr	s15, [r3]
	  //__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
	  //__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 30000);
	  if(Vfeedback > 0)
 80006d4:	4b3b      	ldr	r3, [pc, #236]	@ (80007c4 <main+0x2bc>)
 80006d6:	edd3 7a00 	vldr	s15, [r3]
 80006da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006e2:	dd0b      	ble.n	80006fc <main+0x1f4>
	  {
		  z = 1;
 80006e4:	4b2a      	ldr	r3, [pc, #168]	@ (8000790 <main+0x288>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	801a      	strh	r2, [r3, #0]
		  PWM1 = Vfeedback;
 80006ea:	4b36      	ldr	r3, [pc, #216]	@ (80007c4 <main+0x2bc>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a36      	ldr	r2, [pc, #216]	@ (80007c8 <main+0x2c0>)
 80006f0:	6013      	str	r3, [r2, #0]
		  PWM2 = 0;
 80006f2:	4b36      	ldr	r3, [pc, #216]	@ (80007cc <main+0x2c4>)
 80006f4:	f04f 0200 	mov.w	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	e020      	b.n	800073e <main+0x236>

	  }
	  else if(Vfeedback < 0)
 80006fc:	4b31      	ldr	r3, [pc, #196]	@ (80007c4 <main+0x2bc>)
 80006fe:	edd3 7a00 	vldr	s15, [r3]
 8000702:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800070a:	d510      	bpl.n	800072e <main+0x226>
	  {
		  z = -1;
 800070c:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <main+0x288>)
 800070e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000712:	801a      	strh	r2, [r3, #0]
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET);
//		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
		  PWM1 = 0;
 8000714:	4b2c      	ldr	r3, [pc, #176]	@ (80007c8 <main+0x2c0>)
 8000716:	f04f 0200 	mov.w	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
		  PWM2 = Vfeedback * -1;
 800071c:	4b29      	ldr	r3, [pc, #164]	@ (80007c4 <main+0x2bc>)
 800071e:	edd3 7a00 	vldr	s15, [r3]
 8000722:	eef1 7a67 	vneg.f32	s15, s15
 8000726:	4b29      	ldr	r3, [pc, #164]	@ (80007cc <main+0x2c4>)
 8000728:	edc3 7a00 	vstr	s15, [r3]
 800072c:	e007      	b.n	800073e <main+0x236>
	  }
	  else{
		  PWM1 = 0;
 800072e:	4b26      	ldr	r3, [pc, #152]	@ (80007c8 <main+0x2c0>)
 8000730:	f04f 0200 	mov.w	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
		  PWM2 = 0;
 8000736:	4b25      	ldr	r3, [pc, #148]	@ (80007cc <main+0x2c4>)
 8000738:	f04f 0200 	mov.w	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
	  }
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM1);
 800073e:	4b22      	ldr	r3, [pc, #136]	@ (80007c8 <main+0x2c0>)
 8000740:	edd3 7a00 	vldr	s15, [r3]
 8000744:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <main+0x26c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800074c:	ee17 2a90 	vmov	r2, s15
 8000750:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM2);
 8000752:	4b1e      	ldr	r3, [pc, #120]	@ (80007cc <main+0x2c4>)
 8000754:	edd3 7a00 	vldr	s15, [r3]
 8000758:	4b08      	ldr	r3, [pc, #32]	@ (800077c <main+0x274>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000760:	ee17 2a90 	vmov	r2, s15
 8000764:	635a      	str	r2, [r3, #52]	@ 0x34
	  Degree = (QEIReadRaw/48)*360;
 8000766:	e718      	b.n	800059a <main+0x92>
 8000768:	20000310 	.word	0x20000310
 800076c:	20000028 	.word	0x20000028
 8000770:	20000220 	.word	0x20000220
 8000774:	2000026c 	.word	0x2000026c
 8000778:	200001d4 	.word	0x200001d4
 800077c:	20000188 	.word	0x20000188
 8000780:	200002b8 	.word	0x200002b8
 8000784:	200004a0 	.word	0x200004a0
 8000788:	3dcccccd 	.word	0x3dcccccd
 800078c:	200004e0 	.word	0x200004e0
 8000790:	200004d8 	.word	0x200004d8
 8000794:	20000304 	.word	0x20000304
 8000798:	42400000 	.word	0x42400000
 800079c:	43b40000 	.word	0x43b40000
 80007a0:	2000030c 	.word	0x2000030c
 80007a4:	200004d0 	.word	0x200004d0
 80007a8:	200004d4 	.word	0x200004d4
 80007ac:	51eb851f 	.word	0x51eb851f
 80007b0:	200004c4 	.word	0x200004c4
 80007b4:	200004c8 	.word	0x200004c8
 80007b8:	200004dc 	.word	0x200004dc
 80007bc:	46ff4800 	.word	0x46ff4800
 80007c0:	45400000 	.word	0x45400000
 80007c4:	200004cc 	.word	0x200004cc
 80007c8:	200004e4 	.word	0x200004e4
 80007cc:	200004e8 	.word	0x200004e8

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b094      	sub	sp, #80	@ 0x50
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0318 	add.w	r3, r7, #24
 80007da:	2238      	movs	r2, #56	@ 0x38
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f006 ff42 	bl	8007668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f003 faca 	bl	8003d8c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f8:	2302      	movs	r3, #2
 80007fa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000800:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000802:	2340      	movs	r3, #64	@ 0x40
 8000804:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000806:	2302      	movs	r3, #2
 8000808:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800080a:	2302      	movs	r3, #2
 800080c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800080e:	2304      	movs	r3, #4
 8000810:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000812:	2355      	movs	r3, #85	@ 0x55
 8000814:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000816:	2302      	movs	r3, #2
 8000818:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800081a:	2302      	movs	r3, #2
 800081c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800081e:	2302      	movs	r3, #2
 8000820:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000822:	f107 0318 	add.w	r3, r7, #24
 8000826:	4618      	mov	r0, r3
 8000828:	f003 fb64 	bl	8003ef4 <HAL_RCC_OscConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000832:	f000 fc09 	bl	8001048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000836:	230f      	movs	r3, #15
 8000838:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083a:	2303      	movs	r3, #3
 800083c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2104      	movs	r1, #4
 800084e:	4618      	mov	r0, r3
 8000850:	f003 fe62 	bl	8004518 <HAL_RCC_ClockConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800085a:	f000 fbf5 	bl	8001048 <Error_Handler>
  }
}
 800085e:	bf00      	nop
 8000860:	3750      	adds	r7, #80	@ 0x50
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08c      	sub	sp, #48	@ 0x30
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800086e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2220      	movs	r2, #32
 800087e:	2100      	movs	r1, #0
 8000880:	4618      	mov	r0, r3
 8000882:	f006 fef1 	bl	8007668 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000886:	4b3a      	ldr	r3, [pc, #232]	@ (8000970 <MX_ADC1_Init+0x108>)
 8000888:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800088c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800088e:	4b38      	ldr	r3, [pc, #224]	@ (8000970 <MX_ADC1_Init+0x108>)
 8000890:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000894:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000896:	4b36      	ldr	r3, [pc, #216]	@ (8000970 <MX_ADC1_Init+0x108>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800089c:	4b34      	ldr	r3, [pc, #208]	@ (8000970 <MX_ADC1_Init+0x108>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80008a2:	4b33      	ldr	r3, [pc, #204]	@ (8000970 <MX_ADC1_Init+0x108>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008a8:	4b31      	ldr	r3, [pc, #196]	@ (8000970 <MX_ADC1_Init+0x108>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ae:	4b30      	ldr	r3, [pc, #192]	@ (8000970 <MX_ADC1_Init+0x108>)
 80008b0:	2204      	movs	r2, #4
 80008b2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008b4:	4b2e      	ldr	r3, [pc, #184]	@ (8000970 <MX_ADC1_Init+0x108>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000970 <MX_ADC1_Init+0x108>)
 80008bc:	2200      	movs	r2, #0
 80008be:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80008c0:	4b2b      	ldr	r3, [pc, #172]	@ (8000970 <MX_ADC1_Init+0x108>)
 80008c2:	2202      	movs	r2, #2
 80008c4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000970 <MX_ADC1_Init+0x108>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80008ce:	4b28      	ldr	r3, [pc, #160]	@ (8000970 <MX_ADC1_Init+0x108>)
 80008d0:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 80008d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80008d6:	4b26      	ldr	r3, [pc, #152]	@ (8000970 <MX_ADC1_Init+0x108>)
 80008d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008de:	4b24      	ldr	r3, [pc, #144]	@ (8000970 <MX_ADC1_Init+0x108>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008e6:	4b22      	ldr	r3, [pc, #136]	@ (8000970 <MX_ADC1_Init+0x108>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80008ec:	4b20      	ldr	r3, [pc, #128]	@ (8000970 <MX_ADC1_Init+0x108>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008f4:	481e      	ldr	r0, [pc, #120]	@ (8000970 <MX_ADC1_Init+0x108>)
 80008f6:	f001 f927 	bl	8001b48 <HAL_ADC_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000900:	f000 fba2 	bl	8001048 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000908:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090c:	4619      	mov	r1, r3
 800090e:	4818      	ldr	r0, [pc, #96]	@ (8000970 <MX_ADC1_Init+0x108>)
 8000910:	f002 fbf4 	bl	80030fc <HAL_ADCEx_MultiModeConfigChannel>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800091a:	f000 fb95 	bl	8001048 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800091e:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <MX_ADC1_Init+0x10c>)
 8000920:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000922:	2306      	movs	r3, #6
 8000924:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000926:	2302      	movs	r3, #2
 8000928:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800092a:	237f      	movs	r3, #127	@ 0x7f
 800092c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800092e:	2304      	movs	r3, #4
 8000930:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	4619      	mov	r1, r3
 800093a:	480d      	ldr	r0, [pc, #52]	@ (8000970 <MX_ADC1_Init+0x108>)
 800093c:	f001 fe1c 	bl	8002578 <HAL_ADC_ConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000946:	f000 fb7f 	bl	8001048 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800094a:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <MX_ADC1_Init+0x110>)
 800094c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800094e:	230c      	movs	r3, #12
 8000950:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	4619      	mov	r1, r3
 8000956:	4806      	ldr	r0, [pc, #24]	@ (8000970 <MX_ADC1_Init+0x108>)
 8000958:	f001 fe0e 	bl	8002578 <HAL_ADC_ConfigChannel>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000962:	f000 fb71 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	3730      	adds	r7, #48	@ 0x30
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000028 	.word	0x20000028
 8000974:	04300002 	.word	0x04300002
 8000978:	08600004 	.word	0x08600004

0800097c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000980:	4b21      	ldr	r3, [pc, #132]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 8000982:	4a22      	ldr	r2, [pc, #136]	@ (8000a0c <MX_LPUART1_UART_Init+0x90>)
 8000984:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000986:	4b20      	ldr	r3, [pc, #128]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 8000988:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800098c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b1c      	ldr	r3, [pc, #112]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800099a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b19      	ldr	r3, [pc, #100]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b18      	ldr	r3, [pc, #96]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ac:	4b16      	ldr	r3, [pc, #88]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b2:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b8:	4b13      	ldr	r3, [pc, #76]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009be:	4812      	ldr	r0, [pc, #72]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 80009c0:	f005 ffae 	bl	8006920 <HAL_UART_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80009ca:	f000 fb3d 	bl	8001048 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ce:	2100      	movs	r1, #0
 80009d0:	480d      	ldr	r0, [pc, #52]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 80009d2:	f006 fd49 	bl	8007468 <HAL_UARTEx_SetTxFifoThreshold>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80009dc:	f000 fb34 	bl	8001048 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e0:	2100      	movs	r1, #0
 80009e2:	4809      	ldr	r0, [pc, #36]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 80009e4:	f006 fd7e 	bl	80074e4 <HAL_UARTEx_SetRxFifoThreshold>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80009ee:	f000 fb2b 	bl	8001048 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 80009f4:	f006 fcff 	bl	80073f6 <HAL_UARTEx_DisableFifoMode>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80009fe:	f000 fb23 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000f4 	.word	0x200000f4
 8000a0c:	40008000 	.word	0x40008000

08000a10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b09c      	sub	sp, #112	@ 0x70
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a16:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a24:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a30:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
 8000a40:	615a      	str	r2, [r3, #20]
 8000a42:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2234      	movs	r2, #52	@ 0x34
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f006 fe0c 	bl	8007668 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a50:	4b45      	ldr	r3, [pc, #276]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000a52:	4a46      	ldr	r2, [pc, #280]	@ (8000b6c <MX_TIM1_Init+0x15c>)
 8000a54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8000a56:	4b44      	ldr	r3, [pc, #272]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000a58:	22a9      	movs	r2, #169	@ 0xa9
 8000a5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5c:	4b42      	ldr	r3, [pc, #264]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 32675;
 8000a62:	4b41      	ldr	r3, [pc, #260]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000a64:	f647 72a3 	movw	r2, #32675	@ 0x7fa3
 8000a68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a70:	4b3d      	ldr	r3, [pc, #244]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a76:	4b3c      	ldr	r3, [pc, #240]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a7c:	483a      	ldr	r0, [pc, #232]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000a7e:	f004 f9b5 	bl	8004dec <HAL_TIM_Base_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a88:	f000 fade 	bl	8001048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a90:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a92:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a96:	4619      	mov	r1, r3
 8000a98:	4833      	ldr	r0, [pc, #204]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000a9a:	f004 fff3 	bl	8005a84 <HAL_TIM_ConfigClockSource>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000aa4:	f000 fad0 	bl	8001048 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000aa8:	482f      	ldr	r0, [pc, #188]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000aaa:	f004 fadf 	bl	800506c <HAL_TIM_PWM_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000ab4:	f000 fac8 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000abc:	2300      	movs	r3, #0
 8000abe:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ac4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4827      	ldr	r0, [pc, #156]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000acc:	f005 fdb8 	bl	8006640 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000ad6:	f000 fab7 	bl	8001048 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ada:	2360      	movs	r3, #96	@ 0x60
 8000adc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000aee:	2300      	movs	r3, #0
 8000af0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000af2:	2300      	movs	r3, #0
 8000af4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000af6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000afa:	2200      	movs	r2, #0
 8000afc:	4619      	mov	r1, r3
 8000afe:	481a      	ldr	r0, [pc, #104]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000b00:	f004 feac 	bl	800585c <HAL_TIM_PWM_ConfigChannel>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000b0a:	f000 fa9d 	bl	8001048 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b26:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4807      	ldr	r0, [pc, #28]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000b4c:	f005 fe0e 	bl	800676c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8000b56:	f000 fa77 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b5a:	4803      	ldr	r0, [pc, #12]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000b5c:	f000 fc4a 	bl	80013f4 <HAL_TIM_MspPostInit>

}
 8000b60:	bf00      	nop
 8000b62:	3770      	adds	r7, #112	@ 0x70
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000188 	.word	0x20000188
 8000b6c:	40012c00 	.word	0x40012c00

08000b70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c08 <MX_TIM2_Init+0x98>)
 8000b90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b94:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000b96:	4b1c      	ldr	r3, [pc, #112]	@ (8000c08 <MX_TIM2_Init+0x98>)
 8000b98:	22a9      	movs	r2, #169	@ 0xa9
 8000b9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c08 <MX_TIM2_Init+0x98>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000ba2:	4b19      	ldr	r3, [pc, #100]	@ (8000c08 <MX_TIM2_Init+0x98>)
 8000ba4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ba8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000baa:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <MX_TIM2_Init+0x98>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	@ (8000c08 <MX_TIM2_Init+0x98>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bb6:	4814      	ldr	r0, [pc, #80]	@ (8000c08 <MX_TIM2_Init+0x98>)
 8000bb8:	f004 f918 	bl	8004dec <HAL_TIM_Base_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000bc2:	f000 fa41 	bl	8001048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480d      	ldr	r0, [pc, #52]	@ (8000c08 <MX_TIM2_Init+0x98>)
 8000bd4:	f004 ff56 	bl	8005a84 <HAL_TIM_ConfigClockSource>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bde:	f000 fa33 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000be2:	2320      	movs	r3, #32
 8000be4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	4619      	mov	r1, r3
 8000bee:	4806      	ldr	r0, [pc, #24]	@ (8000c08 <MX_TIM2_Init+0x98>)
 8000bf0:	f005 fd26 	bl	8006640 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000bfa:	f000 fa25 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	3720      	adds	r7, #32
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200001d4 	.word	0x200001d4

08000c0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b088      	sub	sp, #32
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c12:	f107 0310 	add.w	r3, r7, #16
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca0 <MX_TIM3_Init+0x94>)
 8000c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ca4 <MX_TIM3_Init+0x98>)
 8000c2e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8000c30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca0 <MX_TIM3_Init+0x94>)
 8000c32:	22a9      	movs	r2, #169	@ 0xa9
 8000c34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca0 <MX_TIM3_Init+0x94>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000c3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <MX_TIM3_Init+0x94>)
 8000c3e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c44:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <MX_TIM3_Init+0x94>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <MX_TIM3_Init+0x94>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c50:	4813      	ldr	r0, [pc, #76]	@ (8000ca0 <MX_TIM3_Init+0x94>)
 8000c52:	f004 f8cb 	bl	8004dec <HAL_TIM_Base_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000c5c:	f000 f9f4 	bl	8001048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c66:	f107 0310 	add.w	r3, r7, #16
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480c      	ldr	r0, [pc, #48]	@ (8000ca0 <MX_TIM3_Init+0x94>)
 8000c6e:	f004 ff09 	bl	8005a84 <HAL_TIM_ConfigClockSource>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c78:	f000 f9e6 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c7c:	2320      	movs	r3, #32
 8000c7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	4619      	mov	r1, r3
 8000c88:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <MX_TIM3_Init+0x94>)
 8000c8a:	f005 fcd9 	bl	8006640 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000c94:	f000 f9d8 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	3720      	adds	r7, #32
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000220 	.word	0x20000220
 8000ca4:	40000400 	.word	0x40000400

08000ca8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08e      	sub	sp, #56	@ 0x38
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cc8:	463b      	mov	r3, r7
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]
 8000cd6:	615a      	str	r2, [r3, #20]
 8000cd8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cda:	4b2d      	ldr	r3, [pc, #180]	@ (8000d90 <MX_TIM4_Init+0xe8>)
 8000cdc:	4a2d      	ldr	r2, [pc, #180]	@ (8000d94 <MX_TIM4_Init+0xec>)
 8000cde:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8000ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8000d90 <MX_TIM4_Init+0xe8>)
 8000ce2:	22a9      	movs	r2, #169	@ 0xa9
 8000ce4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce6:	4b2a      	ldr	r3, [pc, #168]	@ (8000d90 <MX_TIM4_Init+0xe8>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 32675;
 8000cec:	4b28      	ldr	r3, [pc, #160]	@ (8000d90 <MX_TIM4_Init+0xe8>)
 8000cee:	f647 72a3 	movw	r2, #32675	@ 0x7fa3
 8000cf2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf4:	4b26      	ldr	r3, [pc, #152]	@ (8000d90 <MX_TIM4_Init+0xe8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfa:	4b25      	ldr	r3, [pc, #148]	@ (8000d90 <MX_TIM4_Init+0xe8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d00:	4823      	ldr	r0, [pc, #140]	@ (8000d90 <MX_TIM4_Init+0xe8>)
 8000d02:	f004 f873 	bl	8004dec <HAL_TIM_Base_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000d0c:	f000 f99c 	bl	8001048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d14:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	481c      	ldr	r0, [pc, #112]	@ (8000d90 <MX_TIM4_Init+0xe8>)
 8000d1e:	f004 feb1 	bl	8005a84 <HAL_TIM_ConfigClockSource>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000d28:	f000 f98e 	bl	8001048 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d2c:	4818      	ldr	r0, [pc, #96]	@ (8000d90 <MX_TIM4_Init+0xe8>)
 8000d2e:	f004 f99d 	bl	800506c <HAL_TIM_PWM_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000d38:	f000 f986 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4811      	ldr	r0, [pc, #68]	@ (8000d90 <MX_TIM4_Init+0xe8>)
 8000d4c:	f005 fc78 	bl	8006640 <HAL_TIMEx_MasterConfigSynchronization>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000d56:	f000 f977 	bl	8001048 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d5a:	2360      	movs	r3, #96	@ 0x60
 8000d5c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8000d5e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d62:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	2200      	movs	r2, #0
 8000d70:	4619      	mov	r1, r3
 8000d72:	4807      	ldr	r0, [pc, #28]	@ (8000d90 <MX_TIM4_Init+0xe8>)
 8000d74:	f004 fd72 	bl	800585c <HAL_TIM_PWM_ConfigChannel>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000d7e:	f000 f963 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d82:	4803      	ldr	r0, [pc, #12]	@ (8000d90 <MX_TIM4_Init+0xe8>)
 8000d84:	f000 fb36 	bl	80013f4 <HAL_TIM_MspPostInit>

}
 8000d88:	bf00      	nop
 8000d8a:	3738      	adds	r7, #56	@ 0x38
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	2000026c 	.word	0x2000026c
 8000d94:	40000800 	.word	0x40000800

08000d98 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08c      	sub	sp, #48	@ 0x30
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	2224      	movs	r2, #36	@ 0x24
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f006 fc5e 	bl	8007668 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dac:	463b      	mov	r3, r7
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000db6:	4b21      	ldr	r3, [pc, #132]	@ (8000e3c <MX_TIM5_Init+0xa4>)
 8000db8:	4a21      	ldr	r2, [pc, #132]	@ (8000e40 <MX_TIM5_Init+0xa8>)
 8000dba:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e3c <MX_TIM5_Init+0xa4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e3c <MX_TIM5_Init+0xa4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e3c <MX_TIM5_Init+0xa4>)
 8000dca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dce:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e3c <MX_TIM5_Init+0xa4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd6:	4b19      	ldr	r3, [pc, #100]	@ (8000e3c <MX_TIM5_Init+0xa4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000de0:	2300      	movs	r3, #0
 8000de2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000de4:	2301      	movs	r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000df0:	2300      	movs	r3, #0
 8000df2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000df4:	2301      	movs	r3, #1
 8000df6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	4619      	mov	r1, r3
 8000e06:	480d      	ldr	r0, [pc, #52]	@ (8000e3c <MX_TIM5_Init+0xa4>)
 8000e08:	f004 faa4 	bl	8005354 <HAL_TIM_Encoder_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000e12:	f000 f919 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e1e:	463b      	mov	r3, r7
 8000e20:	4619      	mov	r1, r3
 8000e22:	4806      	ldr	r0, [pc, #24]	@ (8000e3c <MX_TIM5_Init+0xa4>)
 8000e24:	f005 fc0c 	bl	8006640 <HAL_TIMEx_MasterConfigSynchronization>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000e2e:	f000 f90b 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	3730      	adds	r7, #48	@ 0x30
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200002b8 	.word	0x200002b8
 8000e40:	40000c00 	.word	0x40000c00

08000e44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e4a:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <MX_DMA_Init+0x50>)
 8000e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e4e:	4a11      	ldr	r2, [pc, #68]	@ (8000e94 <MX_DMA_Init+0x50>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e56:	4b0f      	ldr	r3, [pc, #60]	@ (8000e94 <MX_DMA_Init+0x50>)
 8000e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e62:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <MX_DMA_Init+0x50>)
 8000e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e66:	4a0b      	ldr	r2, [pc, #44]	@ (8000e94 <MX_DMA_Init+0x50>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e6e:	4b09      	ldr	r3, [pc, #36]	@ (8000e94 <MX_DMA_Init+0x50>)
 8000e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	200b      	movs	r0, #11
 8000e80:	f002 fb1f 	bl	80034c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e84:	200b      	movs	r0, #11
 8000e86:	f002 fb36 	bl	80034f6 <HAL_NVIC_EnableIRQ>

}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40021000 	.word	0x40021000

08000e98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	@ 0x28
 8000e9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eae:	4b39      	ldr	r3, [pc, #228]	@ (8000f94 <MX_GPIO_Init+0xfc>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb2:	4a38      	ldr	r2, [pc, #224]	@ (8000f94 <MX_GPIO_Init+0xfc>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eba:	4b36      	ldr	r3, [pc, #216]	@ (8000f94 <MX_GPIO_Init+0xfc>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebe:	f003 0304 	and.w	r3, r3, #4
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ec6:	4b33      	ldr	r3, [pc, #204]	@ (8000f94 <MX_GPIO_Init+0xfc>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eca:	4a32      	ldr	r2, [pc, #200]	@ (8000f94 <MX_GPIO_Init+0xfc>)
 8000ecc:	f043 0320 	orr.w	r3, r3, #32
 8000ed0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed2:	4b30      	ldr	r3, [pc, #192]	@ (8000f94 <MX_GPIO_Init+0xfc>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed6:	f003 0320 	and.w	r3, r3, #32
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	4b2d      	ldr	r3, [pc, #180]	@ (8000f94 <MX_GPIO_Init+0xfc>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee2:	4a2c      	ldr	r2, [pc, #176]	@ (8000f94 <MX_GPIO_Init+0xfc>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eea:	4b2a      	ldr	r3, [pc, #168]	@ (8000f94 <MX_GPIO_Init+0xfc>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	4b27      	ldr	r3, [pc, #156]	@ (8000f94 <MX_GPIO_Init+0xfc>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efa:	4a26      	ldr	r2, [pc, #152]	@ (8000f94 <MX_GPIO_Init+0xfc>)
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f02:	4b24      	ldr	r3, [pc, #144]	@ (8000f94 <MX_GPIO_Init+0xfc>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2130      	movs	r1, #48	@ 0x30
 8000f12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f16:	f002 fefd 	bl	8003d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	481e      	ldr	r0, [pc, #120]	@ (8000f98 <MX_GPIO_Init+0x100>)
 8000f20:	f002 fef8 	bl	8003d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f2a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4818      	ldr	r0, [pc, #96]	@ (8000f9c <MX_GPIO_Init+0x104>)
 8000f3c:	f002 fd68 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8000f40:	2330      	movs	r3, #48	@ 0x30
 8000f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4619      	mov	r1, r3
 8000f56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f5a:	f002 fd59 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4808      	ldr	r0, [pc, #32]	@ (8000f98 <MX_GPIO_Init+0x100>)
 8000f76:	f002 fd4b 	bl	8003a10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2028      	movs	r0, #40	@ 0x28
 8000f80:	f002 fa9f 	bl	80034c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f84:	2028      	movs	r0, #40	@ 0x28
 8000f86:	f002 fab6 	bl	80034f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f8a:	bf00      	nop
 8000f8c:	3728      	adds	r7, #40	@ 0x28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40021000 	.word	0x40021000
 8000f98:	48000400 	.word	0x48000400
 8000f9c:	48000800 	.word	0x48000800

08000fa0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if (htim == &htim2 )
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a20      	ldr	r2, [pc, #128]	@ (800102c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d136      	bne.n	800101e <HAL_TIM_PeriodElapsedCallback+0x7e>
  {
	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim5);
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001030 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb6:	ee07 3a90 	vmov	s15, r3
 8000fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001034 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000fc0:	edc3 7a00 	vstr	s15, [r3]
	  //spd =  QEIReadRaw * 1000 / 250 * 8;
	  if(QEIReadRaw > 32678)
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001034 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000fc6:	edd3 7a00 	vldr	s15, [r3]
 8000fca:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001038 <HAL_TIM_PeriodElapsedCallback+0x98>
 8000fce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd6:	dd0f      	ble.n	8000ff8 <HAL_TIM_PeriodElapsedCallback+0x58>
	  {
		  pos -= (65356-QEIReadRaw);
 8000fd8:	4b18      	ldr	r3, [pc, #96]	@ (800103c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000fda:	ed93 7a00 	vldr	s14, [r3]
 8000fde:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000fe0:	edd3 7a00 	vldr	s15, [r3]
 8000fe4:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8001040 <HAL_TIM_PeriodElapsedCallback+0xa0>
 8000fe8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000fec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ff0:	4b12      	ldr	r3, [pc, #72]	@ (800103c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000ff2:	edc3 7a00 	vstr	s15, [r3]
 8000ff6:	e00a      	b.n	800100e <HAL_TIM_PeriodElapsedCallback+0x6e>
	  }
	  else
	  {
		  pos += QEIReadRaw;
 8000ff8:	4b10      	ldr	r3, [pc, #64]	@ (800103c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000ffa:	ed93 7a00 	vldr	s14, [r3]
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8001034 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001000:	edd3 7a00 	vldr	s15, [r3]
 8001004:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001008:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800100a:	edc3 7a00 	vstr	s15, [r3]
	  }
	  QEIReadOld = QEIReadRaw;
 800100e:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a0c      	ldr	r2, [pc, #48]	@ (8001044 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001014:	6013      	str	r3, [r2, #0]
	  __HAL_TIM_SET_COUNTER(&htim5, 0);
 8001016:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2200      	movs	r2, #0
 800101c:	625a      	str	r2, [r3, #36]	@ 0x24



  }
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	200001d4 	.word	0x200001d4
 8001030:	200002b8 	.word	0x200002b8
 8001034:	20000304 	.word	0x20000304
 8001038:	46ff4c00 	.word	0x46ff4c00
 800103c:	200004dc 	.word	0x200004dc
 8001040:	477f4c00 	.word	0x477f4c00
 8001044:	20000308 	.word	0x20000308

08001048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800104c:	b672      	cpsid	i
}
 800104e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <Error_Handler+0x8>

08001054 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <HAL_MspInit+0x44>)
 800105c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800105e:	4a0e      	ldr	r2, [pc, #56]	@ (8001098 <HAL_MspInit+0x44>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6613      	str	r3, [r2, #96]	@ 0x60
 8001066:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <HAL_MspInit+0x44>)
 8001068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001072:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <HAL_MspInit+0x44>)
 8001074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001076:	4a08      	ldr	r2, [pc, #32]	@ (8001098 <HAL_MspInit+0x44>)
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800107c:	6593      	str	r3, [r2, #88]	@ 0x58
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <HAL_MspInit+0x44>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800108a:	f002 ff23 	bl	8003ed4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000

0800109c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b09e      	sub	sp, #120	@ 0x78
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	2254      	movs	r2, #84	@ 0x54
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f006 fad3 	bl	8007668 <memset>
  if(hadc->Instance==ADC1)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010ca:	d167      	bne.n	800119c <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80010cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010d0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80010d2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80010d6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 fc37 	bl	8004950 <HAL_RCCEx_PeriphCLKConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80010e8:	f7ff ffae 	bl	8001048 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010ec:	4b2d      	ldr	r3, [pc, #180]	@ (80011a4 <HAL_ADC_MspInit+0x108>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f0:	4a2c      	ldr	r2, [pc, #176]	@ (80011a4 <HAL_ADC_MspInit+0x108>)
 80010f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f8:	4b2a      	ldr	r3, [pc, #168]	@ (80011a4 <HAL_ADC_MspInit+0x108>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4b27      	ldr	r3, [pc, #156]	@ (80011a4 <HAL_ADC_MspInit+0x108>)
 8001106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001108:	4a26      	ldr	r2, [pc, #152]	@ (80011a4 <HAL_ADC_MspInit+0x108>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001110:	4b24      	ldr	r3, [pc, #144]	@ (80011a4 <HAL_ADC_MspInit+0x108>)
 8001112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800111c:	2303      	movs	r3, #3
 800111e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001120:	2303      	movs	r3, #3
 8001122:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800112c:	4619      	mov	r1, r3
 800112e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001132:	f002 fc6d 	bl	8003a10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001136:	4b1c      	ldr	r3, [pc, #112]	@ (80011a8 <HAL_ADC_MspInit+0x10c>)
 8001138:	4a1c      	ldr	r2, [pc, #112]	@ (80011ac <HAL_ADC_MspInit+0x110>)
 800113a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800113c:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <HAL_ADC_MspInit+0x10c>)
 800113e:	2205      	movs	r2, #5
 8001140:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001142:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <HAL_ADC_MspInit+0x10c>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001148:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <HAL_ADC_MspInit+0x10c>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800114e:	4b16      	ldr	r3, [pc, #88]	@ (80011a8 <HAL_ADC_MspInit+0x10c>)
 8001150:	2280      	movs	r2, #128	@ 0x80
 8001152:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001154:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <HAL_ADC_MspInit+0x10c>)
 8001156:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800115a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800115c:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <HAL_ADC_MspInit+0x10c>)
 800115e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001162:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001164:	4b10      	ldr	r3, [pc, #64]	@ (80011a8 <HAL_ADC_MspInit+0x10c>)
 8001166:	2220      	movs	r2, #32
 8001168:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800116a:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <HAL_ADC_MspInit+0x10c>)
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001170:	480d      	ldr	r0, [pc, #52]	@ (80011a8 <HAL_ADC_MspInit+0x10c>)
 8001172:	f002 f9db 	bl	800352c <HAL_DMA_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800117c:	f7ff ff64 	bl	8001048 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a09      	ldr	r2, [pc, #36]	@ (80011a8 <HAL_ADC_MspInit+0x10c>)
 8001184:	655a      	str	r2, [r3, #84]	@ 0x54
 8001186:	4a08      	ldr	r2, [pc, #32]	@ (80011a8 <HAL_ADC_MspInit+0x10c>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2012      	movs	r0, #18
 8001192:	f002 f996 	bl	80034c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001196:	2012      	movs	r0, #18
 8001198:	f002 f9ad 	bl	80034f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800119c:	bf00      	nop
 800119e:	3778      	adds	r7, #120	@ 0x78
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40021000 	.word	0x40021000
 80011a8:	20000094 	.word	0x20000094
 80011ac:	40020008 	.word	0x40020008

080011b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b09e      	sub	sp, #120	@ 0x78
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	2254      	movs	r2, #84	@ 0x54
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f006 fa49 	bl	8007668 <memset>
  if(huart->Instance==LPUART1)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a1f      	ldr	r2, [pc, #124]	@ (8001258 <HAL_UART_MspInit+0xa8>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d136      	bne.n	800124e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80011e0:	2320      	movs	r3, #32
 80011e2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4618      	mov	r0, r3
 80011ee:	f003 fbaf 	bl	8004950 <HAL_RCCEx_PeriphCLKConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011f8:	f7ff ff26 	bl	8001048 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80011fc:	4b17      	ldr	r3, [pc, #92]	@ (800125c <HAL_UART_MspInit+0xac>)
 80011fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001200:	4a16      	ldr	r2, [pc, #88]	@ (800125c <HAL_UART_MspInit+0xac>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001208:	4b14      	ldr	r3, [pc, #80]	@ (800125c <HAL_UART_MspInit+0xac>)
 800120a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001214:	4b11      	ldr	r3, [pc, #68]	@ (800125c <HAL_UART_MspInit+0xac>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001218:	4a10      	ldr	r2, [pc, #64]	@ (800125c <HAL_UART_MspInit+0xac>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001220:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <HAL_UART_MspInit+0xac>)
 8001222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800122c:	230c      	movs	r3, #12
 800122e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800123c:	230c      	movs	r3, #12
 800123e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001244:	4619      	mov	r1, r3
 8001246:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800124a:	f002 fbe1 	bl	8003a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	3778      	adds	r7, #120	@ 0x78
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40008000 	.word	0x40008000
 800125c:	40021000 	.word	0x40021000

08001260 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a2c      	ldr	r2, [pc, #176]	@ (8001320 <HAL_TIM_Base_MspInit+0xc0>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d10c      	bne.n	800128c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001272:	4b2c      	ldr	r3, [pc, #176]	@ (8001324 <HAL_TIM_Base_MspInit+0xc4>)
 8001274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001276:	4a2b      	ldr	r2, [pc, #172]	@ (8001324 <HAL_TIM_Base_MspInit+0xc4>)
 8001278:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800127c:	6613      	str	r3, [r2, #96]	@ 0x60
 800127e:	4b29      	ldr	r3, [pc, #164]	@ (8001324 <HAL_TIM_Base_MspInit+0xc4>)
 8001280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001282:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800128a:	e044      	b.n	8001316 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001294:	d114      	bne.n	80012c0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001296:	4b23      	ldr	r3, [pc, #140]	@ (8001324 <HAL_TIM_Base_MspInit+0xc4>)
 8001298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800129a:	4a22      	ldr	r2, [pc, #136]	@ (8001324 <HAL_TIM_Base_MspInit+0xc4>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80012a2:	4b20      	ldr	r3, [pc, #128]	@ (8001324 <HAL_TIM_Base_MspInit+0xc4>)
 80012a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	201c      	movs	r0, #28
 80012b4:	f002 f905 	bl	80034c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012b8:	201c      	movs	r0, #28
 80012ba:	f002 f91c 	bl	80034f6 <HAL_NVIC_EnableIRQ>
}
 80012be:	e02a      	b.n	8001316 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a18      	ldr	r2, [pc, #96]	@ (8001328 <HAL_TIM_Base_MspInit+0xc8>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d114      	bne.n	80012f4 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ca:	4b16      	ldr	r3, [pc, #88]	@ (8001324 <HAL_TIM_Base_MspInit+0xc4>)
 80012cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ce:	4a15      	ldr	r2, [pc, #84]	@ (8001324 <HAL_TIM_Base_MspInit+0xc4>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012d6:	4b13      	ldr	r3, [pc, #76]	@ (8001324 <HAL_TIM_Base_MspInit+0xc4>)
 80012d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	201d      	movs	r0, #29
 80012e8:	f002 f8eb 	bl	80034c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012ec:	201d      	movs	r0, #29
 80012ee:	f002 f902 	bl	80034f6 <HAL_NVIC_EnableIRQ>
}
 80012f2:	e010      	b.n	8001316 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a0c      	ldr	r2, [pc, #48]	@ (800132c <HAL_TIM_Base_MspInit+0xcc>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d10b      	bne.n	8001316 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012fe:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <HAL_TIM_Base_MspInit+0xc4>)
 8001300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001302:	4a08      	ldr	r2, [pc, #32]	@ (8001324 <HAL_TIM_Base_MspInit+0xc4>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	6593      	str	r3, [r2, #88]	@ 0x58
 800130a:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_TIM_Base_MspInit+0xc4>)
 800130c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
}
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40012c00 	.word	0x40012c00
 8001324:	40021000 	.word	0x40021000
 8001328:	40000400 	.word	0x40000400
 800132c:	40000800 	.word	0x40000800

08001330 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	@ 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a25      	ldr	r2, [pc, #148]	@ (80013e4 <HAL_TIM_Encoder_MspInit+0xb4>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d144      	bne.n	80013dc <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001352:	4b25      	ldr	r3, [pc, #148]	@ (80013e8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001356:	4a24      	ldr	r2, [pc, #144]	@ (80013e8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001358:	f043 0308 	orr.w	r3, r3, #8
 800135c:	6593      	str	r3, [r2, #88]	@ 0x58
 800135e:	4b22      	ldr	r3, [pc, #136]	@ (80013e8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	4b1f      	ldr	r3, [pc, #124]	@ (80013e8 <HAL_TIM_Encoder_MspInit+0xb8>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	4a1e      	ldr	r2, [pc, #120]	@ (80013e8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001376:	4b1c      	ldr	r3, [pc, #112]	@ (80013e8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001382:	4b19      	ldr	r3, [pc, #100]	@ (80013e8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	4a18      	ldr	r2, [pc, #96]	@ (80013e8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001388:	f043 0304 	orr.w	r3, r3, #4
 800138c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138e:	4b16      	ldr	r3, [pc, #88]	@ (80013e8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PB2     ------> TIM5_CH1
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800139a:	2304      	movs	r3, #4
 800139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80013aa:	2302      	movs	r3, #2
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	480d      	ldr	r0, [pc, #52]	@ (80013ec <HAL_TIM_Encoder_MspInit+0xbc>)
 80013b6:	f002 fb2b 	bl	8003a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 80013cc:	2301      	movs	r3, #1
 80013ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4806      	ldr	r0, [pc, #24]	@ (80013f0 <HAL_TIM_Encoder_MspInit+0xc0>)
 80013d8:	f002 fb1a 	bl	8003a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80013dc:	bf00      	nop
 80013de:	3728      	adds	r7, #40	@ 0x28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40000c00 	.word	0x40000c00
 80013e8:	40021000 	.word	0x40021000
 80013ec:	48000400 	.word	0x48000400
 80013f0:	48000800 	.word	0x48000800

080013f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	@ 0x28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a23      	ldr	r2, [pc, #140]	@ (80014a0 <HAL_TIM_MspPostInit+0xac>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d11c      	bne.n	8001450 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001416:	4b23      	ldr	r3, [pc, #140]	@ (80014a4 <HAL_TIM_MspPostInit+0xb0>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141a:	4a22      	ldr	r2, [pc, #136]	@ (80014a4 <HAL_TIM_MspPostInit+0xb0>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001422:	4b20      	ldr	r3, [pc, #128]	@ (80014a4 <HAL_TIM_MspPostInit+0xb0>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800142e:	2301      	movs	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800143e:	2302      	movs	r3, #2
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	4817      	ldr	r0, [pc, #92]	@ (80014a8 <HAL_TIM_MspPostInit+0xb4>)
 800144a:	f002 fae1 	bl	8003a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800144e:	e022      	b.n	8001496 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a15      	ldr	r2, [pc, #84]	@ (80014ac <HAL_TIM_MspPostInit+0xb8>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d11d      	bne.n	8001496 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <HAL_TIM_MspPostInit+0xb0>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145e:	4a11      	ldr	r2, [pc, #68]	@ (80014a4 <HAL_TIM_MspPostInit+0xb0>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001466:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <HAL_TIM_MspPostInit+0xb0>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001472:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001484:	230a      	movs	r3, #10
 8001486:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001492:	f002 fabd 	bl	8003a10 <HAL_GPIO_Init>
}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	@ 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40012c00 	.word	0x40012c00
 80014a4:	40021000 	.word	0x40021000
 80014a8:	48000800 	.word	0x48000800
 80014ac:	40000800 	.word	0x40000800

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <NMI_Handler+0x4>

080014b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <HardFault_Handler+0x4>

080014c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <MemManage_Handler+0x4>

080014c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <BusFault_Handler+0x4>

080014d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <UsageFault_Handler+0x4>

080014d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001506:	f000 f8c1 	bl	800168c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001514:	4802      	ldr	r0, [pc, #8]	@ (8001520 <DMA1_Channel1_IRQHandler+0x10>)
 8001516:	f002 f92c 	bl	8003772 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000094 	.word	0x20000094

08001524 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001528:	4802      	ldr	r0, [pc, #8]	@ (8001534 <ADC1_2_IRQHandler+0x10>)
 800152a:	f000 fd9d 	bl	8002068 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000028 	.word	0x20000028

08001538 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800153c:	4802      	ldr	r0, [pc, #8]	@ (8001548 <TIM2_IRQHandler+0x10>)
 800153e:	f004 f83d 	bl	80055bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200001d4 	.word	0x200001d4

0800154c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001550:	4802      	ldr	r0, [pc, #8]	@ (800155c <TIM3_IRQHandler+0x10>)
 8001552:	f004 f833 	bl	80055bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000220 	.word	0x20000220

08001560 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001564:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001568:	f002 fbec 	bl	8003d44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}

08001570 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001574:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <SystemInit+0x20>)
 8001576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800157a:	4a05      	ldr	r2, [pc, #20]	@ (8001590 <SystemInit+0x20>)
 800157c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001580:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001594:	480d      	ldr	r0, [pc, #52]	@ (80015cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001596:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001598:	f7ff ffea 	bl	8001570 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800159c:	480c      	ldr	r0, [pc, #48]	@ (80015d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800159e:	490d      	ldr	r1, [pc, #52]	@ (80015d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015a0:	4a0d      	ldr	r2, [pc, #52]	@ (80015d8 <LoopForever+0xe>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80015a4:	e002      	b.n	80015ac <LoopCopyDataInit>

080015a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015aa:	3304      	adds	r3, #4

080015ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b0:	d3f9      	bcc.n	80015a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b2:	4a0a      	ldr	r2, [pc, #40]	@ (80015dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80015b4:	4c0a      	ldr	r4, [pc, #40]	@ (80015e0 <LoopForever+0x16>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b8:	e001      	b.n	80015be <LoopFillZerobss>

080015ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015bc:	3204      	adds	r2, #4

080015be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c0:	d3fb      	bcc.n	80015ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015c2:	f006 f859 	bl	8007678 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015c6:	f7fe ff9f 	bl	8000508 <main>

080015ca <LoopForever>:

LoopForever:
    b LoopForever
 80015ca:	e7fe      	b.n	80015ca <LoopForever>
  ldr   r0, =_estack
 80015cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015d8:	08007728 	.word	0x08007728
  ldr r2, =_sbss
 80015dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015e0:	200004f0 	.word	0x200004f0

080015e4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015e4:	e7fe      	b.n	80015e4 <ADC3_IRQHandler>

080015e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f0:	2003      	movs	r0, #3
 80015f2:	f001 ff5b 	bl	80034ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015f6:	2000      	movs	r0, #0
 80015f8:	f000 f80e 	bl	8001618 <HAL_InitTick>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d002      	beq.n	8001608 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	71fb      	strb	r3, [r7, #7]
 8001606:	e001      	b.n	800160c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001608:	f7ff fd24 	bl	8001054 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800160c:	79fb      	ldrb	r3, [r7, #7]

}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001620:	2300      	movs	r3, #0
 8001622:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001624:	4b16      	ldr	r3, [pc, #88]	@ (8001680 <HAL_InitTick+0x68>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d022      	beq.n	8001672 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800162c:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <HAL_InitTick+0x6c>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <HAL_InitTick+0x68>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001638:	fbb1 f3f3 	udiv	r3, r1, r3
 800163c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001640:	4618      	mov	r0, r3
 8001642:	f001 ff66 	bl	8003512 <HAL_SYSTICK_Config>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d10f      	bne.n	800166c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b0f      	cmp	r3, #15
 8001650:	d809      	bhi.n	8001666 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001652:	2200      	movs	r2, #0
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	f04f 30ff 	mov.w	r0, #4294967295
 800165a:	f001 ff32 	bl	80034c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800165e:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <HAL_InitTick+0x70>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	e007      	b.n	8001676 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	73fb      	strb	r3, [r7, #15]
 800166a:	e004      	b.n	8001676 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	73fb      	strb	r3, [r7, #15]
 8001670:	e001      	b.n	8001676 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001676:	7bfb      	ldrb	r3, [r7, #15]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000008 	.word	0x20000008
 8001684:	20000000 	.word	0x20000000
 8001688:	20000004 	.word	0x20000004

0800168c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001690:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <HAL_IncTick+0x1c>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b05      	ldr	r3, [pc, #20]	@ (80016ac <HAL_IncTick+0x20>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4413      	add	r3, r2
 800169a:	4a03      	ldr	r2, [pc, #12]	@ (80016a8 <HAL_IncTick+0x1c>)
 800169c:	6013      	str	r3, [r2, #0]
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	200004ec 	.word	0x200004ec
 80016ac:	20000008 	.word	0x20000008

080016b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return uwTick;
 80016b4:	4b03      	ldr	r3, [pc, #12]	@ (80016c4 <HAL_GetTick+0x14>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	200004ec 	.word	0x200004ec

080016c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	431a      	orrs	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	609a      	str	r2, [r3, #8]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	609a      	str	r2, [r3, #8]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001724:	4618      	mov	r0, r3
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001730:	b480      	push	{r7}
 8001732:	b087      	sub	sp, #28
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
 800173c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	3360      	adds	r3, #96	@ 0x60
 8001742:	461a      	mov	r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <LL_ADC_SetOffset+0x44>)
 8001752:	4013      	ands	r3, r2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	4313      	orrs	r3, r2
 8001760:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001768:	bf00      	nop
 800176a:	371c      	adds	r7, #28
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	03fff000 	.word	0x03fff000

08001778 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3360      	adds	r3, #96	@ 0x60
 8001786:	461a      	mov	r2, r3
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001798:	4618      	mov	r0, r3
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b087      	sub	sp, #28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	3360      	adds	r3, #96	@ 0x60
 80017b4:	461a      	mov	r2, r3
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	431a      	orrs	r2, r3
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017ce:	bf00      	nop
 80017d0:	371c      	adds	r7, #28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80017da:	b480      	push	{r7}
 80017dc:	b087      	sub	sp, #28
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	3360      	adds	r3, #96	@ 0x60
 80017ea:	461a      	mov	r2, r3
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	431a      	orrs	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001804:	bf00      	nop
 8001806:	371c      	adds	r7, #28
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001810:	b480      	push	{r7}
 8001812:	b087      	sub	sp, #28
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3360      	adds	r3, #96	@ 0x60
 8001820:	461a      	mov	r2, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	431a      	orrs	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800183a:	bf00      	nop
 800183c:	371c      	adds	r7, #28
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	615a      	str	r2, [r3, #20]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001892:	b480      	push	{r7}
 8001894:	b087      	sub	sp, #28
 8001896:	af00      	add	r7, sp, #0
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	3330      	adds	r3, #48	@ 0x30
 80018a2:	461a      	mov	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	0a1b      	lsrs	r3, r3, #8
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	4413      	add	r3, r2
 80018b0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	f003 031f 	and.w	r3, r3, #31
 80018bc:	211f      	movs	r1, #31
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	401a      	ands	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	0e9b      	lsrs	r3, r3, #26
 80018ca:	f003 011f 	and.w	r1, r3, #31
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f003 031f 	and.w	r3, r3, #31
 80018d4:	fa01 f303 	lsl.w	r3, r1, r3
 80018d8:	431a      	orrs	r2, r3
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018de:	bf00      	nop
 80018e0:	371c      	adds	r7, #28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001910:	b480      	push	{r7}
 8001912:	b087      	sub	sp, #28
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	3314      	adds	r3, #20
 8001920:	461a      	mov	r2, r3
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	0e5b      	lsrs	r3, r3, #25
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	4413      	add	r3, r2
 800192e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	0d1b      	lsrs	r3, r3, #20
 8001938:	f003 031f 	and.w	r3, r3, #31
 800193c:	2107      	movs	r1, #7
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	401a      	ands	r2, r3
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	0d1b      	lsrs	r3, r3, #20
 800194a:	f003 031f 	and.w	r3, r3, #31
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	fa01 f303 	lsl.w	r3, r1, r3
 8001954:	431a      	orrs	r2, r3
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800195a:	bf00      	nop
 800195c:	371c      	adds	r7, #28
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001980:	43db      	mvns	r3, r3
 8001982:	401a      	ands	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f003 0318 	and.w	r3, r3, #24
 800198a:	4908      	ldr	r1, [pc, #32]	@ (80019ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800198c:	40d9      	lsrs	r1, r3
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	400b      	ands	r3, r1
 8001992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001996:	431a      	orrs	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800199e:	bf00      	nop
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	0007ffff 	.word	0x0007ffff

080019b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 031f 	and.w	r3, r3, #31
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80019f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6093      	str	r3, [r2, #8]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a20:	d101      	bne.n	8001a26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001a44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a48:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001a70:	d101      	bne.n	8001a76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a98:	f043 0201 	orr.w	r2, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d101      	bne.n	8001ac4 <LL_ADC_IsEnabled+0x18>
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e000      	b.n	8001ac6 <LL_ADC_IsEnabled+0x1a>
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ae2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ae6:	f043 0204 	orr.w	r2, r3, #4
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d101      	bne.n	8001b12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d101      	bne.n	8001b38 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b34:	2301      	movs	r3, #1
 8001b36:	e000      	b.n	8001b3a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
	...

08001b48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b089      	sub	sp, #36	@ 0x24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e1a9      	b.n	8001eb6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d109      	bne.n	8001b84 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff fa93 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff3f 	bl	8001a0c <LL_ADC_IsDeepPowerDownEnabled>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d004      	beq.n	8001b9e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff25 	bl	80019e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ff5a 	bl	8001a5c <LL_ADC_IsInternalRegulatorEnabled>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d115      	bne.n	8001bda <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff ff3e 	bl	8001a34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bb8:	4b9c      	ldr	r3, [pc, #624]	@ (8001e2c <HAL_ADC_Init+0x2e4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	099b      	lsrs	r3, r3, #6
 8001bbe:	4a9c      	ldr	r2, [pc, #624]	@ (8001e30 <HAL_ADC_Init+0x2e8>)
 8001bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc4:	099b      	lsrs	r3, r3, #6
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bcc:	e002      	b.n	8001bd4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f9      	bne.n	8001bce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff ff3c 	bl	8001a5c <LL_ADC_IsInternalRegulatorEnabled>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10d      	bne.n	8001c06 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bee:	f043 0210 	orr.w	r2, r3, #16
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bfa:	f043 0201 	orr.w	r2, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff ff75 	bl	8001afa <LL_ADC_REG_IsConversionOngoing>
 8001c10:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c16:	f003 0310 	and.w	r3, r3, #16
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f040 8142 	bne.w	8001ea4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f040 813e 	bne.w	8001ea4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c2c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c30:	f043 0202 	orr.w	r2, r3, #2
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff35 	bl	8001aac <LL_ADC_IsEnabled>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d141      	bne.n	8001ccc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c50:	d004      	beq.n	8001c5c <HAL_ADC_Init+0x114>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a77      	ldr	r2, [pc, #476]	@ (8001e34 <HAL_ADC_Init+0x2ec>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d10f      	bne.n	8001c7c <HAL_ADC_Init+0x134>
 8001c5c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001c60:	f7ff ff24 	bl	8001aac <LL_ADC_IsEnabled>
 8001c64:	4604      	mov	r4, r0
 8001c66:	4873      	ldr	r0, [pc, #460]	@ (8001e34 <HAL_ADC_Init+0x2ec>)
 8001c68:	f7ff ff20 	bl	8001aac <LL_ADC_IsEnabled>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4323      	orrs	r3, r4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bf0c      	ite	eq
 8001c74:	2301      	moveq	r3, #1
 8001c76:	2300      	movne	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	e012      	b.n	8001ca2 <HAL_ADC_Init+0x15a>
 8001c7c:	486e      	ldr	r0, [pc, #440]	@ (8001e38 <HAL_ADC_Init+0x2f0>)
 8001c7e:	f7ff ff15 	bl	8001aac <LL_ADC_IsEnabled>
 8001c82:	4604      	mov	r4, r0
 8001c84:	486d      	ldr	r0, [pc, #436]	@ (8001e3c <HAL_ADC_Init+0x2f4>)
 8001c86:	f7ff ff11 	bl	8001aac <LL_ADC_IsEnabled>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	431c      	orrs	r4, r3
 8001c8e:	486c      	ldr	r0, [pc, #432]	@ (8001e40 <HAL_ADC_Init+0x2f8>)
 8001c90:	f7ff ff0c 	bl	8001aac <LL_ADC_IsEnabled>
 8001c94:	4603      	mov	r3, r0
 8001c96:	4323      	orrs	r3, r4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	bf0c      	ite	eq
 8001c9c:	2301      	moveq	r3, #1
 8001c9e:	2300      	movne	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d012      	beq.n	8001ccc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cae:	d004      	beq.n	8001cba <HAL_ADC_Init+0x172>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a5f      	ldr	r2, [pc, #380]	@ (8001e34 <HAL_ADC_Init+0x2ec>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d101      	bne.n	8001cbe <HAL_ADC_Init+0x176>
 8001cba:	4a62      	ldr	r2, [pc, #392]	@ (8001e44 <HAL_ADC_Init+0x2fc>)
 8001cbc:	e000      	b.n	8001cc0 <HAL_ADC_Init+0x178>
 8001cbe:	4a62      	ldr	r2, [pc, #392]	@ (8001e48 <HAL_ADC_Init+0x300>)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	f7ff fcfe 	bl	80016c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	7f5b      	ldrb	r3, [r3, #29]
 8001cd0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cd6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001cdc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001ce2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001cea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d106      	bne.n	8001d08 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	045b      	lsls	r3, r3, #17
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d009      	beq.n	8001d24 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d14:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	4b48      	ldr	r3, [pc, #288]	@ (8001e4c <HAL_ADC_Init+0x304>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	69b9      	ldr	r1, [r7, #24]
 8001d34:	430b      	orrs	r3, r1
 8001d36:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fee4 	bl	8001b20 <LL_ADC_INJ_IsConversionOngoing>
 8001d58:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d17f      	bne.n	8001e60 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d17c      	bne.n	8001e60 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d6a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d72:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d82:	f023 0302 	bic.w	r3, r3, #2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6812      	ldr	r2, [r2, #0]
 8001d8a:	69b9      	ldr	r1, [r7, #24]
 8001d8c:	430b      	orrs	r3, r1
 8001d8e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d017      	beq.n	8001dc8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691a      	ldr	r2, [r3, #16]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001da6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001db0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001db4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6911      	ldr	r1, [r2, #16]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	430b      	orrs	r3, r1
 8001dc2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001dc6:	e013      	b.n	8001df0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001dd6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001de8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001dec:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d12a      	bne.n	8001e50 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001e04:	f023 0304 	bic.w	r3, r3, #4
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e10:	4311      	orrs	r1, r2
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001e16:	4311      	orrs	r1, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 0201 	orr.w	r2, r2, #1
 8001e28:	611a      	str	r2, [r3, #16]
 8001e2a:	e019      	b.n	8001e60 <HAL_ADC_Init+0x318>
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	053e2d63 	.word	0x053e2d63
 8001e34:	50000100 	.word	0x50000100
 8001e38:	50000400 	.word	0x50000400
 8001e3c:	50000500 	.word	0x50000500
 8001e40:	50000600 	.word	0x50000600
 8001e44:	50000300 	.word	0x50000300
 8001e48:	50000700 	.word	0x50000700
 8001e4c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691a      	ldr	r2, [r3, #16]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0201 	bic.w	r2, r2, #1
 8001e5e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d10c      	bne.n	8001e82 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	f023 010f 	bic.w	r1, r3, #15
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	1e5a      	subs	r2, r3, #1
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e80:	e007      	b.n	8001e92 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 020f 	bic.w	r2, r2, #15
 8001e90:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e96:	f023 0303 	bic.w	r3, r3, #3
 8001e9a:	f043 0201 	orr.w	r2, r3, #1
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ea2:	e007      	b.n	8001eb4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea8:	f043 0210 	orr.w	r2, r3, #16
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001eb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3724      	adds	r7, #36	@ 0x24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd90      	pop	{r4, r7, pc}
 8001ebe:	bf00      	nop

08001ec0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ed4:	d004      	beq.n	8001ee0 <HAL_ADC_Start_DMA+0x20>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a5a      	ldr	r2, [pc, #360]	@ (8002044 <HAL_ADC_Start_DMA+0x184>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d101      	bne.n	8001ee4 <HAL_ADC_Start_DMA+0x24>
 8001ee0:	4b59      	ldr	r3, [pc, #356]	@ (8002048 <HAL_ADC_Start_DMA+0x188>)
 8001ee2:	e000      	b.n	8001ee6 <HAL_ADC_Start_DMA+0x26>
 8001ee4:	4b59      	ldr	r3, [pc, #356]	@ (800204c <HAL_ADC_Start_DMA+0x18c>)
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fd62 	bl	80019b0 <LL_ADC_GetMultimode>
 8001eec:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fe01 	bl	8001afa <LL_ADC_REG_IsConversionOngoing>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f040 809b 	bne.w	8002036 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d101      	bne.n	8001f0e <HAL_ADC_Start_DMA+0x4e>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e096      	b.n	800203c <HAL_ADC_Start_DMA+0x17c>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a4d      	ldr	r2, [pc, #308]	@ (8002050 <HAL_ADC_Start_DMA+0x190>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d008      	beq.n	8001f32 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d005      	beq.n	8001f32 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	2b05      	cmp	r3, #5
 8001f2a:	d002      	beq.n	8001f32 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	2b09      	cmp	r3, #9
 8001f30:	d17a      	bne.n	8002028 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 ff60 	bl	8002df8 <ADC_Enable>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001f3c:	7dfb      	ldrb	r3, [r7, #23]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d16d      	bne.n	800201e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f46:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f4a:	f023 0301 	bic.w	r3, r3, #1
 8001f4e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a3a      	ldr	r2, [pc, #232]	@ (8002044 <HAL_ADC_Start_DMA+0x184>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d009      	beq.n	8001f74 <HAL_ADC_Start_DMA+0xb4>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a3b      	ldr	r2, [pc, #236]	@ (8002054 <HAL_ADC_Start_DMA+0x194>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d002      	beq.n	8001f70 <HAL_ADC_Start_DMA+0xb0>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	e003      	b.n	8001f78 <HAL_ADC_Start_DMA+0xb8>
 8001f70:	4b39      	ldr	r3, [pc, #228]	@ (8002058 <HAL_ADC_Start_DMA+0x198>)
 8001f72:	e001      	b.n	8001f78 <HAL_ADC_Start_DMA+0xb8>
 8001f74:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d002      	beq.n	8001f86 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d105      	bne.n	8001f92 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f8a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d006      	beq.n	8001fac <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fa2:	f023 0206 	bic.w	r2, r3, #6
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	661a      	str	r2, [r3, #96]	@ 0x60
 8001faa:	e002      	b.n	8001fb2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb6:	4a29      	ldr	r2, [pc, #164]	@ (800205c <HAL_ADC_Start_DMA+0x19c>)
 8001fb8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fbe:	4a28      	ldr	r2, [pc, #160]	@ (8002060 <HAL_ADC_Start_DMA+0x1a0>)
 8001fc0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc6:	4a27      	ldr	r2, [pc, #156]	@ (8002064 <HAL_ADC_Start_DMA+0x1a4>)
 8001fc8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	221c      	movs	r2, #28
 8001fd0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f042 0210 	orr.w	r2, r2, #16
 8001fe8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68da      	ldr	r2, [r3, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0201 	orr.w	r2, r2, #1
 8001ff8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3340      	adds	r3, #64	@ 0x40
 8002004:	4619      	mov	r1, r3
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f001 fb37 	bl	800367c <HAL_DMA_Start_IT>
 800200e:	4603      	mov	r3, r0
 8002010:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fd5b 	bl	8001ad2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800201c:	e00d      	b.n	800203a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002026:	e008      	b.n	800203a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002034:	e001      	b.n	800203a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002036:	2302      	movs	r3, #2
 8002038:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800203a:	7dfb      	ldrb	r3, [r7, #23]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	50000100 	.word	0x50000100
 8002048:	50000300 	.word	0x50000300
 800204c:	50000700 	.word	0x50000700
 8002050:	50000600 	.word	0x50000600
 8002054:	50000500 	.word	0x50000500
 8002058:	50000400 	.word	0x50000400
 800205c:	08002f25 	.word	0x08002f25
 8002060:	08002ffd 	.word	0x08002ffd
 8002064:	08003019 	.word	0x08003019

08002068 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08a      	sub	sp, #40	@ 0x28
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002070:	2300      	movs	r3, #0
 8002072:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800208c:	d004      	beq.n	8002098 <HAL_ADC_IRQHandler+0x30>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a8e      	ldr	r2, [pc, #568]	@ (80022cc <HAL_ADC_IRQHandler+0x264>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d101      	bne.n	800209c <HAL_ADC_IRQHandler+0x34>
 8002098:	4b8d      	ldr	r3, [pc, #564]	@ (80022d0 <HAL_ADC_IRQHandler+0x268>)
 800209a:	e000      	b.n	800209e <HAL_ADC_IRQHandler+0x36>
 800209c:	4b8d      	ldr	r3, [pc, #564]	@ (80022d4 <HAL_ADC_IRQHandler+0x26c>)
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fc86 	bl	80019b0 <LL_ADC_GetMultimode>
 80020a4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d017      	beq.n	80020e0 <HAL_ADC_IRQHandler+0x78>
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d012      	beq.n	80020e0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d105      	bne.n	80020d2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ca:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f001 f808 	bl	80030e8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2202      	movs	r2, #2
 80020de:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d004      	beq.n	80020f4 <HAL_ADC_IRQHandler+0x8c>
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10b      	bne.n	800210c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 8094 	beq.w	8002228 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 808e 	beq.w	8002228 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	2b00      	cmp	r3, #0
 8002116:	d105      	bne.n	8002124 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800211c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff fb9f 	bl	800186c <LL_ADC_REG_IsTriggerSourceSWStart>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d072      	beq.n	800221a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a64      	ldr	r2, [pc, #400]	@ (80022cc <HAL_ADC_IRQHandler+0x264>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d009      	beq.n	8002152 <HAL_ADC_IRQHandler+0xea>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a65      	ldr	r2, [pc, #404]	@ (80022d8 <HAL_ADC_IRQHandler+0x270>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d002      	beq.n	800214e <HAL_ADC_IRQHandler+0xe6>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	e003      	b.n	8002156 <HAL_ADC_IRQHandler+0xee>
 800214e:	4b63      	ldr	r3, [pc, #396]	@ (80022dc <HAL_ADC_IRQHandler+0x274>)
 8002150:	e001      	b.n	8002156 <HAL_ADC_IRQHandler+0xee>
 8002152:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	4293      	cmp	r3, r2
 800215c:	d008      	beq.n	8002170 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	2b05      	cmp	r3, #5
 8002168:	d002      	beq.n	8002170 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2b09      	cmp	r3, #9
 800216e:	d104      	bne.n	800217a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	623b      	str	r3, [r7, #32]
 8002178:	e014      	b.n	80021a4 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a53      	ldr	r2, [pc, #332]	@ (80022cc <HAL_ADC_IRQHandler+0x264>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d009      	beq.n	8002198 <HAL_ADC_IRQHandler+0x130>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a53      	ldr	r2, [pc, #332]	@ (80022d8 <HAL_ADC_IRQHandler+0x270>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d002      	beq.n	8002194 <HAL_ADC_IRQHandler+0x12c>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	e003      	b.n	800219c <HAL_ADC_IRQHandler+0x134>
 8002194:	4b51      	ldr	r3, [pc, #324]	@ (80022dc <HAL_ADC_IRQHandler+0x274>)
 8002196:	e001      	b.n	800219c <HAL_ADC_IRQHandler+0x134>
 8002198:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800219c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d135      	bne.n	800221a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d12e      	bne.n	800221a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fc9a 	bl	8001afa <LL_ADC_REG_IsConversionOngoing>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d11a      	bne.n	8002202 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 020c 	bic.w	r2, r2, #12
 80021da:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d112      	bne.n	800221a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f8:	f043 0201 	orr.w	r2, r3, #1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002200:	e00b      	b.n	800221a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002206:	f043 0210 	orr.w	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002212:	f043 0201 	orr.w	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f984 	bl	8002528 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	220c      	movs	r2, #12
 8002226:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f003 0320 	and.w	r3, r3, #32
 800222e:	2b00      	cmp	r3, #0
 8002230:	d004      	beq.n	800223c <HAL_ADC_IRQHandler+0x1d4>
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	f003 0320 	and.w	r3, r3, #32
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10b      	bne.n	8002254 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 80b3 	beq.w	80023ae <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 80ad 	beq.w	80023ae <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002258:	f003 0310 	and.w	r3, r3, #16
 800225c:	2b00      	cmp	r3, #0
 800225e:	d105      	bne.n	800226c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002264:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fb3a 	bl	80018ea <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002276:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff faf5 	bl	800186c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002282:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a10      	ldr	r2, [pc, #64]	@ (80022cc <HAL_ADC_IRQHandler+0x264>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d009      	beq.n	80022a2 <HAL_ADC_IRQHandler+0x23a>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a11      	ldr	r2, [pc, #68]	@ (80022d8 <HAL_ADC_IRQHandler+0x270>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d002      	beq.n	800229e <HAL_ADC_IRQHandler+0x236>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	e003      	b.n	80022a6 <HAL_ADC_IRQHandler+0x23e>
 800229e:	4b0f      	ldr	r3, [pc, #60]	@ (80022dc <HAL_ADC_IRQHandler+0x274>)
 80022a0:	e001      	b.n	80022a6 <HAL_ADC_IRQHandler+0x23e>
 80022a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d008      	beq.n	80022c0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	2b06      	cmp	r3, #6
 80022b8:	d002      	beq.n	80022c0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2b07      	cmp	r3, #7
 80022be:	d10f      	bne.n	80022e0 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	623b      	str	r3, [r7, #32]
 80022c8:	e01f      	b.n	800230a <HAL_ADC_IRQHandler+0x2a2>
 80022ca:	bf00      	nop
 80022cc:	50000100 	.word	0x50000100
 80022d0:	50000300 	.word	0x50000300
 80022d4:	50000700 	.word	0x50000700
 80022d8:	50000500 	.word	0x50000500
 80022dc:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a8b      	ldr	r2, [pc, #556]	@ (8002514 <HAL_ADC_IRQHandler+0x4ac>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d009      	beq.n	80022fe <HAL_ADC_IRQHandler+0x296>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a8a      	ldr	r2, [pc, #552]	@ (8002518 <HAL_ADC_IRQHandler+0x4b0>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d002      	beq.n	80022fa <HAL_ADC_IRQHandler+0x292>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	e003      	b.n	8002302 <HAL_ADC_IRQHandler+0x29a>
 80022fa:	4b88      	ldr	r3, [pc, #544]	@ (800251c <HAL_ADC_IRQHandler+0x4b4>)
 80022fc:	e001      	b.n	8002302 <HAL_ADC_IRQHandler+0x29a>
 80022fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002302:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d047      	beq.n	80023a0 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d007      	beq.n	800232a <HAL_ADC_IRQHandler+0x2c2>
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d03f      	beq.n	80023a0 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002326:	2b00      	cmp	r3, #0
 8002328:	d13a      	bne.n	80023a0 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002334:	2b40      	cmp	r3, #64	@ 0x40
 8002336:	d133      	bne.n	80023a0 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d12e      	bne.n	80023a0 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fbea 	bl	8001b20 <LL_ADC_INJ_IsConversionOngoing>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d11a      	bne.n	8002388 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002360:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002366:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002376:	2b00      	cmp	r3, #0
 8002378:	d112      	bne.n	80023a0 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237e:	f043 0201 	orr.w	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002386:	e00b      	b.n	80023a0 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800238c:	f043 0210 	orr.w	r2, r3, #16
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002398:	f043 0201 	orr.w	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 fe79 	bl	8003098 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2260      	movs	r2, #96	@ 0x60
 80023ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d011      	beq.n	80023dc <HAL_ADC_IRQHandler+0x374>
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00c      	beq.n	80023dc <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f8be 	bl	8002550 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2280      	movs	r2, #128	@ 0x80
 80023da:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d012      	beq.n	800240c <HAL_ADC_IRQHandler+0x3a4>
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00d      	beq.n	800240c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 fe5f 	bl	80030c0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800240a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002412:	2b00      	cmp	r3, #0
 8002414:	d012      	beq.n	800243c <HAL_ADC_IRQHandler+0x3d4>
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00d      	beq.n	800243c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002424:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 fe51 	bl	80030d4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800243a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f003 0310 	and.w	r3, r3, #16
 8002442:	2b00      	cmp	r3, #0
 8002444:	d043      	beq.n	80024ce <HAL_ADC_IRQHandler+0x466>
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b00      	cmp	r3, #0
 800244e:	d03e      	beq.n	80024ce <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002454:	2b00      	cmp	r3, #0
 8002456:	d102      	bne.n	800245e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002458:	2301      	movs	r3, #1
 800245a:	627b      	str	r3, [r7, #36]	@ 0x24
 800245c:	e021      	b.n	80024a2 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d015      	beq.n	8002490 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800246c:	d004      	beq.n	8002478 <HAL_ADC_IRQHandler+0x410>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a28      	ldr	r2, [pc, #160]	@ (8002514 <HAL_ADC_IRQHandler+0x4ac>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d101      	bne.n	800247c <HAL_ADC_IRQHandler+0x414>
 8002478:	4b29      	ldr	r3, [pc, #164]	@ (8002520 <HAL_ADC_IRQHandler+0x4b8>)
 800247a:	e000      	b.n	800247e <HAL_ADC_IRQHandler+0x416>
 800247c:	4b29      	ldr	r3, [pc, #164]	@ (8002524 <HAL_ADC_IRQHandler+0x4bc>)
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff faa4 	bl	80019cc <LL_ADC_GetMultiDMATransfer>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00b      	beq.n	80024a2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800248a:	2301      	movs	r3, #1
 800248c:	627b      	str	r3, [r7, #36]	@ 0x24
 800248e:	e008      	b.n	80024a2 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800249e:	2301      	movs	r3, #1
 80024a0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80024a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d10e      	bne.n	80024c6 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ac:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024b8:	f043 0202 	orr.w	r2, r3, #2
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 f84f 	bl	8002564 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2210      	movs	r2, #16
 80024cc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d018      	beq.n	800250a <HAL_ADC_IRQHandler+0x4a2>
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d013      	beq.n	800250a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f2:	f043 0208 	orr.w	r2, r3, #8
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002502:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 fdd1 	bl	80030ac <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800250a:	bf00      	nop
 800250c:	3728      	adds	r7, #40	@ 0x28
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	50000100 	.word	0x50000100
 8002518:	50000500 	.word	0x50000500
 800251c:	50000400 	.word	0x50000400
 8002520:	50000300 	.word	0x50000300
 8002524:	50000700 	.word	0x50000700

08002528 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b0b6      	sub	sp, #216	@ 0xd8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002592:	2b01      	cmp	r3, #1
 8002594:	d102      	bne.n	800259c <HAL_ADC_ConfigChannel+0x24>
 8002596:	2302      	movs	r3, #2
 8002598:	f000 bc13 	b.w	8002dc2 <HAL_ADC_ConfigChannel+0x84a>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff faa6 	bl	8001afa <LL_ADC_REG_IsConversionOngoing>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f040 83f3 	bne.w	8002d9c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6818      	ldr	r0, [r3, #0]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	6859      	ldr	r1, [r3, #4]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	f7ff f965 	bl	8001892 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff fa94 	bl	8001afa <LL_ADC_REG_IsConversionOngoing>
 80025d2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff faa0 	bl	8001b20 <LL_ADC_INJ_IsConversionOngoing>
 80025e0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f040 81d9 	bne.w	80029a0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f040 81d4 	bne.w	80029a0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002600:	d10f      	bne.n	8002622 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6818      	ldr	r0, [r3, #0]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2200      	movs	r2, #0
 800260c:	4619      	mov	r1, r3
 800260e:	f7ff f97f 	bl	8001910 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff f913 	bl	8001846 <LL_ADC_SetSamplingTimeCommonConfig>
 8002620:	e00e      	b.n	8002640 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	6819      	ldr	r1, [r3, #0]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	461a      	mov	r2, r3
 8002630:	f7ff f96e 	bl	8001910 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2100      	movs	r1, #0
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff f903 	bl	8001846 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	08db      	lsrs	r3, r3, #3
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	2b04      	cmp	r3, #4
 8002660:	d022      	beq.n	80026a8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	6919      	ldr	r1, [r3, #16]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002672:	f7ff f85d 	bl	8001730 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6919      	ldr	r1, [r3, #16]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	461a      	mov	r2, r3
 8002684:	f7ff f8a9 	bl	80017da <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002694:	2b01      	cmp	r3, #1
 8002696:	d102      	bne.n	800269e <HAL_ADC_ConfigChannel+0x126>
 8002698:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800269c:	e000      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x128>
 800269e:	2300      	movs	r3, #0
 80026a0:	461a      	mov	r2, r3
 80026a2:	f7ff f8b5 	bl	8001810 <LL_ADC_SetOffsetSaturation>
 80026a6:	e17b      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2100      	movs	r1, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff f862 	bl	8001778 <LL_ADC_GetOffsetChannel>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10a      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x15c>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2100      	movs	r1, #0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff f857 	bl	8001778 <LL_ADC_GetOffsetChannel>
 80026ca:	4603      	mov	r3, r0
 80026cc:	0e9b      	lsrs	r3, r3, #26
 80026ce:	f003 021f 	and.w	r2, r3, #31
 80026d2:	e01e      	b.n	8002712 <HAL_ADC_ConfigChannel+0x19a>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2100      	movs	r1, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff f84c 	bl	8001778 <LL_ADC_GetOffsetChannel>
 80026e0:	4603      	mov	r3, r0
 80026e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80026ea:	fa93 f3a3 	rbit	r3, r3
 80026ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80026f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002702:	2320      	movs	r3, #32
 8002704:	e004      	b.n	8002710 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002706:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800270a:	fab3 f383 	clz	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271a:	2b00      	cmp	r3, #0
 800271c:	d105      	bne.n	800272a <HAL_ADC_ConfigChannel+0x1b2>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	0e9b      	lsrs	r3, r3, #26
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	e018      	b.n	800275c <HAL_ADC_ConfigChannel+0x1e4>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002732:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002736:	fa93 f3a3 	rbit	r3, r3
 800273a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800273e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002742:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002746:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800274e:	2320      	movs	r3, #32
 8002750:	e004      	b.n	800275c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002752:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002756:	fab3 f383 	clz	r3, r3
 800275a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800275c:	429a      	cmp	r2, r3
 800275e:	d106      	bne.n	800276e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2200      	movs	r2, #0
 8002766:	2100      	movs	r1, #0
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff f81b 	bl	80017a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2101      	movs	r1, #1
 8002774:	4618      	mov	r0, r3
 8002776:	f7fe ffff 	bl	8001778 <LL_ADC_GetOffsetChannel>
 800277a:	4603      	mov	r3, r0
 800277c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10a      	bne.n	800279a <HAL_ADC_ConfigChannel+0x222>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2101      	movs	r1, #1
 800278a:	4618      	mov	r0, r3
 800278c:	f7fe fff4 	bl	8001778 <LL_ADC_GetOffsetChannel>
 8002790:	4603      	mov	r3, r0
 8002792:	0e9b      	lsrs	r3, r3, #26
 8002794:	f003 021f 	and.w	r2, r3, #31
 8002798:	e01e      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x260>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2101      	movs	r1, #1
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe ffe9 	bl	8001778 <LL_ADC_GetOffsetChannel>
 80027a6:	4603      	mov	r3, r0
 80027a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027b0:	fa93 f3a3 	rbit	r3, r3
 80027b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80027b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80027c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80027c8:	2320      	movs	r3, #32
 80027ca:	e004      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80027cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027d0:	fab3 f383 	clz	r3, r3
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d105      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x278>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	0e9b      	lsrs	r3, r3, #26
 80027ea:	f003 031f 	and.w	r3, r3, #31
 80027ee:	e018      	b.n	8002822 <HAL_ADC_ConfigChannel+0x2aa>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002804:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002808:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800280c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002814:	2320      	movs	r3, #32
 8002816:	e004      	b.n	8002822 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002818:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800281c:	fab3 f383 	clz	r3, r3
 8002820:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002822:	429a      	cmp	r2, r3
 8002824:	d106      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2200      	movs	r2, #0
 800282c:	2101      	movs	r1, #1
 800282e:	4618      	mov	r0, r3
 8002830:	f7fe ffb8 	bl	80017a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2102      	movs	r1, #2
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe ff9c 	bl	8001778 <LL_ADC_GetOffsetChannel>
 8002840:	4603      	mov	r3, r0
 8002842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10a      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x2e8>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2102      	movs	r1, #2
 8002850:	4618      	mov	r0, r3
 8002852:	f7fe ff91 	bl	8001778 <LL_ADC_GetOffsetChannel>
 8002856:	4603      	mov	r3, r0
 8002858:	0e9b      	lsrs	r3, r3, #26
 800285a:	f003 021f 	and.w	r2, r3, #31
 800285e:	e01e      	b.n	800289e <HAL_ADC_ConfigChannel+0x326>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2102      	movs	r1, #2
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe ff86 	bl	8001778 <LL_ADC_GetOffsetChannel>
 800286c:	4603      	mov	r3, r0
 800286e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002872:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002876:	fa93 f3a3 	rbit	r3, r3
 800287a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800287e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002882:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002886:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800288e:	2320      	movs	r3, #32
 8002890:	e004      	b.n	800289c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002892:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002896:	fab3 f383 	clz	r3, r3
 800289a:	b2db      	uxtb	r3, r3
 800289c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d105      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x33e>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	0e9b      	lsrs	r3, r3, #26
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	e016      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x36c>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80028c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80028ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80028d6:	2320      	movs	r3, #32
 80028d8:	e004      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80028da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028de:	fab3 f383 	clz	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d106      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2200      	movs	r2, #0
 80028ee:	2102      	movs	r1, #2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fe ff57 	bl	80017a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2103      	movs	r1, #3
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7fe ff3b 	bl	8001778 <LL_ADC_GetOffsetChannel>
 8002902:	4603      	mov	r3, r0
 8002904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10a      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x3aa>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2103      	movs	r1, #3
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe ff30 	bl	8001778 <LL_ADC_GetOffsetChannel>
 8002918:	4603      	mov	r3, r0
 800291a:	0e9b      	lsrs	r3, r3, #26
 800291c:	f003 021f 	and.w	r2, r3, #31
 8002920:	e017      	b.n	8002952 <HAL_ADC_ConfigChannel+0x3da>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2103      	movs	r1, #3
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe ff25 	bl	8001778 <LL_ADC_GetOffsetChannel>
 800292e:	4603      	mov	r3, r0
 8002930:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002932:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002934:	fa93 f3a3 	rbit	r3, r3
 8002938:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800293a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800293c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800293e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002944:	2320      	movs	r3, #32
 8002946:	e003      	b.n	8002950 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002948:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800294a:	fab3 f383 	clz	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295a:	2b00      	cmp	r3, #0
 800295c:	d105      	bne.n	800296a <HAL_ADC_ConfigChannel+0x3f2>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	0e9b      	lsrs	r3, r3, #26
 8002964:	f003 031f 	and.w	r3, r3, #31
 8002968:	e011      	b.n	800298e <HAL_ADC_ConfigChannel+0x416>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002972:	fa93 f3a3 	rbit	r3, r3
 8002976:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002978:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800297a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800297c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002982:	2320      	movs	r3, #32
 8002984:	e003      	b.n	800298e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002986:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002988:	fab3 f383 	clz	r3, r3
 800298c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800298e:	429a      	cmp	r2, r3
 8002990:	d106      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2200      	movs	r2, #0
 8002998:	2103      	movs	r1, #3
 800299a:	4618      	mov	r0, r3
 800299c:	f7fe ff02 	bl	80017a4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff f881 	bl	8001aac <LL_ADC_IsEnabled>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f040 813d 	bne.w	8002c2c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6819      	ldr	r1, [r3, #0]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	461a      	mov	r2, r3
 80029c0:	f7fe ffd2 	bl	8001968 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4aa2      	ldr	r2, [pc, #648]	@ (8002c54 <HAL_ADC_ConfigChannel+0x6dc>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	f040 812e 	bne.w	8002c2c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10b      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x480>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	0e9b      	lsrs	r3, r3, #26
 80029e6:	3301      	adds	r3, #1
 80029e8:	f003 031f 	and.w	r3, r3, #31
 80029ec:	2b09      	cmp	r3, #9
 80029ee:	bf94      	ite	ls
 80029f0:	2301      	movls	r3, #1
 80029f2:	2300      	movhi	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	e019      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x4b4>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a00:	fa93 f3a3 	rbit	r3, r3
 8002a04:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002a06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a08:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002a0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002a10:	2320      	movs	r3, #32
 8002a12:	e003      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002a14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	f003 031f 	and.w	r3, r3, #31
 8002a22:	2b09      	cmp	r3, #9
 8002a24:	bf94      	ite	ls
 8002a26:	2301      	movls	r3, #1
 8002a28:	2300      	movhi	r3, #0
 8002a2a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d079      	beq.n	8002b24 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d107      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x4d4>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	0e9b      	lsrs	r3, r3, #26
 8002a42:	3301      	adds	r3, #1
 8002a44:	069b      	lsls	r3, r3, #26
 8002a46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a4a:	e015      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x500>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a54:	fa93 f3a3 	rbit	r3, r3
 8002a58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002a5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a5c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002a64:	2320      	movs	r3, #32
 8002a66:	e003      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	3301      	adds	r3, #1
 8002a72:	069b      	lsls	r3, r3, #26
 8002a74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d109      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x520>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	0e9b      	lsrs	r3, r3, #26
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	f003 031f 	and.w	r3, r3, #31
 8002a90:	2101      	movs	r1, #1
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	e017      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x550>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aa0:	fa93 f3a3 	rbit	r3, r3
 8002aa4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002aa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002aaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002ab0:	2320      	movs	r3, #32
 8002ab2:	e003      	b.n	8002abc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002ab4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ab6:	fab3 f383 	clz	r3, r3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	3301      	adds	r3, #1
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac8:	ea42 0103 	orr.w	r1, r2, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x576>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	0e9b      	lsrs	r3, r3, #26
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f003 021f 	and.w	r2, r3, #31
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4413      	add	r3, r2
 8002aea:	051b      	lsls	r3, r3, #20
 8002aec:	e018      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x5a8>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002b06:	2320      	movs	r3, #32
 8002b08:	e003      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b0c:	fab3 f383 	clz	r3, r3
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	3301      	adds	r3, #1
 8002b14:	f003 021f 	and.w	r2, r3, #31
 8002b18:	4613      	mov	r3, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4413      	add	r3, r2
 8002b1e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b20:	430b      	orrs	r3, r1
 8002b22:	e07e      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d107      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x5c8>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	0e9b      	lsrs	r3, r3, #26
 8002b36:	3301      	adds	r3, #1
 8002b38:	069b      	lsls	r3, r3, #26
 8002b3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b3e:	e015      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x5f4>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b48:	fa93 f3a3 	rbit	r3, r3
 8002b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b50:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002b58:	2320      	movs	r3, #32
 8002b5a:	e003      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5e:	fab3 f383 	clz	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	3301      	adds	r3, #1
 8002b66:	069b      	lsls	r3, r3, #26
 8002b68:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d109      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x614>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	0e9b      	lsrs	r3, r3, #26
 8002b7e:	3301      	adds	r3, #1
 8002b80:	f003 031f 	and.w	r3, r3, #31
 8002b84:	2101      	movs	r1, #1
 8002b86:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8a:	e017      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x644>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	fa93 f3a3 	rbit	r3, r3
 8002b98:	61fb      	str	r3, [r7, #28]
  return result;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002ba4:	2320      	movs	r3, #32
 8002ba6:	e003      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002baa:	fab3 f383 	clz	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	f003 031f 	and.w	r3, r3, #31
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbc:	ea42 0103 	orr.w	r1, r2, r3
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10d      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x670>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	0e9b      	lsrs	r3, r3, #26
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	f003 021f 	and.w	r2, r3, #31
 8002bd8:	4613      	mov	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4413      	add	r3, r2
 8002bde:	3b1e      	subs	r3, #30
 8002be0:	051b      	lsls	r3, r3, #20
 8002be2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002be6:	e01b      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x6a8>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	613b      	str	r3, [r7, #16]
  return result;
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002c00:	2320      	movs	r3, #32
 8002c02:	e003      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	f003 021f 	and.w	r2, r3, #31
 8002c12:	4613      	mov	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4413      	add	r3, r2
 8002c18:	3b1e      	subs	r3, #30
 8002c1a:	051b      	lsls	r3, r3, #20
 8002c1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c20:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c26:	4619      	mov	r1, r3
 8002c28:	f7fe fe72 	bl	8001910 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	4b09      	ldr	r3, [pc, #36]	@ (8002c58 <HAL_ADC_ConfigChannel+0x6e0>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80be 	beq.w	8002db6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c42:	d004      	beq.n	8002c4e <HAL_ADC_ConfigChannel+0x6d6>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a04      	ldr	r2, [pc, #16]	@ (8002c5c <HAL_ADC_ConfigChannel+0x6e4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d10a      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x6ec>
 8002c4e:	4b04      	ldr	r3, [pc, #16]	@ (8002c60 <HAL_ADC_ConfigChannel+0x6e8>)
 8002c50:	e009      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x6ee>
 8002c52:	bf00      	nop
 8002c54:	407f0000 	.word	0x407f0000
 8002c58:	80080000 	.word	0x80080000
 8002c5c:	50000100 	.word	0x50000100
 8002c60:	50000300 	.word	0x50000300
 8002c64:	4b59      	ldr	r3, [pc, #356]	@ (8002dcc <HAL_ADC_ConfigChannel+0x854>)
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe fd54 	bl	8001714 <LL_ADC_GetCommonPathInternalCh>
 8002c6c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a56      	ldr	r2, [pc, #344]	@ (8002dd0 <HAL_ADC_ConfigChannel+0x858>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d004      	beq.n	8002c84 <HAL_ADC_ConfigChannel+0x70c>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a55      	ldr	r2, [pc, #340]	@ (8002dd4 <HAL_ADC_ConfigChannel+0x85c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d13a      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d134      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c98:	d005      	beq.n	8002ca6 <HAL_ADC_ConfigChannel+0x72e>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a4e      	ldr	r2, [pc, #312]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x860>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	f040 8085 	bne.w	8002db0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cae:	d004      	beq.n	8002cba <HAL_ADC_ConfigChannel+0x742>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a49      	ldr	r2, [pc, #292]	@ (8002ddc <HAL_ADC_ConfigChannel+0x864>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d101      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x746>
 8002cba:	4a49      	ldr	r2, [pc, #292]	@ (8002de0 <HAL_ADC_ConfigChannel+0x868>)
 8002cbc:	e000      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x748>
 8002cbe:	4a43      	ldr	r2, [pc, #268]	@ (8002dcc <HAL_ADC_ConfigChannel+0x854>)
 8002cc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cc4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4610      	mov	r0, r2
 8002ccc:	f7fe fd0f 	bl	80016ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cd0:	4b44      	ldr	r3, [pc, #272]	@ (8002de4 <HAL_ADC_ConfigChannel+0x86c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	099b      	lsrs	r3, r3, #6
 8002cd6:	4a44      	ldr	r2, [pc, #272]	@ (8002de8 <HAL_ADC_ConfigChannel+0x870>)
 8002cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cdc:	099b      	lsrs	r3, r3, #6
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cea:	e002      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1f9      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cf8:	e05a      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a3b      	ldr	r2, [pc, #236]	@ (8002dec <HAL_ADC_ConfigChannel+0x874>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d125      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d11f      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a31      	ldr	r2, [pc, #196]	@ (8002ddc <HAL_ADC_ConfigChannel+0x864>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d104      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x7ac>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a34      	ldr	r2, [pc, #208]	@ (8002df0 <HAL_ADC_ConfigChannel+0x878>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d047      	beq.n	8002db4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d2c:	d004      	beq.n	8002d38 <HAL_ADC_ConfigChannel+0x7c0>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a2a      	ldr	r2, [pc, #168]	@ (8002ddc <HAL_ADC_ConfigChannel+0x864>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d101      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x7c4>
 8002d38:	4a29      	ldr	r2, [pc, #164]	@ (8002de0 <HAL_ADC_ConfigChannel+0x868>)
 8002d3a:	e000      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x7c6>
 8002d3c:	4a23      	ldr	r2, [pc, #140]	@ (8002dcc <HAL_ADC_ConfigChannel+0x854>)
 8002d3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d46:	4619      	mov	r1, r3
 8002d48:	4610      	mov	r0, r2
 8002d4a:	f7fe fcd0 	bl	80016ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d4e:	e031      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a27      	ldr	r2, [pc, #156]	@ (8002df4 <HAL_ADC_ConfigChannel+0x87c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d12d      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d127      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8002ddc <HAL_ADC_ConfigChannel+0x864>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d022      	beq.n	8002db6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d78:	d004      	beq.n	8002d84 <HAL_ADC_ConfigChannel+0x80c>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a17      	ldr	r2, [pc, #92]	@ (8002ddc <HAL_ADC_ConfigChannel+0x864>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d101      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x810>
 8002d84:	4a16      	ldr	r2, [pc, #88]	@ (8002de0 <HAL_ADC_ConfigChannel+0x868>)
 8002d86:	e000      	b.n	8002d8a <HAL_ADC_ConfigChannel+0x812>
 8002d88:	4a10      	ldr	r2, [pc, #64]	@ (8002dcc <HAL_ADC_ConfigChannel+0x854>)
 8002d8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d8e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d92:	4619      	mov	r1, r3
 8002d94:	4610      	mov	r0, r2
 8002d96:	f7fe fcaa 	bl	80016ee <LL_ADC_SetCommonPathInternalCh>
 8002d9a:	e00c      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da0:	f043 0220 	orr.w	r2, r3, #32
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002dae:	e002      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002db0:	bf00      	nop
 8002db2:	e000      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002db4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002dbe:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	37d8      	adds	r7, #216	@ 0xd8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	50000700 	.word	0x50000700
 8002dd0:	c3210000 	.word	0xc3210000
 8002dd4:	90c00010 	.word	0x90c00010
 8002dd8:	50000600 	.word	0x50000600
 8002ddc:	50000100 	.word	0x50000100
 8002de0:	50000300 	.word	0x50000300
 8002de4:	20000000 	.word	0x20000000
 8002de8:	053e2d63 	.word	0x053e2d63
 8002dec:	c7520000 	.word	0xc7520000
 8002df0:	50000500 	.word	0x50000500
 8002df4:	cb840000 	.word	0xcb840000

08002df8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe fe4f 	bl	8001aac <LL_ADC_IsEnabled>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d176      	bne.n	8002f02 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	4b3c      	ldr	r3, [pc, #240]	@ (8002f0c <ADC_Enable+0x114>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00d      	beq.n	8002e3e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e26:	f043 0210 	orr.w	r2, r3, #16
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e32:	f043 0201 	orr.w	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e062      	b.n	8002f04 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fe fe1e 	bl	8001a84 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e50:	d004      	beq.n	8002e5c <ADC_Enable+0x64>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a2e      	ldr	r2, [pc, #184]	@ (8002f10 <ADC_Enable+0x118>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d101      	bne.n	8002e60 <ADC_Enable+0x68>
 8002e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002f14 <ADC_Enable+0x11c>)
 8002e5e:	e000      	b.n	8002e62 <ADC_Enable+0x6a>
 8002e60:	4b2d      	ldr	r3, [pc, #180]	@ (8002f18 <ADC_Enable+0x120>)
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe fc56 	bl	8001714 <LL_ADC_GetCommonPathInternalCh>
 8002e68:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002e6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d013      	beq.n	8002e9a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e72:	4b2a      	ldr	r3, [pc, #168]	@ (8002f1c <ADC_Enable+0x124>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	099b      	lsrs	r3, r3, #6
 8002e78:	4a29      	ldr	r2, [pc, #164]	@ (8002f20 <ADC_Enable+0x128>)
 8002e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7e:	099b      	lsrs	r3, r3, #6
 8002e80:	1c5a      	adds	r2, r3, #1
 8002e82:	4613      	mov	r3, r2
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e8c:	e002      	b.n	8002e94 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	3b01      	subs	r3, #1
 8002e92:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f9      	bne.n	8002e8e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e9a:	f7fe fc09 	bl	80016b0 <HAL_GetTick>
 8002e9e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ea0:	e028      	b.n	8002ef4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fe fe00 	bl	8001aac <LL_ADC_IsEnabled>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d104      	bne.n	8002ebc <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fe fde4 	bl	8001a84 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ebc:	f7fe fbf8 	bl	80016b0 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d914      	bls.n	8002ef4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d00d      	beq.n	8002ef4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002edc:	f043 0210 	orr.w	r2, r3, #16
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ee8:	f043 0201 	orr.w	r2, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e007      	b.n	8002f04 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d1cf      	bne.n	8002ea2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	8000003f 	.word	0x8000003f
 8002f10:	50000100 	.word	0x50000100
 8002f14:	50000300 	.word	0x50000300
 8002f18:	50000700 	.word	0x50000700
 8002f1c:	20000000 	.word	0x20000000
 8002f20:	053e2d63 	.word	0x053e2d63

08002f24 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f30:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f36:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d14b      	bne.n	8002fd6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f42:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d021      	beq.n	8002f9c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fe fc85 	bl	800186c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d032      	beq.n	8002fce <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d12b      	bne.n	8002fce <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f7a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d11f      	bne.n	8002fce <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f92:	f043 0201 	orr.w	r2, r3, #1
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f9a:	e018      	b.n	8002fce <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d111      	bne.n	8002fce <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d105      	bne.n	8002fce <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc6:	f043 0201 	orr.w	r2, r3, #1
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f7ff faaa 	bl	8002528 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002fd4:	e00e      	b.n	8002ff4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fda:	f003 0310 	and.w	r3, r3, #16
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f7ff fabe 	bl	8002564 <HAL_ADC_ErrorCallback>
}
 8002fe8:	e004      	b.n	8002ff4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	4798      	blx	r3
}
 8002ff4:	bf00      	nop
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003008:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f7ff fa96 	bl	800253c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003010:	bf00      	nop
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003024:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003036:	f043 0204 	orr.w	r2, r3, #4
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f7ff fa90 	bl	8002564 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003044:	bf00      	nop
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <LL_ADC_IsEnabled>:
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <LL_ADC_IsEnabled+0x18>
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <LL_ADC_IsEnabled+0x1a>
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <LL_ADC_REG_IsConversionOngoing>:
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b04      	cmp	r3, #4
 8003084:	d101      	bne.n	800308a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80030fc:	b590      	push	{r4, r7, lr}
 80030fe:	b0a1      	sub	sp, #132	@ 0x84
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003116:	2302      	movs	r3, #2
 8003118:	e0e7      	b.n	80032ea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003122:	2300      	movs	r3, #0
 8003124:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003126:	2300      	movs	r3, #0
 8003128:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003132:	d102      	bne.n	800313a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003134:	4b6f      	ldr	r3, [pc, #444]	@ (80032f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003136:	60bb      	str	r3, [r7, #8]
 8003138:	e009      	b.n	800314e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a6e      	ldr	r2, [pc, #440]	@ (80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d102      	bne.n	800314a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003144:	4b6d      	ldr	r3, [pc, #436]	@ (80032fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003146:	60bb      	str	r3, [r7, #8]
 8003148:	e001      	b.n	800314e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800314a:	2300      	movs	r3, #0
 800314c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10b      	bne.n	800316c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003158:	f043 0220 	orr.w	r2, r3, #32
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0be      	b.n	80032ea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff ff7f 	bl	8003072 <LL_ADC_REG_IsConversionOngoing>
 8003174:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff ff79 	bl	8003072 <LL_ADC_REG_IsConversionOngoing>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	f040 80a0 	bne.w	80032c8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003188:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800318a:	2b00      	cmp	r3, #0
 800318c:	f040 809c 	bne.w	80032c8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003198:	d004      	beq.n	80031a4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a55      	ldr	r2, [pc, #340]	@ (80032f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d101      	bne.n	80031a8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80031a4:	4b56      	ldr	r3, [pc, #344]	@ (8003300 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80031a6:	e000      	b.n	80031aa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80031a8:	4b56      	ldr	r3, [pc, #344]	@ (8003304 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80031aa:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d04b      	beq.n	800324c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80031b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	6859      	ldr	r1, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80031c6:	035b      	lsls	r3, r3, #13
 80031c8:	430b      	orrs	r3, r1
 80031ca:	431a      	orrs	r2, r3
 80031cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031ce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031d8:	d004      	beq.n	80031e4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a45      	ldr	r2, [pc, #276]	@ (80032f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d10f      	bne.n	8003204 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80031e4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80031e8:	f7ff ff30 	bl	800304c <LL_ADC_IsEnabled>
 80031ec:	4604      	mov	r4, r0
 80031ee:	4841      	ldr	r0, [pc, #260]	@ (80032f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80031f0:	f7ff ff2c 	bl	800304c <LL_ADC_IsEnabled>
 80031f4:	4603      	mov	r3, r0
 80031f6:	4323      	orrs	r3, r4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf0c      	ite	eq
 80031fc:	2301      	moveq	r3, #1
 80031fe:	2300      	movne	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	e012      	b.n	800322a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003204:	483c      	ldr	r0, [pc, #240]	@ (80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003206:	f7ff ff21 	bl	800304c <LL_ADC_IsEnabled>
 800320a:	4604      	mov	r4, r0
 800320c:	483b      	ldr	r0, [pc, #236]	@ (80032fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800320e:	f7ff ff1d 	bl	800304c <LL_ADC_IsEnabled>
 8003212:	4603      	mov	r3, r0
 8003214:	431c      	orrs	r4, r3
 8003216:	483c      	ldr	r0, [pc, #240]	@ (8003308 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003218:	f7ff ff18 	bl	800304c <LL_ADC_IsEnabled>
 800321c:	4603      	mov	r3, r0
 800321e:	4323      	orrs	r3, r4
 8003220:	2b00      	cmp	r3, #0
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d056      	beq.n	80032dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800322e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003236:	f023 030f 	bic.w	r3, r3, #15
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	6811      	ldr	r1, [r2, #0]
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	6892      	ldr	r2, [r2, #8]
 8003242:	430a      	orrs	r2, r1
 8003244:	431a      	orrs	r2, r3
 8003246:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003248:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800324a:	e047      	b.n	80032dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800324c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003254:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003256:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003260:	d004      	beq.n	800326c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a23      	ldr	r2, [pc, #140]	@ (80032f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d10f      	bne.n	800328c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800326c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003270:	f7ff feec 	bl	800304c <LL_ADC_IsEnabled>
 8003274:	4604      	mov	r4, r0
 8003276:	481f      	ldr	r0, [pc, #124]	@ (80032f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003278:	f7ff fee8 	bl	800304c <LL_ADC_IsEnabled>
 800327c:	4603      	mov	r3, r0
 800327e:	4323      	orrs	r3, r4
 8003280:	2b00      	cmp	r3, #0
 8003282:	bf0c      	ite	eq
 8003284:	2301      	moveq	r3, #1
 8003286:	2300      	movne	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	e012      	b.n	80032b2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800328c:	481a      	ldr	r0, [pc, #104]	@ (80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800328e:	f7ff fedd 	bl	800304c <LL_ADC_IsEnabled>
 8003292:	4604      	mov	r4, r0
 8003294:	4819      	ldr	r0, [pc, #100]	@ (80032fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003296:	f7ff fed9 	bl	800304c <LL_ADC_IsEnabled>
 800329a:	4603      	mov	r3, r0
 800329c:	431c      	orrs	r4, r3
 800329e:	481a      	ldr	r0, [pc, #104]	@ (8003308 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80032a0:	f7ff fed4 	bl	800304c <LL_ADC_IsEnabled>
 80032a4:	4603      	mov	r3, r0
 80032a6:	4323      	orrs	r3, r4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	bf0c      	ite	eq
 80032ac:	2301      	moveq	r3, #1
 80032ae:	2300      	movne	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d012      	beq.n	80032dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80032be:	f023 030f 	bic.w	r3, r3, #15
 80032c2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80032c4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032c6:	e009      	b.n	80032dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032cc:	f043 0220 	orr.w	r2, r3, #32
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80032da:	e000      	b.n	80032de <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80032e6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3784      	adds	r7, #132	@ 0x84
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd90      	pop	{r4, r7, pc}
 80032f2:	bf00      	nop
 80032f4:	50000100 	.word	0x50000100
 80032f8:	50000400 	.word	0x50000400
 80032fc:	50000500 	.word	0x50000500
 8003300:	50000300 	.word	0x50000300
 8003304:	50000700 	.word	0x50000700
 8003308:	50000600 	.word	0x50000600

0800330c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800331c:	4b0c      	ldr	r3, [pc, #48]	@ (8003350 <__NVIC_SetPriorityGrouping+0x44>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003328:	4013      	ands	r3, r2
 800332a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003334:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800333c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800333e:	4a04      	ldr	r2, [pc, #16]	@ (8003350 <__NVIC_SetPriorityGrouping+0x44>)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	60d3      	str	r3, [r2, #12]
}
 8003344:	bf00      	nop
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	e000ed00 	.word	0xe000ed00

08003354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003358:	4b04      	ldr	r3, [pc, #16]	@ (800336c <__NVIC_GetPriorityGrouping+0x18>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	0a1b      	lsrs	r3, r3, #8
 800335e:	f003 0307 	and.w	r3, r3, #7
}
 8003362:	4618      	mov	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	e000ed00 	.word	0xe000ed00

08003370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800337a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337e:	2b00      	cmp	r3, #0
 8003380:	db0b      	blt.n	800339a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003382:	79fb      	ldrb	r3, [r7, #7]
 8003384:	f003 021f 	and.w	r2, r3, #31
 8003388:	4907      	ldr	r1, [pc, #28]	@ (80033a8 <__NVIC_EnableIRQ+0x38>)
 800338a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338e:	095b      	lsrs	r3, r3, #5
 8003390:	2001      	movs	r0, #1
 8003392:	fa00 f202 	lsl.w	r2, r0, r2
 8003396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	e000e100 	.word	0xe000e100

080033ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	6039      	str	r1, [r7, #0]
 80033b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	db0a      	blt.n	80033d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	490c      	ldr	r1, [pc, #48]	@ (80033f8 <__NVIC_SetPriority+0x4c>)
 80033c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ca:	0112      	lsls	r2, r2, #4
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	440b      	add	r3, r1
 80033d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033d4:	e00a      	b.n	80033ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	4908      	ldr	r1, [pc, #32]	@ (80033fc <__NVIC_SetPriority+0x50>)
 80033dc:	79fb      	ldrb	r3, [r7, #7]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	3b04      	subs	r3, #4
 80033e4:	0112      	lsls	r2, r2, #4
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	440b      	add	r3, r1
 80033ea:	761a      	strb	r2, [r3, #24]
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	e000e100 	.word	0xe000e100
 80033fc:	e000ed00 	.word	0xe000ed00

08003400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003400:	b480      	push	{r7}
 8003402:	b089      	sub	sp, #36	@ 0x24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	f1c3 0307 	rsb	r3, r3, #7
 800341a:	2b04      	cmp	r3, #4
 800341c:	bf28      	it	cs
 800341e:	2304      	movcs	r3, #4
 8003420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	3304      	adds	r3, #4
 8003426:	2b06      	cmp	r3, #6
 8003428:	d902      	bls.n	8003430 <NVIC_EncodePriority+0x30>
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	3b03      	subs	r3, #3
 800342e:	e000      	b.n	8003432 <NVIC_EncodePriority+0x32>
 8003430:	2300      	movs	r3, #0
 8003432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003434:	f04f 32ff 	mov.w	r2, #4294967295
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43da      	mvns	r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	401a      	ands	r2, r3
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003448:	f04f 31ff 	mov.w	r1, #4294967295
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	fa01 f303 	lsl.w	r3, r1, r3
 8003452:	43d9      	mvns	r1, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003458:	4313      	orrs	r3, r2
         );
}
 800345a:	4618      	mov	r0, r3
 800345c:	3724      	adds	r7, #36	@ 0x24
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
	...

08003468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3b01      	subs	r3, #1
 8003474:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003478:	d301      	bcc.n	800347e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800347a:	2301      	movs	r3, #1
 800347c:	e00f      	b.n	800349e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800347e:	4a0a      	ldr	r2, [pc, #40]	@ (80034a8 <SysTick_Config+0x40>)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3b01      	subs	r3, #1
 8003484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003486:	210f      	movs	r1, #15
 8003488:	f04f 30ff 	mov.w	r0, #4294967295
 800348c:	f7ff ff8e 	bl	80033ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003490:	4b05      	ldr	r3, [pc, #20]	@ (80034a8 <SysTick_Config+0x40>)
 8003492:	2200      	movs	r2, #0
 8003494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003496:	4b04      	ldr	r3, [pc, #16]	@ (80034a8 <SysTick_Config+0x40>)
 8003498:	2207      	movs	r2, #7
 800349a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	e000e010 	.word	0xe000e010

080034ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff ff29 	bl	800330c <__NVIC_SetPriorityGrouping>
}
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b086      	sub	sp, #24
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	4603      	mov	r3, r0
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
 80034ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034d0:	f7ff ff40 	bl	8003354 <__NVIC_GetPriorityGrouping>
 80034d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	6978      	ldr	r0, [r7, #20]
 80034dc:	f7ff ff90 	bl	8003400 <NVIC_EncodePriority>
 80034e0:	4602      	mov	r2, r0
 80034e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034e6:	4611      	mov	r1, r2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff ff5f 	bl	80033ac <__NVIC_SetPriority>
}
 80034ee:	bf00      	nop
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	4603      	mov	r3, r0
 80034fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff ff33 	bl	8003370 <__NVIC_EnableIRQ>
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff ffa4 	bl	8003468 <SysTick_Config>
 8003520:	4603      	mov	r3, r0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e08d      	b.n	800365a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	4b47      	ldr	r3, [pc, #284]	@ (8003664 <HAL_DMA_Init+0x138>)
 8003546:	429a      	cmp	r2, r3
 8003548:	d80f      	bhi.n	800356a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	4b45      	ldr	r3, [pc, #276]	@ (8003668 <HAL_DMA_Init+0x13c>)
 8003552:	4413      	add	r3, r2
 8003554:	4a45      	ldr	r2, [pc, #276]	@ (800366c <HAL_DMA_Init+0x140>)
 8003556:	fba2 2303 	umull	r2, r3, r2, r3
 800355a:	091b      	lsrs	r3, r3, #4
 800355c:	009a      	lsls	r2, r3, #2
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a42      	ldr	r2, [pc, #264]	@ (8003670 <HAL_DMA_Init+0x144>)
 8003566:	641a      	str	r2, [r3, #64]	@ 0x40
 8003568:	e00e      	b.n	8003588 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	461a      	mov	r2, r3
 8003570:	4b40      	ldr	r3, [pc, #256]	@ (8003674 <HAL_DMA_Init+0x148>)
 8003572:	4413      	add	r3, r2
 8003574:	4a3d      	ldr	r2, [pc, #244]	@ (800366c <HAL_DMA_Init+0x140>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	091b      	lsrs	r3, r3, #4
 800357c:	009a      	lsls	r2, r3, #2
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a3c      	ldr	r2, [pc, #240]	@ (8003678 <HAL_DMA_Init+0x14c>)
 8003586:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800359e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80035ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f9b6 	bl	800394c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035e8:	d102      	bne.n	80035f0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003604:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d010      	beq.n	8003630 <HAL_DMA_Init+0x104>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b04      	cmp	r3, #4
 8003614:	d80c      	bhi.n	8003630 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f9d6 	bl	80039c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	e008      	b.n	8003642 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40020407 	.word	0x40020407
 8003668:	bffdfff8 	.word	0xbffdfff8
 800366c:	cccccccd 	.word	0xcccccccd
 8003670:	40020000 	.word	0x40020000
 8003674:	bffdfbf8 	.word	0xbffdfbf8
 8003678:	40020400 	.word	0x40020400

0800367c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_DMA_Start_IT+0x20>
 8003698:	2302      	movs	r3, #2
 800369a:	e066      	b.n	800376a <HAL_DMA_Start_IT+0xee>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d155      	bne.n	800375c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2202      	movs	r2, #2
 80036b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0201 	bic.w	r2, r2, #1
 80036cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 f8fb 	bl	80038d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d008      	beq.n	80036f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 020e 	orr.w	r2, r2, #14
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	e00f      	b.n	8003714 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0204 	bic.w	r2, r2, #4
 8003702:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 020a 	orr.w	r2, r2, #10
 8003712:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d007      	beq.n	8003732 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800372c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003730:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003736:	2b00      	cmp	r3, #0
 8003738:	d007      	beq.n	800374a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003744:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003748:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0201 	orr.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	e005      	b.n	8003768 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003764:	2302      	movs	r3, #2
 8003766:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003768:	7dfb      	ldrb	r3, [r7, #23]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b084      	sub	sp, #16
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378e:	f003 031f 	and.w	r3, r3, #31
 8003792:	2204      	movs	r2, #4
 8003794:	409a      	lsls	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4013      	ands	r3, r2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d026      	beq.n	80037ec <HAL_DMA_IRQHandler+0x7a>
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d021      	beq.n	80037ec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0320 	and.w	r3, r3, #32
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d107      	bne.n	80037c6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0204 	bic.w	r2, r2, #4
 80037c4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ca:	f003 021f 	and.w	r2, r3, #31
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d2:	2104      	movs	r1, #4
 80037d4:	fa01 f202 	lsl.w	r2, r1, r2
 80037d8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d071      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80037ea:	e06c      	b.n	80038c6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f0:	f003 031f 	and.w	r3, r3, #31
 80037f4:	2202      	movs	r2, #2
 80037f6:	409a      	lsls	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4013      	ands	r3, r2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d02e      	beq.n	800385e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d029      	beq.n	800385e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0320 	and.w	r3, r3, #32
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10b      	bne.n	8003830 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 020a 	bic.w	r2, r2, #10
 8003826:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003834:	f003 021f 	and.w	r2, r3, #31
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383c:	2102      	movs	r1, #2
 800383e:	fa01 f202 	lsl.w	r2, r1, r2
 8003842:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003850:	2b00      	cmp	r3, #0
 8003852:	d038      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800385c:	e033      	b.n	80038c6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	2208      	movs	r2, #8
 8003868:	409a      	lsls	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4013      	ands	r3, r2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d02a      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	2b00      	cmp	r3, #0
 800387a:	d025      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 020e 	bic.w	r2, r2, #14
 800388a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003890:	f003 021f 	and.w	r2, r3, #31
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003898:	2101      	movs	r1, #1
 800389a:	fa01 f202 	lsl.w	r2, r1, r2
 800389e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d004      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038c6:	bf00      	nop
 80038c8:	bf00      	nop
}
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80038e6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d004      	beq.n	80038fa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80038f8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fe:	f003 021f 	and.w	r2, r3, #31
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003906:	2101      	movs	r1, #1
 8003908:	fa01 f202 	lsl.w	r2, r1, r2
 800390c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b10      	cmp	r3, #16
 800391c:	d108      	bne.n	8003930 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800392e:	e007      	b.n	8003940 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	60da      	str	r2, [r3, #12]
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	461a      	mov	r2, r3
 800395a:	4b16      	ldr	r3, [pc, #88]	@ (80039b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800395c:	429a      	cmp	r2, r3
 800395e:	d802      	bhi.n	8003966 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003960:	4b15      	ldr	r3, [pc, #84]	@ (80039b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	e001      	b.n	800396a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003966:	4b15      	ldr	r3, [pc, #84]	@ (80039bc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003968:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	3b08      	subs	r3, #8
 8003976:	4a12      	ldr	r2, [pc, #72]	@ (80039c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003978:	fba2 2303 	umull	r2, r3, r2, r3
 800397c:	091b      	lsrs	r3, r3, #4
 800397e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003984:	089b      	lsrs	r3, r3, #2
 8003986:	009a      	lsls	r2, r3, #2
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4413      	add	r3, r2
 800398c:	461a      	mov	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a0b      	ldr	r2, [pc, #44]	@ (80039c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003996:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f003 031f 	and.w	r3, r3, #31
 800399e:	2201      	movs	r2, #1
 80039a0:	409a      	lsls	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80039a6:	bf00      	nop
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40020407 	.word	0x40020407
 80039b8:	40020800 	.word	0x40020800
 80039bc:	40020820 	.word	0x40020820
 80039c0:	cccccccd 	.word	0xcccccccd
 80039c4:	40020880 	.word	0x40020880

080039c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	4b0b      	ldr	r3, [pc, #44]	@ (8003a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	461a      	mov	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a08      	ldr	r2, [pc, #32]	@ (8003a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80039ea:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	f003 031f 	and.w	r3, r3, #31
 80039f4:	2201      	movs	r2, #1
 80039f6:	409a      	lsls	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80039fc:	bf00      	nop
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	1000823f 	.word	0x1000823f
 8003a0c:	40020940 	.word	0x40020940

08003a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b087      	sub	sp, #28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a1e:	e15a      	b.n	8003cd6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	2101      	movs	r1, #1
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 814c 	beq.w	8003cd0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f003 0303 	and.w	r3, r3, #3
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d005      	beq.n	8003a50 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d130      	bne.n	8003ab2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	2203      	movs	r2, #3
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43db      	mvns	r3, r3
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4013      	ands	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a86:	2201      	movs	r2, #1
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4013      	ands	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	091b      	lsrs	r3, r3, #4
 8003a9c:	f003 0201 	and.w	r2, r3, #1
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	d017      	beq.n	8003aee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	2203      	movs	r2, #3
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d123      	bne.n	8003b42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	08da      	lsrs	r2, r3, #3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3208      	adds	r2, #8
 8003b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	220f      	movs	r2, #15
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	43db      	mvns	r3, r3
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	691a      	ldr	r2, [r3, #16]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	08da      	lsrs	r2, r3, #3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3208      	adds	r2, #8
 8003b3c:	6939      	ldr	r1, [r7, #16]
 8003b3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	2203      	movs	r2, #3
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	43db      	mvns	r3, r3
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4013      	ands	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f003 0203 	and.w	r2, r3, #3
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 80a6 	beq.w	8003cd0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b84:	4b5b      	ldr	r3, [pc, #364]	@ (8003cf4 <HAL_GPIO_Init+0x2e4>)
 8003b86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b88:	4a5a      	ldr	r2, [pc, #360]	@ (8003cf4 <HAL_GPIO_Init+0x2e4>)
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b90:	4b58      	ldr	r3, [pc, #352]	@ (8003cf4 <HAL_GPIO_Init+0x2e4>)
 8003b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b9c:	4a56      	ldr	r2, [pc, #344]	@ (8003cf8 <HAL_GPIO_Init+0x2e8>)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	089b      	lsrs	r3, r3, #2
 8003ba2:	3302      	adds	r3, #2
 8003ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	220f      	movs	r2, #15
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003bc6:	d01f      	beq.n	8003c08 <HAL_GPIO_Init+0x1f8>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a4c      	ldr	r2, [pc, #304]	@ (8003cfc <HAL_GPIO_Init+0x2ec>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d019      	beq.n	8003c04 <HAL_GPIO_Init+0x1f4>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a4b      	ldr	r2, [pc, #300]	@ (8003d00 <HAL_GPIO_Init+0x2f0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d013      	beq.n	8003c00 <HAL_GPIO_Init+0x1f0>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a4a      	ldr	r2, [pc, #296]	@ (8003d04 <HAL_GPIO_Init+0x2f4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00d      	beq.n	8003bfc <HAL_GPIO_Init+0x1ec>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a49      	ldr	r2, [pc, #292]	@ (8003d08 <HAL_GPIO_Init+0x2f8>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d007      	beq.n	8003bf8 <HAL_GPIO_Init+0x1e8>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a48      	ldr	r2, [pc, #288]	@ (8003d0c <HAL_GPIO_Init+0x2fc>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d101      	bne.n	8003bf4 <HAL_GPIO_Init+0x1e4>
 8003bf0:	2305      	movs	r3, #5
 8003bf2:	e00a      	b.n	8003c0a <HAL_GPIO_Init+0x1fa>
 8003bf4:	2306      	movs	r3, #6
 8003bf6:	e008      	b.n	8003c0a <HAL_GPIO_Init+0x1fa>
 8003bf8:	2304      	movs	r3, #4
 8003bfa:	e006      	b.n	8003c0a <HAL_GPIO_Init+0x1fa>
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e004      	b.n	8003c0a <HAL_GPIO_Init+0x1fa>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e002      	b.n	8003c0a <HAL_GPIO_Init+0x1fa>
 8003c04:	2301      	movs	r3, #1
 8003c06:	e000      	b.n	8003c0a <HAL_GPIO_Init+0x1fa>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	f002 0203 	and.w	r2, r2, #3
 8003c10:	0092      	lsls	r2, r2, #2
 8003c12:	4093      	lsls	r3, r2
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c1a:	4937      	ldr	r1, [pc, #220]	@ (8003cf8 <HAL_GPIO_Init+0x2e8>)
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	089b      	lsrs	r3, r3, #2
 8003c20:	3302      	adds	r3, #2
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c28:	4b39      	ldr	r3, [pc, #228]	@ (8003d10 <HAL_GPIO_Init+0x300>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	43db      	mvns	r3, r3
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4013      	ands	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c4c:	4a30      	ldr	r2, [pc, #192]	@ (8003d10 <HAL_GPIO_Init+0x300>)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c52:	4b2f      	ldr	r3, [pc, #188]	@ (8003d10 <HAL_GPIO_Init+0x300>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c76:	4a26      	ldr	r2, [pc, #152]	@ (8003d10 <HAL_GPIO_Init+0x300>)
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003c7c:	4b24      	ldr	r3, [pc, #144]	@ (8003d10 <HAL_GPIO_Init+0x300>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	43db      	mvns	r3, r3
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ca0:	4a1b      	ldr	r2, [pc, #108]	@ (8003d10 <HAL_GPIO_Init+0x300>)
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d10 <HAL_GPIO_Init+0x300>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cca:	4a11      	ldr	r2, [pc, #68]	@ (8003d10 <HAL_GPIO_Init+0x300>)
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f47f ae9d 	bne.w	8003a20 <HAL_GPIO_Init+0x10>
  }
}
 8003ce6:	bf00      	nop
 8003ce8:	bf00      	nop
 8003cea:	371c      	adds	r7, #28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	40010000 	.word	0x40010000
 8003cfc:	48000400 	.word	0x48000400
 8003d00:	48000800 	.word	0x48000800
 8003d04:	48000c00 	.word	0x48000c00
 8003d08:	48001000 	.word	0x48001000
 8003d0c:	48001400 	.word	0x48001400
 8003d10:	40010400 	.word	0x40010400

08003d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	807b      	strh	r3, [r7, #2]
 8003d20:	4613      	mov	r3, r2
 8003d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d24:	787b      	ldrb	r3, [r7, #1]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d2a:	887a      	ldrh	r2, [r7, #2]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d30:	e002      	b.n	8003d38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d32:	887a      	ldrh	r2, [r7, #2]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d4e:	4b08      	ldr	r3, [pc, #32]	@ (8003d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d50:	695a      	ldr	r2, [r3, #20]
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	4013      	ands	r3, r2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d006      	beq.n	8003d68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d5a:	4a05      	ldr	r2, [pc, #20]	@ (8003d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d5c:	88fb      	ldrh	r3, [r7, #6]
 8003d5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d60:	88fb      	ldrh	r3, [r7, #6]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 f806 	bl	8003d74 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d68:	bf00      	nop
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40010400 	.word	0x40010400

08003d74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
	...

08003d8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d141      	bne.n	8003e1e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d9a:	4b4b      	ldr	r3, [pc, #300]	@ (8003ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003da2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003da6:	d131      	bne.n	8003e0c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003da8:	4b47      	ldr	r3, [pc, #284]	@ (8003ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dae:	4a46      	ldr	r2, [pc, #280]	@ (8003ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003db4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003db8:	4b43      	ldr	r3, [pc, #268]	@ (8003ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003dc0:	4a41      	ldr	r2, [pc, #260]	@ (8003ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003dc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dc8:	4b40      	ldr	r3, [pc, #256]	@ (8003ecc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2232      	movs	r2, #50	@ 0x32
 8003dce:	fb02 f303 	mul.w	r3, r2, r3
 8003dd2:	4a3f      	ldr	r2, [pc, #252]	@ (8003ed0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd8:	0c9b      	lsrs	r3, r3, #18
 8003dda:	3301      	adds	r3, #1
 8003ddc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dde:	e002      	b.n	8003de6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003de6:	4b38      	ldr	r3, [pc, #224]	@ (8003ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003df2:	d102      	bne.n	8003dfa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f2      	bne.n	8003de0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dfa:	4b33      	ldr	r3, [pc, #204]	@ (8003ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e06:	d158      	bne.n	8003eba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e057      	b.n	8003ebc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e0c:	4b2e      	ldr	r3, [pc, #184]	@ (8003ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e12:	4a2d      	ldr	r2, [pc, #180]	@ (8003ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003e1c:	e04d      	b.n	8003eba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e24:	d141      	bne.n	8003eaa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e26:	4b28      	ldr	r3, [pc, #160]	@ (8003ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e32:	d131      	bne.n	8003e98 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e34:	4b24      	ldr	r3, [pc, #144]	@ (8003ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e3a:	4a23      	ldr	r2, [pc, #140]	@ (8003ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e44:	4b20      	ldr	r3, [pc, #128]	@ (8003ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e4c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e54:	4b1d      	ldr	r3, [pc, #116]	@ (8003ecc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2232      	movs	r2, #50	@ 0x32
 8003e5a:	fb02 f303 	mul.w	r3, r2, r3
 8003e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ed0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e60:	fba2 2303 	umull	r2, r3, r2, r3
 8003e64:	0c9b      	lsrs	r3, r3, #18
 8003e66:	3301      	adds	r3, #1
 8003e68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e6a:	e002      	b.n	8003e72 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e72:	4b15      	ldr	r3, [pc, #84]	@ (8003ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e7e:	d102      	bne.n	8003e86 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f2      	bne.n	8003e6c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e86:	4b10      	ldr	r3, [pc, #64]	@ (8003ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e92:	d112      	bne.n	8003eba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e011      	b.n	8003ebc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e98:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ea4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003ea8:	e007      	b.n	8003eba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003eaa:	4b07      	ldr	r3, [pc, #28]	@ (8003ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003eb2:	4a05      	ldr	r2, [pc, #20]	@ (8003ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003eb8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	40007000 	.word	0x40007000
 8003ecc:	20000000 	.word	0x20000000
 8003ed0:	431bde83 	.word	0x431bde83

08003ed4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003ed8:	4b05      	ldr	r3, [pc, #20]	@ (8003ef0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	4a04      	ldr	r2, [pc, #16]	@ (8003ef0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003ede:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ee2:	6093      	str	r3, [r2, #8]
}
 8003ee4:	bf00      	nop
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40007000 	.word	0x40007000

08003ef4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e2fe      	b.n	8004504 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d075      	beq.n	8003ffe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f12:	4b97      	ldr	r3, [pc, #604]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 030c 	and.w	r3, r3, #12
 8003f1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f1c:	4b94      	ldr	r3, [pc, #592]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f003 0303 	and.w	r3, r3, #3
 8003f24:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2b0c      	cmp	r3, #12
 8003f2a:	d102      	bne.n	8003f32 <HAL_RCC_OscConfig+0x3e>
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d002      	beq.n	8003f38 <HAL_RCC_OscConfig+0x44>
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d10b      	bne.n	8003f50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f38:	4b8d      	ldr	r3, [pc, #564]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d05b      	beq.n	8003ffc <HAL_RCC_OscConfig+0x108>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d157      	bne.n	8003ffc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e2d9      	b.n	8004504 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f58:	d106      	bne.n	8003f68 <HAL_RCC_OscConfig+0x74>
 8003f5a:	4b85      	ldr	r3, [pc, #532]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a84      	ldr	r2, [pc, #528]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 8003f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	e01d      	b.n	8003fa4 <HAL_RCC_OscConfig+0xb0>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f70:	d10c      	bne.n	8003f8c <HAL_RCC_OscConfig+0x98>
 8003f72:	4b7f      	ldr	r3, [pc, #508]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a7e      	ldr	r2, [pc, #504]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 8003f78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	4b7c      	ldr	r3, [pc, #496]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a7b      	ldr	r2, [pc, #492]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 8003f84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	e00b      	b.n	8003fa4 <HAL_RCC_OscConfig+0xb0>
 8003f8c:	4b78      	ldr	r3, [pc, #480]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a77      	ldr	r2, [pc, #476]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 8003f92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	4b75      	ldr	r3, [pc, #468]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a74      	ldr	r2, [pc, #464]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 8003f9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d013      	beq.n	8003fd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fac:	f7fd fb80 	bl	80016b0 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb4:	f7fd fb7c 	bl	80016b0 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b64      	cmp	r3, #100	@ 0x64
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e29e      	b.n	8004504 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fc6:	4b6a      	ldr	r3, [pc, #424]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0f0      	beq.n	8003fb4 <HAL_RCC_OscConfig+0xc0>
 8003fd2:	e014      	b.n	8003ffe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd4:	f7fd fb6c 	bl	80016b0 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fdc:	f7fd fb68 	bl	80016b0 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b64      	cmp	r3, #100	@ 0x64
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e28a      	b.n	8004504 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fee:	4b60      	ldr	r3, [pc, #384]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0xe8>
 8003ffa:	e000      	b.n	8003ffe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d075      	beq.n	80040f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800400a:	4b59      	ldr	r3, [pc, #356]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 030c 	and.w	r3, r3, #12
 8004012:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004014:	4b56      	ldr	r3, [pc, #344]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	2b0c      	cmp	r3, #12
 8004022:	d102      	bne.n	800402a <HAL_RCC_OscConfig+0x136>
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	2b02      	cmp	r3, #2
 8004028:	d002      	beq.n	8004030 <HAL_RCC_OscConfig+0x13c>
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	2b04      	cmp	r3, #4
 800402e:	d11f      	bne.n	8004070 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004030:	4b4f      	ldr	r3, [pc, #316]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_RCC_OscConfig+0x154>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e25d      	b.n	8004504 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004048:	4b49      	ldr	r3, [pc, #292]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	061b      	lsls	r3, r3, #24
 8004056:	4946      	ldr	r1, [pc, #280]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 8004058:	4313      	orrs	r3, r2
 800405a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800405c:	4b45      	ldr	r3, [pc, #276]	@ (8004174 <HAL_RCC_OscConfig+0x280>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f7fd fad9 	bl	8001618 <HAL_InitTick>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d043      	beq.n	80040f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e249      	b.n	8004504 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d023      	beq.n	80040c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004078:	4b3d      	ldr	r3, [pc, #244]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a3c      	ldr	r2, [pc, #240]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 800407e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004084:	f7fd fb14 	bl	80016b0 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800408c:	f7fd fb10 	bl	80016b0 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e232      	b.n	8004504 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800409e:	4b34      	ldr	r3, [pc, #208]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040aa:	4b31      	ldr	r3, [pc, #196]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	061b      	lsls	r3, r3, #24
 80040b8:	492d      	ldr	r1, [pc, #180]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	604b      	str	r3, [r1, #4]
 80040be:	e01a      	b.n	80040f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a2a      	ldr	r2, [pc, #168]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 80040c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040cc:	f7fd faf0 	bl	80016b0 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040d4:	f7fd faec 	bl	80016b0 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e20e      	b.n	8004504 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040e6:	4b22      	ldr	r3, [pc, #136]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <HAL_RCC_OscConfig+0x1e0>
 80040f2:	e000      	b.n	80040f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0308 	and.w	r3, r3, #8
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d041      	beq.n	8004186 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d01c      	beq.n	8004144 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800410a:	4b19      	ldr	r3, [pc, #100]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 800410c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004110:	4a17      	ldr	r2, [pc, #92]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 8004112:	f043 0301 	orr.w	r3, r3, #1
 8004116:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800411a:	f7fd fac9 	bl	80016b0 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004120:	e008      	b.n	8004134 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004122:	f7fd fac5 	bl	80016b0 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e1e7      	b.n	8004504 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004134:	4b0e      	ldr	r3, [pc, #56]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 8004136:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0ef      	beq.n	8004122 <HAL_RCC_OscConfig+0x22e>
 8004142:	e020      	b.n	8004186 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004144:	4b0a      	ldr	r3, [pc, #40]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 8004146:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800414a:	4a09      	ldr	r2, [pc, #36]	@ (8004170 <HAL_RCC_OscConfig+0x27c>)
 800414c:	f023 0301 	bic.w	r3, r3, #1
 8004150:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004154:	f7fd faac 	bl	80016b0 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800415a:	e00d      	b.n	8004178 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800415c:	f7fd faa8 	bl	80016b0 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d906      	bls.n	8004178 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e1ca      	b.n	8004504 <HAL_RCC_OscConfig+0x610>
 800416e:	bf00      	nop
 8004170:	40021000 	.word	0x40021000
 8004174:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004178:	4b8c      	ldr	r3, [pc, #560]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 800417a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1ea      	bne.n	800415c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 80a6 	beq.w	80042e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004194:	2300      	movs	r3, #0
 8004196:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004198:	4b84      	ldr	r3, [pc, #528]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 800419a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800419c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_RCC_OscConfig+0x2b4>
 80041a4:	2301      	movs	r3, #1
 80041a6:	e000      	b.n	80041aa <HAL_RCC_OscConfig+0x2b6>
 80041a8:	2300      	movs	r3, #0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00d      	beq.n	80041ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ae:	4b7f      	ldr	r3, [pc, #508]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 80041b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b2:	4a7e      	ldr	r2, [pc, #504]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 80041b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80041ba:	4b7c      	ldr	r3, [pc, #496]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 80041bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80041c6:	2301      	movs	r3, #1
 80041c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ca:	4b79      	ldr	r3, [pc, #484]	@ (80043b0 <HAL_RCC_OscConfig+0x4bc>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d118      	bne.n	8004208 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041d6:	4b76      	ldr	r3, [pc, #472]	@ (80043b0 <HAL_RCC_OscConfig+0x4bc>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a75      	ldr	r2, [pc, #468]	@ (80043b0 <HAL_RCC_OscConfig+0x4bc>)
 80041dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041e2:	f7fd fa65 	bl	80016b0 <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041e8:	e008      	b.n	80041fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ea:	f7fd fa61 	bl	80016b0 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e183      	b.n	8004504 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041fc:	4b6c      	ldr	r3, [pc, #432]	@ (80043b0 <HAL_RCC_OscConfig+0x4bc>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0f0      	beq.n	80041ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d108      	bne.n	8004222 <HAL_RCC_OscConfig+0x32e>
 8004210:	4b66      	ldr	r3, [pc, #408]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 8004212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004216:	4a65      	ldr	r2, [pc, #404]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004220:	e024      	b.n	800426c <HAL_RCC_OscConfig+0x378>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	2b05      	cmp	r3, #5
 8004228:	d110      	bne.n	800424c <HAL_RCC_OscConfig+0x358>
 800422a:	4b60      	ldr	r3, [pc, #384]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 800422c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004230:	4a5e      	ldr	r2, [pc, #376]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 8004232:	f043 0304 	orr.w	r3, r3, #4
 8004236:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800423a:	4b5c      	ldr	r3, [pc, #368]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 800423c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004240:	4a5a      	ldr	r2, [pc, #360]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 8004242:	f043 0301 	orr.w	r3, r3, #1
 8004246:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800424a:	e00f      	b.n	800426c <HAL_RCC_OscConfig+0x378>
 800424c:	4b57      	ldr	r3, [pc, #348]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004252:	4a56      	ldr	r2, [pc, #344]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 8004254:	f023 0301 	bic.w	r3, r3, #1
 8004258:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800425c:	4b53      	ldr	r3, [pc, #332]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 800425e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004262:	4a52      	ldr	r2, [pc, #328]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 8004264:	f023 0304 	bic.w	r3, r3, #4
 8004268:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d016      	beq.n	80042a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004274:	f7fd fa1c 	bl	80016b0 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800427a:	e00a      	b.n	8004292 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800427c:	f7fd fa18 	bl	80016b0 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800428a:	4293      	cmp	r3, r2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e138      	b.n	8004504 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004292:	4b46      	ldr	r3, [pc, #280]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 8004294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0ed      	beq.n	800427c <HAL_RCC_OscConfig+0x388>
 80042a0:	e015      	b.n	80042ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a2:	f7fd fa05 	bl	80016b0 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042a8:	e00a      	b.n	80042c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042aa:	f7fd fa01 	bl	80016b0 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e121      	b.n	8004504 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042c0:	4b3a      	ldr	r3, [pc, #232]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 80042c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1ed      	bne.n	80042aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042ce:	7ffb      	ldrb	r3, [r7, #31]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d105      	bne.n	80042e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d4:	4b35      	ldr	r3, [pc, #212]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 80042d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042d8:	4a34      	ldr	r2, [pc, #208]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 80042da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042de:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0320 	and.w	r3, r3, #32
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d03c      	beq.n	8004366 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d01c      	beq.n	800432e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042f4:	4b2d      	ldr	r3, [pc, #180]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 80042f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042fa:	4a2c      	ldr	r2, [pc, #176]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 80042fc:	f043 0301 	orr.w	r3, r3, #1
 8004300:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004304:	f7fd f9d4 	bl	80016b0 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800430c:	f7fd f9d0 	bl	80016b0 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e0f2      	b.n	8004504 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800431e:	4b23      	ldr	r3, [pc, #140]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 8004320:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0ef      	beq.n	800430c <HAL_RCC_OscConfig+0x418>
 800432c:	e01b      	b.n	8004366 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800432e:	4b1f      	ldr	r3, [pc, #124]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 8004330:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004334:	4a1d      	ldr	r2, [pc, #116]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 8004336:	f023 0301 	bic.w	r3, r3, #1
 800433a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433e:	f7fd f9b7 	bl	80016b0 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004346:	f7fd f9b3 	bl	80016b0 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e0d5      	b.n	8004504 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004358:	4b14      	ldr	r3, [pc, #80]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 800435a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1ef      	bne.n	8004346 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 80c9 	beq.w	8004502 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004370:	4b0e      	ldr	r3, [pc, #56]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 030c 	and.w	r3, r3, #12
 8004378:	2b0c      	cmp	r3, #12
 800437a:	f000 8083 	beq.w	8004484 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d15e      	bne.n	8004444 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004386:	4b09      	ldr	r3, [pc, #36]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a08      	ldr	r2, [pc, #32]	@ (80043ac <HAL_RCC_OscConfig+0x4b8>)
 800438c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004392:	f7fd f98d 	bl	80016b0 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004398:	e00c      	b.n	80043b4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800439a:	f7fd f989 	bl	80016b0 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d905      	bls.n	80043b4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e0ab      	b.n	8004504 <HAL_RCC_OscConfig+0x610>
 80043ac:	40021000 	.word	0x40021000
 80043b0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043b4:	4b55      	ldr	r3, [pc, #340]	@ (800450c <HAL_RCC_OscConfig+0x618>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1ec      	bne.n	800439a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043c0:	4b52      	ldr	r3, [pc, #328]	@ (800450c <HAL_RCC_OscConfig+0x618>)
 80043c2:	68da      	ldr	r2, [r3, #12]
 80043c4:	4b52      	ldr	r3, [pc, #328]	@ (8004510 <HAL_RCC_OscConfig+0x61c>)
 80043c6:	4013      	ands	r3, r2
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6a11      	ldr	r1, [r2, #32]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80043d0:	3a01      	subs	r2, #1
 80043d2:	0112      	lsls	r2, r2, #4
 80043d4:	4311      	orrs	r1, r2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80043da:	0212      	lsls	r2, r2, #8
 80043dc:	4311      	orrs	r1, r2
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80043e2:	0852      	lsrs	r2, r2, #1
 80043e4:	3a01      	subs	r2, #1
 80043e6:	0552      	lsls	r2, r2, #21
 80043e8:	4311      	orrs	r1, r2
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80043ee:	0852      	lsrs	r2, r2, #1
 80043f0:	3a01      	subs	r2, #1
 80043f2:	0652      	lsls	r2, r2, #25
 80043f4:	4311      	orrs	r1, r2
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80043fa:	06d2      	lsls	r2, r2, #27
 80043fc:	430a      	orrs	r2, r1
 80043fe:	4943      	ldr	r1, [pc, #268]	@ (800450c <HAL_RCC_OscConfig+0x618>)
 8004400:	4313      	orrs	r3, r2
 8004402:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004404:	4b41      	ldr	r3, [pc, #260]	@ (800450c <HAL_RCC_OscConfig+0x618>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a40      	ldr	r2, [pc, #256]	@ (800450c <HAL_RCC_OscConfig+0x618>)
 800440a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800440e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004410:	4b3e      	ldr	r3, [pc, #248]	@ (800450c <HAL_RCC_OscConfig+0x618>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	4a3d      	ldr	r2, [pc, #244]	@ (800450c <HAL_RCC_OscConfig+0x618>)
 8004416:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800441a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441c:	f7fd f948 	bl	80016b0 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004424:	f7fd f944 	bl	80016b0 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e066      	b.n	8004504 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004436:	4b35      	ldr	r3, [pc, #212]	@ (800450c <HAL_RCC_OscConfig+0x618>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0f0      	beq.n	8004424 <HAL_RCC_OscConfig+0x530>
 8004442:	e05e      	b.n	8004502 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004444:	4b31      	ldr	r3, [pc, #196]	@ (800450c <HAL_RCC_OscConfig+0x618>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a30      	ldr	r2, [pc, #192]	@ (800450c <HAL_RCC_OscConfig+0x618>)
 800444a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800444e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004450:	f7fd f92e 	bl	80016b0 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004458:	f7fd f92a 	bl	80016b0 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e04c      	b.n	8004504 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800446a:	4b28      	ldr	r3, [pc, #160]	@ (800450c <HAL_RCC_OscConfig+0x618>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004476:	4b25      	ldr	r3, [pc, #148]	@ (800450c <HAL_RCC_OscConfig+0x618>)
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	4924      	ldr	r1, [pc, #144]	@ (800450c <HAL_RCC_OscConfig+0x618>)
 800447c:	4b25      	ldr	r3, [pc, #148]	@ (8004514 <HAL_RCC_OscConfig+0x620>)
 800447e:	4013      	ands	r3, r2
 8004480:	60cb      	str	r3, [r1, #12]
 8004482:	e03e      	b.n	8004502 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e039      	b.n	8004504 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004490:	4b1e      	ldr	r3, [pc, #120]	@ (800450c <HAL_RCC_OscConfig+0x618>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f003 0203 	and.w	r2, r3, #3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d12c      	bne.n	80044fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ae:	3b01      	subs	r3, #1
 80044b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d123      	bne.n	80044fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d11b      	bne.n	80044fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d113      	bne.n	80044fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e0:	085b      	lsrs	r3, r3, #1
 80044e2:	3b01      	subs	r3, #1
 80044e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d109      	bne.n	80044fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044f4:	085b      	lsrs	r3, r3, #1
 80044f6:	3b01      	subs	r3, #1
 80044f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d001      	beq.n	8004502 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e000      	b.n	8004504 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3720      	adds	r7, #32
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	40021000 	.word	0x40021000
 8004510:	019f800c 	.word	0x019f800c
 8004514:	feeefffc 	.word	0xfeeefffc

08004518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004522:	2300      	movs	r3, #0
 8004524:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e11e      	b.n	800476e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004530:	4b91      	ldr	r3, [pc, #580]	@ (8004778 <HAL_RCC_ClockConfig+0x260>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 030f 	and.w	r3, r3, #15
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d910      	bls.n	8004560 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453e:	4b8e      	ldr	r3, [pc, #568]	@ (8004778 <HAL_RCC_ClockConfig+0x260>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f023 020f 	bic.w	r2, r3, #15
 8004546:	498c      	ldr	r1, [pc, #560]	@ (8004778 <HAL_RCC_ClockConfig+0x260>)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	4313      	orrs	r3, r2
 800454c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800454e:	4b8a      	ldr	r3, [pc, #552]	@ (8004778 <HAL_RCC_ClockConfig+0x260>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d001      	beq.n	8004560 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e106      	b.n	800476e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d073      	beq.n	8004654 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b03      	cmp	r3, #3
 8004572:	d129      	bne.n	80045c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004574:	4b81      	ldr	r3, [pc, #516]	@ (800477c <HAL_RCC_ClockConfig+0x264>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e0f4      	b.n	800476e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004584:	f000 f99e 	bl	80048c4 <RCC_GetSysClockFreqFromPLLSource>
 8004588:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	4a7c      	ldr	r2, [pc, #496]	@ (8004780 <HAL_RCC_ClockConfig+0x268>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d93f      	bls.n	8004612 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004592:	4b7a      	ldr	r3, [pc, #488]	@ (800477c <HAL_RCC_ClockConfig+0x264>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d009      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d033      	beq.n	8004612 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d12f      	bne.n	8004612 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045b2:	4b72      	ldr	r3, [pc, #456]	@ (800477c <HAL_RCC_ClockConfig+0x264>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045ba:	4a70      	ldr	r2, [pc, #448]	@ (800477c <HAL_RCC_ClockConfig+0x264>)
 80045bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80045c2:	2380      	movs	r3, #128	@ 0x80
 80045c4:	617b      	str	r3, [r7, #20]
 80045c6:	e024      	b.n	8004612 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d107      	bne.n	80045e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045d0:	4b6a      	ldr	r3, [pc, #424]	@ (800477c <HAL_RCC_ClockConfig+0x264>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d109      	bne.n	80045f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e0c6      	b.n	800476e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045e0:	4b66      	ldr	r3, [pc, #408]	@ (800477c <HAL_RCC_ClockConfig+0x264>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e0be      	b.n	800476e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80045f0:	f000 f8ce 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 80045f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	4a61      	ldr	r2, [pc, #388]	@ (8004780 <HAL_RCC_ClockConfig+0x268>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d909      	bls.n	8004612 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045fe:	4b5f      	ldr	r3, [pc, #380]	@ (800477c <HAL_RCC_ClockConfig+0x264>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004606:	4a5d      	ldr	r2, [pc, #372]	@ (800477c <HAL_RCC_ClockConfig+0x264>)
 8004608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800460c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800460e:	2380      	movs	r3, #128	@ 0x80
 8004610:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004612:	4b5a      	ldr	r3, [pc, #360]	@ (800477c <HAL_RCC_ClockConfig+0x264>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f023 0203 	bic.w	r2, r3, #3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	4957      	ldr	r1, [pc, #348]	@ (800477c <HAL_RCC_ClockConfig+0x264>)
 8004620:	4313      	orrs	r3, r2
 8004622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004624:	f7fd f844 	bl	80016b0 <HAL_GetTick>
 8004628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462a:	e00a      	b.n	8004642 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800462c:	f7fd f840 	bl	80016b0 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800463a:	4293      	cmp	r3, r2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e095      	b.n	800476e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004642:	4b4e      	ldr	r3, [pc, #312]	@ (800477c <HAL_RCC_ClockConfig+0x264>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 020c 	and.w	r2, r3, #12
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	429a      	cmp	r2, r3
 8004652:	d1eb      	bne.n	800462c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d023      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b00      	cmp	r3, #0
 800466a:	d005      	beq.n	8004678 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800466c:	4b43      	ldr	r3, [pc, #268]	@ (800477c <HAL_RCC_ClockConfig+0x264>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	4a42      	ldr	r2, [pc, #264]	@ (800477c <HAL_RCC_ClockConfig+0x264>)
 8004672:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004676:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b00      	cmp	r3, #0
 8004682:	d007      	beq.n	8004694 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004684:	4b3d      	ldr	r3, [pc, #244]	@ (800477c <HAL_RCC_ClockConfig+0x264>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800468c:	4a3b      	ldr	r2, [pc, #236]	@ (800477c <HAL_RCC_ClockConfig+0x264>)
 800468e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004692:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004694:	4b39      	ldr	r3, [pc, #228]	@ (800477c <HAL_RCC_ClockConfig+0x264>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	4936      	ldr	r1, [pc, #216]	@ (800477c <HAL_RCC_ClockConfig+0x264>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	608b      	str	r3, [r1, #8]
 80046a6:	e008      	b.n	80046ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	2b80      	cmp	r3, #128	@ 0x80
 80046ac:	d105      	bne.n	80046ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80046ae:	4b33      	ldr	r3, [pc, #204]	@ (800477c <HAL_RCC_ClockConfig+0x264>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	4a32      	ldr	r2, [pc, #200]	@ (800477c <HAL_RCC_ClockConfig+0x264>)
 80046b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046ba:	4b2f      	ldr	r3, [pc, #188]	@ (8004778 <HAL_RCC_ClockConfig+0x260>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d21d      	bcs.n	8004704 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004778 <HAL_RCC_ClockConfig+0x260>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f023 020f 	bic.w	r2, r3, #15
 80046d0:	4929      	ldr	r1, [pc, #164]	@ (8004778 <HAL_RCC_ClockConfig+0x260>)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80046d8:	f7fc ffea 	bl	80016b0 <HAL_GetTick>
 80046dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046de:	e00a      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046e0:	f7fc ffe6 	bl	80016b0 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e03b      	b.n	800476e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f6:	4b20      	ldr	r3, [pc, #128]	@ (8004778 <HAL_RCC_ClockConfig+0x260>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d1ed      	bne.n	80046e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004710:	4b1a      	ldr	r3, [pc, #104]	@ (800477c <HAL_RCC_ClockConfig+0x264>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4917      	ldr	r1, [pc, #92]	@ (800477c <HAL_RCC_ClockConfig+0x264>)
 800471e:	4313      	orrs	r3, r2
 8004720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800472e:	4b13      	ldr	r3, [pc, #76]	@ (800477c <HAL_RCC_ClockConfig+0x264>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	490f      	ldr	r1, [pc, #60]	@ (800477c <HAL_RCC_ClockConfig+0x264>)
 800473e:	4313      	orrs	r3, r2
 8004740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004742:	f000 f825 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 8004746:	4602      	mov	r2, r0
 8004748:	4b0c      	ldr	r3, [pc, #48]	@ (800477c <HAL_RCC_ClockConfig+0x264>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	490c      	ldr	r1, [pc, #48]	@ (8004784 <HAL_RCC_ClockConfig+0x26c>)
 8004754:	5ccb      	ldrb	r3, [r1, r3]
 8004756:	f003 031f 	and.w	r3, r3, #31
 800475a:	fa22 f303 	lsr.w	r3, r2, r3
 800475e:	4a0a      	ldr	r2, [pc, #40]	@ (8004788 <HAL_RCC_ClockConfig+0x270>)
 8004760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004762:	4b0a      	ldr	r3, [pc, #40]	@ (800478c <HAL_RCC_ClockConfig+0x274>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7fc ff56 	bl	8001618 <HAL_InitTick>
 800476c:	4603      	mov	r3, r0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40022000 	.word	0x40022000
 800477c:	40021000 	.word	0x40021000
 8004780:	04c4b400 	.word	0x04c4b400
 8004784:	080076d8 	.word	0x080076d8
 8004788:	20000000 	.word	0x20000000
 800478c:	20000004 	.word	0x20000004

08004790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004790:	b480      	push	{r7}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004796:	4b2c      	ldr	r3, [pc, #176]	@ (8004848 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 030c 	and.w	r3, r3, #12
 800479e:	2b04      	cmp	r3, #4
 80047a0:	d102      	bne.n	80047a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047a2:	4b2a      	ldr	r3, [pc, #168]	@ (800484c <HAL_RCC_GetSysClockFreq+0xbc>)
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	e047      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80047a8:	4b27      	ldr	r3, [pc, #156]	@ (8004848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 030c 	and.w	r3, r3, #12
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d102      	bne.n	80047ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047b4:	4b26      	ldr	r3, [pc, #152]	@ (8004850 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047b6:	613b      	str	r3, [r7, #16]
 80047b8:	e03e      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80047ba:	4b23      	ldr	r3, [pc, #140]	@ (8004848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	2b0c      	cmp	r3, #12
 80047c4:	d136      	bne.n	8004834 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047c6:	4b20      	ldr	r3, [pc, #128]	@ (8004848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	091b      	lsrs	r3, r3, #4
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	3301      	adds	r3, #1
 80047dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d10c      	bne.n	80047fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047e4:	4a1a      	ldr	r2, [pc, #104]	@ (8004850 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ec:	4a16      	ldr	r2, [pc, #88]	@ (8004848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047ee:	68d2      	ldr	r2, [r2, #12]
 80047f0:	0a12      	lsrs	r2, r2, #8
 80047f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80047f6:	fb02 f303 	mul.w	r3, r2, r3
 80047fa:	617b      	str	r3, [r7, #20]
      break;
 80047fc:	e00c      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047fe:	4a13      	ldr	r2, [pc, #76]	@ (800484c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	fbb2 f3f3 	udiv	r3, r2, r3
 8004806:	4a10      	ldr	r2, [pc, #64]	@ (8004848 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004808:	68d2      	ldr	r2, [r2, #12]
 800480a:	0a12      	lsrs	r2, r2, #8
 800480c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004810:	fb02 f303 	mul.w	r3, r2, r3
 8004814:	617b      	str	r3, [r7, #20]
      break;
 8004816:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004818:	4b0b      	ldr	r3, [pc, #44]	@ (8004848 <HAL_RCC_GetSysClockFreq+0xb8>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	0e5b      	lsrs	r3, r3, #25
 800481e:	f003 0303 	and.w	r3, r3, #3
 8004822:	3301      	adds	r3, #1
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	e001      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004838:	693b      	ldr	r3, [r7, #16]
}
 800483a:	4618      	mov	r0, r3
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40021000 	.word	0x40021000
 800484c:	00f42400 	.word	0x00f42400
 8004850:	016e3600 	.word	0x016e3600

08004854 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004858:	4b03      	ldr	r3, [pc, #12]	@ (8004868 <HAL_RCC_GetHCLKFreq+0x14>)
 800485a:	681b      	ldr	r3, [r3, #0]
}
 800485c:	4618      	mov	r0, r3
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	20000000 	.word	0x20000000

0800486c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004870:	f7ff fff0 	bl	8004854 <HAL_RCC_GetHCLKFreq>
 8004874:	4602      	mov	r2, r0
 8004876:	4b06      	ldr	r3, [pc, #24]	@ (8004890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	0a1b      	lsrs	r3, r3, #8
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	4904      	ldr	r1, [pc, #16]	@ (8004894 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004882:	5ccb      	ldrb	r3, [r1, r3]
 8004884:	f003 031f 	and.w	r3, r3, #31
 8004888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800488c:	4618      	mov	r0, r3
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40021000 	.word	0x40021000
 8004894:	080076e8 	.word	0x080076e8

08004898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800489c:	f7ff ffda 	bl	8004854 <HAL_RCC_GetHCLKFreq>
 80048a0:	4602      	mov	r2, r0
 80048a2:	4b06      	ldr	r3, [pc, #24]	@ (80048bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	0adb      	lsrs	r3, r3, #11
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	4904      	ldr	r1, [pc, #16]	@ (80048c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048ae:	5ccb      	ldrb	r3, [r1, r3]
 80048b0:	f003 031f 	and.w	r3, r3, #31
 80048b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40021000 	.word	0x40021000
 80048c0:	080076e8 	.word	0x080076e8

080048c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048ca:	4b1e      	ldr	r3, [pc, #120]	@ (8004944 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004944 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	091b      	lsrs	r3, r3, #4
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	3301      	adds	r3, #1
 80048e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d10c      	bne.n	8004902 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048e8:	4a17      	ldr	r2, [pc, #92]	@ (8004948 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f0:	4a14      	ldr	r2, [pc, #80]	@ (8004944 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048f2:	68d2      	ldr	r2, [r2, #12]
 80048f4:	0a12      	lsrs	r2, r2, #8
 80048f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80048fa:	fb02 f303 	mul.w	r3, r2, r3
 80048fe:	617b      	str	r3, [r7, #20]
    break;
 8004900:	e00c      	b.n	800491c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004902:	4a12      	ldr	r2, [pc, #72]	@ (800494c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	fbb2 f3f3 	udiv	r3, r2, r3
 800490a:	4a0e      	ldr	r2, [pc, #56]	@ (8004944 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800490c:	68d2      	ldr	r2, [r2, #12]
 800490e:	0a12      	lsrs	r2, r2, #8
 8004910:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004914:	fb02 f303 	mul.w	r3, r2, r3
 8004918:	617b      	str	r3, [r7, #20]
    break;
 800491a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800491c:	4b09      	ldr	r3, [pc, #36]	@ (8004944 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	0e5b      	lsrs	r3, r3, #25
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	3301      	adds	r3, #1
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	fbb2 f3f3 	udiv	r3, r2, r3
 8004934:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004936:	687b      	ldr	r3, [r7, #4]
}
 8004938:	4618      	mov	r0, r3
 800493a:	371c      	adds	r7, #28
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	40021000 	.word	0x40021000
 8004948:	016e3600 	.word	0x016e3600
 800494c:	00f42400 	.word	0x00f42400

08004950 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004958:	2300      	movs	r3, #0
 800495a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800495c:	2300      	movs	r3, #0
 800495e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 8098 	beq.w	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800496e:	2300      	movs	r3, #0
 8004970:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004972:	4b43      	ldr	r3, [pc, #268]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10d      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800497e:	4b40      	ldr	r3, [pc, #256]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004982:	4a3f      	ldr	r2, [pc, #252]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004988:	6593      	str	r3, [r2, #88]	@ 0x58
 800498a:	4b3d      	ldr	r3, [pc, #244]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800498c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800498e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004992:	60bb      	str	r3, [r7, #8]
 8004994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004996:	2301      	movs	r3, #1
 8004998:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800499a:	4b3a      	ldr	r3, [pc, #232]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a39      	ldr	r2, [pc, #228]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049a6:	f7fc fe83 	bl	80016b0 <HAL_GetTick>
 80049aa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049ac:	e009      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ae:	f7fc fe7f 	bl	80016b0 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d902      	bls.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	74fb      	strb	r3, [r7, #19]
        break;
 80049c0:	e005      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049c2:	4b30      	ldr	r3, [pc, #192]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0ef      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80049ce:	7cfb      	ldrb	r3, [r7, #19]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d159      	bne.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049d4:	4b2a      	ldr	r3, [pc, #168]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049de:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d01e      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d019      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049f0:	4b23      	ldr	r3, [pc, #140]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049fc:	4b20      	ldr	r3, [pc, #128]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a02:	4a1f      	ldr	r2, [pc, #124]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a0c:	4b1c      	ldr	r3, [pc, #112]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a12:	4a1b      	ldr	r2, [pc, #108]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a1c:	4a18      	ldr	r2, [pc, #96]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d016      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2e:	f7fc fe3f 	bl	80016b0 <HAL_GetTick>
 8004a32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a34:	e00b      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a36:	f7fc fe3b 	bl	80016b0 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d902      	bls.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	74fb      	strb	r3, [r7, #19]
            break;
 8004a4c:	e006      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0ec      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a5c:	7cfb      	ldrb	r3, [r7, #19]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10b      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a62:	4b07      	ldr	r3, [pc, #28]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a70:	4903      	ldr	r1, [pc, #12]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004a78:	e008      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a7a:	7cfb      	ldrb	r3, [r7, #19]
 8004a7c:	74bb      	strb	r3, [r7, #18]
 8004a7e:	e005      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a80:	40021000 	.word	0x40021000
 8004a84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a88:	7cfb      	ldrb	r3, [r7, #19]
 8004a8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a8c:	7c7b      	ldrb	r3, [r7, #17]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d105      	bne.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a92:	4ba7      	ldr	r3, [pc, #668]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a96:	4aa6      	ldr	r2, [pc, #664]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a9c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004aaa:	4ba1      	ldr	r3, [pc, #644]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab0:	f023 0203 	bic.w	r2, r3, #3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	499d      	ldr	r1, [pc, #628]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00a      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004acc:	4b98      	ldr	r3, [pc, #608]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad2:	f023 020c 	bic.w	r2, r3, #12
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	4995      	ldr	r1, [pc, #596]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0304 	and.w	r3, r3, #4
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004aee:	4b90      	ldr	r3, [pc, #576]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	498c      	ldr	r1, [pc, #560]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0308 	and.w	r3, r3, #8
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00a      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b10:	4b87      	ldr	r3, [pc, #540]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	4984      	ldr	r1, [pc, #528]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0310 	and.w	r3, r3, #16
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b32:	4b7f      	ldr	r3, [pc, #508]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	497b      	ldr	r1, [pc, #492]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00a      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b54:	4b76      	ldr	r3, [pc, #472]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b5a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	4973      	ldr	r1, [pc, #460]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b76:	4b6e      	ldr	r3, [pc, #440]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b7c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	496a      	ldr	r1, [pc, #424]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b98:	4b65      	ldr	r3, [pc, #404]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b9e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	4962      	ldr	r1, [pc, #392]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bba:	4b5d      	ldr	r3, [pc, #372]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc8:	4959      	ldr	r1, [pc, #356]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bdc:	4b54      	ldr	r3, [pc, #336]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004be2:	f023 0203 	bic.w	r2, r3, #3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bea:	4951      	ldr	r1, [pc, #324]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bfe:	4b4c      	ldr	r3, [pc, #304]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c04:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0c:	4948      	ldr	r1, [pc, #288]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d015      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c20:	4b43      	ldr	r3, [pc, #268]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2e:	4940      	ldr	r1, [pc, #256]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c3e:	d105      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c40:	4b3b      	ldr	r3, [pc, #236]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	4a3a      	ldr	r2, [pc, #232]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c4a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d015      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c58:	4b35      	ldr	r3, [pc, #212]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c5e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c66:	4932      	ldr	r1, [pc, #200]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c76:	d105      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c78:	4b2d      	ldr	r3, [pc, #180]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	4a2c      	ldr	r2, [pc, #176]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c82:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d015      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c90:	4b27      	ldr	r3, [pc, #156]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c96:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c9e:	4924      	ldr	r1, [pc, #144]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004caa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cae:	d105      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	4a1e      	ldr	r2, [pc, #120]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d015      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cc8:	4b19      	ldr	r3, [pc, #100]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cd6:	4916      	ldr	r1, [pc, #88]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ce6:	d105      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ce8:	4b11      	ldr	r3, [pc, #68]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	4a10      	ldr	r2, [pc, #64]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cf2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d019      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d00:	4b0b      	ldr	r3, [pc, #44]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0e:	4908      	ldr	r1, [pc, #32]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d1e:	d109      	bne.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d20:	4b03      	ldr	r3, [pc, #12]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	4a02      	ldr	r2, [pc, #8]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d2a:	60d3      	str	r3, [r2, #12]
 8004d2c:	e002      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004d2e:	bf00      	nop
 8004d30:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d015      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d40:	4b29      	ldr	r3, [pc, #164]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d46:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4e:	4926      	ldr	r1, [pc, #152]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d5e:	d105      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d60:	4b21      	ldr	r3, [pc, #132]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	4a20      	ldr	r2, [pc, #128]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d6a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d015      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004d78:	4b1b      	ldr	r3, [pc, #108]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d7e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d86:	4918      	ldr	r1, [pc, #96]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d96:	d105      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d98:	4b13      	ldr	r3, [pc, #76]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	4a12      	ldr	r2, [pc, #72]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004da2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d015      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004db0:	4b0d      	ldr	r3, [pc, #52]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004db2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004db6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dbe:	490a      	ldr	r1, [pc, #40]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dce:	d105      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dd0:	4b05      	ldr	r3, [pc, #20]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	4a04      	ldr	r2, [pc, #16]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dda:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004ddc:	7cbb      	ldrb	r3, [r7, #18]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3718      	adds	r7, #24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40021000 	.word	0x40021000

08004dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e049      	b.n	8004e92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d106      	bne.n	8004e18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7fc fa24 	bl	8001260 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3304      	adds	r3, #4
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	f000 ff68 	bl	8005d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d001      	beq.n	8004eb4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e04c      	b.n	8004f4e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a26      	ldr	r2, [pc, #152]	@ (8004f5c <HAL_TIM_Base_Start+0xc0>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d022      	beq.n	8004f0c <HAL_TIM_Base_Start+0x70>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ece:	d01d      	beq.n	8004f0c <HAL_TIM_Base_Start+0x70>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a22      	ldr	r2, [pc, #136]	@ (8004f60 <HAL_TIM_Base_Start+0xc4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d018      	beq.n	8004f0c <HAL_TIM_Base_Start+0x70>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a21      	ldr	r2, [pc, #132]	@ (8004f64 <HAL_TIM_Base_Start+0xc8>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d013      	beq.n	8004f0c <HAL_TIM_Base_Start+0x70>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a1f      	ldr	r2, [pc, #124]	@ (8004f68 <HAL_TIM_Base_Start+0xcc>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d00e      	beq.n	8004f0c <HAL_TIM_Base_Start+0x70>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f6c <HAL_TIM_Base_Start+0xd0>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d009      	beq.n	8004f0c <HAL_TIM_Base_Start+0x70>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a1c      	ldr	r2, [pc, #112]	@ (8004f70 <HAL_TIM_Base_Start+0xd4>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d004      	beq.n	8004f0c <HAL_TIM_Base_Start+0x70>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a1b      	ldr	r2, [pc, #108]	@ (8004f74 <HAL_TIM_Base_Start+0xd8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d115      	bne.n	8004f38 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	4b19      	ldr	r3, [pc, #100]	@ (8004f78 <HAL_TIM_Base_Start+0xdc>)
 8004f14:	4013      	ands	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b06      	cmp	r3, #6
 8004f1c:	d015      	beq.n	8004f4a <HAL_TIM_Base_Start+0xae>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f24:	d011      	beq.n	8004f4a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 0201 	orr.w	r2, r2, #1
 8004f34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f36:	e008      	b.n	8004f4a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0201 	orr.w	r2, r2, #1
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	e000      	b.n	8004f4c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	40012c00 	.word	0x40012c00
 8004f60:	40000400 	.word	0x40000400
 8004f64:	40000800 	.word	0x40000800
 8004f68:	40000c00 	.word	0x40000c00
 8004f6c:	40013400 	.word	0x40013400
 8004f70:	40014000 	.word	0x40014000
 8004f74:	40015000 	.word	0x40015000
 8004f78:	00010007 	.word	0x00010007

08004f7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d001      	beq.n	8004f94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e054      	b.n	800503e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0201 	orr.w	r2, r2, #1
 8004faa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a26      	ldr	r2, [pc, #152]	@ (800504c <HAL_TIM_Base_Start_IT+0xd0>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d022      	beq.n	8004ffc <HAL_TIM_Base_Start_IT+0x80>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fbe:	d01d      	beq.n	8004ffc <HAL_TIM_Base_Start_IT+0x80>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a22      	ldr	r2, [pc, #136]	@ (8005050 <HAL_TIM_Base_Start_IT+0xd4>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d018      	beq.n	8004ffc <HAL_TIM_Base_Start_IT+0x80>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a21      	ldr	r2, [pc, #132]	@ (8005054 <HAL_TIM_Base_Start_IT+0xd8>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d013      	beq.n	8004ffc <HAL_TIM_Base_Start_IT+0x80>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a1f      	ldr	r2, [pc, #124]	@ (8005058 <HAL_TIM_Base_Start_IT+0xdc>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00e      	beq.n	8004ffc <HAL_TIM_Base_Start_IT+0x80>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a1e      	ldr	r2, [pc, #120]	@ (800505c <HAL_TIM_Base_Start_IT+0xe0>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d009      	beq.n	8004ffc <HAL_TIM_Base_Start_IT+0x80>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a1c      	ldr	r2, [pc, #112]	@ (8005060 <HAL_TIM_Base_Start_IT+0xe4>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d004      	beq.n	8004ffc <HAL_TIM_Base_Start_IT+0x80>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a1b      	ldr	r2, [pc, #108]	@ (8005064 <HAL_TIM_Base_Start_IT+0xe8>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d115      	bne.n	8005028 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689a      	ldr	r2, [r3, #8]
 8005002:	4b19      	ldr	r3, [pc, #100]	@ (8005068 <HAL_TIM_Base_Start_IT+0xec>)
 8005004:	4013      	ands	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2b06      	cmp	r3, #6
 800500c:	d015      	beq.n	800503a <HAL_TIM_Base_Start_IT+0xbe>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005014:	d011      	beq.n	800503a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f042 0201 	orr.w	r2, r2, #1
 8005024:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005026:	e008      	b.n	800503a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f042 0201 	orr.w	r2, r2, #1
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	e000      	b.n	800503c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800503a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40012c00 	.word	0x40012c00
 8005050:	40000400 	.word	0x40000400
 8005054:	40000800 	.word	0x40000800
 8005058:	40000c00 	.word	0x40000c00
 800505c:	40013400 	.word	0x40013400
 8005060:	40014000 	.word	0x40014000
 8005064:	40015000 	.word	0x40015000
 8005068:	00010007 	.word	0x00010007

0800506c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e049      	b.n	8005112 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d106      	bne.n	8005098 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f841 	bl	800511a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3304      	adds	r3, #4
 80050a8:	4619      	mov	r1, r3
 80050aa:	4610      	mov	r0, r2
 80050ac:	f000 fe28 	bl	8005d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
	...

08005130 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d109      	bne.n	8005154 <HAL_TIM_PWM_Start+0x24>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b01      	cmp	r3, #1
 800514a:	bf14      	ite	ne
 800514c:	2301      	movne	r3, #1
 800514e:	2300      	moveq	r3, #0
 8005150:	b2db      	uxtb	r3, r3
 8005152:	e03c      	b.n	80051ce <HAL_TIM_PWM_Start+0x9e>
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	2b04      	cmp	r3, #4
 8005158:	d109      	bne.n	800516e <HAL_TIM_PWM_Start+0x3e>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b01      	cmp	r3, #1
 8005164:	bf14      	ite	ne
 8005166:	2301      	movne	r3, #1
 8005168:	2300      	moveq	r3, #0
 800516a:	b2db      	uxtb	r3, r3
 800516c:	e02f      	b.n	80051ce <HAL_TIM_PWM_Start+0x9e>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b08      	cmp	r3, #8
 8005172:	d109      	bne.n	8005188 <HAL_TIM_PWM_Start+0x58>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b01      	cmp	r3, #1
 800517e:	bf14      	ite	ne
 8005180:	2301      	movne	r3, #1
 8005182:	2300      	moveq	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	e022      	b.n	80051ce <HAL_TIM_PWM_Start+0x9e>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b0c      	cmp	r3, #12
 800518c:	d109      	bne.n	80051a2 <HAL_TIM_PWM_Start+0x72>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b01      	cmp	r3, #1
 8005198:	bf14      	ite	ne
 800519a:	2301      	movne	r3, #1
 800519c:	2300      	moveq	r3, #0
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	e015      	b.n	80051ce <HAL_TIM_PWM_Start+0x9e>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b10      	cmp	r3, #16
 80051a6:	d109      	bne.n	80051bc <HAL_TIM_PWM_Start+0x8c>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	bf14      	ite	ne
 80051b4:	2301      	movne	r3, #1
 80051b6:	2300      	moveq	r3, #0
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	e008      	b.n	80051ce <HAL_TIM_PWM_Start+0x9e>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	bf14      	ite	ne
 80051c8:	2301      	movne	r3, #1
 80051ca:	2300      	moveq	r3, #0
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e0a6      	b.n	8005324 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d104      	bne.n	80051e6 <HAL_TIM_PWM_Start+0xb6>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051e4:	e023      	b.n	800522e <HAL_TIM_PWM_Start+0xfe>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b04      	cmp	r3, #4
 80051ea:	d104      	bne.n	80051f6 <HAL_TIM_PWM_Start+0xc6>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051f4:	e01b      	b.n	800522e <HAL_TIM_PWM_Start+0xfe>
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d104      	bne.n	8005206 <HAL_TIM_PWM_Start+0xd6>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005204:	e013      	b.n	800522e <HAL_TIM_PWM_Start+0xfe>
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b0c      	cmp	r3, #12
 800520a:	d104      	bne.n	8005216 <HAL_TIM_PWM_Start+0xe6>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005214:	e00b      	b.n	800522e <HAL_TIM_PWM_Start+0xfe>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b10      	cmp	r3, #16
 800521a:	d104      	bne.n	8005226 <HAL_TIM_PWM_Start+0xf6>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005224:	e003      	b.n	800522e <HAL_TIM_PWM_Start+0xfe>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2202      	movs	r2, #2
 800522a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2201      	movs	r2, #1
 8005234:	6839      	ldr	r1, [r7, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f001 f9dc 	bl	80065f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a3a      	ldr	r2, [pc, #232]	@ (800532c <HAL_TIM_PWM_Start+0x1fc>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d018      	beq.n	8005278 <HAL_TIM_PWM_Start+0x148>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a39      	ldr	r2, [pc, #228]	@ (8005330 <HAL_TIM_PWM_Start+0x200>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d013      	beq.n	8005278 <HAL_TIM_PWM_Start+0x148>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a37      	ldr	r2, [pc, #220]	@ (8005334 <HAL_TIM_PWM_Start+0x204>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00e      	beq.n	8005278 <HAL_TIM_PWM_Start+0x148>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a36      	ldr	r2, [pc, #216]	@ (8005338 <HAL_TIM_PWM_Start+0x208>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d009      	beq.n	8005278 <HAL_TIM_PWM_Start+0x148>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a34      	ldr	r2, [pc, #208]	@ (800533c <HAL_TIM_PWM_Start+0x20c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d004      	beq.n	8005278 <HAL_TIM_PWM_Start+0x148>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a33      	ldr	r2, [pc, #204]	@ (8005340 <HAL_TIM_PWM_Start+0x210>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d101      	bne.n	800527c <HAL_TIM_PWM_Start+0x14c>
 8005278:	2301      	movs	r3, #1
 800527a:	e000      	b.n	800527e <HAL_TIM_PWM_Start+0x14e>
 800527c:	2300      	movs	r3, #0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d007      	beq.n	8005292 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005290:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a25      	ldr	r2, [pc, #148]	@ (800532c <HAL_TIM_PWM_Start+0x1fc>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d022      	beq.n	80052e2 <HAL_TIM_PWM_Start+0x1b2>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052a4:	d01d      	beq.n	80052e2 <HAL_TIM_PWM_Start+0x1b2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a26      	ldr	r2, [pc, #152]	@ (8005344 <HAL_TIM_PWM_Start+0x214>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d018      	beq.n	80052e2 <HAL_TIM_PWM_Start+0x1b2>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a24      	ldr	r2, [pc, #144]	@ (8005348 <HAL_TIM_PWM_Start+0x218>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d013      	beq.n	80052e2 <HAL_TIM_PWM_Start+0x1b2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a23      	ldr	r2, [pc, #140]	@ (800534c <HAL_TIM_PWM_Start+0x21c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d00e      	beq.n	80052e2 <HAL_TIM_PWM_Start+0x1b2>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a19      	ldr	r2, [pc, #100]	@ (8005330 <HAL_TIM_PWM_Start+0x200>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d009      	beq.n	80052e2 <HAL_TIM_PWM_Start+0x1b2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a18      	ldr	r2, [pc, #96]	@ (8005334 <HAL_TIM_PWM_Start+0x204>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d004      	beq.n	80052e2 <HAL_TIM_PWM_Start+0x1b2>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a18      	ldr	r2, [pc, #96]	@ (8005340 <HAL_TIM_PWM_Start+0x210>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d115      	bne.n	800530e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	4b19      	ldr	r3, [pc, #100]	@ (8005350 <HAL_TIM_PWM_Start+0x220>)
 80052ea:	4013      	ands	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2b06      	cmp	r3, #6
 80052f2:	d015      	beq.n	8005320 <HAL_TIM_PWM_Start+0x1f0>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052fa:	d011      	beq.n	8005320 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800530c:	e008      	b.n	8005320 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f042 0201 	orr.w	r2, r2, #1
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	e000      	b.n	8005322 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005320:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	40012c00 	.word	0x40012c00
 8005330:	40013400 	.word	0x40013400
 8005334:	40014000 	.word	0x40014000
 8005338:	40014400 	.word	0x40014400
 800533c:	40014800 	.word	0x40014800
 8005340:	40015000 	.word	0x40015000
 8005344:	40000400 	.word	0x40000400
 8005348:	40000800 	.word	0x40000800
 800534c:	40000c00 	.word	0x40000c00
 8005350:	00010007 	.word	0x00010007

08005354 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e097      	b.n	8005498 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d106      	bne.n	8005382 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7fb ffd7 	bl	8001330 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2202      	movs	r2, #2
 8005386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6812      	ldr	r2, [r2, #0]
 8005394:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005398:	f023 0307 	bic.w	r3, r3, #7
 800539c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	3304      	adds	r3, #4
 80053a6:	4619      	mov	r1, r3
 80053a8:	4610      	mov	r0, r2
 80053aa:	f000 fca9 	bl	8005d00 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053d6:	f023 0303 	bic.w	r3, r3, #3
 80053da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	021b      	lsls	r3, r3, #8
 80053e6:	4313      	orrs	r3, r2
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80053f4:	f023 030c 	bic.w	r3, r3, #12
 80053f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005400:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005404:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	021b      	lsls	r3, r3, #8
 8005410:	4313      	orrs	r3, r2
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	4313      	orrs	r3, r2
 8005416:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	011a      	lsls	r2, r3, #4
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	031b      	lsls	r3, r3, #12
 8005424:	4313      	orrs	r3, r2
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005432:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800543a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	011b      	lsls	r3, r3, #4
 8005446:	4313      	orrs	r3, r2
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054c8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d110      	bne.n	80054f2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054d0:	7bfb      	ldrb	r3, [r7, #15]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d102      	bne.n	80054dc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80054d6:	7b7b      	ldrb	r3, [r7, #13]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d001      	beq.n	80054e0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e069      	b.n	80055b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054f0:	e031      	b.n	8005556 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	d110      	bne.n	800551a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054f8:	7bbb      	ldrb	r3, [r7, #14]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d102      	bne.n	8005504 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054fe:	7b3b      	ldrb	r3, [r7, #12]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d001      	beq.n	8005508 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e055      	b.n	80055b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005518:	e01d      	b.n	8005556 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800551a:	7bfb      	ldrb	r3, [r7, #15]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d108      	bne.n	8005532 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005520:	7bbb      	ldrb	r3, [r7, #14]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d105      	bne.n	8005532 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005526:	7b7b      	ldrb	r3, [r7, #13]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d102      	bne.n	8005532 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800552c:	7b3b      	ldrb	r3, [r7, #12]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d001      	beq.n	8005536 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e03e      	b.n	80055b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2202      	movs	r2, #2
 800553a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2202      	movs	r2, #2
 8005542:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2202      	movs	r2, #2
 800554a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2202      	movs	r2, #2
 8005552:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <HAL_TIM_Encoder_Start+0xc4>
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	2b04      	cmp	r3, #4
 8005560:	d008      	beq.n	8005574 <HAL_TIM_Encoder_Start+0xd4>
 8005562:	e00f      	b.n	8005584 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2201      	movs	r2, #1
 800556a:	2100      	movs	r1, #0
 800556c:	4618      	mov	r0, r3
 800556e:	f001 f841 	bl	80065f4 <TIM_CCxChannelCmd>
      break;
 8005572:	e016      	b.n	80055a2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2201      	movs	r2, #1
 800557a:	2104      	movs	r1, #4
 800557c:	4618      	mov	r0, r3
 800557e:	f001 f839 	bl	80065f4 <TIM_CCxChannelCmd>
      break;
 8005582:	e00e      	b.n	80055a2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2201      	movs	r2, #1
 800558a:	2100      	movs	r1, #0
 800558c:	4618      	mov	r0, r3
 800558e:	f001 f831 	bl	80065f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2201      	movs	r2, #1
 8005598:	2104      	movs	r1, #4
 800559a:	4618      	mov	r0, r3
 800559c:	f001 f82a 	bl	80065f4 <TIM_CCxChannelCmd>
      break;
 80055a0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f042 0201 	orr.w	r2, r2, #1
 80055b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d020      	beq.n	8005620 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d01b      	beq.n	8005620 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f06f 0202 	mvn.w	r2, #2
 80055f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fb5c 	bl	8005cc4 <HAL_TIM_IC_CaptureCallback>
 800560c:	e005      	b.n	800561a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fb4e 	bl	8005cb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 fb5f 	bl	8005cd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f003 0304 	and.w	r3, r3, #4
 8005626:	2b00      	cmp	r3, #0
 8005628:	d020      	beq.n	800566c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f003 0304 	and.w	r3, r3, #4
 8005630:	2b00      	cmp	r3, #0
 8005632:	d01b      	beq.n	800566c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f06f 0204 	mvn.w	r2, #4
 800563c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2202      	movs	r2, #2
 8005642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fb36 	bl	8005cc4 <HAL_TIM_IC_CaptureCallback>
 8005658:	e005      	b.n	8005666 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 fb28 	bl	8005cb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 fb39 	bl	8005cd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b00      	cmp	r3, #0
 8005674:	d020      	beq.n	80056b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f003 0308 	and.w	r3, r3, #8
 800567c:	2b00      	cmp	r3, #0
 800567e:	d01b      	beq.n	80056b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f06f 0208 	mvn.w	r2, #8
 8005688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2204      	movs	r2, #4
 800568e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	f003 0303 	and.w	r3, r3, #3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fb10 	bl	8005cc4 <HAL_TIM_IC_CaptureCallback>
 80056a4:	e005      	b.n	80056b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fb02 	bl	8005cb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 fb13 	bl	8005cd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f003 0310 	and.w	r3, r3, #16
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d020      	beq.n	8005704 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f003 0310 	and.w	r3, r3, #16
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d01b      	beq.n	8005704 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f06f 0210 	mvn.w	r2, #16
 80056d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2208      	movs	r2, #8
 80056da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 faea 	bl	8005cc4 <HAL_TIM_IC_CaptureCallback>
 80056f0:	e005      	b.n	80056fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fadc 	bl	8005cb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 faed 	bl	8005cd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00c      	beq.n	8005728 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d007      	beq.n	8005728 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f06f 0201 	mvn.w	r2, #1
 8005720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fb fc3c 	bl	8000fa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800572e:	2b00      	cmp	r3, #0
 8005730:	d104      	bne.n	800573c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00c      	beq.n	8005756 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005742:	2b00      	cmp	r3, #0
 8005744:	d007      	beq.n	8005756 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800574e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f001 f8a9 	bl	80068a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00c      	beq.n	800577a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005766:	2b00      	cmp	r3, #0
 8005768:	d007      	beq.n	800577a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f001 f8a1 	bl	80068bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00c      	beq.n	800579e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800578a:	2b00      	cmp	r3, #0
 800578c:	d007      	beq.n	800579e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 faa7 	bl	8005cec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	f003 0320 	and.w	r3, r3, #32
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00c      	beq.n	80057c2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f003 0320 	and.w	r3, r3, #32
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d007      	beq.n	80057c2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f06f 0220 	mvn.w	r2, #32
 80057ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f001 f869 	bl	8006894 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00c      	beq.n	80057e6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d007      	beq.n	80057e6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80057de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f001 f875 	bl	80068d0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00c      	beq.n	800580a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d007      	beq.n	800580a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f001 f86d 	bl	80068e4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00c      	beq.n	800582e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d007      	beq.n	800582e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f001 f865 	bl	80068f8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00c      	beq.n	8005852 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d007      	beq.n	8005852 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800584a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f001 f85d 	bl	800690c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005852:	bf00      	nop
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005868:	2300      	movs	r3, #0
 800586a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005872:	2b01      	cmp	r3, #1
 8005874:	d101      	bne.n	800587a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005876:	2302      	movs	r3, #2
 8005878:	e0ff      	b.n	8005a7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b14      	cmp	r3, #20
 8005886:	f200 80f0 	bhi.w	8005a6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800588a:	a201      	add	r2, pc, #4	@ (adr r2, 8005890 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800588c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005890:	080058e5 	.word	0x080058e5
 8005894:	08005a6b 	.word	0x08005a6b
 8005898:	08005a6b 	.word	0x08005a6b
 800589c:	08005a6b 	.word	0x08005a6b
 80058a0:	08005925 	.word	0x08005925
 80058a4:	08005a6b 	.word	0x08005a6b
 80058a8:	08005a6b 	.word	0x08005a6b
 80058ac:	08005a6b 	.word	0x08005a6b
 80058b0:	08005967 	.word	0x08005967
 80058b4:	08005a6b 	.word	0x08005a6b
 80058b8:	08005a6b 	.word	0x08005a6b
 80058bc:	08005a6b 	.word	0x08005a6b
 80058c0:	080059a7 	.word	0x080059a7
 80058c4:	08005a6b 	.word	0x08005a6b
 80058c8:	08005a6b 	.word	0x08005a6b
 80058cc:	08005a6b 	.word	0x08005a6b
 80058d0:	080059e9 	.word	0x080059e9
 80058d4:	08005a6b 	.word	0x08005a6b
 80058d8:	08005a6b 	.word	0x08005a6b
 80058dc:	08005a6b 	.word	0x08005a6b
 80058e0:	08005a29 	.word	0x08005a29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68b9      	ldr	r1, [r7, #8]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fabc 	bl	8005e68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 0208 	orr.w	r2, r2, #8
 80058fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	699a      	ldr	r2, [r3, #24]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0204 	bic.w	r2, r2, #4
 800590e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6999      	ldr	r1, [r3, #24]
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	691a      	ldr	r2, [r3, #16]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	619a      	str	r2, [r3, #24]
      break;
 8005922:	e0a5      	b.n	8005a70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68b9      	ldr	r1, [r7, #8]
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fb36 	bl	8005f9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800593e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699a      	ldr	r2, [r3, #24]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800594e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6999      	ldr	r1, [r3, #24]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	021a      	lsls	r2, r3, #8
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	619a      	str	r2, [r3, #24]
      break;
 8005964:	e084      	b.n	8005a70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68b9      	ldr	r1, [r7, #8]
 800596c:	4618      	mov	r0, r3
 800596e:	f000 fba9 	bl	80060c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69da      	ldr	r2, [r3, #28]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f042 0208 	orr.w	r2, r2, #8
 8005980:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69da      	ldr	r2, [r3, #28]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0204 	bic.w	r2, r2, #4
 8005990:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69d9      	ldr	r1, [r3, #28]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	61da      	str	r2, [r3, #28]
      break;
 80059a4:	e064      	b.n	8005a70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68b9      	ldr	r1, [r7, #8]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 fc1b 	bl	80061e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69da      	ldr	r2, [r3, #28]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69da      	ldr	r2, [r3, #28]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69d9      	ldr	r1, [r3, #28]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	021a      	lsls	r2, r3, #8
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	61da      	str	r2, [r3, #28]
      break;
 80059e6:	e043      	b.n	8005a70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68b9      	ldr	r1, [r7, #8]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 fc8e 	bl	8006310 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0208 	orr.w	r2, r2, #8
 8005a02:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0204 	bic.w	r2, r2, #4
 8005a12:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	691a      	ldr	r2, [r3, #16]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005a26:	e023      	b.n	8005a70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68b9      	ldr	r1, [r7, #8]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 fcd8 	bl	80063e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a42:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a52:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	021a      	lsls	r2, r3, #8
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005a68:	e002      	b.n	8005a70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3718      	adds	r7, #24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop

08005a84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d101      	bne.n	8005aa0 <HAL_TIM_ConfigClockSource+0x1c>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e0f6      	b.n	8005c8e <HAL_TIM_ConfigClockSource+0x20a>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005abe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ac2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005aca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a6f      	ldr	r2, [pc, #444]	@ (8005c98 <HAL_TIM_ConfigClockSource+0x214>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	f000 80c1 	beq.w	8005c62 <HAL_TIM_ConfigClockSource+0x1de>
 8005ae0:	4a6d      	ldr	r2, [pc, #436]	@ (8005c98 <HAL_TIM_ConfigClockSource+0x214>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	f200 80c6 	bhi.w	8005c74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ae8:	4a6c      	ldr	r2, [pc, #432]	@ (8005c9c <HAL_TIM_ConfigClockSource+0x218>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	f000 80b9 	beq.w	8005c62 <HAL_TIM_ConfigClockSource+0x1de>
 8005af0:	4a6a      	ldr	r2, [pc, #424]	@ (8005c9c <HAL_TIM_ConfigClockSource+0x218>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	f200 80be 	bhi.w	8005c74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005af8:	4a69      	ldr	r2, [pc, #420]	@ (8005ca0 <HAL_TIM_ConfigClockSource+0x21c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	f000 80b1 	beq.w	8005c62 <HAL_TIM_ConfigClockSource+0x1de>
 8005b00:	4a67      	ldr	r2, [pc, #412]	@ (8005ca0 <HAL_TIM_ConfigClockSource+0x21c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	f200 80b6 	bhi.w	8005c74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b08:	4a66      	ldr	r2, [pc, #408]	@ (8005ca4 <HAL_TIM_ConfigClockSource+0x220>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	f000 80a9 	beq.w	8005c62 <HAL_TIM_ConfigClockSource+0x1de>
 8005b10:	4a64      	ldr	r2, [pc, #400]	@ (8005ca4 <HAL_TIM_ConfigClockSource+0x220>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	f200 80ae 	bhi.w	8005c74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b18:	4a63      	ldr	r2, [pc, #396]	@ (8005ca8 <HAL_TIM_ConfigClockSource+0x224>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	f000 80a1 	beq.w	8005c62 <HAL_TIM_ConfigClockSource+0x1de>
 8005b20:	4a61      	ldr	r2, [pc, #388]	@ (8005ca8 <HAL_TIM_ConfigClockSource+0x224>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	f200 80a6 	bhi.w	8005c74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b28:	4a60      	ldr	r2, [pc, #384]	@ (8005cac <HAL_TIM_ConfigClockSource+0x228>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	f000 8099 	beq.w	8005c62 <HAL_TIM_ConfigClockSource+0x1de>
 8005b30:	4a5e      	ldr	r2, [pc, #376]	@ (8005cac <HAL_TIM_ConfigClockSource+0x228>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	f200 809e 	bhi.w	8005c74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b38:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005b3c:	f000 8091 	beq.w	8005c62 <HAL_TIM_ConfigClockSource+0x1de>
 8005b40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005b44:	f200 8096 	bhi.w	8005c74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b4c:	f000 8089 	beq.w	8005c62 <HAL_TIM_ConfigClockSource+0x1de>
 8005b50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b54:	f200 808e 	bhi.w	8005c74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b5c:	d03e      	beq.n	8005bdc <HAL_TIM_ConfigClockSource+0x158>
 8005b5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b62:	f200 8087 	bhi.w	8005c74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b6a:	f000 8086 	beq.w	8005c7a <HAL_TIM_ConfigClockSource+0x1f6>
 8005b6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b72:	d87f      	bhi.n	8005c74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b74:	2b70      	cmp	r3, #112	@ 0x70
 8005b76:	d01a      	beq.n	8005bae <HAL_TIM_ConfigClockSource+0x12a>
 8005b78:	2b70      	cmp	r3, #112	@ 0x70
 8005b7a:	d87b      	bhi.n	8005c74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b7c:	2b60      	cmp	r3, #96	@ 0x60
 8005b7e:	d050      	beq.n	8005c22 <HAL_TIM_ConfigClockSource+0x19e>
 8005b80:	2b60      	cmp	r3, #96	@ 0x60
 8005b82:	d877      	bhi.n	8005c74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b84:	2b50      	cmp	r3, #80	@ 0x50
 8005b86:	d03c      	beq.n	8005c02 <HAL_TIM_ConfigClockSource+0x17e>
 8005b88:	2b50      	cmp	r3, #80	@ 0x50
 8005b8a:	d873      	bhi.n	8005c74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b8c:	2b40      	cmp	r3, #64	@ 0x40
 8005b8e:	d058      	beq.n	8005c42 <HAL_TIM_ConfigClockSource+0x1be>
 8005b90:	2b40      	cmp	r3, #64	@ 0x40
 8005b92:	d86f      	bhi.n	8005c74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b94:	2b30      	cmp	r3, #48	@ 0x30
 8005b96:	d064      	beq.n	8005c62 <HAL_TIM_ConfigClockSource+0x1de>
 8005b98:	2b30      	cmp	r3, #48	@ 0x30
 8005b9a:	d86b      	bhi.n	8005c74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b9c:	2b20      	cmp	r3, #32
 8005b9e:	d060      	beq.n	8005c62 <HAL_TIM_ConfigClockSource+0x1de>
 8005ba0:	2b20      	cmp	r3, #32
 8005ba2:	d867      	bhi.n	8005c74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d05c      	beq.n	8005c62 <HAL_TIM_ConfigClockSource+0x1de>
 8005ba8:	2b10      	cmp	r3, #16
 8005baa:	d05a      	beq.n	8005c62 <HAL_TIM_ConfigClockSource+0x1de>
 8005bac:	e062      	b.n	8005c74 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bbe:	f000 fcf9 	bl	80065b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005bd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	609a      	str	r2, [r3, #8]
      break;
 8005bda:	e04f      	b.n	8005c7c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bec:	f000 fce2 	bl	80065b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bfe:	609a      	str	r2, [r3, #8]
      break;
 8005c00:	e03c      	b.n	8005c7c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f000 fc54 	bl	80064bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2150      	movs	r1, #80	@ 0x50
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f000 fcad 	bl	800657a <TIM_ITRx_SetConfig>
      break;
 8005c20:	e02c      	b.n	8005c7c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c2e:	461a      	mov	r2, r3
 8005c30:	f000 fc73 	bl	800651a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2160      	movs	r1, #96	@ 0x60
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 fc9d 	bl	800657a <TIM_ITRx_SetConfig>
      break;
 8005c40:	e01c      	b.n	8005c7c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f000 fc34 	bl	80064bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2140      	movs	r1, #64	@ 0x40
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 fc8d 	bl	800657a <TIM_ITRx_SetConfig>
      break;
 8005c60:	e00c      	b.n	8005c7c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	f000 fc84 	bl	800657a <TIM_ITRx_SetConfig>
      break;
 8005c72:	e003      	b.n	8005c7c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	73fb      	strb	r3, [r7, #15]
      break;
 8005c78:	e000      	b.n	8005c7c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005c7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	00100070 	.word	0x00100070
 8005c9c:	00100060 	.word	0x00100060
 8005ca0:	00100050 	.word	0x00100050
 8005ca4:	00100040 	.word	0x00100040
 8005ca8:	00100030 	.word	0x00100030
 8005cac:	00100020 	.word	0x00100020

08005cb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a4c      	ldr	r2, [pc, #304]	@ (8005e44 <TIM_Base_SetConfig+0x144>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d017      	beq.n	8005d48 <TIM_Base_SetConfig+0x48>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d1e:	d013      	beq.n	8005d48 <TIM_Base_SetConfig+0x48>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a49      	ldr	r2, [pc, #292]	@ (8005e48 <TIM_Base_SetConfig+0x148>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d00f      	beq.n	8005d48 <TIM_Base_SetConfig+0x48>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a48      	ldr	r2, [pc, #288]	@ (8005e4c <TIM_Base_SetConfig+0x14c>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d00b      	beq.n	8005d48 <TIM_Base_SetConfig+0x48>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a47      	ldr	r2, [pc, #284]	@ (8005e50 <TIM_Base_SetConfig+0x150>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d007      	beq.n	8005d48 <TIM_Base_SetConfig+0x48>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a46      	ldr	r2, [pc, #280]	@ (8005e54 <TIM_Base_SetConfig+0x154>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d003      	beq.n	8005d48 <TIM_Base_SetConfig+0x48>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a45      	ldr	r2, [pc, #276]	@ (8005e58 <TIM_Base_SetConfig+0x158>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d108      	bne.n	8005d5a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a39      	ldr	r2, [pc, #228]	@ (8005e44 <TIM_Base_SetConfig+0x144>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d023      	beq.n	8005daa <TIM_Base_SetConfig+0xaa>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d68:	d01f      	beq.n	8005daa <TIM_Base_SetConfig+0xaa>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a36      	ldr	r2, [pc, #216]	@ (8005e48 <TIM_Base_SetConfig+0x148>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d01b      	beq.n	8005daa <TIM_Base_SetConfig+0xaa>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a35      	ldr	r2, [pc, #212]	@ (8005e4c <TIM_Base_SetConfig+0x14c>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d017      	beq.n	8005daa <TIM_Base_SetConfig+0xaa>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a34      	ldr	r2, [pc, #208]	@ (8005e50 <TIM_Base_SetConfig+0x150>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d013      	beq.n	8005daa <TIM_Base_SetConfig+0xaa>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a33      	ldr	r2, [pc, #204]	@ (8005e54 <TIM_Base_SetConfig+0x154>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d00f      	beq.n	8005daa <TIM_Base_SetConfig+0xaa>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a33      	ldr	r2, [pc, #204]	@ (8005e5c <TIM_Base_SetConfig+0x15c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00b      	beq.n	8005daa <TIM_Base_SetConfig+0xaa>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a32      	ldr	r2, [pc, #200]	@ (8005e60 <TIM_Base_SetConfig+0x160>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d007      	beq.n	8005daa <TIM_Base_SetConfig+0xaa>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a31      	ldr	r2, [pc, #196]	@ (8005e64 <TIM_Base_SetConfig+0x164>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d003      	beq.n	8005daa <TIM_Base_SetConfig+0xaa>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a2c      	ldr	r2, [pc, #176]	@ (8005e58 <TIM_Base_SetConfig+0x158>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d108      	bne.n	8005dbc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a18      	ldr	r2, [pc, #96]	@ (8005e44 <TIM_Base_SetConfig+0x144>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d013      	beq.n	8005e10 <TIM_Base_SetConfig+0x110>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a1a      	ldr	r2, [pc, #104]	@ (8005e54 <TIM_Base_SetConfig+0x154>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d00f      	beq.n	8005e10 <TIM_Base_SetConfig+0x110>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a1a      	ldr	r2, [pc, #104]	@ (8005e5c <TIM_Base_SetConfig+0x15c>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d00b      	beq.n	8005e10 <TIM_Base_SetConfig+0x110>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a19      	ldr	r2, [pc, #100]	@ (8005e60 <TIM_Base_SetConfig+0x160>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d007      	beq.n	8005e10 <TIM_Base_SetConfig+0x110>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a18      	ldr	r2, [pc, #96]	@ (8005e64 <TIM_Base_SetConfig+0x164>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d003      	beq.n	8005e10 <TIM_Base_SetConfig+0x110>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a13      	ldr	r2, [pc, #76]	@ (8005e58 <TIM_Base_SetConfig+0x158>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d103      	bne.n	8005e18 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	691a      	ldr	r2, [r3, #16]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d105      	bne.n	8005e36 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	f023 0201 	bic.w	r2, r3, #1
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	611a      	str	r2, [r3, #16]
  }
}
 8005e36:	bf00      	nop
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	40012c00 	.word	0x40012c00
 8005e48:	40000400 	.word	0x40000400
 8005e4c:	40000800 	.word	0x40000800
 8005e50:	40000c00 	.word	0x40000c00
 8005e54:	40013400 	.word	0x40013400
 8005e58:	40015000 	.word	0x40015000
 8005e5c:	40014000 	.word	0x40014000
 8005e60:	40014400 	.word	0x40014400
 8005e64:	40014800 	.word	0x40014800

08005e68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	f023 0201 	bic.w	r2, r3, #1
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f023 0303 	bic.w	r3, r3, #3
 8005ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f023 0302 	bic.w	r3, r3, #2
 8005eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a30      	ldr	r2, [pc, #192]	@ (8005f84 <TIM_OC1_SetConfig+0x11c>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d013      	beq.n	8005ef0 <TIM_OC1_SetConfig+0x88>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a2f      	ldr	r2, [pc, #188]	@ (8005f88 <TIM_OC1_SetConfig+0x120>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d00f      	beq.n	8005ef0 <TIM_OC1_SetConfig+0x88>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a2e      	ldr	r2, [pc, #184]	@ (8005f8c <TIM_OC1_SetConfig+0x124>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d00b      	beq.n	8005ef0 <TIM_OC1_SetConfig+0x88>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a2d      	ldr	r2, [pc, #180]	@ (8005f90 <TIM_OC1_SetConfig+0x128>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d007      	beq.n	8005ef0 <TIM_OC1_SetConfig+0x88>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a2c      	ldr	r2, [pc, #176]	@ (8005f94 <TIM_OC1_SetConfig+0x12c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d003      	beq.n	8005ef0 <TIM_OC1_SetConfig+0x88>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a2b      	ldr	r2, [pc, #172]	@ (8005f98 <TIM_OC1_SetConfig+0x130>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d10c      	bne.n	8005f0a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f023 0308 	bic.w	r3, r3, #8
 8005ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f023 0304 	bic.w	r3, r3, #4
 8005f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8005f84 <TIM_OC1_SetConfig+0x11c>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d013      	beq.n	8005f3a <TIM_OC1_SetConfig+0xd2>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a1c      	ldr	r2, [pc, #112]	@ (8005f88 <TIM_OC1_SetConfig+0x120>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00f      	beq.n	8005f3a <TIM_OC1_SetConfig+0xd2>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8005f8c <TIM_OC1_SetConfig+0x124>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d00b      	beq.n	8005f3a <TIM_OC1_SetConfig+0xd2>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a1a      	ldr	r2, [pc, #104]	@ (8005f90 <TIM_OC1_SetConfig+0x128>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d007      	beq.n	8005f3a <TIM_OC1_SetConfig+0xd2>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a19      	ldr	r2, [pc, #100]	@ (8005f94 <TIM_OC1_SetConfig+0x12c>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d003      	beq.n	8005f3a <TIM_OC1_SetConfig+0xd2>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a18      	ldr	r2, [pc, #96]	@ (8005f98 <TIM_OC1_SetConfig+0x130>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d111      	bne.n	8005f5e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	621a      	str	r2, [r3, #32]
}
 8005f78:	bf00      	nop
 8005f7a:	371c      	adds	r7, #28
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	40012c00 	.word	0x40012c00
 8005f88:	40013400 	.word	0x40013400
 8005f8c:	40014000 	.word	0x40014000
 8005f90:	40014400 	.word	0x40014400
 8005f94:	40014800 	.word	0x40014800
 8005f98:	40015000 	.word	0x40015000

08005f9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b087      	sub	sp, #28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	f023 0210 	bic.w	r2, r3, #16
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	021b      	lsls	r3, r3, #8
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f023 0320 	bic.w	r3, r3, #32
 8005fea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a2c      	ldr	r2, [pc, #176]	@ (80060ac <TIM_OC2_SetConfig+0x110>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d007      	beq.n	8006010 <TIM_OC2_SetConfig+0x74>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a2b      	ldr	r2, [pc, #172]	@ (80060b0 <TIM_OC2_SetConfig+0x114>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d003      	beq.n	8006010 <TIM_OC2_SetConfig+0x74>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a2a      	ldr	r2, [pc, #168]	@ (80060b4 <TIM_OC2_SetConfig+0x118>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d10d      	bne.n	800602c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	011b      	lsls	r3, r3, #4
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	4313      	orrs	r3, r2
 8006022:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800602a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a1f      	ldr	r2, [pc, #124]	@ (80060ac <TIM_OC2_SetConfig+0x110>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d013      	beq.n	800605c <TIM_OC2_SetConfig+0xc0>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a1e      	ldr	r2, [pc, #120]	@ (80060b0 <TIM_OC2_SetConfig+0x114>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d00f      	beq.n	800605c <TIM_OC2_SetConfig+0xc0>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a1e      	ldr	r2, [pc, #120]	@ (80060b8 <TIM_OC2_SetConfig+0x11c>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d00b      	beq.n	800605c <TIM_OC2_SetConfig+0xc0>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a1d      	ldr	r2, [pc, #116]	@ (80060bc <TIM_OC2_SetConfig+0x120>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d007      	beq.n	800605c <TIM_OC2_SetConfig+0xc0>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a1c      	ldr	r2, [pc, #112]	@ (80060c0 <TIM_OC2_SetConfig+0x124>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d003      	beq.n	800605c <TIM_OC2_SetConfig+0xc0>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a17      	ldr	r2, [pc, #92]	@ (80060b4 <TIM_OC2_SetConfig+0x118>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d113      	bne.n	8006084 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006062:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800606a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	4313      	orrs	r3, r2
 8006076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	4313      	orrs	r3, r2
 8006082:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	621a      	str	r2, [r3, #32]
}
 800609e:	bf00      	nop
 80060a0:	371c      	adds	r7, #28
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	40012c00 	.word	0x40012c00
 80060b0:	40013400 	.word	0x40013400
 80060b4:	40015000 	.word	0x40015000
 80060b8:	40014000 	.word	0x40014000
 80060bc:	40014400 	.word	0x40014400
 80060c0:	40014800 	.word	0x40014800

080060c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f023 0303 	bic.w	r3, r3, #3
 80060fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	4313      	orrs	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	021b      	lsls	r3, r3, #8
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	4313      	orrs	r3, r2
 800611c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a2b      	ldr	r2, [pc, #172]	@ (80061d0 <TIM_OC3_SetConfig+0x10c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d007      	beq.n	8006136 <TIM_OC3_SetConfig+0x72>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a2a      	ldr	r2, [pc, #168]	@ (80061d4 <TIM_OC3_SetConfig+0x110>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d003      	beq.n	8006136 <TIM_OC3_SetConfig+0x72>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a29      	ldr	r2, [pc, #164]	@ (80061d8 <TIM_OC3_SetConfig+0x114>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d10d      	bne.n	8006152 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800613c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	021b      	lsls	r3, r3, #8
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	4313      	orrs	r3, r2
 8006148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a1e      	ldr	r2, [pc, #120]	@ (80061d0 <TIM_OC3_SetConfig+0x10c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d013      	beq.n	8006182 <TIM_OC3_SetConfig+0xbe>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a1d      	ldr	r2, [pc, #116]	@ (80061d4 <TIM_OC3_SetConfig+0x110>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d00f      	beq.n	8006182 <TIM_OC3_SetConfig+0xbe>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a1d      	ldr	r2, [pc, #116]	@ (80061dc <TIM_OC3_SetConfig+0x118>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d00b      	beq.n	8006182 <TIM_OC3_SetConfig+0xbe>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a1c      	ldr	r2, [pc, #112]	@ (80061e0 <TIM_OC3_SetConfig+0x11c>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d007      	beq.n	8006182 <TIM_OC3_SetConfig+0xbe>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a1b      	ldr	r2, [pc, #108]	@ (80061e4 <TIM_OC3_SetConfig+0x120>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d003      	beq.n	8006182 <TIM_OC3_SetConfig+0xbe>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a16      	ldr	r2, [pc, #88]	@ (80061d8 <TIM_OC3_SetConfig+0x114>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d113      	bne.n	80061aa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	011b      	lsls	r3, r3, #4
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	4313      	orrs	r3, r2
 800619c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	011b      	lsls	r3, r3, #4
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	621a      	str	r2, [r3, #32]
}
 80061c4:	bf00      	nop
 80061c6:	371c      	adds	r7, #28
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	40012c00 	.word	0x40012c00
 80061d4:	40013400 	.word	0x40013400
 80061d8:	40015000 	.word	0x40015000
 80061dc:	40014000 	.word	0x40014000
 80061e0:	40014400 	.word	0x40014400
 80061e4:	40014800 	.word	0x40014800

080061e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006216:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800621a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	021b      	lsls	r3, r3, #8
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	4313      	orrs	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006236:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	031b      	lsls	r3, r3, #12
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	4313      	orrs	r3, r2
 8006242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a2c      	ldr	r2, [pc, #176]	@ (80062f8 <TIM_OC4_SetConfig+0x110>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d007      	beq.n	800625c <TIM_OC4_SetConfig+0x74>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a2b      	ldr	r2, [pc, #172]	@ (80062fc <TIM_OC4_SetConfig+0x114>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d003      	beq.n	800625c <TIM_OC4_SetConfig+0x74>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a2a      	ldr	r2, [pc, #168]	@ (8006300 <TIM_OC4_SetConfig+0x118>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d10d      	bne.n	8006278 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	031b      	lsls	r3, r3, #12
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	4313      	orrs	r3, r2
 800626e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006276:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a1f      	ldr	r2, [pc, #124]	@ (80062f8 <TIM_OC4_SetConfig+0x110>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d013      	beq.n	80062a8 <TIM_OC4_SetConfig+0xc0>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a1e      	ldr	r2, [pc, #120]	@ (80062fc <TIM_OC4_SetConfig+0x114>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d00f      	beq.n	80062a8 <TIM_OC4_SetConfig+0xc0>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a1e      	ldr	r2, [pc, #120]	@ (8006304 <TIM_OC4_SetConfig+0x11c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d00b      	beq.n	80062a8 <TIM_OC4_SetConfig+0xc0>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a1d      	ldr	r2, [pc, #116]	@ (8006308 <TIM_OC4_SetConfig+0x120>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d007      	beq.n	80062a8 <TIM_OC4_SetConfig+0xc0>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a1c      	ldr	r2, [pc, #112]	@ (800630c <TIM_OC4_SetConfig+0x124>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d003      	beq.n	80062a8 <TIM_OC4_SetConfig+0xc0>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a17      	ldr	r2, [pc, #92]	@ (8006300 <TIM_OC4_SetConfig+0x118>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d113      	bne.n	80062d0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062ae:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80062b6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	019b      	lsls	r3, r3, #6
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	019b      	lsls	r3, r3, #6
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	621a      	str	r2, [r3, #32]
}
 80062ea:	bf00      	nop
 80062ec:	371c      	adds	r7, #28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	40012c00 	.word	0x40012c00
 80062fc:	40013400 	.word	0x40013400
 8006300:	40015000 	.word	0x40015000
 8006304:	40014000 	.word	0x40014000
 8006308:	40014400 	.word	0x40014400
 800630c:	40014800 	.word	0x40014800

08006310 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006310:	b480      	push	{r7}
 8006312:	b087      	sub	sp, #28
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800633e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006354:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	041b      	lsls	r3, r3, #16
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4313      	orrs	r3, r2
 8006360:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a19      	ldr	r2, [pc, #100]	@ (80063cc <TIM_OC5_SetConfig+0xbc>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d013      	beq.n	8006392 <TIM_OC5_SetConfig+0x82>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a18      	ldr	r2, [pc, #96]	@ (80063d0 <TIM_OC5_SetConfig+0xc0>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d00f      	beq.n	8006392 <TIM_OC5_SetConfig+0x82>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a17      	ldr	r2, [pc, #92]	@ (80063d4 <TIM_OC5_SetConfig+0xc4>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d00b      	beq.n	8006392 <TIM_OC5_SetConfig+0x82>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a16      	ldr	r2, [pc, #88]	@ (80063d8 <TIM_OC5_SetConfig+0xc8>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d007      	beq.n	8006392 <TIM_OC5_SetConfig+0x82>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a15      	ldr	r2, [pc, #84]	@ (80063dc <TIM_OC5_SetConfig+0xcc>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d003      	beq.n	8006392 <TIM_OC5_SetConfig+0x82>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a14      	ldr	r2, [pc, #80]	@ (80063e0 <TIM_OC5_SetConfig+0xd0>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d109      	bne.n	80063a6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006398:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	021b      	lsls	r3, r3, #8
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	621a      	str	r2, [r3, #32]
}
 80063c0:	bf00      	nop
 80063c2:	371c      	adds	r7, #28
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	40012c00 	.word	0x40012c00
 80063d0:	40013400 	.word	0x40013400
 80063d4:	40014000 	.word	0x40014000
 80063d8:	40014400 	.word	0x40014400
 80063dc:	40014800 	.word	0x40014800
 80063e0:	40015000 	.word	0x40015000

080063e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b087      	sub	sp, #28
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800640a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006412:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	021b      	lsls	r3, r3, #8
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	4313      	orrs	r3, r2
 8006422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800642a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	051b      	lsls	r3, r3, #20
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	4313      	orrs	r3, r2
 8006436:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a1a      	ldr	r2, [pc, #104]	@ (80064a4 <TIM_OC6_SetConfig+0xc0>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d013      	beq.n	8006468 <TIM_OC6_SetConfig+0x84>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a19      	ldr	r2, [pc, #100]	@ (80064a8 <TIM_OC6_SetConfig+0xc4>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d00f      	beq.n	8006468 <TIM_OC6_SetConfig+0x84>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a18      	ldr	r2, [pc, #96]	@ (80064ac <TIM_OC6_SetConfig+0xc8>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d00b      	beq.n	8006468 <TIM_OC6_SetConfig+0x84>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a17      	ldr	r2, [pc, #92]	@ (80064b0 <TIM_OC6_SetConfig+0xcc>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d007      	beq.n	8006468 <TIM_OC6_SetConfig+0x84>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a16      	ldr	r2, [pc, #88]	@ (80064b4 <TIM_OC6_SetConfig+0xd0>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d003      	beq.n	8006468 <TIM_OC6_SetConfig+0x84>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a15      	ldr	r2, [pc, #84]	@ (80064b8 <TIM_OC6_SetConfig+0xd4>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d109      	bne.n	800647c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800646e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	029b      	lsls	r3, r3, #10
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	4313      	orrs	r3, r2
 800647a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	621a      	str	r2, [r3, #32]
}
 8006496:	bf00      	nop
 8006498:	371c      	adds	r7, #28
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	40012c00 	.word	0x40012c00
 80064a8:	40013400 	.word	0x40013400
 80064ac:	40014000 	.word	0x40014000
 80064b0:	40014400 	.word	0x40014400
 80064b4:	40014800 	.word	0x40014800
 80064b8:	40015000 	.word	0x40015000

080064bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064bc:	b480      	push	{r7}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	f023 0201 	bic.w	r2, r3, #1
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	011b      	lsls	r3, r3, #4
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f023 030a 	bic.w	r3, r3, #10
 80064f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	4313      	orrs	r3, r2
 8006500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	621a      	str	r2, [r3, #32]
}
 800650e:	bf00      	nop
 8006510:	371c      	adds	r7, #28
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800651a:	b480      	push	{r7}
 800651c:	b087      	sub	sp, #28
 800651e:	af00      	add	r7, sp, #0
 8006520:	60f8      	str	r0, [r7, #12]
 8006522:	60b9      	str	r1, [r7, #8]
 8006524:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	f023 0210 	bic.w	r2, r3, #16
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006544:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	031b      	lsls	r3, r3, #12
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	4313      	orrs	r3, r2
 800654e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006556:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	011b      	lsls	r3, r3, #4
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	4313      	orrs	r3, r2
 8006560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	621a      	str	r2, [r3, #32]
}
 800656e:	bf00      	nop
 8006570:	371c      	adds	r7, #28
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800657a:	b480      	push	{r7}
 800657c:	b085      	sub	sp, #20
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006590:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006594:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4313      	orrs	r3, r2
 800659c:	f043 0307 	orr.w	r3, r3, #7
 80065a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	609a      	str	r2, [r3, #8]
}
 80065a8:	bf00      	nop
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b087      	sub	sp, #28
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
 80065c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	021a      	lsls	r2, r3, #8
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	431a      	orrs	r2, r3
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	4313      	orrs	r3, r2
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	4313      	orrs	r3, r2
 80065e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	609a      	str	r2, [r3, #8]
}
 80065e8:	bf00      	nop
 80065ea:	371c      	adds	r7, #28
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f003 031f 	and.w	r3, r3, #31
 8006606:	2201      	movs	r2, #1
 8006608:	fa02 f303 	lsl.w	r3, r2, r3
 800660c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6a1a      	ldr	r2, [r3, #32]
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	43db      	mvns	r3, r3
 8006616:	401a      	ands	r2, r3
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6a1a      	ldr	r2, [r3, #32]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f003 031f 	and.w	r3, r3, #31
 8006626:	6879      	ldr	r1, [r7, #4]
 8006628:	fa01 f303 	lsl.w	r3, r1, r3
 800662c:	431a      	orrs	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	621a      	str	r2, [r3, #32]
}
 8006632:	bf00      	nop
 8006634:	371c      	adds	r7, #28
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
	...

08006640 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006650:	2b01      	cmp	r3, #1
 8006652:	d101      	bne.n	8006658 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006654:	2302      	movs	r3, #2
 8006656:	e074      	b.n	8006742 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a34      	ldr	r2, [pc, #208]	@ (8006750 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d009      	beq.n	8006696 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a33      	ldr	r2, [pc, #204]	@ (8006754 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d004      	beq.n	8006696 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a31      	ldr	r2, [pc, #196]	@ (8006758 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d108      	bne.n	80066a8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800669c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80066ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a21      	ldr	r2, [pc, #132]	@ (8006750 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d022      	beq.n	8006716 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066d8:	d01d      	beq.n	8006716 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a1f      	ldr	r2, [pc, #124]	@ (800675c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d018      	beq.n	8006716 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006760 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d013      	beq.n	8006716 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a1c      	ldr	r2, [pc, #112]	@ (8006764 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d00e      	beq.n	8006716 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a15      	ldr	r2, [pc, #84]	@ (8006754 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d009      	beq.n	8006716 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a18      	ldr	r2, [pc, #96]	@ (8006768 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d004      	beq.n	8006716 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a11      	ldr	r2, [pc, #68]	@ (8006758 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d10c      	bne.n	8006730 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800671c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	4313      	orrs	r3, r2
 8006726:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	40012c00 	.word	0x40012c00
 8006754:	40013400 	.word	0x40013400
 8006758:	40015000 	.word	0x40015000
 800675c:	40000400 	.word	0x40000400
 8006760:	40000800 	.word	0x40000800
 8006764:	40000c00 	.word	0x40000c00
 8006768:	40014000 	.word	0x40014000

0800676c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006776:	2300      	movs	r3, #0
 8006778:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006780:	2b01      	cmp	r3, #1
 8006782:	d101      	bne.n	8006788 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006784:	2302      	movs	r3, #2
 8006786:	e078      	b.n	800687a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	4313      	orrs	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ee:	4313      	orrs	r3, r2
 80067f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	041b      	lsls	r3, r3, #16
 80067fe:	4313      	orrs	r3, r2
 8006800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	4313      	orrs	r3, r2
 800680e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a1c      	ldr	r2, [pc, #112]	@ (8006888 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d009      	beq.n	800682e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a1b      	ldr	r2, [pc, #108]	@ (800688c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d004      	beq.n	800682e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a19      	ldr	r2, [pc, #100]	@ (8006890 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d11c      	bne.n	8006868 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006838:	051b      	lsls	r3, r3, #20
 800683a:	4313      	orrs	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	6a1b      	ldr	r3, [r3, #32]
 8006848:	4313      	orrs	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006856:	4313      	orrs	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006864:	4313      	orrs	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	40012c00 	.word	0x40012c00
 800688c:	40013400 	.word	0x40013400
 8006890:	40015000 	.word	0x40015000

08006894 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e042      	b.n	80069b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006938:	2b00      	cmp	r3, #0
 800693a:	d106      	bne.n	800694a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f7fa fc33 	bl	80011b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2224      	movs	r2, #36	@ 0x24
 800694e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f022 0201 	bic.w	r2, r2, #1
 8006960:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fb24 	bl	8006fb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f825 	bl	80069c0 <UART_SetConfig>
 8006976:	4603      	mov	r3, r0
 8006978:	2b01      	cmp	r3, #1
 800697a:	d101      	bne.n	8006980 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e01b      	b.n	80069b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685a      	ldr	r2, [r3, #4]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800698e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	689a      	ldr	r2, [r3, #8]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800699e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f042 0201 	orr.w	r2, r2, #1
 80069ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fba3 	bl	80070fc <UART_CheckIdleState>
 80069b6:	4603      	mov	r3, r0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069c4:	b08c      	sub	sp, #48	@ 0x30
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	431a      	orrs	r2, r3
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	431a      	orrs	r2, r3
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	69db      	ldr	r3, [r3, #28]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	4baa      	ldr	r3, [pc, #680]	@ (8006c98 <UART_SetConfig+0x2d8>)
 80069f0:	4013      	ands	r3, r2
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	6812      	ldr	r2, [r2, #0]
 80069f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069f8:	430b      	orrs	r3, r1
 80069fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	68da      	ldr	r2, [r3, #12]
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a9f      	ldr	r2, [pc, #636]	@ (8006c9c <UART_SetConfig+0x2dc>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d004      	beq.n	8006a2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006a36:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	6812      	ldr	r2, [r2, #0]
 8006a3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a40:	430b      	orrs	r3, r1
 8006a42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a4a:	f023 010f 	bic.w	r1, r3, #15
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a90      	ldr	r2, [pc, #576]	@ (8006ca0 <UART_SetConfig+0x2e0>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d125      	bne.n	8006ab0 <UART_SetConfig+0xf0>
 8006a64:	4b8f      	ldr	r3, [pc, #572]	@ (8006ca4 <UART_SetConfig+0x2e4>)
 8006a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a6a:	f003 0303 	and.w	r3, r3, #3
 8006a6e:	2b03      	cmp	r3, #3
 8006a70:	d81a      	bhi.n	8006aa8 <UART_SetConfig+0xe8>
 8006a72:	a201      	add	r2, pc, #4	@ (adr r2, 8006a78 <UART_SetConfig+0xb8>)
 8006a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a78:	08006a89 	.word	0x08006a89
 8006a7c:	08006a99 	.word	0x08006a99
 8006a80:	08006a91 	.word	0x08006a91
 8006a84:	08006aa1 	.word	0x08006aa1
 8006a88:	2301      	movs	r3, #1
 8006a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a8e:	e116      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006a90:	2302      	movs	r3, #2
 8006a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a96:	e112      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006a98:	2304      	movs	r3, #4
 8006a9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a9e:	e10e      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006aa0:	2308      	movs	r3, #8
 8006aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aa6:	e10a      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006aa8:	2310      	movs	r3, #16
 8006aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aae:	e106      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a7c      	ldr	r2, [pc, #496]	@ (8006ca8 <UART_SetConfig+0x2e8>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d138      	bne.n	8006b2c <UART_SetConfig+0x16c>
 8006aba:	4b7a      	ldr	r3, [pc, #488]	@ (8006ca4 <UART_SetConfig+0x2e4>)
 8006abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ac0:	f003 030c 	and.w	r3, r3, #12
 8006ac4:	2b0c      	cmp	r3, #12
 8006ac6:	d82d      	bhi.n	8006b24 <UART_SetConfig+0x164>
 8006ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ad0 <UART_SetConfig+0x110>)
 8006aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ace:	bf00      	nop
 8006ad0:	08006b05 	.word	0x08006b05
 8006ad4:	08006b25 	.word	0x08006b25
 8006ad8:	08006b25 	.word	0x08006b25
 8006adc:	08006b25 	.word	0x08006b25
 8006ae0:	08006b15 	.word	0x08006b15
 8006ae4:	08006b25 	.word	0x08006b25
 8006ae8:	08006b25 	.word	0x08006b25
 8006aec:	08006b25 	.word	0x08006b25
 8006af0:	08006b0d 	.word	0x08006b0d
 8006af4:	08006b25 	.word	0x08006b25
 8006af8:	08006b25 	.word	0x08006b25
 8006afc:	08006b25 	.word	0x08006b25
 8006b00:	08006b1d 	.word	0x08006b1d
 8006b04:	2300      	movs	r3, #0
 8006b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b0a:	e0d8      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b12:	e0d4      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006b14:	2304      	movs	r3, #4
 8006b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b1a:	e0d0      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006b1c:	2308      	movs	r3, #8
 8006b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b22:	e0cc      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006b24:	2310      	movs	r3, #16
 8006b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b2a:	e0c8      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a5e      	ldr	r2, [pc, #376]	@ (8006cac <UART_SetConfig+0x2ec>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d125      	bne.n	8006b82 <UART_SetConfig+0x1c2>
 8006b36:	4b5b      	ldr	r3, [pc, #364]	@ (8006ca4 <UART_SetConfig+0x2e4>)
 8006b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b3c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006b40:	2b30      	cmp	r3, #48	@ 0x30
 8006b42:	d016      	beq.n	8006b72 <UART_SetConfig+0x1b2>
 8006b44:	2b30      	cmp	r3, #48	@ 0x30
 8006b46:	d818      	bhi.n	8006b7a <UART_SetConfig+0x1ba>
 8006b48:	2b20      	cmp	r3, #32
 8006b4a:	d00a      	beq.n	8006b62 <UART_SetConfig+0x1a2>
 8006b4c:	2b20      	cmp	r3, #32
 8006b4e:	d814      	bhi.n	8006b7a <UART_SetConfig+0x1ba>
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d002      	beq.n	8006b5a <UART_SetConfig+0x19a>
 8006b54:	2b10      	cmp	r3, #16
 8006b56:	d008      	beq.n	8006b6a <UART_SetConfig+0x1aa>
 8006b58:	e00f      	b.n	8006b7a <UART_SetConfig+0x1ba>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b60:	e0ad      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006b62:	2302      	movs	r3, #2
 8006b64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b68:	e0a9      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006b6a:	2304      	movs	r3, #4
 8006b6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b70:	e0a5      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006b72:	2308      	movs	r3, #8
 8006b74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b78:	e0a1      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006b7a:	2310      	movs	r3, #16
 8006b7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b80:	e09d      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a4a      	ldr	r2, [pc, #296]	@ (8006cb0 <UART_SetConfig+0x2f0>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d125      	bne.n	8006bd8 <UART_SetConfig+0x218>
 8006b8c:	4b45      	ldr	r3, [pc, #276]	@ (8006ca4 <UART_SetConfig+0x2e4>)
 8006b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b92:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b96:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b98:	d016      	beq.n	8006bc8 <UART_SetConfig+0x208>
 8006b9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b9c:	d818      	bhi.n	8006bd0 <UART_SetConfig+0x210>
 8006b9e:	2b80      	cmp	r3, #128	@ 0x80
 8006ba0:	d00a      	beq.n	8006bb8 <UART_SetConfig+0x1f8>
 8006ba2:	2b80      	cmp	r3, #128	@ 0x80
 8006ba4:	d814      	bhi.n	8006bd0 <UART_SetConfig+0x210>
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d002      	beq.n	8006bb0 <UART_SetConfig+0x1f0>
 8006baa:	2b40      	cmp	r3, #64	@ 0x40
 8006bac:	d008      	beq.n	8006bc0 <UART_SetConfig+0x200>
 8006bae:	e00f      	b.n	8006bd0 <UART_SetConfig+0x210>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bb6:	e082      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006bb8:	2302      	movs	r3, #2
 8006bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bbe:	e07e      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006bc0:	2304      	movs	r3, #4
 8006bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bc6:	e07a      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006bc8:	2308      	movs	r3, #8
 8006bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bce:	e076      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006bd0:	2310      	movs	r3, #16
 8006bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bd6:	e072      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a35      	ldr	r2, [pc, #212]	@ (8006cb4 <UART_SetConfig+0x2f4>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d12a      	bne.n	8006c38 <UART_SetConfig+0x278>
 8006be2:	4b30      	ldr	r3, [pc, #192]	@ (8006ca4 <UART_SetConfig+0x2e4>)
 8006be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006be8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bf0:	d01a      	beq.n	8006c28 <UART_SetConfig+0x268>
 8006bf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bf6:	d81b      	bhi.n	8006c30 <UART_SetConfig+0x270>
 8006bf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bfc:	d00c      	beq.n	8006c18 <UART_SetConfig+0x258>
 8006bfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c02:	d815      	bhi.n	8006c30 <UART_SetConfig+0x270>
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d003      	beq.n	8006c10 <UART_SetConfig+0x250>
 8006c08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c0c:	d008      	beq.n	8006c20 <UART_SetConfig+0x260>
 8006c0e:	e00f      	b.n	8006c30 <UART_SetConfig+0x270>
 8006c10:	2300      	movs	r3, #0
 8006c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c16:	e052      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006c18:	2302      	movs	r3, #2
 8006c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c1e:	e04e      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006c20:	2304      	movs	r3, #4
 8006c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c26:	e04a      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006c28:	2308      	movs	r3, #8
 8006c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c2e:	e046      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006c30:	2310      	movs	r3, #16
 8006c32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c36:	e042      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a17      	ldr	r2, [pc, #92]	@ (8006c9c <UART_SetConfig+0x2dc>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d13a      	bne.n	8006cb8 <UART_SetConfig+0x2f8>
 8006c42:	4b18      	ldr	r3, [pc, #96]	@ (8006ca4 <UART_SetConfig+0x2e4>)
 8006c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c48:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006c4c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c50:	d01a      	beq.n	8006c88 <UART_SetConfig+0x2c8>
 8006c52:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c56:	d81b      	bhi.n	8006c90 <UART_SetConfig+0x2d0>
 8006c58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c5c:	d00c      	beq.n	8006c78 <UART_SetConfig+0x2b8>
 8006c5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c62:	d815      	bhi.n	8006c90 <UART_SetConfig+0x2d0>
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d003      	beq.n	8006c70 <UART_SetConfig+0x2b0>
 8006c68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c6c:	d008      	beq.n	8006c80 <UART_SetConfig+0x2c0>
 8006c6e:	e00f      	b.n	8006c90 <UART_SetConfig+0x2d0>
 8006c70:	2300      	movs	r3, #0
 8006c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c76:	e022      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c7e:	e01e      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006c80:	2304      	movs	r3, #4
 8006c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c86:	e01a      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006c88:	2308      	movs	r3, #8
 8006c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c8e:	e016      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006c90:	2310      	movs	r3, #16
 8006c92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c96:	e012      	b.n	8006cbe <UART_SetConfig+0x2fe>
 8006c98:	cfff69f3 	.word	0xcfff69f3
 8006c9c:	40008000 	.word	0x40008000
 8006ca0:	40013800 	.word	0x40013800
 8006ca4:	40021000 	.word	0x40021000
 8006ca8:	40004400 	.word	0x40004400
 8006cac:	40004800 	.word	0x40004800
 8006cb0:	40004c00 	.word	0x40004c00
 8006cb4:	40005000 	.word	0x40005000
 8006cb8:	2310      	movs	r3, #16
 8006cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4aae      	ldr	r2, [pc, #696]	@ (8006f7c <UART_SetConfig+0x5bc>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	f040 8097 	bne.w	8006df8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006cce:	2b08      	cmp	r3, #8
 8006cd0:	d823      	bhi.n	8006d1a <UART_SetConfig+0x35a>
 8006cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8006cd8 <UART_SetConfig+0x318>)
 8006cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd8:	08006cfd 	.word	0x08006cfd
 8006cdc:	08006d1b 	.word	0x08006d1b
 8006ce0:	08006d05 	.word	0x08006d05
 8006ce4:	08006d1b 	.word	0x08006d1b
 8006ce8:	08006d0b 	.word	0x08006d0b
 8006cec:	08006d1b 	.word	0x08006d1b
 8006cf0:	08006d1b 	.word	0x08006d1b
 8006cf4:	08006d1b 	.word	0x08006d1b
 8006cf8:	08006d13 	.word	0x08006d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cfc:	f7fd fdb6 	bl	800486c <HAL_RCC_GetPCLK1Freq>
 8006d00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d02:	e010      	b.n	8006d26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d04:	4b9e      	ldr	r3, [pc, #632]	@ (8006f80 <UART_SetConfig+0x5c0>)
 8006d06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d08:	e00d      	b.n	8006d26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d0a:	f7fd fd41 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 8006d0e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d10:	e009      	b.n	8006d26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d18:	e005      	b.n	8006d26 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f000 8130 	beq.w	8006f8e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d32:	4a94      	ldr	r2, [pc, #592]	@ (8006f84 <UART_SetConfig+0x5c4>)
 8006d34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d38:	461a      	mov	r2, r3
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d40:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	4613      	mov	r3, r2
 8006d48:	005b      	lsls	r3, r3, #1
 8006d4a:	4413      	add	r3, r2
 8006d4c:	69ba      	ldr	r2, [r7, #24]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d305      	bcc.n	8006d5e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d58:	69ba      	ldr	r2, [r7, #24]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d903      	bls.n	8006d66 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d64:	e113      	b.n	8006f8e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d68:	2200      	movs	r2, #0
 8006d6a:	60bb      	str	r3, [r7, #8]
 8006d6c:	60fa      	str	r2, [r7, #12]
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d72:	4a84      	ldr	r2, [pc, #528]	@ (8006f84 <UART_SetConfig+0x5c4>)
 8006d74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	603b      	str	r3, [r7, #0]
 8006d7e:	607a      	str	r2, [r7, #4]
 8006d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d88:	f7f9 fa46 	bl	8000218 <__aeabi_uldivmod>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4610      	mov	r0, r2
 8006d92:	4619      	mov	r1, r3
 8006d94:	f04f 0200 	mov.w	r2, #0
 8006d98:	f04f 0300 	mov.w	r3, #0
 8006d9c:	020b      	lsls	r3, r1, #8
 8006d9e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006da2:	0202      	lsls	r2, r0, #8
 8006da4:	6979      	ldr	r1, [r7, #20]
 8006da6:	6849      	ldr	r1, [r1, #4]
 8006da8:	0849      	lsrs	r1, r1, #1
 8006daa:	2000      	movs	r0, #0
 8006dac:	460c      	mov	r4, r1
 8006dae:	4605      	mov	r5, r0
 8006db0:	eb12 0804 	adds.w	r8, r2, r4
 8006db4:	eb43 0905 	adc.w	r9, r3, r5
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	469a      	mov	sl, r3
 8006dc0:	4693      	mov	fp, r2
 8006dc2:	4652      	mov	r2, sl
 8006dc4:	465b      	mov	r3, fp
 8006dc6:	4640      	mov	r0, r8
 8006dc8:	4649      	mov	r1, r9
 8006dca:	f7f9 fa25 	bl	8000218 <__aeabi_uldivmod>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dd6:	6a3b      	ldr	r3, [r7, #32]
 8006dd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ddc:	d308      	bcc.n	8006df0 <UART_SetConfig+0x430>
 8006dde:	6a3b      	ldr	r3, [r7, #32]
 8006de0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006de4:	d204      	bcs.n	8006df0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6a3a      	ldr	r2, [r7, #32]
 8006dec:	60da      	str	r2, [r3, #12]
 8006dee:	e0ce      	b.n	8006f8e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006df6:	e0ca      	b.n	8006f8e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e00:	d166      	bne.n	8006ed0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006e02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e06:	2b08      	cmp	r3, #8
 8006e08:	d827      	bhi.n	8006e5a <UART_SetConfig+0x49a>
 8006e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e10 <UART_SetConfig+0x450>)
 8006e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e10:	08006e35 	.word	0x08006e35
 8006e14:	08006e3d 	.word	0x08006e3d
 8006e18:	08006e45 	.word	0x08006e45
 8006e1c:	08006e5b 	.word	0x08006e5b
 8006e20:	08006e4b 	.word	0x08006e4b
 8006e24:	08006e5b 	.word	0x08006e5b
 8006e28:	08006e5b 	.word	0x08006e5b
 8006e2c:	08006e5b 	.word	0x08006e5b
 8006e30:	08006e53 	.word	0x08006e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e34:	f7fd fd1a 	bl	800486c <HAL_RCC_GetPCLK1Freq>
 8006e38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e3a:	e014      	b.n	8006e66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e3c:	f7fd fd2c 	bl	8004898 <HAL_RCC_GetPCLK2Freq>
 8006e40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e42:	e010      	b.n	8006e66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e44:	4b4e      	ldr	r3, [pc, #312]	@ (8006f80 <UART_SetConfig+0x5c0>)
 8006e46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e48:	e00d      	b.n	8006e66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e4a:	f7fd fca1 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 8006e4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e50:	e009      	b.n	8006e66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e58:	e005      	b.n	8006e66 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006e64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 8090 	beq.w	8006f8e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e72:	4a44      	ldr	r2, [pc, #272]	@ (8006f84 <UART_SetConfig+0x5c4>)
 8006e74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e78:	461a      	mov	r2, r3
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e80:	005a      	lsls	r2, r3, #1
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	085b      	lsrs	r3, r3, #1
 8006e88:	441a      	add	r2, r3
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	2b0f      	cmp	r3, #15
 8006e98:	d916      	bls.n	8006ec8 <UART_SetConfig+0x508>
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ea0:	d212      	bcs.n	8006ec8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	f023 030f 	bic.w	r3, r3, #15
 8006eaa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006eac:	6a3b      	ldr	r3, [r7, #32]
 8006eae:	085b      	lsrs	r3, r3, #1
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	f003 0307 	and.w	r3, r3, #7
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	8bfb      	ldrh	r3, [r7, #30]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	8bfa      	ldrh	r2, [r7, #30]
 8006ec4:	60da      	str	r2, [r3, #12]
 8006ec6:	e062      	b.n	8006f8e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006ece:	e05e      	b.n	8006f8e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ed0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ed4:	2b08      	cmp	r3, #8
 8006ed6:	d828      	bhi.n	8006f2a <UART_SetConfig+0x56a>
 8006ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ee0 <UART_SetConfig+0x520>)
 8006eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ede:	bf00      	nop
 8006ee0:	08006f05 	.word	0x08006f05
 8006ee4:	08006f0d 	.word	0x08006f0d
 8006ee8:	08006f15 	.word	0x08006f15
 8006eec:	08006f2b 	.word	0x08006f2b
 8006ef0:	08006f1b 	.word	0x08006f1b
 8006ef4:	08006f2b 	.word	0x08006f2b
 8006ef8:	08006f2b 	.word	0x08006f2b
 8006efc:	08006f2b 	.word	0x08006f2b
 8006f00:	08006f23 	.word	0x08006f23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f04:	f7fd fcb2 	bl	800486c <HAL_RCC_GetPCLK1Freq>
 8006f08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f0a:	e014      	b.n	8006f36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f0c:	f7fd fcc4 	bl	8004898 <HAL_RCC_GetPCLK2Freq>
 8006f10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f12:	e010      	b.n	8006f36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f14:	4b1a      	ldr	r3, [pc, #104]	@ (8006f80 <UART_SetConfig+0x5c0>)
 8006f16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f18:	e00d      	b.n	8006f36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f1a:	f7fd fc39 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 8006f1e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f20:	e009      	b.n	8006f36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f28:	e005      	b.n	8006f36 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f34:	bf00      	nop
    }

    if (pclk != 0U)
 8006f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d028      	beq.n	8006f8e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f40:	4a10      	ldr	r2, [pc, #64]	@ (8006f84 <UART_SetConfig+0x5c4>)
 8006f42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f46:	461a      	mov	r2, r3
 8006f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	085b      	lsrs	r3, r3, #1
 8006f54:	441a      	add	r2, r3
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f5e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f60:	6a3b      	ldr	r3, [r7, #32]
 8006f62:	2b0f      	cmp	r3, #15
 8006f64:	d910      	bls.n	8006f88 <UART_SetConfig+0x5c8>
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f6c:	d20c      	bcs.n	8006f88 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f6e:	6a3b      	ldr	r3, [r7, #32]
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	60da      	str	r2, [r3, #12]
 8006f78:	e009      	b.n	8006f8e <UART_SetConfig+0x5ce>
 8006f7a:	bf00      	nop
 8006f7c:	40008000 	.word	0x40008000
 8006f80:	00f42400 	.word	0x00f42400
 8006f84:	080076f0 	.word	0x080076f0
      }
      else
      {
        ret = HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	2201      	movs	r2, #1
 8006f92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006faa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3730      	adds	r7, #48	@ 0x30
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006fb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc4:	f003 0308 	and.w	r3, r3, #8
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00a      	beq.n	8006fe2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00a      	beq.n	8007004 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	430a      	orrs	r2, r1
 8007002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00a      	beq.n	8007026 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	430a      	orrs	r2, r1
 8007024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800702a:	f003 0304 	and.w	r3, r3, #4
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00a      	beq.n	8007048 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	430a      	orrs	r2, r1
 8007046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800704c:	f003 0310 	and.w	r3, r3, #16
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00a      	beq.n	800706a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	430a      	orrs	r2, r1
 8007068:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800706e:	f003 0320 	and.w	r3, r3, #32
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00a      	beq.n	800708c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	430a      	orrs	r2, r1
 800708a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007094:	2b00      	cmp	r3, #0
 8007096:	d01a      	beq.n	80070ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	430a      	orrs	r2, r1
 80070ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070b6:	d10a      	bne.n	80070ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	430a      	orrs	r2, r1
 80070cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00a      	beq.n	80070f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	430a      	orrs	r2, r1
 80070ee:	605a      	str	r2, [r3, #4]
  }
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b098      	sub	sp, #96	@ 0x60
 8007100:	af02      	add	r7, sp, #8
 8007102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800710c:	f7fa fad0 	bl	80016b0 <HAL_GetTick>
 8007110:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0308 	and.w	r3, r3, #8
 800711c:	2b08      	cmp	r3, #8
 800711e:	d12f      	bne.n	8007180 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007120:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007128:	2200      	movs	r2, #0
 800712a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f88e 	bl	8007250 <UART_WaitOnFlagUntilTimeout>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d022      	beq.n	8007180 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007142:	e853 3f00 	ldrex	r3, [r3]
 8007146:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800714a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800714e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	461a      	mov	r2, r3
 8007156:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007158:	647b      	str	r3, [r7, #68]	@ 0x44
 800715a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800715e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007160:	e841 2300 	strex	r3, r2, [r1]
 8007164:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1e6      	bne.n	800713a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2220      	movs	r2, #32
 8007170:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e063      	b.n	8007248 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0304 	and.w	r3, r3, #4
 800718a:	2b04      	cmp	r3, #4
 800718c:	d149      	bne.n	8007222 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800718e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007192:	9300      	str	r3, [sp, #0]
 8007194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007196:	2200      	movs	r2, #0
 8007198:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f857 	bl	8007250 <UART_WaitOnFlagUntilTimeout>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d03c      	beq.n	8007222 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b0:	e853 3f00 	ldrex	r3, [r3]
 80071b4:	623b      	str	r3, [r7, #32]
   return(result);
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	461a      	mov	r2, r3
 80071c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80071c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071ce:	e841 2300 	strex	r3, r2, [r1]
 80071d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1e6      	bne.n	80071a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	3308      	adds	r3, #8
 80071e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f023 0301 	bic.w	r3, r3, #1
 80071f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3308      	adds	r3, #8
 80071f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071fa:	61fa      	str	r2, [r7, #28]
 80071fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fe:	69b9      	ldr	r1, [r7, #24]
 8007200:	69fa      	ldr	r2, [r7, #28]
 8007202:	e841 2300 	strex	r3, r2, [r1]
 8007206:	617b      	str	r3, [r7, #20]
   return(result);
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1e5      	bne.n	80071da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2220      	movs	r2, #32
 8007212:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e012      	b.n	8007248 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2220      	movs	r2, #32
 8007226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2220      	movs	r2, #32
 800722e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3758      	adds	r7, #88	@ 0x58
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	603b      	str	r3, [r7, #0]
 800725c:	4613      	mov	r3, r2
 800725e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007260:	e04f      	b.n	8007302 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007268:	d04b      	beq.n	8007302 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800726a:	f7fa fa21 	bl	80016b0 <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	69ba      	ldr	r2, [r7, #24]
 8007276:	429a      	cmp	r2, r3
 8007278:	d302      	bcc.n	8007280 <UART_WaitOnFlagUntilTimeout+0x30>
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e04e      	b.n	8007322 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0304 	and.w	r3, r3, #4
 800728e:	2b00      	cmp	r3, #0
 8007290:	d037      	beq.n	8007302 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2b80      	cmp	r3, #128	@ 0x80
 8007296:	d034      	beq.n	8007302 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	2b40      	cmp	r3, #64	@ 0x40
 800729c:	d031      	beq.n	8007302 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	69db      	ldr	r3, [r3, #28]
 80072a4:	f003 0308 	and.w	r3, r3, #8
 80072a8:	2b08      	cmp	r3, #8
 80072aa:	d110      	bne.n	80072ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2208      	movs	r2, #8
 80072b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 f838 	bl	800732a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2208      	movs	r2, #8
 80072be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e029      	b.n	8007322 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	69db      	ldr	r3, [r3, #28]
 80072d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072dc:	d111      	bne.n	8007302 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80072e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f000 f81e 	bl	800732a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2220      	movs	r2, #32
 80072f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e00f      	b.n	8007322 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	69da      	ldr	r2, [r3, #28]
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	4013      	ands	r3, r2
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	429a      	cmp	r2, r3
 8007310:	bf0c      	ite	eq
 8007312:	2301      	moveq	r3, #1
 8007314:	2300      	movne	r3, #0
 8007316:	b2db      	uxtb	r3, r3
 8007318:	461a      	mov	r2, r3
 800731a:	79fb      	ldrb	r3, [r7, #7]
 800731c:	429a      	cmp	r2, r3
 800731e:	d0a0      	beq.n	8007262 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800732a:	b480      	push	{r7}
 800732c:	b095      	sub	sp, #84	@ 0x54
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800733a:	e853 3f00 	ldrex	r3, [r3]
 800733e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007342:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007346:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	461a      	mov	r2, r3
 800734e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007350:	643b      	str	r3, [r7, #64]	@ 0x40
 8007352:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007354:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007356:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007358:	e841 2300 	strex	r3, r2, [r1]
 800735c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800735e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1e6      	bne.n	8007332 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3308      	adds	r3, #8
 800736a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736c:	6a3b      	ldr	r3, [r7, #32]
 800736e:	e853 3f00 	ldrex	r3, [r3]
 8007372:	61fb      	str	r3, [r7, #28]
   return(result);
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800737a:	f023 0301 	bic.w	r3, r3, #1
 800737e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3308      	adds	r3, #8
 8007386:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007388:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800738a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800738e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007390:	e841 2300 	strex	r3, r2, [r1]
 8007394:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1e3      	bne.n	8007364 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d118      	bne.n	80073d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	e853 3f00 	ldrex	r3, [r3]
 80073b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	f023 0310 	bic.w	r3, r3, #16
 80073b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	461a      	mov	r2, r3
 80073c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073c2:	61bb      	str	r3, [r7, #24]
 80073c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c6:	6979      	ldr	r1, [r7, #20]
 80073c8:	69ba      	ldr	r2, [r7, #24]
 80073ca:	e841 2300 	strex	r3, r2, [r1]
 80073ce:	613b      	str	r3, [r7, #16]
   return(result);
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1e6      	bne.n	80073a4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2220      	movs	r2, #32
 80073da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80073ea:	bf00      	nop
 80073ec:	3754      	adds	r7, #84	@ 0x54
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b085      	sub	sp, #20
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007404:	2b01      	cmp	r3, #1
 8007406:	d101      	bne.n	800740c <HAL_UARTEx_DisableFifoMode+0x16>
 8007408:	2302      	movs	r3, #2
 800740a:	e027      	b.n	800745c <HAL_UARTEx_DisableFifoMode+0x66>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2224      	movs	r2, #36	@ 0x24
 8007418:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f022 0201 	bic.w	r2, r2, #1
 8007432:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800743a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2220      	movs	r2, #32
 800744e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3714      	adds	r7, #20
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007478:	2b01      	cmp	r3, #1
 800747a:	d101      	bne.n	8007480 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800747c:	2302      	movs	r3, #2
 800747e:	e02d      	b.n	80074dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2224      	movs	r2, #36	@ 0x24
 800748c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f022 0201 	bic.w	r2, r2, #1
 80074a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	430a      	orrs	r2, r1
 80074ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f84f 	bl	8007560 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2220      	movs	r2, #32
 80074ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d101      	bne.n	80074fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80074f8:	2302      	movs	r3, #2
 80074fa:	e02d      	b.n	8007558 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2224      	movs	r2, #36	@ 0x24
 8007508:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f022 0201 	bic.w	r2, r2, #1
 8007522:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	430a      	orrs	r2, r1
 8007536:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f811 	bl	8007560 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2220      	movs	r2, #32
 800754a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800756c:	2b00      	cmp	r3, #0
 800756e:	d108      	bne.n	8007582 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007580:	e031      	b.n	80075e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007582:	2308      	movs	r3, #8
 8007584:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007586:	2308      	movs	r3, #8
 8007588:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	0e5b      	lsrs	r3, r3, #25
 8007592:	b2db      	uxtb	r3, r3
 8007594:	f003 0307 	and.w	r3, r3, #7
 8007598:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	0f5b      	lsrs	r3, r3, #29
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	f003 0307 	and.w	r3, r3, #7
 80075a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075aa:	7bbb      	ldrb	r3, [r7, #14]
 80075ac:	7b3a      	ldrb	r2, [r7, #12]
 80075ae:	4911      	ldr	r1, [pc, #68]	@ (80075f4 <UARTEx_SetNbDataToProcess+0x94>)
 80075b0:	5c8a      	ldrb	r2, [r1, r2]
 80075b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80075b6:	7b3a      	ldrb	r2, [r7, #12]
 80075b8:	490f      	ldr	r1, [pc, #60]	@ (80075f8 <UARTEx_SetNbDataToProcess+0x98>)
 80075ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
 80075ca:	7b7a      	ldrb	r2, [r7, #13]
 80075cc:	4909      	ldr	r1, [pc, #36]	@ (80075f4 <UARTEx_SetNbDataToProcess+0x94>)
 80075ce:	5c8a      	ldrb	r2, [r1, r2]
 80075d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80075d4:	7b7a      	ldrb	r2, [r7, #13]
 80075d6:	4908      	ldr	r1, [pc, #32]	@ (80075f8 <UARTEx_SetNbDataToProcess+0x98>)
 80075d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075da:	fb93 f3f2 	sdiv	r3, r3, r2
 80075de:	b29a      	uxth	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80075e6:	bf00      	nop
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	08007708 	.word	0x08007708
 80075f8:	08007710 	.word	0x08007710

080075fc <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	ed93 7a06 	vldr	s14, [r3, #24]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	edd3 7a07 	vldr	s15, [r3, #28]
 8007612:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	edd3 7a08 	vldr	s15, [r3, #32]
 800761c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	edd3 7a06 	vldr	s15, [r3, #24]
 800762c:	eeb1 7a67 	vneg.f32	s14, s15
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	edd3 7a08 	vldr	s15, [r3, #32]
 8007636:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800763a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a1a      	ldr	r2, [r3, #32]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d006      	beq.n	8007660 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	330c      	adds	r3, #12
 8007656:	220c      	movs	r2, #12
 8007658:	2100      	movs	r1, #0
 800765a:	4618      	mov	r0, r3
 800765c:	f000 f804 	bl	8007668 <memset>
  }

}
 8007660:	bf00      	nop
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <memset>:
 8007668:	4402      	add	r2, r0
 800766a:	4603      	mov	r3, r0
 800766c:	4293      	cmp	r3, r2
 800766e:	d100      	bne.n	8007672 <memset+0xa>
 8007670:	4770      	bx	lr
 8007672:	f803 1b01 	strb.w	r1, [r3], #1
 8007676:	e7f9      	b.n	800766c <memset+0x4>

08007678 <__libc_init_array>:
 8007678:	b570      	push	{r4, r5, r6, lr}
 800767a:	4d0d      	ldr	r5, [pc, #52]	@ (80076b0 <__libc_init_array+0x38>)
 800767c:	4c0d      	ldr	r4, [pc, #52]	@ (80076b4 <__libc_init_array+0x3c>)
 800767e:	1b64      	subs	r4, r4, r5
 8007680:	10a4      	asrs	r4, r4, #2
 8007682:	2600      	movs	r6, #0
 8007684:	42a6      	cmp	r6, r4
 8007686:	d109      	bne.n	800769c <__libc_init_array+0x24>
 8007688:	4d0b      	ldr	r5, [pc, #44]	@ (80076b8 <__libc_init_array+0x40>)
 800768a:	4c0c      	ldr	r4, [pc, #48]	@ (80076bc <__libc_init_array+0x44>)
 800768c:	f000 f818 	bl	80076c0 <_init>
 8007690:	1b64      	subs	r4, r4, r5
 8007692:	10a4      	asrs	r4, r4, #2
 8007694:	2600      	movs	r6, #0
 8007696:	42a6      	cmp	r6, r4
 8007698:	d105      	bne.n	80076a6 <__libc_init_array+0x2e>
 800769a:	bd70      	pop	{r4, r5, r6, pc}
 800769c:	f855 3b04 	ldr.w	r3, [r5], #4
 80076a0:	4798      	blx	r3
 80076a2:	3601      	adds	r6, #1
 80076a4:	e7ee      	b.n	8007684 <__libc_init_array+0xc>
 80076a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80076aa:	4798      	blx	r3
 80076ac:	3601      	adds	r6, #1
 80076ae:	e7f2      	b.n	8007696 <__libc_init_array+0x1e>
 80076b0:	08007720 	.word	0x08007720
 80076b4:	08007720 	.word	0x08007720
 80076b8:	08007720 	.word	0x08007720
 80076bc:	08007724 	.word	0x08007724

080076c0 <_init>:
 80076c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c2:	bf00      	nop
 80076c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076c6:	bc08      	pop	{r3}
 80076c8:	469e      	mov	lr, r3
 80076ca:	4770      	bx	lr

080076cc <_fini>:
 80076cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ce:	bf00      	nop
 80076d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076d2:	bc08      	pop	{r3}
 80076d4:	469e      	mov	lr, r3
 80076d6:	4770      	bx	lr
