
Elec Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074f0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080076c8  080076c8  000086c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007708  08007708  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  08007708  08007708  00008708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007710  08007710  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007710  08007710  00008710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007714  08007714  00008714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007718  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  2000000c  08007724  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  08007724  000094f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018446  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cbf  00000000  00000000  00021482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  00024148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000106c  00000000  00000000  00025648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dd6  00000000  00000000  000266b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001899f  00000000  00000000  0004f48a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011411e  00000000  00000000  00067e29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017bf47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b10  00000000  00000000  0017bf8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00181a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080076b0 	.word	0x080076b0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080076b0 	.word	0x080076b0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f001 f862 	bl	80015d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f94d 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 fcaf 	bl	8000e78 <MX_GPIO_Init>
  MX_DMA_Init();
 800051a:	f000 fc83 	bl	8000e24 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800051e:	f000 fa1d 	bl	800095c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000522:	f000 f991 	bl	8000848 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000526:	f000 fb61 	bl	8000bec <MX_TIM3_Init>
  MX_TIM4_Init();
 800052a:	f000 fbad 	bl	8000c88 <MX_TIM4_Init>
  MX_TIM5_Init();
 800052e:	f000 fc23 	bl	8000d78 <MX_TIM5_Init>
  MX_TIM2_Init();
 8000532:	f000 fb0d 	bl	8000b50 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000536:	f000 fa5b 	bl	80009f0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 200);
 800053a:	22c8      	movs	r2, #200	@ 0xc8
 800053c:	4982      	ldr	r1, [pc, #520]	@ (8000748 <main+0x240>)
 800053e:	4883      	ldr	r0, [pc, #524]	@ (800074c <main+0x244>)
 8000540:	f001 fcb6 	bl	8001eb0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000544:	4882      	ldr	r0, [pc, #520]	@ (8000750 <main+0x248>)
 8000546:	f004 fca1 	bl	8004e8c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 800054a:	4882      	ldr	r0, [pc, #520]	@ (8000754 <main+0x24c>)
 800054c:	f004 fc9e 	bl	8004e8c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000550:	4881      	ldr	r0, [pc, #516]	@ (8000758 <main+0x250>)
 8000552:	f004 fd0b 	bl	8004f6c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000556:	2100      	movs	r1, #0
 8000558:	4880      	ldr	r0, [pc, #512]	@ (800075c <main+0x254>)
 800055a:	f004 fde1 	bl	8005120 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800055e:	2100      	movs	r1, #0
 8000560:	487c      	ldr	r0, [pc, #496]	@ (8000754 <main+0x24c>)
 8000562:	f004 fddd 	bl	8005120 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 8000566:	213c      	movs	r1, #60	@ 0x3c
 8000568:	487d      	ldr	r0, [pc, #500]	@ (8000760 <main+0x258>)
 800056a:	f004 ff91 	bl	8005490 <HAL_TIM_Encoder_Start>

  PID.Kp =0.1;
 800056e:	4b7d      	ldr	r3, [pc, #500]	@ (8000764 <main+0x25c>)
 8000570:	4a7d      	ldr	r2, [pc, #500]	@ (8000768 <main+0x260>)
 8000572:	619a      	str	r2, [r3, #24]
  PID.Ki =0;
 8000574:	4b7b      	ldr	r3, [pc, #492]	@ (8000764 <main+0x25c>)
 8000576:	f04f 0200 	mov.w	r2, #0
 800057a:	61da      	str	r2, [r3, #28]
  PID.Kd = 0;
 800057c:	4b79      	ldr	r3, [pc, #484]	@ (8000764 <main+0x25c>)
 800057e:	f04f 0200 	mov.w	r2, #0
 8000582:	621a      	str	r2, [r3, #32]
  set_pos = 0;
 8000584:	4b79      	ldr	r3, [pc, #484]	@ (800076c <main+0x264>)
 8000586:	f04f 0200 	mov.w	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
  z = 0;
 800058c:	4b78      	ldr	r3, [pc, #480]	@ (8000770 <main+0x268>)
 800058e:	2200      	movs	r2, #0
 8000590:	801a      	strh	r2, [r3, #0]
  arm_pid_init_f32(&PID, 0);
 8000592:	2100      	movs	r1, #0
 8000594:	4873      	ldr	r0, [pc, #460]	@ (8000764 <main+0x25c>)
 8000596:	f007 f829 	bl	80075ec <arm_pid_init_f32>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Degree = (QEIReadRaw/48)*360;
 800059a:	4b76      	ldr	r3, [pc, #472]	@ (8000774 <main+0x26c>)
 800059c:	ed93 7a00 	vldr	s14, [r3]
 80005a0:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8000778 <main+0x270>
 80005a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005a8:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 800077c <main+0x274>
 80005ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005b0:	4b73      	ldr	r3, [pc, #460]	@ (8000780 <main+0x278>)
 80005b2:	edc3 7a00 	vstr	s15, [r3]
	  for (uint16_t i =0; i < 100;i++)
 80005b6:	2300      	movs	r3, #0
 80005b8:	81fb      	strh	r3, [r7, #14]
 80005ba:	e019      	b.n	80005f0 <main+0xe8>
	  {
		  x += ADC_RawRead[(i*2)];
 80005bc:	89fb      	ldrh	r3, [r7, #14]
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	4a61      	ldr	r2, [pc, #388]	@ (8000748 <main+0x240>)
 80005c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b6e      	ldr	r3, [pc, #440]	@ (8000784 <main+0x27c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4413      	add	r3, r2
 80005ce:	4a6d      	ldr	r2, [pc, #436]	@ (8000784 <main+0x27c>)
 80005d0:	6013      	str	r3, [r2, #0]
		  y += ADC_RawRead[(i*2)+1];
 80005d2:	89fb      	ldrh	r3, [r7, #14]
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	3301      	adds	r3, #1
 80005d8:	4a5b      	ldr	r2, [pc, #364]	@ (8000748 <main+0x240>)
 80005da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005de:	461a      	mov	r2, r3
 80005e0:	4b69      	ldr	r3, [pc, #420]	@ (8000788 <main+0x280>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4413      	add	r3, r2
 80005e6:	4a68      	ldr	r2, [pc, #416]	@ (8000788 <main+0x280>)
 80005e8:	6013      	str	r3, [r2, #0]
	  for (uint16_t i =0; i < 100;i++)
 80005ea:	89fb      	ldrh	r3, [r7, #14]
 80005ec:	3301      	adds	r3, #1
 80005ee:	81fb      	strh	r3, [r7, #14]
 80005f0:	89fb      	ldrh	r3, [r7, #14]
 80005f2:	2b63      	cmp	r3, #99	@ 0x63
 80005f4:	d9e2      	bls.n	80005bc <main+0xb4>
	  }
	  position = x/100;
 80005f6:	4b63      	ldr	r3, [pc, #396]	@ (8000784 <main+0x27c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a64      	ldr	r2, [pc, #400]	@ (800078c <main+0x284>)
 80005fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000600:	095b      	lsrs	r3, r3, #5
 8000602:	ee07 3a90 	vmov	s15, r3
 8000606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800060a:	4b61      	ldr	r3, [pc, #388]	@ (8000790 <main+0x288>)
 800060c:	edc3 7a00 	vstr	s15, [r3]
	  setposition = y/100;
 8000610:	4b5d      	ldr	r3, [pc, #372]	@ (8000788 <main+0x280>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a5d      	ldr	r2, [pc, #372]	@ (800078c <main+0x284>)
 8000616:	fba2 2303 	umull	r2, r3, r2, r3
 800061a:	095b      	lsrs	r3, r3, #5
 800061c:	ee07 3a90 	vmov	s15, r3
 8000620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000624:	4b5b      	ldr	r3, [pc, #364]	@ (8000794 <main+0x28c>)
 8000626:	edc3 7a00 	vstr	s15, [r3]
	  x = 0;
 800062a:	4b56      	ldr	r3, [pc, #344]	@ (8000784 <main+0x27c>)
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
	  y = 0;
 8000630:	4b55      	ldr	r3, [pc, #340]	@ (8000788 <main+0x280>)
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]

	  //QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim5);


	  Vfeedback = (arm_pid_f32(&PID, set_pos - pos))*32676/3072;
 8000636:	4b4d      	ldr	r3, [pc, #308]	@ (800076c <main+0x264>)
 8000638:	ed93 7a00 	vldr	s14, [r3]
 800063c:	4b56      	ldr	r3, [pc, #344]	@ (8000798 <main+0x290>)
 800063e:	edd3 7a00 	vldr	s15, [r3]
 8000642:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000646:	4b47      	ldr	r3, [pc, #284]	@ (8000764 <main+0x25c>)
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	edc7 7a01 	vstr	s15, [r7, #4]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	ed93 7a00 	vldr	s14, [r3]
 8000654:	edd7 7a01 	vldr	s15, [r7, #4]
 8000658:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	edd3 6a01 	vldr	s13, [r3, #4]
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	edd3 7a03 	vldr	s15, [r3, #12]
 8000668:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800066c:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	edd3 6a02 	vldr	s13, [r3, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	edd3 7a04 	vldr	s15, [r3, #16]
 800067c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000680:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800068a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800068e:	edc7 7a00 	vstr	s15, [r7]

    /* Update state */
    S->state[1] = S->state[0];
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	68da      	ldr	r2, [r3, #12]
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	683a      	ldr	r2, [r7, #0]
 80006a4:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80006a6:	edd7 7a00 	vldr	s15, [r7]
 80006aa:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 800079c <main+0x294>
 80006ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80006b2:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80007a0 <main+0x298>
 80006b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006ba:	4b3a      	ldr	r3, [pc, #232]	@ (80007a4 <main+0x29c>)
 80006bc:	edc3 7a00 	vstr	s15, [r3]
	  //__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
	  //__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 30000);
	  if(Vfeedback > 0)
 80006c0:	4b38      	ldr	r3, [pc, #224]	@ (80007a4 <main+0x29c>)
 80006c2:	edd3 7a00 	vldr	s15, [r3]
 80006c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ce:	dd08      	ble.n	80006e2 <main+0x1da>
	  {
		  //z = 1;
		  PWM1 = Vfeedback;
 80006d0:	4b34      	ldr	r3, [pc, #208]	@ (80007a4 <main+0x29c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a34      	ldr	r2, [pc, #208]	@ (80007a8 <main+0x2a0>)
 80006d6:	6013      	str	r3, [r2, #0]
		  PWM2 = 0;
 80006d8:	4b34      	ldr	r3, [pc, #208]	@ (80007ac <main+0x2a4>)
 80006da:	f04f 0200 	mov.w	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	e01c      	b.n	800071c <main+0x214>

	  }
	  else if(Vfeedback < 0)
 80006e2:	4b30      	ldr	r3, [pc, #192]	@ (80007a4 <main+0x29c>)
 80006e4:	edd3 7a00 	vldr	s15, [r3]
 80006e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f0:	d50c      	bpl.n	800070c <main+0x204>
	  {
		  //z = -1;
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET);
//		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
		  PWM1 = 0;
 80006f2:	4b2d      	ldr	r3, [pc, #180]	@ (80007a8 <main+0x2a0>)
 80006f4:	f04f 0200 	mov.w	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
		  PWM2 = Vfeedback * -1;
 80006fa:	4b2a      	ldr	r3, [pc, #168]	@ (80007a4 <main+0x29c>)
 80006fc:	edd3 7a00 	vldr	s15, [r3]
 8000700:	eef1 7a67 	vneg.f32	s15, s15
 8000704:	4b29      	ldr	r3, [pc, #164]	@ (80007ac <main+0x2a4>)
 8000706:	edc3 7a00 	vstr	s15, [r3]
 800070a:	e007      	b.n	800071c <main+0x214>
	  }
	  else{
		  PWM1 = 0;
 800070c:	4b26      	ldr	r3, [pc, #152]	@ (80007a8 <main+0x2a0>)
 800070e:	f04f 0200 	mov.w	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
		  PWM2 = 0;
 8000714:	4b25      	ldr	r3, [pc, #148]	@ (80007ac <main+0x2a4>)
 8000716:	f04f 0200 	mov.w	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
	  }
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM1);
 800071c:	4b22      	ldr	r3, [pc, #136]	@ (80007a8 <main+0x2a0>)
 800071e:	edd3 7a00 	vldr	s15, [r3]
 8000722:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <main+0x24c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800072a:	ee17 2a90 	vmov	r2, s15
 800072e:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM2);
 8000730:	4b1e      	ldr	r3, [pc, #120]	@ (80007ac <main+0x2a4>)
 8000732:	edd3 7a00 	vldr	s15, [r3]
 8000736:	4b09      	ldr	r3, [pc, #36]	@ (800075c <main+0x254>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800073e:	ee17 2a90 	vmov	r2, s15
 8000742:	635a      	str	r2, [r3, #52]	@ 0x34
	  Degree = (QEIReadRaw/48)*360;
 8000744:	e729      	b.n	800059a <main+0x92>
 8000746:	bf00      	nop
 8000748:	20000310 	.word	0x20000310
 800074c:	20000028 	.word	0x20000028
 8000750:	20000220 	.word	0x20000220
 8000754:	2000026c 	.word	0x2000026c
 8000758:	200001d4 	.word	0x200001d4
 800075c:	20000188 	.word	0x20000188
 8000760:	200002b8 	.word	0x200002b8
 8000764:	200004a0 	.word	0x200004a0
 8000768:	3dcccccd 	.word	0x3dcccccd
 800076c:	200004e0 	.word	0x200004e0
 8000770:	200004d8 	.word	0x200004d8
 8000774:	20000304 	.word	0x20000304
 8000778:	42400000 	.word	0x42400000
 800077c:	43b40000 	.word	0x43b40000
 8000780:	2000030c 	.word	0x2000030c
 8000784:	200004d0 	.word	0x200004d0
 8000788:	200004d4 	.word	0x200004d4
 800078c:	51eb851f 	.word	0x51eb851f
 8000790:	200004c4 	.word	0x200004c4
 8000794:	200004c8 	.word	0x200004c8
 8000798:	200004dc 	.word	0x200004dc
 800079c:	46ff4800 	.word	0x46ff4800
 80007a0:	45400000 	.word	0x45400000
 80007a4:	200004cc 	.word	0x200004cc
 80007a8:	200004e4 	.word	0x200004e4
 80007ac:	200004e8 	.word	0x200004e8

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	@ 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0318 	add.w	r3, r7, #24
 80007ba:	2238      	movs	r2, #56	@ 0x38
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f006 ff4a 	bl	8007658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f003 fad2 	bl	8003d7c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d8:	2302      	movs	r3, #2
 80007da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e2:	2340      	movs	r3, #64	@ 0x40
 80007e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e6:	2302      	movs	r3, #2
 80007e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ea:	2302      	movs	r3, #2
 80007ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007ee:	2304      	movs	r3, #4
 80007f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007f2:	2355      	movs	r3, #85	@ 0x55
 80007f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007fa:	2302      	movs	r3, #2
 80007fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007fe:	2302      	movs	r3, #2
 8000800:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000802:	f107 0318 	add.w	r3, r7, #24
 8000806:	4618      	mov	r0, r3
 8000808:	f003 fb6c 	bl	8003ee4 <HAL_RCC_OscConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000812:	f000 fc11 	bl	8001038 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000816:	230f      	movs	r3, #15
 8000818:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081a:	2303      	movs	r3, #3
 800081c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2104      	movs	r1, #4
 800082e:	4618      	mov	r0, r3
 8000830:	f003 fe6a 	bl	8004508 <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800083a:	f000 fbfd 	bl	8001038 <Error_Handler>
  }
}
 800083e:	bf00      	nop
 8000840:	3750      	adds	r7, #80	@ 0x50
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08c      	sub	sp, #48	@ 0x30
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800084e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2220      	movs	r2, #32
 800085e:	2100      	movs	r1, #0
 8000860:	4618      	mov	r0, r3
 8000862:	f006 fef9 	bl	8007658 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000866:	4b3a      	ldr	r3, [pc, #232]	@ (8000950 <MX_ADC1_Init+0x108>)
 8000868:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800086c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800086e:	4b38      	ldr	r3, [pc, #224]	@ (8000950 <MX_ADC1_Init+0x108>)
 8000870:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000874:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000876:	4b36      	ldr	r3, [pc, #216]	@ (8000950 <MX_ADC1_Init+0x108>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800087c:	4b34      	ldr	r3, [pc, #208]	@ (8000950 <MX_ADC1_Init+0x108>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000882:	4b33      	ldr	r3, [pc, #204]	@ (8000950 <MX_ADC1_Init+0x108>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000888:	4b31      	ldr	r3, [pc, #196]	@ (8000950 <MX_ADC1_Init+0x108>)
 800088a:	2201      	movs	r2, #1
 800088c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800088e:	4b30      	ldr	r3, [pc, #192]	@ (8000950 <MX_ADC1_Init+0x108>)
 8000890:	2204      	movs	r2, #4
 8000892:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000894:	4b2e      	ldr	r3, [pc, #184]	@ (8000950 <MX_ADC1_Init+0x108>)
 8000896:	2200      	movs	r2, #0
 8000898:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800089a:	4b2d      	ldr	r3, [pc, #180]	@ (8000950 <MX_ADC1_Init+0x108>)
 800089c:	2200      	movs	r2, #0
 800089e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80008a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000950 <MX_ADC1_Init+0x108>)
 80008a2:	2202      	movs	r2, #2
 80008a4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000950 <MX_ADC1_Init+0x108>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80008ae:	4b28      	ldr	r3, [pc, #160]	@ (8000950 <MX_ADC1_Init+0x108>)
 80008b0:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 80008b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80008b6:	4b26      	ldr	r3, [pc, #152]	@ (8000950 <MX_ADC1_Init+0x108>)
 80008b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008be:	4b24      	ldr	r3, [pc, #144]	@ (8000950 <MX_ADC1_Init+0x108>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008c6:	4b22      	ldr	r3, [pc, #136]	@ (8000950 <MX_ADC1_Init+0x108>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80008cc:	4b20      	ldr	r3, [pc, #128]	@ (8000950 <MX_ADC1_Init+0x108>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008d4:	481e      	ldr	r0, [pc, #120]	@ (8000950 <MX_ADC1_Init+0x108>)
 80008d6:	f001 f92f 	bl	8001b38 <HAL_ADC_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80008e0:	f000 fbaa 	bl	8001038 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ec:	4619      	mov	r1, r3
 80008ee:	4818      	ldr	r0, [pc, #96]	@ (8000950 <MX_ADC1_Init+0x108>)
 80008f0:	f002 fbfc 	bl	80030ec <HAL_ADCEx_MultiModeConfigChannel>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80008fa:	f000 fb9d 	bl	8001038 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008fe:	4b15      	ldr	r3, [pc, #84]	@ (8000954 <MX_ADC1_Init+0x10c>)
 8000900:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000902:	2306      	movs	r3, #6
 8000904:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000906:	2302      	movs	r3, #2
 8000908:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800090a:	237f      	movs	r3, #127	@ 0x7f
 800090c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800090e:	2304      	movs	r3, #4
 8000910:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	4619      	mov	r1, r3
 800091a:	480d      	ldr	r0, [pc, #52]	@ (8000950 <MX_ADC1_Init+0x108>)
 800091c:	f001 fe24 	bl	8002568 <HAL_ADC_ConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000926:	f000 fb87 	bl	8001038 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800092a:	4b0b      	ldr	r3, [pc, #44]	@ (8000958 <MX_ADC1_Init+0x110>)
 800092c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800092e:	230c      	movs	r3, #12
 8000930:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	4619      	mov	r1, r3
 8000936:	4806      	ldr	r0, [pc, #24]	@ (8000950 <MX_ADC1_Init+0x108>)
 8000938:	f001 fe16 	bl	8002568 <HAL_ADC_ConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000942:	f000 fb79 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	3730      	adds	r7, #48	@ 0x30
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000028 	.word	0x20000028
 8000954:	04300002 	.word	0x04300002
 8000958:	08600004 	.word	0x08600004

0800095c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000960:	4b21      	ldr	r3, [pc, #132]	@ (80009e8 <MX_LPUART1_UART_Init+0x8c>)
 8000962:	4a22      	ldr	r2, [pc, #136]	@ (80009ec <MX_LPUART1_UART_Init+0x90>)
 8000964:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000966:	4b20      	ldr	r3, [pc, #128]	@ (80009e8 <MX_LPUART1_UART_Init+0x8c>)
 8000968:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800096c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b1e      	ldr	r3, [pc, #120]	@ (80009e8 <MX_LPUART1_UART_Init+0x8c>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b1c      	ldr	r3, [pc, #112]	@ (80009e8 <MX_LPUART1_UART_Init+0x8c>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800097a:	4b1b      	ldr	r3, [pc, #108]	@ (80009e8 <MX_LPUART1_UART_Init+0x8c>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b19      	ldr	r3, [pc, #100]	@ (80009e8 <MX_LPUART1_UART_Init+0x8c>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b18      	ldr	r3, [pc, #96]	@ (80009e8 <MX_LPUART1_UART_Init+0x8c>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800098c:	4b16      	ldr	r3, [pc, #88]	@ (80009e8 <MX_LPUART1_UART_Init+0x8c>)
 800098e:	2200      	movs	r2, #0
 8000990:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000992:	4b15      	ldr	r3, [pc, #84]	@ (80009e8 <MX_LPUART1_UART_Init+0x8c>)
 8000994:	2200      	movs	r2, #0
 8000996:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000998:	4b13      	ldr	r3, [pc, #76]	@ (80009e8 <MX_LPUART1_UART_Init+0x8c>)
 800099a:	2200      	movs	r2, #0
 800099c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800099e:	4812      	ldr	r0, [pc, #72]	@ (80009e8 <MX_LPUART1_UART_Init+0x8c>)
 80009a0:	f005 ffb6 	bl	8006910 <HAL_UART_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80009aa:	f000 fb45 	bl	8001038 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ae:	2100      	movs	r1, #0
 80009b0:	480d      	ldr	r0, [pc, #52]	@ (80009e8 <MX_LPUART1_UART_Init+0x8c>)
 80009b2:	f006 fd51 	bl	8007458 <HAL_UARTEx_SetTxFifoThreshold>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80009bc:	f000 fb3c 	bl	8001038 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c0:	2100      	movs	r1, #0
 80009c2:	4809      	ldr	r0, [pc, #36]	@ (80009e8 <MX_LPUART1_UART_Init+0x8c>)
 80009c4:	f006 fd86 	bl	80074d4 <HAL_UARTEx_SetRxFifoThreshold>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80009ce:	f000 fb33 	bl	8001038 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <MX_LPUART1_UART_Init+0x8c>)
 80009d4:	f006 fd07 	bl	80073e6 <HAL_UARTEx_DisableFifoMode>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80009de:	f000 fb2b 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200000f4 	.word	0x200000f4
 80009ec:	40008000 	.word	0x40008000

080009f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b09c      	sub	sp, #112	@ 0x70
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009f6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a04:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a10:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
 8000a20:	615a      	str	r2, [r3, #20]
 8000a22:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2234      	movs	r2, #52	@ 0x34
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f006 fe14 	bl	8007658 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a30:	4b45      	ldr	r3, [pc, #276]	@ (8000b48 <MX_TIM1_Init+0x158>)
 8000a32:	4a46      	ldr	r2, [pc, #280]	@ (8000b4c <MX_TIM1_Init+0x15c>)
 8000a34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8000a36:	4b44      	ldr	r3, [pc, #272]	@ (8000b48 <MX_TIM1_Init+0x158>)
 8000a38:	22a9      	movs	r2, #169	@ 0xa9
 8000a3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3c:	4b42      	ldr	r3, [pc, #264]	@ (8000b48 <MX_TIM1_Init+0x158>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 32675;
 8000a42:	4b41      	ldr	r3, [pc, #260]	@ (8000b48 <MX_TIM1_Init+0x158>)
 8000a44:	f647 72a3 	movw	r2, #32675	@ 0x7fa3
 8000a48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b48 <MX_TIM1_Init+0x158>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a50:	4b3d      	ldr	r3, [pc, #244]	@ (8000b48 <MX_TIM1_Init+0x158>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a56:	4b3c      	ldr	r3, [pc, #240]	@ (8000b48 <MX_TIM1_Init+0x158>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a5c:	483a      	ldr	r0, [pc, #232]	@ (8000b48 <MX_TIM1_Init+0x158>)
 8000a5e:	f004 f9bd 	bl	8004ddc <HAL_TIM_Base_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a68:	f000 fae6 	bl	8001038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a70:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a72:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a76:	4619      	mov	r1, r3
 8000a78:	4833      	ldr	r0, [pc, #204]	@ (8000b48 <MX_TIM1_Init+0x158>)
 8000a7a:	f004 fffb 	bl	8005a74 <HAL_TIM_ConfigClockSource>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a84:	f000 fad8 	bl	8001038 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a88:	482f      	ldr	r0, [pc, #188]	@ (8000b48 <MX_TIM1_Init+0x158>)
 8000a8a:	f004 fae7 	bl	800505c <HAL_TIM_PWM_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a94:	f000 fad0 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aa4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4827      	ldr	r0, [pc, #156]	@ (8000b48 <MX_TIM1_Init+0x158>)
 8000aac:	f005 fdc0 	bl	8006630 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000ab6:	f000 fabf 	bl	8001038 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aba:	2360      	movs	r3, #96	@ 0x60
 8000abc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ada:	2200      	movs	r2, #0
 8000adc:	4619      	mov	r1, r3
 8000ade:	481a      	ldr	r0, [pc, #104]	@ (8000b48 <MX_TIM1_Init+0x158>)
 8000ae0:	f004 feb4 	bl	800584c <HAL_TIM_PWM_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000aea:	f000 faa5 	bl	8001038 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b06:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b18:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4807      	ldr	r0, [pc, #28]	@ (8000b48 <MX_TIM1_Init+0x158>)
 8000b2c:	f005 fe16 	bl	800675c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8000b36:	f000 fa7f 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b3a:	4803      	ldr	r0, [pc, #12]	@ (8000b48 <MX_TIM1_Init+0x158>)
 8000b3c:	f000 fc52 	bl	80013e4 <HAL_TIM_MspPostInit>

}
 8000b40:	bf00      	nop
 8000b42:	3770      	adds	r7, #112	@ 0x70
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000188 	.word	0x20000188
 8000b4c:	40012c00 	.word	0x40012c00

08000b50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b56:	f107 0310 	add.w	r3, r7, #16
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000be8 <MX_TIM2_Init+0x98>)
 8000b70:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000b76:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <MX_TIM2_Init+0x98>)
 8000b78:	22a9      	movs	r2, #169	@ 0xa9
 8000b7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000be8 <MX_TIM2_Init+0x98>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000b82:	4b19      	ldr	r3, [pc, #100]	@ (8000be8 <MX_TIM2_Init+0x98>)
 8000b84:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	@ (8000be8 <MX_TIM2_Init+0x98>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b90:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <MX_TIM2_Init+0x98>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b96:	4814      	ldr	r0, [pc, #80]	@ (8000be8 <MX_TIM2_Init+0x98>)
 8000b98:	f004 f920 	bl	8004ddc <HAL_TIM_Base_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ba2:	f000 fa49 	bl	8001038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000baa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480d      	ldr	r0, [pc, #52]	@ (8000be8 <MX_TIM2_Init+0x98>)
 8000bb4:	f004 ff5e 	bl	8005a74 <HAL_TIM_ConfigClockSource>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bbe:	f000 fa3b 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bc2:	2320      	movs	r3, #32
 8000bc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4806      	ldr	r0, [pc, #24]	@ (8000be8 <MX_TIM2_Init+0x98>)
 8000bd0:	f005 fd2e 	bl	8006630 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000bda:	f000 fa2d 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	3720      	adds	r7, #32
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200001d4 	.word	0x200001d4

08000bec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf2:	f107 0310 	add.w	r3, r7, #16
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c80 <MX_TIM3_Init+0x94>)
 8000c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000c84 <MX_TIM3_Init+0x98>)
 8000c0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8000c10:	4b1b      	ldr	r3, [pc, #108]	@ (8000c80 <MX_TIM3_Init+0x94>)
 8000c12:	22a9      	movs	r2, #169	@ 0xa9
 8000c14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c16:	4b1a      	ldr	r3, [pc, #104]	@ (8000c80 <MX_TIM3_Init+0x94>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000c1c:	4b18      	ldr	r3, [pc, #96]	@ (8000c80 <MX_TIM3_Init+0x94>)
 8000c1e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c24:	4b16      	ldr	r3, [pc, #88]	@ (8000c80 <MX_TIM3_Init+0x94>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2a:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <MX_TIM3_Init+0x94>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c30:	4813      	ldr	r0, [pc, #76]	@ (8000c80 <MX_TIM3_Init+0x94>)
 8000c32:	f004 f8d3 	bl	8004ddc <HAL_TIM_Base_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000c3c:	f000 f9fc 	bl	8001038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c46:	f107 0310 	add.w	r3, r7, #16
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480c      	ldr	r0, [pc, #48]	@ (8000c80 <MX_TIM3_Init+0x94>)
 8000c4e:	f004 ff11 	bl	8005a74 <HAL_TIM_ConfigClockSource>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c58:	f000 f9ee 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c5c:	2320      	movs	r3, #32
 8000c5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <MX_TIM3_Init+0x94>)
 8000c6a:	f005 fce1 	bl	8006630 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000c74:	f000 f9e0 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	3720      	adds	r7, #32
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000220 	.word	0x20000220
 8000c84:	40000400 	.word	0x40000400

08000c88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08e      	sub	sp, #56	@ 0x38
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ca8:	463b      	mov	r3, r7
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
 8000cb4:	611a      	str	r2, [r3, #16]
 8000cb6:	615a      	str	r2, [r3, #20]
 8000cb8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cba:	4b2d      	ldr	r3, [pc, #180]	@ (8000d70 <MX_TIM4_Init+0xe8>)
 8000cbc:	4a2d      	ldr	r2, [pc, #180]	@ (8000d74 <MX_TIM4_Init+0xec>)
 8000cbe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8000cc0:	4b2b      	ldr	r3, [pc, #172]	@ (8000d70 <MX_TIM4_Init+0xe8>)
 8000cc2:	22a9      	movs	r2, #169	@ 0xa9
 8000cc4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8000d70 <MX_TIM4_Init+0xe8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 32675;
 8000ccc:	4b28      	ldr	r3, [pc, #160]	@ (8000d70 <MX_TIM4_Init+0xe8>)
 8000cce:	f647 72a3 	movw	r2, #32675	@ 0x7fa3
 8000cd2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd4:	4b26      	ldr	r3, [pc, #152]	@ (8000d70 <MX_TIM4_Init+0xe8>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cda:	4b25      	ldr	r3, [pc, #148]	@ (8000d70 <MX_TIM4_Init+0xe8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ce0:	4823      	ldr	r0, [pc, #140]	@ (8000d70 <MX_TIM4_Init+0xe8>)
 8000ce2:	f004 f87b 	bl	8004ddc <HAL_TIM_Base_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000cec:	f000 f9a4 	bl	8001038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cf6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	481c      	ldr	r0, [pc, #112]	@ (8000d70 <MX_TIM4_Init+0xe8>)
 8000cfe:	f004 feb9 	bl	8005a74 <HAL_TIM_ConfigClockSource>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000d08:	f000 f996 	bl	8001038 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d0c:	4818      	ldr	r0, [pc, #96]	@ (8000d70 <MX_TIM4_Init+0xe8>)
 8000d0e:	f004 f9a5 	bl	800505c <HAL_TIM_PWM_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000d18:	f000 f98e 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4811      	ldr	r0, [pc, #68]	@ (8000d70 <MX_TIM4_Init+0xe8>)
 8000d2c:	f005 fc80 	bl	8006630 <HAL_TIMEx_MasterConfigSynchronization>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000d36:	f000 f97f 	bl	8001038 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d3a:	2360      	movs	r3, #96	@ 0x60
 8000d3c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8000d3e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d42:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	2200      	movs	r2, #0
 8000d50:	4619      	mov	r1, r3
 8000d52:	4807      	ldr	r0, [pc, #28]	@ (8000d70 <MX_TIM4_Init+0xe8>)
 8000d54:	f004 fd7a 	bl	800584c <HAL_TIM_PWM_ConfigChannel>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000d5e:	f000 f96b 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d62:	4803      	ldr	r0, [pc, #12]	@ (8000d70 <MX_TIM4_Init+0xe8>)
 8000d64:	f000 fb3e 	bl	80013e4 <HAL_TIM_MspPostInit>

}
 8000d68:	bf00      	nop
 8000d6a:	3738      	adds	r7, #56	@ 0x38
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	2000026c 	.word	0x2000026c
 8000d74:	40000800 	.word	0x40000800

08000d78 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08c      	sub	sp, #48	@ 0x30
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	2224      	movs	r2, #36	@ 0x24
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f006 fc66 	bl	8007658 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d96:	4b21      	ldr	r3, [pc, #132]	@ (8000e1c <MX_TIM5_Init+0xa4>)
 8000d98:	4a21      	ldr	r2, [pc, #132]	@ (8000e20 <MX_TIM5_Init+0xa8>)
 8000d9a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e1c <MX_TIM5_Init+0xa4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e1c <MX_TIM5_Init+0xa4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000da8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e1c <MX_TIM5_Init+0xa4>)
 8000daa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dae:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e1c <MX_TIM5_Init+0xa4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db6:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <MX_TIM5_Init+0xa4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	4619      	mov	r1, r3
 8000de6:	480d      	ldr	r0, [pc, #52]	@ (8000e1c <MX_TIM5_Init+0xa4>)
 8000de8:	f004 faac 	bl	8005344 <HAL_TIM_Encoder_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000df2:	f000 f921 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df6:	2300      	movs	r3, #0
 8000df8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000dfe:	463b      	mov	r3, r7
 8000e00:	4619      	mov	r1, r3
 8000e02:	4806      	ldr	r0, [pc, #24]	@ (8000e1c <MX_TIM5_Init+0xa4>)
 8000e04:	f005 fc14 	bl	8006630 <HAL_TIMEx_MasterConfigSynchronization>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000e0e:	f000 f913 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	3730      	adds	r7, #48	@ 0x30
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200002b8 	.word	0x200002b8
 8000e20:	40000c00 	.word	0x40000c00

08000e24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e2a:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <MX_DMA_Init+0x50>)
 8000e2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e2e:	4a11      	ldr	r2, [pc, #68]	@ (8000e74 <MX_DMA_Init+0x50>)
 8000e30:	f043 0304 	orr.w	r3, r3, #4
 8000e34:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e36:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <MX_DMA_Init+0x50>)
 8000e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e42:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <MX_DMA_Init+0x50>)
 8000e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e46:	4a0b      	ldr	r2, [pc, #44]	@ (8000e74 <MX_DMA_Init+0x50>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e4e:	4b09      	ldr	r3, [pc, #36]	@ (8000e74 <MX_DMA_Init+0x50>)
 8000e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	200b      	movs	r0, #11
 8000e60:	f002 fb27 	bl	80034b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e64:	200b      	movs	r0, #11
 8000e66:	f002 fb3e 	bl	80034e6 <HAL_NVIC_EnableIRQ>

}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40021000 	.word	0x40021000

08000e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	@ 0x28
 8000e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8e:	4b39      	ldr	r3, [pc, #228]	@ (8000f74 <MX_GPIO_Init+0xfc>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e92:	4a38      	ldr	r2, [pc, #224]	@ (8000f74 <MX_GPIO_Init+0xfc>)
 8000e94:	f043 0304 	orr.w	r3, r3, #4
 8000e98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e9a:	4b36      	ldr	r3, [pc, #216]	@ (8000f74 <MX_GPIO_Init+0xfc>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9e:	f003 0304 	and.w	r3, r3, #4
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ea6:	4b33      	ldr	r3, [pc, #204]	@ (8000f74 <MX_GPIO_Init+0xfc>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eaa:	4a32      	ldr	r2, [pc, #200]	@ (8000f74 <MX_GPIO_Init+0xfc>)
 8000eac:	f043 0320 	orr.w	r3, r3, #32
 8000eb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb2:	4b30      	ldr	r3, [pc, #192]	@ (8000f74 <MX_GPIO_Init+0xfc>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb6:	f003 0320 	and.w	r3, r3, #32
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	4b2d      	ldr	r3, [pc, #180]	@ (8000f74 <MX_GPIO_Init+0xfc>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec2:	4a2c      	ldr	r2, [pc, #176]	@ (8000f74 <MX_GPIO_Init+0xfc>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eca:	4b2a      	ldr	r3, [pc, #168]	@ (8000f74 <MX_GPIO_Init+0xfc>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	4b27      	ldr	r3, [pc, #156]	@ (8000f74 <MX_GPIO_Init+0xfc>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eda:	4a26      	ldr	r2, [pc, #152]	@ (8000f74 <MX_GPIO_Init+0xfc>)
 8000edc:	f043 0302 	orr.w	r3, r3, #2
 8000ee0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee2:	4b24      	ldr	r3, [pc, #144]	@ (8000f74 <MX_GPIO_Init+0xfc>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2130      	movs	r1, #48	@ 0x30
 8000ef2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ef6:	f002 ff05 	bl	8003d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2101      	movs	r1, #1
 8000efe:	481e      	ldr	r0, [pc, #120]	@ (8000f78 <MX_GPIO_Init+0x100>)
 8000f00:	f002 ff00 	bl	8003d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f0a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4818      	ldr	r0, [pc, #96]	@ (8000f7c <MX_GPIO_Init+0x104>)
 8000f1c:	f002 fd70 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8000f20:	2330      	movs	r3, #48	@ 0x30
 8000f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f3a:	f002 fd61 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	4808      	ldr	r0, [pc, #32]	@ (8000f78 <MX_GPIO_Init+0x100>)
 8000f56:	f002 fd53 	bl	8003a00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2028      	movs	r0, #40	@ 0x28
 8000f60:	f002 faa7 	bl	80034b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f64:	2028      	movs	r0, #40	@ 0x28
 8000f66:	f002 fabe 	bl	80034e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f6a:	bf00      	nop
 8000f6c:	3728      	adds	r7, #40	@ 0x28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000
 8000f78:	48000400 	.word	0x48000400
 8000f7c:	48000800 	.word	0x48000800

08000f80 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if (htim == &htim2 )
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a23      	ldr	r2, [pc, #140]	@ (8001018 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d13c      	bne.n	800100a <HAL_TIM_PeriodElapsedCallback+0x8a>
  {
	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim5);
 8000f90:	4b22      	ldr	r3, [pc, #136]	@ (800101c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f96:	ee07 3a90 	vmov	s15, r3
 8000f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f9e:	4b20      	ldr	r3, [pc, #128]	@ (8001020 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000fa0:	edc3 7a00 	vstr	s15, [r3]
	  //spd =  QEIReadRaw * 1000 / 250 * 8;
	  if(QEIReadRaw > 32678)
 8000fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8001020 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000fa6:	edd3 7a00 	vldr	s15, [r3]
 8000faa:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001024 <HAL_TIM_PeriodElapsedCallback+0xa4>
 8000fae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb6:	dd12      	ble.n	8000fde <HAL_TIM_PeriodElapsedCallback+0x5e>
	  {
		  pos -= (65536-QEIReadRaw);
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001028 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000fba:	ed93 7a00 	vldr	s14, [r3]
 8000fbe:	4b18      	ldr	r3, [pc, #96]	@ (8001020 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000fc0:	edd3 7a00 	vldr	s15, [r3]
 8000fc4:	eddf 6a19 	vldr	s13, [pc, #100]	@ 800102c <HAL_TIM_PeriodElapsedCallback+0xac>
 8000fc8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000fcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd0:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000fd2:	edc3 7a00 	vstr	s15, [r3]
		  z = 1;
 8000fd6:	4b16      	ldr	r3, [pc, #88]	@ (8001030 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	801a      	strh	r2, [r3, #0]
 8000fdc:	e00d      	b.n	8000ffa <HAL_TIM_PeriodElapsedCallback+0x7a>
	  }
	  else
	  {
		  pos += QEIReadRaw;
 8000fde:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000fe0:	ed93 7a00 	vldr	s14, [r3]
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8001020 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000fe6:	edd3 7a00 	vldr	s15, [r3]
 8000fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fee:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000ff0:	edc3 7a00 	vstr	s15, [r3]
		  z = 2;
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	801a      	strh	r2, [r3, #0]
	  }
	  QEIReadOld = QEIReadRaw;
 8000ffa:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a0d      	ldr	r2, [pc, #52]	@ (8001034 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001000:	6013      	str	r3, [r2, #0]
	  __HAL_TIM_SET_COUNTER(&htim5, 0);
 8001002:	4b06      	ldr	r3, [pc, #24]	@ (800101c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2200      	movs	r2, #0
 8001008:	625a      	str	r2, [r3, #36]	@ 0x24



  }
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	200001d4 	.word	0x200001d4
 800101c:	200002b8 	.word	0x200002b8
 8001020:	20000304 	.word	0x20000304
 8001024:	46ff4c00 	.word	0x46ff4c00
 8001028:	200004dc 	.word	0x200004dc
 800102c:	47800000 	.word	0x47800000
 8001030:	200004d8 	.word	0x200004d8
 8001034:	20000308 	.word	0x20000308

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
}
 800103e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <Error_Handler+0x8>

08001044 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104a:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <HAL_MspInit+0x44>)
 800104c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800104e:	4a0e      	ldr	r2, [pc, #56]	@ (8001088 <HAL_MspInit+0x44>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6613      	str	r3, [r2, #96]	@ 0x60
 8001056:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <HAL_MspInit+0x44>)
 8001058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <HAL_MspInit+0x44>)
 8001064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001066:	4a08      	ldr	r2, [pc, #32]	@ (8001088 <HAL_MspInit+0x44>)
 8001068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800106c:	6593      	str	r3, [r2, #88]	@ 0x58
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <HAL_MspInit+0x44>)
 8001070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800107a:	f002 ff23 	bl	8003ec4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000

0800108c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b09e      	sub	sp, #120	@ 0x78
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	2254      	movs	r2, #84	@ 0x54
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f006 fad3 	bl	8007658 <memset>
  if(hadc->Instance==ADC1)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010ba:	d167      	bne.n	800118c <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80010bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010c0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80010c2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80010c6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	4618      	mov	r0, r3
 80010ce:	f003 fc37 	bl	8004940 <HAL_RCCEx_PeriphCLKConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80010d8:	f7ff ffae 	bl	8001038 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001194 <HAL_ADC_MspInit+0x108>)
 80010de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e0:	4a2c      	ldr	r2, [pc, #176]	@ (8001194 <HAL_ADC_MspInit+0x108>)
 80010e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001194 <HAL_ADC_MspInit+0x108>)
 80010ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	4b27      	ldr	r3, [pc, #156]	@ (8001194 <HAL_ADC_MspInit+0x108>)
 80010f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f8:	4a26      	ldr	r2, [pc, #152]	@ (8001194 <HAL_ADC_MspInit+0x108>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001100:	4b24      	ldr	r3, [pc, #144]	@ (8001194 <HAL_ADC_MspInit+0x108>)
 8001102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800110c:	2303      	movs	r3, #3
 800110e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001110:	2303      	movs	r3, #3
 8001112:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800111c:	4619      	mov	r1, r3
 800111e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001122:	f002 fc6d 	bl	8003a00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001126:	4b1c      	ldr	r3, [pc, #112]	@ (8001198 <HAL_ADC_MspInit+0x10c>)
 8001128:	4a1c      	ldr	r2, [pc, #112]	@ (800119c <HAL_ADC_MspInit+0x110>)
 800112a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800112c:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <HAL_ADC_MspInit+0x10c>)
 800112e:	2205      	movs	r2, #5
 8001130:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001132:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <HAL_ADC_MspInit+0x10c>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001138:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <HAL_ADC_MspInit+0x10c>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800113e:	4b16      	ldr	r3, [pc, #88]	@ (8001198 <HAL_ADC_MspInit+0x10c>)
 8001140:	2280      	movs	r2, #128	@ 0x80
 8001142:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001144:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <HAL_ADC_MspInit+0x10c>)
 8001146:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800114a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800114c:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <HAL_ADC_MspInit+0x10c>)
 800114e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001152:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001154:	4b10      	ldr	r3, [pc, #64]	@ (8001198 <HAL_ADC_MspInit+0x10c>)
 8001156:	2220      	movs	r2, #32
 8001158:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800115a:	4b0f      	ldr	r3, [pc, #60]	@ (8001198 <HAL_ADC_MspInit+0x10c>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001160:	480d      	ldr	r0, [pc, #52]	@ (8001198 <HAL_ADC_MspInit+0x10c>)
 8001162:	f002 f9db 	bl	800351c <HAL_DMA_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800116c:	f7ff ff64 	bl	8001038 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a09      	ldr	r2, [pc, #36]	@ (8001198 <HAL_ADC_MspInit+0x10c>)
 8001174:	655a      	str	r2, [r3, #84]	@ 0x54
 8001176:	4a08      	ldr	r2, [pc, #32]	@ (8001198 <HAL_ADC_MspInit+0x10c>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	2012      	movs	r0, #18
 8001182:	f002 f996 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001186:	2012      	movs	r0, #18
 8001188:	f002 f9ad 	bl	80034e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800118c:	bf00      	nop
 800118e:	3778      	adds	r7, #120	@ 0x78
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40021000 	.word	0x40021000
 8001198:	20000094 	.word	0x20000094
 800119c:	40020008 	.word	0x40020008

080011a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b09e      	sub	sp, #120	@ 0x78
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	2254      	movs	r2, #84	@ 0x54
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f006 fa49 	bl	8007658 <memset>
  if(huart->Instance==LPUART1)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001248 <HAL_UART_MspInit+0xa8>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d136      	bne.n	800123e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80011d0:	2320      	movs	r3, #32
 80011d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	4618      	mov	r0, r3
 80011de:	f003 fbaf 	bl	8004940 <HAL_RCCEx_PeriphCLKConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011e8:	f7ff ff26 	bl	8001038 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80011ec:	4b17      	ldr	r3, [pc, #92]	@ (800124c <HAL_UART_MspInit+0xac>)
 80011ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011f0:	4a16      	ldr	r2, [pc, #88]	@ (800124c <HAL_UART_MspInit+0xac>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80011f8:	4b14      	ldr	r3, [pc, #80]	@ (800124c <HAL_UART_MspInit+0xac>)
 80011fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001204:	4b11      	ldr	r3, [pc, #68]	@ (800124c <HAL_UART_MspInit+0xac>)
 8001206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001208:	4a10      	ldr	r2, [pc, #64]	@ (800124c <HAL_UART_MspInit+0xac>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001210:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <HAL_UART_MspInit+0xac>)
 8001212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800121c:	230c      	movs	r3, #12
 800121e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800122c:	230c      	movs	r3, #12
 800122e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001230:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001234:	4619      	mov	r1, r3
 8001236:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800123a:	f002 fbe1 	bl	8003a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800123e:	bf00      	nop
 8001240:	3778      	adds	r7, #120	@ 0x78
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40008000 	.word	0x40008000
 800124c:	40021000 	.word	0x40021000

08001250 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a2c      	ldr	r2, [pc, #176]	@ (8001310 <HAL_TIM_Base_MspInit+0xc0>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d10c      	bne.n	800127c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001262:	4b2c      	ldr	r3, [pc, #176]	@ (8001314 <HAL_TIM_Base_MspInit+0xc4>)
 8001264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001266:	4a2b      	ldr	r2, [pc, #172]	@ (8001314 <HAL_TIM_Base_MspInit+0xc4>)
 8001268:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800126c:	6613      	str	r3, [r2, #96]	@ 0x60
 800126e:	4b29      	ldr	r3, [pc, #164]	@ (8001314 <HAL_TIM_Base_MspInit+0xc4>)
 8001270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001272:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800127a:	e044      	b.n	8001306 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001284:	d114      	bne.n	80012b0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001286:	4b23      	ldr	r3, [pc, #140]	@ (8001314 <HAL_TIM_Base_MspInit+0xc4>)
 8001288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800128a:	4a22      	ldr	r2, [pc, #136]	@ (8001314 <HAL_TIM_Base_MspInit+0xc4>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6593      	str	r3, [r2, #88]	@ 0x58
 8001292:	4b20      	ldr	r3, [pc, #128]	@ (8001314 <HAL_TIM_Base_MspInit+0xc4>)
 8001294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	201c      	movs	r0, #28
 80012a4:	f002 f905 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012a8:	201c      	movs	r0, #28
 80012aa:	f002 f91c 	bl	80034e6 <HAL_NVIC_EnableIRQ>
}
 80012ae:	e02a      	b.n	8001306 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a18      	ldr	r2, [pc, #96]	@ (8001318 <HAL_TIM_Base_MspInit+0xc8>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d114      	bne.n	80012e4 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ba:	4b16      	ldr	r3, [pc, #88]	@ (8001314 <HAL_TIM_Base_MspInit+0xc4>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012be:	4a15      	ldr	r2, [pc, #84]	@ (8001314 <HAL_TIM_Base_MspInit+0xc4>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012c6:	4b13      	ldr	r3, [pc, #76]	@ (8001314 <HAL_TIM_Base_MspInit+0xc4>)
 80012c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2100      	movs	r1, #0
 80012d6:	201d      	movs	r0, #29
 80012d8:	f002 f8eb 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012dc:	201d      	movs	r0, #29
 80012de:	f002 f902 	bl	80034e6 <HAL_NVIC_EnableIRQ>
}
 80012e2:	e010      	b.n	8001306 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0c      	ldr	r2, [pc, #48]	@ (800131c <HAL_TIM_Base_MspInit+0xcc>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d10b      	bne.n	8001306 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012ee:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <HAL_TIM_Base_MspInit+0xc4>)
 80012f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f2:	4a08      	ldr	r2, [pc, #32]	@ (8001314 <HAL_TIM_Base_MspInit+0xc4>)
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80012fa:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <HAL_TIM_Base_MspInit+0xc4>)
 80012fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
}
 8001306:	bf00      	nop
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40012c00 	.word	0x40012c00
 8001314:	40021000 	.word	0x40021000
 8001318:	40000400 	.word	0x40000400
 800131c:	40000800 	.word	0x40000800

08001320 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	@ 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a25      	ldr	r2, [pc, #148]	@ (80013d4 <HAL_TIM_Encoder_MspInit+0xb4>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d144      	bne.n	80013cc <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001342:	4b25      	ldr	r3, [pc, #148]	@ (80013d8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001346:	4a24      	ldr	r2, [pc, #144]	@ (80013d8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001348:	f043 0308 	orr.w	r3, r3, #8
 800134c:	6593      	str	r3, [r2, #88]	@ 0x58
 800134e:	4b22      	ldr	r3, [pc, #136]	@ (80013d8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135a:	4b1f      	ldr	r3, [pc, #124]	@ (80013d8 <HAL_TIM_Encoder_MspInit+0xb8>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135e:	4a1e      	ldr	r2, [pc, #120]	@ (80013d8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001366:	4b1c      	ldr	r3, [pc, #112]	@ (80013d8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	4b19      	ldr	r3, [pc, #100]	@ (80013d8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	4a18      	ldr	r2, [pc, #96]	@ (80013d8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800137e:	4b16      	ldr	r3, [pc, #88]	@ (80013d8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PB2     ------> TIM5_CH1
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800138a:	2304      	movs	r3, #4
 800138c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800139a:	2302      	movs	r3, #2
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	480d      	ldr	r0, [pc, #52]	@ (80013dc <HAL_TIM_Encoder_MspInit+0xbc>)
 80013a6:	f002 fb2b 	bl	8003a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 80013bc:	2301      	movs	r3, #1
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	4806      	ldr	r0, [pc, #24]	@ (80013e0 <HAL_TIM_Encoder_MspInit+0xc0>)
 80013c8:	f002 fb1a 	bl	8003a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80013cc:	bf00      	nop
 80013ce:	3728      	adds	r7, #40	@ 0x28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40000c00 	.word	0x40000c00
 80013d8:	40021000 	.word	0x40021000
 80013dc:	48000400 	.word	0x48000400
 80013e0:	48000800 	.word	0x48000800

080013e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	@ 0x28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a23      	ldr	r2, [pc, #140]	@ (8001490 <HAL_TIM_MspPostInit+0xac>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d11c      	bne.n	8001440 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001406:	4b23      	ldr	r3, [pc, #140]	@ (8001494 <HAL_TIM_MspPostInit+0xb0>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140a:	4a22      	ldr	r2, [pc, #136]	@ (8001494 <HAL_TIM_MspPostInit+0xb0>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001412:	4b20      	ldr	r3, [pc, #128]	@ (8001494 <HAL_TIM_MspPostInit+0xb0>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800141e:	2301      	movs	r3, #1
 8001420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800142e:	2302      	movs	r3, #2
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	4817      	ldr	r0, [pc, #92]	@ (8001498 <HAL_TIM_MspPostInit+0xb4>)
 800143a:	f002 fae1 	bl	8003a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800143e:	e022      	b.n	8001486 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a15      	ldr	r2, [pc, #84]	@ (800149c <HAL_TIM_MspPostInit+0xb8>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d11d      	bne.n	8001486 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <HAL_TIM_MspPostInit+0xb0>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144e:	4a11      	ldr	r2, [pc, #68]	@ (8001494 <HAL_TIM_MspPostInit+0xb0>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001456:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <HAL_TIM_MspPostInit+0xb0>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001462:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001474:	230a      	movs	r3, #10
 8001476:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001482:	f002 fabd 	bl	8003a00 <HAL_GPIO_Init>
}
 8001486:	bf00      	nop
 8001488:	3728      	adds	r7, #40	@ 0x28
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40012c00 	.word	0x40012c00
 8001494:	40021000 	.word	0x40021000
 8001498:	48000800 	.word	0x48000800
 800149c:	40000800 	.word	0x40000800

080014a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <NMI_Handler+0x4>

080014a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <HardFault_Handler+0x4>

080014b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <MemManage_Handler+0x4>

080014b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <BusFault_Handler+0x4>

080014c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <UsageFault_Handler+0x4>

080014c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f6:	f000 f8c1 	bl	800167c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001504:	4802      	ldr	r0, [pc, #8]	@ (8001510 <DMA1_Channel1_IRQHandler+0x10>)
 8001506:	f002 f92c 	bl	8003762 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000094 	.word	0x20000094

08001514 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001518:	4802      	ldr	r0, [pc, #8]	@ (8001524 <ADC1_2_IRQHandler+0x10>)
 800151a:	f000 fd9d 	bl	8002058 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000028 	.word	0x20000028

08001528 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800152c:	4802      	ldr	r0, [pc, #8]	@ (8001538 <TIM2_IRQHandler+0x10>)
 800152e:	f004 f83d 	bl	80055ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200001d4 	.word	0x200001d4

0800153c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001540:	4802      	ldr	r0, [pc, #8]	@ (800154c <TIM3_IRQHandler+0x10>)
 8001542:	f004 f833 	bl	80055ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000220 	.word	0x20000220

08001550 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001554:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001558:	f002 fbec 	bl	8003d34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}

08001560 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001564:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <SystemInit+0x20>)
 8001566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800156a:	4a05      	ldr	r2, [pc, #20]	@ (8001580 <SystemInit+0x20>)
 800156c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001570:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001584:	480d      	ldr	r0, [pc, #52]	@ (80015bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001586:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001588:	f7ff ffea 	bl	8001560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800158c:	480c      	ldr	r0, [pc, #48]	@ (80015c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800158e:	490d      	ldr	r1, [pc, #52]	@ (80015c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001590:	4a0d      	ldr	r2, [pc, #52]	@ (80015c8 <LoopForever+0xe>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001594:	e002      	b.n	800159c <LoopCopyDataInit>

08001596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159a:	3304      	adds	r3, #4

0800159c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800159c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a0:	d3f9      	bcc.n	8001596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a2:	4a0a      	ldr	r2, [pc, #40]	@ (80015cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80015a4:	4c0a      	ldr	r4, [pc, #40]	@ (80015d0 <LoopForever+0x16>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a8:	e001      	b.n	80015ae <LoopFillZerobss>

080015aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ac:	3204      	adds	r2, #4

080015ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b0:	d3fb      	bcc.n	80015aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015b2:	f006 f859 	bl	8007668 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015b6:	f7fe ffa7 	bl	8000508 <main>

080015ba <LoopForever>:

LoopForever:
    b LoopForever
 80015ba:	e7fe      	b.n	80015ba <LoopForever>
  ldr   r0, =_estack
 80015bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015c8:	08007718 	.word	0x08007718
  ldr r2, =_sbss
 80015cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015d0:	200004f0 	.word	0x200004f0

080015d4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015d4:	e7fe      	b.n	80015d4 <ADC3_IRQHandler>

080015d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e0:	2003      	movs	r0, #3
 80015e2:	f001 ff5b 	bl	800349c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015e6:	2000      	movs	r0, #0
 80015e8:	f000 f80e 	bl	8001608 <HAL_InitTick>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d002      	beq.n	80015f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	71fb      	strb	r3, [r7, #7]
 80015f6:	e001      	b.n	80015fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015f8:	f7ff fd24 	bl	8001044 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015fc:	79fb      	ldrb	r3, [r7, #7]

}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001610:	2300      	movs	r3, #0
 8001612:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001614:	4b16      	ldr	r3, [pc, #88]	@ (8001670 <HAL_InitTick+0x68>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d022      	beq.n	8001662 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800161c:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <HAL_InitTick+0x6c>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <HAL_InitTick+0x68>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001628:	fbb1 f3f3 	udiv	r3, r1, r3
 800162c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001630:	4618      	mov	r0, r3
 8001632:	f001 ff66 	bl	8003502 <HAL_SYSTICK_Config>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d10f      	bne.n	800165c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b0f      	cmp	r3, #15
 8001640:	d809      	bhi.n	8001656 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001642:	2200      	movs	r2, #0
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	f04f 30ff 	mov.w	r0, #4294967295
 800164a:	f001 ff32 	bl	80034b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800164e:	4a0a      	ldr	r2, [pc, #40]	@ (8001678 <HAL_InitTick+0x70>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	e007      	b.n	8001666 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	73fb      	strb	r3, [r7, #15]
 800165a:	e004      	b.n	8001666 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
 8001660:	e001      	b.n	8001666 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001666:	7bfb      	ldrb	r3, [r7, #15]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000008 	.word	0x20000008
 8001674:	20000000 	.word	0x20000000
 8001678:	20000004 	.word	0x20000004

0800167c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001680:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <HAL_IncTick+0x1c>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b05      	ldr	r3, [pc, #20]	@ (800169c <HAL_IncTick+0x20>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4413      	add	r3, r2
 800168a:	4a03      	ldr	r2, [pc, #12]	@ (8001698 <HAL_IncTick+0x1c>)
 800168c:	6013      	str	r3, [r2, #0]
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	200004ec 	.word	0x200004ec
 800169c:	20000008 	.word	0x20000008

080016a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return uwTick;
 80016a4:	4b03      	ldr	r3, [pc, #12]	@ (80016b4 <HAL_GetTick+0x14>)
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	200004ec 	.word	0x200004ec

080016b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	431a      	orrs	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	609a      	str	r2, [r3, #8]
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	609a      	str	r2, [r3, #8]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001720:	b480      	push	{r7}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
 800172c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	3360      	adds	r3, #96	@ 0x60
 8001732:	461a      	mov	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <LL_ADC_SetOffset+0x44>)
 8001742:	4013      	ands	r3, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	4313      	orrs	r3, r2
 8001750:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001758:	bf00      	nop
 800175a:	371c      	adds	r7, #28
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	03fff000 	.word	0x03fff000

08001768 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3360      	adds	r3, #96	@ 0x60
 8001776:	461a      	mov	r2, r3
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001788:	4618      	mov	r0, r3
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001794:	b480      	push	{r7}
 8001796:	b087      	sub	sp, #28
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	3360      	adds	r3, #96	@ 0x60
 80017a4:	461a      	mov	r2, r3
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	431a      	orrs	r2, r3
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017be:	bf00      	nop
 80017c0:	371c      	adds	r7, #28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b087      	sub	sp, #28
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	3360      	adds	r3, #96	@ 0x60
 80017da:	461a      	mov	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	431a      	orrs	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80017f4:	bf00      	nop
 80017f6:	371c      	adds	r7, #28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001800:	b480      	push	{r7}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3360      	adds	r3, #96	@ 0x60
 8001810:	461a      	mov	r2, r3
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	431a      	orrs	r2, r3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800182a:	bf00      	nop
 800182c:	371c      	adds	r7, #28
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	615a      	str	r2, [r3, #20]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001870:	2301      	movs	r3, #1
 8001872:	e000      	b.n	8001876 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001882:	b480      	push	{r7}
 8001884:	b087      	sub	sp, #28
 8001886:	af00      	add	r7, sp, #0
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	3330      	adds	r3, #48	@ 0x30
 8001892:	461a      	mov	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	0a1b      	lsrs	r3, r3, #8
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	4413      	add	r3, r2
 80018a0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	f003 031f 	and.w	r3, r3, #31
 80018ac:	211f      	movs	r1, #31
 80018ae:	fa01 f303 	lsl.w	r3, r1, r3
 80018b2:	43db      	mvns	r3, r3
 80018b4:	401a      	ands	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	0e9b      	lsrs	r3, r3, #26
 80018ba:	f003 011f 	and.w	r1, r3, #31
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	f003 031f 	and.w	r3, r3, #31
 80018c4:	fa01 f303 	lsl.w	r3, r1, r3
 80018c8:	431a      	orrs	r2, r3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018ce:	bf00      	nop
 80018d0:	371c      	adds	r7, #28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80018ee:	2301      	movs	r3, #1
 80018f0:	e000      	b.n	80018f4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001900:	b480      	push	{r7}
 8001902:	b087      	sub	sp, #28
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	3314      	adds	r3, #20
 8001910:	461a      	mov	r2, r3
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	0e5b      	lsrs	r3, r3, #25
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	4413      	add	r3, r2
 800191e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	0d1b      	lsrs	r3, r3, #20
 8001928:	f003 031f 	and.w	r3, r3, #31
 800192c:	2107      	movs	r1, #7
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	401a      	ands	r2, r3
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	0d1b      	lsrs	r3, r3, #20
 800193a:	f003 031f 	and.w	r3, r3, #31
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	fa01 f303 	lsl.w	r3, r1, r3
 8001944:	431a      	orrs	r2, r3
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800194a:	bf00      	nop
 800194c:	371c      	adds	r7, #28
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001970:	43db      	mvns	r3, r3
 8001972:	401a      	ands	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f003 0318 	and.w	r3, r3, #24
 800197a:	4908      	ldr	r1, [pc, #32]	@ (800199c <LL_ADC_SetChannelSingleDiff+0x44>)
 800197c:	40d9      	lsrs	r1, r3
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	400b      	ands	r3, r1
 8001982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001986:	431a      	orrs	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800198e:	bf00      	nop
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	0007ffff 	.word	0x0007ffff

080019a0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 031f 	and.w	r3, r3, #31
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80019e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6093      	str	r3, [r2, #8]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a10:	d101      	bne.n	8001a16 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001a34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a38:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001a60:	d101      	bne.n	8001a66 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a88:	f043 0201 	orr.w	r2, r3, #1
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d101      	bne.n	8001ab4 <LL_ADC_IsEnabled+0x18>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <LL_ADC_IsEnabled+0x1a>
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ad2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ad6:	f043 0204 	orr.w	r2, r3, #4
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d101      	bne.n	8001b02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 0308 	and.w	r3, r3, #8
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d101      	bne.n	8001b28 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b089      	sub	sp, #36	@ 0x24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e1a9      	b.n	8001ea6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d109      	bne.n	8001b74 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff fa93 	bl	800108c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff3f 	bl	80019fc <LL_ADC_IsDeepPowerDownEnabled>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d004      	beq.n	8001b8e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff25 	bl	80019d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff ff5a 	bl	8001a4c <LL_ADC_IsInternalRegulatorEnabled>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d115      	bne.n	8001bca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ff3e 	bl	8001a24 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ba8:	4b9c      	ldr	r3, [pc, #624]	@ (8001e1c <HAL_ADC_Init+0x2e4>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	099b      	lsrs	r3, r3, #6
 8001bae:	4a9c      	ldr	r2, [pc, #624]	@ (8001e20 <HAL_ADC_Init+0x2e8>)
 8001bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb4:	099b      	lsrs	r3, r3, #6
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bbc:	e002      	b.n	8001bc4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f9      	bne.n	8001bbe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff ff3c 	bl	8001a4c <LL_ADC_IsInternalRegulatorEnabled>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10d      	bne.n	8001bf6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bde:	f043 0210 	orr.w	r2, r3, #16
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bea:	f043 0201 	orr.w	r2, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff ff75 	bl	8001aea <LL_ADC_REG_IsConversionOngoing>
 8001c00:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c06:	f003 0310 	and.w	r3, r3, #16
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f040 8142 	bne.w	8001e94 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f040 813e 	bne.w	8001e94 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c20:	f043 0202 	orr.w	r2, r3, #2
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff35 	bl	8001a9c <LL_ADC_IsEnabled>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d141      	bne.n	8001cbc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c40:	d004      	beq.n	8001c4c <HAL_ADC_Init+0x114>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a77      	ldr	r2, [pc, #476]	@ (8001e24 <HAL_ADC_Init+0x2ec>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d10f      	bne.n	8001c6c <HAL_ADC_Init+0x134>
 8001c4c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001c50:	f7ff ff24 	bl	8001a9c <LL_ADC_IsEnabled>
 8001c54:	4604      	mov	r4, r0
 8001c56:	4873      	ldr	r0, [pc, #460]	@ (8001e24 <HAL_ADC_Init+0x2ec>)
 8001c58:	f7ff ff20 	bl	8001a9c <LL_ADC_IsEnabled>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4323      	orrs	r3, r4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	bf0c      	ite	eq
 8001c64:	2301      	moveq	r3, #1
 8001c66:	2300      	movne	r3, #0
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	e012      	b.n	8001c92 <HAL_ADC_Init+0x15a>
 8001c6c:	486e      	ldr	r0, [pc, #440]	@ (8001e28 <HAL_ADC_Init+0x2f0>)
 8001c6e:	f7ff ff15 	bl	8001a9c <LL_ADC_IsEnabled>
 8001c72:	4604      	mov	r4, r0
 8001c74:	486d      	ldr	r0, [pc, #436]	@ (8001e2c <HAL_ADC_Init+0x2f4>)
 8001c76:	f7ff ff11 	bl	8001a9c <LL_ADC_IsEnabled>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	431c      	orrs	r4, r3
 8001c7e:	486c      	ldr	r0, [pc, #432]	@ (8001e30 <HAL_ADC_Init+0x2f8>)
 8001c80:	f7ff ff0c 	bl	8001a9c <LL_ADC_IsEnabled>
 8001c84:	4603      	mov	r3, r0
 8001c86:	4323      	orrs	r3, r4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bf0c      	ite	eq
 8001c8c:	2301      	moveq	r3, #1
 8001c8e:	2300      	movne	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d012      	beq.n	8001cbc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c9e:	d004      	beq.n	8001caa <HAL_ADC_Init+0x172>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a5f      	ldr	r2, [pc, #380]	@ (8001e24 <HAL_ADC_Init+0x2ec>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d101      	bne.n	8001cae <HAL_ADC_Init+0x176>
 8001caa:	4a62      	ldr	r2, [pc, #392]	@ (8001e34 <HAL_ADC_Init+0x2fc>)
 8001cac:	e000      	b.n	8001cb0 <HAL_ADC_Init+0x178>
 8001cae:	4a62      	ldr	r2, [pc, #392]	@ (8001e38 <HAL_ADC_Init+0x300>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	f7ff fcfe 	bl	80016b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	7f5b      	ldrb	r3, [r3, #29]
 8001cc0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cc6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001ccc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001cd2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001cda:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d106      	bne.n	8001cf8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	045b      	lsls	r3, r3, #17
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d009      	beq.n	8001d14 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d04:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68da      	ldr	r2, [r3, #12]
 8001d1a:	4b48      	ldr	r3, [pc, #288]	@ (8001e3c <HAL_ADC_Init+0x304>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6812      	ldr	r2, [r2, #0]
 8001d22:	69b9      	ldr	r1, [r7, #24]
 8001d24:	430b      	orrs	r3, r1
 8001d26:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fee4 	bl	8001b10 <LL_ADC_INJ_IsConversionOngoing>
 8001d48:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d17f      	bne.n	8001e50 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d17c      	bne.n	8001e50 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d5a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d62:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d72:	f023 0302 	bic.w	r3, r3, #2
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	69b9      	ldr	r1, [r7, #24]
 8001d7c:	430b      	orrs	r3, r1
 8001d7e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d017      	beq.n	8001db8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691a      	ldr	r2, [r3, #16]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001d96:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001da0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001da4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6911      	ldr	r1, [r2, #16]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	430b      	orrs	r3, r1
 8001db2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001db6:	e013      	b.n	8001de0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	691a      	ldr	r2, [r3, #16]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001dc6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001dd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ddc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d12a      	bne.n	8001e40 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001df4:	f023 0304 	bic.w	r3, r3, #4
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e00:	4311      	orrs	r1, r2
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001e06:	4311      	orrs	r1, r2
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f042 0201 	orr.w	r2, r2, #1
 8001e18:	611a      	str	r2, [r3, #16]
 8001e1a:	e019      	b.n	8001e50 <HAL_ADC_Init+0x318>
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	053e2d63 	.word	0x053e2d63
 8001e24:	50000100 	.word	0x50000100
 8001e28:	50000400 	.word	0x50000400
 8001e2c:	50000500 	.word	0x50000500
 8001e30:	50000600 	.word	0x50000600
 8001e34:	50000300 	.word	0x50000300
 8001e38:	50000700 	.word	0x50000700
 8001e3c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691a      	ldr	r2, [r3, #16]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0201 	bic.w	r2, r2, #1
 8001e4e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d10c      	bne.n	8001e72 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	f023 010f 	bic.w	r1, r3, #15
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	1e5a      	subs	r2, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e70:	e007      	b.n	8001e82 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 020f 	bic.w	r2, r2, #15
 8001e80:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e86:	f023 0303 	bic.w	r3, r3, #3
 8001e8a:	f043 0201 	orr.w	r2, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e92:	e007      	b.n	8001ea4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e98:	f043 0210 	orr.w	r2, r3, #16
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ea4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3724      	adds	r7, #36	@ 0x24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd90      	pop	{r4, r7, pc}
 8001eae:	bf00      	nop

08001eb0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ec4:	d004      	beq.n	8001ed0 <HAL_ADC_Start_DMA+0x20>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a5a      	ldr	r2, [pc, #360]	@ (8002034 <HAL_ADC_Start_DMA+0x184>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d101      	bne.n	8001ed4 <HAL_ADC_Start_DMA+0x24>
 8001ed0:	4b59      	ldr	r3, [pc, #356]	@ (8002038 <HAL_ADC_Start_DMA+0x188>)
 8001ed2:	e000      	b.n	8001ed6 <HAL_ADC_Start_DMA+0x26>
 8001ed4:	4b59      	ldr	r3, [pc, #356]	@ (800203c <HAL_ADC_Start_DMA+0x18c>)
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fd62 	bl	80019a0 <LL_ADC_GetMultimode>
 8001edc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fe01 	bl	8001aea <LL_ADC_REG_IsConversionOngoing>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f040 809b 	bne.w	8002026 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <HAL_ADC_Start_DMA+0x4e>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e096      	b.n	800202c <HAL_ADC_Start_DMA+0x17c>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a4d      	ldr	r2, [pc, #308]	@ (8002040 <HAL_ADC_Start_DMA+0x190>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d008      	beq.n	8001f22 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d005      	beq.n	8001f22 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	2b05      	cmp	r3, #5
 8001f1a:	d002      	beq.n	8001f22 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	2b09      	cmp	r3, #9
 8001f20:	d17a      	bne.n	8002018 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 ff60 	bl	8002de8 <ADC_Enable>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001f2c:	7dfb      	ldrb	r3, [r7, #23]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d16d      	bne.n	800200e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f36:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f3a:	f023 0301 	bic.w	r3, r3, #1
 8001f3e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a3a      	ldr	r2, [pc, #232]	@ (8002034 <HAL_ADC_Start_DMA+0x184>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d009      	beq.n	8001f64 <HAL_ADC_Start_DMA+0xb4>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a3b      	ldr	r2, [pc, #236]	@ (8002044 <HAL_ADC_Start_DMA+0x194>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d002      	beq.n	8001f60 <HAL_ADC_Start_DMA+0xb0>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	e003      	b.n	8001f68 <HAL_ADC_Start_DMA+0xb8>
 8001f60:	4b39      	ldr	r3, [pc, #228]	@ (8002048 <HAL_ADC_Start_DMA+0x198>)
 8001f62:	e001      	b.n	8001f68 <HAL_ADC_Start_DMA+0xb8>
 8001f64:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	6812      	ldr	r2, [r2, #0]
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d002      	beq.n	8001f76 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d105      	bne.n	8001f82 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f7a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d006      	beq.n	8001f9c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f92:	f023 0206 	bic.w	r2, r3, #6
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	661a      	str	r2, [r3, #96]	@ 0x60
 8001f9a:	e002      	b.n	8001fa2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa6:	4a29      	ldr	r2, [pc, #164]	@ (800204c <HAL_ADC_Start_DMA+0x19c>)
 8001fa8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fae:	4a28      	ldr	r2, [pc, #160]	@ (8002050 <HAL_ADC_Start_DMA+0x1a0>)
 8001fb0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb6:	4a27      	ldr	r2, [pc, #156]	@ (8002054 <HAL_ADC_Start_DMA+0x1a4>)
 8001fb8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	221c      	movs	r2, #28
 8001fc0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f042 0210 	orr.w	r2, r2, #16
 8001fd8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f042 0201 	orr.w	r2, r2, #1
 8001fe8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	3340      	adds	r3, #64	@ 0x40
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f001 fb37 	bl	800366c <HAL_DMA_Start_IT>
 8001ffe:	4603      	mov	r3, r0
 8002000:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fd5b 	bl	8001ac2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800200c:	e00d      	b.n	800202a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002016:	e008      	b.n	800202a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002024:	e001      	b.n	800202a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002026:	2302      	movs	r3, #2
 8002028:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800202a:	7dfb      	ldrb	r3, [r7, #23]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	50000100 	.word	0x50000100
 8002038:	50000300 	.word	0x50000300
 800203c:	50000700 	.word	0x50000700
 8002040:	50000600 	.word	0x50000600
 8002044:	50000500 	.word	0x50000500
 8002048:	50000400 	.word	0x50000400
 800204c:	08002f15 	.word	0x08002f15
 8002050:	08002fed 	.word	0x08002fed
 8002054:	08003009 	.word	0x08003009

08002058 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	@ 0x28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002060:	2300      	movs	r3, #0
 8002062:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800207c:	d004      	beq.n	8002088 <HAL_ADC_IRQHandler+0x30>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a8e      	ldr	r2, [pc, #568]	@ (80022bc <HAL_ADC_IRQHandler+0x264>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d101      	bne.n	800208c <HAL_ADC_IRQHandler+0x34>
 8002088:	4b8d      	ldr	r3, [pc, #564]	@ (80022c0 <HAL_ADC_IRQHandler+0x268>)
 800208a:	e000      	b.n	800208e <HAL_ADC_IRQHandler+0x36>
 800208c:	4b8d      	ldr	r3, [pc, #564]	@ (80022c4 <HAL_ADC_IRQHandler+0x26c>)
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fc86 	bl	80019a0 <LL_ADC_GetMultimode>
 8002094:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d017      	beq.n	80020d0 <HAL_ADC_IRQHandler+0x78>
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d012      	beq.n	80020d0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d105      	bne.n	80020c2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ba:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f001 f808 	bl	80030d8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2202      	movs	r2, #2
 80020ce:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d004      	beq.n	80020e4 <HAL_ADC_IRQHandler+0x8c>
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10b      	bne.n	80020fc <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 8094 	beq.w	8002218 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 808e 	beq.w	8002218 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	2b00      	cmp	r3, #0
 8002106:	d105      	bne.n	8002114 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fb9f 	bl	800185c <LL_ADC_REG_IsTriggerSourceSWStart>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d072      	beq.n	800220a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a64      	ldr	r2, [pc, #400]	@ (80022bc <HAL_ADC_IRQHandler+0x264>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d009      	beq.n	8002142 <HAL_ADC_IRQHandler+0xea>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a65      	ldr	r2, [pc, #404]	@ (80022c8 <HAL_ADC_IRQHandler+0x270>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d002      	beq.n	800213e <HAL_ADC_IRQHandler+0xe6>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	e003      	b.n	8002146 <HAL_ADC_IRQHandler+0xee>
 800213e:	4b63      	ldr	r3, [pc, #396]	@ (80022cc <HAL_ADC_IRQHandler+0x274>)
 8002140:	e001      	b.n	8002146 <HAL_ADC_IRQHandler+0xee>
 8002142:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	4293      	cmp	r3, r2
 800214c:	d008      	beq.n	8002160 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	2b05      	cmp	r3, #5
 8002158:	d002      	beq.n	8002160 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2b09      	cmp	r3, #9
 800215e:	d104      	bne.n	800216a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	623b      	str	r3, [r7, #32]
 8002168:	e014      	b.n	8002194 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a53      	ldr	r2, [pc, #332]	@ (80022bc <HAL_ADC_IRQHandler+0x264>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d009      	beq.n	8002188 <HAL_ADC_IRQHandler+0x130>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a53      	ldr	r2, [pc, #332]	@ (80022c8 <HAL_ADC_IRQHandler+0x270>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d002      	beq.n	8002184 <HAL_ADC_IRQHandler+0x12c>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	e003      	b.n	800218c <HAL_ADC_IRQHandler+0x134>
 8002184:	4b51      	ldr	r3, [pc, #324]	@ (80022cc <HAL_ADC_IRQHandler+0x274>)
 8002186:	e001      	b.n	800218c <HAL_ADC_IRQHandler+0x134>
 8002188:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800218c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d135      	bne.n	800220a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d12e      	bne.n	800220a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fc9a 	bl	8001aea <LL_ADC_REG_IsConversionOngoing>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d11a      	bne.n	80021f2 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 020c 	bic.w	r2, r2, #12
 80021ca:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d112      	bne.n	800220a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e8:	f043 0201 	orr.w	r2, r3, #1
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021f0:	e00b      	b.n	800220a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f6:	f043 0210 	orr.w	r2, r3, #16
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002202:	f043 0201 	orr.w	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f984 	bl	8002518 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	220c      	movs	r2, #12
 8002216:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	2b00      	cmp	r3, #0
 8002220:	d004      	beq.n	800222c <HAL_ADC_IRQHandler+0x1d4>
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	f003 0320 	and.w	r3, r3, #32
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10b      	bne.n	8002244 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 80b3 	beq.w	800239e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 80ad 	beq.w	800239e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002248:	f003 0310 	and.w	r3, r3, #16
 800224c:	2b00      	cmp	r3, #0
 800224e:	d105      	bne.n	800225c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002254:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fb3a 	bl	80018da <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002266:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff faf5 	bl	800185c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002272:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a10      	ldr	r2, [pc, #64]	@ (80022bc <HAL_ADC_IRQHandler+0x264>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d009      	beq.n	8002292 <HAL_ADC_IRQHandler+0x23a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a11      	ldr	r2, [pc, #68]	@ (80022c8 <HAL_ADC_IRQHandler+0x270>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d002      	beq.n	800228e <HAL_ADC_IRQHandler+0x236>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	e003      	b.n	8002296 <HAL_ADC_IRQHandler+0x23e>
 800228e:	4b0f      	ldr	r3, [pc, #60]	@ (80022cc <HAL_ADC_IRQHandler+0x274>)
 8002290:	e001      	b.n	8002296 <HAL_ADC_IRQHandler+0x23e>
 8002292:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	4293      	cmp	r3, r2
 800229c:	d008      	beq.n	80022b0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2b06      	cmp	r3, #6
 80022a8:	d002      	beq.n	80022b0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2b07      	cmp	r3, #7
 80022ae:	d10f      	bne.n	80022d0 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	623b      	str	r3, [r7, #32]
 80022b8:	e01f      	b.n	80022fa <HAL_ADC_IRQHandler+0x2a2>
 80022ba:	bf00      	nop
 80022bc:	50000100 	.word	0x50000100
 80022c0:	50000300 	.word	0x50000300
 80022c4:	50000700 	.word	0x50000700
 80022c8:	50000500 	.word	0x50000500
 80022cc:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a8b      	ldr	r2, [pc, #556]	@ (8002504 <HAL_ADC_IRQHandler+0x4ac>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d009      	beq.n	80022ee <HAL_ADC_IRQHandler+0x296>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a8a      	ldr	r2, [pc, #552]	@ (8002508 <HAL_ADC_IRQHandler+0x4b0>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d002      	beq.n	80022ea <HAL_ADC_IRQHandler+0x292>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	e003      	b.n	80022f2 <HAL_ADC_IRQHandler+0x29a>
 80022ea:	4b88      	ldr	r3, [pc, #544]	@ (800250c <HAL_ADC_IRQHandler+0x4b4>)
 80022ec:	e001      	b.n	80022f2 <HAL_ADC_IRQHandler+0x29a>
 80022ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80022f2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d047      	beq.n	8002390 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d007      	beq.n	800231a <HAL_ADC_IRQHandler+0x2c2>
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d03f      	beq.n	8002390 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002316:	2b00      	cmp	r3, #0
 8002318:	d13a      	bne.n	8002390 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002324:	2b40      	cmp	r3, #64	@ 0x40
 8002326:	d133      	bne.n	8002390 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d12e      	bne.n	8002390 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff fbea 	bl	8001b10 <LL_ADC_INJ_IsConversionOngoing>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d11a      	bne.n	8002378 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002350:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002356:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002366:	2b00      	cmp	r3, #0
 8002368:	d112      	bne.n	8002390 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236e:	f043 0201 	orr.w	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002376:	e00b      	b.n	8002390 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237c:	f043 0210 	orr.w	r2, r3, #16
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002388:	f043 0201 	orr.w	r2, r3, #1
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 fe79 	bl	8003088 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2260      	movs	r2, #96	@ 0x60
 800239c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d011      	beq.n	80023cc <HAL_ADC_IRQHandler+0x374>
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00c      	beq.n	80023cc <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f8be 	bl	8002540 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2280      	movs	r2, #128	@ 0x80
 80023ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d012      	beq.n	80023fc <HAL_ADC_IRQHandler+0x3a4>
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00d      	beq.n	80023fc <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 fe5f 	bl	80030b0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023fa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002402:	2b00      	cmp	r3, #0
 8002404:	d012      	beq.n	800242c <HAL_ADC_IRQHandler+0x3d4>
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00d      	beq.n	800242c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002414:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 fe51 	bl	80030c4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800242a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f003 0310 	and.w	r3, r3, #16
 8002432:	2b00      	cmp	r3, #0
 8002434:	d043      	beq.n	80024be <HAL_ADC_IRQHandler+0x466>
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	f003 0310 	and.w	r3, r3, #16
 800243c:	2b00      	cmp	r3, #0
 800243e:	d03e      	beq.n	80024be <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002444:	2b00      	cmp	r3, #0
 8002446:	d102      	bne.n	800244e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002448:	2301      	movs	r3, #1
 800244a:	627b      	str	r3, [r7, #36]	@ 0x24
 800244c:	e021      	b.n	8002492 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d015      	beq.n	8002480 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800245c:	d004      	beq.n	8002468 <HAL_ADC_IRQHandler+0x410>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a28      	ldr	r2, [pc, #160]	@ (8002504 <HAL_ADC_IRQHandler+0x4ac>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d101      	bne.n	800246c <HAL_ADC_IRQHandler+0x414>
 8002468:	4b29      	ldr	r3, [pc, #164]	@ (8002510 <HAL_ADC_IRQHandler+0x4b8>)
 800246a:	e000      	b.n	800246e <HAL_ADC_IRQHandler+0x416>
 800246c:	4b29      	ldr	r3, [pc, #164]	@ (8002514 <HAL_ADC_IRQHandler+0x4bc>)
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff faa4 	bl	80019bc <LL_ADC_GetMultiDMATransfer>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00b      	beq.n	8002492 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800247a:	2301      	movs	r3, #1
 800247c:	627b      	str	r3, [r7, #36]	@ 0x24
 800247e:	e008      	b.n	8002492 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800248e:	2301      	movs	r3, #1
 8002490:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002494:	2b01      	cmp	r3, #1
 8002496:	d10e      	bne.n	80024b6 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800249c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024a8:	f043 0202 	orr.w	r2, r3, #2
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f84f 	bl	8002554 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2210      	movs	r2, #16
 80024bc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d018      	beq.n	80024fa <HAL_ADC_IRQHandler+0x4a2>
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d013      	beq.n	80024fa <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024e2:	f043 0208 	orr.w	r2, r3, #8
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024f2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 fdd1 	bl	800309c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80024fa:	bf00      	nop
 80024fc:	3728      	adds	r7, #40	@ 0x28
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	50000100 	.word	0x50000100
 8002508:	50000500 	.word	0x50000500
 800250c:	50000400 	.word	0x50000400
 8002510:	50000300 	.word	0x50000300
 8002514:	50000700 	.word	0x50000700

08002518 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b0b6      	sub	sp, #216	@ 0xd8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002582:	2b01      	cmp	r3, #1
 8002584:	d102      	bne.n	800258c <HAL_ADC_ConfigChannel+0x24>
 8002586:	2302      	movs	r3, #2
 8002588:	f000 bc13 	b.w	8002db2 <HAL_ADC_ConfigChannel+0x84a>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff faa6 	bl	8001aea <LL_ADC_REG_IsConversionOngoing>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f040 83f3 	bne.w	8002d8c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	6859      	ldr	r1, [r3, #4]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	f7ff f965 	bl	8001882 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fa94 	bl	8001aea <LL_ADC_REG_IsConversionOngoing>
 80025c2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff faa0 	bl	8001b10 <LL_ADC_INJ_IsConversionOngoing>
 80025d0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f040 81d9 	bne.w	8002990 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f040 81d4 	bne.w	8002990 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80025f0:	d10f      	bne.n	8002612 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2200      	movs	r2, #0
 80025fc:	4619      	mov	r1, r3
 80025fe:	f7ff f97f 	bl	8001900 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff f913 	bl	8001836 <LL_ADC_SetSamplingTimeCommonConfig>
 8002610:	e00e      	b.n	8002630 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	6819      	ldr	r1, [r3, #0]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	461a      	mov	r2, r3
 8002620:	f7ff f96e 	bl	8001900 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2100      	movs	r1, #0
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff f903 	bl	8001836 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	695a      	ldr	r2, [r3, #20]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	08db      	lsrs	r3, r3, #3
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	2b04      	cmp	r3, #4
 8002650:	d022      	beq.n	8002698 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	6919      	ldr	r1, [r3, #16]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002662:	f7ff f85d 	bl	8001720 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	6919      	ldr	r1, [r3, #16]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	461a      	mov	r2, r3
 8002674:	f7ff f8a9 	bl	80017ca <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002684:	2b01      	cmp	r3, #1
 8002686:	d102      	bne.n	800268e <HAL_ADC_ConfigChannel+0x126>
 8002688:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800268c:	e000      	b.n	8002690 <HAL_ADC_ConfigChannel+0x128>
 800268e:	2300      	movs	r3, #0
 8002690:	461a      	mov	r2, r3
 8002692:	f7ff f8b5 	bl	8001800 <LL_ADC_SetOffsetSaturation>
 8002696:	e17b      	b.n	8002990 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2100      	movs	r1, #0
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff f862 	bl	8001768 <LL_ADC_GetOffsetChannel>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10a      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x15c>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2100      	movs	r1, #0
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff f857 	bl	8001768 <LL_ADC_GetOffsetChannel>
 80026ba:	4603      	mov	r3, r0
 80026bc:	0e9b      	lsrs	r3, r3, #26
 80026be:	f003 021f 	and.w	r2, r3, #31
 80026c2:	e01e      	b.n	8002702 <HAL_ADC_ConfigChannel+0x19a>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2100      	movs	r1, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff f84c 	bl	8001768 <LL_ADC_GetOffsetChannel>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80026e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80026f2:	2320      	movs	r3, #32
 80026f4:	e004      	b.n	8002700 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80026f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270a:	2b00      	cmp	r3, #0
 800270c:	d105      	bne.n	800271a <HAL_ADC_ConfigChannel+0x1b2>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	0e9b      	lsrs	r3, r3, #26
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	e018      	b.n	800274c <HAL_ADC_ConfigChannel+0x1e4>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002726:	fa93 f3a3 	rbit	r3, r3
 800272a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800272e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002732:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002736:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800273e:	2320      	movs	r3, #32
 8002740:	e004      	b.n	800274c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002742:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002746:	fab3 f383 	clz	r3, r3
 800274a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800274c:	429a      	cmp	r2, r3
 800274e:	d106      	bne.n	800275e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2200      	movs	r2, #0
 8002756:	2100      	movs	r1, #0
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff f81b 	bl	8001794 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2101      	movs	r1, #1
 8002764:	4618      	mov	r0, r3
 8002766:	f7fe ffff 	bl	8001768 <LL_ADC_GetOffsetChannel>
 800276a:	4603      	mov	r3, r0
 800276c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10a      	bne.n	800278a <HAL_ADC_ConfigChannel+0x222>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2101      	movs	r1, #1
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe fff4 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8002780:	4603      	mov	r3, r0
 8002782:	0e9b      	lsrs	r3, r3, #26
 8002784:	f003 021f 	and.w	r2, r3, #31
 8002788:	e01e      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x260>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2101      	movs	r1, #1
 8002790:	4618      	mov	r0, r3
 8002792:	f7fe ffe9 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8002796:	4603      	mov	r3, r0
 8002798:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027a0:	fa93 f3a3 	rbit	r3, r3
 80027a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80027a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80027b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80027b8:	2320      	movs	r3, #32
 80027ba:	e004      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80027bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027c0:	fab3 f383 	clz	r3, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d105      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x278>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	0e9b      	lsrs	r3, r3, #26
 80027da:	f003 031f 	and.w	r3, r3, #31
 80027de:	e018      	b.n	8002812 <HAL_ADC_ConfigChannel+0x2aa>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027ec:	fa93 f3a3 	rbit	r3, r3
 80027f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80027f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80027f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80027fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002804:	2320      	movs	r3, #32
 8002806:	e004      	b.n	8002812 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002808:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800280c:	fab3 f383 	clz	r3, r3
 8002810:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002812:	429a      	cmp	r2, r3
 8002814:	d106      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2200      	movs	r2, #0
 800281c:	2101      	movs	r1, #1
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe ffb8 	bl	8001794 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2102      	movs	r1, #2
 800282a:	4618      	mov	r0, r3
 800282c:	f7fe ff9c 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8002830:	4603      	mov	r3, r0
 8002832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10a      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x2e8>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2102      	movs	r1, #2
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe ff91 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8002846:	4603      	mov	r3, r0
 8002848:	0e9b      	lsrs	r3, r3, #26
 800284a:	f003 021f 	and.w	r2, r3, #31
 800284e:	e01e      	b.n	800288e <HAL_ADC_ConfigChannel+0x326>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2102      	movs	r1, #2
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe ff86 	bl	8001768 <LL_ADC_GetOffsetChannel>
 800285c:	4603      	mov	r3, r0
 800285e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002866:	fa93 f3a3 	rbit	r3, r3
 800286a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800286e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002872:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002876:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800287e:	2320      	movs	r3, #32
 8002880:	e004      	b.n	800288c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002882:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002896:	2b00      	cmp	r3, #0
 8002898:	d105      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x33e>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	0e9b      	lsrs	r3, r3, #26
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	e016      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x36c>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028b2:	fa93 f3a3 	rbit	r3, r3
 80028b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80028b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80028be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80028c6:	2320      	movs	r3, #32
 80028c8:	e004      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80028ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d106      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2200      	movs	r2, #0
 80028de:	2102      	movs	r1, #2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fe ff57 	bl	8001794 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2103      	movs	r1, #3
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe ff3b 	bl	8001768 <LL_ADC_GetOffsetChannel>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10a      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x3aa>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2103      	movs	r1, #3
 8002902:	4618      	mov	r0, r3
 8002904:	f7fe ff30 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8002908:	4603      	mov	r3, r0
 800290a:	0e9b      	lsrs	r3, r3, #26
 800290c:	f003 021f 	and.w	r2, r3, #31
 8002910:	e017      	b.n	8002942 <HAL_ADC_ConfigChannel+0x3da>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2103      	movs	r1, #3
 8002918:	4618      	mov	r0, r3
 800291a:	f7fe ff25 	bl	8001768 <LL_ADC_GetOffsetChannel>
 800291e:	4603      	mov	r3, r0
 8002920:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002924:	fa93 f3a3 	rbit	r3, r3
 8002928:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800292a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800292c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800292e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002934:	2320      	movs	r3, #32
 8002936:	e003      	b.n	8002940 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002938:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800293a:	fab3 f383 	clz	r3, r3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800294a:	2b00      	cmp	r3, #0
 800294c:	d105      	bne.n	800295a <HAL_ADC_ConfigChannel+0x3f2>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	0e9b      	lsrs	r3, r3, #26
 8002954:	f003 031f 	and.w	r3, r3, #31
 8002958:	e011      	b.n	800297e <HAL_ADC_ConfigChannel+0x416>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002962:	fa93 f3a3 	rbit	r3, r3
 8002966:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002968:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800296a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800296c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002972:	2320      	movs	r3, #32
 8002974:	e003      	b.n	800297e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002976:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002978:	fab3 f383 	clz	r3, r3
 800297c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800297e:	429a      	cmp	r2, r3
 8002980:	d106      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2200      	movs	r2, #0
 8002988:	2103      	movs	r1, #3
 800298a:	4618      	mov	r0, r3
 800298c:	f7fe ff02 	bl	8001794 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff f881 	bl	8001a9c <LL_ADC_IsEnabled>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	f040 813d 	bne.w	8002c1c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6818      	ldr	r0, [r3, #0]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6819      	ldr	r1, [r3, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	461a      	mov	r2, r3
 80029b0:	f7fe ffd2 	bl	8001958 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4aa2      	ldr	r2, [pc, #648]	@ (8002c44 <HAL_ADC_ConfigChannel+0x6dc>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	f040 812e 	bne.w	8002c1c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10b      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x480>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	0e9b      	lsrs	r3, r3, #26
 80029d6:	3301      	adds	r3, #1
 80029d8:	f003 031f 	and.w	r3, r3, #31
 80029dc:	2b09      	cmp	r3, #9
 80029de:	bf94      	ite	ls
 80029e0:	2301      	movls	r3, #1
 80029e2:	2300      	movhi	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	e019      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x4b4>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80029f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029f8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80029fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002a00:	2320      	movs	r3, #32
 8002a02:	e003      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002a04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	f003 031f 	and.w	r3, r3, #31
 8002a12:	2b09      	cmp	r3, #9
 8002a14:	bf94      	ite	ls
 8002a16:	2301      	movls	r3, #1
 8002a18:	2300      	movhi	r3, #0
 8002a1a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d079      	beq.n	8002b14 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d107      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x4d4>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	0e9b      	lsrs	r3, r3, #26
 8002a32:	3301      	adds	r3, #1
 8002a34:	069b      	lsls	r3, r3, #26
 8002a36:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a3a:	e015      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x500>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a44:	fa93 f3a3 	rbit	r3, r3
 8002a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002a4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a4c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002a54:	2320      	movs	r3, #32
 8002a56:	e003      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a5a:	fab3 f383 	clz	r3, r3
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	3301      	adds	r3, #1
 8002a62:	069b      	lsls	r3, r3, #26
 8002a64:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d109      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x520>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	0e9b      	lsrs	r3, r3, #26
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	2101      	movs	r1, #1
 8002a82:	fa01 f303 	lsl.w	r3, r1, r3
 8002a86:	e017      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x550>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a90:	fa93 f3a3 	rbit	r3, r3
 8002a94:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002a96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a98:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002a9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002aa0:	2320      	movs	r3, #32
 8002aa2:	e003      	b.n	8002aac <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002aa4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002aa6:	fab3 f383 	clz	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	3301      	adds	r3, #1
 8002aae:	f003 031f 	and.w	r3, r3, #31
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab8:	ea42 0103 	orr.w	r1, r2, r3
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10a      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x576>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	0e9b      	lsrs	r3, r3, #26
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f003 021f 	and.w	r2, r3, #31
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	4413      	add	r3, r2
 8002ada:	051b      	lsls	r3, r3, #20
 8002adc:	e018      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x5a8>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae6:	fa93 f3a3 	rbit	r3, r3
 8002aea:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002af0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002af6:	2320      	movs	r3, #32
 8002af8:	e003      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002afc:	fab3 f383 	clz	r3, r3
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	3301      	adds	r3, #1
 8002b04:	f003 021f 	and.w	r2, r3, #31
 8002b08:	4613      	mov	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b10:	430b      	orrs	r3, r1
 8002b12:	e07e      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d107      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x5c8>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	0e9b      	lsrs	r3, r3, #26
 8002b26:	3301      	adds	r3, #1
 8002b28:	069b      	lsls	r3, r3, #26
 8002b2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b2e:	e015      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x5f4>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b38:	fa93 f3a3 	rbit	r3, r3
 8002b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b40:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002b48:	2320      	movs	r3, #32
 8002b4a:	e003      	b.n	8002b54 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4e:	fab3 f383 	clz	r3, r3
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	3301      	adds	r3, #1
 8002b56:	069b      	lsls	r3, r3, #26
 8002b58:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d109      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x614>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	0e9b      	lsrs	r3, r3, #26
 8002b6e:	3301      	adds	r3, #1
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	2101      	movs	r1, #1
 8002b76:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7a:	e017      	b.n	8002bac <HAL_ADC_ConfigChannel+0x644>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	fa93 f3a3 	rbit	r3, r3
 8002b88:	61fb      	str	r3, [r7, #28]
  return result;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002b94:	2320      	movs	r3, #32
 8002b96:	e003      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bac:	ea42 0103 	orr.w	r1, r2, r3
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10d      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x670>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0e9b      	lsrs	r3, r3, #26
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f003 021f 	and.w	r2, r3, #31
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	3b1e      	subs	r3, #30
 8002bd0:	051b      	lsls	r3, r3, #20
 8002bd2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002bd6:	e01b      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x6a8>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	fa93 f3a3 	rbit	r3, r3
 8002be4:	613b      	str	r3, [r7, #16]
  return result;
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002bf0:	2320      	movs	r3, #32
 8002bf2:	e003      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	fab3 f383 	clz	r3, r3
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	f003 021f 	and.w	r2, r3, #31
 8002c02:	4613      	mov	r3, r2
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	4413      	add	r3, r2
 8002c08:	3b1e      	subs	r3, #30
 8002c0a:	051b      	lsls	r3, r3, #20
 8002c0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c10:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c16:	4619      	mov	r1, r3
 8002c18:	f7fe fe72 	bl	8001900 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	4b09      	ldr	r3, [pc, #36]	@ (8002c48 <HAL_ADC_ConfigChannel+0x6e0>)
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 80be 	beq.w	8002da6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c32:	d004      	beq.n	8002c3e <HAL_ADC_ConfigChannel+0x6d6>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a04      	ldr	r2, [pc, #16]	@ (8002c4c <HAL_ADC_ConfigChannel+0x6e4>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d10a      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x6ec>
 8002c3e:	4b04      	ldr	r3, [pc, #16]	@ (8002c50 <HAL_ADC_ConfigChannel+0x6e8>)
 8002c40:	e009      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x6ee>
 8002c42:	bf00      	nop
 8002c44:	407f0000 	.word	0x407f0000
 8002c48:	80080000 	.word	0x80080000
 8002c4c:	50000100 	.word	0x50000100
 8002c50:	50000300 	.word	0x50000300
 8002c54:	4b59      	ldr	r3, [pc, #356]	@ (8002dbc <HAL_ADC_ConfigChannel+0x854>)
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe fd54 	bl	8001704 <LL_ADC_GetCommonPathInternalCh>
 8002c5c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a56      	ldr	r2, [pc, #344]	@ (8002dc0 <HAL_ADC_ConfigChannel+0x858>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d004      	beq.n	8002c74 <HAL_ADC_ConfigChannel+0x70c>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a55      	ldr	r2, [pc, #340]	@ (8002dc4 <HAL_ADC_ConfigChannel+0x85c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d13a      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d134      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c88:	d005      	beq.n	8002c96 <HAL_ADC_ConfigChannel+0x72e>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a4e      	ldr	r2, [pc, #312]	@ (8002dc8 <HAL_ADC_ConfigChannel+0x860>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	f040 8085 	bne.w	8002da0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c9e:	d004      	beq.n	8002caa <HAL_ADC_ConfigChannel+0x742>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a49      	ldr	r2, [pc, #292]	@ (8002dcc <HAL_ADC_ConfigChannel+0x864>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d101      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x746>
 8002caa:	4a49      	ldr	r2, [pc, #292]	@ (8002dd0 <HAL_ADC_ConfigChannel+0x868>)
 8002cac:	e000      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x748>
 8002cae:	4a43      	ldr	r2, [pc, #268]	@ (8002dbc <HAL_ADC_ConfigChannel+0x854>)
 8002cb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cb4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4610      	mov	r0, r2
 8002cbc:	f7fe fd0f 	bl	80016de <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cc0:	4b44      	ldr	r3, [pc, #272]	@ (8002dd4 <HAL_ADC_ConfigChannel+0x86c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	099b      	lsrs	r3, r3, #6
 8002cc6:	4a44      	ldr	r2, [pc, #272]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x870>)
 8002cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ccc:	099b      	lsrs	r3, r3, #6
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cda:	e002      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1f9      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ce8:	e05a      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a3b      	ldr	r2, [pc, #236]	@ (8002ddc <HAL_ADC_ConfigChannel+0x874>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d125      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cf4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cf8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d11f      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a31      	ldr	r2, [pc, #196]	@ (8002dcc <HAL_ADC_ConfigChannel+0x864>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d104      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x7ac>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a34      	ldr	r2, [pc, #208]	@ (8002de0 <HAL_ADC_ConfigChannel+0x878>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d047      	beq.n	8002da4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d1c:	d004      	beq.n	8002d28 <HAL_ADC_ConfigChannel+0x7c0>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a2a      	ldr	r2, [pc, #168]	@ (8002dcc <HAL_ADC_ConfigChannel+0x864>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d101      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x7c4>
 8002d28:	4a29      	ldr	r2, [pc, #164]	@ (8002dd0 <HAL_ADC_ConfigChannel+0x868>)
 8002d2a:	e000      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x7c6>
 8002d2c:	4a23      	ldr	r2, [pc, #140]	@ (8002dbc <HAL_ADC_ConfigChannel+0x854>)
 8002d2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d36:	4619      	mov	r1, r3
 8002d38:	4610      	mov	r0, r2
 8002d3a:	f7fe fcd0 	bl	80016de <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d3e:	e031      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a27      	ldr	r2, [pc, #156]	@ (8002de4 <HAL_ADC_ConfigChannel+0x87c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d12d      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d127      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8002dcc <HAL_ADC_ConfigChannel+0x864>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d022      	beq.n	8002da6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d68:	d004      	beq.n	8002d74 <HAL_ADC_ConfigChannel+0x80c>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a17      	ldr	r2, [pc, #92]	@ (8002dcc <HAL_ADC_ConfigChannel+0x864>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d101      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x810>
 8002d74:	4a16      	ldr	r2, [pc, #88]	@ (8002dd0 <HAL_ADC_ConfigChannel+0x868>)
 8002d76:	e000      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x812>
 8002d78:	4a10      	ldr	r2, [pc, #64]	@ (8002dbc <HAL_ADC_ConfigChannel+0x854>)
 8002d7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d7e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d82:	4619      	mov	r1, r3
 8002d84:	4610      	mov	r0, r2
 8002d86:	f7fe fcaa 	bl	80016de <LL_ADC_SetCommonPathInternalCh>
 8002d8a:	e00c      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d90:	f043 0220 	orr.w	r2, r3, #32
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002d9e:	e002      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002da0:	bf00      	nop
 8002da2:	e000      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002da4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002dae:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	37d8      	adds	r7, #216	@ 0xd8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	50000700 	.word	0x50000700
 8002dc0:	c3210000 	.word	0xc3210000
 8002dc4:	90c00010 	.word	0x90c00010
 8002dc8:	50000600 	.word	0x50000600
 8002dcc:	50000100 	.word	0x50000100
 8002dd0:	50000300 	.word	0x50000300
 8002dd4:	20000000 	.word	0x20000000
 8002dd8:	053e2d63 	.word	0x053e2d63
 8002ddc:	c7520000 	.word	0xc7520000
 8002de0:	50000500 	.word	0x50000500
 8002de4:	cb840000 	.word	0xcb840000

08002de8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7fe fe4f 	bl	8001a9c <LL_ADC_IsEnabled>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d176      	bne.n	8002ef2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	4b3c      	ldr	r3, [pc, #240]	@ (8002efc <ADC_Enable+0x114>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00d      	beq.n	8002e2e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e16:	f043 0210 	orr.w	r2, r3, #16
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e22:	f043 0201 	orr.w	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e062      	b.n	8002ef4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe fe1e 	bl	8001a74 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e40:	d004      	beq.n	8002e4c <ADC_Enable+0x64>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a2e      	ldr	r2, [pc, #184]	@ (8002f00 <ADC_Enable+0x118>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d101      	bne.n	8002e50 <ADC_Enable+0x68>
 8002e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002f04 <ADC_Enable+0x11c>)
 8002e4e:	e000      	b.n	8002e52 <ADC_Enable+0x6a>
 8002e50:	4b2d      	ldr	r3, [pc, #180]	@ (8002f08 <ADC_Enable+0x120>)
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fc56 	bl	8001704 <LL_ADC_GetCommonPathInternalCh>
 8002e58:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002e5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d013      	beq.n	8002e8a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e62:	4b2a      	ldr	r3, [pc, #168]	@ (8002f0c <ADC_Enable+0x124>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	099b      	lsrs	r3, r3, #6
 8002e68:	4a29      	ldr	r2, [pc, #164]	@ (8002f10 <ADC_Enable+0x128>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	099b      	lsrs	r3, r3, #6
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	4613      	mov	r3, r2
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	4413      	add	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e7c:	e002      	b.n	8002e84 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	3b01      	subs	r3, #1
 8002e82:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f9      	bne.n	8002e7e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e8a:	f7fe fc09 	bl	80016a0 <HAL_GetTick>
 8002e8e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e90:	e028      	b.n	8002ee4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe fe00 	bl	8001a9c <LL_ADC_IsEnabled>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d104      	bne.n	8002eac <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fe fde4 	bl	8001a74 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002eac:	f7fe fbf8 	bl	80016a0 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d914      	bls.n	8002ee4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d00d      	beq.n	8002ee4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ecc:	f043 0210 	orr.w	r2, r3, #16
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed8:	f043 0201 	orr.w	r2, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e007      	b.n	8002ef4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d1cf      	bne.n	8002e92 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	8000003f 	.word	0x8000003f
 8002f00:	50000100 	.word	0x50000100
 8002f04:	50000300 	.word	0x50000300
 8002f08:	50000700 	.word	0x50000700
 8002f0c:	20000000 	.word	0x20000000
 8002f10:	053e2d63 	.word	0x053e2d63

08002f14 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f20:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f26:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d14b      	bne.n	8002fc6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f32:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d021      	beq.n	8002f8c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fe fc85 	bl	800185c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d032      	beq.n	8002fbe <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d12b      	bne.n	8002fbe <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d11f      	bne.n	8002fbe <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f82:	f043 0201 	orr.w	r2, r3, #1
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f8a:	e018      	b.n	8002fbe <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d111      	bne.n	8002fbe <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f9e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002faa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d105      	bne.n	8002fbe <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb6:	f043 0201 	orr.w	r2, r3, #1
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f7ff faaa 	bl	8002518 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002fc4:	e00e      	b.n	8002fe4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fca:	f003 0310 	and.w	r3, r3, #16
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f7ff fabe 	bl	8002554 <HAL_ADC_ErrorCallback>
}
 8002fd8:	e004      	b.n	8002fe4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	4798      	blx	r3
}
 8002fe4:	bf00      	nop
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f7ff fa96 	bl	800252c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003000:	bf00      	nop
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003014:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800301a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003026:	f043 0204 	orr.w	r2, r3, #4
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f7ff fa90 	bl	8002554 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003034:	bf00      	nop
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <LL_ADC_IsEnabled>:
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b01      	cmp	r3, #1
 800304e:	d101      	bne.n	8003054 <LL_ADC_IsEnabled+0x18>
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <LL_ADC_IsEnabled+0x1a>
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <LL_ADC_REG_IsConversionOngoing>:
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b04      	cmp	r3, #4
 8003074:	d101      	bne.n	800307a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80030ec:	b590      	push	{r4, r7, lr}
 80030ee:	b0a1      	sub	sp, #132	@ 0x84
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003106:	2302      	movs	r3, #2
 8003108:	e0e7      	b.n	80032da <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003112:	2300      	movs	r3, #0
 8003114:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003116:	2300      	movs	r3, #0
 8003118:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003122:	d102      	bne.n	800312a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003124:	4b6f      	ldr	r3, [pc, #444]	@ (80032e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	e009      	b.n	800313e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a6e      	ldr	r2, [pc, #440]	@ (80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d102      	bne.n	800313a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003134:	4b6d      	ldr	r3, [pc, #436]	@ (80032ec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003136:	60bb      	str	r3, [r7, #8]
 8003138:	e001      	b.n	800313e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800313a:	2300      	movs	r3, #0
 800313c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10b      	bne.n	800315c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003148:	f043 0220 	orr.w	r2, r3, #32
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e0be      	b.n	80032da <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff ff7f 	bl	8003062 <LL_ADC_REG_IsConversionOngoing>
 8003164:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff ff79 	bl	8003062 <LL_ADC_REG_IsConversionOngoing>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	f040 80a0 	bne.w	80032b8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003178:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800317a:	2b00      	cmp	r3, #0
 800317c:	f040 809c 	bne.w	80032b8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003188:	d004      	beq.n	8003194 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a55      	ldr	r2, [pc, #340]	@ (80032e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d101      	bne.n	8003198 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003194:	4b56      	ldr	r3, [pc, #344]	@ (80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003196:	e000      	b.n	800319a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003198:	4b56      	ldr	r3, [pc, #344]	@ (80032f4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800319a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d04b      	beq.n	800323c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80031a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	6859      	ldr	r1, [r3, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80031b6:	035b      	lsls	r3, r3, #13
 80031b8:	430b      	orrs	r3, r1
 80031ba:	431a      	orrs	r2, r3
 80031bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031be:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031c8:	d004      	beq.n	80031d4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a45      	ldr	r2, [pc, #276]	@ (80032e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d10f      	bne.n	80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80031d4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80031d8:	f7ff ff30 	bl	800303c <LL_ADC_IsEnabled>
 80031dc:	4604      	mov	r4, r0
 80031de:	4841      	ldr	r0, [pc, #260]	@ (80032e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80031e0:	f7ff ff2c 	bl	800303c <LL_ADC_IsEnabled>
 80031e4:	4603      	mov	r3, r0
 80031e6:	4323      	orrs	r3, r4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bf0c      	ite	eq
 80031ec:	2301      	moveq	r3, #1
 80031ee:	2300      	movne	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	e012      	b.n	800321a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80031f4:	483c      	ldr	r0, [pc, #240]	@ (80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80031f6:	f7ff ff21 	bl	800303c <LL_ADC_IsEnabled>
 80031fa:	4604      	mov	r4, r0
 80031fc:	483b      	ldr	r0, [pc, #236]	@ (80032ec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80031fe:	f7ff ff1d 	bl	800303c <LL_ADC_IsEnabled>
 8003202:	4603      	mov	r3, r0
 8003204:	431c      	orrs	r4, r3
 8003206:	483c      	ldr	r0, [pc, #240]	@ (80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003208:	f7ff ff18 	bl	800303c <LL_ADC_IsEnabled>
 800320c:	4603      	mov	r3, r0
 800320e:	4323      	orrs	r3, r4
 8003210:	2b00      	cmp	r3, #0
 8003212:	bf0c      	ite	eq
 8003214:	2301      	moveq	r3, #1
 8003216:	2300      	movne	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d056      	beq.n	80032cc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800321e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003226:	f023 030f 	bic.w	r3, r3, #15
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	6811      	ldr	r1, [r2, #0]
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	6892      	ldr	r2, [r2, #8]
 8003232:	430a      	orrs	r2, r1
 8003234:	431a      	orrs	r2, r3
 8003236:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003238:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800323a:	e047      	b.n	80032cc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800323c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003244:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003246:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003250:	d004      	beq.n	800325c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a23      	ldr	r2, [pc, #140]	@ (80032e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d10f      	bne.n	800327c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800325c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003260:	f7ff feec 	bl	800303c <LL_ADC_IsEnabled>
 8003264:	4604      	mov	r4, r0
 8003266:	481f      	ldr	r0, [pc, #124]	@ (80032e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003268:	f7ff fee8 	bl	800303c <LL_ADC_IsEnabled>
 800326c:	4603      	mov	r3, r0
 800326e:	4323      	orrs	r3, r4
 8003270:	2b00      	cmp	r3, #0
 8003272:	bf0c      	ite	eq
 8003274:	2301      	moveq	r3, #1
 8003276:	2300      	movne	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	e012      	b.n	80032a2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800327c:	481a      	ldr	r0, [pc, #104]	@ (80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800327e:	f7ff fedd 	bl	800303c <LL_ADC_IsEnabled>
 8003282:	4604      	mov	r4, r0
 8003284:	4819      	ldr	r0, [pc, #100]	@ (80032ec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003286:	f7ff fed9 	bl	800303c <LL_ADC_IsEnabled>
 800328a:	4603      	mov	r3, r0
 800328c:	431c      	orrs	r4, r3
 800328e:	481a      	ldr	r0, [pc, #104]	@ (80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003290:	f7ff fed4 	bl	800303c <LL_ADC_IsEnabled>
 8003294:	4603      	mov	r3, r0
 8003296:	4323      	orrs	r3, r4
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf0c      	ite	eq
 800329c:	2301      	moveq	r3, #1
 800329e:	2300      	movne	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d012      	beq.n	80032cc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80032ae:	f023 030f 	bic.w	r3, r3, #15
 80032b2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80032b4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032b6:	e009      	b.n	80032cc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032bc:	f043 0220 	orr.w	r2, r3, #32
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80032ca:	e000      	b.n	80032ce <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80032d6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3784      	adds	r7, #132	@ 0x84
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd90      	pop	{r4, r7, pc}
 80032e2:	bf00      	nop
 80032e4:	50000100 	.word	0x50000100
 80032e8:	50000400 	.word	0x50000400
 80032ec:	50000500 	.word	0x50000500
 80032f0:	50000300 	.word	0x50000300
 80032f4:	50000700 	.word	0x50000700
 80032f8:	50000600 	.word	0x50000600

080032fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800330c:	4b0c      	ldr	r3, [pc, #48]	@ (8003340 <__NVIC_SetPriorityGrouping+0x44>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003318:	4013      	ands	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003324:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800332c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800332e:	4a04      	ldr	r2, [pc, #16]	@ (8003340 <__NVIC_SetPriorityGrouping+0x44>)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	60d3      	str	r3, [r2, #12]
}
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	e000ed00 	.word	0xe000ed00

08003344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003348:	4b04      	ldr	r3, [pc, #16]	@ (800335c <__NVIC_GetPriorityGrouping+0x18>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	0a1b      	lsrs	r3, r3, #8
 800334e:	f003 0307 	and.w	r3, r3, #7
}
 8003352:	4618      	mov	r0, r3
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	e000ed00 	.word	0xe000ed00

08003360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	2b00      	cmp	r3, #0
 8003370:	db0b      	blt.n	800338a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	f003 021f 	and.w	r2, r3, #31
 8003378:	4907      	ldr	r1, [pc, #28]	@ (8003398 <__NVIC_EnableIRQ+0x38>)
 800337a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	2001      	movs	r0, #1
 8003382:	fa00 f202 	lsl.w	r2, r0, r2
 8003386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	e000e100 	.word	0xe000e100

0800339c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	6039      	str	r1, [r7, #0]
 80033a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	db0a      	blt.n	80033c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	490c      	ldr	r1, [pc, #48]	@ (80033e8 <__NVIC_SetPriority+0x4c>)
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	0112      	lsls	r2, r2, #4
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	440b      	add	r3, r1
 80033c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033c4:	e00a      	b.n	80033dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	4908      	ldr	r1, [pc, #32]	@ (80033ec <__NVIC_SetPriority+0x50>)
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	3b04      	subs	r3, #4
 80033d4:	0112      	lsls	r2, r2, #4
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	440b      	add	r3, r1
 80033da:	761a      	strb	r2, [r3, #24]
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	e000e100 	.word	0xe000e100
 80033ec:	e000ed00 	.word	0xe000ed00

080033f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b089      	sub	sp, #36	@ 0x24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f1c3 0307 	rsb	r3, r3, #7
 800340a:	2b04      	cmp	r3, #4
 800340c:	bf28      	it	cs
 800340e:	2304      	movcs	r3, #4
 8003410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3304      	adds	r3, #4
 8003416:	2b06      	cmp	r3, #6
 8003418:	d902      	bls.n	8003420 <NVIC_EncodePriority+0x30>
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	3b03      	subs	r3, #3
 800341e:	e000      	b.n	8003422 <NVIC_EncodePriority+0x32>
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003424:	f04f 32ff 	mov.w	r2, #4294967295
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43da      	mvns	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	401a      	ands	r2, r3
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003438:	f04f 31ff 	mov.w	r1, #4294967295
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	fa01 f303 	lsl.w	r3, r1, r3
 8003442:	43d9      	mvns	r1, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003448:	4313      	orrs	r3, r2
         );
}
 800344a:	4618      	mov	r0, r3
 800344c:	3724      	adds	r7, #36	@ 0x24
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
	...

08003458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3b01      	subs	r3, #1
 8003464:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003468:	d301      	bcc.n	800346e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800346a:	2301      	movs	r3, #1
 800346c:	e00f      	b.n	800348e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800346e:	4a0a      	ldr	r2, [pc, #40]	@ (8003498 <SysTick_Config+0x40>)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3b01      	subs	r3, #1
 8003474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003476:	210f      	movs	r1, #15
 8003478:	f04f 30ff 	mov.w	r0, #4294967295
 800347c:	f7ff ff8e 	bl	800339c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003480:	4b05      	ldr	r3, [pc, #20]	@ (8003498 <SysTick_Config+0x40>)
 8003482:	2200      	movs	r2, #0
 8003484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003486:	4b04      	ldr	r3, [pc, #16]	@ (8003498 <SysTick_Config+0x40>)
 8003488:	2207      	movs	r2, #7
 800348a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	e000e010 	.word	0xe000e010

0800349c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff ff29 	bl	80032fc <__NVIC_SetPriorityGrouping>
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b086      	sub	sp, #24
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	4603      	mov	r3, r0
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034c0:	f7ff ff40 	bl	8003344 <__NVIC_GetPriorityGrouping>
 80034c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	68b9      	ldr	r1, [r7, #8]
 80034ca:	6978      	ldr	r0, [r7, #20]
 80034cc:	f7ff ff90 	bl	80033f0 <NVIC_EncodePriority>
 80034d0:	4602      	mov	r2, r0
 80034d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034d6:	4611      	mov	r1, r2
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff ff5f 	bl	800339c <__NVIC_SetPriority>
}
 80034de:	bf00      	nop
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b082      	sub	sp, #8
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	4603      	mov	r3, r0
 80034ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff ff33 	bl	8003360 <__NVIC_EnableIRQ>
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7ff ffa4 	bl	8003458 <SysTick_Config>
 8003510:	4603      	mov	r3, r0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e08d      	b.n	800364a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	4b47      	ldr	r3, [pc, #284]	@ (8003654 <HAL_DMA_Init+0x138>)
 8003536:	429a      	cmp	r2, r3
 8003538:	d80f      	bhi.n	800355a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	461a      	mov	r2, r3
 8003540:	4b45      	ldr	r3, [pc, #276]	@ (8003658 <HAL_DMA_Init+0x13c>)
 8003542:	4413      	add	r3, r2
 8003544:	4a45      	ldr	r2, [pc, #276]	@ (800365c <HAL_DMA_Init+0x140>)
 8003546:	fba2 2303 	umull	r2, r3, r2, r3
 800354a:	091b      	lsrs	r3, r3, #4
 800354c:	009a      	lsls	r2, r3, #2
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a42      	ldr	r2, [pc, #264]	@ (8003660 <HAL_DMA_Init+0x144>)
 8003556:	641a      	str	r2, [r3, #64]	@ 0x40
 8003558:	e00e      	b.n	8003578 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	4b40      	ldr	r3, [pc, #256]	@ (8003664 <HAL_DMA_Init+0x148>)
 8003562:	4413      	add	r3, r2
 8003564:	4a3d      	ldr	r2, [pc, #244]	@ (800365c <HAL_DMA_Init+0x140>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	091b      	lsrs	r3, r3, #4
 800356c:	009a      	lsls	r2, r3, #2
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a3c      	ldr	r2, [pc, #240]	@ (8003668 <HAL_DMA_Init+0x14c>)
 8003576:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800358e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003592:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800359c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f9b6 	bl	800393c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035d8:	d102      	bne.n	80035e0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80035f4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d010      	beq.n	8003620 <HAL_DMA_Init+0x104>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b04      	cmp	r3, #4
 8003604:	d80c      	bhi.n	8003620 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f9d6 	bl	80039b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800361c:	605a      	str	r2, [r3, #4]
 800361e:	e008      	b.n	8003632 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40020407 	.word	0x40020407
 8003658:	bffdfff8 	.word	0xbffdfff8
 800365c:	cccccccd 	.word	0xcccccccd
 8003660:	40020000 	.word	0x40020000
 8003664:	bffdfbf8 	.word	0xbffdfbf8
 8003668:	40020400 	.word	0x40020400

0800366c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_DMA_Start_IT+0x20>
 8003688:	2302      	movs	r3, #2
 800368a:	e066      	b.n	800375a <HAL_DMA_Start_IT+0xee>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b01      	cmp	r3, #1
 800369e:	d155      	bne.n	800374c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0201 	bic.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	68b9      	ldr	r1, [r7, #8]
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 f8fb 	bl	80038c0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 020e 	orr.w	r2, r2, #14
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	e00f      	b.n	8003704 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0204 	bic.w	r2, r2, #4
 80036f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 020a 	orr.w	r2, r2, #10
 8003702:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d007      	beq.n	8003722 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800371c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003720:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003726:	2b00      	cmp	r3, #0
 8003728:	d007      	beq.n	800373a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003734:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003738:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0201 	orr.w	r2, r2, #1
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e005      	b.n	8003758 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003754:	2302      	movs	r3, #2
 8003756:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003758:	7dfb      	ldrb	r3, [r7, #23]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b084      	sub	sp, #16
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377e:	f003 031f 	and.w	r3, r3, #31
 8003782:	2204      	movs	r2, #4
 8003784:	409a      	lsls	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	4013      	ands	r3, r2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d026      	beq.n	80037dc <HAL_DMA_IRQHandler+0x7a>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	d021      	beq.n	80037dc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d107      	bne.n	80037b6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0204 	bic.w	r2, r2, #4
 80037b4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ba:	f003 021f 	and.w	r2, r3, #31
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c2:	2104      	movs	r1, #4
 80037c4:	fa01 f202 	lsl.w	r2, r1, r2
 80037c8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d071      	beq.n	80038b6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80037da:	e06c      	b.n	80038b6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e0:	f003 031f 	and.w	r3, r3, #31
 80037e4:	2202      	movs	r2, #2
 80037e6:	409a      	lsls	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4013      	ands	r3, r2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d02e      	beq.n	800384e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d029      	beq.n	800384e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10b      	bne.n	8003820 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 020a 	bic.w	r2, r2, #10
 8003816:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003824:	f003 021f 	and.w	r2, r3, #31
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382c:	2102      	movs	r1, #2
 800382e:	fa01 f202 	lsl.w	r2, r1, r2
 8003832:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003840:	2b00      	cmp	r3, #0
 8003842:	d038      	beq.n	80038b6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800384c:	e033      	b.n	80038b6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003852:	f003 031f 	and.w	r3, r3, #31
 8003856:	2208      	movs	r2, #8
 8003858:	409a      	lsls	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4013      	ands	r3, r2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d02a      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b00      	cmp	r3, #0
 800386a:	d025      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 020e 	bic.w	r2, r2, #14
 800387a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003880:	f003 021f 	and.w	r2, r3, #31
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003888:	2101      	movs	r1, #1
 800388a:	fa01 f202 	lsl.w	r2, r1, r2
 800388e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d004      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038b6:	bf00      	nop
 80038b8:	bf00      	nop
}
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
 80038cc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80038d6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d004      	beq.n	80038ea <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80038e8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ee:	f003 021f 	and.w	r2, r3, #31
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f6:	2101      	movs	r1, #1
 80038f8:	fa01 f202 	lsl.w	r2, r1, r2
 80038fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2b10      	cmp	r3, #16
 800390c:	d108      	bne.n	8003920 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800391e:	e007      	b.n	8003930 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	60da      	str	r2, [r3, #12]
}
 8003930:	bf00      	nop
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	461a      	mov	r2, r3
 800394a:	4b16      	ldr	r3, [pc, #88]	@ (80039a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800394c:	429a      	cmp	r2, r3
 800394e:	d802      	bhi.n	8003956 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003950:	4b15      	ldr	r3, [pc, #84]	@ (80039a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	e001      	b.n	800395a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003956:	4b15      	ldr	r3, [pc, #84]	@ (80039ac <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003958:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	b2db      	uxtb	r3, r3
 8003964:	3b08      	subs	r3, #8
 8003966:	4a12      	ldr	r2, [pc, #72]	@ (80039b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003968:	fba2 2303 	umull	r2, r3, r2, r3
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003974:	089b      	lsrs	r3, r3, #2
 8003976:	009a      	lsls	r2, r3, #2
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4413      	add	r3, r2
 800397c:	461a      	mov	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a0b      	ldr	r2, [pc, #44]	@ (80039b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003986:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	2201      	movs	r2, #1
 8003990:	409a      	lsls	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003996:	bf00      	nop
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40020407 	.word	0x40020407
 80039a8:	40020800 	.word	0x40020800
 80039ac:	40020820 	.word	0x40020820
 80039b0:	cccccccd 	.word	0xcccccccd
 80039b4:	40020880 	.word	0x40020880

080039b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	4b0b      	ldr	r3, [pc, #44]	@ (80039f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	461a      	mov	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a08      	ldr	r2, [pc, #32]	@ (80039fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80039da:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3b01      	subs	r3, #1
 80039e0:	f003 031f 	and.w	r3, r3, #31
 80039e4:	2201      	movs	r2, #1
 80039e6:	409a      	lsls	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80039ec:	bf00      	nop
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	1000823f 	.word	0x1000823f
 80039fc:	40020940 	.word	0x40020940

08003a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a0e:	e15a      	b.n	8003cc6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	2101      	movs	r1, #1
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 814c 	beq.w	8003cc0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d005      	beq.n	8003a40 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d130      	bne.n	8003aa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	2203      	movs	r2, #3
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	43db      	mvns	r3, r3
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	4013      	ands	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a76:	2201      	movs	r2, #1
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4013      	ands	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	091b      	lsrs	r3, r3, #4
 8003a8c:	f003 0201 	and.w	r2, r3, #1
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d017      	beq.n	8003ade <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	2203      	movs	r2, #3
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d123      	bne.n	8003b32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	08da      	lsrs	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3208      	adds	r2, #8
 8003af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003af6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	220f      	movs	r2, #15
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43db      	mvns	r3, r3
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	08da      	lsrs	r2, r3, #3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3208      	adds	r2, #8
 8003b2c:	6939      	ldr	r1, [r7, #16]
 8003b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43db      	mvns	r3, r3
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	4013      	ands	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f003 0203 	and.w	r2, r3, #3
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 80a6 	beq.w	8003cc0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b74:	4b5b      	ldr	r3, [pc, #364]	@ (8003ce4 <HAL_GPIO_Init+0x2e4>)
 8003b76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b78:	4a5a      	ldr	r2, [pc, #360]	@ (8003ce4 <HAL_GPIO_Init+0x2e4>)
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b80:	4b58      	ldr	r3, [pc, #352]	@ (8003ce4 <HAL_GPIO_Init+0x2e4>)
 8003b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b8c:	4a56      	ldr	r2, [pc, #344]	@ (8003ce8 <HAL_GPIO_Init+0x2e8>)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	089b      	lsrs	r3, r3, #2
 8003b92:	3302      	adds	r3, #2
 8003b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f003 0303 	and.w	r3, r3, #3
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	220f      	movs	r2, #15
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4013      	ands	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003bb6:	d01f      	beq.n	8003bf8 <HAL_GPIO_Init+0x1f8>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a4c      	ldr	r2, [pc, #304]	@ (8003cec <HAL_GPIO_Init+0x2ec>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d019      	beq.n	8003bf4 <HAL_GPIO_Init+0x1f4>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a4b      	ldr	r2, [pc, #300]	@ (8003cf0 <HAL_GPIO_Init+0x2f0>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d013      	beq.n	8003bf0 <HAL_GPIO_Init+0x1f0>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a4a      	ldr	r2, [pc, #296]	@ (8003cf4 <HAL_GPIO_Init+0x2f4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00d      	beq.n	8003bec <HAL_GPIO_Init+0x1ec>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a49      	ldr	r2, [pc, #292]	@ (8003cf8 <HAL_GPIO_Init+0x2f8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d007      	beq.n	8003be8 <HAL_GPIO_Init+0x1e8>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a48      	ldr	r2, [pc, #288]	@ (8003cfc <HAL_GPIO_Init+0x2fc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d101      	bne.n	8003be4 <HAL_GPIO_Init+0x1e4>
 8003be0:	2305      	movs	r3, #5
 8003be2:	e00a      	b.n	8003bfa <HAL_GPIO_Init+0x1fa>
 8003be4:	2306      	movs	r3, #6
 8003be6:	e008      	b.n	8003bfa <HAL_GPIO_Init+0x1fa>
 8003be8:	2304      	movs	r3, #4
 8003bea:	e006      	b.n	8003bfa <HAL_GPIO_Init+0x1fa>
 8003bec:	2303      	movs	r3, #3
 8003bee:	e004      	b.n	8003bfa <HAL_GPIO_Init+0x1fa>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e002      	b.n	8003bfa <HAL_GPIO_Init+0x1fa>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <HAL_GPIO_Init+0x1fa>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	f002 0203 	and.w	r2, r2, #3
 8003c00:	0092      	lsls	r2, r2, #2
 8003c02:	4093      	lsls	r3, r2
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c0a:	4937      	ldr	r1, [pc, #220]	@ (8003ce8 <HAL_GPIO_Init+0x2e8>)
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	089b      	lsrs	r3, r3, #2
 8003c10:	3302      	adds	r3, #2
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c18:	4b39      	ldr	r3, [pc, #228]	@ (8003d00 <HAL_GPIO_Init+0x300>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	43db      	mvns	r3, r3
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4013      	ands	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c3c:	4a30      	ldr	r2, [pc, #192]	@ (8003d00 <HAL_GPIO_Init+0x300>)
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c42:	4b2f      	ldr	r3, [pc, #188]	@ (8003d00 <HAL_GPIO_Init+0x300>)
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c66:	4a26      	ldr	r2, [pc, #152]	@ (8003d00 <HAL_GPIO_Init+0x300>)
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003c6c:	4b24      	ldr	r3, [pc, #144]	@ (8003d00 <HAL_GPIO_Init+0x300>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	43db      	mvns	r3, r3
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c90:	4a1b      	ldr	r2, [pc, #108]	@ (8003d00 <HAL_GPIO_Init+0x300>)
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c96:	4b1a      	ldr	r3, [pc, #104]	@ (8003d00 <HAL_GPIO_Init+0x300>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cba:	4a11      	ldr	r2, [pc, #68]	@ (8003d00 <HAL_GPIO_Init+0x300>)
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f47f ae9d 	bne.w	8003a10 <HAL_GPIO_Init+0x10>
  }
}
 8003cd6:	bf00      	nop
 8003cd8:	bf00      	nop
 8003cda:	371c      	adds	r7, #28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	40010000 	.word	0x40010000
 8003cec:	48000400 	.word	0x48000400
 8003cf0:	48000800 	.word	0x48000800
 8003cf4:	48000c00 	.word	0x48000c00
 8003cf8:	48001000 	.word	0x48001000
 8003cfc:	48001400 	.word	0x48001400
 8003d00:	40010400 	.word	0x40010400

08003d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	807b      	strh	r3, [r7, #2]
 8003d10:	4613      	mov	r3, r2
 8003d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d14:	787b      	ldrb	r3, [r7, #1]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d1a:	887a      	ldrh	r2, [r7, #2]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d20:	e002      	b.n	8003d28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d22:	887a      	ldrh	r2, [r7, #2]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d3e:	4b08      	ldr	r3, [pc, #32]	@ (8003d60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d40:	695a      	ldr	r2, [r3, #20]
 8003d42:	88fb      	ldrh	r3, [r7, #6]
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d006      	beq.n	8003d58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d4a:	4a05      	ldr	r2, [pc, #20]	@ (8003d60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d4c:	88fb      	ldrh	r3, [r7, #6]
 8003d4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d50:	88fb      	ldrh	r3, [r7, #6]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 f806 	bl	8003d64 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d58:	bf00      	nop
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40010400 	.word	0x40010400

08003d64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
	...

08003d7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d141      	bne.n	8003e0e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d8a:	4b4b      	ldr	r3, [pc, #300]	@ (8003eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d96:	d131      	bne.n	8003dfc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d98:	4b47      	ldr	r3, [pc, #284]	@ (8003eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d9e:	4a46      	ldr	r2, [pc, #280]	@ (8003eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003da4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003da8:	4b43      	ldr	r3, [pc, #268]	@ (8003eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003db0:	4a41      	ldr	r2, [pc, #260]	@ (8003eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003db6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003db8:	4b40      	ldr	r3, [pc, #256]	@ (8003ebc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2232      	movs	r2, #50	@ 0x32
 8003dbe:	fb02 f303 	mul.w	r3, r2, r3
 8003dc2:	4a3f      	ldr	r2, [pc, #252]	@ (8003ec0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc8:	0c9b      	lsrs	r3, r3, #18
 8003dca:	3301      	adds	r3, #1
 8003dcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dce:	e002      	b.n	8003dd6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dd6:	4b38      	ldr	r3, [pc, #224]	@ (8003eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003de2:	d102      	bne.n	8003dea <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f2      	bne.n	8003dd0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dea:	4b33      	ldr	r3, [pc, #204]	@ (8003eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003df6:	d158      	bne.n	8003eaa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e057      	b.n	8003eac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dfc:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e02:	4a2d      	ldr	r2, [pc, #180]	@ (8003eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003e0c:	e04d      	b.n	8003eaa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e14:	d141      	bne.n	8003e9a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e16:	4b28      	ldr	r3, [pc, #160]	@ (8003eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e22:	d131      	bne.n	8003e88 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e24:	4b24      	ldr	r3, [pc, #144]	@ (8003eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e2a:	4a23      	ldr	r2, [pc, #140]	@ (8003eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e34:	4b20      	ldr	r3, [pc, #128]	@ (8003eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e3c:	4a1e      	ldr	r2, [pc, #120]	@ (8003eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e44:	4b1d      	ldr	r3, [pc, #116]	@ (8003ebc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2232      	movs	r2, #50	@ 0x32
 8003e4a:	fb02 f303 	mul.w	r3, r2, r3
 8003e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ec0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e50:	fba2 2303 	umull	r2, r3, r2, r3
 8003e54:	0c9b      	lsrs	r3, r3, #18
 8003e56:	3301      	adds	r3, #1
 8003e58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e5a:	e002      	b.n	8003e62 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e62:	4b15      	ldr	r3, [pc, #84]	@ (8003eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e6e:	d102      	bne.n	8003e76 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f2      	bne.n	8003e5c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e76:	4b10      	ldr	r3, [pc, #64]	@ (8003eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e82:	d112      	bne.n	8003eaa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e011      	b.n	8003eac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e88:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8003eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003e98:	e007      	b.n	8003eaa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e9a:	4b07      	ldr	r3, [pc, #28]	@ (8003eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ea2:	4a05      	ldr	r2, [pc, #20]	@ (8003eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ea8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	40007000 	.word	0x40007000
 8003ebc:	20000000 	.word	0x20000000
 8003ec0:	431bde83 	.word	0x431bde83

08003ec4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003ec8:	4b05      	ldr	r3, [pc, #20]	@ (8003ee0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	4a04      	ldr	r2, [pc, #16]	@ (8003ee0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003ece:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ed2:	6093      	str	r3, [r2, #8]
}
 8003ed4:	bf00      	nop
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	40007000 	.word	0x40007000

08003ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e2fe      	b.n	80044f4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d075      	beq.n	8003fee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f02:	4b97      	ldr	r3, [pc, #604]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 030c 	and.w	r3, r3, #12
 8003f0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f0c:	4b94      	ldr	r3, [pc, #592]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f003 0303 	and.w	r3, r3, #3
 8003f14:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	2b0c      	cmp	r3, #12
 8003f1a:	d102      	bne.n	8003f22 <HAL_RCC_OscConfig+0x3e>
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	d002      	beq.n	8003f28 <HAL_RCC_OscConfig+0x44>
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d10b      	bne.n	8003f40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f28:	4b8d      	ldr	r3, [pc, #564]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d05b      	beq.n	8003fec <HAL_RCC_OscConfig+0x108>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d157      	bne.n	8003fec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e2d9      	b.n	80044f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f48:	d106      	bne.n	8003f58 <HAL_RCC_OscConfig+0x74>
 8003f4a:	4b85      	ldr	r3, [pc, #532]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a84      	ldr	r2, [pc, #528]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 8003f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	e01d      	b.n	8003f94 <HAL_RCC_OscConfig+0xb0>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f60:	d10c      	bne.n	8003f7c <HAL_RCC_OscConfig+0x98>
 8003f62:	4b7f      	ldr	r3, [pc, #508]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a7e      	ldr	r2, [pc, #504]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 8003f68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	4b7c      	ldr	r3, [pc, #496]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a7b      	ldr	r2, [pc, #492]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 8003f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	e00b      	b.n	8003f94 <HAL_RCC_OscConfig+0xb0>
 8003f7c:	4b78      	ldr	r3, [pc, #480]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a77      	ldr	r2, [pc, #476]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 8003f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	4b75      	ldr	r3, [pc, #468]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a74      	ldr	r2, [pc, #464]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 8003f8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d013      	beq.n	8003fc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9c:	f7fd fb80 	bl	80016a0 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fa4:	f7fd fb7c 	bl	80016a0 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b64      	cmp	r3, #100	@ 0x64
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e29e      	b.n	80044f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fb6:	4b6a      	ldr	r3, [pc, #424]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f0      	beq.n	8003fa4 <HAL_RCC_OscConfig+0xc0>
 8003fc2:	e014      	b.n	8003fee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc4:	f7fd fb6c 	bl	80016a0 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fcc:	f7fd fb68 	bl	80016a0 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b64      	cmp	r3, #100	@ 0x64
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e28a      	b.n	80044f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fde:	4b60      	ldr	r3, [pc, #384]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1f0      	bne.n	8003fcc <HAL_RCC_OscConfig+0xe8>
 8003fea:	e000      	b.n	8003fee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d075      	beq.n	80040e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ffa:	4b59      	ldr	r3, [pc, #356]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 030c 	and.w	r3, r3, #12
 8004002:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004004:	4b56      	ldr	r3, [pc, #344]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f003 0303 	and.w	r3, r3, #3
 800400c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	2b0c      	cmp	r3, #12
 8004012:	d102      	bne.n	800401a <HAL_RCC_OscConfig+0x136>
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	2b02      	cmp	r3, #2
 8004018:	d002      	beq.n	8004020 <HAL_RCC_OscConfig+0x13c>
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	2b04      	cmp	r3, #4
 800401e:	d11f      	bne.n	8004060 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004020:	4b4f      	ldr	r3, [pc, #316]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <HAL_RCC_OscConfig+0x154>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e25d      	b.n	80044f4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004038:	4b49      	ldr	r3, [pc, #292]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	061b      	lsls	r3, r3, #24
 8004046:	4946      	ldr	r1, [pc, #280]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 8004048:	4313      	orrs	r3, r2
 800404a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800404c:	4b45      	ldr	r3, [pc, #276]	@ (8004164 <HAL_RCC_OscConfig+0x280>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4618      	mov	r0, r3
 8004052:	f7fd fad9 	bl	8001608 <HAL_InitTick>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d043      	beq.n	80040e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e249      	b.n	80044f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d023      	beq.n	80040b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004068:	4b3d      	ldr	r3, [pc, #244]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a3c      	ldr	r2, [pc, #240]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 800406e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004074:	f7fd fb14 	bl	80016a0 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800407c:	f7fd fb10 	bl	80016a0 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e232      	b.n	80044f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800408e:	4b34      	ldr	r3, [pc, #208]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0f0      	beq.n	800407c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800409a:	4b31      	ldr	r3, [pc, #196]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	061b      	lsls	r3, r3, #24
 80040a8:	492d      	ldr	r1, [pc, #180]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	604b      	str	r3, [r1, #4]
 80040ae:	e01a      	b.n	80040e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a2a      	ldr	r2, [pc, #168]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 80040b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040bc:	f7fd faf0 	bl	80016a0 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040c4:	f7fd faec 	bl	80016a0 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e20e      	b.n	80044f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040d6:	4b22      	ldr	r3, [pc, #136]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0x1e0>
 80040e2:	e000      	b.n	80040e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d041      	beq.n	8004176 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d01c      	beq.n	8004134 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040fa:	4b19      	ldr	r3, [pc, #100]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 80040fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004100:	4a17      	ldr	r2, [pc, #92]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410a:	f7fd fac9 	bl	80016a0 <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004112:	f7fd fac5 	bl	80016a0 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e1e7      	b.n	80044f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004124:	4b0e      	ldr	r3, [pc, #56]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 8004126:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0ef      	beq.n	8004112 <HAL_RCC_OscConfig+0x22e>
 8004132:	e020      	b.n	8004176 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004134:	4b0a      	ldr	r3, [pc, #40]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 8004136:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800413a:	4a09      	ldr	r2, [pc, #36]	@ (8004160 <HAL_RCC_OscConfig+0x27c>)
 800413c:	f023 0301 	bic.w	r3, r3, #1
 8004140:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004144:	f7fd faac 	bl	80016a0 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800414a:	e00d      	b.n	8004168 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800414c:	f7fd faa8 	bl	80016a0 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d906      	bls.n	8004168 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e1ca      	b.n	80044f4 <HAL_RCC_OscConfig+0x610>
 800415e:	bf00      	nop
 8004160:	40021000 	.word	0x40021000
 8004164:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004168:	4b8c      	ldr	r3, [pc, #560]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 800416a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1ea      	bne.n	800414c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0304 	and.w	r3, r3, #4
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 80a6 	beq.w	80042d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004184:	2300      	movs	r3, #0
 8004186:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004188:	4b84      	ldr	r3, [pc, #528]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 800418a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800418c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <HAL_RCC_OscConfig+0x2b4>
 8004194:	2301      	movs	r3, #1
 8004196:	e000      	b.n	800419a <HAL_RCC_OscConfig+0x2b6>
 8004198:	2300      	movs	r3, #0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00d      	beq.n	80041ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800419e:	4b7f      	ldr	r3, [pc, #508]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 80041a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a2:	4a7e      	ldr	r2, [pc, #504]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 80041a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80041aa:	4b7c      	ldr	r3, [pc, #496]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 80041ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80041b6:	2301      	movs	r3, #1
 80041b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ba:	4b79      	ldr	r3, [pc, #484]	@ (80043a0 <HAL_RCC_OscConfig+0x4bc>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d118      	bne.n	80041f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041c6:	4b76      	ldr	r3, [pc, #472]	@ (80043a0 <HAL_RCC_OscConfig+0x4bc>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a75      	ldr	r2, [pc, #468]	@ (80043a0 <HAL_RCC_OscConfig+0x4bc>)
 80041cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041d2:	f7fd fa65 	bl	80016a0 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041da:	f7fd fa61 	bl	80016a0 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e183      	b.n	80044f4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ec:	4b6c      	ldr	r3, [pc, #432]	@ (80043a0 <HAL_RCC_OscConfig+0x4bc>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0f0      	beq.n	80041da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d108      	bne.n	8004212 <HAL_RCC_OscConfig+0x32e>
 8004200:	4b66      	ldr	r3, [pc, #408]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004206:	4a65      	ldr	r2, [pc, #404]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004210:	e024      	b.n	800425c <HAL_RCC_OscConfig+0x378>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b05      	cmp	r3, #5
 8004218:	d110      	bne.n	800423c <HAL_RCC_OscConfig+0x358>
 800421a:	4b60      	ldr	r3, [pc, #384]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 800421c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004220:	4a5e      	ldr	r2, [pc, #376]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 8004222:	f043 0304 	orr.w	r3, r3, #4
 8004226:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800422a:	4b5c      	ldr	r3, [pc, #368]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 800422c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004230:	4a5a      	ldr	r2, [pc, #360]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800423a:	e00f      	b.n	800425c <HAL_RCC_OscConfig+0x378>
 800423c:	4b57      	ldr	r3, [pc, #348]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004242:	4a56      	ldr	r2, [pc, #344]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 8004244:	f023 0301 	bic.w	r3, r3, #1
 8004248:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800424c:	4b53      	ldr	r3, [pc, #332]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004252:	4a52      	ldr	r2, [pc, #328]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 8004254:	f023 0304 	bic.w	r3, r3, #4
 8004258:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d016      	beq.n	8004292 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004264:	f7fd fa1c 	bl	80016a0 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800426a:	e00a      	b.n	8004282 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800426c:	f7fd fa18 	bl	80016a0 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800427a:	4293      	cmp	r3, r2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e138      	b.n	80044f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004282:	4b46      	ldr	r3, [pc, #280]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 8004284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0ed      	beq.n	800426c <HAL_RCC_OscConfig+0x388>
 8004290:	e015      	b.n	80042be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004292:	f7fd fa05 	bl	80016a0 <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004298:	e00a      	b.n	80042b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800429a:	f7fd fa01 	bl	80016a0 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e121      	b.n	80044f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042b0:	4b3a      	ldr	r3, [pc, #232]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1ed      	bne.n	800429a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042be:	7ffb      	ldrb	r3, [r7, #31]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d105      	bne.n	80042d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c4:	4b35      	ldr	r3, [pc, #212]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 80042c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c8:	4a34      	ldr	r2, [pc, #208]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 80042ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042ce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0320 	and.w	r3, r3, #32
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d03c      	beq.n	8004356 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d01c      	beq.n	800431e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042e4:	4b2d      	ldr	r3, [pc, #180]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 80042e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042ea:	4a2c      	ldr	r2, [pc, #176]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f4:	f7fd f9d4 	bl	80016a0 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042fc:	f7fd f9d0 	bl	80016a0 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e0f2      	b.n	80044f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800430e:	4b23      	ldr	r3, [pc, #140]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 8004310:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0ef      	beq.n	80042fc <HAL_RCC_OscConfig+0x418>
 800431c:	e01b      	b.n	8004356 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800431e:	4b1f      	ldr	r3, [pc, #124]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 8004320:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004324:	4a1d      	ldr	r2, [pc, #116]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 8004326:	f023 0301 	bic.w	r3, r3, #1
 800432a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432e:	f7fd f9b7 	bl	80016a0 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004336:	f7fd f9b3 	bl	80016a0 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e0d5      	b.n	80044f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004348:	4b14      	ldr	r3, [pc, #80]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 800434a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1ef      	bne.n	8004336 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 80c9 	beq.w	80044f2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004360:	4b0e      	ldr	r3, [pc, #56]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 030c 	and.w	r3, r3, #12
 8004368:	2b0c      	cmp	r3, #12
 800436a:	f000 8083 	beq.w	8004474 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	2b02      	cmp	r3, #2
 8004374:	d15e      	bne.n	8004434 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004376:	4b09      	ldr	r3, [pc, #36]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a08      	ldr	r2, [pc, #32]	@ (800439c <HAL_RCC_OscConfig+0x4b8>)
 800437c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004382:	f7fd f98d 	bl	80016a0 <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004388:	e00c      	b.n	80043a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800438a:	f7fd f989 	bl	80016a0 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d905      	bls.n	80043a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e0ab      	b.n	80044f4 <HAL_RCC_OscConfig+0x610>
 800439c:	40021000 	.word	0x40021000
 80043a0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043a4:	4b55      	ldr	r3, [pc, #340]	@ (80044fc <HAL_RCC_OscConfig+0x618>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1ec      	bne.n	800438a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043b0:	4b52      	ldr	r3, [pc, #328]	@ (80044fc <HAL_RCC_OscConfig+0x618>)
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	4b52      	ldr	r3, [pc, #328]	@ (8004500 <HAL_RCC_OscConfig+0x61c>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6a11      	ldr	r1, [r2, #32]
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80043c0:	3a01      	subs	r2, #1
 80043c2:	0112      	lsls	r2, r2, #4
 80043c4:	4311      	orrs	r1, r2
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80043ca:	0212      	lsls	r2, r2, #8
 80043cc:	4311      	orrs	r1, r2
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80043d2:	0852      	lsrs	r2, r2, #1
 80043d4:	3a01      	subs	r2, #1
 80043d6:	0552      	lsls	r2, r2, #21
 80043d8:	4311      	orrs	r1, r2
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80043de:	0852      	lsrs	r2, r2, #1
 80043e0:	3a01      	subs	r2, #1
 80043e2:	0652      	lsls	r2, r2, #25
 80043e4:	4311      	orrs	r1, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80043ea:	06d2      	lsls	r2, r2, #27
 80043ec:	430a      	orrs	r2, r1
 80043ee:	4943      	ldr	r1, [pc, #268]	@ (80044fc <HAL_RCC_OscConfig+0x618>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043f4:	4b41      	ldr	r3, [pc, #260]	@ (80044fc <HAL_RCC_OscConfig+0x618>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a40      	ldr	r2, [pc, #256]	@ (80044fc <HAL_RCC_OscConfig+0x618>)
 80043fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004400:	4b3e      	ldr	r3, [pc, #248]	@ (80044fc <HAL_RCC_OscConfig+0x618>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	4a3d      	ldr	r2, [pc, #244]	@ (80044fc <HAL_RCC_OscConfig+0x618>)
 8004406:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800440a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fd f948 	bl	80016a0 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004414:	f7fd f944 	bl	80016a0 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e066      	b.n	80044f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004426:	4b35      	ldr	r3, [pc, #212]	@ (80044fc <HAL_RCC_OscConfig+0x618>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0f0      	beq.n	8004414 <HAL_RCC_OscConfig+0x530>
 8004432:	e05e      	b.n	80044f2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004434:	4b31      	ldr	r3, [pc, #196]	@ (80044fc <HAL_RCC_OscConfig+0x618>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a30      	ldr	r2, [pc, #192]	@ (80044fc <HAL_RCC_OscConfig+0x618>)
 800443a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800443e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004440:	f7fd f92e 	bl	80016a0 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004448:	f7fd f92a 	bl	80016a0 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e04c      	b.n	80044f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800445a:	4b28      	ldr	r3, [pc, #160]	@ (80044fc <HAL_RCC_OscConfig+0x618>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f0      	bne.n	8004448 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004466:	4b25      	ldr	r3, [pc, #148]	@ (80044fc <HAL_RCC_OscConfig+0x618>)
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	4924      	ldr	r1, [pc, #144]	@ (80044fc <HAL_RCC_OscConfig+0x618>)
 800446c:	4b25      	ldr	r3, [pc, #148]	@ (8004504 <HAL_RCC_OscConfig+0x620>)
 800446e:	4013      	ands	r3, r2
 8004470:	60cb      	str	r3, [r1, #12]
 8004472:	e03e      	b.n	80044f2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e039      	b.n	80044f4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004480:	4b1e      	ldr	r3, [pc, #120]	@ (80044fc <HAL_RCC_OscConfig+0x618>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f003 0203 	and.w	r2, r3, #3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	429a      	cmp	r2, r3
 8004492:	d12c      	bne.n	80044ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449e:	3b01      	subs	r3, #1
 80044a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d123      	bne.n	80044ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d11b      	bne.n	80044ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d113      	bne.n	80044ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d0:	085b      	lsrs	r3, r3, #1
 80044d2:	3b01      	subs	r3, #1
 80044d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d109      	bne.n	80044ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044e4:	085b      	lsrs	r3, r3, #1
 80044e6:	3b01      	subs	r3, #1
 80044e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d001      	beq.n	80044f2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e000      	b.n	80044f4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3720      	adds	r7, #32
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40021000 	.word	0x40021000
 8004500:	019f800c 	.word	0x019f800c
 8004504:	feeefffc 	.word	0xfeeefffc

08004508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004512:	2300      	movs	r3, #0
 8004514:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e11e      	b.n	800475e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004520:	4b91      	ldr	r3, [pc, #580]	@ (8004768 <HAL_RCC_ClockConfig+0x260>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d910      	bls.n	8004550 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452e:	4b8e      	ldr	r3, [pc, #568]	@ (8004768 <HAL_RCC_ClockConfig+0x260>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f023 020f 	bic.w	r2, r3, #15
 8004536:	498c      	ldr	r1, [pc, #560]	@ (8004768 <HAL_RCC_ClockConfig+0x260>)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	4313      	orrs	r3, r2
 800453c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800453e:	4b8a      	ldr	r3, [pc, #552]	@ (8004768 <HAL_RCC_ClockConfig+0x260>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	429a      	cmp	r2, r3
 800454a:	d001      	beq.n	8004550 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e106      	b.n	800475e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d073      	beq.n	8004644 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b03      	cmp	r3, #3
 8004562:	d129      	bne.n	80045b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004564:	4b81      	ldr	r3, [pc, #516]	@ (800476c <HAL_RCC_ClockConfig+0x264>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e0f4      	b.n	800475e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004574:	f000 f99e 	bl	80048b4 <RCC_GetSysClockFreqFromPLLSource>
 8004578:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	4a7c      	ldr	r2, [pc, #496]	@ (8004770 <HAL_RCC_ClockConfig+0x268>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d93f      	bls.n	8004602 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004582:	4b7a      	ldr	r3, [pc, #488]	@ (800476c <HAL_RCC_ClockConfig+0x264>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d009      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004596:	2b00      	cmp	r3, #0
 8004598:	d033      	beq.n	8004602 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d12f      	bne.n	8004602 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045a2:	4b72      	ldr	r3, [pc, #456]	@ (800476c <HAL_RCC_ClockConfig+0x264>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045aa:	4a70      	ldr	r2, [pc, #448]	@ (800476c <HAL_RCC_ClockConfig+0x264>)
 80045ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80045b2:	2380      	movs	r3, #128	@ 0x80
 80045b4:	617b      	str	r3, [r7, #20]
 80045b6:	e024      	b.n	8004602 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d107      	bne.n	80045d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045c0:	4b6a      	ldr	r3, [pc, #424]	@ (800476c <HAL_RCC_ClockConfig+0x264>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d109      	bne.n	80045e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e0c6      	b.n	800475e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045d0:	4b66      	ldr	r3, [pc, #408]	@ (800476c <HAL_RCC_ClockConfig+0x264>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e0be      	b.n	800475e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80045e0:	f000 f8ce 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 80045e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	4a61      	ldr	r2, [pc, #388]	@ (8004770 <HAL_RCC_ClockConfig+0x268>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d909      	bls.n	8004602 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045ee:	4b5f      	ldr	r3, [pc, #380]	@ (800476c <HAL_RCC_ClockConfig+0x264>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045f6:	4a5d      	ldr	r2, [pc, #372]	@ (800476c <HAL_RCC_ClockConfig+0x264>)
 80045f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80045fe:	2380      	movs	r3, #128	@ 0x80
 8004600:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004602:	4b5a      	ldr	r3, [pc, #360]	@ (800476c <HAL_RCC_ClockConfig+0x264>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f023 0203 	bic.w	r2, r3, #3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	4957      	ldr	r1, [pc, #348]	@ (800476c <HAL_RCC_ClockConfig+0x264>)
 8004610:	4313      	orrs	r3, r2
 8004612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004614:	f7fd f844 	bl	80016a0 <HAL_GetTick>
 8004618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800461a:	e00a      	b.n	8004632 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800461c:	f7fd f840 	bl	80016a0 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e095      	b.n	800475e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004632:	4b4e      	ldr	r3, [pc, #312]	@ (800476c <HAL_RCC_ClockConfig+0x264>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 020c 	and.w	r2, r3, #12
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	429a      	cmp	r2, r3
 8004642:	d1eb      	bne.n	800461c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d023      	beq.n	8004698 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800465c:	4b43      	ldr	r3, [pc, #268]	@ (800476c <HAL_RCC_ClockConfig+0x264>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	4a42      	ldr	r2, [pc, #264]	@ (800476c <HAL_RCC_ClockConfig+0x264>)
 8004662:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004666:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	d007      	beq.n	8004684 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004674:	4b3d      	ldr	r3, [pc, #244]	@ (800476c <HAL_RCC_ClockConfig+0x264>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800467c:	4a3b      	ldr	r2, [pc, #236]	@ (800476c <HAL_RCC_ClockConfig+0x264>)
 800467e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004682:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004684:	4b39      	ldr	r3, [pc, #228]	@ (800476c <HAL_RCC_ClockConfig+0x264>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	4936      	ldr	r1, [pc, #216]	@ (800476c <HAL_RCC_ClockConfig+0x264>)
 8004692:	4313      	orrs	r3, r2
 8004694:	608b      	str	r3, [r1, #8]
 8004696:	e008      	b.n	80046aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	2b80      	cmp	r3, #128	@ 0x80
 800469c:	d105      	bne.n	80046aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800469e:	4b33      	ldr	r3, [pc, #204]	@ (800476c <HAL_RCC_ClockConfig+0x264>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	4a32      	ldr	r2, [pc, #200]	@ (800476c <HAL_RCC_ClockConfig+0x264>)
 80046a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004768 <HAL_RCC_ClockConfig+0x260>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d21d      	bcs.n	80046f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004768 <HAL_RCC_ClockConfig+0x260>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f023 020f 	bic.w	r2, r3, #15
 80046c0:	4929      	ldr	r1, [pc, #164]	@ (8004768 <HAL_RCC_ClockConfig+0x260>)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80046c8:	f7fc ffea 	bl	80016a0 <HAL_GetTick>
 80046cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ce:	e00a      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d0:	f7fc ffe6 	bl	80016a0 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046de:	4293      	cmp	r3, r2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e03b      	b.n	800475e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e6:	4b20      	ldr	r3, [pc, #128]	@ (8004768 <HAL_RCC_ClockConfig+0x260>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d1ed      	bne.n	80046d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d008      	beq.n	8004712 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004700:	4b1a      	ldr	r3, [pc, #104]	@ (800476c <HAL_RCC_ClockConfig+0x264>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	4917      	ldr	r1, [pc, #92]	@ (800476c <HAL_RCC_ClockConfig+0x264>)
 800470e:	4313      	orrs	r3, r2
 8004710:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0308 	and.w	r3, r3, #8
 800471a:	2b00      	cmp	r3, #0
 800471c:	d009      	beq.n	8004732 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800471e:	4b13      	ldr	r3, [pc, #76]	@ (800476c <HAL_RCC_ClockConfig+0x264>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	490f      	ldr	r1, [pc, #60]	@ (800476c <HAL_RCC_ClockConfig+0x264>)
 800472e:	4313      	orrs	r3, r2
 8004730:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004732:	f000 f825 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 8004736:	4602      	mov	r2, r0
 8004738:	4b0c      	ldr	r3, [pc, #48]	@ (800476c <HAL_RCC_ClockConfig+0x264>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	091b      	lsrs	r3, r3, #4
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	490c      	ldr	r1, [pc, #48]	@ (8004774 <HAL_RCC_ClockConfig+0x26c>)
 8004744:	5ccb      	ldrb	r3, [r1, r3]
 8004746:	f003 031f 	and.w	r3, r3, #31
 800474a:	fa22 f303 	lsr.w	r3, r2, r3
 800474e:	4a0a      	ldr	r2, [pc, #40]	@ (8004778 <HAL_RCC_ClockConfig+0x270>)
 8004750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004752:	4b0a      	ldr	r3, [pc, #40]	@ (800477c <HAL_RCC_ClockConfig+0x274>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f7fc ff56 	bl	8001608 <HAL_InitTick>
 800475c:	4603      	mov	r3, r0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40022000 	.word	0x40022000
 800476c:	40021000 	.word	0x40021000
 8004770:	04c4b400 	.word	0x04c4b400
 8004774:	080076c8 	.word	0x080076c8
 8004778:	20000000 	.word	0x20000000
 800477c:	20000004 	.word	0x20000004

08004780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004786:	4b2c      	ldr	r3, [pc, #176]	@ (8004838 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 030c 	and.w	r3, r3, #12
 800478e:	2b04      	cmp	r3, #4
 8004790:	d102      	bne.n	8004798 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004792:	4b2a      	ldr	r3, [pc, #168]	@ (800483c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004794:	613b      	str	r3, [r7, #16]
 8004796:	e047      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004798:	4b27      	ldr	r3, [pc, #156]	@ (8004838 <HAL_RCC_GetSysClockFreq+0xb8>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f003 030c 	and.w	r3, r3, #12
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d102      	bne.n	80047aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047a4:	4b26      	ldr	r3, [pc, #152]	@ (8004840 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	e03e      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80047aa:	4b23      	ldr	r3, [pc, #140]	@ (8004838 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 030c 	and.w	r3, r3, #12
 80047b2:	2b0c      	cmp	r3, #12
 80047b4:	d136      	bne.n	8004824 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047b6:	4b20      	ldr	r3, [pc, #128]	@ (8004838 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f003 0303 	and.w	r3, r3, #3
 80047be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004838 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	091b      	lsrs	r3, r3, #4
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	3301      	adds	r3, #1
 80047cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2b03      	cmp	r3, #3
 80047d2:	d10c      	bne.n	80047ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047d4:	4a1a      	ldr	r2, [pc, #104]	@ (8004840 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047dc:	4a16      	ldr	r2, [pc, #88]	@ (8004838 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047de:	68d2      	ldr	r2, [r2, #12]
 80047e0:	0a12      	lsrs	r2, r2, #8
 80047e2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80047e6:	fb02 f303 	mul.w	r3, r2, r3
 80047ea:	617b      	str	r3, [r7, #20]
      break;
 80047ec:	e00c      	b.n	8004808 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047ee:	4a13      	ldr	r2, [pc, #76]	@ (800483c <HAL_RCC_GetSysClockFreq+0xbc>)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f6:	4a10      	ldr	r2, [pc, #64]	@ (8004838 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047f8:	68d2      	ldr	r2, [r2, #12]
 80047fa:	0a12      	lsrs	r2, r2, #8
 80047fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004800:	fb02 f303 	mul.w	r3, r2, r3
 8004804:	617b      	str	r3, [r7, #20]
      break;
 8004806:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004808:	4b0b      	ldr	r3, [pc, #44]	@ (8004838 <HAL_RCC_GetSysClockFreq+0xb8>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	0e5b      	lsrs	r3, r3, #25
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	3301      	adds	r3, #1
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004820:	613b      	str	r3, [r7, #16]
 8004822:	e001      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004828:	693b      	ldr	r3, [r7, #16]
}
 800482a:	4618      	mov	r0, r3
 800482c:	371c      	adds	r7, #28
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40021000 	.word	0x40021000
 800483c:	00f42400 	.word	0x00f42400
 8004840:	016e3600 	.word	0x016e3600

08004844 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004848:	4b03      	ldr	r3, [pc, #12]	@ (8004858 <HAL_RCC_GetHCLKFreq+0x14>)
 800484a:	681b      	ldr	r3, [r3, #0]
}
 800484c:	4618      	mov	r0, r3
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	20000000 	.word	0x20000000

0800485c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004860:	f7ff fff0 	bl	8004844 <HAL_RCC_GetHCLKFreq>
 8004864:	4602      	mov	r2, r0
 8004866:	4b06      	ldr	r3, [pc, #24]	@ (8004880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	0a1b      	lsrs	r3, r3, #8
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	4904      	ldr	r1, [pc, #16]	@ (8004884 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004872:	5ccb      	ldrb	r3, [r1, r3]
 8004874:	f003 031f 	and.w	r3, r3, #31
 8004878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800487c:	4618      	mov	r0, r3
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40021000 	.word	0x40021000
 8004884:	080076d8 	.word	0x080076d8

08004888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800488c:	f7ff ffda 	bl	8004844 <HAL_RCC_GetHCLKFreq>
 8004890:	4602      	mov	r2, r0
 8004892:	4b06      	ldr	r3, [pc, #24]	@ (80048ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	0adb      	lsrs	r3, r3, #11
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	4904      	ldr	r1, [pc, #16]	@ (80048b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800489e:	5ccb      	ldrb	r3, [r1, r3]
 80048a0:	f003 031f 	and.w	r3, r3, #31
 80048a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40021000 	.word	0x40021000
 80048b0:	080076d8 	.word	0x080076d8

080048b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048ba:	4b1e      	ldr	r3, [pc, #120]	@ (8004934 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004934 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	091b      	lsrs	r3, r3, #4
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	3301      	adds	r3, #1
 80048d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	2b03      	cmp	r3, #3
 80048d6:	d10c      	bne.n	80048f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048d8:	4a17      	ldr	r2, [pc, #92]	@ (8004938 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e0:	4a14      	ldr	r2, [pc, #80]	@ (8004934 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048e2:	68d2      	ldr	r2, [r2, #12]
 80048e4:	0a12      	lsrs	r2, r2, #8
 80048e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80048ea:	fb02 f303 	mul.w	r3, r2, r3
 80048ee:	617b      	str	r3, [r7, #20]
    break;
 80048f0:	e00c      	b.n	800490c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048f2:	4a12      	ldr	r2, [pc, #72]	@ (800493c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fa:	4a0e      	ldr	r2, [pc, #56]	@ (8004934 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048fc:	68d2      	ldr	r2, [r2, #12]
 80048fe:	0a12      	lsrs	r2, r2, #8
 8004900:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004904:	fb02 f303 	mul.w	r3, r2, r3
 8004908:	617b      	str	r3, [r7, #20]
    break;
 800490a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800490c:	4b09      	ldr	r3, [pc, #36]	@ (8004934 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	0e5b      	lsrs	r3, r3, #25
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	3301      	adds	r3, #1
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004926:	687b      	ldr	r3, [r7, #4]
}
 8004928:	4618      	mov	r0, r3
 800492a:	371c      	adds	r7, #28
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	40021000 	.word	0x40021000
 8004938:	016e3600 	.word	0x016e3600
 800493c:	00f42400 	.word	0x00f42400

08004940 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004948:	2300      	movs	r3, #0
 800494a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800494c:	2300      	movs	r3, #0
 800494e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 8098 	beq.w	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800495e:	2300      	movs	r3, #0
 8004960:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004962:	4b43      	ldr	r3, [pc, #268]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10d      	bne.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800496e:	4b40      	ldr	r3, [pc, #256]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004972:	4a3f      	ldr	r2, [pc, #252]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004978:	6593      	str	r3, [r2, #88]	@ 0x58
 800497a:	4b3d      	ldr	r3, [pc, #244]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800497c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800497e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004986:	2301      	movs	r3, #1
 8004988:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800498a:	4b3a      	ldr	r3, [pc, #232]	@ (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a39      	ldr	r2, [pc, #228]	@ (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004990:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004994:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004996:	f7fc fe83 	bl	80016a0 <HAL_GetTick>
 800499a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800499c:	e009      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800499e:	f7fc fe7f 	bl	80016a0 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d902      	bls.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	74fb      	strb	r3, [r7, #19]
        break;
 80049b0:	e005      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049b2:	4b30      	ldr	r3, [pc, #192]	@ (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d0ef      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80049be:	7cfb      	ldrb	r3, [r7, #19]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d159      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049c4:	4b2a      	ldr	r3, [pc, #168]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d01e      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d019      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049e0:	4b23      	ldr	r3, [pc, #140]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049ec:	4b20      	ldr	r3, [pc, #128]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f2:	4a1f      	ldr	r2, [pc, #124]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a02:	4a1b      	ldr	r2, [pc, #108]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a0c:	4a18      	ldr	r2, [pc, #96]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d016      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1e:	f7fc fe3f 	bl	80016a0 <HAL_GetTick>
 8004a22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a24:	e00b      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a26:	f7fc fe3b 	bl	80016a0 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d902      	bls.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	74fb      	strb	r3, [r7, #19]
            break;
 8004a3c:	e006      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0ec      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a4c:	7cfb      	ldrb	r3, [r7, #19]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10b      	bne.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a52:	4b07      	ldr	r3, [pc, #28]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a60:	4903      	ldr	r1, [pc, #12]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004a68:	e008      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a6a:	7cfb      	ldrb	r3, [r7, #19]
 8004a6c:	74bb      	strb	r3, [r7, #18]
 8004a6e:	e005      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a70:	40021000 	.word	0x40021000
 8004a74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a78:	7cfb      	ldrb	r3, [r7, #19]
 8004a7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a7c:	7c7b      	ldrb	r3, [r7, #17]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d105      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a82:	4ba7      	ldr	r3, [pc, #668]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a86:	4aa6      	ldr	r2, [pc, #664]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a8c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a9a:	4ba1      	ldr	r3, [pc, #644]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa0:	f023 0203 	bic.w	r2, r3, #3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	499d      	ldr	r1, [pc, #628]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004abc:	4b98      	ldr	r3, [pc, #608]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac2:	f023 020c 	bic.w	r2, r3, #12
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	4995      	ldr	r1, [pc, #596]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ade:	4b90      	ldr	r3, [pc, #576]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	498c      	ldr	r1, [pc, #560]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0308 	and.w	r3, r3, #8
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00a      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b00:	4b87      	ldr	r3, [pc, #540]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b06:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	4984      	ldr	r1, [pc, #528]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0310 	and.w	r3, r3, #16
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b22:	4b7f      	ldr	r3, [pc, #508]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	497b      	ldr	r1, [pc, #492]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0320 	and.w	r3, r3, #32
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00a      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b44:	4b76      	ldr	r3, [pc, #472]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b4a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	4973      	ldr	r1, [pc, #460]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00a      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b66:	4b6e      	ldr	r3, [pc, #440]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b6c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	496a      	ldr	r1, [pc, #424]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00a      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b88:	4b65      	ldr	r3, [pc, #404]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b8e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	4962      	ldr	r1, [pc, #392]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004baa:	4b5d      	ldr	r3, [pc, #372]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb8:	4959      	ldr	r1, [pc, #356]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00a      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bcc:	4b54      	ldr	r3, [pc, #336]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bd2:	f023 0203 	bic.w	r2, r3, #3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bda:	4951      	ldr	r1, [pc, #324]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00a      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bee:	4b4c      	ldr	r3, [pc, #304]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfc:	4948      	ldr	r1, [pc, #288]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d015      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c10:	4b43      	ldr	r3, [pc, #268]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c1e:	4940      	ldr	r1, [pc, #256]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c2e:	d105      	bne.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c30:	4b3b      	ldr	r3, [pc, #236]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	4a3a      	ldr	r2, [pc, #232]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c3a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d015      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c48:	4b35      	ldr	r3, [pc, #212]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c4e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c56:	4932      	ldr	r1, [pc, #200]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c66:	d105      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c68:	4b2d      	ldr	r3, [pc, #180]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	4a2c      	ldr	r2, [pc, #176]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c72:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d015      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c80:	4b27      	ldr	r3, [pc, #156]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c86:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c8e:	4924      	ldr	r1, [pc, #144]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c9e:	d105      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	4a1e      	ldr	r2, [pc, #120]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004caa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d015      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cb8:	4b19      	ldr	r3, [pc, #100]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cbe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc6:	4916      	ldr	r1, [pc, #88]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cd6:	d105      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cd8:	4b11      	ldr	r3, [pc, #68]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	4a10      	ldr	r2, [pc, #64]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ce2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d019      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfe:	4908      	ldr	r1, [pc, #32]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d0e:	d109      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d10:	4b03      	ldr	r3, [pc, #12]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	4a02      	ldr	r2, [pc, #8]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d1a:	60d3      	str	r3, [r2, #12]
 8004d1c:	e002      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004d1e:	bf00      	nop
 8004d20:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d015      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d30:	4b29      	ldr	r3, [pc, #164]	@ (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d36:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3e:	4926      	ldr	r1, [pc, #152]	@ (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d4e:	d105      	bne.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d50:	4b21      	ldr	r3, [pc, #132]	@ (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	4a20      	ldr	r2, [pc, #128]	@ (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d5a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d015      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004d68:	4b1b      	ldr	r3, [pc, #108]	@ (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d6e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d76:	4918      	ldr	r1, [pc, #96]	@ (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d86:	d105      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d88:	4b13      	ldr	r3, [pc, #76]	@ (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	4a12      	ldr	r2, [pc, #72]	@ (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d92:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d015      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004da0:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004da2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004da6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dae:	490a      	ldr	r1, [pc, #40]	@ (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dbe:	d105      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dc0:	4b05      	ldr	r3, [pc, #20]	@ (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	4a04      	ldr	r2, [pc, #16]	@ (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004dcc:	7cbb      	ldrb	r3, [r7, #18]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	40021000 	.word	0x40021000

08004ddc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e049      	b.n	8004e82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fc fa24 	bl	8001250 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3304      	adds	r3, #4
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4610      	mov	r0, r2
 8004e1c:	f000 ff68 	bl	8005cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
	...

08004e8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d001      	beq.n	8004ea4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e04c      	b.n	8004f3e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a26      	ldr	r2, [pc, #152]	@ (8004f4c <HAL_TIM_Base_Start+0xc0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d022      	beq.n	8004efc <HAL_TIM_Base_Start+0x70>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ebe:	d01d      	beq.n	8004efc <HAL_TIM_Base_Start+0x70>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a22      	ldr	r2, [pc, #136]	@ (8004f50 <HAL_TIM_Base_Start+0xc4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d018      	beq.n	8004efc <HAL_TIM_Base_Start+0x70>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a21      	ldr	r2, [pc, #132]	@ (8004f54 <HAL_TIM_Base_Start+0xc8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d013      	beq.n	8004efc <HAL_TIM_Base_Start+0x70>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a1f      	ldr	r2, [pc, #124]	@ (8004f58 <HAL_TIM_Base_Start+0xcc>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00e      	beq.n	8004efc <HAL_TIM_Base_Start+0x70>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f5c <HAL_TIM_Base_Start+0xd0>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d009      	beq.n	8004efc <HAL_TIM_Base_Start+0x70>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a1c      	ldr	r2, [pc, #112]	@ (8004f60 <HAL_TIM_Base_Start+0xd4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d004      	beq.n	8004efc <HAL_TIM_Base_Start+0x70>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8004f64 <HAL_TIM_Base_Start+0xd8>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d115      	bne.n	8004f28 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	4b19      	ldr	r3, [pc, #100]	@ (8004f68 <HAL_TIM_Base_Start+0xdc>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b06      	cmp	r3, #6
 8004f0c:	d015      	beq.n	8004f3a <HAL_TIM_Base_Start+0xae>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f14:	d011      	beq.n	8004f3a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 0201 	orr.w	r2, r2, #1
 8004f24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f26:	e008      	b.n	8004f3a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	e000      	b.n	8004f3c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40012c00 	.word	0x40012c00
 8004f50:	40000400 	.word	0x40000400
 8004f54:	40000800 	.word	0x40000800
 8004f58:	40000c00 	.word	0x40000c00
 8004f5c:	40013400 	.word	0x40013400
 8004f60:	40014000 	.word	0x40014000
 8004f64:	40015000 	.word	0x40015000
 8004f68:	00010007 	.word	0x00010007

08004f6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d001      	beq.n	8004f84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e054      	b.n	800502e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0201 	orr.w	r2, r2, #1
 8004f9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a26      	ldr	r2, [pc, #152]	@ (800503c <HAL_TIM_Base_Start_IT+0xd0>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d022      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0x80>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fae:	d01d      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0x80>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a22      	ldr	r2, [pc, #136]	@ (8005040 <HAL_TIM_Base_Start_IT+0xd4>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d018      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0x80>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a21      	ldr	r2, [pc, #132]	@ (8005044 <HAL_TIM_Base_Start_IT+0xd8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d013      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0x80>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a1f      	ldr	r2, [pc, #124]	@ (8005048 <HAL_TIM_Base_Start_IT+0xdc>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00e      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0x80>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800504c <HAL_TIM_Base_Start_IT+0xe0>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d009      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0x80>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1c      	ldr	r2, [pc, #112]	@ (8005050 <HAL_TIM_Base_Start_IT+0xe4>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d004      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0x80>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8005054 <HAL_TIM_Base_Start_IT+0xe8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d115      	bne.n	8005018 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689a      	ldr	r2, [r3, #8]
 8004ff2:	4b19      	ldr	r3, [pc, #100]	@ (8005058 <HAL_TIM_Base_Start_IT+0xec>)
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2b06      	cmp	r3, #6
 8004ffc:	d015      	beq.n	800502a <HAL_TIM_Base_Start_IT+0xbe>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005004:	d011      	beq.n	800502a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f042 0201 	orr.w	r2, r2, #1
 8005014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005016:	e008      	b.n	800502a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0201 	orr.w	r2, r2, #1
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	e000      	b.n	800502c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800502a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	40012c00 	.word	0x40012c00
 8005040:	40000400 	.word	0x40000400
 8005044:	40000800 	.word	0x40000800
 8005048:	40000c00 	.word	0x40000c00
 800504c:	40013400 	.word	0x40013400
 8005050:	40014000 	.word	0x40014000
 8005054:	40015000 	.word	0x40015000
 8005058:	00010007 	.word	0x00010007

0800505c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e049      	b.n	8005102 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d106      	bne.n	8005088 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f841 	bl	800510a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3304      	adds	r3, #4
 8005098:	4619      	mov	r1, r3
 800509a:	4610      	mov	r0, r2
 800509c:	f000 fe28 	bl	8005cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800510a:	b480      	push	{r7}
 800510c:	b083      	sub	sp, #12
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005112:	bf00      	nop
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
	...

08005120 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d109      	bne.n	8005144 <HAL_TIM_PWM_Start+0x24>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b01      	cmp	r3, #1
 800513a:	bf14      	ite	ne
 800513c:	2301      	movne	r3, #1
 800513e:	2300      	moveq	r3, #0
 8005140:	b2db      	uxtb	r3, r3
 8005142:	e03c      	b.n	80051be <HAL_TIM_PWM_Start+0x9e>
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	2b04      	cmp	r3, #4
 8005148:	d109      	bne.n	800515e <HAL_TIM_PWM_Start+0x3e>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b01      	cmp	r3, #1
 8005154:	bf14      	ite	ne
 8005156:	2301      	movne	r3, #1
 8005158:	2300      	moveq	r3, #0
 800515a:	b2db      	uxtb	r3, r3
 800515c:	e02f      	b.n	80051be <HAL_TIM_PWM_Start+0x9e>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b08      	cmp	r3, #8
 8005162:	d109      	bne.n	8005178 <HAL_TIM_PWM_Start+0x58>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b01      	cmp	r3, #1
 800516e:	bf14      	ite	ne
 8005170:	2301      	movne	r3, #1
 8005172:	2300      	moveq	r3, #0
 8005174:	b2db      	uxtb	r3, r3
 8005176:	e022      	b.n	80051be <HAL_TIM_PWM_Start+0x9e>
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	2b0c      	cmp	r3, #12
 800517c:	d109      	bne.n	8005192 <HAL_TIM_PWM_Start+0x72>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b01      	cmp	r3, #1
 8005188:	bf14      	ite	ne
 800518a:	2301      	movne	r3, #1
 800518c:	2300      	moveq	r3, #0
 800518e:	b2db      	uxtb	r3, r3
 8005190:	e015      	b.n	80051be <HAL_TIM_PWM_Start+0x9e>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b10      	cmp	r3, #16
 8005196:	d109      	bne.n	80051ac <HAL_TIM_PWM_Start+0x8c>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	bf14      	ite	ne
 80051a4:	2301      	movne	r3, #1
 80051a6:	2300      	moveq	r3, #0
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	e008      	b.n	80051be <HAL_TIM_PWM_Start+0x9e>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	bf14      	ite	ne
 80051b8:	2301      	movne	r3, #1
 80051ba:	2300      	moveq	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e0a6      	b.n	8005314 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d104      	bne.n	80051d6 <HAL_TIM_PWM_Start+0xb6>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051d4:	e023      	b.n	800521e <HAL_TIM_PWM_Start+0xfe>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b04      	cmp	r3, #4
 80051da:	d104      	bne.n	80051e6 <HAL_TIM_PWM_Start+0xc6>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051e4:	e01b      	b.n	800521e <HAL_TIM_PWM_Start+0xfe>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d104      	bne.n	80051f6 <HAL_TIM_PWM_Start+0xd6>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051f4:	e013      	b.n	800521e <HAL_TIM_PWM_Start+0xfe>
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b0c      	cmp	r3, #12
 80051fa:	d104      	bne.n	8005206 <HAL_TIM_PWM_Start+0xe6>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005204:	e00b      	b.n	800521e <HAL_TIM_PWM_Start+0xfe>
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b10      	cmp	r3, #16
 800520a:	d104      	bne.n	8005216 <HAL_TIM_PWM_Start+0xf6>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005214:	e003      	b.n	800521e <HAL_TIM_PWM_Start+0xfe>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2202      	movs	r2, #2
 800521a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2201      	movs	r2, #1
 8005224:	6839      	ldr	r1, [r7, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f001 f9dc 	bl	80065e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a3a      	ldr	r2, [pc, #232]	@ (800531c <HAL_TIM_PWM_Start+0x1fc>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d018      	beq.n	8005268 <HAL_TIM_PWM_Start+0x148>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a39      	ldr	r2, [pc, #228]	@ (8005320 <HAL_TIM_PWM_Start+0x200>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d013      	beq.n	8005268 <HAL_TIM_PWM_Start+0x148>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a37      	ldr	r2, [pc, #220]	@ (8005324 <HAL_TIM_PWM_Start+0x204>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d00e      	beq.n	8005268 <HAL_TIM_PWM_Start+0x148>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a36      	ldr	r2, [pc, #216]	@ (8005328 <HAL_TIM_PWM_Start+0x208>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d009      	beq.n	8005268 <HAL_TIM_PWM_Start+0x148>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a34      	ldr	r2, [pc, #208]	@ (800532c <HAL_TIM_PWM_Start+0x20c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d004      	beq.n	8005268 <HAL_TIM_PWM_Start+0x148>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a33      	ldr	r2, [pc, #204]	@ (8005330 <HAL_TIM_PWM_Start+0x210>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d101      	bne.n	800526c <HAL_TIM_PWM_Start+0x14c>
 8005268:	2301      	movs	r3, #1
 800526a:	e000      	b.n	800526e <HAL_TIM_PWM_Start+0x14e>
 800526c:	2300      	movs	r3, #0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d007      	beq.n	8005282 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005280:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a25      	ldr	r2, [pc, #148]	@ (800531c <HAL_TIM_PWM_Start+0x1fc>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d022      	beq.n	80052d2 <HAL_TIM_PWM_Start+0x1b2>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005294:	d01d      	beq.n	80052d2 <HAL_TIM_PWM_Start+0x1b2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a26      	ldr	r2, [pc, #152]	@ (8005334 <HAL_TIM_PWM_Start+0x214>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d018      	beq.n	80052d2 <HAL_TIM_PWM_Start+0x1b2>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a24      	ldr	r2, [pc, #144]	@ (8005338 <HAL_TIM_PWM_Start+0x218>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d013      	beq.n	80052d2 <HAL_TIM_PWM_Start+0x1b2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a23      	ldr	r2, [pc, #140]	@ (800533c <HAL_TIM_PWM_Start+0x21c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d00e      	beq.n	80052d2 <HAL_TIM_PWM_Start+0x1b2>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a19      	ldr	r2, [pc, #100]	@ (8005320 <HAL_TIM_PWM_Start+0x200>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d009      	beq.n	80052d2 <HAL_TIM_PWM_Start+0x1b2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a18      	ldr	r2, [pc, #96]	@ (8005324 <HAL_TIM_PWM_Start+0x204>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d004      	beq.n	80052d2 <HAL_TIM_PWM_Start+0x1b2>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a18      	ldr	r2, [pc, #96]	@ (8005330 <HAL_TIM_PWM_Start+0x210>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d115      	bne.n	80052fe <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	4b19      	ldr	r3, [pc, #100]	@ (8005340 <HAL_TIM_PWM_Start+0x220>)
 80052da:	4013      	ands	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b06      	cmp	r3, #6
 80052e2:	d015      	beq.n	8005310 <HAL_TIM_PWM_Start+0x1f0>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052ea:	d011      	beq.n	8005310 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f042 0201 	orr.w	r2, r2, #1
 80052fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052fc:	e008      	b.n	8005310 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f042 0201 	orr.w	r2, r2, #1
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	e000      	b.n	8005312 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005310:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	40012c00 	.word	0x40012c00
 8005320:	40013400 	.word	0x40013400
 8005324:	40014000 	.word	0x40014000
 8005328:	40014400 	.word	0x40014400
 800532c:	40014800 	.word	0x40014800
 8005330:	40015000 	.word	0x40015000
 8005334:	40000400 	.word	0x40000400
 8005338:	40000800 	.word	0x40000800
 800533c:	40000c00 	.word	0x40000c00
 8005340:	00010007 	.word	0x00010007

08005344 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e097      	b.n	8005488 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d106      	bne.n	8005372 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7fb ffd7 	bl	8001320 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2202      	movs	r2, #2
 8005376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6812      	ldr	r2, [r2, #0]
 8005384:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005388:	f023 0307 	bic.w	r3, r3, #7
 800538c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	3304      	adds	r3, #4
 8005396:	4619      	mov	r1, r3
 8005398:	4610      	mov	r0, r2
 800539a:	f000 fca9 	bl	8005cf0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	4313      	orrs	r3, r2
 80053be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053c6:	f023 0303 	bic.w	r3, r3, #3
 80053ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	021b      	lsls	r3, r3, #8
 80053d6:	4313      	orrs	r3, r2
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	4313      	orrs	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80053e4:	f023 030c 	bic.w	r3, r3, #12
 80053e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	69db      	ldr	r3, [r3, #28]
 80053fe:	021b      	lsls	r3, r3, #8
 8005400:	4313      	orrs	r3, r2
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	011a      	lsls	r2, r3, #4
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	031b      	lsls	r3, r3, #12
 8005414:	4313      	orrs	r3, r2
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	4313      	orrs	r3, r2
 800541a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005422:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800542a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	4313      	orrs	r3, r2
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	4313      	orrs	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3718      	adds	r7, #24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054a0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054a8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054b0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054b8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d110      	bne.n	80054e2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d102      	bne.n	80054cc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80054c6:	7b7b      	ldrb	r3, [r7, #13]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d001      	beq.n	80054d0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e069      	b.n	80055a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054e0:	e031      	b.n	8005546 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	d110      	bne.n	800550a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054e8:	7bbb      	ldrb	r3, [r7, #14]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d102      	bne.n	80054f4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054ee:	7b3b      	ldrb	r3, [r7, #12]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d001      	beq.n	80054f8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e055      	b.n	80055a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005508:	e01d      	b.n	8005546 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800550a:	7bfb      	ldrb	r3, [r7, #15]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d108      	bne.n	8005522 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005510:	7bbb      	ldrb	r3, [r7, #14]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d105      	bne.n	8005522 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005516:	7b7b      	ldrb	r3, [r7, #13]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d102      	bne.n	8005522 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800551c:	7b3b      	ldrb	r3, [r7, #12]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d001      	beq.n	8005526 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e03e      	b.n	80055a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2202      	movs	r2, #2
 800552a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2202      	movs	r2, #2
 8005532:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2202      	movs	r2, #2
 800553a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2202      	movs	r2, #2
 8005542:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <HAL_TIM_Encoder_Start+0xc4>
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	2b04      	cmp	r3, #4
 8005550:	d008      	beq.n	8005564 <HAL_TIM_Encoder_Start+0xd4>
 8005552:	e00f      	b.n	8005574 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2201      	movs	r2, #1
 800555a:	2100      	movs	r1, #0
 800555c:	4618      	mov	r0, r3
 800555e:	f001 f841 	bl	80065e4 <TIM_CCxChannelCmd>
      break;
 8005562:	e016      	b.n	8005592 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2201      	movs	r2, #1
 800556a:	2104      	movs	r1, #4
 800556c:	4618      	mov	r0, r3
 800556e:	f001 f839 	bl	80065e4 <TIM_CCxChannelCmd>
      break;
 8005572:	e00e      	b.n	8005592 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2201      	movs	r2, #1
 800557a:	2100      	movs	r1, #0
 800557c:	4618      	mov	r0, r3
 800557e:	f001 f831 	bl	80065e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2201      	movs	r2, #1
 8005588:	2104      	movs	r1, #4
 800558a:	4618      	mov	r0, r3
 800558c:	f001 f82a 	bl	80065e4 <TIM_CCxChannelCmd>
      break;
 8005590:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f042 0201 	orr.w	r2, r2, #1
 80055a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d020      	beq.n	8005610 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d01b      	beq.n	8005610 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f06f 0202 	mvn.w	r2, #2
 80055e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fb5c 	bl	8005cb4 <HAL_TIM_IC_CaptureCallback>
 80055fc:	e005      	b.n	800560a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fb4e 	bl	8005ca0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 fb5f 	bl	8005cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f003 0304 	and.w	r3, r3, #4
 8005616:	2b00      	cmp	r3, #0
 8005618:	d020      	beq.n	800565c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b00      	cmp	r3, #0
 8005622:	d01b      	beq.n	800565c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0204 	mvn.w	r2, #4
 800562c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2202      	movs	r2, #2
 8005632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fb36 	bl	8005cb4 <HAL_TIM_IC_CaptureCallback>
 8005648:	e005      	b.n	8005656 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 fb28 	bl	8005ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 fb39 	bl	8005cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b00      	cmp	r3, #0
 8005664:	d020      	beq.n	80056a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f003 0308 	and.w	r3, r3, #8
 800566c:	2b00      	cmp	r3, #0
 800566e:	d01b      	beq.n	80056a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f06f 0208 	mvn.w	r2, #8
 8005678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2204      	movs	r2, #4
 800567e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fb10 	bl	8005cb4 <HAL_TIM_IC_CaptureCallback>
 8005694:	e005      	b.n	80056a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fb02 	bl	8005ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 fb13 	bl	8005cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	f003 0310 	and.w	r3, r3, #16
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d020      	beq.n	80056f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f003 0310 	and.w	r3, r3, #16
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d01b      	beq.n	80056f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f06f 0210 	mvn.w	r2, #16
 80056c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2208      	movs	r2, #8
 80056ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 faea 	bl	8005cb4 <HAL_TIM_IC_CaptureCallback>
 80056e0:	e005      	b.n	80056ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fadc 	bl	8005ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 faed 	bl	8005cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00c      	beq.n	8005718 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d007      	beq.n	8005718 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f06f 0201 	mvn.w	r2, #1
 8005710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7fb fc34 	bl	8000f80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800571e:	2b00      	cmp	r3, #0
 8005720:	d104      	bne.n	800572c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00c      	beq.n	8005746 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005732:	2b00      	cmp	r3, #0
 8005734:	d007      	beq.n	8005746 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800573e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f001 f8a9 	bl	8006898 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00c      	beq.n	800576a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005756:	2b00      	cmp	r3, #0
 8005758:	d007      	beq.n	800576a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f001 f8a1 	bl	80068ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00c      	beq.n	800578e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800577a:	2b00      	cmp	r3, #0
 800577c:	d007      	beq.n	800578e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 faa7 	bl	8005cdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f003 0320 	and.w	r3, r3, #32
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00c      	beq.n	80057b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f003 0320 	and.w	r3, r3, #32
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d007      	beq.n	80057b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f06f 0220 	mvn.w	r2, #32
 80057aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f001 f869 	bl	8006884 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00c      	beq.n	80057d6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d007      	beq.n	80057d6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80057ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f001 f875 	bl	80068c0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00c      	beq.n	80057fa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d007      	beq.n	80057fa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80057f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f001 f86d 	bl	80068d4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00c      	beq.n	800581e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d007      	beq.n	800581e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f001 f865 	bl	80068e8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00c      	beq.n	8005842 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d007      	beq.n	8005842 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800583a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f001 f85d 	bl	80068fc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005842:	bf00      	nop
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
	...

0800584c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005858:	2300      	movs	r3, #0
 800585a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005862:	2b01      	cmp	r3, #1
 8005864:	d101      	bne.n	800586a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005866:	2302      	movs	r3, #2
 8005868:	e0ff      	b.n	8005a6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b14      	cmp	r3, #20
 8005876:	f200 80f0 	bhi.w	8005a5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800587a:	a201      	add	r2, pc, #4	@ (adr r2, 8005880 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800587c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005880:	080058d5 	.word	0x080058d5
 8005884:	08005a5b 	.word	0x08005a5b
 8005888:	08005a5b 	.word	0x08005a5b
 800588c:	08005a5b 	.word	0x08005a5b
 8005890:	08005915 	.word	0x08005915
 8005894:	08005a5b 	.word	0x08005a5b
 8005898:	08005a5b 	.word	0x08005a5b
 800589c:	08005a5b 	.word	0x08005a5b
 80058a0:	08005957 	.word	0x08005957
 80058a4:	08005a5b 	.word	0x08005a5b
 80058a8:	08005a5b 	.word	0x08005a5b
 80058ac:	08005a5b 	.word	0x08005a5b
 80058b0:	08005997 	.word	0x08005997
 80058b4:	08005a5b 	.word	0x08005a5b
 80058b8:	08005a5b 	.word	0x08005a5b
 80058bc:	08005a5b 	.word	0x08005a5b
 80058c0:	080059d9 	.word	0x080059d9
 80058c4:	08005a5b 	.word	0x08005a5b
 80058c8:	08005a5b 	.word	0x08005a5b
 80058cc:	08005a5b 	.word	0x08005a5b
 80058d0:	08005a19 	.word	0x08005a19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fabc 	bl	8005e58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699a      	ldr	r2, [r3, #24]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0208 	orr.w	r2, r2, #8
 80058ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 0204 	bic.w	r2, r2, #4
 80058fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6999      	ldr	r1, [r3, #24]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	691a      	ldr	r2, [r3, #16]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	619a      	str	r2, [r3, #24]
      break;
 8005912:	e0a5      	b.n	8005a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68b9      	ldr	r1, [r7, #8]
 800591a:	4618      	mov	r0, r3
 800591c:	f000 fb36 	bl	8005f8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699a      	ldr	r2, [r3, #24]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800592e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800593e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6999      	ldr	r1, [r3, #24]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	021a      	lsls	r2, r3, #8
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	619a      	str	r2, [r3, #24]
      break;
 8005954:	e084      	b.n	8005a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68b9      	ldr	r1, [r7, #8]
 800595c:	4618      	mov	r0, r3
 800595e:	f000 fba9 	bl	80060b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69da      	ldr	r2, [r3, #28]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f042 0208 	orr.w	r2, r2, #8
 8005970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69da      	ldr	r2, [r3, #28]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0204 	bic.w	r2, r2, #4
 8005980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69d9      	ldr	r1, [r3, #28]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	430a      	orrs	r2, r1
 8005992:	61da      	str	r2, [r3, #28]
      break;
 8005994:	e064      	b.n	8005a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68b9      	ldr	r1, [r7, #8]
 800599c:	4618      	mov	r0, r3
 800599e:	f000 fc1b 	bl	80061d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69da      	ldr	r2, [r3, #28]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69da      	ldr	r2, [r3, #28]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69d9      	ldr	r1, [r3, #28]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	021a      	lsls	r2, r3, #8
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	61da      	str	r2, [r3, #28]
      break;
 80059d6:	e043      	b.n	8005a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68b9      	ldr	r1, [r7, #8]
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fc8e 	bl	8006300 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0208 	orr.w	r2, r2, #8
 80059f2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0204 	bic.w	r2, r2, #4
 8005a02:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	691a      	ldr	r2, [r3, #16]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005a16:	e023      	b.n	8005a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68b9      	ldr	r1, [r7, #8]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 fcd8 	bl	80063d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a32:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a42:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	021a      	lsls	r2, r3, #8
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005a58:	e002      	b.n	8005a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3718      	adds	r7, #24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop

08005a74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d101      	bne.n	8005a90 <HAL_TIM_ConfigClockSource+0x1c>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	e0f6      	b.n	8005c7e <HAL_TIM_ConfigClockSource+0x20a>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005aae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ab2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005aba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a6f      	ldr	r2, [pc, #444]	@ (8005c88 <HAL_TIM_ConfigClockSource+0x214>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	f000 80c1 	beq.w	8005c52 <HAL_TIM_ConfigClockSource+0x1de>
 8005ad0:	4a6d      	ldr	r2, [pc, #436]	@ (8005c88 <HAL_TIM_ConfigClockSource+0x214>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	f200 80c6 	bhi.w	8005c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ad8:	4a6c      	ldr	r2, [pc, #432]	@ (8005c8c <HAL_TIM_ConfigClockSource+0x218>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	f000 80b9 	beq.w	8005c52 <HAL_TIM_ConfigClockSource+0x1de>
 8005ae0:	4a6a      	ldr	r2, [pc, #424]	@ (8005c8c <HAL_TIM_ConfigClockSource+0x218>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	f200 80be 	bhi.w	8005c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ae8:	4a69      	ldr	r2, [pc, #420]	@ (8005c90 <HAL_TIM_ConfigClockSource+0x21c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	f000 80b1 	beq.w	8005c52 <HAL_TIM_ConfigClockSource+0x1de>
 8005af0:	4a67      	ldr	r2, [pc, #412]	@ (8005c90 <HAL_TIM_ConfigClockSource+0x21c>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	f200 80b6 	bhi.w	8005c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005af8:	4a66      	ldr	r2, [pc, #408]	@ (8005c94 <HAL_TIM_ConfigClockSource+0x220>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	f000 80a9 	beq.w	8005c52 <HAL_TIM_ConfigClockSource+0x1de>
 8005b00:	4a64      	ldr	r2, [pc, #400]	@ (8005c94 <HAL_TIM_ConfigClockSource+0x220>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	f200 80ae 	bhi.w	8005c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b08:	4a63      	ldr	r2, [pc, #396]	@ (8005c98 <HAL_TIM_ConfigClockSource+0x224>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	f000 80a1 	beq.w	8005c52 <HAL_TIM_ConfigClockSource+0x1de>
 8005b10:	4a61      	ldr	r2, [pc, #388]	@ (8005c98 <HAL_TIM_ConfigClockSource+0x224>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	f200 80a6 	bhi.w	8005c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b18:	4a60      	ldr	r2, [pc, #384]	@ (8005c9c <HAL_TIM_ConfigClockSource+0x228>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	f000 8099 	beq.w	8005c52 <HAL_TIM_ConfigClockSource+0x1de>
 8005b20:	4a5e      	ldr	r2, [pc, #376]	@ (8005c9c <HAL_TIM_ConfigClockSource+0x228>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	f200 809e 	bhi.w	8005c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b28:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005b2c:	f000 8091 	beq.w	8005c52 <HAL_TIM_ConfigClockSource+0x1de>
 8005b30:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005b34:	f200 8096 	bhi.w	8005c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b3c:	f000 8089 	beq.w	8005c52 <HAL_TIM_ConfigClockSource+0x1de>
 8005b40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b44:	f200 808e 	bhi.w	8005c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b4c:	d03e      	beq.n	8005bcc <HAL_TIM_ConfigClockSource+0x158>
 8005b4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b52:	f200 8087 	bhi.w	8005c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b5a:	f000 8086 	beq.w	8005c6a <HAL_TIM_ConfigClockSource+0x1f6>
 8005b5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b62:	d87f      	bhi.n	8005c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b64:	2b70      	cmp	r3, #112	@ 0x70
 8005b66:	d01a      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0x12a>
 8005b68:	2b70      	cmp	r3, #112	@ 0x70
 8005b6a:	d87b      	bhi.n	8005c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b6c:	2b60      	cmp	r3, #96	@ 0x60
 8005b6e:	d050      	beq.n	8005c12 <HAL_TIM_ConfigClockSource+0x19e>
 8005b70:	2b60      	cmp	r3, #96	@ 0x60
 8005b72:	d877      	bhi.n	8005c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b74:	2b50      	cmp	r3, #80	@ 0x50
 8005b76:	d03c      	beq.n	8005bf2 <HAL_TIM_ConfigClockSource+0x17e>
 8005b78:	2b50      	cmp	r3, #80	@ 0x50
 8005b7a:	d873      	bhi.n	8005c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b7c:	2b40      	cmp	r3, #64	@ 0x40
 8005b7e:	d058      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x1be>
 8005b80:	2b40      	cmp	r3, #64	@ 0x40
 8005b82:	d86f      	bhi.n	8005c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b84:	2b30      	cmp	r3, #48	@ 0x30
 8005b86:	d064      	beq.n	8005c52 <HAL_TIM_ConfigClockSource+0x1de>
 8005b88:	2b30      	cmp	r3, #48	@ 0x30
 8005b8a:	d86b      	bhi.n	8005c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b8c:	2b20      	cmp	r3, #32
 8005b8e:	d060      	beq.n	8005c52 <HAL_TIM_ConfigClockSource+0x1de>
 8005b90:	2b20      	cmp	r3, #32
 8005b92:	d867      	bhi.n	8005c64 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d05c      	beq.n	8005c52 <HAL_TIM_ConfigClockSource+0x1de>
 8005b98:	2b10      	cmp	r3, #16
 8005b9a:	d05a      	beq.n	8005c52 <HAL_TIM_ConfigClockSource+0x1de>
 8005b9c:	e062      	b.n	8005c64 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bae:	f000 fcf9 	bl	80065a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005bc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	609a      	str	r2, [r3, #8]
      break;
 8005bca:	e04f      	b.n	8005c6c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bdc:	f000 fce2 	bl	80065a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689a      	ldr	r2, [r3, #8]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bee:	609a      	str	r2, [r3, #8]
      break;
 8005bf0:	e03c      	b.n	8005c6c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f000 fc54 	bl	80064ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2150      	movs	r1, #80	@ 0x50
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 fcad 	bl	800656a <TIM_ITRx_SetConfig>
      break;
 8005c10:	e02c      	b.n	8005c6c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c1e:	461a      	mov	r2, r3
 8005c20:	f000 fc73 	bl	800650a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2160      	movs	r1, #96	@ 0x60
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 fc9d 	bl	800656a <TIM_ITRx_SetConfig>
      break;
 8005c30:	e01c      	b.n	8005c6c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c3e:	461a      	mov	r2, r3
 8005c40:	f000 fc34 	bl	80064ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2140      	movs	r1, #64	@ 0x40
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 fc8d 	bl	800656a <TIM_ITRx_SetConfig>
      break;
 8005c50:	e00c      	b.n	8005c6c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	4610      	mov	r0, r2
 8005c5e:	f000 fc84 	bl	800656a <TIM_ITRx_SetConfig>
      break;
 8005c62:	e003      	b.n	8005c6c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	73fb      	strb	r3, [r7, #15]
      break;
 8005c68:	e000      	b.n	8005c6c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005c6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	00100070 	.word	0x00100070
 8005c8c:	00100060 	.word	0x00100060
 8005c90:	00100050 	.word	0x00100050
 8005c94:	00100040 	.word	0x00100040
 8005c98:	00100030 	.word	0x00100030
 8005c9c:	00100020 	.word	0x00100020

08005ca0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a4c      	ldr	r2, [pc, #304]	@ (8005e34 <TIM_Base_SetConfig+0x144>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d017      	beq.n	8005d38 <TIM_Base_SetConfig+0x48>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d0e:	d013      	beq.n	8005d38 <TIM_Base_SetConfig+0x48>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a49      	ldr	r2, [pc, #292]	@ (8005e38 <TIM_Base_SetConfig+0x148>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d00f      	beq.n	8005d38 <TIM_Base_SetConfig+0x48>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a48      	ldr	r2, [pc, #288]	@ (8005e3c <TIM_Base_SetConfig+0x14c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00b      	beq.n	8005d38 <TIM_Base_SetConfig+0x48>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a47      	ldr	r2, [pc, #284]	@ (8005e40 <TIM_Base_SetConfig+0x150>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d007      	beq.n	8005d38 <TIM_Base_SetConfig+0x48>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a46      	ldr	r2, [pc, #280]	@ (8005e44 <TIM_Base_SetConfig+0x154>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d003      	beq.n	8005d38 <TIM_Base_SetConfig+0x48>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a45      	ldr	r2, [pc, #276]	@ (8005e48 <TIM_Base_SetConfig+0x158>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d108      	bne.n	8005d4a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a39      	ldr	r2, [pc, #228]	@ (8005e34 <TIM_Base_SetConfig+0x144>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d023      	beq.n	8005d9a <TIM_Base_SetConfig+0xaa>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d58:	d01f      	beq.n	8005d9a <TIM_Base_SetConfig+0xaa>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a36      	ldr	r2, [pc, #216]	@ (8005e38 <TIM_Base_SetConfig+0x148>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d01b      	beq.n	8005d9a <TIM_Base_SetConfig+0xaa>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a35      	ldr	r2, [pc, #212]	@ (8005e3c <TIM_Base_SetConfig+0x14c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d017      	beq.n	8005d9a <TIM_Base_SetConfig+0xaa>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a34      	ldr	r2, [pc, #208]	@ (8005e40 <TIM_Base_SetConfig+0x150>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d013      	beq.n	8005d9a <TIM_Base_SetConfig+0xaa>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a33      	ldr	r2, [pc, #204]	@ (8005e44 <TIM_Base_SetConfig+0x154>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d00f      	beq.n	8005d9a <TIM_Base_SetConfig+0xaa>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a33      	ldr	r2, [pc, #204]	@ (8005e4c <TIM_Base_SetConfig+0x15c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d00b      	beq.n	8005d9a <TIM_Base_SetConfig+0xaa>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a32      	ldr	r2, [pc, #200]	@ (8005e50 <TIM_Base_SetConfig+0x160>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d007      	beq.n	8005d9a <TIM_Base_SetConfig+0xaa>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a31      	ldr	r2, [pc, #196]	@ (8005e54 <TIM_Base_SetConfig+0x164>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d003      	beq.n	8005d9a <TIM_Base_SetConfig+0xaa>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a2c      	ldr	r2, [pc, #176]	@ (8005e48 <TIM_Base_SetConfig+0x158>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d108      	bne.n	8005dac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005da0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	689a      	ldr	r2, [r3, #8]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a18      	ldr	r2, [pc, #96]	@ (8005e34 <TIM_Base_SetConfig+0x144>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d013      	beq.n	8005e00 <TIM_Base_SetConfig+0x110>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a1a      	ldr	r2, [pc, #104]	@ (8005e44 <TIM_Base_SetConfig+0x154>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d00f      	beq.n	8005e00 <TIM_Base_SetConfig+0x110>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a1a      	ldr	r2, [pc, #104]	@ (8005e4c <TIM_Base_SetConfig+0x15c>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d00b      	beq.n	8005e00 <TIM_Base_SetConfig+0x110>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a19      	ldr	r2, [pc, #100]	@ (8005e50 <TIM_Base_SetConfig+0x160>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d007      	beq.n	8005e00 <TIM_Base_SetConfig+0x110>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a18      	ldr	r2, [pc, #96]	@ (8005e54 <TIM_Base_SetConfig+0x164>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d003      	beq.n	8005e00 <TIM_Base_SetConfig+0x110>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a13      	ldr	r2, [pc, #76]	@ (8005e48 <TIM_Base_SetConfig+0x158>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d103      	bne.n	8005e08 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	691a      	ldr	r2, [r3, #16]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d105      	bne.n	8005e26 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	f023 0201 	bic.w	r2, r3, #1
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	611a      	str	r2, [r3, #16]
  }
}
 8005e26:	bf00      	nop
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	40012c00 	.word	0x40012c00
 8005e38:	40000400 	.word	0x40000400
 8005e3c:	40000800 	.word	0x40000800
 8005e40:	40000c00 	.word	0x40000c00
 8005e44:	40013400 	.word	0x40013400
 8005e48:	40015000 	.word	0x40015000
 8005e4c:	40014000 	.word	0x40014000
 8005e50:	40014400 	.word	0x40014400
 8005e54:	40014800 	.word	0x40014800

08005e58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	f023 0201 	bic.w	r2, r3, #1
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 0303 	bic.w	r3, r3, #3
 8005e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f023 0302 	bic.w	r3, r3, #2
 8005ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a30      	ldr	r2, [pc, #192]	@ (8005f74 <TIM_OC1_SetConfig+0x11c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d013      	beq.n	8005ee0 <TIM_OC1_SetConfig+0x88>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a2f      	ldr	r2, [pc, #188]	@ (8005f78 <TIM_OC1_SetConfig+0x120>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d00f      	beq.n	8005ee0 <TIM_OC1_SetConfig+0x88>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a2e      	ldr	r2, [pc, #184]	@ (8005f7c <TIM_OC1_SetConfig+0x124>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00b      	beq.n	8005ee0 <TIM_OC1_SetConfig+0x88>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a2d      	ldr	r2, [pc, #180]	@ (8005f80 <TIM_OC1_SetConfig+0x128>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d007      	beq.n	8005ee0 <TIM_OC1_SetConfig+0x88>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a2c      	ldr	r2, [pc, #176]	@ (8005f84 <TIM_OC1_SetConfig+0x12c>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d003      	beq.n	8005ee0 <TIM_OC1_SetConfig+0x88>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a2b      	ldr	r2, [pc, #172]	@ (8005f88 <TIM_OC1_SetConfig+0x130>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d10c      	bne.n	8005efa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f023 0308 	bic.w	r3, r3, #8
 8005ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f023 0304 	bic.w	r3, r3, #4
 8005ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a1d      	ldr	r2, [pc, #116]	@ (8005f74 <TIM_OC1_SetConfig+0x11c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d013      	beq.n	8005f2a <TIM_OC1_SetConfig+0xd2>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a1c      	ldr	r2, [pc, #112]	@ (8005f78 <TIM_OC1_SetConfig+0x120>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d00f      	beq.n	8005f2a <TIM_OC1_SetConfig+0xd2>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a1b      	ldr	r2, [pc, #108]	@ (8005f7c <TIM_OC1_SetConfig+0x124>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d00b      	beq.n	8005f2a <TIM_OC1_SetConfig+0xd2>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a1a      	ldr	r2, [pc, #104]	@ (8005f80 <TIM_OC1_SetConfig+0x128>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d007      	beq.n	8005f2a <TIM_OC1_SetConfig+0xd2>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a19      	ldr	r2, [pc, #100]	@ (8005f84 <TIM_OC1_SetConfig+0x12c>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d003      	beq.n	8005f2a <TIM_OC1_SetConfig+0xd2>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a18      	ldr	r2, [pc, #96]	@ (8005f88 <TIM_OC1_SetConfig+0x130>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d111      	bne.n	8005f4e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	621a      	str	r2, [r3, #32]
}
 8005f68:	bf00      	nop
 8005f6a:	371c      	adds	r7, #28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	40012c00 	.word	0x40012c00
 8005f78:	40013400 	.word	0x40013400
 8005f7c:	40014000 	.word	0x40014000
 8005f80:	40014400 	.word	0x40014400
 8005f84:	40014800 	.word	0x40014800
 8005f88:	40015000 	.word	0x40015000

08005f8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	f023 0210 	bic.w	r2, r3, #16
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	021b      	lsls	r3, r3, #8
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f023 0320 	bic.w	r3, r3, #32
 8005fda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	011b      	lsls	r3, r3, #4
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a2c      	ldr	r2, [pc, #176]	@ (800609c <TIM_OC2_SetConfig+0x110>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d007      	beq.n	8006000 <TIM_OC2_SetConfig+0x74>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a2b      	ldr	r2, [pc, #172]	@ (80060a0 <TIM_OC2_SetConfig+0x114>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d003      	beq.n	8006000 <TIM_OC2_SetConfig+0x74>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a2a      	ldr	r2, [pc, #168]	@ (80060a4 <TIM_OC2_SetConfig+0x118>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d10d      	bne.n	800601c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	011b      	lsls	r3, r3, #4
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	4313      	orrs	r3, r2
 8006012:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800601a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a1f      	ldr	r2, [pc, #124]	@ (800609c <TIM_OC2_SetConfig+0x110>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d013      	beq.n	800604c <TIM_OC2_SetConfig+0xc0>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a1e      	ldr	r2, [pc, #120]	@ (80060a0 <TIM_OC2_SetConfig+0x114>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d00f      	beq.n	800604c <TIM_OC2_SetConfig+0xc0>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a1e      	ldr	r2, [pc, #120]	@ (80060a8 <TIM_OC2_SetConfig+0x11c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d00b      	beq.n	800604c <TIM_OC2_SetConfig+0xc0>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a1d      	ldr	r2, [pc, #116]	@ (80060ac <TIM_OC2_SetConfig+0x120>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d007      	beq.n	800604c <TIM_OC2_SetConfig+0xc0>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a1c      	ldr	r2, [pc, #112]	@ (80060b0 <TIM_OC2_SetConfig+0x124>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d003      	beq.n	800604c <TIM_OC2_SetConfig+0xc0>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a17      	ldr	r2, [pc, #92]	@ (80060a4 <TIM_OC2_SetConfig+0x118>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d113      	bne.n	8006074 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006052:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800605a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	4313      	orrs	r3, r2
 8006066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4313      	orrs	r3, r2
 8006072:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	621a      	str	r2, [r3, #32]
}
 800608e:	bf00      	nop
 8006090:	371c      	adds	r7, #28
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	40012c00 	.word	0x40012c00
 80060a0:	40013400 	.word	0x40013400
 80060a4:	40015000 	.word	0x40015000
 80060a8:	40014000 	.word	0x40014000
 80060ac:	40014400 	.word	0x40014400
 80060b0:	40014800 	.word	0x40014800

080060b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 0303 	bic.w	r3, r3, #3
 80060ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	021b      	lsls	r3, r3, #8
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	4313      	orrs	r3, r2
 800610c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a2b      	ldr	r2, [pc, #172]	@ (80061c0 <TIM_OC3_SetConfig+0x10c>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d007      	beq.n	8006126 <TIM_OC3_SetConfig+0x72>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a2a      	ldr	r2, [pc, #168]	@ (80061c4 <TIM_OC3_SetConfig+0x110>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d003      	beq.n	8006126 <TIM_OC3_SetConfig+0x72>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a29      	ldr	r2, [pc, #164]	@ (80061c8 <TIM_OC3_SetConfig+0x114>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d10d      	bne.n	8006142 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800612c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	021b      	lsls	r3, r3, #8
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	4313      	orrs	r3, r2
 8006138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a1e      	ldr	r2, [pc, #120]	@ (80061c0 <TIM_OC3_SetConfig+0x10c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d013      	beq.n	8006172 <TIM_OC3_SetConfig+0xbe>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a1d      	ldr	r2, [pc, #116]	@ (80061c4 <TIM_OC3_SetConfig+0x110>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d00f      	beq.n	8006172 <TIM_OC3_SetConfig+0xbe>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a1d      	ldr	r2, [pc, #116]	@ (80061cc <TIM_OC3_SetConfig+0x118>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d00b      	beq.n	8006172 <TIM_OC3_SetConfig+0xbe>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a1c      	ldr	r2, [pc, #112]	@ (80061d0 <TIM_OC3_SetConfig+0x11c>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d007      	beq.n	8006172 <TIM_OC3_SetConfig+0xbe>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a1b      	ldr	r2, [pc, #108]	@ (80061d4 <TIM_OC3_SetConfig+0x120>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d003      	beq.n	8006172 <TIM_OC3_SetConfig+0xbe>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a16      	ldr	r2, [pc, #88]	@ (80061c8 <TIM_OC3_SetConfig+0x114>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d113      	bne.n	800619a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	4313      	orrs	r3, r2
 800618c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	011b      	lsls	r3, r3, #4
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	4313      	orrs	r3, r2
 8006198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	621a      	str	r2, [r3, #32]
}
 80061b4:	bf00      	nop
 80061b6:	371c      	adds	r7, #28
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	40012c00 	.word	0x40012c00
 80061c4:	40013400 	.word	0x40013400
 80061c8:	40015000 	.word	0x40015000
 80061cc:	40014000 	.word	0x40014000
 80061d0:	40014400 	.word	0x40014400
 80061d4:	40014800 	.word	0x40014800

080061d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006206:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800620a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	021b      	lsls	r3, r3, #8
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	4313      	orrs	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	031b      	lsls	r3, r3, #12
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a2c      	ldr	r2, [pc, #176]	@ (80062e8 <TIM_OC4_SetConfig+0x110>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d007      	beq.n	800624c <TIM_OC4_SetConfig+0x74>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a2b      	ldr	r2, [pc, #172]	@ (80062ec <TIM_OC4_SetConfig+0x114>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d003      	beq.n	800624c <TIM_OC4_SetConfig+0x74>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a2a      	ldr	r2, [pc, #168]	@ (80062f0 <TIM_OC4_SetConfig+0x118>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d10d      	bne.n	8006268 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	031b      	lsls	r3, r3, #12
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	4313      	orrs	r3, r2
 800625e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006266:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a1f      	ldr	r2, [pc, #124]	@ (80062e8 <TIM_OC4_SetConfig+0x110>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d013      	beq.n	8006298 <TIM_OC4_SetConfig+0xc0>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a1e      	ldr	r2, [pc, #120]	@ (80062ec <TIM_OC4_SetConfig+0x114>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00f      	beq.n	8006298 <TIM_OC4_SetConfig+0xc0>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a1e      	ldr	r2, [pc, #120]	@ (80062f4 <TIM_OC4_SetConfig+0x11c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d00b      	beq.n	8006298 <TIM_OC4_SetConfig+0xc0>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a1d      	ldr	r2, [pc, #116]	@ (80062f8 <TIM_OC4_SetConfig+0x120>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d007      	beq.n	8006298 <TIM_OC4_SetConfig+0xc0>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a1c      	ldr	r2, [pc, #112]	@ (80062fc <TIM_OC4_SetConfig+0x124>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d003      	beq.n	8006298 <TIM_OC4_SetConfig+0xc0>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a17      	ldr	r2, [pc, #92]	@ (80062f0 <TIM_OC4_SetConfig+0x118>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d113      	bne.n	80062c0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800629e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80062a6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	019b      	lsls	r3, r3, #6
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	019b      	lsls	r3, r3, #6
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	4313      	orrs	r3, r2
 80062be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	621a      	str	r2, [r3, #32]
}
 80062da:	bf00      	nop
 80062dc:	371c      	adds	r7, #28
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	40012c00 	.word	0x40012c00
 80062ec:	40013400 	.word	0x40013400
 80062f0:	40015000 	.word	0x40015000
 80062f4:	40014000 	.word	0x40014000
 80062f8:	40014400 	.word	0x40014400
 80062fc:	40014800 	.word	0x40014800

08006300 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800632e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	4313      	orrs	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006344:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	041b      	lsls	r3, r3, #16
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	4313      	orrs	r3, r2
 8006350:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a19      	ldr	r2, [pc, #100]	@ (80063bc <TIM_OC5_SetConfig+0xbc>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d013      	beq.n	8006382 <TIM_OC5_SetConfig+0x82>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a18      	ldr	r2, [pc, #96]	@ (80063c0 <TIM_OC5_SetConfig+0xc0>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d00f      	beq.n	8006382 <TIM_OC5_SetConfig+0x82>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a17      	ldr	r2, [pc, #92]	@ (80063c4 <TIM_OC5_SetConfig+0xc4>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d00b      	beq.n	8006382 <TIM_OC5_SetConfig+0x82>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a16      	ldr	r2, [pc, #88]	@ (80063c8 <TIM_OC5_SetConfig+0xc8>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d007      	beq.n	8006382 <TIM_OC5_SetConfig+0x82>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a15      	ldr	r2, [pc, #84]	@ (80063cc <TIM_OC5_SetConfig+0xcc>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d003      	beq.n	8006382 <TIM_OC5_SetConfig+0x82>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a14      	ldr	r2, [pc, #80]	@ (80063d0 <TIM_OC5_SetConfig+0xd0>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d109      	bne.n	8006396 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006388:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	021b      	lsls	r3, r3, #8
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	4313      	orrs	r3, r2
 8006394:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	621a      	str	r2, [r3, #32]
}
 80063b0:	bf00      	nop
 80063b2:	371c      	adds	r7, #28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	40012c00 	.word	0x40012c00
 80063c0:	40013400 	.word	0x40013400
 80063c4:	40014000 	.word	0x40014000
 80063c8:	40014400 	.word	0x40014400
 80063cc:	40014800 	.word	0x40014800
 80063d0:	40015000 	.word	0x40015000

080063d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006402:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	021b      	lsls	r3, r3, #8
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	4313      	orrs	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800641a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	051b      	lsls	r3, r3, #20
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	4313      	orrs	r3, r2
 8006426:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a1a      	ldr	r2, [pc, #104]	@ (8006494 <TIM_OC6_SetConfig+0xc0>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d013      	beq.n	8006458 <TIM_OC6_SetConfig+0x84>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a19      	ldr	r2, [pc, #100]	@ (8006498 <TIM_OC6_SetConfig+0xc4>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d00f      	beq.n	8006458 <TIM_OC6_SetConfig+0x84>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a18      	ldr	r2, [pc, #96]	@ (800649c <TIM_OC6_SetConfig+0xc8>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d00b      	beq.n	8006458 <TIM_OC6_SetConfig+0x84>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a17      	ldr	r2, [pc, #92]	@ (80064a0 <TIM_OC6_SetConfig+0xcc>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d007      	beq.n	8006458 <TIM_OC6_SetConfig+0x84>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a16      	ldr	r2, [pc, #88]	@ (80064a4 <TIM_OC6_SetConfig+0xd0>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d003      	beq.n	8006458 <TIM_OC6_SetConfig+0x84>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a15      	ldr	r2, [pc, #84]	@ (80064a8 <TIM_OC6_SetConfig+0xd4>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d109      	bne.n	800646c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800645e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	029b      	lsls	r3, r3, #10
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	621a      	str	r2, [r3, #32]
}
 8006486:	bf00      	nop
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	40012c00 	.word	0x40012c00
 8006498:	40013400 	.word	0x40013400
 800649c:	40014000 	.word	0x40014000
 80064a0:	40014400 	.word	0x40014400
 80064a4:	40014800 	.word	0x40014800
 80064a8:	40015000 	.word	0x40015000

080064ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	f023 0201 	bic.w	r2, r3, #1
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	011b      	lsls	r3, r3, #4
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	4313      	orrs	r3, r2
 80064e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f023 030a 	bic.w	r3, r3, #10
 80064e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	621a      	str	r2, [r3, #32]
}
 80064fe:	bf00      	nop
 8006500:	371c      	adds	r7, #28
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800650a:	b480      	push	{r7}
 800650c:	b087      	sub	sp, #28
 800650e:	af00      	add	r7, sp, #0
 8006510:	60f8      	str	r0, [r7, #12]
 8006512:	60b9      	str	r1, [r7, #8]
 8006514:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	f023 0210 	bic.w	r2, r3, #16
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006534:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	031b      	lsls	r3, r3, #12
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	4313      	orrs	r3, r2
 800653e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006546:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	011b      	lsls	r3, r3, #4
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	4313      	orrs	r3, r2
 8006550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	621a      	str	r2, [r3, #32]
}
 800655e:	bf00      	nop
 8006560:	371c      	adds	r7, #28
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800656a:	b480      	push	{r7}
 800656c:	b085      	sub	sp, #20
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006580:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006584:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4313      	orrs	r3, r2
 800658c:	f043 0307 	orr.w	r3, r3, #7
 8006590:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	609a      	str	r2, [r3, #8]
}
 8006598:	bf00      	nop
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b087      	sub	sp, #28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
 80065b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	021a      	lsls	r2, r3, #8
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	431a      	orrs	r2, r3
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	609a      	str	r2, [r3, #8]
}
 80065d8:	bf00      	nop
 80065da:	371c      	adds	r7, #28
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	f003 031f 	and.w	r3, r3, #31
 80065f6:	2201      	movs	r2, #1
 80065f8:	fa02 f303 	lsl.w	r3, r2, r3
 80065fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6a1a      	ldr	r2, [r3, #32]
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	43db      	mvns	r3, r3
 8006606:	401a      	ands	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a1a      	ldr	r2, [r3, #32]
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	f003 031f 	and.w	r3, r3, #31
 8006616:	6879      	ldr	r1, [r7, #4]
 8006618:	fa01 f303 	lsl.w	r3, r1, r3
 800661c:	431a      	orrs	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	621a      	str	r2, [r3, #32]
}
 8006622:	bf00      	nop
 8006624:	371c      	adds	r7, #28
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
	...

08006630 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006640:	2b01      	cmp	r3, #1
 8006642:	d101      	bne.n	8006648 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006644:	2302      	movs	r3, #2
 8006646:	e074      	b.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2202      	movs	r2, #2
 8006654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a34      	ldr	r2, [pc, #208]	@ (8006740 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d009      	beq.n	8006686 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a33      	ldr	r2, [pc, #204]	@ (8006744 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d004      	beq.n	8006686 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a31      	ldr	r2, [pc, #196]	@ (8006748 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d108      	bne.n	8006698 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800668c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	4313      	orrs	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800669e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a21      	ldr	r2, [pc, #132]	@ (8006740 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d022      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066c8:	d01d      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a1f      	ldr	r2, [pc, #124]	@ (800674c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d018      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006750 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d013      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a1c      	ldr	r2, [pc, #112]	@ (8006754 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d00e      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a15      	ldr	r2, [pc, #84]	@ (8006744 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d009      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a18      	ldr	r2, [pc, #96]	@ (8006758 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d004      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a11      	ldr	r2, [pc, #68]	@ (8006748 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d10c      	bne.n	8006720 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800670c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	4313      	orrs	r3, r2
 8006716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	40012c00 	.word	0x40012c00
 8006744:	40013400 	.word	0x40013400
 8006748:	40015000 	.word	0x40015000
 800674c:	40000400 	.word	0x40000400
 8006750:	40000800 	.word	0x40000800
 8006754:	40000c00 	.word	0x40000c00
 8006758:	40014000 	.word	0x40014000

0800675c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006770:	2b01      	cmp	r3, #1
 8006772:	d101      	bne.n	8006778 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006774:	2302      	movs	r3, #2
 8006776:	e078      	b.n	800686a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	4313      	orrs	r3, r2
 800678c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	4313      	orrs	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	695b      	ldr	r3, [r3, #20]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067de:	4313      	orrs	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	041b      	lsls	r3, r3, #16
 80067ee:	4313      	orrs	r3, r2
 80067f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	69db      	ldr	r3, [r3, #28]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a1c      	ldr	r2, [pc, #112]	@ (8006878 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d009      	beq.n	800681e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a1b      	ldr	r2, [pc, #108]	@ (800687c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d004      	beq.n	800681e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a19      	ldr	r2, [pc, #100]	@ (8006880 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d11c      	bne.n	8006858 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006828:	051b      	lsls	r3, r3, #20
 800682a:	4313      	orrs	r3, r2
 800682c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	4313      	orrs	r3, r2
 800683a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006846:	4313      	orrs	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006854:	4313      	orrs	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	40012c00 	.word	0x40012c00
 800687c:	40013400 	.word	0x40013400
 8006880:	40015000 	.word	0x40015000

08006884 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e042      	b.n	80069a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006928:	2b00      	cmp	r3, #0
 800692a:	d106      	bne.n	800693a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7fa fc33 	bl	80011a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2224      	movs	r2, #36	@ 0x24
 800693e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f022 0201 	bic.w	r2, r2, #1
 8006950:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006956:	2b00      	cmp	r3, #0
 8006958:	d002      	beq.n	8006960 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fb24 	bl	8006fa8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 f825 	bl	80069b0 <UART_SetConfig>
 8006966:	4603      	mov	r3, r0
 8006968:	2b01      	cmp	r3, #1
 800696a:	d101      	bne.n	8006970 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e01b      	b.n	80069a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800697e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	689a      	ldr	r2, [r3, #8]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800698e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f042 0201 	orr.w	r2, r2, #1
 800699e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fba3 	bl	80070ec <UART_CheckIdleState>
 80069a6:	4603      	mov	r3, r0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069b4:	b08c      	sub	sp, #48	@ 0x30
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	689a      	ldr	r2, [r3, #8]
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	431a      	orrs	r2, r3
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	431a      	orrs	r2, r3
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	4baa      	ldr	r3, [pc, #680]	@ (8006c88 <UART_SetConfig+0x2d8>)
 80069e0:	4013      	ands	r3, r2
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	6812      	ldr	r2, [r2, #0]
 80069e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069e8:	430b      	orrs	r3, r1
 80069ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	68da      	ldr	r2, [r3, #12]
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a9f      	ldr	r2, [pc, #636]	@ (8006c8c <UART_SetConfig+0x2dc>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d004      	beq.n	8006a1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006a26:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	6812      	ldr	r2, [r2, #0]
 8006a2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a30:	430b      	orrs	r3, r1
 8006a32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a3a:	f023 010f 	bic.w	r1, r3, #15
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a90      	ldr	r2, [pc, #576]	@ (8006c90 <UART_SetConfig+0x2e0>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d125      	bne.n	8006aa0 <UART_SetConfig+0xf0>
 8006a54:	4b8f      	ldr	r3, [pc, #572]	@ (8006c94 <UART_SetConfig+0x2e4>)
 8006a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a5a:	f003 0303 	and.w	r3, r3, #3
 8006a5e:	2b03      	cmp	r3, #3
 8006a60:	d81a      	bhi.n	8006a98 <UART_SetConfig+0xe8>
 8006a62:	a201      	add	r2, pc, #4	@ (adr r2, 8006a68 <UART_SetConfig+0xb8>)
 8006a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a68:	08006a79 	.word	0x08006a79
 8006a6c:	08006a89 	.word	0x08006a89
 8006a70:	08006a81 	.word	0x08006a81
 8006a74:	08006a91 	.word	0x08006a91
 8006a78:	2301      	movs	r3, #1
 8006a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a7e:	e116      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006a80:	2302      	movs	r3, #2
 8006a82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a86:	e112      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006a88:	2304      	movs	r3, #4
 8006a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a8e:	e10e      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006a90:	2308      	movs	r3, #8
 8006a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a96:	e10a      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006a98:	2310      	movs	r3, #16
 8006a9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a9e:	e106      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a7c      	ldr	r2, [pc, #496]	@ (8006c98 <UART_SetConfig+0x2e8>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d138      	bne.n	8006b1c <UART_SetConfig+0x16c>
 8006aaa:	4b7a      	ldr	r3, [pc, #488]	@ (8006c94 <UART_SetConfig+0x2e4>)
 8006aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ab0:	f003 030c 	and.w	r3, r3, #12
 8006ab4:	2b0c      	cmp	r3, #12
 8006ab6:	d82d      	bhi.n	8006b14 <UART_SetConfig+0x164>
 8006ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ac0 <UART_SetConfig+0x110>)
 8006aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abe:	bf00      	nop
 8006ac0:	08006af5 	.word	0x08006af5
 8006ac4:	08006b15 	.word	0x08006b15
 8006ac8:	08006b15 	.word	0x08006b15
 8006acc:	08006b15 	.word	0x08006b15
 8006ad0:	08006b05 	.word	0x08006b05
 8006ad4:	08006b15 	.word	0x08006b15
 8006ad8:	08006b15 	.word	0x08006b15
 8006adc:	08006b15 	.word	0x08006b15
 8006ae0:	08006afd 	.word	0x08006afd
 8006ae4:	08006b15 	.word	0x08006b15
 8006ae8:	08006b15 	.word	0x08006b15
 8006aec:	08006b15 	.word	0x08006b15
 8006af0:	08006b0d 	.word	0x08006b0d
 8006af4:	2300      	movs	r3, #0
 8006af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006afa:	e0d8      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006afc:	2302      	movs	r3, #2
 8006afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b02:	e0d4      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006b04:	2304      	movs	r3, #4
 8006b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b0a:	e0d0      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006b0c:	2308      	movs	r3, #8
 8006b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b12:	e0cc      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006b14:	2310      	movs	r3, #16
 8006b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b1a:	e0c8      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a5e      	ldr	r2, [pc, #376]	@ (8006c9c <UART_SetConfig+0x2ec>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d125      	bne.n	8006b72 <UART_SetConfig+0x1c2>
 8006b26:	4b5b      	ldr	r3, [pc, #364]	@ (8006c94 <UART_SetConfig+0x2e4>)
 8006b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b2c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006b30:	2b30      	cmp	r3, #48	@ 0x30
 8006b32:	d016      	beq.n	8006b62 <UART_SetConfig+0x1b2>
 8006b34:	2b30      	cmp	r3, #48	@ 0x30
 8006b36:	d818      	bhi.n	8006b6a <UART_SetConfig+0x1ba>
 8006b38:	2b20      	cmp	r3, #32
 8006b3a:	d00a      	beq.n	8006b52 <UART_SetConfig+0x1a2>
 8006b3c:	2b20      	cmp	r3, #32
 8006b3e:	d814      	bhi.n	8006b6a <UART_SetConfig+0x1ba>
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d002      	beq.n	8006b4a <UART_SetConfig+0x19a>
 8006b44:	2b10      	cmp	r3, #16
 8006b46:	d008      	beq.n	8006b5a <UART_SetConfig+0x1aa>
 8006b48:	e00f      	b.n	8006b6a <UART_SetConfig+0x1ba>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b50:	e0ad      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006b52:	2302      	movs	r3, #2
 8006b54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b58:	e0a9      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006b5a:	2304      	movs	r3, #4
 8006b5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b60:	e0a5      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006b62:	2308      	movs	r3, #8
 8006b64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b68:	e0a1      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006b6a:	2310      	movs	r3, #16
 8006b6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b70:	e09d      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a4a      	ldr	r2, [pc, #296]	@ (8006ca0 <UART_SetConfig+0x2f0>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d125      	bne.n	8006bc8 <UART_SetConfig+0x218>
 8006b7c:	4b45      	ldr	r3, [pc, #276]	@ (8006c94 <UART_SetConfig+0x2e4>)
 8006b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b82:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b86:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b88:	d016      	beq.n	8006bb8 <UART_SetConfig+0x208>
 8006b8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b8c:	d818      	bhi.n	8006bc0 <UART_SetConfig+0x210>
 8006b8e:	2b80      	cmp	r3, #128	@ 0x80
 8006b90:	d00a      	beq.n	8006ba8 <UART_SetConfig+0x1f8>
 8006b92:	2b80      	cmp	r3, #128	@ 0x80
 8006b94:	d814      	bhi.n	8006bc0 <UART_SetConfig+0x210>
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d002      	beq.n	8006ba0 <UART_SetConfig+0x1f0>
 8006b9a:	2b40      	cmp	r3, #64	@ 0x40
 8006b9c:	d008      	beq.n	8006bb0 <UART_SetConfig+0x200>
 8006b9e:	e00f      	b.n	8006bc0 <UART_SetConfig+0x210>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ba6:	e082      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006ba8:	2302      	movs	r3, #2
 8006baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bae:	e07e      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006bb0:	2304      	movs	r3, #4
 8006bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bb6:	e07a      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006bb8:	2308      	movs	r3, #8
 8006bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bbe:	e076      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006bc0:	2310      	movs	r3, #16
 8006bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bc6:	e072      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a35      	ldr	r2, [pc, #212]	@ (8006ca4 <UART_SetConfig+0x2f4>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d12a      	bne.n	8006c28 <UART_SetConfig+0x278>
 8006bd2:	4b30      	ldr	r3, [pc, #192]	@ (8006c94 <UART_SetConfig+0x2e4>)
 8006bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006be0:	d01a      	beq.n	8006c18 <UART_SetConfig+0x268>
 8006be2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006be6:	d81b      	bhi.n	8006c20 <UART_SetConfig+0x270>
 8006be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bec:	d00c      	beq.n	8006c08 <UART_SetConfig+0x258>
 8006bee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bf2:	d815      	bhi.n	8006c20 <UART_SetConfig+0x270>
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d003      	beq.n	8006c00 <UART_SetConfig+0x250>
 8006bf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bfc:	d008      	beq.n	8006c10 <UART_SetConfig+0x260>
 8006bfe:	e00f      	b.n	8006c20 <UART_SetConfig+0x270>
 8006c00:	2300      	movs	r3, #0
 8006c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c06:	e052      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006c08:	2302      	movs	r3, #2
 8006c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c0e:	e04e      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006c10:	2304      	movs	r3, #4
 8006c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c16:	e04a      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006c18:	2308      	movs	r3, #8
 8006c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c1e:	e046      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006c20:	2310      	movs	r3, #16
 8006c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c26:	e042      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a17      	ldr	r2, [pc, #92]	@ (8006c8c <UART_SetConfig+0x2dc>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d13a      	bne.n	8006ca8 <UART_SetConfig+0x2f8>
 8006c32:	4b18      	ldr	r3, [pc, #96]	@ (8006c94 <UART_SetConfig+0x2e4>)
 8006c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c38:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006c3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c40:	d01a      	beq.n	8006c78 <UART_SetConfig+0x2c8>
 8006c42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c46:	d81b      	bhi.n	8006c80 <UART_SetConfig+0x2d0>
 8006c48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c4c:	d00c      	beq.n	8006c68 <UART_SetConfig+0x2b8>
 8006c4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c52:	d815      	bhi.n	8006c80 <UART_SetConfig+0x2d0>
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <UART_SetConfig+0x2b0>
 8006c58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c5c:	d008      	beq.n	8006c70 <UART_SetConfig+0x2c0>
 8006c5e:	e00f      	b.n	8006c80 <UART_SetConfig+0x2d0>
 8006c60:	2300      	movs	r3, #0
 8006c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c66:	e022      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006c68:	2302      	movs	r3, #2
 8006c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c6e:	e01e      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006c70:	2304      	movs	r3, #4
 8006c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c76:	e01a      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006c78:	2308      	movs	r3, #8
 8006c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c7e:	e016      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006c80:	2310      	movs	r3, #16
 8006c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c86:	e012      	b.n	8006cae <UART_SetConfig+0x2fe>
 8006c88:	cfff69f3 	.word	0xcfff69f3
 8006c8c:	40008000 	.word	0x40008000
 8006c90:	40013800 	.word	0x40013800
 8006c94:	40021000 	.word	0x40021000
 8006c98:	40004400 	.word	0x40004400
 8006c9c:	40004800 	.word	0x40004800
 8006ca0:	40004c00 	.word	0x40004c00
 8006ca4:	40005000 	.word	0x40005000
 8006ca8:	2310      	movs	r3, #16
 8006caa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4aae      	ldr	r2, [pc, #696]	@ (8006f6c <UART_SetConfig+0x5bc>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	f040 8097 	bne.w	8006de8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006cbe:	2b08      	cmp	r3, #8
 8006cc0:	d823      	bhi.n	8006d0a <UART_SetConfig+0x35a>
 8006cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc8 <UART_SetConfig+0x318>)
 8006cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc8:	08006ced 	.word	0x08006ced
 8006ccc:	08006d0b 	.word	0x08006d0b
 8006cd0:	08006cf5 	.word	0x08006cf5
 8006cd4:	08006d0b 	.word	0x08006d0b
 8006cd8:	08006cfb 	.word	0x08006cfb
 8006cdc:	08006d0b 	.word	0x08006d0b
 8006ce0:	08006d0b 	.word	0x08006d0b
 8006ce4:	08006d0b 	.word	0x08006d0b
 8006ce8:	08006d03 	.word	0x08006d03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cec:	f7fd fdb6 	bl	800485c <HAL_RCC_GetPCLK1Freq>
 8006cf0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cf2:	e010      	b.n	8006d16 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cf4:	4b9e      	ldr	r3, [pc, #632]	@ (8006f70 <UART_SetConfig+0x5c0>)
 8006cf6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cf8:	e00d      	b.n	8006d16 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cfa:	f7fd fd41 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 8006cfe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d00:	e009      	b.n	8006d16 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d08:	e005      	b.n	8006d16 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 8130 	beq.w	8006f7e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d22:	4a94      	ldr	r2, [pc, #592]	@ (8006f74 <UART_SetConfig+0x5c4>)
 8006d24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d28:	461a      	mov	r2, r3
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d30:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	685a      	ldr	r2, [r3, #4]
 8006d36:	4613      	mov	r3, r2
 8006d38:	005b      	lsls	r3, r3, #1
 8006d3a:	4413      	add	r3, r2
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d305      	bcc.n	8006d4e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d903      	bls.n	8006d56 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d54:	e113      	b.n	8006f7e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d58:	2200      	movs	r2, #0
 8006d5a:	60bb      	str	r3, [r7, #8]
 8006d5c:	60fa      	str	r2, [r7, #12]
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d62:	4a84      	ldr	r2, [pc, #528]	@ (8006f74 <UART_SetConfig+0x5c4>)
 8006d64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	603b      	str	r3, [r7, #0]
 8006d6e:	607a      	str	r2, [r7, #4]
 8006d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d78:	f7f9 fa4e 	bl	8000218 <__aeabi_uldivmod>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4610      	mov	r0, r2
 8006d82:	4619      	mov	r1, r3
 8006d84:	f04f 0200 	mov.w	r2, #0
 8006d88:	f04f 0300 	mov.w	r3, #0
 8006d8c:	020b      	lsls	r3, r1, #8
 8006d8e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d92:	0202      	lsls	r2, r0, #8
 8006d94:	6979      	ldr	r1, [r7, #20]
 8006d96:	6849      	ldr	r1, [r1, #4]
 8006d98:	0849      	lsrs	r1, r1, #1
 8006d9a:	2000      	movs	r0, #0
 8006d9c:	460c      	mov	r4, r1
 8006d9e:	4605      	mov	r5, r0
 8006da0:	eb12 0804 	adds.w	r8, r2, r4
 8006da4:	eb43 0905 	adc.w	r9, r3, r5
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	469a      	mov	sl, r3
 8006db0:	4693      	mov	fp, r2
 8006db2:	4652      	mov	r2, sl
 8006db4:	465b      	mov	r3, fp
 8006db6:	4640      	mov	r0, r8
 8006db8:	4649      	mov	r1, r9
 8006dba:	f7f9 fa2d 	bl	8000218 <__aeabi_uldivmod>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dcc:	d308      	bcc.n	8006de0 <UART_SetConfig+0x430>
 8006dce:	6a3b      	ldr	r3, [r7, #32]
 8006dd0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dd4:	d204      	bcs.n	8006de0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6a3a      	ldr	r2, [r7, #32]
 8006ddc:	60da      	str	r2, [r3, #12]
 8006dde:	e0ce      	b.n	8006f7e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006de6:	e0ca      	b.n	8006f7e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	69db      	ldr	r3, [r3, #28]
 8006dec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006df0:	d166      	bne.n	8006ec0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006df2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006df6:	2b08      	cmp	r3, #8
 8006df8:	d827      	bhi.n	8006e4a <UART_SetConfig+0x49a>
 8006dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8006e00 <UART_SetConfig+0x450>)
 8006dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e00:	08006e25 	.word	0x08006e25
 8006e04:	08006e2d 	.word	0x08006e2d
 8006e08:	08006e35 	.word	0x08006e35
 8006e0c:	08006e4b 	.word	0x08006e4b
 8006e10:	08006e3b 	.word	0x08006e3b
 8006e14:	08006e4b 	.word	0x08006e4b
 8006e18:	08006e4b 	.word	0x08006e4b
 8006e1c:	08006e4b 	.word	0x08006e4b
 8006e20:	08006e43 	.word	0x08006e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e24:	f7fd fd1a 	bl	800485c <HAL_RCC_GetPCLK1Freq>
 8006e28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e2a:	e014      	b.n	8006e56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e2c:	f7fd fd2c 	bl	8004888 <HAL_RCC_GetPCLK2Freq>
 8006e30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e32:	e010      	b.n	8006e56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e34:	4b4e      	ldr	r3, [pc, #312]	@ (8006f70 <UART_SetConfig+0x5c0>)
 8006e36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e38:	e00d      	b.n	8006e56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e3a:	f7fd fca1 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 8006e3e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e40:	e009      	b.n	8006e56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e48:	e005      	b.n	8006e56 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006e54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 8090 	beq.w	8006f7e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e62:	4a44      	ldr	r2, [pc, #272]	@ (8006f74 <UART_SetConfig+0x5c4>)
 8006e64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e68:	461a      	mov	r2, r3
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e70:	005a      	lsls	r2, r3, #1
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	085b      	lsrs	r3, r3, #1
 8006e78:	441a      	add	r2, r3
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e82:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e84:	6a3b      	ldr	r3, [r7, #32]
 8006e86:	2b0f      	cmp	r3, #15
 8006e88:	d916      	bls.n	8006eb8 <UART_SetConfig+0x508>
 8006e8a:	6a3b      	ldr	r3, [r7, #32]
 8006e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e90:	d212      	bcs.n	8006eb8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e92:	6a3b      	ldr	r3, [r7, #32]
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	f023 030f 	bic.w	r3, r3, #15
 8006e9a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	085b      	lsrs	r3, r3, #1
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	f003 0307 	and.w	r3, r3, #7
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	8bfb      	ldrh	r3, [r7, #30]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	8bfa      	ldrh	r2, [r7, #30]
 8006eb4:	60da      	str	r2, [r3, #12]
 8006eb6:	e062      	b.n	8006f7e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006ebe:	e05e      	b.n	8006f7e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ec0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ec4:	2b08      	cmp	r3, #8
 8006ec6:	d828      	bhi.n	8006f1a <UART_SetConfig+0x56a>
 8006ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ed0 <UART_SetConfig+0x520>)
 8006eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ece:	bf00      	nop
 8006ed0:	08006ef5 	.word	0x08006ef5
 8006ed4:	08006efd 	.word	0x08006efd
 8006ed8:	08006f05 	.word	0x08006f05
 8006edc:	08006f1b 	.word	0x08006f1b
 8006ee0:	08006f0b 	.word	0x08006f0b
 8006ee4:	08006f1b 	.word	0x08006f1b
 8006ee8:	08006f1b 	.word	0x08006f1b
 8006eec:	08006f1b 	.word	0x08006f1b
 8006ef0:	08006f13 	.word	0x08006f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ef4:	f7fd fcb2 	bl	800485c <HAL_RCC_GetPCLK1Freq>
 8006ef8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006efa:	e014      	b.n	8006f26 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006efc:	f7fd fcc4 	bl	8004888 <HAL_RCC_GetPCLK2Freq>
 8006f00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f02:	e010      	b.n	8006f26 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f04:	4b1a      	ldr	r3, [pc, #104]	@ (8006f70 <UART_SetConfig+0x5c0>)
 8006f06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f08:	e00d      	b.n	8006f26 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f0a:	f7fd fc39 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 8006f0e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f10:	e009      	b.n	8006f26 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f18:	e005      	b.n	8006f26 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f24:	bf00      	nop
    }

    if (pclk != 0U)
 8006f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d028      	beq.n	8006f7e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f30:	4a10      	ldr	r2, [pc, #64]	@ (8006f74 <UART_SetConfig+0x5c4>)
 8006f32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f36:	461a      	mov	r2, r3
 8006f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	085b      	lsrs	r3, r3, #1
 8006f44:	441a      	add	r2, r3
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f50:	6a3b      	ldr	r3, [r7, #32]
 8006f52:	2b0f      	cmp	r3, #15
 8006f54:	d910      	bls.n	8006f78 <UART_SetConfig+0x5c8>
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f5c:	d20c      	bcs.n	8006f78 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	60da      	str	r2, [r3, #12]
 8006f68:	e009      	b.n	8006f7e <UART_SetConfig+0x5ce>
 8006f6a:	bf00      	nop
 8006f6c:	40008000 	.word	0x40008000
 8006f70:	00f42400 	.word	0x00f42400
 8006f74:	080076e0 	.word	0x080076e0
      }
      else
      {
        ret = HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	2200      	movs	r2, #0
 8006f92:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	2200      	movs	r2, #0
 8006f98:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006f9a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3730      	adds	r7, #48	@ 0x30
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb4:	f003 0308 	and.w	r3, r3, #8
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00a      	beq.n	8006fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00a      	beq.n	8006ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff8:	f003 0302 	and.w	r3, r3, #2
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00a      	beq.n	8007016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701a:	f003 0304 	and.w	r3, r3, #4
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00a      	beq.n	8007038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	430a      	orrs	r2, r1
 8007036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703c:	f003 0310 	and.w	r3, r3, #16
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00a      	beq.n	800705a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705e:	f003 0320 	and.w	r3, r3, #32
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00a      	beq.n	800707c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	430a      	orrs	r2, r1
 800707a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007084:	2b00      	cmp	r3, #0
 8007086:	d01a      	beq.n	80070be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	430a      	orrs	r2, r1
 800709c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070a6:	d10a      	bne.n	80070be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00a      	beq.n	80070e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	430a      	orrs	r2, r1
 80070de:	605a      	str	r2, [r3, #4]
  }
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b098      	sub	sp, #96	@ 0x60
 80070f0:	af02      	add	r7, sp, #8
 80070f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070fc:	f7fa fad0 	bl	80016a0 <HAL_GetTick>
 8007100:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0308 	and.w	r3, r3, #8
 800710c:	2b08      	cmp	r3, #8
 800710e:	d12f      	bne.n	8007170 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007110:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007118:	2200      	movs	r2, #0
 800711a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f88e 	bl	8007240 <UART_WaitOnFlagUntilTimeout>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d022      	beq.n	8007170 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007132:	e853 3f00 	ldrex	r3, [r3]
 8007136:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800713a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800713e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	461a      	mov	r2, r3
 8007146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007148:	647b      	str	r3, [r7, #68]	@ 0x44
 800714a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800714e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007150:	e841 2300 	strex	r3, r2, [r1]
 8007154:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1e6      	bne.n	800712a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2220      	movs	r2, #32
 8007160:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e063      	b.n	8007238 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0304 	and.w	r3, r3, #4
 800717a:	2b04      	cmp	r3, #4
 800717c:	d149      	bne.n	8007212 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800717e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007186:	2200      	movs	r2, #0
 8007188:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f857 	bl	8007240 <UART_WaitOnFlagUntilTimeout>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d03c      	beq.n	8007212 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a0:	e853 3f00 	ldrex	r3, [r3]
 80071a4:	623b      	str	r3, [r7, #32]
   return(result);
 80071a6:	6a3b      	ldr	r3, [r7, #32]
 80071a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80071b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071be:	e841 2300 	strex	r3, r2, [r1]
 80071c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1e6      	bne.n	8007198 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3308      	adds	r3, #8
 80071d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	e853 3f00 	ldrex	r3, [r3]
 80071d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f023 0301 	bic.w	r3, r3, #1
 80071e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3308      	adds	r3, #8
 80071e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071ea:	61fa      	str	r2, [r7, #28]
 80071ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ee:	69b9      	ldr	r1, [r7, #24]
 80071f0:	69fa      	ldr	r2, [r7, #28]
 80071f2:	e841 2300 	strex	r3, r2, [r1]
 80071f6:	617b      	str	r3, [r7, #20]
   return(result);
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1e5      	bne.n	80071ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2220      	movs	r2, #32
 8007202:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e012      	b.n	8007238 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2220      	movs	r2, #32
 8007216:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2220      	movs	r2, #32
 800721e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3758      	adds	r7, #88	@ 0x58
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	603b      	str	r3, [r7, #0]
 800724c:	4613      	mov	r3, r2
 800724e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007250:	e04f      	b.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007258:	d04b      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800725a:	f7fa fa21 	bl	80016a0 <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	69ba      	ldr	r2, [r7, #24]
 8007266:	429a      	cmp	r2, r3
 8007268:	d302      	bcc.n	8007270 <UART_WaitOnFlagUntilTimeout+0x30>
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d101      	bne.n	8007274 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e04e      	b.n	8007312 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0304 	and.w	r3, r3, #4
 800727e:	2b00      	cmp	r3, #0
 8007280:	d037      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2b80      	cmp	r3, #128	@ 0x80
 8007286:	d034      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2b40      	cmp	r3, #64	@ 0x40
 800728c:	d031      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	69db      	ldr	r3, [r3, #28]
 8007294:	f003 0308 	and.w	r3, r3, #8
 8007298:	2b08      	cmp	r3, #8
 800729a:	d110      	bne.n	80072be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2208      	movs	r2, #8
 80072a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 f838 	bl	800731a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2208      	movs	r2, #8
 80072ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e029      	b.n	8007312 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	69db      	ldr	r3, [r3, #28]
 80072c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072cc:	d111      	bne.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80072d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 f81e 	bl	800731a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2220      	movs	r2, #32
 80072e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e00f      	b.n	8007312 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	69da      	ldr	r2, [r3, #28]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	4013      	ands	r3, r2
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	429a      	cmp	r2, r3
 8007300:	bf0c      	ite	eq
 8007302:	2301      	moveq	r3, #1
 8007304:	2300      	movne	r3, #0
 8007306:	b2db      	uxtb	r3, r3
 8007308:	461a      	mov	r2, r3
 800730a:	79fb      	ldrb	r3, [r7, #7]
 800730c:	429a      	cmp	r2, r3
 800730e:	d0a0      	beq.n	8007252 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800731a:	b480      	push	{r7}
 800731c:	b095      	sub	sp, #84	@ 0x54
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800732a:	e853 3f00 	ldrex	r3, [r3]
 800732e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007332:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007336:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	461a      	mov	r2, r3
 800733e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007340:	643b      	str	r3, [r7, #64]	@ 0x40
 8007342:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007344:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007346:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007348:	e841 2300 	strex	r3, r2, [r1]
 800734c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800734e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1e6      	bne.n	8007322 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	3308      	adds	r3, #8
 800735a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	e853 3f00 	ldrex	r3, [r3]
 8007362:	61fb      	str	r3, [r7, #28]
   return(result);
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800736a:	f023 0301 	bic.w	r3, r3, #1
 800736e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	3308      	adds	r3, #8
 8007376:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007378:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800737a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800737e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007380:	e841 2300 	strex	r3, r2, [r1]
 8007384:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1e3      	bne.n	8007354 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007390:	2b01      	cmp	r3, #1
 8007392:	d118      	bne.n	80073c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	e853 3f00 	ldrex	r3, [r3]
 80073a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	f023 0310 	bic.w	r3, r3, #16
 80073a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	461a      	mov	r2, r3
 80073b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073b2:	61bb      	str	r3, [r7, #24]
 80073b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b6:	6979      	ldr	r1, [r7, #20]
 80073b8:	69ba      	ldr	r2, [r7, #24]
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	613b      	str	r3, [r7, #16]
   return(result);
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1e6      	bne.n	8007394 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2220      	movs	r2, #32
 80073ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80073da:	bf00      	nop
 80073dc:	3754      	adds	r7, #84	@ 0x54
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b085      	sub	sp, #20
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d101      	bne.n	80073fc <HAL_UARTEx_DisableFifoMode+0x16>
 80073f8:	2302      	movs	r3, #2
 80073fa:	e027      	b.n	800744c <HAL_UARTEx_DisableFifoMode+0x66>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2224      	movs	r2, #36	@ 0x24
 8007408:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f022 0201 	bic.w	r2, r2, #1
 8007422:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800742a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2220      	movs	r2, #32
 800743e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007468:	2b01      	cmp	r3, #1
 800746a:	d101      	bne.n	8007470 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800746c:	2302      	movs	r3, #2
 800746e:	e02d      	b.n	80074cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2224      	movs	r2, #36	@ 0x24
 800747c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f022 0201 	bic.w	r2, r2, #1
 8007496:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	430a      	orrs	r2, r1
 80074aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f84f 	bl	8007550 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2220      	movs	r2, #32
 80074be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d101      	bne.n	80074ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80074e8:	2302      	movs	r3, #2
 80074ea:	e02d      	b.n	8007548 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2224      	movs	r2, #36	@ 0x24
 80074f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f022 0201 	bic.w	r2, r2, #1
 8007512:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f811 	bl	8007550 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2220      	movs	r2, #32
 800753a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800755c:	2b00      	cmp	r3, #0
 800755e:	d108      	bne.n	8007572 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007570:	e031      	b.n	80075d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007572:	2308      	movs	r3, #8
 8007574:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007576:	2308      	movs	r3, #8
 8007578:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	0e5b      	lsrs	r3, r3, #25
 8007582:	b2db      	uxtb	r3, r3
 8007584:	f003 0307 	and.w	r3, r3, #7
 8007588:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	0f5b      	lsrs	r3, r3, #29
 8007592:	b2db      	uxtb	r3, r3
 8007594:	f003 0307 	and.w	r3, r3, #7
 8007598:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800759a:	7bbb      	ldrb	r3, [r7, #14]
 800759c:	7b3a      	ldrb	r2, [r7, #12]
 800759e:	4911      	ldr	r1, [pc, #68]	@ (80075e4 <UARTEx_SetNbDataToProcess+0x94>)
 80075a0:	5c8a      	ldrb	r2, [r1, r2]
 80075a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80075a6:	7b3a      	ldrb	r2, [r7, #12]
 80075a8:	490f      	ldr	r1, [pc, #60]	@ (80075e8 <UARTEx_SetNbDataToProcess+0x98>)
 80075aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
 80075ba:	7b7a      	ldrb	r2, [r7, #13]
 80075bc:	4909      	ldr	r1, [pc, #36]	@ (80075e4 <UARTEx_SetNbDataToProcess+0x94>)
 80075be:	5c8a      	ldrb	r2, [r1, r2]
 80075c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80075c4:	7b7a      	ldrb	r2, [r7, #13]
 80075c6:	4908      	ldr	r1, [pc, #32]	@ (80075e8 <UARTEx_SetNbDataToProcess+0x98>)
 80075c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80075d6:	bf00      	nop
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	080076f8 	.word	0x080076f8
 80075e8:	08007700 	.word	0x08007700

080075ec <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	ed93 7a06 	vldr	s14, [r3, #24]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	edd3 7a07 	vldr	s15, [r3, #28]
 8007602:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	edd3 7a08 	vldr	s15, [r3, #32]
 800760c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	edd3 7a06 	vldr	s15, [r3, #24]
 800761c:	eeb1 7a67 	vneg.f32	s14, s15
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	edd3 7a08 	vldr	s15, [r3, #32]
 8007626:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800762a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a1a      	ldr	r2, [r3, #32]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d006      	beq.n	8007650 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	330c      	adds	r3, #12
 8007646:	220c      	movs	r2, #12
 8007648:	2100      	movs	r1, #0
 800764a:	4618      	mov	r0, r3
 800764c:	f000 f804 	bl	8007658 <memset>
  }

}
 8007650:	bf00      	nop
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <memset>:
 8007658:	4402      	add	r2, r0
 800765a:	4603      	mov	r3, r0
 800765c:	4293      	cmp	r3, r2
 800765e:	d100      	bne.n	8007662 <memset+0xa>
 8007660:	4770      	bx	lr
 8007662:	f803 1b01 	strb.w	r1, [r3], #1
 8007666:	e7f9      	b.n	800765c <memset+0x4>

08007668 <__libc_init_array>:
 8007668:	b570      	push	{r4, r5, r6, lr}
 800766a:	4d0d      	ldr	r5, [pc, #52]	@ (80076a0 <__libc_init_array+0x38>)
 800766c:	4c0d      	ldr	r4, [pc, #52]	@ (80076a4 <__libc_init_array+0x3c>)
 800766e:	1b64      	subs	r4, r4, r5
 8007670:	10a4      	asrs	r4, r4, #2
 8007672:	2600      	movs	r6, #0
 8007674:	42a6      	cmp	r6, r4
 8007676:	d109      	bne.n	800768c <__libc_init_array+0x24>
 8007678:	4d0b      	ldr	r5, [pc, #44]	@ (80076a8 <__libc_init_array+0x40>)
 800767a:	4c0c      	ldr	r4, [pc, #48]	@ (80076ac <__libc_init_array+0x44>)
 800767c:	f000 f818 	bl	80076b0 <_init>
 8007680:	1b64      	subs	r4, r4, r5
 8007682:	10a4      	asrs	r4, r4, #2
 8007684:	2600      	movs	r6, #0
 8007686:	42a6      	cmp	r6, r4
 8007688:	d105      	bne.n	8007696 <__libc_init_array+0x2e>
 800768a:	bd70      	pop	{r4, r5, r6, pc}
 800768c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007690:	4798      	blx	r3
 8007692:	3601      	adds	r6, #1
 8007694:	e7ee      	b.n	8007674 <__libc_init_array+0xc>
 8007696:	f855 3b04 	ldr.w	r3, [r5], #4
 800769a:	4798      	blx	r3
 800769c:	3601      	adds	r6, #1
 800769e:	e7f2      	b.n	8007686 <__libc_init_array+0x1e>
 80076a0:	08007710 	.word	0x08007710
 80076a4:	08007710 	.word	0x08007710
 80076a8:	08007710 	.word	0x08007710
 80076ac:	08007714 	.word	0x08007714

080076b0 <_init>:
 80076b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b2:	bf00      	nop
 80076b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076b6:	bc08      	pop	{r3}
 80076b8:	469e      	mov	lr, r3
 80076ba:	4770      	bx	lr

080076bc <_fini>:
 80076bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076be:	bf00      	nop
 80076c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076c2:	bc08      	pop	{r3}
 80076c4:	469e      	mov	lr, r3
 80076c6:	4770      	bx	lr
