
Elec Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e9c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007074  08007074  00008074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070b4  080070b4  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  080070b4  080070b4  000080b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070bc  080070bc  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070bc  080070bc  000080bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070c0  080070c0  000080c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080070c4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  2000000c  080070d0  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  080070d0  00009444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000181df  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cd2  00000000  00000000  0002121b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  00023ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001055  00000000  00000000  000253d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dd6  00000000  00000000  0002642d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000187f7  00000000  00000000  0004f203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001140e2  00000000  00000000  000679fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017badc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aac  00000000  00000000  0017bb20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001815cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800705c 	.word	0x0800705c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800705c 	.word	0x0800705c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fe3a 	bl	8001186 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f8f5 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 fb57 	bl	8000bc8 <MX_GPIO_Init>
  MX_DMA_Init();
 800051a:	f000 fb2b 	bl	8000b74 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800051e:	f000 f9c5 	bl	80008ac <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000522:	f000 f939 	bl	8000798 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000526:	f000 fa0b 	bl	8000940 <MX_TIM3_Init>
  MX_TIM4_Init();
 800052a:	f000 fa57 	bl	80009dc <MX_TIM4_Init>
  MX_TIM5_Init();
 800052e:	f000 facd 	bl	8000acc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 200);
 8000532:	22c8      	movs	r2, #200	@ 0xc8
 8000534:	495f      	ldr	r1, [pc, #380]	@ (80006b4 <main+0x1ac>)
 8000536:	4860      	ldr	r0, [pc, #384]	@ (80006b8 <main+0x1b0>)
 8000538:	f001 fa92 	bl	8001a60 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 800053c:	485f      	ldr	r0, [pc, #380]	@ (80006bc <main+0x1b4>)
 800053e:	f004 fa7d 	bl	8004a3c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 8000542:	485f      	ldr	r0, [pc, #380]	@ (80006c0 <main+0x1b8>)
 8000544:	f004 fa7a 	bl	8004a3c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000548:	2100      	movs	r1, #0
 800054a:	485d      	ldr	r0, [pc, #372]	@ (80006c0 <main+0x1b8>)
 800054c:	f004 fb48 	bl	8004be0 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 8000550:	213c      	movs	r1, #60	@ 0x3c
 8000552:	485c      	ldr	r0, [pc, #368]	@ (80006c4 <main+0x1bc>)
 8000554:	f004 fcfc 	bl	8004f50 <HAL_TIM_Encoder_Start>

  PID.Kp =0.1;
 8000558:	4b5b      	ldr	r3, [pc, #364]	@ (80006c8 <main+0x1c0>)
 800055a:	4a5c      	ldr	r2, [pc, #368]	@ (80006cc <main+0x1c4>)
 800055c:	619a      	str	r2, [r3, #24]
  PID.Ki =0.00001;
 800055e:	4b5a      	ldr	r3, [pc, #360]	@ (80006c8 <main+0x1c0>)
 8000560:	4a5b      	ldr	r2, [pc, #364]	@ (80006d0 <main+0x1c8>)
 8000562:	61da      	str	r2, [r3, #28]
  PID.Kd = 0.1;
 8000564:	4b58      	ldr	r3, [pc, #352]	@ (80006c8 <main+0x1c0>)
 8000566:	4a59      	ldr	r2, [pc, #356]	@ (80006cc <main+0x1c4>)
 8000568:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID, 0);
 800056a:	2100      	movs	r1, #0
 800056c:	4856      	ldr	r0, [pc, #344]	@ (80006c8 <main+0x1c0>)
 800056e:	f006 fd13 	bl	8006f98 <arm_pid_init_f32>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim5);
 8000572:	4b54      	ldr	r3, [pc, #336]	@ (80006c4 <main+0x1bc>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000578:	ee07 3a90 	vmov	s15, r3
 800057c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000580:	4b54      	ldr	r3, [pc, #336]	@ (80006d4 <main+0x1cc>)
 8000582:	edc3 7a00 	vstr	s15, [r3]
	  Degree = (QEIReadRaw/48)*360;
 8000586:	4b53      	ldr	r3, [pc, #332]	@ (80006d4 <main+0x1cc>)
 8000588:	ed93 7a00 	vldr	s14, [r3]
 800058c:	eddf 6a52 	vldr	s13, [pc, #328]	@ 80006d8 <main+0x1d0>
 8000590:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000594:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80006dc <main+0x1d4>
 8000598:	ee67 7a87 	vmul.f32	s15, s15, s14
 800059c:	4b50      	ldr	r3, [pc, #320]	@ (80006e0 <main+0x1d8>)
 800059e:	edc3 7a00 	vstr	s15, [r3]
	  for (uint16_t i =0; i < 100;i++)
 80005a2:	2300      	movs	r3, #0
 80005a4:	81fb      	strh	r3, [r7, #14]
 80005a6:	e019      	b.n	80005dc <main+0xd4>
	  {
		  x += ADC_RawRead[(i*2)];
 80005a8:	89fb      	ldrh	r3, [r7, #14]
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	4a41      	ldr	r2, [pc, #260]	@ (80006b4 <main+0x1ac>)
 80005ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005b2:	461a      	mov	r2, r3
 80005b4:	4b4b      	ldr	r3, [pc, #300]	@ (80006e4 <main+0x1dc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4413      	add	r3, r2
 80005ba:	4a4a      	ldr	r2, [pc, #296]	@ (80006e4 <main+0x1dc>)
 80005bc:	6013      	str	r3, [r2, #0]
		  y += ADC_RawRead[(i*2)+1];
 80005be:	89fb      	ldrh	r3, [r7, #14]
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	3301      	adds	r3, #1
 80005c4:	4a3b      	ldr	r2, [pc, #236]	@ (80006b4 <main+0x1ac>)
 80005c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005ca:	461a      	mov	r2, r3
 80005cc:	4b46      	ldr	r3, [pc, #280]	@ (80006e8 <main+0x1e0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4413      	add	r3, r2
 80005d2:	4a45      	ldr	r2, [pc, #276]	@ (80006e8 <main+0x1e0>)
 80005d4:	6013      	str	r3, [r2, #0]
	  for (uint16_t i =0; i < 100;i++)
 80005d6:	89fb      	ldrh	r3, [r7, #14]
 80005d8:	3301      	adds	r3, #1
 80005da:	81fb      	strh	r3, [r7, #14]
 80005dc:	89fb      	ldrh	r3, [r7, #14]
 80005de:	2b63      	cmp	r3, #99	@ 0x63
 80005e0:	d9e2      	bls.n	80005a8 <main+0xa0>
	  }
	  position = x/100;
 80005e2:	4b40      	ldr	r3, [pc, #256]	@ (80006e4 <main+0x1dc>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a41      	ldr	r2, [pc, #260]	@ (80006ec <main+0x1e4>)
 80005e8:	fba2 2303 	umull	r2, r3, r2, r3
 80005ec:	095b      	lsrs	r3, r3, #5
 80005ee:	ee07 3a90 	vmov	s15, r3
 80005f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005f6:	4b3e      	ldr	r3, [pc, #248]	@ (80006f0 <main+0x1e8>)
 80005f8:	edc3 7a00 	vstr	s15, [r3]
	  setposition = y/100;
 80005fc:	4b3a      	ldr	r3, [pc, #232]	@ (80006e8 <main+0x1e0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a3a      	ldr	r2, [pc, #232]	@ (80006ec <main+0x1e4>)
 8000602:	fba2 2303 	umull	r2, r3, r2, r3
 8000606:	095b      	lsrs	r3, r3, #5
 8000608:	ee07 3a90 	vmov	s15, r3
 800060c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000610:	4b38      	ldr	r3, [pc, #224]	@ (80006f4 <main+0x1ec>)
 8000612:	edc3 7a00 	vstr	s15, [r3]
	  x = 0;
 8000616:	4b33      	ldr	r3, [pc, #204]	@ (80006e4 <main+0x1dc>)
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
	  y = 0;
 800061c:	4b32      	ldr	r3, [pc, #200]	@ (80006e8 <main+0x1e0>)
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]

	  static uint32_t timestamp =0;
	  if(timestamp < HAL_GetTick())
 8000622:	f000 fe15 	bl	8001250 <HAL_GetTick>
 8000626:	4602      	mov	r2, r0
 8000628:	4b33      	ldr	r3, [pc, #204]	@ (80006f8 <main+0x1f0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	429a      	cmp	r2, r3
 800062e:	d9a0      	bls.n	8000572 <main+0x6a>
	  {
	  timestamp = HAL_GetTick()+10;
 8000630:	f000 fe0e 	bl	8001250 <HAL_GetTick>
 8000634:	4603      	mov	r3, r0
 8000636:	330a      	adds	r3, #10
 8000638:	4a2f      	ldr	r2, [pc, #188]	@ (80006f8 <main+0x1f0>)
 800063a:	6013      	str	r3, [r2, #0]
	  Vfeedback = arm_pid_f32(&PID, setposition - position);
 800063c:	4b2d      	ldr	r3, [pc, #180]	@ (80006f4 <main+0x1ec>)
 800063e:	ed93 7a00 	vldr	s14, [r3]
 8000642:	4b2b      	ldr	r3, [pc, #172]	@ (80006f0 <main+0x1e8>)
 8000644:	edd3 7a00 	vldr	s15, [r3]
 8000648:	ee77 7a67 	vsub.f32	s15, s14, s15
 800064c:	4b1e      	ldr	r3, [pc, #120]	@ (80006c8 <main+0x1c0>)
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	edc7 7a01 	vstr	s15, [r7, #4]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	ed93 7a00 	vldr	s14, [r3]
 800065a:	edd7 7a01 	vldr	s15, [r7, #4]
 800065e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	edd3 6a01 	vldr	s13, [r3, #4]
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	edd3 7a03 	vldr	s15, [r3, #12]
 800066e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000672:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	edd3 6a02 	vldr	s13, [r3, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000682:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000686:	ee37 7a27 	vadd.f32	s14, s14, s15
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000694:	edc7 7a00 	vstr	s15, [r7]

    /* Update state */
    S->state[1] = S->state[0];
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	68da      	ldr	r2, [r3, #12]
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	683a      	ldr	r2, [r7, #0]
 80006aa:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	4a13      	ldr	r2, [pc, #76]	@ (80006fc <main+0x1f4>)
 80006b0:	6013      	str	r3, [r2, #0]
  {
 80006b2:	e75e      	b.n	8000572 <main+0x6a>
 80006b4:	20000274 	.word	0x20000274
 80006b8:	20000028 	.word	0x20000028
 80006bc:	20000188 	.word	0x20000188
 80006c0:	200001d4 	.word	0x200001d4
 80006c4:	20000220 	.word	0x20000220
 80006c8:	20000404 	.word	0x20000404
 80006cc:	3dcccccd 	.word	0x3dcccccd
 80006d0:	3727c5ac 	.word	0x3727c5ac
 80006d4:	2000026c 	.word	0x2000026c
 80006d8:	42400000 	.word	0x42400000
 80006dc:	43b40000 	.word	0x43b40000
 80006e0:	20000270 	.word	0x20000270
 80006e4:	20000434 	.word	0x20000434
 80006e8:	20000438 	.word	0x20000438
 80006ec:	51eb851f 	.word	0x51eb851f
 80006f0:	20000428 	.word	0x20000428
 80006f4:	2000042c 	.word	0x2000042c
 80006f8:	2000043c 	.word	0x2000043c
 80006fc:	20000430 	.word	0x20000430

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	@ 0x50
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0318 	add.w	r3, r7, #24
 800070a:	2238      	movs	r2, #56	@ 0x38
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f006 fc78 	bl	8007004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000722:	2000      	movs	r0, #0
 8000724:	f003 f902 	bl	800392c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000730:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000732:	2340      	movs	r3, #64	@ 0x40
 8000734:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000736:	2302      	movs	r3, #2
 8000738:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800073a:	2302      	movs	r3, #2
 800073c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800073e:	2304      	movs	r3, #4
 8000740:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000742:	2355      	movs	r3, #85	@ 0x55
 8000744:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000746:	2302      	movs	r3, #2
 8000748:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800074a:	2302      	movs	r3, #2
 800074c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800074e:	2302      	movs	r3, #2
 8000750:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000752:	f107 0318 	add.w	r3, r7, #24
 8000756:	4618      	mov	r0, r3
 8000758:	f003 f99c 	bl	8003a94 <HAL_RCC_OscConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000762:	f000 fa9f 	bl	8000ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000766:	230f      	movs	r3, #15
 8000768:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076a:	2303      	movs	r3, #3
 800076c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2104      	movs	r1, #4
 800077e:	4618      	mov	r0, r3
 8000780:	f003 fc9a 	bl	80040b8 <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800078a:	f000 fa8b 	bl	8000ca4 <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3750      	adds	r7, #80	@ 0x50
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08c      	sub	sp, #48	@ 0x30
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800079e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2220      	movs	r2, #32
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f006 fc27 	bl	8007004 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007b6:	4b3a      	ldr	r3, [pc, #232]	@ (80008a0 <MX_ADC1_Init+0x108>)
 80007b8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007be:	4b38      	ldr	r3, [pc, #224]	@ (80008a0 <MX_ADC1_Init+0x108>)
 80007c0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007c6:	4b36      	ldr	r3, [pc, #216]	@ (80008a0 <MX_ADC1_Init+0x108>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007cc:	4b34      	ldr	r3, [pc, #208]	@ (80008a0 <MX_ADC1_Init+0x108>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80007d2:	4b33      	ldr	r3, [pc, #204]	@ (80008a0 <MX_ADC1_Init+0x108>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007d8:	4b31      	ldr	r3, [pc, #196]	@ (80008a0 <MX_ADC1_Init+0x108>)
 80007da:	2201      	movs	r2, #1
 80007dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007de:	4b30      	ldr	r3, [pc, #192]	@ (80008a0 <MX_ADC1_Init+0x108>)
 80007e0:	2204      	movs	r2, #4
 80007e2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e4:	4b2e      	ldr	r3, [pc, #184]	@ (80008a0 <MX_ADC1_Init+0x108>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007ea:	4b2d      	ldr	r3, [pc, #180]	@ (80008a0 <MX_ADC1_Init+0x108>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80007f0:	4b2b      	ldr	r3, [pc, #172]	@ (80008a0 <MX_ADC1_Init+0x108>)
 80007f2:	2202      	movs	r2, #2
 80007f4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f6:	4b2a      	ldr	r3, [pc, #168]	@ (80008a0 <MX_ADC1_Init+0x108>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80007fe:	4b28      	ldr	r3, [pc, #160]	@ (80008a0 <MX_ADC1_Init+0x108>)
 8000800:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8000804:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000806:	4b26      	ldr	r3, [pc, #152]	@ (80008a0 <MX_ADC1_Init+0x108>)
 8000808:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800080c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800080e:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <MX_ADC1_Init+0x108>)
 8000810:	2201      	movs	r2, #1
 8000812:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000816:	4b22      	ldr	r3, [pc, #136]	@ (80008a0 <MX_ADC1_Init+0x108>)
 8000818:	2200      	movs	r2, #0
 800081a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800081c:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <MX_ADC1_Init+0x108>)
 800081e:	2200      	movs	r2, #0
 8000820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000824:	481e      	ldr	r0, [pc, #120]	@ (80008a0 <MX_ADC1_Init+0x108>)
 8000826:	f000 ff5f 	bl	80016e8 <HAL_ADC_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000830:	f000 fa38 	bl	8000ca4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000838:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800083c:	4619      	mov	r1, r3
 800083e:	4818      	ldr	r0, [pc, #96]	@ (80008a0 <MX_ADC1_Init+0x108>)
 8000840:	f002 fa2c 	bl	8002c9c <HAL_ADCEx_MultiModeConfigChannel>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800084a:	f000 fa2b 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800084e:	4b15      	ldr	r3, [pc, #84]	@ (80008a4 <MX_ADC1_Init+0x10c>)
 8000850:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000852:	2306      	movs	r3, #6
 8000854:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000856:	2302      	movs	r3, #2
 8000858:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800085a:	237f      	movs	r3, #127	@ 0x7f
 800085c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800085e:	2304      	movs	r3, #4
 8000860:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	4619      	mov	r1, r3
 800086a:	480d      	ldr	r0, [pc, #52]	@ (80008a0 <MX_ADC1_Init+0x108>)
 800086c:	f001 fc54 	bl	8002118 <HAL_ADC_ConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000876:	f000 fa15 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <MX_ADC1_Init+0x110>)
 800087c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800087e:	230c      	movs	r3, #12
 8000880:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	4619      	mov	r1, r3
 8000886:	4806      	ldr	r0, [pc, #24]	@ (80008a0 <MX_ADC1_Init+0x108>)
 8000888:	f001 fc46 	bl	8002118 <HAL_ADC_ConfigChannel>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000892:	f000 fa07 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	3730      	adds	r7, #48	@ 0x30
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000028 	.word	0x20000028
 80008a4:	04300002 	.word	0x04300002
 80008a8:	08600004 	.word	0x08600004

080008ac <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008b0:	4b21      	ldr	r3, [pc, #132]	@ (8000938 <MX_LPUART1_UART_Init+0x8c>)
 80008b2:	4a22      	ldr	r2, [pc, #136]	@ (800093c <MX_LPUART1_UART_Init+0x90>)
 80008b4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80008b6:	4b20      	ldr	r3, [pc, #128]	@ (8000938 <MX_LPUART1_UART_Init+0x8c>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b1e      	ldr	r3, [pc, #120]	@ (8000938 <MX_LPUART1_UART_Init+0x8c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <MX_LPUART1_UART_Init+0x8c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <MX_LPUART1_UART_Init+0x8c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <MX_LPUART1_UART_Init+0x8c>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <MX_LPUART1_UART_Init+0x8c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008dc:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <MX_LPUART1_UART_Init+0x8c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008e2:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <MX_LPUART1_UART_Init+0x8c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e8:	4b13      	ldr	r3, [pc, #76]	@ (8000938 <MX_LPUART1_UART_Init+0x8c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008ee:	4812      	ldr	r0, [pc, #72]	@ (8000938 <MX_LPUART1_UART_Init+0x8c>)
 80008f0:	f005 fce4 	bl	80062bc <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80008fa:	f000 f9d3 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008fe:	2100      	movs	r1, #0
 8000900:	480d      	ldr	r0, [pc, #52]	@ (8000938 <MX_LPUART1_UART_Init+0x8c>)
 8000902:	f006 fa7f 	bl	8006e04 <HAL_UARTEx_SetTxFifoThreshold>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800090c:	f000 f9ca 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000910:	2100      	movs	r1, #0
 8000912:	4809      	ldr	r0, [pc, #36]	@ (8000938 <MX_LPUART1_UART_Init+0x8c>)
 8000914:	f006 fab4 	bl	8006e80 <HAL_UARTEx_SetRxFifoThreshold>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800091e:	f000 f9c1 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	@ (8000938 <MX_LPUART1_UART_Init+0x8c>)
 8000924:	f006 fa35 	bl	8006d92 <HAL_UARTEx_DisableFifoMode>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800092e:	f000 f9b9 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000f4 	.word	0x200000f4
 800093c:	40008000 	.word	0x40008000

08000940 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000946:	f107 0310 	add.w	r3, r7, #16
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800095e:	4b1d      	ldr	r3, [pc, #116]	@ (80009d4 <MX_TIM3_Init+0x94>)
 8000960:	4a1d      	ldr	r2, [pc, #116]	@ (80009d8 <MX_TIM3_Init+0x98>)
 8000962:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8000964:	4b1b      	ldr	r3, [pc, #108]	@ (80009d4 <MX_TIM3_Init+0x94>)
 8000966:	22a9      	movs	r2, #169	@ 0xa9
 8000968:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096a:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <MX_TIM3_Init+0x94>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000970:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <MX_TIM3_Init+0x94>)
 8000972:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000976:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000978:	4b16      	ldr	r3, [pc, #88]	@ (80009d4 <MX_TIM3_Init+0x94>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097e:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <MX_TIM3_Init+0x94>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000984:	4813      	ldr	r0, [pc, #76]	@ (80009d4 <MX_TIM3_Init+0x94>)
 8000986:	f004 f801 	bl	800498c <HAL_TIM_Base_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000990:	f000 f988 	bl	8000ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000994:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000998:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800099a:	f107 0310 	add.w	r3, r7, #16
 800099e:	4619      	mov	r1, r3
 80009a0:	480c      	ldr	r0, [pc, #48]	@ (80009d4 <MX_TIM3_Init+0x94>)
 80009a2:	f004 fdc7 	bl	8005534 <HAL_TIM_ConfigClockSource>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80009ac:	f000 f97a 	bl	8000ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009b0:	2320      	movs	r3, #32
 80009b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <MX_TIM3_Init+0x94>)
 80009be:	f005 fba1 	bl	8006104 <HAL_TIMEx_MasterConfigSynchronization>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80009c8:	f000 f96c 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	3720      	adds	r7, #32
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000188 	.word	0x20000188
 80009d8:	40000400 	.word	0x40000400

080009dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08e      	sub	sp, #56	@ 0x38
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009fc:	463b      	mov	r3, r7
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]
 8000a0a:	615a      	str	r2, [r3, #20]
 8000a0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac4 <MX_TIM4_Init+0xe8>)
 8000a10:	4a2d      	ldr	r2, [pc, #180]	@ (8000ac8 <MX_TIM4_Init+0xec>)
 8000a12:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8000a14:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac4 <MX_TIM4_Init+0xe8>)
 8000a16:	22a9      	movs	r2, #169	@ 0xa9
 8000a18:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac4 <MX_TIM4_Init+0xe8>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000a20:	4b28      	ldr	r3, [pc, #160]	@ (8000ac4 <MX_TIM4_Init+0xe8>)
 8000a22:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000a26:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a28:	4b26      	ldr	r3, [pc, #152]	@ (8000ac4 <MX_TIM4_Init+0xe8>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2e:	4b25      	ldr	r3, [pc, #148]	@ (8000ac4 <MX_TIM4_Init+0xe8>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a34:	4823      	ldr	r0, [pc, #140]	@ (8000ac4 <MX_TIM4_Init+0xe8>)
 8000a36:	f003 ffa9 	bl	800498c <HAL_TIM_Base_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000a40:	f000 f930 	bl	8000ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	481c      	ldr	r0, [pc, #112]	@ (8000ac4 <MX_TIM4_Init+0xe8>)
 8000a52:	f004 fd6f 	bl	8005534 <HAL_TIM_ConfigClockSource>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000a5c:	f000 f922 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a60:	4818      	ldr	r0, [pc, #96]	@ (8000ac4 <MX_TIM4_Init+0xe8>)
 8000a62:	f004 f85b 	bl	8004b1c <HAL_TIM_PWM_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000a6c:	f000 f91a 	bl	8000ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4811      	ldr	r0, [pc, #68]	@ (8000ac4 <MX_TIM4_Init+0xe8>)
 8000a80:	f005 fb40 	bl	8006104 <HAL_TIMEx_MasterConfigSynchronization>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000a8a:	f000 f90b 	bl	8000ca4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a8e:	2360      	movs	r3, #96	@ 0x60
 8000a90:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8000a92:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000a96:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4807      	ldr	r0, [pc, #28]	@ (8000ac4 <MX_TIM4_Init+0xe8>)
 8000aa8:	f004 fc30 	bl	800530c <HAL_TIM_PWM_ConfigChannel>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000ab2:	f000 f8f7 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ab6:	4803      	ldr	r0, [pc, #12]	@ (8000ac4 <MX_TIM4_Init+0xe8>)
 8000ab8:	f000 fa9c 	bl	8000ff4 <HAL_TIM_MspPostInit>

}
 8000abc:	bf00      	nop
 8000abe:	3738      	adds	r7, #56	@ 0x38
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200001d4 	.word	0x200001d4
 8000ac8:	40000800 	.word	0x40000800

08000acc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08c      	sub	sp, #48	@ 0x30
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ad2:	f107 030c 	add.w	r3, r7, #12
 8000ad6:	2224      	movs	r2, #36	@ 0x24
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f006 fa92 	bl	8007004 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <MX_TIM5_Init+0xa0>)
 8000aec:	4a20      	ldr	r2, [pc, #128]	@ (8000b70 <MX_TIM5_Init+0xa4>)
 8000aee:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <MX_TIM5_Init+0xa0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <MX_TIM5_Init+0xa0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 47;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <MX_TIM5_Init+0xa0>)
 8000afe:	222f      	movs	r2, #47	@ 0x2f
 8000b00:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <MX_TIM5_Init+0xa0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <MX_TIM5_Init+0xa0>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b16:	2301      	movs	r3, #1
 8000b18:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b26:	2301      	movs	r3, #1
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000b32:	f107 030c 	add.w	r3, r7, #12
 8000b36:	4619      	mov	r1, r3
 8000b38:	480c      	ldr	r0, [pc, #48]	@ (8000b6c <MX_TIM5_Init+0xa0>)
 8000b3a:	f004 f963 	bl	8004e04 <HAL_TIM_Encoder_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000b44:	f000 f8ae 	bl	8000ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b50:	463b      	mov	r3, r7
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <MX_TIM5_Init+0xa0>)
 8000b56:	f005 fad5 	bl	8006104 <HAL_TIMEx_MasterConfigSynchronization>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000b60:	f000 f8a0 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	3730      	adds	r7, #48	@ 0x30
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000220 	.word	0x20000220
 8000b70:	40000c00 	.word	0x40000c00

08000b74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b7a:	4b12      	ldr	r3, [pc, #72]	@ (8000bc4 <MX_DMA_Init+0x50>)
 8000b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b7e:	4a11      	ldr	r2, [pc, #68]	@ (8000bc4 <MX_DMA_Init+0x50>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b86:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <MX_DMA_Init+0x50>)
 8000b88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b92:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <MX_DMA_Init+0x50>)
 8000b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b96:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc4 <MX_DMA_Init+0x50>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b9e:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <MX_DMA_Init+0x50>)
 8000ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	200b      	movs	r0, #11
 8000bb0:	f002 fa57 	bl	8003062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bb4:	200b      	movs	r0, #11
 8000bb6:	f002 fa6e 	bl	8003096 <HAL_NVIC_EnableIRQ>

}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	@ 0x28
 8000bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	4b2f      	ldr	r3, [pc, #188]	@ (8000c9c <MX_GPIO_Init+0xd4>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be2:	4a2e      	ldr	r2, [pc, #184]	@ (8000c9c <MX_GPIO_Init+0xd4>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bea:	4b2c      	ldr	r3, [pc, #176]	@ (8000c9c <MX_GPIO_Init+0xd4>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bf6:	4b29      	ldr	r3, [pc, #164]	@ (8000c9c <MX_GPIO_Init+0xd4>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfa:	4a28      	ldr	r2, [pc, #160]	@ (8000c9c <MX_GPIO_Init+0xd4>)
 8000bfc:	f043 0320 	orr.w	r3, r3, #32
 8000c00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c02:	4b26      	ldr	r3, [pc, #152]	@ (8000c9c <MX_GPIO_Init+0xd4>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c06:	f003 0320 	and.w	r3, r3, #32
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b23      	ldr	r3, [pc, #140]	@ (8000c9c <MX_GPIO_Init+0xd4>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c12:	4a22      	ldr	r2, [pc, #136]	@ (8000c9c <MX_GPIO_Init+0xd4>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c1a:	4b20      	ldr	r3, [pc, #128]	@ (8000c9c <MX_GPIO_Init+0xd4>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	4b1d      	ldr	r3, [pc, #116]	@ (8000c9c <MX_GPIO_Init+0xd4>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c9c <MX_GPIO_Init+0xd4>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c32:	4b1a      	ldr	r3, [pc, #104]	@ (8000c9c <MX_GPIO_Init+0xd4>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2120      	movs	r1, #32
 8000c42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c46:	f002 fe35 	bl	80038b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c50:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480f      	ldr	r0, [pc, #60]	@ (8000ca0 <MX_GPIO_Init+0xd8>)
 8000c62:	f002 fca5 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c66:	2320      	movs	r3, #32
 8000c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c80:	f002 fc96 	bl	80035b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2100      	movs	r1, #0
 8000c88:	2028      	movs	r0, #40	@ 0x28
 8000c8a:	f002 f9ea 	bl	8003062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c8e:	2028      	movs	r0, #40	@ 0x28
 8000c90:	f002 fa01 	bl	8003096 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	@ 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	48000800 	.word	0x48000800

08000ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
}
 8000caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <Error_Handler+0x8>

08000cb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cba:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	4b09      	ldr	r3, [pc, #36]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cd2:	4a08      	ldr	r2, [pc, #32]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cda:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ce6:	f002 fec5 	bl	8003a74 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40021000 	.word	0x40021000

08000cf8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b09e      	sub	sp, #120	@ 0x78
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	2254      	movs	r2, #84	@ 0x54
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f006 f973 	bl	8007004 <memset>
  if(hadc->Instance==ADC1)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d26:	d167      	bne.n	8000df8 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000d28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d2c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000d2e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000d32:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f003 fbd9 	bl	80044f0 <HAL_RCCEx_PeriphCLKConfig>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000d44:	f7ff ffae 	bl	8000ca4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d48:	4b2d      	ldr	r3, [pc, #180]	@ (8000e00 <HAL_ADC_MspInit+0x108>)
 8000d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4c:	4a2c      	ldr	r2, [pc, #176]	@ (8000e00 <HAL_ADC_MspInit+0x108>)
 8000d4e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d54:	4b2a      	ldr	r3, [pc, #168]	@ (8000e00 <HAL_ADC_MspInit+0x108>)
 8000d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	4b27      	ldr	r3, [pc, #156]	@ (8000e00 <HAL_ADC_MspInit+0x108>)
 8000d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d64:	4a26      	ldr	r2, [pc, #152]	@ (8000e00 <HAL_ADC_MspInit+0x108>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6c:	4b24      	ldr	r3, [pc, #144]	@ (8000e00 <HAL_ADC_MspInit+0x108>)
 8000d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d8e:	f002 fc0f 	bl	80035b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d92:	4b1c      	ldr	r3, [pc, #112]	@ (8000e04 <HAL_ADC_MspInit+0x10c>)
 8000d94:	4a1c      	ldr	r2, [pc, #112]	@ (8000e08 <HAL_ADC_MspInit+0x110>)
 8000d96:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000d98:	4b1a      	ldr	r3, [pc, #104]	@ (8000e04 <HAL_ADC_MspInit+0x10c>)
 8000d9a:	2205      	movs	r2, #5
 8000d9c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d9e:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <HAL_ADC_MspInit+0x10c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da4:	4b17      	ldr	r3, [pc, #92]	@ (8000e04 <HAL_ADC_MspInit+0x10c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000daa:	4b16      	ldr	r3, [pc, #88]	@ (8000e04 <HAL_ADC_MspInit+0x10c>)
 8000dac:	2280      	movs	r2, #128	@ 0x80
 8000dae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000db0:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <HAL_ADC_MspInit+0x10c>)
 8000db2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000db6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000db8:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <HAL_ADC_MspInit+0x10c>)
 8000dba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dbe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000dc0:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <HAL_ADC_MspInit+0x10c>)
 8000dc2:	2220      	movs	r2, #32
 8000dc4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e04 <HAL_ADC_MspInit+0x10c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dcc:	480d      	ldr	r0, [pc, #52]	@ (8000e04 <HAL_ADC_MspInit+0x10c>)
 8000dce:	f002 f97d 	bl	80030cc <HAL_DMA_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000dd8:	f7ff ff64 	bl	8000ca4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a09      	ldr	r2, [pc, #36]	@ (8000e04 <HAL_ADC_MspInit+0x10c>)
 8000de0:	655a      	str	r2, [r3, #84]	@ 0x54
 8000de2:	4a08      	ldr	r2, [pc, #32]	@ (8000e04 <HAL_ADC_MspInit+0x10c>)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2100      	movs	r1, #0
 8000dec:	2012      	movs	r0, #18
 8000dee:	f002 f938 	bl	8003062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000df2:	2012      	movs	r0, #18
 8000df4:	f002 f94f 	bl	8003096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000df8:	bf00      	nop
 8000dfa:	3778      	adds	r7, #120	@ 0x78
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40021000 	.word	0x40021000
 8000e04:	20000094 	.word	0x20000094
 8000e08:	40020008 	.word	0x40020008

08000e0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b09e      	sub	sp, #120	@ 0x78
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	2254      	movs	r2, #84	@ 0x54
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f006 f8e9 	bl	8007004 <memset>
  if(huart->Instance==LPUART1)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a1f      	ldr	r2, [pc, #124]	@ (8000eb4 <HAL_UART_MspInit+0xa8>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d136      	bne.n	8000eaa <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000e3c:	2320      	movs	r3, #32
 8000e3e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f003 fb51 	bl	80044f0 <HAL_RCCEx_PeriphCLKConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e54:	f7ff ff26 	bl	8000ca4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e58:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <HAL_UART_MspInit+0xac>)
 8000e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e5c:	4a16      	ldr	r2, [pc, #88]	@ (8000eb8 <HAL_UART_MspInit+0xac>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000e64:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <HAL_UART_MspInit+0xac>)
 8000e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e70:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <HAL_UART_MspInit+0xac>)
 8000e72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e74:	4a10      	ldr	r2, [pc, #64]	@ (8000eb8 <HAL_UART_MspInit+0xac>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb8 <HAL_UART_MspInit+0xac>)
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000e88:	230c      	movs	r3, #12
 8000e8a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000e98:	230c      	movs	r3, #12
 8000e9a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea6:	f002 fb83 	bl	80035b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000eaa:	bf00      	nop
 8000eac:	3778      	adds	r7, #120	@ 0x78
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40008000 	.word	0x40008000
 8000eb8:	40021000 	.word	0x40021000

08000ebc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a16      	ldr	r2, [pc, #88]	@ (8000f24 <HAL_TIM_Base_MspInit+0x68>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d114      	bne.n	8000ef8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ece:	4b16      	ldr	r3, [pc, #88]	@ (8000f28 <HAL_TIM_Base_MspInit+0x6c>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed2:	4a15      	ldr	r2, [pc, #84]	@ (8000f28 <HAL_TIM_Base_MspInit+0x6c>)
 8000ed4:	f043 0302 	orr.w	r3, r3, #2
 8000ed8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eda:	4b13      	ldr	r3, [pc, #76]	@ (8000f28 <HAL_TIM_Base_MspInit+0x6c>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	201d      	movs	r0, #29
 8000eec:	f002 f8b9 	bl	8003062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ef0:	201d      	movs	r0, #29
 8000ef2:	f002 f8d0 	bl	8003096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ef6:	e010      	b.n	8000f1a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0b      	ldr	r2, [pc, #44]	@ (8000f2c <HAL_TIM_Base_MspInit+0x70>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d10b      	bne.n	8000f1a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f02:	4b09      	ldr	r3, [pc, #36]	@ (8000f28 <HAL_TIM_Base_MspInit+0x6c>)
 8000f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f06:	4a08      	ldr	r2, [pc, #32]	@ (8000f28 <HAL_TIM_Base_MspInit+0x6c>)
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f0e:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <HAL_TIM_Base_MspInit+0x6c>)
 8000f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
}
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40000400 	.word	0x40000400
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40000800 	.word	0x40000800

08000f30 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	@ 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a25      	ldr	r2, [pc, #148]	@ (8000fe4 <HAL_TIM_Encoder_MspInit+0xb4>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d144      	bne.n	8000fdc <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000f52:	4b25      	ldr	r3, [pc, #148]	@ (8000fe8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f56:	4a24      	ldr	r2, [pc, #144]	@ (8000fe8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000f58:	f043 0308 	orr.w	r3, r3, #8
 8000f5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f5e:	4b22      	ldr	r3, [pc, #136]	@ (8000fe8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f62:	f003 0308 	and.w	r3, r3, #8
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6e:	4a1e      	ldr	r2, [pc, #120]	@ (8000fe8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000f70:	f043 0302 	orr.w	r3, r3, #2
 8000f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f76:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	4b19      	ldr	r3, [pc, #100]	@ (8000fe8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f86:	4a18      	ldr	r2, [pc, #96]	@ (8000fe8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000f88:	f043 0304 	orr.w	r3, r3, #4
 8000f8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f8e:	4b16      	ldr	r3, [pc, #88]	@ (8000fe8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f92:	f003 0304 	and.w	r3, r3, #4
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PB2     ------> TIM5_CH1
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000faa:	2302      	movs	r3, #2
 8000fac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480d      	ldr	r0, [pc, #52]	@ (8000fec <HAL_TIM_Encoder_MspInit+0xbc>)
 8000fb6:	f002 fafb 	bl	80035b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000fba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4806      	ldr	r0, [pc, #24]	@ (8000ff0 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000fd8:	f002 faea 	bl	80035b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000fdc:	bf00      	nop
 8000fde:	3728      	adds	r7, #40	@ 0x28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40000c00 	.word	0x40000c00
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	48000400 	.word	0x48000400
 8000ff0:	48000800 	.word	0x48000800

08000ff4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a12      	ldr	r2, [pc, #72]	@ (800105c <HAL_TIM_MspPostInit+0x68>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d11d      	bne.n	8001052 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <HAL_TIM_MspPostInit+0x6c>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101a:	4a11      	ldr	r2, [pc, #68]	@ (8001060 <HAL_TIM_MspPostInit+0x6c>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001022:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <HAL_TIM_MspPostInit+0x6c>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800102e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001032:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001040:	230a      	movs	r3, #10
 8001042:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4619      	mov	r1, r3
 800104a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800104e:	f002 faaf 	bl	80035b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001052:	bf00      	nop
 8001054:	3720      	adds	r7, #32
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40000800 	.word	0x40000800
 8001060:	40021000 	.word	0x40021000

08001064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <NMI_Handler+0x4>

0800106c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <MemManage_Handler+0x4>

0800107c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <UsageFault_Handler+0x4>

0800108c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ba:	f000 f8b7 	bl	800122c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010c8:	4802      	ldr	r0, [pc, #8]	@ (80010d4 <DMA1_Channel1_IRQHandler+0x10>)
 80010ca:	f002 f922 	bl	8003312 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000094 	.word	0x20000094

080010d8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80010dc:	4802      	ldr	r0, [pc, #8]	@ (80010e8 <ADC1_2_IRQHandler+0x10>)
 80010de:	f000 fd93 	bl	8001c08 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000028 	.word	0x20000028

080010ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010f0:	4802      	ldr	r0, [pc, #8]	@ (80010fc <TIM3_IRQHandler+0x10>)
 80010f2:	f003 ffbb 	bl	800506c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000188 	.word	0x20000188

08001100 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001104:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001108:	f002 fbec 	bl	80038e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}

08001110 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <SystemInit+0x20>)
 8001116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800111a:	4a05      	ldr	r2, [pc, #20]	@ (8001130 <SystemInit+0x20>)
 800111c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001120:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001134:	480d      	ldr	r0, [pc, #52]	@ (800116c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001136:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001138:	f7ff ffea 	bl	8001110 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800113c:	480c      	ldr	r0, [pc, #48]	@ (8001170 <LoopForever+0x6>)
  ldr r1, =_edata
 800113e:	490d      	ldr	r1, [pc, #52]	@ (8001174 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001140:	4a0d      	ldr	r2, [pc, #52]	@ (8001178 <LoopForever+0xe>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001144:	e002      	b.n	800114c <LoopCopyDataInit>

08001146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114a:	3304      	adds	r3, #4

0800114c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800114c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001150:	d3f9      	bcc.n	8001146 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001152:	4a0a      	ldr	r2, [pc, #40]	@ (800117c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001154:	4c0a      	ldr	r4, [pc, #40]	@ (8001180 <LoopForever+0x16>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001158:	e001      	b.n	800115e <LoopFillZerobss>

0800115a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800115c:	3204      	adds	r2, #4

0800115e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001160:	d3fb      	bcc.n	800115a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001162:	f005 ff57 	bl	8007014 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001166:	f7ff f9cf 	bl	8000508 <main>

0800116a <LoopForever>:

LoopForever:
    b LoopForever
 800116a:	e7fe      	b.n	800116a <LoopForever>
  ldr   r0, =_estack
 800116c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001174:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001178:	080070c4 	.word	0x080070c4
  ldr r2, =_sbss
 800117c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001180:	20000444 	.word	0x20000444

08001184 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC3_IRQHandler>

08001186 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800118c:	2300      	movs	r3, #0
 800118e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001190:	2003      	movs	r0, #3
 8001192:	f001 ff5b 	bl	800304c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001196:	2000      	movs	r0, #0
 8001198:	f000 f80e 	bl	80011b8 <HAL_InitTick>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	71fb      	strb	r3, [r7, #7]
 80011a6:	e001      	b.n	80011ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011a8:	f7ff fd82 	bl	8000cb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011ac:	79fb      	ldrb	r3, [r7, #7]

}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011c0:	2300      	movs	r3, #0
 80011c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011c4:	4b16      	ldr	r3, [pc, #88]	@ (8001220 <HAL_InitTick+0x68>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d022      	beq.n	8001212 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011cc:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <HAL_InitTick+0x6c>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <HAL_InitTick+0x68>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80011dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 ff66 	bl	80030b2 <HAL_SYSTICK_Config>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10f      	bne.n	800120c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b0f      	cmp	r3, #15
 80011f0:	d809      	bhi.n	8001206 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f2:	2200      	movs	r2, #0
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	f04f 30ff 	mov.w	r0, #4294967295
 80011fa:	f001 ff32 	bl	8003062 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001228 <HAL_InitTick+0x70>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	e007      	b.n	8001216 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	73fb      	strb	r3, [r7, #15]
 800120a:	e004      	b.n	8001216 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	73fb      	strb	r3, [r7, #15]
 8001210:	e001      	b.n	8001216 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001216:	7bfb      	ldrb	r3, [r7, #15]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000008 	.word	0x20000008
 8001224:	20000000 	.word	0x20000000
 8001228:	20000004 	.word	0x20000004

0800122c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001230:	4b05      	ldr	r3, [pc, #20]	@ (8001248 <HAL_IncTick+0x1c>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b05      	ldr	r3, [pc, #20]	@ (800124c <HAL_IncTick+0x20>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4413      	add	r3, r2
 800123a:	4a03      	ldr	r2, [pc, #12]	@ (8001248 <HAL_IncTick+0x1c>)
 800123c:	6013      	str	r3, [r2, #0]
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	20000440 	.word	0x20000440
 800124c:	20000008 	.word	0x20000008

08001250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b03      	ldr	r3, [pc, #12]	@ (8001264 <HAL_GetTick+0x14>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000440 	.word	0x20000440

08001268 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	431a      	orrs	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	609a      	str	r2, [r3, #8]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	609a      	str	r2, [r3, #8]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b087      	sub	sp, #28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
 80012dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	3360      	adds	r3, #96	@ 0x60
 80012e2:	461a      	mov	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <LL_ADC_SetOffset+0x44>)
 80012f2:	4013      	ands	r3, r2
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	4313      	orrs	r3, r2
 8001300:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001308:	bf00      	nop
 800130a:	371c      	adds	r7, #28
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	03fff000 	.word	0x03fff000

08001318 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3360      	adds	r3, #96	@ 0x60
 8001326:	461a      	mov	r2, r3
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001338:	4618      	mov	r0, r3
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001344:	b480      	push	{r7}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	3360      	adds	r3, #96	@ 0x60
 8001354:	461a      	mov	r2, r3
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	431a      	orrs	r2, r3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800136e:	bf00      	nop
 8001370:	371c      	adds	r7, #28
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800137a:	b480      	push	{r7}
 800137c:	b087      	sub	sp, #28
 800137e:	af00      	add	r7, sp, #0
 8001380:	60f8      	str	r0, [r7, #12]
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3360      	adds	r3, #96	@ 0x60
 800138a:	461a      	mov	r2, r3
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	431a      	orrs	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80013a4:	bf00      	nop
 80013a6:	371c      	adds	r7, #28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b087      	sub	sp, #28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	3360      	adds	r3, #96	@ 0x60
 80013c0:	461a      	mov	r2, r3
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	431a      	orrs	r2, r3
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80013da:	bf00      	nop
 80013dc:	371c      	adds	r7, #28
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	431a      	orrs	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	615a      	str	r2, [r3, #20]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001420:	2301      	movs	r3, #1
 8001422:	e000      	b.n	8001426 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001432:	b480      	push	{r7}
 8001434:	b087      	sub	sp, #28
 8001436:	af00      	add	r7, sp, #0
 8001438:	60f8      	str	r0, [r7, #12]
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	3330      	adds	r3, #48	@ 0x30
 8001442:	461a      	mov	r2, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	0a1b      	lsrs	r3, r3, #8
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	4413      	add	r3, r2
 8001450:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	f003 031f 	and.w	r3, r3, #31
 800145c:	211f      	movs	r1, #31
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	401a      	ands	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	0e9b      	lsrs	r3, r3, #26
 800146a:	f003 011f 	and.w	r1, r3, #31
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	f003 031f 	and.w	r3, r3, #31
 8001474:	fa01 f303 	lsl.w	r3, r1, r3
 8001478:	431a      	orrs	r2, r3
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800147e:	bf00      	nop
 8001480:	371c      	adds	r7, #28
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001496:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b087      	sub	sp, #28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	3314      	adds	r3, #20
 80014c0:	461a      	mov	r2, r3
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	0e5b      	lsrs	r3, r3, #25
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	4413      	add	r3, r2
 80014ce:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	0d1b      	lsrs	r3, r3, #20
 80014d8:	f003 031f 	and.w	r3, r3, #31
 80014dc:	2107      	movs	r1, #7
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	401a      	ands	r2, r3
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	0d1b      	lsrs	r3, r3, #20
 80014ea:	f003 031f 	and.w	r3, r3, #31
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	fa01 f303 	lsl.w	r3, r1, r3
 80014f4:	431a      	orrs	r2, r3
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80014fa:	bf00      	nop
 80014fc:	371c      	adds	r7, #28
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001520:	43db      	mvns	r3, r3
 8001522:	401a      	ands	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0318 	and.w	r3, r3, #24
 800152a:	4908      	ldr	r1, [pc, #32]	@ (800154c <LL_ADC_SetChannelSingleDiff+0x44>)
 800152c:	40d9      	lsrs	r1, r3
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	400b      	ands	r3, r1
 8001532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001536:	431a      	orrs	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800153e:	bf00      	nop
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	0007ffff 	.word	0x0007ffff

08001550 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 031f 	and.w	r3, r3, #31
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001598:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6093      	str	r3, [r2, #8]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015c0:	d101      	bne.n	80015c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80015e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015e8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800160c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001610:	d101      	bne.n	8001616 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001612:	2301      	movs	r3, #1
 8001614:	e000      	b.n	8001618 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001634:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001638:	f043 0201 	orr.w	r2, r3, #1
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b01      	cmp	r3, #1
 800165e:	d101      	bne.n	8001664 <LL_ADC_IsEnabled+0x18>
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <LL_ADC_IsEnabled+0x1a>
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001682:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001686:	f043 0204 	orr.w	r2, r3, #4
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d101      	bne.n	80016b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d101      	bne.n	80016d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016d4:	2301      	movs	r3, #1
 80016d6:	e000      	b.n	80016da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b089      	sub	sp, #36	@ 0x24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e1a9      	b.n	8001a56 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800170c:	2b00      	cmp	r3, #0
 800170e:	d109      	bne.n	8001724 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff faf1 	bl	8000cf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff3f 	bl	80015ac <LL_ADC_IsDeepPowerDownEnabled>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d004      	beq.n	800173e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff25 	bl	8001588 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ff5a 	bl	80015fc <LL_ADC_IsInternalRegulatorEnabled>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d115      	bne.n	800177a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff ff3e 	bl	80015d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001758:	4b9c      	ldr	r3, [pc, #624]	@ (80019cc <HAL_ADC_Init+0x2e4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	099b      	lsrs	r3, r3, #6
 800175e:	4a9c      	ldr	r2, [pc, #624]	@ (80019d0 <HAL_ADC_Init+0x2e8>)
 8001760:	fba2 2303 	umull	r2, r3, r2, r3
 8001764:	099b      	lsrs	r3, r3, #6
 8001766:	3301      	adds	r3, #1
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800176c:	e002      	b.n	8001774 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	3b01      	subs	r3, #1
 8001772:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f9      	bne.n	800176e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff3c 	bl	80015fc <LL_ADC_IsInternalRegulatorEnabled>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10d      	bne.n	80017a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800178e:	f043 0210 	orr.w	r2, r3, #16
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800179a:	f043 0201 	orr.w	r2, r3, #1
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ff75 	bl	800169a <LL_ADC_REG_IsConversionOngoing>
 80017b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f040 8142 	bne.w	8001a44 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f040 813e 	bne.w	8001a44 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017cc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80017d0:	f043 0202 	orr.w	r2, r3, #2
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff35 	bl	800164c <LL_ADC_IsEnabled>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d141      	bne.n	800186c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017f0:	d004      	beq.n	80017fc <HAL_ADC_Init+0x114>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a77      	ldr	r2, [pc, #476]	@ (80019d4 <HAL_ADC_Init+0x2ec>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d10f      	bne.n	800181c <HAL_ADC_Init+0x134>
 80017fc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001800:	f7ff ff24 	bl	800164c <LL_ADC_IsEnabled>
 8001804:	4604      	mov	r4, r0
 8001806:	4873      	ldr	r0, [pc, #460]	@ (80019d4 <HAL_ADC_Init+0x2ec>)
 8001808:	f7ff ff20 	bl	800164c <LL_ADC_IsEnabled>
 800180c:	4603      	mov	r3, r0
 800180e:	4323      	orrs	r3, r4
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf0c      	ite	eq
 8001814:	2301      	moveq	r3, #1
 8001816:	2300      	movne	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	e012      	b.n	8001842 <HAL_ADC_Init+0x15a>
 800181c:	486e      	ldr	r0, [pc, #440]	@ (80019d8 <HAL_ADC_Init+0x2f0>)
 800181e:	f7ff ff15 	bl	800164c <LL_ADC_IsEnabled>
 8001822:	4604      	mov	r4, r0
 8001824:	486d      	ldr	r0, [pc, #436]	@ (80019dc <HAL_ADC_Init+0x2f4>)
 8001826:	f7ff ff11 	bl	800164c <LL_ADC_IsEnabled>
 800182a:	4603      	mov	r3, r0
 800182c:	431c      	orrs	r4, r3
 800182e:	486c      	ldr	r0, [pc, #432]	@ (80019e0 <HAL_ADC_Init+0x2f8>)
 8001830:	f7ff ff0c 	bl	800164c <LL_ADC_IsEnabled>
 8001834:	4603      	mov	r3, r0
 8001836:	4323      	orrs	r3, r4
 8001838:	2b00      	cmp	r3, #0
 800183a:	bf0c      	ite	eq
 800183c:	2301      	moveq	r3, #1
 800183e:	2300      	movne	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d012      	beq.n	800186c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800184e:	d004      	beq.n	800185a <HAL_ADC_Init+0x172>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a5f      	ldr	r2, [pc, #380]	@ (80019d4 <HAL_ADC_Init+0x2ec>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d101      	bne.n	800185e <HAL_ADC_Init+0x176>
 800185a:	4a62      	ldr	r2, [pc, #392]	@ (80019e4 <HAL_ADC_Init+0x2fc>)
 800185c:	e000      	b.n	8001860 <HAL_ADC_Init+0x178>
 800185e:	4a62      	ldr	r2, [pc, #392]	@ (80019e8 <HAL_ADC_Init+0x300>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	4619      	mov	r1, r3
 8001866:	4610      	mov	r0, r2
 8001868:	f7ff fcfe 	bl	8001268 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	7f5b      	ldrb	r3, [r3, #29]
 8001870:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001876:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800187c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001882:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800188a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001896:	2b01      	cmp	r3, #1
 8001898:	d106      	bne.n	80018a8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800189e:	3b01      	subs	r3, #1
 80018a0:	045b      	lsls	r3, r3, #17
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d009      	beq.n	80018c4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018bc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	4b48      	ldr	r3, [pc, #288]	@ (80019ec <HAL_ADC_Init+0x304>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	69b9      	ldr	r1, [r7, #24]
 80018d4:	430b      	orrs	r3, r1
 80018d6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fee4 	bl	80016c0 <LL_ADC_INJ_IsConversionOngoing>
 80018f8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d17f      	bne.n	8001a00 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d17c      	bne.n	8001a00 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800190a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001912:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001922:	f023 0302 	bic.w	r3, r3, #2
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6812      	ldr	r2, [r2, #0]
 800192a:	69b9      	ldr	r1, [r7, #24]
 800192c:	430b      	orrs	r3, r1
 800192e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d017      	beq.n	8001968 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	691a      	ldr	r2, [r3, #16]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001946:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001950:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001954:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6911      	ldr	r1, [r2, #16]
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	430b      	orrs	r3, r1
 8001962:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001966:	e013      	b.n	8001990 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	691a      	ldr	r2, [r3, #16]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001976:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001988:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800198c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001996:	2b01      	cmp	r3, #1
 8001998:	d12a      	bne.n	80019f0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80019a4:	f023 0304 	bic.w	r3, r3, #4
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80019b0:	4311      	orrs	r1, r2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80019b6:	4311      	orrs	r1, r2
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80019bc:	430a      	orrs	r2, r1
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f042 0201 	orr.w	r2, r2, #1
 80019c8:	611a      	str	r2, [r3, #16]
 80019ca:	e019      	b.n	8001a00 <HAL_ADC_Init+0x318>
 80019cc:	20000000 	.word	0x20000000
 80019d0:	053e2d63 	.word	0x053e2d63
 80019d4:	50000100 	.word	0x50000100
 80019d8:	50000400 	.word	0x50000400
 80019dc:	50000500 	.word	0x50000500
 80019e0:	50000600 	.word	0x50000600
 80019e4:	50000300 	.word	0x50000300
 80019e8:	50000700 	.word	0x50000700
 80019ec:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	691a      	ldr	r2, [r3, #16]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 0201 	bic.w	r2, r2, #1
 80019fe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d10c      	bne.n	8001a22 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	f023 010f 	bic.w	r1, r3, #15
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	1e5a      	subs	r2, r3, #1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a20:	e007      	b.n	8001a32 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 020f 	bic.w	r2, r2, #15
 8001a30:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a36:	f023 0303 	bic.w	r3, r3, #3
 8001a3a:	f043 0201 	orr.w	r2, r3, #1
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a42:	e007      	b.n	8001a54 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a48:	f043 0210 	orr.w	r2, r3, #16
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a54:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3724      	adds	r7, #36	@ 0x24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd90      	pop	{r4, r7, pc}
 8001a5e:	bf00      	nop

08001a60 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a74:	d004      	beq.n	8001a80 <HAL_ADC_Start_DMA+0x20>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a5a      	ldr	r2, [pc, #360]	@ (8001be4 <HAL_ADC_Start_DMA+0x184>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d101      	bne.n	8001a84 <HAL_ADC_Start_DMA+0x24>
 8001a80:	4b59      	ldr	r3, [pc, #356]	@ (8001be8 <HAL_ADC_Start_DMA+0x188>)
 8001a82:	e000      	b.n	8001a86 <HAL_ADC_Start_DMA+0x26>
 8001a84:	4b59      	ldr	r3, [pc, #356]	@ (8001bec <HAL_ADC_Start_DMA+0x18c>)
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fd62 	bl	8001550 <LL_ADC_GetMultimode>
 8001a8c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fe01 	bl	800169a <LL_ADC_REG_IsConversionOngoing>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f040 809b 	bne.w	8001bd6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d101      	bne.n	8001aae <HAL_ADC_Start_DMA+0x4e>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e096      	b.n	8001bdc <HAL_ADC_Start_DMA+0x17c>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a4d      	ldr	r2, [pc, #308]	@ (8001bf0 <HAL_ADC_Start_DMA+0x190>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d008      	beq.n	8001ad2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d005      	beq.n	8001ad2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	2b05      	cmp	r3, #5
 8001aca:	d002      	beq.n	8001ad2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	2b09      	cmp	r3, #9
 8001ad0:	d17a      	bne.n	8001bc8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f000 ff60 	bl	8002998 <ADC_Enable>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001adc:	7dfb      	ldrb	r3, [r7, #23]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d16d      	bne.n	8001bbe <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ae6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001aea:	f023 0301 	bic.w	r3, r3, #1
 8001aee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a3a      	ldr	r2, [pc, #232]	@ (8001be4 <HAL_ADC_Start_DMA+0x184>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d009      	beq.n	8001b14 <HAL_ADC_Start_DMA+0xb4>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a3b      	ldr	r2, [pc, #236]	@ (8001bf4 <HAL_ADC_Start_DMA+0x194>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d002      	beq.n	8001b10 <HAL_ADC_Start_DMA+0xb0>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	e003      	b.n	8001b18 <HAL_ADC_Start_DMA+0xb8>
 8001b10:	4b39      	ldr	r3, [pc, #228]	@ (8001bf8 <HAL_ADC_Start_DMA+0x198>)
 8001b12:	e001      	b.n	8001b18 <HAL_ADC_Start_DMA+0xb8>
 8001b14:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d002      	beq.n	8001b26 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d105      	bne.n	8001b32 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d006      	beq.n	8001b4c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b42:	f023 0206 	bic.w	r2, r3, #6
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	661a      	str	r2, [r3, #96]	@ 0x60
 8001b4a:	e002      	b.n	8001b52 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b56:	4a29      	ldr	r2, [pc, #164]	@ (8001bfc <HAL_ADC_Start_DMA+0x19c>)
 8001b58:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b5e:	4a28      	ldr	r2, [pc, #160]	@ (8001c00 <HAL_ADC_Start_DMA+0x1a0>)
 8001b60:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b66:	4a27      	ldr	r2, [pc, #156]	@ (8001c04 <HAL_ADC_Start_DMA+0x1a4>)
 8001b68:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	221c      	movs	r2, #28
 8001b70:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f042 0210 	orr.w	r2, r2, #16
 8001b88:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f042 0201 	orr.w	r2, r2, #1
 8001b98:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	3340      	adds	r3, #64	@ 0x40
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f001 fb37 	bl	800321c <HAL_DMA_Start_IT>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fd5b 	bl	8001672 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001bbc:	e00d      	b.n	8001bda <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8001bc6:	e008      	b.n	8001bda <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001bd4:	e001      	b.n	8001bda <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	50000100 	.word	0x50000100
 8001be8:	50000300 	.word	0x50000300
 8001bec:	50000700 	.word	0x50000700
 8001bf0:	50000600 	.word	0x50000600
 8001bf4:	50000500 	.word	0x50000500
 8001bf8:	50000400 	.word	0x50000400
 8001bfc:	08002ac5 	.word	0x08002ac5
 8001c00:	08002b9d 	.word	0x08002b9d
 8001c04:	08002bb9 	.word	0x08002bb9

08001c08 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	@ 0x28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001c10:	2300      	movs	r3, #0
 8001c12:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c2c:	d004      	beq.n	8001c38 <HAL_ADC_IRQHandler+0x30>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a8e      	ldr	r2, [pc, #568]	@ (8001e6c <HAL_ADC_IRQHandler+0x264>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d101      	bne.n	8001c3c <HAL_ADC_IRQHandler+0x34>
 8001c38:	4b8d      	ldr	r3, [pc, #564]	@ (8001e70 <HAL_ADC_IRQHandler+0x268>)
 8001c3a:	e000      	b.n	8001c3e <HAL_ADC_IRQHandler+0x36>
 8001c3c:	4b8d      	ldr	r3, [pc, #564]	@ (8001e74 <HAL_ADC_IRQHandler+0x26c>)
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fc86 	bl	8001550 <LL_ADC_GetMultimode>
 8001c44:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d017      	beq.n	8001c80 <HAL_ADC_IRQHandler+0x78>
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d012      	beq.n	8001c80 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d105      	bne.n	8001c72 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c6a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f001 f808 	bl	8002c88 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f003 0304 	and.w	r3, r3, #4
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d004      	beq.n	8001c94 <HAL_ADC_IRQHandler+0x8c>
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10b      	bne.n	8001cac <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 8094 	beq.w	8001dc8 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 808e 	beq.w	8001dc8 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb0:	f003 0310 	and.w	r3, r3, #16
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d105      	bne.n	8001cc4 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cbc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fb9f 	bl	800140c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d072      	beq.n	8001dba <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a64      	ldr	r2, [pc, #400]	@ (8001e6c <HAL_ADC_IRQHandler+0x264>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d009      	beq.n	8001cf2 <HAL_ADC_IRQHandler+0xea>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a65      	ldr	r2, [pc, #404]	@ (8001e78 <HAL_ADC_IRQHandler+0x270>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d002      	beq.n	8001cee <HAL_ADC_IRQHandler+0xe6>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	e003      	b.n	8001cf6 <HAL_ADC_IRQHandler+0xee>
 8001cee:	4b63      	ldr	r3, [pc, #396]	@ (8001e7c <HAL_ADC_IRQHandler+0x274>)
 8001cf0:	e001      	b.n	8001cf6 <HAL_ADC_IRQHandler+0xee>
 8001cf2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d008      	beq.n	8001d10 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	2b05      	cmp	r3, #5
 8001d08:	d002      	beq.n	8001d10 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2b09      	cmp	r3, #9
 8001d0e:	d104      	bne.n	8001d1a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	623b      	str	r3, [r7, #32]
 8001d18:	e014      	b.n	8001d44 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a53      	ldr	r2, [pc, #332]	@ (8001e6c <HAL_ADC_IRQHandler+0x264>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d009      	beq.n	8001d38 <HAL_ADC_IRQHandler+0x130>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a53      	ldr	r2, [pc, #332]	@ (8001e78 <HAL_ADC_IRQHandler+0x270>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d002      	beq.n	8001d34 <HAL_ADC_IRQHandler+0x12c>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	e003      	b.n	8001d3c <HAL_ADC_IRQHandler+0x134>
 8001d34:	4b51      	ldr	r3, [pc, #324]	@ (8001e7c <HAL_ADC_IRQHandler+0x274>)
 8001d36:	e001      	b.n	8001d3c <HAL_ADC_IRQHandler+0x134>
 8001d38:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001d3c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d135      	bne.n	8001dba <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d12e      	bne.n	8001dba <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fc9a 	bl	800169a <LL_ADC_REG_IsConversionOngoing>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d11a      	bne.n	8001da2 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 020c 	bic.w	r2, r2, #12
 8001d7a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d112      	bne.n	8001dba <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d98:	f043 0201 	orr.w	r2, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001da0:	e00b      	b.n	8001dba <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da6:	f043 0210 	orr.w	r2, r3, #16
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001db2:	f043 0201 	orr.w	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f984 	bl	80020c8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	220c      	movs	r2, #12
 8001dc6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f003 0320 	and.w	r3, r3, #32
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d004      	beq.n	8001ddc <HAL_ADC_IRQHandler+0x1d4>
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10b      	bne.n	8001df4 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 80b3 	beq.w	8001f4e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 80ad 	beq.w	8001f4e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d105      	bne.n	8001e0c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e04:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fb3a 	bl	800148a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001e16:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff faf5 	bl	800140c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e22:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a10      	ldr	r2, [pc, #64]	@ (8001e6c <HAL_ADC_IRQHandler+0x264>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d009      	beq.n	8001e42 <HAL_ADC_IRQHandler+0x23a>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a11      	ldr	r2, [pc, #68]	@ (8001e78 <HAL_ADC_IRQHandler+0x270>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d002      	beq.n	8001e3e <HAL_ADC_IRQHandler+0x236>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	e003      	b.n	8001e46 <HAL_ADC_IRQHandler+0x23e>
 8001e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e7c <HAL_ADC_IRQHandler+0x274>)
 8001e40:	e001      	b.n	8001e46 <HAL_ADC_IRQHandler+0x23e>
 8001e42:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6812      	ldr	r2, [r2, #0]
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d008      	beq.n	8001e60 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	2b06      	cmp	r3, #6
 8001e58:	d002      	beq.n	8001e60 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2b07      	cmp	r3, #7
 8001e5e:	d10f      	bne.n	8001e80 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	623b      	str	r3, [r7, #32]
 8001e68:	e01f      	b.n	8001eaa <HAL_ADC_IRQHandler+0x2a2>
 8001e6a:	bf00      	nop
 8001e6c:	50000100 	.word	0x50000100
 8001e70:	50000300 	.word	0x50000300
 8001e74:	50000700 	.word	0x50000700
 8001e78:	50000500 	.word	0x50000500
 8001e7c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a8b      	ldr	r2, [pc, #556]	@ (80020b4 <HAL_ADC_IRQHandler+0x4ac>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d009      	beq.n	8001e9e <HAL_ADC_IRQHandler+0x296>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a8a      	ldr	r2, [pc, #552]	@ (80020b8 <HAL_ADC_IRQHandler+0x4b0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d002      	beq.n	8001e9a <HAL_ADC_IRQHandler+0x292>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	e003      	b.n	8001ea2 <HAL_ADC_IRQHandler+0x29a>
 8001e9a:	4b88      	ldr	r3, [pc, #544]	@ (80020bc <HAL_ADC_IRQHandler+0x4b4>)
 8001e9c:	e001      	b.n	8001ea2 <HAL_ADC_IRQHandler+0x29a>
 8001e9e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001ea2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d047      	beq.n	8001f40 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d007      	beq.n	8001eca <HAL_ADC_IRQHandler+0x2c2>
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d03f      	beq.n	8001f40 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d13a      	bne.n	8001f40 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ed4:	2b40      	cmp	r3, #64	@ 0x40
 8001ed6:	d133      	bne.n	8001f40 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d12e      	bne.n	8001f40 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fbea 	bl	80016c0 <LL_ADC_INJ_IsConversionOngoing>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d11a      	bne.n	8001f28 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001f00:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f06:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d112      	bne.n	8001f40 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f1e:	f043 0201 	orr.w	r2, r3, #1
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f26:	e00b      	b.n	8001f40 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f2c:	f043 0210 	orr.w	r2, r3, #16
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f38:	f043 0201 	orr.w	r2, r3, #1
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 fe79 	bl	8002c38 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2260      	movs	r2, #96	@ 0x60
 8001f4c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d011      	beq.n	8001f7c <HAL_ADC_IRQHandler+0x374>
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00c      	beq.n	8001f7c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f66:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f8be 	bl	80020f0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2280      	movs	r2, #128	@ 0x80
 8001f7a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d012      	beq.n	8001fac <HAL_ADC_IRQHandler+0x3a4>
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00d      	beq.n	8001fac <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f94:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 fe5f 	bl	8002c60 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001faa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d012      	beq.n	8001fdc <HAL_ADC_IRQHandler+0x3d4>
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00d      	beq.n	8001fdc <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 fe51 	bl	8002c74 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fda:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d043      	beq.n	800206e <HAL_ADC_IRQHandler+0x466>
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	f003 0310 	and.w	r3, r3, #16
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d03e      	beq.n	800206e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d102      	bne.n	8001ffe <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ffc:	e021      	b.n	8002042 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d015      	beq.n	8002030 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800200c:	d004      	beq.n	8002018 <HAL_ADC_IRQHandler+0x410>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a28      	ldr	r2, [pc, #160]	@ (80020b4 <HAL_ADC_IRQHandler+0x4ac>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d101      	bne.n	800201c <HAL_ADC_IRQHandler+0x414>
 8002018:	4b29      	ldr	r3, [pc, #164]	@ (80020c0 <HAL_ADC_IRQHandler+0x4b8>)
 800201a:	e000      	b.n	800201e <HAL_ADC_IRQHandler+0x416>
 800201c:	4b29      	ldr	r3, [pc, #164]	@ (80020c4 <HAL_ADC_IRQHandler+0x4bc>)
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff faa4 	bl	800156c <LL_ADC_GetMultiDMATransfer>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00b      	beq.n	8002042 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800202a:	2301      	movs	r3, #1
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
 800202e:	e008      	b.n	8002042 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800203e:	2301      	movs	r3, #1
 8002040:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002044:	2b01      	cmp	r3, #1
 8002046:	d10e      	bne.n	8002066 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002058:	f043 0202 	orr.w	r2, r3, #2
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f84f 	bl	8002104 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2210      	movs	r2, #16
 800206c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002074:	2b00      	cmp	r3, #0
 8002076:	d018      	beq.n	80020aa <HAL_ADC_IRQHandler+0x4a2>
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800207e:	2b00      	cmp	r3, #0
 8002080:	d013      	beq.n	80020aa <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002086:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002092:	f043 0208 	orr.w	r2, r3, #8
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020a2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 fdd1 	bl	8002c4c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80020aa:	bf00      	nop
 80020ac:	3728      	adds	r7, #40	@ 0x28
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	50000100 	.word	0x50000100
 80020b8:	50000500 	.word	0x50000500
 80020bc:	50000400 	.word	0x50000400
 80020c0:	50000300 	.word	0x50000300
 80020c4:	50000700 	.word	0x50000700

080020c8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b0b6      	sub	sp, #216	@ 0xd8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002132:	2b01      	cmp	r3, #1
 8002134:	d102      	bne.n	800213c <HAL_ADC_ConfigChannel+0x24>
 8002136:	2302      	movs	r3, #2
 8002138:	f000 bc13 	b.w	8002962 <HAL_ADC_ConfigChannel+0x84a>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff faa6 	bl	800169a <LL_ADC_REG_IsConversionOngoing>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	f040 83f3 	bne.w	800293c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	6859      	ldr	r1, [r3, #4]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	f7ff f965 	bl	8001432 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fa94 	bl	800169a <LL_ADC_REG_IsConversionOngoing>
 8002172:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff faa0 	bl	80016c0 <LL_ADC_INJ_IsConversionOngoing>
 8002180:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002184:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002188:	2b00      	cmp	r3, #0
 800218a:	f040 81d9 	bne.w	8002540 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800218e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002192:	2b00      	cmp	r3, #0
 8002194:	f040 81d4 	bne.w	8002540 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80021a0:	d10f      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2200      	movs	r2, #0
 80021ac:	4619      	mov	r1, r3
 80021ae:	f7ff f97f 	bl	80014b0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff f913 	bl	80013e6 <LL_ADC_SetSamplingTimeCommonConfig>
 80021c0:	e00e      	b.n	80021e0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	6819      	ldr	r1, [r3, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	461a      	mov	r2, r3
 80021d0:	f7ff f96e 	bl	80014b0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2100      	movs	r1, #0
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff f903 	bl	80013e6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	695a      	ldr	r2, [r3, #20]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	08db      	lsrs	r3, r3, #3
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d022      	beq.n	8002248 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	6919      	ldr	r1, [r3, #16]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002212:	f7ff f85d 	bl	80012d0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6818      	ldr	r0, [r3, #0]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	6919      	ldr	r1, [r3, #16]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	461a      	mov	r2, r3
 8002224:	f7ff f8a9 	bl	800137a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002234:	2b01      	cmp	r3, #1
 8002236:	d102      	bne.n	800223e <HAL_ADC_ConfigChannel+0x126>
 8002238:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800223c:	e000      	b.n	8002240 <HAL_ADC_ConfigChannel+0x128>
 800223e:	2300      	movs	r3, #0
 8002240:	461a      	mov	r2, r3
 8002242:	f7ff f8b5 	bl	80013b0 <LL_ADC_SetOffsetSaturation>
 8002246:	e17b      	b.n	8002540 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2100      	movs	r1, #0
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff f862 	bl	8001318 <LL_ADC_GetOffsetChannel>
 8002254:	4603      	mov	r3, r0
 8002256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10a      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x15c>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2100      	movs	r1, #0
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff f857 	bl	8001318 <LL_ADC_GetOffsetChannel>
 800226a:	4603      	mov	r3, r0
 800226c:	0e9b      	lsrs	r3, r3, #26
 800226e:	f003 021f 	and.w	r2, r3, #31
 8002272:	e01e      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x19a>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff f84c 	bl	8001318 <LL_ADC_GetOffsetChannel>
 8002280:	4603      	mov	r3, r0
 8002282:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002292:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002296:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800229a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80022a2:	2320      	movs	r3, #32
 80022a4:	e004      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80022a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022aa:	fab3 f383 	clz	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d105      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x1b2>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	0e9b      	lsrs	r3, r3, #26
 80022c4:	f003 031f 	and.w	r3, r3, #31
 80022c8:	e018      	b.n	80022fc <HAL_ADC_ConfigChannel+0x1e4>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80022de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80022e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80022ee:	2320      	movs	r3, #32
 80022f0:	e004      	b.n	80022fc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80022f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d106      	bne.n	800230e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2200      	movs	r2, #0
 8002306:	2100      	movs	r1, #0
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff f81b 	bl	8001344 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2101      	movs	r1, #1
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe ffff 	bl	8001318 <LL_ADC_GetOffsetChannel>
 800231a:	4603      	mov	r3, r0
 800231c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10a      	bne.n	800233a <HAL_ADC_ConfigChannel+0x222>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2101      	movs	r1, #1
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe fff4 	bl	8001318 <LL_ADC_GetOffsetChannel>
 8002330:	4603      	mov	r3, r0
 8002332:	0e9b      	lsrs	r3, r3, #26
 8002334:	f003 021f 	and.w	r2, r3, #31
 8002338:	e01e      	b.n	8002378 <HAL_ADC_ConfigChannel+0x260>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2101      	movs	r1, #1
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe ffe9 	bl	8001318 <LL_ADC_GetOffsetChannel>
 8002346:	4603      	mov	r3, r0
 8002348:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002350:	fa93 f3a3 	rbit	r3, r3
 8002354:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002358:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800235c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002360:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002368:	2320      	movs	r3, #32
 800236a:	e004      	b.n	8002376 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800236c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002370:	fab3 f383 	clz	r3, r3
 8002374:	b2db      	uxtb	r3, r3
 8002376:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002380:	2b00      	cmp	r3, #0
 8002382:	d105      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x278>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	0e9b      	lsrs	r3, r3, #26
 800238a:	f003 031f 	and.w	r3, r3, #31
 800238e:	e018      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x2aa>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800239c:	fa93 f3a3 	rbit	r3, r3
 80023a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80023a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80023a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80023ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80023b4:	2320      	movs	r3, #32
 80023b6:	e004      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80023b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023bc:	fab3 f383 	clz	r3, r3
 80023c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d106      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2200      	movs	r2, #0
 80023cc:	2101      	movs	r1, #1
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe ffb8 	bl	8001344 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2102      	movs	r1, #2
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe ff9c 	bl	8001318 <LL_ADC_GetOffsetChannel>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10a      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x2e8>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2102      	movs	r1, #2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe ff91 	bl	8001318 <LL_ADC_GetOffsetChannel>
 80023f6:	4603      	mov	r3, r0
 80023f8:	0e9b      	lsrs	r3, r3, #26
 80023fa:	f003 021f 	and.w	r2, r3, #31
 80023fe:	e01e      	b.n	800243e <HAL_ADC_ConfigChannel+0x326>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2102      	movs	r1, #2
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe ff86 	bl	8001318 <LL_ADC_GetOffsetChannel>
 800240c:	4603      	mov	r3, r0
 800240e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002416:	fa93 f3a3 	rbit	r3, r3
 800241a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800241e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002422:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002426:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800242e:	2320      	movs	r3, #32
 8002430:	e004      	b.n	800243c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002432:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002446:	2b00      	cmp	r3, #0
 8002448:	d105      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x33e>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	0e9b      	lsrs	r3, r3, #26
 8002450:	f003 031f 	and.w	r3, r3, #31
 8002454:	e016      	b.n	8002484 <HAL_ADC_ConfigChannel+0x36c>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002462:	fa93 f3a3 	rbit	r3, r3
 8002466:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002468:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800246a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800246e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002476:	2320      	movs	r3, #32
 8002478:	e004      	b.n	8002484 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800247a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800247e:	fab3 f383 	clz	r3, r3
 8002482:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002484:	429a      	cmp	r2, r3
 8002486:	d106      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2200      	movs	r2, #0
 800248e:	2102      	movs	r1, #2
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe ff57 	bl	8001344 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2103      	movs	r1, #3
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe ff3b 	bl	8001318 <LL_ADC_GetOffsetChannel>
 80024a2:	4603      	mov	r3, r0
 80024a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10a      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x3aa>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2103      	movs	r1, #3
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe ff30 	bl	8001318 <LL_ADC_GetOffsetChannel>
 80024b8:	4603      	mov	r3, r0
 80024ba:	0e9b      	lsrs	r3, r3, #26
 80024bc:	f003 021f 	and.w	r2, r3, #31
 80024c0:	e017      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x3da>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2103      	movs	r1, #3
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe ff25 	bl	8001318 <LL_ADC_GetOffsetChannel>
 80024ce:	4603      	mov	r3, r0
 80024d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80024da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024dc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80024de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80024e4:	2320      	movs	r3, #32
 80024e6:	e003      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80024e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024ea:	fab3 f383 	clz	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d105      	bne.n	800250a <HAL_ADC_ConfigChannel+0x3f2>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	0e9b      	lsrs	r3, r3, #26
 8002504:	f003 031f 	and.w	r3, r3, #31
 8002508:	e011      	b.n	800252e <HAL_ADC_ConfigChannel+0x416>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002510:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002518:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800251a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800251c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002522:	2320      	movs	r3, #32
 8002524:	e003      	b.n	800252e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002526:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002528:	fab3 f383 	clz	r3, r3
 800252c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800252e:	429a      	cmp	r2, r3
 8002530:	d106      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2200      	movs	r2, #0
 8002538:	2103      	movs	r1, #3
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe ff02 	bl	8001344 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff f881 	bl	800164c <LL_ADC_IsEnabled>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	f040 813d 	bne.w	80027cc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	6819      	ldr	r1, [r3, #0]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	461a      	mov	r2, r3
 8002560:	f7fe ffd2 	bl	8001508 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4aa2      	ldr	r2, [pc, #648]	@ (80027f4 <HAL_ADC_ConfigChannel+0x6dc>)
 800256a:	4293      	cmp	r3, r2
 800256c:	f040 812e 	bne.w	80027cc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10b      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x480>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	0e9b      	lsrs	r3, r3, #26
 8002586:	3301      	adds	r3, #1
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	2b09      	cmp	r3, #9
 800258e:	bf94      	ite	ls
 8002590:	2301      	movls	r3, #1
 8002592:	2300      	movhi	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	e019      	b.n	80025cc <HAL_ADC_ConfigChannel+0x4b4>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025a0:	fa93 f3a3 	rbit	r3, r3
 80025a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80025a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025a8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80025aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80025b0:	2320      	movs	r3, #32
 80025b2:	e003      	b.n	80025bc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80025b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025b6:	fab3 f383 	clz	r3, r3
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	3301      	adds	r3, #1
 80025be:	f003 031f 	and.w	r3, r3, #31
 80025c2:	2b09      	cmp	r3, #9
 80025c4:	bf94      	ite	ls
 80025c6:	2301      	movls	r3, #1
 80025c8:	2300      	movhi	r3, #0
 80025ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d079      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d107      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x4d4>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	0e9b      	lsrs	r3, r3, #26
 80025e2:	3301      	adds	r3, #1
 80025e4:	069b      	lsls	r3, r3, #26
 80025e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025ea:	e015      	b.n	8002618 <HAL_ADC_ConfigChannel+0x500>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025f4:	fa93 f3a3 	rbit	r3, r3
 80025f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80025fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025fc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80025fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002604:	2320      	movs	r3, #32
 8002606:	e003      	b.n	8002610 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800260a:	fab3 f383 	clz	r3, r3
 800260e:	b2db      	uxtb	r3, r3
 8002610:	3301      	adds	r3, #1
 8002612:	069b      	lsls	r3, r3, #26
 8002614:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002620:	2b00      	cmp	r3, #0
 8002622:	d109      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x520>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	0e9b      	lsrs	r3, r3, #26
 800262a:	3301      	adds	r3, #1
 800262c:	f003 031f 	and.w	r3, r3, #31
 8002630:	2101      	movs	r1, #1
 8002632:	fa01 f303 	lsl.w	r3, r1, r3
 8002636:	e017      	b.n	8002668 <HAL_ADC_ConfigChannel+0x550>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002646:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002648:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800264a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002650:	2320      	movs	r3, #32
 8002652:	e003      	b.n	800265c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002654:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	3301      	adds	r3, #1
 800265e:	f003 031f 	and.w	r3, r3, #31
 8002662:	2101      	movs	r1, #1
 8002664:	fa01 f303 	lsl.w	r3, r1, r3
 8002668:	ea42 0103 	orr.w	r1, r2, r3
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10a      	bne.n	800268e <HAL_ADC_ConfigChannel+0x576>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	0e9b      	lsrs	r3, r3, #26
 800267e:	3301      	adds	r3, #1
 8002680:	f003 021f 	and.w	r2, r3, #31
 8002684:	4613      	mov	r3, r2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4413      	add	r3, r2
 800268a:	051b      	lsls	r3, r3, #20
 800268c:	e018      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x5a8>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002696:	fa93 f3a3 	rbit	r3, r3
 800269a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800269c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800269e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80026a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80026a6:	2320      	movs	r3, #32
 80026a8:	e003      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80026aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026ac:	fab3 f383 	clz	r3, r3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	3301      	adds	r3, #1
 80026b4:	f003 021f 	and.w	r2, r3, #31
 80026b8:	4613      	mov	r3, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4413      	add	r3, r2
 80026be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026c0:	430b      	orrs	r3, r1
 80026c2:	e07e      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d107      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x5c8>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	0e9b      	lsrs	r3, r3, #26
 80026d6:	3301      	adds	r3, #1
 80026d8:	069b      	lsls	r3, r3, #26
 80026da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026de:	e015      	b.n	800270c <HAL_ADC_ConfigChannel+0x5f4>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80026ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026f0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80026f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80026f8:	2320      	movs	r3, #32
 80026fa:	e003      	b.n	8002704 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80026fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026fe:	fab3 f383 	clz	r3, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	3301      	adds	r3, #1
 8002706:	069b      	lsls	r3, r3, #26
 8002708:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002714:	2b00      	cmp	r3, #0
 8002716:	d109      	bne.n	800272c <HAL_ADC_ConfigChannel+0x614>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	0e9b      	lsrs	r3, r3, #26
 800271e:	3301      	adds	r3, #1
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	2101      	movs	r1, #1
 8002726:	fa01 f303 	lsl.w	r3, r1, r3
 800272a:	e017      	b.n	800275c <HAL_ADC_ConfigChannel+0x644>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	fa93 f3a3 	rbit	r3, r3
 8002738:	61fb      	str	r3, [r7, #28]
  return result;
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002744:	2320      	movs	r3, #32
 8002746:	e003      	b.n	8002750 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274a:	fab3 f383 	clz	r3, r3
 800274e:	b2db      	uxtb	r3, r3
 8002750:	3301      	adds	r3, #1
 8002752:	f003 031f 	and.w	r3, r3, #31
 8002756:	2101      	movs	r1, #1
 8002758:	fa01 f303 	lsl.w	r3, r1, r3
 800275c:	ea42 0103 	orr.w	r1, r2, r3
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10d      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x670>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	0e9b      	lsrs	r3, r3, #26
 8002772:	3301      	adds	r3, #1
 8002774:	f003 021f 	and.w	r2, r3, #31
 8002778:	4613      	mov	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	3b1e      	subs	r3, #30
 8002780:	051b      	lsls	r3, r3, #20
 8002782:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002786:	e01b      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x6a8>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	613b      	str	r3, [r7, #16]
  return result;
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80027a0:	2320      	movs	r3, #32
 80027a2:	e003      	b.n	80027ac <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	fab3 f383 	clz	r3, r3
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	3301      	adds	r3, #1
 80027ae:	f003 021f 	and.w	r2, r3, #31
 80027b2:	4613      	mov	r3, r2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	4413      	add	r3, r2
 80027b8:	3b1e      	subs	r3, #30
 80027ba:	051b      	lsls	r3, r3, #20
 80027bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027c0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027c6:	4619      	mov	r1, r3
 80027c8:	f7fe fe72 	bl	80014b0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <HAL_ADC_ConfigChannel+0x6e0>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80be 	beq.w	8002956 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027e2:	d004      	beq.n	80027ee <HAL_ADC_ConfigChannel+0x6d6>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a04      	ldr	r2, [pc, #16]	@ (80027fc <HAL_ADC_ConfigChannel+0x6e4>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d10a      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x6ec>
 80027ee:	4b04      	ldr	r3, [pc, #16]	@ (8002800 <HAL_ADC_ConfigChannel+0x6e8>)
 80027f0:	e009      	b.n	8002806 <HAL_ADC_ConfigChannel+0x6ee>
 80027f2:	bf00      	nop
 80027f4:	407f0000 	.word	0x407f0000
 80027f8:	80080000 	.word	0x80080000
 80027fc:	50000100 	.word	0x50000100
 8002800:	50000300 	.word	0x50000300
 8002804:	4b59      	ldr	r3, [pc, #356]	@ (800296c <HAL_ADC_ConfigChannel+0x854>)
 8002806:	4618      	mov	r0, r3
 8002808:	f7fe fd54 	bl	80012b4 <LL_ADC_GetCommonPathInternalCh>
 800280c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a56      	ldr	r2, [pc, #344]	@ (8002970 <HAL_ADC_ConfigChannel+0x858>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d004      	beq.n	8002824 <HAL_ADC_ConfigChannel+0x70c>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a55      	ldr	r2, [pc, #340]	@ (8002974 <HAL_ADC_ConfigChannel+0x85c>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d13a      	bne.n	800289a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002824:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002828:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d134      	bne.n	800289a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002838:	d005      	beq.n	8002846 <HAL_ADC_ConfigChannel+0x72e>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a4e      	ldr	r2, [pc, #312]	@ (8002978 <HAL_ADC_ConfigChannel+0x860>)
 8002840:	4293      	cmp	r3, r2
 8002842:	f040 8085 	bne.w	8002950 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800284e:	d004      	beq.n	800285a <HAL_ADC_ConfigChannel+0x742>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a49      	ldr	r2, [pc, #292]	@ (800297c <HAL_ADC_ConfigChannel+0x864>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d101      	bne.n	800285e <HAL_ADC_ConfigChannel+0x746>
 800285a:	4a49      	ldr	r2, [pc, #292]	@ (8002980 <HAL_ADC_ConfigChannel+0x868>)
 800285c:	e000      	b.n	8002860 <HAL_ADC_ConfigChannel+0x748>
 800285e:	4a43      	ldr	r2, [pc, #268]	@ (800296c <HAL_ADC_ConfigChannel+0x854>)
 8002860:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002864:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002868:	4619      	mov	r1, r3
 800286a:	4610      	mov	r0, r2
 800286c:	f7fe fd0f 	bl	800128e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002870:	4b44      	ldr	r3, [pc, #272]	@ (8002984 <HAL_ADC_ConfigChannel+0x86c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	099b      	lsrs	r3, r3, #6
 8002876:	4a44      	ldr	r2, [pc, #272]	@ (8002988 <HAL_ADC_ConfigChannel+0x870>)
 8002878:	fba2 2303 	umull	r2, r3, r2, r3
 800287c:	099b      	lsrs	r3, r3, #6
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	4613      	mov	r3, r2
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	4413      	add	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800288a:	e002      	b.n	8002892 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	3b01      	subs	r3, #1
 8002890:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f9      	bne.n	800288c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002898:	e05a      	b.n	8002950 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a3b      	ldr	r2, [pc, #236]	@ (800298c <HAL_ADC_ConfigChannel+0x874>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d125      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d11f      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a31      	ldr	r2, [pc, #196]	@ (800297c <HAL_ADC_ConfigChannel+0x864>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d104      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x7ac>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a34      	ldr	r2, [pc, #208]	@ (8002990 <HAL_ADC_ConfigChannel+0x878>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d047      	beq.n	8002954 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028cc:	d004      	beq.n	80028d8 <HAL_ADC_ConfigChannel+0x7c0>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a2a      	ldr	r2, [pc, #168]	@ (800297c <HAL_ADC_ConfigChannel+0x864>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d101      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x7c4>
 80028d8:	4a29      	ldr	r2, [pc, #164]	@ (8002980 <HAL_ADC_ConfigChannel+0x868>)
 80028da:	e000      	b.n	80028de <HAL_ADC_ConfigChannel+0x7c6>
 80028dc:	4a23      	ldr	r2, [pc, #140]	@ (800296c <HAL_ADC_ConfigChannel+0x854>)
 80028de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028e6:	4619      	mov	r1, r3
 80028e8:	4610      	mov	r0, r2
 80028ea:	f7fe fcd0 	bl	800128e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028ee:	e031      	b.n	8002954 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a27      	ldr	r2, [pc, #156]	@ (8002994 <HAL_ADC_ConfigChannel+0x87c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d12d      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d127      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a1c      	ldr	r2, [pc, #112]	@ (800297c <HAL_ADC_ConfigChannel+0x864>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d022      	beq.n	8002956 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002918:	d004      	beq.n	8002924 <HAL_ADC_ConfigChannel+0x80c>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a17      	ldr	r2, [pc, #92]	@ (800297c <HAL_ADC_ConfigChannel+0x864>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d101      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x810>
 8002924:	4a16      	ldr	r2, [pc, #88]	@ (8002980 <HAL_ADC_ConfigChannel+0x868>)
 8002926:	e000      	b.n	800292a <HAL_ADC_ConfigChannel+0x812>
 8002928:	4a10      	ldr	r2, [pc, #64]	@ (800296c <HAL_ADC_ConfigChannel+0x854>)
 800292a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800292e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002932:	4619      	mov	r1, r3
 8002934:	4610      	mov	r0, r2
 8002936:	f7fe fcaa 	bl	800128e <LL_ADC_SetCommonPathInternalCh>
 800293a:	e00c      	b.n	8002956 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800294e:	e002      	b.n	8002956 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002950:	bf00      	nop
 8002952:	e000      	b.n	8002956 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002954:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800295e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002962:	4618      	mov	r0, r3
 8002964:	37d8      	adds	r7, #216	@ 0xd8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	50000700 	.word	0x50000700
 8002970:	c3210000 	.word	0xc3210000
 8002974:	90c00010 	.word	0x90c00010
 8002978:	50000600 	.word	0x50000600
 800297c:	50000100 	.word	0x50000100
 8002980:	50000300 	.word	0x50000300
 8002984:	20000000 	.word	0x20000000
 8002988:	053e2d63 	.word	0x053e2d63
 800298c:	c7520000 	.word	0xc7520000
 8002990:	50000500 	.word	0x50000500
 8002994:	cb840000 	.word	0xcb840000

08002998 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fe fe4f 	bl	800164c <LL_ADC_IsEnabled>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d176      	bne.n	8002aa2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	4b3c      	ldr	r3, [pc, #240]	@ (8002aac <ADC_Enable+0x114>)
 80029bc:	4013      	ands	r3, r2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00d      	beq.n	80029de <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c6:	f043 0210 	orr.w	r2, r3, #16
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d2:	f043 0201 	orr.w	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e062      	b.n	8002aa4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fe fe1e 	bl	8001624 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029f0:	d004      	beq.n	80029fc <ADC_Enable+0x64>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a2e      	ldr	r2, [pc, #184]	@ (8002ab0 <ADC_Enable+0x118>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d101      	bne.n	8002a00 <ADC_Enable+0x68>
 80029fc:	4b2d      	ldr	r3, [pc, #180]	@ (8002ab4 <ADC_Enable+0x11c>)
 80029fe:	e000      	b.n	8002a02 <ADC_Enable+0x6a>
 8002a00:	4b2d      	ldr	r3, [pc, #180]	@ (8002ab8 <ADC_Enable+0x120>)
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fe fc56 	bl	80012b4 <LL_ADC_GetCommonPathInternalCh>
 8002a08:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d013      	beq.n	8002a3a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a12:	4b2a      	ldr	r3, [pc, #168]	@ (8002abc <ADC_Enable+0x124>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	099b      	lsrs	r3, r3, #6
 8002a18:	4a29      	ldr	r2, [pc, #164]	@ (8002ac0 <ADC_Enable+0x128>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	099b      	lsrs	r3, r3, #6
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	4613      	mov	r3, r2
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a2c:	e002      	b.n	8002a34 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	3b01      	subs	r3, #1
 8002a32:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f9      	bne.n	8002a2e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a3a:	f7fe fc09 	bl	8001250 <HAL_GetTick>
 8002a3e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a40:	e028      	b.n	8002a94 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe fe00 	bl	800164c <LL_ADC_IsEnabled>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d104      	bne.n	8002a5c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fe fde4 	bl	8001624 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a5c:	f7fe fbf8 	bl	8001250 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d914      	bls.n	8002a94 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d00d      	beq.n	8002a94 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a7c:	f043 0210 	orr.w	r2, r3, #16
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a88:	f043 0201 	orr.w	r2, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e007      	b.n	8002aa4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d1cf      	bne.n	8002a42 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	8000003f 	.word	0x8000003f
 8002ab0:	50000100 	.word	0x50000100
 8002ab4:	50000300 	.word	0x50000300
 8002ab8:	50000700 	.word	0x50000700
 8002abc:	20000000 	.word	0x20000000
 8002ac0:	053e2d63 	.word	0x053e2d63

08002ac4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d14b      	bne.n	8002b76 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d021      	beq.n	8002b3c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fe fc85 	bl	800140c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d032      	beq.n	8002b6e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d12b      	bne.n	8002b6e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b1a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d11f      	bne.n	8002b6e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b32:	f043 0201 	orr.w	r2, r3, #1
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b3a:	e018      	b.n	8002b6e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d111      	bne.n	8002b6e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b4e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d105      	bne.n	8002b6e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b66:	f043 0201 	orr.w	r2, r3, #1
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f7ff faaa 	bl	80020c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b74:	e00e      	b.n	8002b94 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f7ff fabe 	bl	8002104 <HAL_ADC_ErrorCallback>
}
 8002b88:	e004      	b.n	8002b94 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	4798      	blx	r3
}
 8002b94:	bf00      	nop
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f7ff fa96 	bl	80020dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bb0:	bf00      	nop
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bd6:	f043 0204 	orr.w	r2, r3, #4
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f7ff fa90 	bl	8002104 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002be4:	bf00      	nop
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <LL_ADC_IsEnabled>:
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <LL_ADC_IsEnabled+0x18>
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <LL_ADC_IsEnabled+0x1a>
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <LL_ADC_REG_IsConversionOngoing>:
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 0304 	and.w	r3, r3, #4
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d101      	bne.n	8002c2a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002c9c:	b590      	push	{r4, r7, lr}
 8002c9e:	b0a1      	sub	sp, #132	@ 0x84
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e0e7      	b.n	8002e8a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cd2:	d102      	bne.n	8002cda <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002cd4:	4b6f      	ldr	r3, [pc, #444]	@ (8002e94 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002cd6:	60bb      	str	r3, [r7, #8]
 8002cd8:	e009      	b.n	8002cee <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a6e      	ldr	r2, [pc, #440]	@ (8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d102      	bne.n	8002cea <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002ce4:	4b6d      	ldr	r3, [pc, #436]	@ (8002e9c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	e001      	b.n	8002cee <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002cea:	2300      	movs	r3, #0
 8002cec:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10b      	bne.n	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf8:	f043 0220 	orr.w	r2, r3, #32
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e0be      	b.n	8002e8a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff ff7f 	bl	8002c12 <LL_ADC_REG_IsConversionOngoing>
 8002d14:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff ff79 	bl	8002c12 <LL_ADC_REG_IsConversionOngoing>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f040 80a0 	bne.w	8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002d28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f040 809c 	bne.w	8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d38:	d004      	beq.n	8002d44 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a55      	ldr	r2, [pc, #340]	@ (8002e94 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d101      	bne.n	8002d48 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002d44:	4b56      	ldr	r3, [pc, #344]	@ (8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002d46:	e000      	b.n	8002d4a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002d48:	4b56      	ldr	r3, [pc, #344]	@ (8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002d4a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d04b      	beq.n	8002dec <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002d54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	6859      	ldr	r1, [r3, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d66:	035b      	lsls	r3, r3, #13
 8002d68:	430b      	orrs	r3, r1
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d6e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d78:	d004      	beq.n	8002d84 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a45      	ldr	r2, [pc, #276]	@ (8002e94 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d10f      	bne.n	8002da4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002d84:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002d88:	f7ff ff30 	bl	8002bec <LL_ADC_IsEnabled>
 8002d8c:	4604      	mov	r4, r0
 8002d8e:	4841      	ldr	r0, [pc, #260]	@ (8002e94 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d90:	f7ff ff2c 	bl	8002bec <LL_ADC_IsEnabled>
 8002d94:	4603      	mov	r3, r0
 8002d96:	4323      	orrs	r3, r4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	bf0c      	ite	eq
 8002d9c:	2301      	moveq	r3, #1
 8002d9e:	2300      	movne	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	e012      	b.n	8002dca <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002da4:	483c      	ldr	r0, [pc, #240]	@ (8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002da6:	f7ff ff21 	bl	8002bec <LL_ADC_IsEnabled>
 8002daa:	4604      	mov	r4, r0
 8002dac:	483b      	ldr	r0, [pc, #236]	@ (8002e9c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002dae:	f7ff ff1d 	bl	8002bec <LL_ADC_IsEnabled>
 8002db2:	4603      	mov	r3, r0
 8002db4:	431c      	orrs	r4, r3
 8002db6:	483c      	ldr	r0, [pc, #240]	@ (8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002db8:	f7ff ff18 	bl	8002bec <LL_ADC_IsEnabled>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	4323      	orrs	r3, r4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	bf0c      	ite	eq
 8002dc4:	2301      	moveq	r3, #1
 8002dc6:	2300      	movne	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d056      	beq.n	8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002dce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002dd6:	f023 030f 	bic.w	r3, r3, #15
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	6811      	ldr	r1, [r2, #0]
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	6892      	ldr	r2, [r2, #8]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	431a      	orrs	r2, r3
 8002de6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002de8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002dea:	e047      	b.n	8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002dec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002df4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002df6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e00:	d004      	beq.n	8002e0c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a23      	ldr	r2, [pc, #140]	@ (8002e94 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d10f      	bne.n	8002e2c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002e0c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002e10:	f7ff feec 	bl	8002bec <LL_ADC_IsEnabled>
 8002e14:	4604      	mov	r4, r0
 8002e16:	481f      	ldr	r0, [pc, #124]	@ (8002e94 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e18:	f7ff fee8 	bl	8002bec <LL_ADC_IsEnabled>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	4323      	orrs	r3, r4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf0c      	ite	eq
 8002e24:	2301      	moveq	r3, #1
 8002e26:	2300      	movne	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	e012      	b.n	8002e52 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002e2c:	481a      	ldr	r0, [pc, #104]	@ (8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002e2e:	f7ff fedd 	bl	8002bec <LL_ADC_IsEnabled>
 8002e32:	4604      	mov	r4, r0
 8002e34:	4819      	ldr	r0, [pc, #100]	@ (8002e9c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002e36:	f7ff fed9 	bl	8002bec <LL_ADC_IsEnabled>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	431c      	orrs	r4, r3
 8002e3e:	481a      	ldr	r0, [pc, #104]	@ (8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002e40:	f7ff fed4 	bl	8002bec <LL_ADC_IsEnabled>
 8002e44:	4603      	mov	r3, r0
 8002e46:	4323      	orrs	r3, r4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bf0c      	ite	eq
 8002e4c:	2301      	moveq	r3, #1
 8002e4e:	2300      	movne	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d012      	beq.n	8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e5e:	f023 030f 	bic.w	r3, r3, #15
 8002e62:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002e64:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e66:	e009      	b.n	8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6c:	f043 0220 	orr.w	r2, r3, #32
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002e7a:	e000      	b.n	8002e7e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e7c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e86:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3784      	adds	r7, #132	@ 0x84
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd90      	pop	{r4, r7, pc}
 8002e92:	bf00      	nop
 8002e94:	50000100 	.word	0x50000100
 8002e98:	50000400 	.word	0x50000400
 8002e9c:	50000500 	.word	0x50000500
 8002ea0:	50000300 	.word	0x50000300
 8002ea4:	50000700 	.word	0x50000700
 8002ea8:	50000600 	.word	0x50000600

08002eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ec8:	4013      	ands	r3, r2
 8002eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ed4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ede:	4a04      	ldr	r2, [pc, #16]	@ (8002ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	60d3      	str	r3, [r2, #12]
}
 8002ee4:	bf00      	nop
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	e000ed00 	.word	0xe000ed00

08002ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef8:	4b04      	ldr	r3, [pc, #16]	@ (8002f0c <__NVIC_GetPriorityGrouping+0x18>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	0a1b      	lsrs	r3, r3, #8
 8002efe:	f003 0307 	and.w	r3, r3, #7
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	e000ed00 	.word	0xe000ed00

08002f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	db0b      	blt.n	8002f3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	f003 021f 	and.w	r2, r3, #31
 8002f28:	4907      	ldr	r1, [pc, #28]	@ (8002f48 <__NVIC_EnableIRQ+0x38>)
 8002f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	2001      	movs	r0, #1
 8002f32:	fa00 f202 	lsl.w	r2, r0, r2
 8002f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	e000e100 	.word	0xe000e100

08002f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	6039      	str	r1, [r7, #0]
 8002f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	db0a      	blt.n	8002f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	490c      	ldr	r1, [pc, #48]	@ (8002f98 <__NVIC_SetPriority+0x4c>)
 8002f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6a:	0112      	lsls	r2, r2, #4
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	440b      	add	r3, r1
 8002f70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f74:	e00a      	b.n	8002f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	4908      	ldr	r1, [pc, #32]	@ (8002f9c <__NVIC_SetPriority+0x50>)
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	3b04      	subs	r3, #4
 8002f84:	0112      	lsls	r2, r2, #4
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	440b      	add	r3, r1
 8002f8a:	761a      	strb	r2, [r3, #24]
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	e000e100 	.word	0xe000e100
 8002f9c:	e000ed00 	.word	0xe000ed00

08002fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b089      	sub	sp, #36	@ 0x24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f1c3 0307 	rsb	r3, r3, #7
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	bf28      	it	cs
 8002fbe:	2304      	movcs	r3, #4
 8002fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	2b06      	cmp	r3, #6
 8002fc8:	d902      	bls.n	8002fd0 <NVIC_EncodePriority+0x30>
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3b03      	subs	r3, #3
 8002fce:	e000      	b.n	8002fd2 <NVIC_EncodePriority+0x32>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43da      	mvns	r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	401a      	ands	r2, r3
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff2:	43d9      	mvns	r1, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff8:	4313      	orrs	r3, r2
         );
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3724      	adds	r7, #36	@ 0x24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3b01      	subs	r3, #1
 8003014:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003018:	d301      	bcc.n	800301e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800301a:	2301      	movs	r3, #1
 800301c:	e00f      	b.n	800303e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800301e:	4a0a      	ldr	r2, [pc, #40]	@ (8003048 <SysTick_Config+0x40>)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3b01      	subs	r3, #1
 8003024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003026:	210f      	movs	r1, #15
 8003028:	f04f 30ff 	mov.w	r0, #4294967295
 800302c:	f7ff ff8e 	bl	8002f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003030:	4b05      	ldr	r3, [pc, #20]	@ (8003048 <SysTick_Config+0x40>)
 8003032:	2200      	movs	r2, #0
 8003034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003036:	4b04      	ldr	r3, [pc, #16]	@ (8003048 <SysTick_Config+0x40>)
 8003038:	2207      	movs	r2, #7
 800303a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	e000e010 	.word	0xe000e010

0800304c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff ff29 	bl	8002eac <__NVIC_SetPriorityGrouping>
}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b086      	sub	sp, #24
 8003066:	af00      	add	r7, sp, #0
 8003068:	4603      	mov	r3, r0
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
 800306e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003070:	f7ff ff40 	bl	8002ef4 <__NVIC_GetPriorityGrouping>
 8003074:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	6978      	ldr	r0, [r7, #20]
 800307c:	f7ff ff90 	bl	8002fa0 <NVIC_EncodePriority>
 8003080:	4602      	mov	r2, r0
 8003082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ff5f 	bl	8002f4c <__NVIC_SetPriority>
}
 800308e:	bf00      	nop
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	4603      	mov	r3, r0
 800309e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ff33 	bl	8002f10 <__NVIC_EnableIRQ>
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7ff ffa4 	bl	8003008 <SysTick_Config>
 80030c0:	4603      	mov	r3, r0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e08d      	b.n	80031fa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	4b47      	ldr	r3, [pc, #284]	@ (8003204 <HAL_DMA_Init+0x138>)
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d80f      	bhi.n	800310a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	4b45      	ldr	r3, [pc, #276]	@ (8003208 <HAL_DMA_Init+0x13c>)
 80030f2:	4413      	add	r3, r2
 80030f4:	4a45      	ldr	r2, [pc, #276]	@ (800320c <HAL_DMA_Init+0x140>)
 80030f6:	fba2 2303 	umull	r2, r3, r2, r3
 80030fa:	091b      	lsrs	r3, r3, #4
 80030fc:	009a      	lsls	r2, r3, #2
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a42      	ldr	r2, [pc, #264]	@ (8003210 <HAL_DMA_Init+0x144>)
 8003106:	641a      	str	r2, [r3, #64]	@ 0x40
 8003108:	e00e      	b.n	8003128 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	461a      	mov	r2, r3
 8003110:	4b40      	ldr	r3, [pc, #256]	@ (8003214 <HAL_DMA_Init+0x148>)
 8003112:	4413      	add	r3, r2
 8003114:	4a3d      	ldr	r2, [pc, #244]	@ (800320c <HAL_DMA_Init+0x140>)
 8003116:	fba2 2303 	umull	r2, r3, r2, r3
 800311a:	091b      	lsrs	r3, r3, #4
 800311c:	009a      	lsls	r2, r3, #2
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a3c      	ldr	r2, [pc, #240]	@ (8003218 <HAL_DMA_Init+0x14c>)
 8003126:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800313e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003142:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800314c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003158:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003164:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	4313      	orrs	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f9b6 	bl	80034ec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003188:	d102      	bne.n	8003190 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031a4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d010      	beq.n	80031d0 <HAL_DMA_Init+0x104>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d80c      	bhi.n	80031d0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f9d6 	bl	8003568 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	e008      	b.n	80031e2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40020407 	.word	0x40020407
 8003208:	bffdfff8 	.word	0xbffdfff8
 800320c:	cccccccd 	.word	0xcccccccd
 8003210:	40020000 	.word	0x40020000
 8003214:	bffdfbf8 	.word	0xbffdfbf8
 8003218:	40020400 	.word	0x40020400

0800321c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_DMA_Start_IT+0x20>
 8003238:	2302      	movs	r3, #2
 800323a:	e066      	b.n	800330a <HAL_DMA_Start_IT+0xee>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b01      	cmp	r3, #1
 800324e:	d155      	bne.n	80032fc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0201 	bic.w	r2, r2, #1
 800326c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	68b9      	ldr	r1, [r7, #8]
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 f8fb 	bl	8003470 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327e:	2b00      	cmp	r3, #0
 8003280:	d008      	beq.n	8003294 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f042 020e 	orr.w	r2, r2, #14
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	e00f      	b.n	80032b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0204 	bic.w	r2, r2, #4
 80032a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 020a 	orr.w	r2, r2, #10
 80032b2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d007      	beq.n	80032d2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032d0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d007      	beq.n	80032ea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0201 	orr.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	e005      	b.n	8003308 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003304:	2302      	movs	r3, #2
 8003306:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003308:	7dfb      	ldrb	r3, [r7, #23]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332e:	f003 031f 	and.w	r3, r3, #31
 8003332:	2204      	movs	r2, #4
 8003334:	409a      	lsls	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4013      	ands	r3, r2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d026      	beq.n	800338c <HAL_DMA_IRQHandler+0x7a>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d021      	beq.n	800338c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d107      	bne.n	8003366 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0204 	bic.w	r2, r2, #4
 8003364:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336a:	f003 021f 	and.w	r2, r3, #31
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	2104      	movs	r1, #4
 8003374:	fa01 f202 	lsl.w	r2, r1, r2
 8003378:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337e:	2b00      	cmp	r3, #0
 8003380:	d071      	beq.n	8003466 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800338a:	e06c      	b.n	8003466 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003390:	f003 031f 	and.w	r3, r3, #31
 8003394:	2202      	movs	r2, #2
 8003396:	409a      	lsls	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4013      	ands	r3, r2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d02e      	beq.n	80033fe <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d029      	beq.n	80033fe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0320 	and.w	r3, r3, #32
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10b      	bne.n	80033d0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 020a 	bic.w	r2, r2, #10
 80033c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d4:	f003 021f 	and.w	r2, r3, #31
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033dc:	2102      	movs	r1, #2
 80033de:	fa01 f202 	lsl.w	r2, r1, r2
 80033e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d038      	beq.n	8003466 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80033fc:	e033      	b.n	8003466 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003402:	f003 031f 	and.w	r3, r3, #31
 8003406:	2208      	movs	r2, #8
 8003408:	409a      	lsls	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4013      	ands	r3, r2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d02a      	beq.n	8003468 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d025      	beq.n	8003468 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 020e 	bic.w	r2, r2, #14
 800342a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003430:	f003 021f 	and.w	r2, r3, #31
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003438:	2101      	movs	r1, #1
 800343a:	fa01 f202 	lsl.w	r2, r1, r2
 800343e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800345a:	2b00      	cmp	r3, #0
 800345c:	d004      	beq.n	8003468 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003466:	bf00      	nop
 8003468:	bf00      	nop
}
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003486:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800348c:	2b00      	cmp	r3, #0
 800348e:	d004      	beq.n	800349a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003498:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349e:	f003 021f 	and.w	r2, r3, #31
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a6:	2101      	movs	r1, #1
 80034a8:	fa01 f202 	lsl.w	r2, r1, r2
 80034ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b10      	cmp	r3, #16
 80034bc:	d108      	bne.n	80034d0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034ce:	e007      	b.n	80034e0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	60da      	str	r2, [r3, #12]
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	4b16      	ldr	r3, [pc, #88]	@ (8003554 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d802      	bhi.n	8003506 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003500:	4b15      	ldr	r3, [pc, #84]	@ (8003558 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	e001      	b.n	800350a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003506:	4b15      	ldr	r3, [pc, #84]	@ (800355c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003508:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	b2db      	uxtb	r3, r3
 8003514:	3b08      	subs	r3, #8
 8003516:	4a12      	ldr	r2, [pc, #72]	@ (8003560 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003518:	fba2 2303 	umull	r2, r3, r2, r3
 800351c:	091b      	lsrs	r3, r3, #4
 800351e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003524:	089b      	lsrs	r3, r3, #2
 8003526:	009a      	lsls	r2, r3, #2
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	4413      	add	r3, r2
 800352c:	461a      	mov	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a0b      	ldr	r2, [pc, #44]	@ (8003564 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003536:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f003 031f 	and.w	r3, r3, #31
 800353e:	2201      	movs	r2, #1
 8003540:	409a      	lsls	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003546:	bf00      	nop
 8003548:	371c      	adds	r7, #28
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40020407 	.word	0x40020407
 8003558:	40020800 	.word	0x40020800
 800355c:	40020820 	.word	0x40020820
 8003560:	cccccccd 	.word	0xcccccccd
 8003564:	40020880 	.word	0x40020880

08003568 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4b0b      	ldr	r3, [pc, #44]	@ (80035a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	461a      	mov	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a08      	ldr	r2, [pc, #32]	@ (80035ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800358a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	3b01      	subs	r3, #1
 8003590:	f003 031f 	and.w	r3, r3, #31
 8003594:	2201      	movs	r2, #1
 8003596:	409a      	lsls	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800359c:	bf00      	nop
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	1000823f 	.word	0x1000823f
 80035ac:	40020940 	.word	0x40020940

080035b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80035be:	e15a      	b.n	8003876 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	2101      	movs	r1, #1
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	fa01 f303 	lsl.w	r3, r1, r3
 80035cc:	4013      	ands	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 814c 	beq.w	8003870 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f003 0303 	and.w	r3, r3, #3
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d005      	beq.n	80035f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d130      	bne.n	8003652 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	2203      	movs	r2, #3
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	43db      	mvns	r3, r3
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	4013      	ands	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003626:	2201      	movs	r2, #1
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4013      	ands	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	091b      	lsrs	r3, r3, #4
 800363c:	f003 0201 	and.w	r2, r3, #1
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	2b03      	cmp	r3, #3
 800365c:	d017      	beq.n	800368e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	2203      	movs	r2, #3
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	43db      	mvns	r3, r3
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4013      	ands	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d123      	bne.n	80036e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	08da      	lsrs	r2, r3, #3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3208      	adds	r2, #8
 80036a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	220f      	movs	r2, #15
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43db      	mvns	r3, r3
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4013      	ands	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	691a      	ldr	r2, [r3, #16]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	08da      	lsrs	r2, r3, #3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3208      	adds	r2, #8
 80036dc:	6939      	ldr	r1, [r7, #16]
 80036de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	2203      	movs	r2, #3
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43db      	mvns	r3, r3
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4013      	ands	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f003 0203 	and.w	r2, r3, #3
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 80a6 	beq.w	8003870 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003724:	4b5b      	ldr	r3, [pc, #364]	@ (8003894 <HAL_GPIO_Init+0x2e4>)
 8003726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003728:	4a5a      	ldr	r2, [pc, #360]	@ (8003894 <HAL_GPIO_Init+0x2e4>)
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003730:	4b58      	ldr	r3, [pc, #352]	@ (8003894 <HAL_GPIO_Init+0x2e4>)
 8003732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800373c:	4a56      	ldr	r2, [pc, #344]	@ (8003898 <HAL_GPIO_Init+0x2e8>)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	089b      	lsrs	r3, r3, #2
 8003742:	3302      	adds	r3, #2
 8003744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003748:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	220f      	movs	r2, #15
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	43db      	mvns	r3, r3
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4013      	ands	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003766:	d01f      	beq.n	80037a8 <HAL_GPIO_Init+0x1f8>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a4c      	ldr	r2, [pc, #304]	@ (800389c <HAL_GPIO_Init+0x2ec>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d019      	beq.n	80037a4 <HAL_GPIO_Init+0x1f4>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a4b      	ldr	r2, [pc, #300]	@ (80038a0 <HAL_GPIO_Init+0x2f0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d013      	beq.n	80037a0 <HAL_GPIO_Init+0x1f0>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a4a      	ldr	r2, [pc, #296]	@ (80038a4 <HAL_GPIO_Init+0x2f4>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d00d      	beq.n	800379c <HAL_GPIO_Init+0x1ec>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a49      	ldr	r2, [pc, #292]	@ (80038a8 <HAL_GPIO_Init+0x2f8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d007      	beq.n	8003798 <HAL_GPIO_Init+0x1e8>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a48      	ldr	r2, [pc, #288]	@ (80038ac <HAL_GPIO_Init+0x2fc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d101      	bne.n	8003794 <HAL_GPIO_Init+0x1e4>
 8003790:	2305      	movs	r3, #5
 8003792:	e00a      	b.n	80037aa <HAL_GPIO_Init+0x1fa>
 8003794:	2306      	movs	r3, #6
 8003796:	e008      	b.n	80037aa <HAL_GPIO_Init+0x1fa>
 8003798:	2304      	movs	r3, #4
 800379a:	e006      	b.n	80037aa <HAL_GPIO_Init+0x1fa>
 800379c:	2303      	movs	r3, #3
 800379e:	e004      	b.n	80037aa <HAL_GPIO_Init+0x1fa>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e002      	b.n	80037aa <HAL_GPIO_Init+0x1fa>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <HAL_GPIO_Init+0x1fa>
 80037a8:	2300      	movs	r3, #0
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	f002 0203 	and.w	r2, r2, #3
 80037b0:	0092      	lsls	r2, r2, #2
 80037b2:	4093      	lsls	r3, r2
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037ba:	4937      	ldr	r1, [pc, #220]	@ (8003898 <HAL_GPIO_Init+0x2e8>)
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	089b      	lsrs	r3, r3, #2
 80037c0:	3302      	adds	r3, #2
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037c8:	4b39      	ldr	r3, [pc, #228]	@ (80038b0 <HAL_GPIO_Init+0x300>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	43db      	mvns	r3, r3
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4013      	ands	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037ec:	4a30      	ldr	r2, [pc, #192]	@ (80038b0 <HAL_GPIO_Init+0x300>)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037f2:	4b2f      	ldr	r3, [pc, #188]	@ (80038b0 <HAL_GPIO_Init+0x300>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	43db      	mvns	r3, r3
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4013      	ands	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003816:	4a26      	ldr	r2, [pc, #152]	@ (80038b0 <HAL_GPIO_Init+0x300>)
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800381c:	4b24      	ldr	r3, [pc, #144]	@ (80038b0 <HAL_GPIO_Init+0x300>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	43db      	mvns	r3, r3
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4013      	ands	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4313      	orrs	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003840:	4a1b      	ldr	r2, [pc, #108]	@ (80038b0 <HAL_GPIO_Init+0x300>)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003846:	4b1a      	ldr	r3, [pc, #104]	@ (80038b0 <HAL_GPIO_Init+0x300>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	43db      	mvns	r3, r3
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4013      	ands	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800386a:	4a11      	ldr	r2, [pc, #68]	@ (80038b0 <HAL_GPIO_Init+0x300>)
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	3301      	adds	r3, #1
 8003874:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	fa22 f303 	lsr.w	r3, r2, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	f47f ae9d 	bne.w	80035c0 <HAL_GPIO_Init+0x10>
  }
}
 8003886:	bf00      	nop
 8003888:	bf00      	nop
 800388a:	371c      	adds	r7, #28
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	40021000 	.word	0x40021000
 8003898:	40010000 	.word	0x40010000
 800389c:	48000400 	.word	0x48000400
 80038a0:	48000800 	.word	0x48000800
 80038a4:	48000c00 	.word	0x48000c00
 80038a8:	48001000 	.word	0x48001000
 80038ac:	48001400 	.word	0x48001400
 80038b0:	40010400 	.word	0x40010400

080038b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	807b      	strh	r3, [r7, #2]
 80038c0:	4613      	mov	r3, r2
 80038c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038c4:	787b      	ldrb	r3, [r7, #1]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038ca:	887a      	ldrh	r2, [r7, #2]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038d0:	e002      	b.n	80038d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038d2:	887a      	ldrh	r2, [r7, #2]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	4603      	mov	r3, r0
 80038ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80038ee:	4b08      	ldr	r3, [pc, #32]	@ (8003910 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	88fb      	ldrh	r3, [r7, #6]
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d006      	beq.n	8003908 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038fa:	4a05      	ldr	r2, [pc, #20]	@ (8003910 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038fc:	88fb      	ldrh	r3, [r7, #6]
 80038fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003900:	88fb      	ldrh	r3, [r7, #6]
 8003902:	4618      	mov	r0, r3
 8003904:	f000 f806 	bl	8003914 <HAL_GPIO_EXTI_Callback>
  }
}
 8003908:	bf00      	nop
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40010400 	.word	0x40010400

08003914 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	4603      	mov	r3, r0
 800391c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
	...

0800392c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d141      	bne.n	80039be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800393a:	4b4b      	ldr	r3, [pc, #300]	@ (8003a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003942:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003946:	d131      	bne.n	80039ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003948:	4b47      	ldr	r3, [pc, #284]	@ (8003a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800394a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800394e:	4a46      	ldr	r2, [pc, #280]	@ (8003a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003950:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003954:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003958:	4b43      	ldr	r3, [pc, #268]	@ (8003a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003960:	4a41      	ldr	r2, [pc, #260]	@ (8003a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003962:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003966:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003968:	4b40      	ldr	r3, [pc, #256]	@ (8003a6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2232      	movs	r2, #50	@ 0x32
 800396e:	fb02 f303 	mul.w	r3, r2, r3
 8003972:	4a3f      	ldr	r2, [pc, #252]	@ (8003a70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003974:	fba2 2303 	umull	r2, r3, r2, r3
 8003978:	0c9b      	lsrs	r3, r3, #18
 800397a:	3301      	adds	r3, #1
 800397c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800397e:	e002      	b.n	8003986 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	3b01      	subs	r3, #1
 8003984:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003986:	4b38      	ldr	r3, [pc, #224]	@ (8003a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800398e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003992:	d102      	bne.n	800399a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f2      	bne.n	8003980 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800399a:	4b33      	ldr	r3, [pc, #204]	@ (8003a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039a6:	d158      	bne.n	8003a5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e057      	b.n	8003a5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039ac:	4b2e      	ldr	r3, [pc, #184]	@ (8003a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039b2:	4a2d      	ldr	r2, [pc, #180]	@ (8003a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80039bc:	e04d      	b.n	8003a5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039c4:	d141      	bne.n	8003a4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039c6:	4b28      	ldr	r3, [pc, #160]	@ (8003a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80039ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039d2:	d131      	bne.n	8003a38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039d4:	4b24      	ldr	r3, [pc, #144]	@ (8003a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039da:	4a23      	ldr	r2, [pc, #140]	@ (8003a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039e4:	4b20      	ldr	r3, [pc, #128]	@ (8003a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039ec:	4a1e      	ldr	r2, [pc, #120]	@ (8003a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039f4:	4b1d      	ldr	r3, [pc, #116]	@ (8003a6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2232      	movs	r2, #50	@ 0x32
 80039fa:	fb02 f303 	mul.w	r3, r2, r3
 80039fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003a70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a00:	fba2 2303 	umull	r2, r3, r2, r3
 8003a04:	0c9b      	lsrs	r3, r3, #18
 8003a06:	3301      	adds	r3, #1
 8003a08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a0a:	e002      	b.n	8003a12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a12:	4b15      	ldr	r3, [pc, #84]	@ (8003a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a1e:	d102      	bne.n	8003a26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f2      	bne.n	8003a0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a26:	4b10      	ldr	r3, [pc, #64]	@ (8003a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a32:	d112      	bne.n	8003a5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e011      	b.n	8003a5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a38:	4b0b      	ldr	r3, [pc, #44]	@ (8003a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003a48:	e007      	b.n	8003a5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a4a:	4b07      	ldr	r3, [pc, #28]	@ (8003a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a52:	4a05      	ldr	r2, [pc, #20]	@ (8003a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a58:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	40007000 	.word	0x40007000
 8003a6c:	20000000 	.word	0x20000000
 8003a70:	431bde83 	.word	0x431bde83

08003a74 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003a78:	4b05      	ldr	r3, [pc, #20]	@ (8003a90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	4a04      	ldr	r2, [pc, #16]	@ (8003a90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a82:	6093      	str	r3, [r2, #8]
}
 8003a84:	bf00      	nop
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40007000 	.word	0x40007000

08003a94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e2fe      	b.n	80040a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d075      	beq.n	8003b9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ab2:	4b97      	ldr	r3, [pc, #604]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
 8003aba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003abc:	4b94      	ldr	r3, [pc, #592]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	2b0c      	cmp	r3, #12
 8003aca:	d102      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x3e>
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2b03      	cmp	r3, #3
 8003ad0:	d002      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x44>
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d10b      	bne.n	8003af0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad8:	4b8d      	ldr	r3, [pc, #564]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d05b      	beq.n	8003b9c <HAL_RCC_OscConfig+0x108>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d157      	bne.n	8003b9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e2d9      	b.n	80040a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af8:	d106      	bne.n	8003b08 <HAL_RCC_OscConfig+0x74>
 8003afa:	4b85      	ldr	r3, [pc, #532]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a84      	ldr	r2, [pc, #528]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003b00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	e01d      	b.n	8003b44 <HAL_RCC_OscConfig+0xb0>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b10:	d10c      	bne.n	8003b2c <HAL_RCC_OscConfig+0x98>
 8003b12:	4b7f      	ldr	r3, [pc, #508]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a7e      	ldr	r2, [pc, #504]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003b18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	4b7c      	ldr	r3, [pc, #496]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a7b      	ldr	r2, [pc, #492]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003b24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	e00b      	b.n	8003b44 <HAL_RCC_OscConfig+0xb0>
 8003b2c:	4b78      	ldr	r3, [pc, #480]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a77      	ldr	r2, [pc, #476]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003b32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	4b75      	ldr	r3, [pc, #468]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a74      	ldr	r2, [pc, #464]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003b3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d013      	beq.n	8003b74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4c:	f7fd fb80 	bl	8001250 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b54:	f7fd fb7c 	bl	8001250 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b64      	cmp	r3, #100	@ 0x64
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e29e      	b.n	80040a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b66:	4b6a      	ldr	r3, [pc, #424]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0xc0>
 8003b72:	e014      	b.n	8003b9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b74:	f7fd fb6c 	bl	8001250 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b7c:	f7fd fb68 	bl	8001250 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b64      	cmp	r3, #100	@ 0x64
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e28a      	b.n	80040a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b8e:	4b60      	ldr	r3, [pc, #384]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <HAL_RCC_OscConfig+0xe8>
 8003b9a:	e000      	b.n	8003b9e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d075      	beq.n	8003c96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003baa:	4b59      	ldr	r3, [pc, #356]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bb4:	4b56      	ldr	r3, [pc, #344]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	2b0c      	cmp	r3, #12
 8003bc2:	d102      	bne.n	8003bca <HAL_RCC_OscConfig+0x136>
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d002      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x13c>
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d11f      	bne.n	8003c10 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bd0:	4b4f      	ldr	r3, [pc, #316]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_RCC_OscConfig+0x154>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e25d      	b.n	80040a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be8:	4b49      	ldr	r3, [pc, #292]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	061b      	lsls	r3, r3, #24
 8003bf6:	4946      	ldr	r1, [pc, #280]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003bfc:	4b45      	ldr	r3, [pc, #276]	@ (8003d14 <HAL_RCC_OscConfig+0x280>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fd fad9 	bl	80011b8 <HAL_InitTick>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d043      	beq.n	8003c94 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e249      	b.n	80040a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d023      	beq.n	8003c60 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c18:	4b3d      	ldr	r3, [pc, #244]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a3c      	ldr	r2, [pc, #240]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003c1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c24:	f7fd fb14 	bl	8001250 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c2c:	f7fd fb10 	bl	8001250 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e232      	b.n	80040a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c3e:	4b34      	ldr	r3, [pc, #208]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4a:	4b31      	ldr	r3, [pc, #196]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	061b      	lsls	r3, r3, #24
 8003c58:	492d      	ldr	r1, [pc, #180]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	604b      	str	r3, [r1, #4]
 8003c5e:	e01a      	b.n	8003c96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c60:	4b2b      	ldr	r3, [pc, #172]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a2a      	ldr	r2, [pc, #168]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003c66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fd faf0 	bl	8001250 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c74:	f7fd faec 	bl	8001250 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e20e      	b.n	80040a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c86:	4b22      	ldr	r3, [pc, #136]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x1e0>
 8003c92:	e000      	b.n	8003c96 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d041      	beq.n	8003d26 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d01c      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003caa:	4b19      	ldr	r3, [pc, #100]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cb0:	4a17      	ldr	r2, [pc, #92]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003cb2:	f043 0301 	orr.w	r3, r3, #1
 8003cb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cba:	f7fd fac9 	bl	8001250 <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc2:	f7fd fac5 	bl	8001250 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e1e7      	b.n	80040a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0ef      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x22e>
 8003ce2:	e020      	b.n	8003d26 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cea:	4a09      	ldr	r2, [pc, #36]	@ (8003d10 <HAL_RCC_OscConfig+0x27c>)
 8003cec:	f023 0301 	bic.w	r3, r3, #1
 8003cf0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf4:	f7fd faac 	bl	8001250 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cfa:	e00d      	b.n	8003d18 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cfc:	f7fd faa8 	bl	8001250 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d906      	bls.n	8003d18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e1ca      	b.n	80040a4 <HAL_RCC_OscConfig+0x610>
 8003d0e:	bf00      	nop
 8003d10:	40021000 	.word	0x40021000
 8003d14:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d18:	4b8c      	ldr	r3, [pc, #560]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1ea      	bne.n	8003cfc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0304 	and.w	r3, r3, #4
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 80a6 	beq.w	8003e80 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d34:	2300      	movs	r3, #0
 8003d36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d38:	4b84      	ldr	r3, [pc, #528]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <HAL_RCC_OscConfig+0x2b4>
 8003d44:	2301      	movs	r3, #1
 8003d46:	e000      	b.n	8003d4a <HAL_RCC_OscConfig+0x2b6>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00d      	beq.n	8003d6a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d4e:	4b7f      	ldr	r3, [pc, #508]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d52:	4a7e      	ldr	r2, [pc, #504]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d58:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d5a:	4b7c      	ldr	r3, [pc, #496]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d66:	2301      	movs	r3, #1
 8003d68:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d6a:	4b79      	ldr	r3, [pc, #484]	@ (8003f50 <HAL_RCC_OscConfig+0x4bc>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d118      	bne.n	8003da8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d76:	4b76      	ldr	r3, [pc, #472]	@ (8003f50 <HAL_RCC_OscConfig+0x4bc>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a75      	ldr	r2, [pc, #468]	@ (8003f50 <HAL_RCC_OscConfig+0x4bc>)
 8003d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d82:	f7fd fa65 	bl	8001250 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d8a:	f7fd fa61 	bl	8001250 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e183      	b.n	80040a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d9c:	4b6c      	ldr	r3, [pc, #432]	@ (8003f50 <HAL_RCC_OscConfig+0x4bc>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0f0      	beq.n	8003d8a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d108      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x32e>
 8003db0:	4b66      	ldr	r3, [pc, #408]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db6:	4a65      	ldr	r2, [pc, #404]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003db8:	f043 0301 	orr.w	r3, r3, #1
 8003dbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dc0:	e024      	b.n	8003e0c <HAL_RCC_OscConfig+0x378>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	2b05      	cmp	r3, #5
 8003dc8:	d110      	bne.n	8003dec <HAL_RCC_OscConfig+0x358>
 8003dca:	4b60      	ldr	r3, [pc, #384]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd0:	4a5e      	ldr	r2, [pc, #376]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003dd2:	f043 0304 	orr.w	r3, r3, #4
 8003dd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dda:	4b5c      	ldr	r3, [pc, #368]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de0:	4a5a      	ldr	r2, [pc, #360]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dea:	e00f      	b.n	8003e0c <HAL_RCC_OscConfig+0x378>
 8003dec:	4b57      	ldr	r3, [pc, #348]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df2:	4a56      	ldr	r2, [pc, #344]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003df4:	f023 0301 	bic.w	r3, r3, #1
 8003df8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dfc:	4b53      	ldr	r3, [pc, #332]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e02:	4a52      	ldr	r2, [pc, #328]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003e04:	f023 0304 	bic.w	r3, r3, #4
 8003e08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d016      	beq.n	8003e42 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e14:	f7fd fa1c 	bl	8001250 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e1a:	e00a      	b.n	8003e32 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1c:	f7fd fa18 	bl	8001250 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e138      	b.n	80040a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e32:	4b46      	ldr	r3, [pc, #280]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0ed      	beq.n	8003e1c <HAL_RCC_OscConfig+0x388>
 8003e40:	e015      	b.n	8003e6e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e42:	f7fd fa05 	bl	8001250 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e48:	e00a      	b.n	8003e60 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4a:	f7fd fa01 	bl	8001250 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e121      	b.n	80040a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e60:	4b3a      	ldr	r3, [pc, #232]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1ed      	bne.n	8003e4a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e6e:	7ffb      	ldrb	r3, [r7, #31]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d105      	bne.n	8003e80 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e74:	4b35      	ldr	r3, [pc, #212]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e78:	4a34      	ldr	r2, [pc, #208]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003e7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e7e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0320 	and.w	r3, r3, #32
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d03c      	beq.n	8003f06 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d01c      	beq.n	8003ece <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e94:	4b2d      	ldr	r3, [pc, #180]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003e96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e9a:	4a2c      	ldr	r2, [pc, #176]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea4:	f7fd f9d4 	bl	8001250 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003eac:	f7fd f9d0 	bl	8001250 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e0f2      	b.n	80040a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ebe:	4b23      	ldr	r3, [pc, #140]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003ec0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0ef      	beq.n	8003eac <HAL_RCC_OscConfig+0x418>
 8003ecc:	e01b      	b.n	8003f06 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ece:	4b1f      	ldr	r3, [pc, #124]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003ed0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003ed6:	f023 0301 	bic.w	r3, r3, #1
 8003eda:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ede:	f7fd f9b7 	bl	8001250 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ee6:	f7fd f9b3 	bl	8001250 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e0d5      	b.n	80040a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ef8:	4b14      	ldr	r3, [pc, #80]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003efa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1ef      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 80c9 	beq.w	80040a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f10:	4b0e      	ldr	r3, [pc, #56]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 030c 	and.w	r3, r3, #12
 8003f18:	2b0c      	cmp	r3, #12
 8003f1a:	f000 8083 	beq.w	8004024 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d15e      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f26:	4b09      	ldr	r3, [pc, #36]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a08      	ldr	r2, [pc, #32]	@ (8003f4c <HAL_RCC_OscConfig+0x4b8>)
 8003f2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f32:	f7fd f98d 	bl	8001250 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f38:	e00c      	b.n	8003f54 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f3a:	f7fd f989 	bl	8001250 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d905      	bls.n	8003f54 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e0ab      	b.n	80040a4 <HAL_RCC_OscConfig+0x610>
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f54:	4b55      	ldr	r3, [pc, #340]	@ (80040ac <HAL_RCC_OscConfig+0x618>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1ec      	bne.n	8003f3a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f60:	4b52      	ldr	r3, [pc, #328]	@ (80040ac <HAL_RCC_OscConfig+0x618>)
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	4b52      	ldr	r3, [pc, #328]	@ (80040b0 <HAL_RCC_OscConfig+0x61c>)
 8003f66:	4013      	ands	r3, r2
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6a11      	ldr	r1, [r2, #32]
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f70:	3a01      	subs	r2, #1
 8003f72:	0112      	lsls	r2, r2, #4
 8003f74:	4311      	orrs	r1, r2
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003f7a:	0212      	lsls	r2, r2, #8
 8003f7c:	4311      	orrs	r1, r2
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003f82:	0852      	lsrs	r2, r2, #1
 8003f84:	3a01      	subs	r2, #1
 8003f86:	0552      	lsls	r2, r2, #21
 8003f88:	4311      	orrs	r1, r2
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f8e:	0852      	lsrs	r2, r2, #1
 8003f90:	3a01      	subs	r2, #1
 8003f92:	0652      	lsls	r2, r2, #25
 8003f94:	4311      	orrs	r1, r2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f9a:	06d2      	lsls	r2, r2, #27
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	4943      	ldr	r1, [pc, #268]	@ (80040ac <HAL_RCC_OscConfig+0x618>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fa4:	4b41      	ldr	r3, [pc, #260]	@ (80040ac <HAL_RCC_OscConfig+0x618>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a40      	ldr	r2, [pc, #256]	@ (80040ac <HAL_RCC_OscConfig+0x618>)
 8003faa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fb0:	4b3e      	ldr	r3, [pc, #248]	@ (80040ac <HAL_RCC_OscConfig+0x618>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	4a3d      	ldr	r2, [pc, #244]	@ (80040ac <HAL_RCC_OscConfig+0x618>)
 8003fb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fbc:	f7fd f948 	bl	8001250 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc4:	f7fd f944 	bl	8001250 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e066      	b.n	80040a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fd6:	4b35      	ldr	r3, [pc, #212]	@ (80040ac <HAL_RCC_OscConfig+0x618>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0f0      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x530>
 8003fe2:	e05e      	b.n	80040a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe4:	4b31      	ldr	r3, [pc, #196]	@ (80040ac <HAL_RCC_OscConfig+0x618>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a30      	ldr	r2, [pc, #192]	@ (80040ac <HAL_RCC_OscConfig+0x618>)
 8003fea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff0:	f7fd f92e 	bl	8001250 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff8:	f7fd f92a 	bl	8001250 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e04c      	b.n	80040a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800400a:	4b28      	ldr	r3, [pc, #160]	@ (80040ac <HAL_RCC_OscConfig+0x618>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004016:	4b25      	ldr	r3, [pc, #148]	@ (80040ac <HAL_RCC_OscConfig+0x618>)
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	4924      	ldr	r1, [pc, #144]	@ (80040ac <HAL_RCC_OscConfig+0x618>)
 800401c:	4b25      	ldr	r3, [pc, #148]	@ (80040b4 <HAL_RCC_OscConfig+0x620>)
 800401e:	4013      	ands	r3, r2
 8004020:	60cb      	str	r3, [r1, #12]
 8004022:	e03e      	b.n	80040a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e039      	b.n	80040a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004030:	4b1e      	ldr	r3, [pc, #120]	@ (80040ac <HAL_RCC_OscConfig+0x618>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f003 0203 	and.w	r2, r3, #3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	429a      	cmp	r2, r3
 8004042:	d12c      	bne.n	800409e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404e:	3b01      	subs	r3, #1
 8004050:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004052:	429a      	cmp	r2, r3
 8004054:	d123      	bne.n	800409e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004060:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004062:	429a      	cmp	r2, r3
 8004064:	d11b      	bne.n	800409e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004070:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004072:	429a      	cmp	r2, r3
 8004074:	d113      	bne.n	800409e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004080:	085b      	lsrs	r3, r3, #1
 8004082:	3b01      	subs	r3, #1
 8004084:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004086:	429a      	cmp	r2, r3
 8004088:	d109      	bne.n	800409e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004094:	085b      	lsrs	r3, r3, #1
 8004096:	3b01      	subs	r3, #1
 8004098:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800409a:	429a      	cmp	r2, r3
 800409c:	d001      	beq.n	80040a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3720      	adds	r7, #32
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40021000 	.word	0x40021000
 80040b0:	019f800c 	.word	0x019f800c
 80040b4:	feeefffc 	.word	0xfeeefffc

080040b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e11e      	b.n	800430e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040d0:	4b91      	ldr	r3, [pc, #580]	@ (8004318 <HAL_RCC_ClockConfig+0x260>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 030f 	and.w	r3, r3, #15
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d910      	bls.n	8004100 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040de:	4b8e      	ldr	r3, [pc, #568]	@ (8004318 <HAL_RCC_ClockConfig+0x260>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f023 020f 	bic.w	r2, r3, #15
 80040e6:	498c      	ldr	r1, [pc, #560]	@ (8004318 <HAL_RCC_ClockConfig+0x260>)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ee:	4b8a      	ldr	r3, [pc, #552]	@ (8004318 <HAL_RCC_ClockConfig+0x260>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d001      	beq.n	8004100 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e106      	b.n	800430e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d073      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b03      	cmp	r3, #3
 8004112:	d129      	bne.n	8004168 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004114:	4b81      	ldr	r3, [pc, #516]	@ (800431c <HAL_RCC_ClockConfig+0x264>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0f4      	b.n	800430e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004124:	f000 f99e 	bl	8004464 <RCC_GetSysClockFreqFromPLLSource>
 8004128:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	4a7c      	ldr	r2, [pc, #496]	@ (8004320 <HAL_RCC_ClockConfig+0x268>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d93f      	bls.n	80041b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004132:	4b7a      	ldr	r3, [pc, #488]	@ (800431c <HAL_RCC_ClockConfig+0x264>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d009      	beq.n	8004152 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004146:	2b00      	cmp	r3, #0
 8004148:	d033      	beq.n	80041b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800414e:	2b00      	cmp	r3, #0
 8004150:	d12f      	bne.n	80041b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004152:	4b72      	ldr	r3, [pc, #456]	@ (800431c <HAL_RCC_ClockConfig+0x264>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800415a:	4a70      	ldr	r2, [pc, #448]	@ (800431c <HAL_RCC_ClockConfig+0x264>)
 800415c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004160:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004162:	2380      	movs	r3, #128	@ 0x80
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	e024      	b.n	80041b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2b02      	cmp	r3, #2
 800416e:	d107      	bne.n	8004180 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004170:	4b6a      	ldr	r3, [pc, #424]	@ (800431c <HAL_RCC_ClockConfig+0x264>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d109      	bne.n	8004190 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e0c6      	b.n	800430e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004180:	4b66      	ldr	r3, [pc, #408]	@ (800431c <HAL_RCC_ClockConfig+0x264>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e0be      	b.n	800430e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004190:	f000 f8ce 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 8004194:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	4a61      	ldr	r2, [pc, #388]	@ (8004320 <HAL_RCC_ClockConfig+0x268>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d909      	bls.n	80041b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800419e:	4b5f      	ldr	r3, [pc, #380]	@ (800431c <HAL_RCC_ClockConfig+0x264>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041a6:	4a5d      	ldr	r2, [pc, #372]	@ (800431c <HAL_RCC_ClockConfig+0x264>)
 80041a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80041ae:	2380      	movs	r3, #128	@ 0x80
 80041b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041b2:	4b5a      	ldr	r3, [pc, #360]	@ (800431c <HAL_RCC_ClockConfig+0x264>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f023 0203 	bic.w	r2, r3, #3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	4957      	ldr	r1, [pc, #348]	@ (800431c <HAL_RCC_ClockConfig+0x264>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c4:	f7fd f844 	bl	8001250 <HAL_GetTick>
 80041c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ca:	e00a      	b.n	80041e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041cc:	f7fd f840 	bl	8001250 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041da:	4293      	cmp	r3, r2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e095      	b.n	800430e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e2:	4b4e      	ldr	r3, [pc, #312]	@ (800431c <HAL_RCC_ClockConfig+0x264>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 020c 	and.w	r2, r3, #12
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d1eb      	bne.n	80041cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d023      	beq.n	8004248 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800420c:	4b43      	ldr	r3, [pc, #268]	@ (800431c <HAL_RCC_ClockConfig+0x264>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	4a42      	ldr	r2, [pc, #264]	@ (800431c <HAL_RCC_ClockConfig+0x264>)
 8004212:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004216:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	2b00      	cmp	r3, #0
 8004222:	d007      	beq.n	8004234 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004224:	4b3d      	ldr	r3, [pc, #244]	@ (800431c <HAL_RCC_ClockConfig+0x264>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800422c:	4a3b      	ldr	r2, [pc, #236]	@ (800431c <HAL_RCC_ClockConfig+0x264>)
 800422e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004232:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004234:	4b39      	ldr	r3, [pc, #228]	@ (800431c <HAL_RCC_ClockConfig+0x264>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	4936      	ldr	r1, [pc, #216]	@ (800431c <HAL_RCC_ClockConfig+0x264>)
 8004242:	4313      	orrs	r3, r2
 8004244:	608b      	str	r3, [r1, #8]
 8004246:	e008      	b.n	800425a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2b80      	cmp	r3, #128	@ 0x80
 800424c:	d105      	bne.n	800425a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800424e:	4b33      	ldr	r3, [pc, #204]	@ (800431c <HAL_RCC_ClockConfig+0x264>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	4a32      	ldr	r2, [pc, #200]	@ (800431c <HAL_RCC_ClockConfig+0x264>)
 8004254:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004258:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800425a:	4b2f      	ldr	r3, [pc, #188]	@ (8004318 <HAL_RCC_ClockConfig+0x260>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	429a      	cmp	r2, r3
 8004266:	d21d      	bcs.n	80042a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004268:	4b2b      	ldr	r3, [pc, #172]	@ (8004318 <HAL_RCC_ClockConfig+0x260>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f023 020f 	bic.w	r2, r3, #15
 8004270:	4929      	ldr	r1, [pc, #164]	@ (8004318 <HAL_RCC_ClockConfig+0x260>)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	4313      	orrs	r3, r2
 8004276:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004278:	f7fc ffea 	bl	8001250 <HAL_GetTick>
 800427c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800427e:	e00a      	b.n	8004296 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004280:	f7fc ffe6 	bl	8001250 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800428e:	4293      	cmp	r3, r2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e03b      	b.n	800430e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004296:	4b20      	ldr	r3, [pc, #128]	@ (8004318 <HAL_RCC_ClockConfig+0x260>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d1ed      	bne.n	8004280 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d008      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b0:	4b1a      	ldr	r3, [pc, #104]	@ (800431c <HAL_RCC_ClockConfig+0x264>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	4917      	ldr	r1, [pc, #92]	@ (800431c <HAL_RCC_ClockConfig+0x264>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d009      	beq.n	80042e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042ce:	4b13      	ldr	r3, [pc, #76]	@ (800431c <HAL_RCC_ClockConfig+0x264>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	490f      	ldr	r1, [pc, #60]	@ (800431c <HAL_RCC_ClockConfig+0x264>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042e2:	f000 f825 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 80042e6:	4602      	mov	r2, r0
 80042e8:	4b0c      	ldr	r3, [pc, #48]	@ (800431c <HAL_RCC_ClockConfig+0x264>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	091b      	lsrs	r3, r3, #4
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	490c      	ldr	r1, [pc, #48]	@ (8004324 <HAL_RCC_ClockConfig+0x26c>)
 80042f4:	5ccb      	ldrb	r3, [r1, r3]
 80042f6:	f003 031f 	and.w	r3, r3, #31
 80042fa:	fa22 f303 	lsr.w	r3, r2, r3
 80042fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004328 <HAL_RCC_ClockConfig+0x270>)
 8004300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004302:	4b0a      	ldr	r3, [pc, #40]	@ (800432c <HAL_RCC_ClockConfig+0x274>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f7fc ff56 	bl	80011b8 <HAL_InitTick>
 800430c:	4603      	mov	r3, r0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	40022000 	.word	0x40022000
 800431c:	40021000 	.word	0x40021000
 8004320:	04c4b400 	.word	0x04c4b400
 8004324:	08007074 	.word	0x08007074
 8004328:	20000000 	.word	0x20000000
 800432c:	20000004 	.word	0x20000004

08004330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004336:	4b2c      	ldr	r3, [pc, #176]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 030c 	and.w	r3, r3, #12
 800433e:	2b04      	cmp	r3, #4
 8004340:	d102      	bne.n	8004348 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004342:	4b2a      	ldr	r3, [pc, #168]	@ (80043ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	e047      	b.n	80043d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004348:	4b27      	ldr	r3, [pc, #156]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 030c 	and.w	r3, r3, #12
 8004350:	2b08      	cmp	r3, #8
 8004352:	d102      	bne.n	800435a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004354:	4b26      	ldr	r3, [pc, #152]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004356:	613b      	str	r3, [r7, #16]
 8004358:	e03e      	b.n	80043d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800435a:	4b23      	ldr	r3, [pc, #140]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b0c      	cmp	r3, #12
 8004364:	d136      	bne.n	80043d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004366:	4b20      	ldr	r3, [pc, #128]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004370:	4b1d      	ldr	r3, [pc, #116]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	091b      	lsrs	r3, r3, #4
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	3301      	adds	r3, #1
 800437c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b03      	cmp	r3, #3
 8004382:	d10c      	bne.n	800439e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004384:	4a1a      	ldr	r2, [pc, #104]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	fbb2 f3f3 	udiv	r3, r2, r3
 800438c:	4a16      	ldr	r2, [pc, #88]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800438e:	68d2      	ldr	r2, [r2, #12]
 8004390:	0a12      	lsrs	r2, r2, #8
 8004392:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004396:	fb02 f303 	mul.w	r3, r2, r3
 800439a:	617b      	str	r3, [r7, #20]
      break;
 800439c:	e00c      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800439e:	4a13      	ldr	r2, [pc, #76]	@ (80043ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a6:	4a10      	ldr	r2, [pc, #64]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043a8:	68d2      	ldr	r2, [r2, #12]
 80043aa:	0a12      	lsrs	r2, r2, #8
 80043ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80043b0:	fb02 f303 	mul.w	r3, r2, r3
 80043b4:	617b      	str	r3, [r7, #20]
      break;
 80043b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043b8:	4b0b      	ldr	r3, [pc, #44]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	0e5b      	lsrs	r3, r3, #25
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	3301      	adds	r3, #1
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d0:	613b      	str	r3, [r7, #16]
 80043d2:	e001      	b.n	80043d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80043d8:	693b      	ldr	r3, [r7, #16]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	40021000 	.word	0x40021000
 80043ec:	00f42400 	.word	0x00f42400
 80043f0:	016e3600 	.word	0x016e3600

080043f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f8:	4b03      	ldr	r3, [pc, #12]	@ (8004408 <HAL_RCC_GetHCLKFreq+0x14>)
 80043fa:	681b      	ldr	r3, [r3, #0]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	20000000 	.word	0x20000000

0800440c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004410:	f7ff fff0 	bl	80043f4 <HAL_RCC_GetHCLKFreq>
 8004414:	4602      	mov	r2, r0
 8004416:	4b06      	ldr	r3, [pc, #24]	@ (8004430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	0a1b      	lsrs	r3, r3, #8
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	4904      	ldr	r1, [pc, #16]	@ (8004434 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004422:	5ccb      	ldrb	r3, [r1, r3]
 8004424:	f003 031f 	and.w	r3, r3, #31
 8004428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800442c:	4618      	mov	r0, r3
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40021000 	.word	0x40021000
 8004434:	08007084 	.word	0x08007084

08004438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800443c:	f7ff ffda 	bl	80043f4 <HAL_RCC_GetHCLKFreq>
 8004440:	4602      	mov	r2, r0
 8004442:	4b06      	ldr	r3, [pc, #24]	@ (800445c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	0adb      	lsrs	r3, r3, #11
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	4904      	ldr	r1, [pc, #16]	@ (8004460 <HAL_RCC_GetPCLK2Freq+0x28>)
 800444e:	5ccb      	ldrb	r3, [r1, r3]
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004458:	4618      	mov	r0, r3
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40021000 	.word	0x40021000
 8004460:	08007084 	.word	0x08007084

08004464 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800446a:	4b1e      	ldr	r3, [pc, #120]	@ (80044e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004474:	4b1b      	ldr	r3, [pc, #108]	@ (80044e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	091b      	lsrs	r3, r3, #4
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	3301      	adds	r3, #1
 8004480:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	2b03      	cmp	r3, #3
 8004486:	d10c      	bne.n	80044a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004488:	4a17      	ldr	r2, [pc, #92]	@ (80044e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004490:	4a14      	ldr	r2, [pc, #80]	@ (80044e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004492:	68d2      	ldr	r2, [r2, #12]
 8004494:	0a12      	lsrs	r2, r2, #8
 8004496:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800449a:	fb02 f303 	mul.w	r3, r2, r3
 800449e:	617b      	str	r3, [r7, #20]
    break;
 80044a0:	e00c      	b.n	80044bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044a2:	4a12      	ldr	r2, [pc, #72]	@ (80044ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044aa:	4a0e      	ldr	r2, [pc, #56]	@ (80044e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044ac:	68d2      	ldr	r2, [r2, #12]
 80044ae:	0a12      	lsrs	r2, r2, #8
 80044b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80044b4:	fb02 f303 	mul.w	r3, r2, r3
 80044b8:	617b      	str	r3, [r7, #20]
    break;
 80044ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044bc:	4b09      	ldr	r3, [pc, #36]	@ (80044e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	0e5b      	lsrs	r3, r3, #25
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	3301      	adds	r3, #1
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80044d6:	687b      	ldr	r3, [r7, #4]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	371c      	adds	r7, #28
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	40021000 	.word	0x40021000
 80044e8:	016e3600 	.word	0x016e3600
 80044ec:	00f42400 	.word	0x00f42400

080044f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044f8:	2300      	movs	r3, #0
 80044fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044fc:	2300      	movs	r3, #0
 80044fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 8098 	beq.w	800463e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800450e:	2300      	movs	r3, #0
 8004510:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004512:	4b43      	ldr	r3, [pc, #268]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10d      	bne.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800451e:	4b40      	ldr	r3, [pc, #256]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004522:	4a3f      	ldr	r2, [pc, #252]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004528:	6593      	str	r3, [r2, #88]	@ 0x58
 800452a:	4b3d      	ldr	r3, [pc, #244]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800452c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800452e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004532:	60bb      	str	r3, [r7, #8]
 8004534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004536:	2301      	movs	r3, #1
 8004538:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800453a:	4b3a      	ldr	r3, [pc, #232]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a39      	ldr	r2, [pc, #228]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004540:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004544:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004546:	f7fc fe83 	bl	8001250 <HAL_GetTick>
 800454a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800454c:	e009      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800454e:	f7fc fe7f 	bl	8001250 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d902      	bls.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	74fb      	strb	r3, [r7, #19]
        break;
 8004560:	e005      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004562:	4b30      	ldr	r3, [pc, #192]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0ef      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800456e:	7cfb      	ldrb	r3, [r7, #19]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d159      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004574:	4b2a      	ldr	r3, [pc, #168]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800457a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800457e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d01e      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	429a      	cmp	r2, r3
 800458e:	d019      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004590:	4b23      	ldr	r3, [pc, #140]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004596:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800459a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800459c:	4b20      	ldr	r3, [pc, #128]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800459e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045ac:	4b1c      	ldr	r3, [pc, #112]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045bc:	4a18      	ldr	r2, [pc, #96]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d016      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ce:	f7fc fe3f 	bl	8001250 <HAL_GetTick>
 80045d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045d4:	e00b      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d6:	f7fc fe3b 	bl	8001250 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d902      	bls.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	74fb      	strb	r3, [r7, #19]
            break;
 80045ec:	e006      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0ec      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80045fc:	7cfb      	ldrb	r3, [r7, #19]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10b      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004602:	4b07      	ldr	r3, [pc, #28]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004608:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004610:	4903      	ldr	r1, [pc, #12]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004618:	e008      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800461a:	7cfb      	ldrb	r3, [r7, #19]
 800461c:	74bb      	strb	r3, [r7, #18]
 800461e:	e005      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004620:	40021000 	.word	0x40021000
 8004624:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004628:	7cfb      	ldrb	r3, [r7, #19]
 800462a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800462c:	7c7b      	ldrb	r3, [r7, #17]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d105      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004632:	4ba7      	ldr	r3, [pc, #668]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004636:	4aa6      	ldr	r2, [pc, #664]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004638:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800463c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800464a:	4ba1      	ldr	r3, [pc, #644]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004650:	f023 0203 	bic.w	r2, r3, #3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	499d      	ldr	r1, [pc, #628]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800466c:	4b98      	ldr	r3, [pc, #608]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004672:	f023 020c 	bic.w	r2, r3, #12
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	4995      	ldr	r1, [pc, #596]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800468e:	4b90      	ldr	r3, [pc, #576]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004694:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	498c      	ldr	r1, [pc, #560]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046b0:	4b87      	ldr	r3, [pc, #540]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	4984      	ldr	r1, [pc, #528]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0310 	and.w	r3, r3, #16
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046d2:	4b7f      	ldr	r3, [pc, #508]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	497b      	ldr	r1, [pc, #492]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0320 	and.w	r3, r3, #32
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046f4:	4b76      	ldr	r3, [pc, #472]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	4973      	ldr	r1, [pc, #460]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004704:	4313      	orrs	r3, r2
 8004706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004716:	4b6e      	ldr	r3, [pc, #440]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800471c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	496a      	ldr	r1, [pc, #424]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00a      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004738:	4b65      	ldr	r3, [pc, #404]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800473a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800473e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	4962      	ldr	r1, [pc, #392]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004748:	4313      	orrs	r3, r2
 800474a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800475a:	4b5d      	ldr	r3, [pc, #372]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800475c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004760:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004768:	4959      	ldr	r1, [pc, #356]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800476a:	4313      	orrs	r3, r2
 800476c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00a      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800477c:	4b54      	ldr	r3, [pc, #336]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800477e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004782:	f023 0203 	bic.w	r2, r3, #3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478a:	4951      	ldr	r1, [pc, #324]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800479e:	4b4c      	ldr	r3, [pc, #304]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ac:	4948      	ldr	r1, [pc, #288]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d015      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047c0:	4b43      	ldr	r3, [pc, #268]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ce:	4940      	ldr	r1, [pc, #256]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047de:	d105      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047e0:	4b3b      	ldr	r3, [pc, #236]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	4a3a      	ldr	r2, [pc, #232]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d015      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047f8:	4b35      	ldr	r3, [pc, #212]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004806:	4932      	ldr	r1, [pc, #200]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004812:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004816:	d105      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004818:	4b2d      	ldr	r3, [pc, #180]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	4a2c      	ldr	r2, [pc, #176]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800481e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004822:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d015      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004830:	4b27      	ldr	r3, [pc, #156]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004836:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483e:	4924      	ldr	r1, [pc, #144]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004840:	4313      	orrs	r3, r2
 8004842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800484a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800484e:	d105      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004850:	4b1f      	ldr	r3, [pc, #124]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4a1e      	ldr	r2, [pc, #120]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004856:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800485a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d015      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004868:	4b19      	ldr	r3, [pc, #100]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800486e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004876:	4916      	ldr	r1, [pc, #88]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004882:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004886:	d105      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004888:	4b11      	ldr	r3, [pc, #68]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	4a10      	ldr	r2, [pc, #64]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800488e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004892:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d019      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048a0:	4b0b      	ldr	r3, [pc, #44]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ae:	4908      	ldr	r1, [pc, #32]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048be:	d109      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048c0:	4b03      	ldr	r3, [pc, #12]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	4a02      	ldr	r2, [pc, #8]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048ca:	60d3      	str	r3, [r2, #12]
 80048cc:	e002      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80048ce:	bf00      	nop
 80048d0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d015      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80048e0:	4b29      	ldr	r3, [pc, #164]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ee:	4926      	ldr	r1, [pc, #152]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048fe:	d105      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004900:	4b21      	ldr	r3, [pc, #132]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4a20      	ldr	r2, [pc, #128]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004906:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800490a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d015      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004918:	4b1b      	ldr	r3, [pc, #108]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800491a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800491e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004926:	4918      	ldr	r1, [pc, #96]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004936:	d105      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004938:	4b13      	ldr	r3, [pc, #76]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	4a12      	ldr	r2, [pc, #72]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800493e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004942:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d015      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004950:	4b0d      	ldr	r3, [pc, #52]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004952:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004956:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800495e:	490a      	ldr	r1, [pc, #40]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800496a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800496e:	d105      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004970:	4b05      	ldr	r3, [pc, #20]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	4a04      	ldr	r2, [pc, #16]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004976:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800497a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800497c:	7cbb      	ldrb	r3, [r7, #18]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3718      	adds	r7, #24
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	40021000 	.word	0x40021000

0800498c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e049      	b.n	8004a32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d106      	bne.n	80049b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7fc fa82 	bl	8000ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3304      	adds	r3, #4
 80049c8:	4619      	mov	r1, r3
 80049ca:	4610      	mov	r0, r2
 80049cc:	f000 fefa 	bl	80057c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d001      	beq.n	8004a54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e04c      	b.n	8004aee <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a26      	ldr	r2, [pc, #152]	@ (8004afc <HAL_TIM_Base_Start+0xc0>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d022      	beq.n	8004aac <HAL_TIM_Base_Start+0x70>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a6e:	d01d      	beq.n	8004aac <HAL_TIM_Base_Start+0x70>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a22      	ldr	r2, [pc, #136]	@ (8004b00 <HAL_TIM_Base_Start+0xc4>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d018      	beq.n	8004aac <HAL_TIM_Base_Start+0x70>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a21      	ldr	r2, [pc, #132]	@ (8004b04 <HAL_TIM_Base_Start+0xc8>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d013      	beq.n	8004aac <HAL_TIM_Base_Start+0x70>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a1f      	ldr	r2, [pc, #124]	@ (8004b08 <HAL_TIM_Base_Start+0xcc>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00e      	beq.n	8004aac <HAL_TIM_Base_Start+0x70>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a1e      	ldr	r2, [pc, #120]	@ (8004b0c <HAL_TIM_Base_Start+0xd0>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d009      	beq.n	8004aac <HAL_TIM_Base_Start+0x70>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a1c      	ldr	r2, [pc, #112]	@ (8004b10 <HAL_TIM_Base_Start+0xd4>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d004      	beq.n	8004aac <HAL_TIM_Base_Start+0x70>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a1b      	ldr	r2, [pc, #108]	@ (8004b14 <HAL_TIM_Base_Start+0xd8>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d115      	bne.n	8004ad8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	4b19      	ldr	r3, [pc, #100]	@ (8004b18 <HAL_TIM_Base_Start+0xdc>)
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b06      	cmp	r3, #6
 8004abc:	d015      	beq.n	8004aea <HAL_TIM_Base_Start+0xae>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ac4:	d011      	beq.n	8004aea <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f042 0201 	orr.w	r2, r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad6:	e008      	b.n	8004aea <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0201 	orr.w	r2, r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	e000      	b.n	8004aec <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	40012c00 	.word	0x40012c00
 8004b00:	40000400 	.word	0x40000400
 8004b04:	40000800 	.word	0x40000800
 8004b08:	40000c00 	.word	0x40000c00
 8004b0c:	40013400 	.word	0x40013400
 8004b10:	40014000 	.word	0x40014000
 8004b14:	40015000 	.word	0x40015000
 8004b18:	00010007 	.word	0x00010007

08004b1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e049      	b.n	8004bc2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f841 	bl	8004bca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	3304      	adds	r3, #4
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4610      	mov	r0, r2
 8004b5c:	f000 fe32 	bl	80057c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
	...

08004be0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d109      	bne.n	8004c04 <HAL_TIM_PWM_Start+0x24>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	bf14      	ite	ne
 8004bfc:	2301      	movne	r3, #1
 8004bfe:	2300      	moveq	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	e03c      	b.n	8004c7e <HAL_TIM_PWM_Start+0x9e>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2b04      	cmp	r3, #4
 8004c08:	d109      	bne.n	8004c1e <HAL_TIM_PWM_Start+0x3e>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	bf14      	ite	ne
 8004c16:	2301      	movne	r3, #1
 8004c18:	2300      	moveq	r3, #0
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	e02f      	b.n	8004c7e <HAL_TIM_PWM_Start+0x9e>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d109      	bne.n	8004c38 <HAL_TIM_PWM_Start+0x58>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	bf14      	ite	ne
 8004c30:	2301      	movne	r3, #1
 8004c32:	2300      	moveq	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	e022      	b.n	8004c7e <HAL_TIM_PWM_Start+0x9e>
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	2b0c      	cmp	r3, #12
 8004c3c:	d109      	bne.n	8004c52 <HAL_TIM_PWM_Start+0x72>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	bf14      	ite	ne
 8004c4a:	2301      	movne	r3, #1
 8004c4c:	2300      	moveq	r3, #0
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	e015      	b.n	8004c7e <HAL_TIM_PWM_Start+0x9e>
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b10      	cmp	r3, #16
 8004c56:	d109      	bne.n	8004c6c <HAL_TIM_PWM_Start+0x8c>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	bf14      	ite	ne
 8004c64:	2301      	movne	r3, #1
 8004c66:	2300      	moveq	r3, #0
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	e008      	b.n	8004c7e <HAL_TIM_PWM_Start+0x9e>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	bf14      	ite	ne
 8004c78:	2301      	movne	r3, #1
 8004c7a:	2300      	moveq	r3, #0
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e0a6      	b.n	8004dd4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d104      	bne.n	8004c96 <HAL_TIM_PWM_Start+0xb6>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c94:	e023      	b.n	8004cde <HAL_TIM_PWM_Start+0xfe>
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	d104      	bne.n	8004ca6 <HAL_TIM_PWM_Start+0xc6>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ca4:	e01b      	b.n	8004cde <HAL_TIM_PWM_Start+0xfe>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d104      	bne.n	8004cb6 <HAL_TIM_PWM_Start+0xd6>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cb4:	e013      	b.n	8004cde <HAL_TIM_PWM_Start+0xfe>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b0c      	cmp	r3, #12
 8004cba:	d104      	bne.n	8004cc6 <HAL_TIM_PWM_Start+0xe6>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004cc4:	e00b      	b.n	8004cde <HAL_TIM_PWM_Start+0xfe>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b10      	cmp	r3, #16
 8004cca:	d104      	bne.n	8004cd6 <HAL_TIM_PWM_Start+0xf6>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cd4:	e003      	b.n	8004cde <HAL_TIM_PWM_Start+0xfe>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2202      	movs	r2, #2
 8004cda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	6839      	ldr	r1, [r7, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f001 f9e6 	bl	80060b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a3a      	ldr	r2, [pc, #232]	@ (8004ddc <HAL_TIM_PWM_Start+0x1fc>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d018      	beq.n	8004d28 <HAL_TIM_PWM_Start+0x148>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a39      	ldr	r2, [pc, #228]	@ (8004de0 <HAL_TIM_PWM_Start+0x200>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d013      	beq.n	8004d28 <HAL_TIM_PWM_Start+0x148>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a37      	ldr	r2, [pc, #220]	@ (8004de4 <HAL_TIM_PWM_Start+0x204>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d00e      	beq.n	8004d28 <HAL_TIM_PWM_Start+0x148>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a36      	ldr	r2, [pc, #216]	@ (8004de8 <HAL_TIM_PWM_Start+0x208>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d009      	beq.n	8004d28 <HAL_TIM_PWM_Start+0x148>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a34      	ldr	r2, [pc, #208]	@ (8004dec <HAL_TIM_PWM_Start+0x20c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d004      	beq.n	8004d28 <HAL_TIM_PWM_Start+0x148>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a33      	ldr	r2, [pc, #204]	@ (8004df0 <HAL_TIM_PWM_Start+0x210>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d101      	bne.n	8004d2c <HAL_TIM_PWM_Start+0x14c>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e000      	b.n	8004d2e <HAL_TIM_PWM_Start+0x14e>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d007      	beq.n	8004d42 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d40:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a25      	ldr	r2, [pc, #148]	@ (8004ddc <HAL_TIM_PWM_Start+0x1fc>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d022      	beq.n	8004d92 <HAL_TIM_PWM_Start+0x1b2>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d54:	d01d      	beq.n	8004d92 <HAL_TIM_PWM_Start+0x1b2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a26      	ldr	r2, [pc, #152]	@ (8004df4 <HAL_TIM_PWM_Start+0x214>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d018      	beq.n	8004d92 <HAL_TIM_PWM_Start+0x1b2>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a24      	ldr	r2, [pc, #144]	@ (8004df8 <HAL_TIM_PWM_Start+0x218>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d013      	beq.n	8004d92 <HAL_TIM_PWM_Start+0x1b2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a23      	ldr	r2, [pc, #140]	@ (8004dfc <HAL_TIM_PWM_Start+0x21c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d00e      	beq.n	8004d92 <HAL_TIM_PWM_Start+0x1b2>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a19      	ldr	r2, [pc, #100]	@ (8004de0 <HAL_TIM_PWM_Start+0x200>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d009      	beq.n	8004d92 <HAL_TIM_PWM_Start+0x1b2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a18      	ldr	r2, [pc, #96]	@ (8004de4 <HAL_TIM_PWM_Start+0x204>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d004      	beq.n	8004d92 <HAL_TIM_PWM_Start+0x1b2>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a18      	ldr	r2, [pc, #96]	@ (8004df0 <HAL_TIM_PWM_Start+0x210>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d115      	bne.n	8004dbe <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	4b19      	ldr	r3, [pc, #100]	@ (8004e00 <HAL_TIM_PWM_Start+0x220>)
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2b06      	cmp	r3, #6
 8004da2:	d015      	beq.n	8004dd0 <HAL_TIM_PWM_Start+0x1f0>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004daa:	d011      	beq.n	8004dd0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f042 0201 	orr.w	r2, r2, #1
 8004dba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dbc:	e008      	b.n	8004dd0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f042 0201 	orr.w	r2, r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	e000      	b.n	8004dd2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40012c00 	.word	0x40012c00
 8004de0:	40013400 	.word	0x40013400
 8004de4:	40014000 	.word	0x40014000
 8004de8:	40014400 	.word	0x40014400
 8004dec:	40014800 	.word	0x40014800
 8004df0:	40015000 	.word	0x40015000
 8004df4:	40000400 	.word	0x40000400
 8004df8:	40000800 	.word	0x40000800
 8004dfc:	40000c00 	.word	0x40000c00
 8004e00:	00010007 	.word	0x00010007

08004e04 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e097      	b.n	8004f48 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d106      	bne.n	8004e32 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7fc f87f 	bl	8000f30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2202      	movs	r2, #2
 8004e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6812      	ldr	r2, [r2, #0]
 8004e44:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004e48:	f023 0307 	bic.w	r3, r3, #7
 8004e4c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3304      	adds	r3, #4
 8004e56:	4619      	mov	r1, r3
 8004e58:	4610      	mov	r0, r2
 8004e5a:	f000 fcb3 	bl	80057c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e86:	f023 0303 	bic.w	r3, r3, #3
 8004e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	021b      	lsls	r3, r3, #8
 8004e96:	4313      	orrs	r3, r2
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004ea4:	f023 030c 	bic.w	r3, r3, #12
 8004ea8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004eb0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004eb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	021b      	lsls	r3, r3, #8
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	011a      	lsls	r2, r3, #4
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	031b      	lsls	r3, r3, #12
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004ee2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004eea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	011b      	lsls	r3, r3, #4
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f60:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f68:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f70:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f78:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d110      	bne.n	8004fa2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d102      	bne.n	8004f8c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f86:	7b7b      	ldrb	r3, [r7, #13]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d001      	beq.n	8004f90 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e069      	b.n	8005064 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fa0:	e031      	b.n	8005006 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d110      	bne.n	8004fca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fa8:	7bbb      	ldrb	r3, [r7, #14]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d102      	bne.n	8004fb4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fae:	7b3b      	ldrb	r3, [r7, #12]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d001      	beq.n	8004fb8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e055      	b.n	8005064 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fc8:	e01d      	b.n	8005006 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d108      	bne.n	8004fe2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fd0:	7bbb      	ldrb	r3, [r7, #14]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d105      	bne.n	8004fe2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fd6:	7b7b      	ldrb	r3, [r7, #13]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d102      	bne.n	8004fe2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fdc:	7b3b      	ldrb	r3, [r7, #12]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d001      	beq.n	8004fe6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e03e      	b.n	8005064 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2202      	movs	r2, #2
 8004fea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2202      	movs	r2, #2
 8005002:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <HAL_TIM_Encoder_Start+0xc4>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b04      	cmp	r3, #4
 8005010:	d008      	beq.n	8005024 <HAL_TIM_Encoder_Start+0xd4>
 8005012:	e00f      	b.n	8005034 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2201      	movs	r2, #1
 800501a:	2100      	movs	r1, #0
 800501c:	4618      	mov	r0, r3
 800501e:	f001 f84b 	bl	80060b8 <TIM_CCxChannelCmd>
      break;
 8005022:	e016      	b.n	8005052 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2201      	movs	r2, #1
 800502a:	2104      	movs	r1, #4
 800502c:	4618      	mov	r0, r3
 800502e:	f001 f843 	bl	80060b8 <TIM_CCxChannelCmd>
      break;
 8005032:	e00e      	b.n	8005052 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2201      	movs	r2, #1
 800503a:	2100      	movs	r1, #0
 800503c:	4618      	mov	r0, r3
 800503e:	f001 f83b 	bl	80060b8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2201      	movs	r2, #1
 8005048:	2104      	movs	r1, #4
 800504a:	4618      	mov	r0, r3
 800504c:	f001 f834 	bl	80060b8 <TIM_CCxChannelCmd>
      break;
 8005050:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f042 0201 	orr.w	r2, r2, #1
 8005060:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d020      	beq.n	80050d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d01b      	beq.n	80050d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f06f 0202 	mvn.w	r2, #2
 80050a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 fb66 	bl	8005788 <HAL_TIM_IC_CaptureCallback>
 80050bc:	e005      	b.n	80050ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fb58 	bl	8005774 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fb69 	bl	800579c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	f003 0304 	and.w	r3, r3, #4
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d020      	beq.n	800511c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d01b      	beq.n	800511c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f06f 0204 	mvn.w	r2, #4
 80050ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2202      	movs	r2, #2
 80050f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 fb40 	bl	8005788 <HAL_TIM_IC_CaptureCallback>
 8005108:	e005      	b.n	8005116 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fb32 	bl	8005774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fb43 	bl	800579c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f003 0308 	and.w	r3, r3, #8
 8005122:	2b00      	cmp	r3, #0
 8005124:	d020      	beq.n	8005168 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f003 0308 	and.w	r3, r3, #8
 800512c:	2b00      	cmp	r3, #0
 800512e:	d01b      	beq.n	8005168 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f06f 0208 	mvn.w	r2, #8
 8005138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2204      	movs	r2, #4
 800513e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d003      	beq.n	8005156 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fb1a 	bl	8005788 <HAL_TIM_IC_CaptureCallback>
 8005154:	e005      	b.n	8005162 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 fb0c 	bl	8005774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 fb1d 	bl	800579c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f003 0310 	and.w	r3, r3, #16
 800516e:	2b00      	cmp	r3, #0
 8005170:	d020      	beq.n	80051b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f003 0310 	and.w	r3, r3, #16
 8005178:	2b00      	cmp	r3, #0
 800517a:	d01b      	beq.n	80051b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f06f 0210 	mvn.w	r2, #16
 8005184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2208      	movs	r2, #8
 800518a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 faf4 	bl	8005788 <HAL_TIM_IC_CaptureCallback>
 80051a0:	e005      	b.n	80051ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fae6 	bl	8005774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 faf7 	bl	800579c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00c      	beq.n	80051d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d007      	beq.n	80051d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f06f 0201 	mvn.w	r2, #1
 80051d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fac4 	bl	8005760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d104      	bne.n	80051ec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00c      	beq.n	8005206 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d007      	beq.n	8005206 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80051fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f001 f81f 	bl	8006244 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00c      	beq.n	800522a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005216:	2b00      	cmp	r3, #0
 8005218:	d007      	beq.n	800522a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f001 f817 	bl	8006258 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00c      	beq.n	800524e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	d007      	beq.n	800524e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fab1 	bl	80057b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	f003 0320 	and.w	r3, r3, #32
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00c      	beq.n	8005272 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f003 0320 	and.w	r3, r3, #32
 800525e:	2b00      	cmp	r3, #0
 8005260:	d007      	beq.n	8005272 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f06f 0220 	mvn.w	r2, #32
 800526a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 ffdf 	bl	8006230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00c      	beq.n	8005296 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d007      	beq.n	8005296 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800528e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 ffeb 	bl	800626c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00c      	beq.n	80052ba <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d007      	beq.n	80052ba <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80052b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 ffe3 	bl	8006280 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00c      	beq.n	80052de <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d007      	beq.n	80052de <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80052d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 ffdb 	bl	8006294 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00c      	beq.n	8005302 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d007      	beq.n	8005302 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80052fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 ffd3 	bl	80062a8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005302:	bf00      	nop
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
	...

0800530c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005318:	2300      	movs	r3, #0
 800531a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005322:	2b01      	cmp	r3, #1
 8005324:	d101      	bne.n	800532a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005326:	2302      	movs	r3, #2
 8005328:	e0ff      	b.n	800552a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b14      	cmp	r3, #20
 8005336:	f200 80f0 	bhi.w	800551a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800533a:	a201      	add	r2, pc, #4	@ (adr r2, 8005340 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800533c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005340:	08005395 	.word	0x08005395
 8005344:	0800551b 	.word	0x0800551b
 8005348:	0800551b 	.word	0x0800551b
 800534c:	0800551b 	.word	0x0800551b
 8005350:	080053d5 	.word	0x080053d5
 8005354:	0800551b 	.word	0x0800551b
 8005358:	0800551b 	.word	0x0800551b
 800535c:	0800551b 	.word	0x0800551b
 8005360:	08005417 	.word	0x08005417
 8005364:	0800551b 	.word	0x0800551b
 8005368:	0800551b 	.word	0x0800551b
 800536c:	0800551b 	.word	0x0800551b
 8005370:	08005457 	.word	0x08005457
 8005374:	0800551b 	.word	0x0800551b
 8005378:	0800551b 	.word	0x0800551b
 800537c:	0800551b 	.word	0x0800551b
 8005380:	08005499 	.word	0x08005499
 8005384:	0800551b 	.word	0x0800551b
 8005388:	0800551b 	.word	0x0800551b
 800538c:	0800551b 	.word	0x0800551b
 8005390:	080054d9 	.word	0x080054d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68b9      	ldr	r1, [r7, #8]
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fac6 	bl	800592c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699a      	ldr	r2, [r3, #24]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0208 	orr.w	r2, r2, #8
 80053ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699a      	ldr	r2, [r3, #24]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 0204 	bic.w	r2, r2, #4
 80053be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6999      	ldr	r1, [r3, #24]
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	691a      	ldr	r2, [r3, #16]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	619a      	str	r2, [r3, #24]
      break;
 80053d2:	e0a5      	b.n	8005520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 fb40 	bl	8005a60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699a      	ldr	r2, [r3, #24]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699a      	ldr	r2, [r3, #24]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6999      	ldr	r1, [r3, #24]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	021a      	lsls	r2, r3, #8
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	619a      	str	r2, [r3, #24]
      break;
 8005414:	e084      	b.n	8005520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68b9      	ldr	r1, [r7, #8]
 800541c:	4618      	mov	r0, r3
 800541e:	f000 fbb3 	bl	8005b88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	69da      	ldr	r2, [r3, #28]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f042 0208 	orr.w	r2, r2, #8
 8005430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69da      	ldr	r2, [r3, #28]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0204 	bic.w	r2, r2, #4
 8005440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69d9      	ldr	r1, [r3, #28]
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	61da      	str	r2, [r3, #28]
      break;
 8005454:	e064      	b.n	8005520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68b9      	ldr	r1, [r7, #8]
 800545c:	4618      	mov	r0, r3
 800545e:	f000 fc25 	bl	8005cac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	69da      	ldr	r2, [r3, #28]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	69da      	ldr	r2, [r3, #28]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	69d9      	ldr	r1, [r3, #28]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	021a      	lsls	r2, r3, #8
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	61da      	str	r2, [r3, #28]
      break;
 8005496:	e043      	b.n	8005520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68b9      	ldr	r1, [r7, #8]
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 fc98 	bl	8005dd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0208 	orr.w	r2, r2, #8
 80054b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0204 	bic.w	r2, r2, #4
 80054c2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	691a      	ldr	r2, [r3, #16]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80054d6:	e023      	b.n	8005520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68b9      	ldr	r1, [r7, #8]
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fce2 	bl	8005ea8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054f2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005502:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	021a      	lsls	r2, r3, #8
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005518:	e002      	b.n	8005520 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	75fb      	strb	r3, [r7, #23]
      break;
 800551e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005528:	7dfb      	ldrb	r3, [r7, #23]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3718      	adds	r7, #24
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop

08005534 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005548:	2b01      	cmp	r3, #1
 800554a:	d101      	bne.n	8005550 <HAL_TIM_ConfigClockSource+0x1c>
 800554c:	2302      	movs	r3, #2
 800554e:	e0f6      	b.n	800573e <HAL_TIM_ConfigClockSource+0x20a>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800556e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800557a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a6f      	ldr	r2, [pc, #444]	@ (8005748 <HAL_TIM_ConfigClockSource+0x214>)
 800558a:	4293      	cmp	r3, r2
 800558c:	f000 80c1 	beq.w	8005712 <HAL_TIM_ConfigClockSource+0x1de>
 8005590:	4a6d      	ldr	r2, [pc, #436]	@ (8005748 <HAL_TIM_ConfigClockSource+0x214>)
 8005592:	4293      	cmp	r3, r2
 8005594:	f200 80c6 	bhi.w	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 8005598:	4a6c      	ldr	r2, [pc, #432]	@ (800574c <HAL_TIM_ConfigClockSource+0x218>)
 800559a:	4293      	cmp	r3, r2
 800559c:	f000 80b9 	beq.w	8005712 <HAL_TIM_ConfigClockSource+0x1de>
 80055a0:	4a6a      	ldr	r2, [pc, #424]	@ (800574c <HAL_TIM_ConfigClockSource+0x218>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	f200 80be 	bhi.w	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 80055a8:	4a69      	ldr	r2, [pc, #420]	@ (8005750 <HAL_TIM_ConfigClockSource+0x21c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	f000 80b1 	beq.w	8005712 <HAL_TIM_ConfigClockSource+0x1de>
 80055b0:	4a67      	ldr	r2, [pc, #412]	@ (8005750 <HAL_TIM_ConfigClockSource+0x21c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	f200 80b6 	bhi.w	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 80055b8:	4a66      	ldr	r2, [pc, #408]	@ (8005754 <HAL_TIM_ConfigClockSource+0x220>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	f000 80a9 	beq.w	8005712 <HAL_TIM_ConfigClockSource+0x1de>
 80055c0:	4a64      	ldr	r2, [pc, #400]	@ (8005754 <HAL_TIM_ConfigClockSource+0x220>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	f200 80ae 	bhi.w	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 80055c8:	4a63      	ldr	r2, [pc, #396]	@ (8005758 <HAL_TIM_ConfigClockSource+0x224>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	f000 80a1 	beq.w	8005712 <HAL_TIM_ConfigClockSource+0x1de>
 80055d0:	4a61      	ldr	r2, [pc, #388]	@ (8005758 <HAL_TIM_ConfigClockSource+0x224>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	f200 80a6 	bhi.w	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 80055d8:	4a60      	ldr	r2, [pc, #384]	@ (800575c <HAL_TIM_ConfigClockSource+0x228>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	f000 8099 	beq.w	8005712 <HAL_TIM_ConfigClockSource+0x1de>
 80055e0:	4a5e      	ldr	r2, [pc, #376]	@ (800575c <HAL_TIM_ConfigClockSource+0x228>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	f200 809e 	bhi.w	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 80055e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80055ec:	f000 8091 	beq.w	8005712 <HAL_TIM_ConfigClockSource+0x1de>
 80055f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80055f4:	f200 8096 	bhi.w	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 80055f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055fc:	f000 8089 	beq.w	8005712 <HAL_TIM_ConfigClockSource+0x1de>
 8005600:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005604:	f200 808e 	bhi.w	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 8005608:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800560c:	d03e      	beq.n	800568c <HAL_TIM_ConfigClockSource+0x158>
 800560e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005612:	f200 8087 	bhi.w	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 8005616:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800561a:	f000 8086 	beq.w	800572a <HAL_TIM_ConfigClockSource+0x1f6>
 800561e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005622:	d87f      	bhi.n	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 8005624:	2b70      	cmp	r3, #112	@ 0x70
 8005626:	d01a      	beq.n	800565e <HAL_TIM_ConfigClockSource+0x12a>
 8005628:	2b70      	cmp	r3, #112	@ 0x70
 800562a:	d87b      	bhi.n	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 800562c:	2b60      	cmp	r3, #96	@ 0x60
 800562e:	d050      	beq.n	80056d2 <HAL_TIM_ConfigClockSource+0x19e>
 8005630:	2b60      	cmp	r3, #96	@ 0x60
 8005632:	d877      	bhi.n	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 8005634:	2b50      	cmp	r3, #80	@ 0x50
 8005636:	d03c      	beq.n	80056b2 <HAL_TIM_ConfigClockSource+0x17e>
 8005638:	2b50      	cmp	r3, #80	@ 0x50
 800563a:	d873      	bhi.n	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 800563c:	2b40      	cmp	r3, #64	@ 0x40
 800563e:	d058      	beq.n	80056f2 <HAL_TIM_ConfigClockSource+0x1be>
 8005640:	2b40      	cmp	r3, #64	@ 0x40
 8005642:	d86f      	bhi.n	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 8005644:	2b30      	cmp	r3, #48	@ 0x30
 8005646:	d064      	beq.n	8005712 <HAL_TIM_ConfigClockSource+0x1de>
 8005648:	2b30      	cmp	r3, #48	@ 0x30
 800564a:	d86b      	bhi.n	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 800564c:	2b20      	cmp	r3, #32
 800564e:	d060      	beq.n	8005712 <HAL_TIM_ConfigClockSource+0x1de>
 8005650:	2b20      	cmp	r3, #32
 8005652:	d867      	bhi.n	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 8005654:	2b00      	cmp	r3, #0
 8005656:	d05c      	beq.n	8005712 <HAL_TIM_ConfigClockSource+0x1de>
 8005658:	2b10      	cmp	r3, #16
 800565a:	d05a      	beq.n	8005712 <HAL_TIM_ConfigClockSource+0x1de>
 800565c:	e062      	b.n	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800566e:	f000 fd03 	bl	8006078 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005680:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	609a      	str	r2, [r3, #8]
      break;
 800568a:	e04f      	b.n	800572c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800569c:	f000 fcec 	bl	8006078 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689a      	ldr	r2, [r3, #8]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056ae:	609a      	str	r2, [r3, #8]
      break;
 80056b0:	e03c      	b.n	800572c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056be:	461a      	mov	r2, r3
 80056c0:	f000 fc5e 	bl	8005f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2150      	movs	r1, #80	@ 0x50
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 fcb7 	bl	800603e <TIM_ITRx_SetConfig>
      break;
 80056d0:	e02c      	b.n	800572c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056de:	461a      	mov	r2, r3
 80056e0:	f000 fc7d 	bl	8005fde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2160      	movs	r1, #96	@ 0x60
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fca7 	bl	800603e <TIM_ITRx_SetConfig>
      break;
 80056f0:	e01c      	b.n	800572c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056fe:	461a      	mov	r2, r3
 8005700:	f000 fc3e 	bl	8005f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2140      	movs	r1, #64	@ 0x40
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fc97 	bl	800603e <TIM_ITRx_SetConfig>
      break;
 8005710:	e00c      	b.n	800572c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4619      	mov	r1, r3
 800571c:	4610      	mov	r0, r2
 800571e:	f000 fc8e 	bl	800603e <TIM_ITRx_SetConfig>
      break;
 8005722:	e003      	b.n	800572c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	73fb      	strb	r3, [r7, #15]
      break;
 8005728:	e000      	b.n	800572c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800572a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800573c:	7bfb      	ldrb	r3, [r7, #15]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	00100070 	.word	0x00100070
 800574c:	00100060 	.word	0x00100060
 8005750:	00100050 	.word	0x00100050
 8005754:	00100040 	.word	0x00100040
 8005758:	00100030 	.word	0x00100030
 800575c:	00100020 	.word	0x00100020

08005760 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a4c      	ldr	r2, [pc, #304]	@ (8005908 <TIM_Base_SetConfig+0x144>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d017      	beq.n	800580c <TIM_Base_SetConfig+0x48>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057e2:	d013      	beq.n	800580c <TIM_Base_SetConfig+0x48>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a49      	ldr	r2, [pc, #292]	@ (800590c <TIM_Base_SetConfig+0x148>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00f      	beq.n	800580c <TIM_Base_SetConfig+0x48>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a48      	ldr	r2, [pc, #288]	@ (8005910 <TIM_Base_SetConfig+0x14c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d00b      	beq.n	800580c <TIM_Base_SetConfig+0x48>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a47      	ldr	r2, [pc, #284]	@ (8005914 <TIM_Base_SetConfig+0x150>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d007      	beq.n	800580c <TIM_Base_SetConfig+0x48>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a46      	ldr	r2, [pc, #280]	@ (8005918 <TIM_Base_SetConfig+0x154>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d003      	beq.n	800580c <TIM_Base_SetConfig+0x48>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a45      	ldr	r2, [pc, #276]	@ (800591c <TIM_Base_SetConfig+0x158>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d108      	bne.n	800581e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	4313      	orrs	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a39      	ldr	r2, [pc, #228]	@ (8005908 <TIM_Base_SetConfig+0x144>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d023      	beq.n	800586e <TIM_Base_SetConfig+0xaa>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800582c:	d01f      	beq.n	800586e <TIM_Base_SetConfig+0xaa>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a36      	ldr	r2, [pc, #216]	@ (800590c <TIM_Base_SetConfig+0x148>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d01b      	beq.n	800586e <TIM_Base_SetConfig+0xaa>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a35      	ldr	r2, [pc, #212]	@ (8005910 <TIM_Base_SetConfig+0x14c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d017      	beq.n	800586e <TIM_Base_SetConfig+0xaa>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a34      	ldr	r2, [pc, #208]	@ (8005914 <TIM_Base_SetConfig+0x150>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d013      	beq.n	800586e <TIM_Base_SetConfig+0xaa>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a33      	ldr	r2, [pc, #204]	@ (8005918 <TIM_Base_SetConfig+0x154>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d00f      	beq.n	800586e <TIM_Base_SetConfig+0xaa>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a33      	ldr	r2, [pc, #204]	@ (8005920 <TIM_Base_SetConfig+0x15c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00b      	beq.n	800586e <TIM_Base_SetConfig+0xaa>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a32      	ldr	r2, [pc, #200]	@ (8005924 <TIM_Base_SetConfig+0x160>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d007      	beq.n	800586e <TIM_Base_SetConfig+0xaa>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a31      	ldr	r2, [pc, #196]	@ (8005928 <TIM_Base_SetConfig+0x164>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d003      	beq.n	800586e <TIM_Base_SetConfig+0xaa>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a2c      	ldr	r2, [pc, #176]	@ (800591c <TIM_Base_SetConfig+0x158>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d108      	bne.n	8005880 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	4313      	orrs	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a18      	ldr	r2, [pc, #96]	@ (8005908 <TIM_Base_SetConfig+0x144>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d013      	beq.n	80058d4 <TIM_Base_SetConfig+0x110>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a1a      	ldr	r2, [pc, #104]	@ (8005918 <TIM_Base_SetConfig+0x154>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d00f      	beq.n	80058d4 <TIM_Base_SetConfig+0x110>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a1a      	ldr	r2, [pc, #104]	@ (8005920 <TIM_Base_SetConfig+0x15c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d00b      	beq.n	80058d4 <TIM_Base_SetConfig+0x110>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a19      	ldr	r2, [pc, #100]	@ (8005924 <TIM_Base_SetConfig+0x160>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d007      	beq.n	80058d4 <TIM_Base_SetConfig+0x110>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a18      	ldr	r2, [pc, #96]	@ (8005928 <TIM_Base_SetConfig+0x164>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d003      	beq.n	80058d4 <TIM_Base_SetConfig+0x110>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a13      	ldr	r2, [pc, #76]	@ (800591c <TIM_Base_SetConfig+0x158>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d103      	bne.n	80058dc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	691a      	ldr	r2, [r3, #16]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d105      	bne.n	80058fa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f023 0201 	bic.w	r2, r3, #1
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	611a      	str	r2, [r3, #16]
  }
}
 80058fa:	bf00      	nop
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	40012c00 	.word	0x40012c00
 800590c:	40000400 	.word	0x40000400
 8005910:	40000800 	.word	0x40000800
 8005914:	40000c00 	.word	0x40000c00
 8005918:	40013400 	.word	0x40013400
 800591c:	40015000 	.word	0x40015000
 8005920:	40014000 	.word	0x40014000
 8005924:	40014400 	.word	0x40014400
 8005928:	40014800 	.word	0x40014800

0800592c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	f023 0201 	bic.w	r2, r3, #1
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800595a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800595e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 0303 	bic.w	r3, r3, #3
 8005966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f023 0302 	bic.w	r3, r3, #2
 8005978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	4313      	orrs	r3, r2
 8005982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a30      	ldr	r2, [pc, #192]	@ (8005a48 <TIM_OC1_SetConfig+0x11c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d013      	beq.n	80059b4 <TIM_OC1_SetConfig+0x88>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a2f      	ldr	r2, [pc, #188]	@ (8005a4c <TIM_OC1_SetConfig+0x120>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d00f      	beq.n	80059b4 <TIM_OC1_SetConfig+0x88>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a2e      	ldr	r2, [pc, #184]	@ (8005a50 <TIM_OC1_SetConfig+0x124>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d00b      	beq.n	80059b4 <TIM_OC1_SetConfig+0x88>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a2d      	ldr	r2, [pc, #180]	@ (8005a54 <TIM_OC1_SetConfig+0x128>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d007      	beq.n	80059b4 <TIM_OC1_SetConfig+0x88>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a2c      	ldr	r2, [pc, #176]	@ (8005a58 <TIM_OC1_SetConfig+0x12c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d003      	beq.n	80059b4 <TIM_OC1_SetConfig+0x88>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a2b      	ldr	r2, [pc, #172]	@ (8005a5c <TIM_OC1_SetConfig+0x130>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d10c      	bne.n	80059ce <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f023 0308 	bic.w	r3, r3, #8
 80059ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f023 0304 	bic.w	r3, r3, #4
 80059cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005a48 <TIM_OC1_SetConfig+0x11c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d013      	beq.n	80059fe <TIM_OC1_SetConfig+0xd2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a1c      	ldr	r2, [pc, #112]	@ (8005a4c <TIM_OC1_SetConfig+0x120>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00f      	beq.n	80059fe <TIM_OC1_SetConfig+0xd2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005a50 <TIM_OC1_SetConfig+0x124>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d00b      	beq.n	80059fe <TIM_OC1_SetConfig+0xd2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a1a      	ldr	r2, [pc, #104]	@ (8005a54 <TIM_OC1_SetConfig+0x128>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d007      	beq.n	80059fe <TIM_OC1_SetConfig+0xd2>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a19      	ldr	r2, [pc, #100]	@ (8005a58 <TIM_OC1_SetConfig+0x12c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d003      	beq.n	80059fe <TIM_OC1_SetConfig+0xd2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a18      	ldr	r2, [pc, #96]	@ (8005a5c <TIM_OC1_SetConfig+0x130>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d111      	bne.n	8005a22 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	685a      	ldr	r2, [r3, #4]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	621a      	str	r2, [r3, #32]
}
 8005a3c:	bf00      	nop
 8005a3e:	371c      	adds	r7, #28
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	40012c00 	.word	0x40012c00
 8005a4c:	40013400 	.word	0x40013400
 8005a50:	40014000 	.word	0x40014000
 8005a54:	40014400 	.word	0x40014400
 8005a58:	40014800 	.word	0x40014800
 8005a5c:	40015000 	.word	0x40015000

08005a60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	f023 0210 	bic.w	r2, r3, #16
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	021b      	lsls	r3, r3, #8
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f023 0320 	bic.w	r3, r3, #32
 8005aae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	011b      	lsls	r3, r3, #4
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a2c      	ldr	r2, [pc, #176]	@ (8005b70 <TIM_OC2_SetConfig+0x110>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d007      	beq.n	8005ad4 <TIM_OC2_SetConfig+0x74>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a2b      	ldr	r2, [pc, #172]	@ (8005b74 <TIM_OC2_SetConfig+0x114>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d003      	beq.n	8005ad4 <TIM_OC2_SetConfig+0x74>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a2a      	ldr	r2, [pc, #168]	@ (8005b78 <TIM_OC2_SetConfig+0x118>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d10d      	bne.n	8005af0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	011b      	lsls	r3, r3, #4
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005aee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a1f      	ldr	r2, [pc, #124]	@ (8005b70 <TIM_OC2_SetConfig+0x110>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d013      	beq.n	8005b20 <TIM_OC2_SetConfig+0xc0>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a1e      	ldr	r2, [pc, #120]	@ (8005b74 <TIM_OC2_SetConfig+0x114>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d00f      	beq.n	8005b20 <TIM_OC2_SetConfig+0xc0>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a1e      	ldr	r2, [pc, #120]	@ (8005b7c <TIM_OC2_SetConfig+0x11c>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d00b      	beq.n	8005b20 <TIM_OC2_SetConfig+0xc0>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a1d      	ldr	r2, [pc, #116]	@ (8005b80 <TIM_OC2_SetConfig+0x120>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d007      	beq.n	8005b20 <TIM_OC2_SetConfig+0xc0>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a1c      	ldr	r2, [pc, #112]	@ (8005b84 <TIM_OC2_SetConfig+0x124>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d003      	beq.n	8005b20 <TIM_OC2_SetConfig+0xc0>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a17      	ldr	r2, [pc, #92]	@ (8005b78 <TIM_OC2_SetConfig+0x118>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d113      	bne.n	8005b48 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	621a      	str	r2, [r3, #32]
}
 8005b62:	bf00      	nop
 8005b64:	371c      	adds	r7, #28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	40012c00 	.word	0x40012c00
 8005b74:	40013400 	.word	0x40013400
 8005b78:	40015000 	.word	0x40015000
 8005b7c:	40014000 	.word	0x40014000
 8005b80:	40014400 	.word	0x40014400
 8005b84:	40014800 	.word	0x40014800

08005b88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f023 0303 	bic.w	r3, r3, #3
 8005bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005bd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	021b      	lsls	r3, r3, #8
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a2b      	ldr	r2, [pc, #172]	@ (8005c94 <TIM_OC3_SetConfig+0x10c>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d007      	beq.n	8005bfa <TIM_OC3_SetConfig+0x72>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a2a      	ldr	r2, [pc, #168]	@ (8005c98 <TIM_OC3_SetConfig+0x110>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d003      	beq.n	8005bfa <TIM_OC3_SetConfig+0x72>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a29      	ldr	r2, [pc, #164]	@ (8005c9c <TIM_OC3_SetConfig+0x114>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d10d      	bne.n	8005c16 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	021b      	lsls	r3, r3, #8
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a1e      	ldr	r2, [pc, #120]	@ (8005c94 <TIM_OC3_SetConfig+0x10c>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d013      	beq.n	8005c46 <TIM_OC3_SetConfig+0xbe>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a1d      	ldr	r2, [pc, #116]	@ (8005c98 <TIM_OC3_SetConfig+0x110>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d00f      	beq.n	8005c46 <TIM_OC3_SetConfig+0xbe>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a1d      	ldr	r2, [pc, #116]	@ (8005ca0 <TIM_OC3_SetConfig+0x118>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d00b      	beq.n	8005c46 <TIM_OC3_SetConfig+0xbe>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a1c      	ldr	r2, [pc, #112]	@ (8005ca4 <TIM_OC3_SetConfig+0x11c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d007      	beq.n	8005c46 <TIM_OC3_SetConfig+0xbe>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a1b      	ldr	r2, [pc, #108]	@ (8005ca8 <TIM_OC3_SetConfig+0x120>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d003      	beq.n	8005c46 <TIM_OC3_SetConfig+0xbe>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a16      	ldr	r2, [pc, #88]	@ (8005c9c <TIM_OC3_SetConfig+0x114>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d113      	bne.n	8005c6e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	011b      	lsls	r3, r3, #4
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	621a      	str	r2, [r3, #32]
}
 8005c88:	bf00      	nop
 8005c8a:	371c      	adds	r7, #28
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	40012c00 	.word	0x40012c00
 8005c98:	40013400 	.word	0x40013400
 8005c9c:	40015000 	.word	0x40015000
 8005ca0:	40014000 	.word	0x40014000
 8005ca4:	40014400 	.word	0x40014400
 8005ca8:	40014800 	.word	0x40014800

08005cac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a1b      	ldr	r3, [r3, #32]
 8005cc0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	021b      	lsls	r3, r3, #8
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	031b      	lsls	r3, r3, #12
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a2c      	ldr	r2, [pc, #176]	@ (8005dbc <TIM_OC4_SetConfig+0x110>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d007      	beq.n	8005d20 <TIM_OC4_SetConfig+0x74>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a2b      	ldr	r2, [pc, #172]	@ (8005dc0 <TIM_OC4_SetConfig+0x114>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d003      	beq.n	8005d20 <TIM_OC4_SetConfig+0x74>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a2a      	ldr	r2, [pc, #168]	@ (8005dc4 <TIM_OC4_SetConfig+0x118>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d10d      	bne.n	8005d3c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	031b      	lsls	r3, r3, #12
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a1f      	ldr	r2, [pc, #124]	@ (8005dbc <TIM_OC4_SetConfig+0x110>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d013      	beq.n	8005d6c <TIM_OC4_SetConfig+0xc0>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a1e      	ldr	r2, [pc, #120]	@ (8005dc0 <TIM_OC4_SetConfig+0x114>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d00f      	beq.n	8005d6c <TIM_OC4_SetConfig+0xc0>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a1e      	ldr	r2, [pc, #120]	@ (8005dc8 <TIM_OC4_SetConfig+0x11c>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d00b      	beq.n	8005d6c <TIM_OC4_SetConfig+0xc0>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a1d      	ldr	r2, [pc, #116]	@ (8005dcc <TIM_OC4_SetConfig+0x120>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d007      	beq.n	8005d6c <TIM_OC4_SetConfig+0xc0>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a1c      	ldr	r2, [pc, #112]	@ (8005dd0 <TIM_OC4_SetConfig+0x124>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d003      	beq.n	8005d6c <TIM_OC4_SetConfig+0xc0>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a17      	ldr	r2, [pc, #92]	@ (8005dc4 <TIM_OC4_SetConfig+0x118>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d113      	bne.n	8005d94 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d72:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d7a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	019b      	lsls	r3, r3, #6
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	019b      	lsls	r3, r3, #6
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	621a      	str	r2, [r3, #32]
}
 8005dae:	bf00      	nop
 8005db0:	371c      	adds	r7, #28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	40012c00 	.word	0x40012c00
 8005dc0:	40013400 	.word	0x40013400
 8005dc4:	40015000 	.word	0x40015000
 8005dc8:	40014000 	.word	0x40014000
 8005dcc:	40014400 	.word	0x40014400
 8005dd0:	40014800 	.word	0x40014800

08005dd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005e18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	041b      	lsls	r3, r3, #16
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a19      	ldr	r2, [pc, #100]	@ (8005e90 <TIM_OC5_SetConfig+0xbc>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d013      	beq.n	8005e56 <TIM_OC5_SetConfig+0x82>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a18      	ldr	r2, [pc, #96]	@ (8005e94 <TIM_OC5_SetConfig+0xc0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d00f      	beq.n	8005e56 <TIM_OC5_SetConfig+0x82>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a17      	ldr	r2, [pc, #92]	@ (8005e98 <TIM_OC5_SetConfig+0xc4>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d00b      	beq.n	8005e56 <TIM_OC5_SetConfig+0x82>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a16      	ldr	r2, [pc, #88]	@ (8005e9c <TIM_OC5_SetConfig+0xc8>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d007      	beq.n	8005e56 <TIM_OC5_SetConfig+0x82>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a15      	ldr	r2, [pc, #84]	@ (8005ea0 <TIM_OC5_SetConfig+0xcc>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d003      	beq.n	8005e56 <TIM_OC5_SetConfig+0x82>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a14      	ldr	r2, [pc, #80]	@ (8005ea4 <TIM_OC5_SetConfig+0xd0>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d109      	bne.n	8005e6a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	021b      	lsls	r3, r3, #8
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	621a      	str	r2, [r3, #32]
}
 8005e84:	bf00      	nop
 8005e86:	371c      	adds	r7, #28
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	40012c00 	.word	0x40012c00
 8005e94:	40013400 	.word	0x40013400
 8005e98:	40014000 	.word	0x40014000
 8005e9c:	40014400 	.word	0x40014400
 8005ea0:	40014800 	.word	0x40014800
 8005ea4:	40015000 	.word	0x40015000

08005ea8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a1b      	ldr	r3, [r3, #32]
 8005ebc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ed6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	021b      	lsls	r3, r3, #8
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005eee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	051b      	lsls	r3, r3, #20
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a1a      	ldr	r2, [pc, #104]	@ (8005f68 <TIM_OC6_SetConfig+0xc0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d013      	beq.n	8005f2c <TIM_OC6_SetConfig+0x84>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a19      	ldr	r2, [pc, #100]	@ (8005f6c <TIM_OC6_SetConfig+0xc4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d00f      	beq.n	8005f2c <TIM_OC6_SetConfig+0x84>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a18      	ldr	r2, [pc, #96]	@ (8005f70 <TIM_OC6_SetConfig+0xc8>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00b      	beq.n	8005f2c <TIM_OC6_SetConfig+0x84>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a17      	ldr	r2, [pc, #92]	@ (8005f74 <TIM_OC6_SetConfig+0xcc>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d007      	beq.n	8005f2c <TIM_OC6_SetConfig+0x84>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a16      	ldr	r2, [pc, #88]	@ (8005f78 <TIM_OC6_SetConfig+0xd0>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d003      	beq.n	8005f2c <TIM_OC6_SetConfig+0x84>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a15      	ldr	r2, [pc, #84]	@ (8005f7c <TIM_OC6_SetConfig+0xd4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d109      	bne.n	8005f40 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	029b      	lsls	r3, r3, #10
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	621a      	str	r2, [r3, #32]
}
 8005f5a:	bf00      	nop
 8005f5c:	371c      	adds	r7, #28
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	40012c00 	.word	0x40012c00
 8005f6c:	40013400 	.word	0x40013400
 8005f70:	40014000 	.word	0x40014000
 8005f74:	40014400 	.word	0x40014400
 8005f78:	40014800 	.word	0x40014800
 8005f7c:	40015000 	.word	0x40015000

08005f80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	f023 0201 	bic.w	r2, r3, #1
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005faa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f023 030a 	bic.w	r3, r3, #10
 8005fbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	621a      	str	r2, [r3, #32]
}
 8005fd2:	bf00      	nop
 8005fd4:	371c      	adds	r7, #28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b087      	sub	sp, #28
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	60f8      	str	r0, [r7, #12]
 8005fe6:	60b9      	str	r1, [r7, #8]
 8005fe8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6a1b      	ldr	r3, [r3, #32]
 8005ff4:	f023 0210 	bic.w	r2, r3, #16
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006008:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	031b      	lsls	r3, r3, #12
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	4313      	orrs	r3, r2
 8006012:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800601a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	011b      	lsls	r3, r3, #4
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	4313      	orrs	r3, r2
 8006024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	621a      	str	r2, [r3, #32]
}
 8006032:	bf00      	nop
 8006034:	371c      	adds	r7, #28
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800603e:	b480      	push	{r7}
 8006040:	b085      	sub	sp, #20
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006058:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4313      	orrs	r3, r2
 8006060:	f043 0307 	orr.w	r3, r3, #7
 8006064:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	609a      	str	r2, [r3, #8]
}
 800606c:	bf00      	nop
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006078:	b480      	push	{r7}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
 8006084:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006092:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	021a      	lsls	r2, r3, #8
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	431a      	orrs	r2, r3
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	4313      	orrs	r3, r2
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	609a      	str	r2, [r3, #8]
}
 80060ac:	bf00      	nop
 80060ae:	371c      	adds	r7, #28
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f003 031f 	and.w	r3, r3, #31
 80060ca:	2201      	movs	r2, #1
 80060cc:	fa02 f303 	lsl.w	r3, r2, r3
 80060d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a1a      	ldr	r2, [r3, #32]
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	43db      	mvns	r3, r3
 80060da:	401a      	ands	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6a1a      	ldr	r2, [r3, #32]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f003 031f 	and.w	r3, r3, #31
 80060ea:	6879      	ldr	r1, [r7, #4]
 80060ec:	fa01 f303 	lsl.w	r3, r1, r3
 80060f0:	431a      	orrs	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	621a      	str	r2, [r3, #32]
}
 80060f6:	bf00      	nop
 80060f8:	371c      	adds	r7, #28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
	...

08006104 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006114:	2b01      	cmp	r3, #1
 8006116:	d101      	bne.n	800611c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006118:	2302      	movs	r3, #2
 800611a:	e074      	b.n	8006206 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a34      	ldr	r2, [pc, #208]	@ (8006214 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d009      	beq.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a33      	ldr	r2, [pc, #204]	@ (8006218 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d004      	beq.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a31      	ldr	r2, [pc, #196]	@ (800621c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d108      	bne.n	800616c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006160:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006176:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a21      	ldr	r2, [pc, #132]	@ (8006214 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d022      	beq.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800619c:	d01d      	beq.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006220 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d018      	beq.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006224 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d013      	beq.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a1c      	ldr	r2, [pc, #112]	@ (8006228 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d00e      	beq.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a15      	ldr	r2, [pc, #84]	@ (8006218 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d009      	beq.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a18      	ldr	r2, [pc, #96]	@ (800622c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d004      	beq.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a11      	ldr	r2, [pc, #68]	@ (800621c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d10c      	bne.n	80061f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	40012c00 	.word	0x40012c00
 8006218:	40013400 	.word	0x40013400
 800621c:	40015000 	.word	0x40015000
 8006220:	40000400 	.word	0x40000400
 8006224:	40000800 	.word	0x40000800
 8006228:	40000c00 	.word	0x40000c00
 800622c:	40014000 	.word	0x40014000

08006230 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e042      	b.n	8006354 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d106      	bne.n	80062e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7fa fd93 	bl	8000e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2224      	movs	r2, #36	@ 0x24
 80062ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 0201 	bic.w	r2, r2, #1
 80062fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fb24 	bl	8006954 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f825 	bl	800635c <UART_SetConfig>
 8006312:	4603      	mov	r3, r0
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e01b      	b.n	8006354 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800632a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689a      	ldr	r2, [r3, #8]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800633a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0201 	orr.w	r2, r2, #1
 800634a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fba3 	bl	8006a98 <UART_CheckIdleState>
 8006352:	4603      	mov	r3, r0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800635c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006360:	b08c      	sub	sp, #48	@ 0x30
 8006362:	af00      	add	r7, sp, #0
 8006364:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	689a      	ldr	r2, [r3, #8]
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	431a      	orrs	r2, r3
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	431a      	orrs	r2, r3
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	69db      	ldr	r3, [r3, #28]
 8006380:	4313      	orrs	r3, r2
 8006382:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	4baa      	ldr	r3, [pc, #680]	@ (8006634 <UART_SetConfig+0x2d8>)
 800638c:	4013      	ands	r3, r2
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	6812      	ldr	r2, [r2, #0]
 8006392:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006394:	430b      	orrs	r3, r1
 8006396:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	68da      	ldr	r2, [r3, #12]
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a9f      	ldr	r2, [pc, #636]	@ (8006638 <UART_SetConfig+0x2dc>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d004      	beq.n	80063c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063c4:	4313      	orrs	r3, r2
 80063c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80063d2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	6812      	ldr	r2, [r2, #0]
 80063da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063dc:	430b      	orrs	r3, r1
 80063de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e6:	f023 010f 	bic.w	r1, r3, #15
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a90      	ldr	r2, [pc, #576]	@ (800663c <UART_SetConfig+0x2e0>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d125      	bne.n	800644c <UART_SetConfig+0xf0>
 8006400:	4b8f      	ldr	r3, [pc, #572]	@ (8006640 <UART_SetConfig+0x2e4>)
 8006402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006406:	f003 0303 	and.w	r3, r3, #3
 800640a:	2b03      	cmp	r3, #3
 800640c:	d81a      	bhi.n	8006444 <UART_SetConfig+0xe8>
 800640e:	a201      	add	r2, pc, #4	@ (adr r2, 8006414 <UART_SetConfig+0xb8>)
 8006410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006414:	08006425 	.word	0x08006425
 8006418:	08006435 	.word	0x08006435
 800641c:	0800642d 	.word	0x0800642d
 8006420:	0800643d 	.word	0x0800643d
 8006424:	2301      	movs	r3, #1
 8006426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800642a:	e116      	b.n	800665a <UART_SetConfig+0x2fe>
 800642c:	2302      	movs	r3, #2
 800642e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006432:	e112      	b.n	800665a <UART_SetConfig+0x2fe>
 8006434:	2304      	movs	r3, #4
 8006436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800643a:	e10e      	b.n	800665a <UART_SetConfig+0x2fe>
 800643c:	2308      	movs	r3, #8
 800643e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006442:	e10a      	b.n	800665a <UART_SetConfig+0x2fe>
 8006444:	2310      	movs	r3, #16
 8006446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800644a:	e106      	b.n	800665a <UART_SetConfig+0x2fe>
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a7c      	ldr	r2, [pc, #496]	@ (8006644 <UART_SetConfig+0x2e8>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d138      	bne.n	80064c8 <UART_SetConfig+0x16c>
 8006456:	4b7a      	ldr	r3, [pc, #488]	@ (8006640 <UART_SetConfig+0x2e4>)
 8006458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800645c:	f003 030c 	and.w	r3, r3, #12
 8006460:	2b0c      	cmp	r3, #12
 8006462:	d82d      	bhi.n	80064c0 <UART_SetConfig+0x164>
 8006464:	a201      	add	r2, pc, #4	@ (adr r2, 800646c <UART_SetConfig+0x110>)
 8006466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646a:	bf00      	nop
 800646c:	080064a1 	.word	0x080064a1
 8006470:	080064c1 	.word	0x080064c1
 8006474:	080064c1 	.word	0x080064c1
 8006478:	080064c1 	.word	0x080064c1
 800647c:	080064b1 	.word	0x080064b1
 8006480:	080064c1 	.word	0x080064c1
 8006484:	080064c1 	.word	0x080064c1
 8006488:	080064c1 	.word	0x080064c1
 800648c:	080064a9 	.word	0x080064a9
 8006490:	080064c1 	.word	0x080064c1
 8006494:	080064c1 	.word	0x080064c1
 8006498:	080064c1 	.word	0x080064c1
 800649c:	080064b9 	.word	0x080064b9
 80064a0:	2300      	movs	r3, #0
 80064a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064a6:	e0d8      	b.n	800665a <UART_SetConfig+0x2fe>
 80064a8:	2302      	movs	r3, #2
 80064aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064ae:	e0d4      	b.n	800665a <UART_SetConfig+0x2fe>
 80064b0:	2304      	movs	r3, #4
 80064b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064b6:	e0d0      	b.n	800665a <UART_SetConfig+0x2fe>
 80064b8:	2308      	movs	r3, #8
 80064ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064be:	e0cc      	b.n	800665a <UART_SetConfig+0x2fe>
 80064c0:	2310      	movs	r3, #16
 80064c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064c6:	e0c8      	b.n	800665a <UART_SetConfig+0x2fe>
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a5e      	ldr	r2, [pc, #376]	@ (8006648 <UART_SetConfig+0x2ec>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d125      	bne.n	800651e <UART_SetConfig+0x1c2>
 80064d2:	4b5b      	ldr	r3, [pc, #364]	@ (8006640 <UART_SetConfig+0x2e4>)
 80064d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80064dc:	2b30      	cmp	r3, #48	@ 0x30
 80064de:	d016      	beq.n	800650e <UART_SetConfig+0x1b2>
 80064e0:	2b30      	cmp	r3, #48	@ 0x30
 80064e2:	d818      	bhi.n	8006516 <UART_SetConfig+0x1ba>
 80064e4:	2b20      	cmp	r3, #32
 80064e6:	d00a      	beq.n	80064fe <UART_SetConfig+0x1a2>
 80064e8:	2b20      	cmp	r3, #32
 80064ea:	d814      	bhi.n	8006516 <UART_SetConfig+0x1ba>
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d002      	beq.n	80064f6 <UART_SetConfig+0x19a>
 80064f0:	2b10      	cmp	r3, #16
 80064f2:	d008      	beq.n	8006506 <UART_SetConfig+0x1aa>
 80064f4:	e00f      	b.n	8006516 <UART_SetConfig+0x1ba>
 80064f6:	2300      	movs	r3, #0
 80064f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064fc:	e0ad      	b.n	800665a <UART_SetConfig+0x2fe>
 80064fe:	2302      	movs	r3, #2
 8006500:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006504:	e0a9      	b.n	800665a <UART_SetConfig+0x2fe>
 8006506:	2304      	movs	r3, #4
 8006508:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800650c:	e0a5      	b.n	800665a <UART_SetConfig+0x2fe>
 800650e:	2308      	movs	r3, #8
 8006510:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006514:	e0a1      	b.n	800665a <UART_SetConfig+0x2fe>
 8006516:	2310      	movs	r3, #16
 8006518:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800651c:	e09d      	b.n	800665a <UART_SetConfig+0x2fe>
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a4a      	ldr	r2, [pc, #296]	@ (800664c <UART_SetConfig+0x2f0>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d125      	bne.n	8006574 <UART_SetConfig+0x218>
 8006528:	4b45      	ldr	r3, [pc, #276]	@ (8006640 <UART_SetConfig+0x2e4>)
 800652a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800652e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006532:	2bc0      	cmp	r3, #192	@ 0xc0
 8006534:	d016      	beq.n	8006564 <UART_SetConfig+0x208>
 8006536:	2bc0      	cmp	r3, #192	@ 0xc0
 8006538:	d818      	bhi.n	800656c <UART_SetConfig+0x210>
 800653a:	2b80      	cmp	r3, #128	@ 0x80
 800653c:	d00a      	beq.n	8006554 <UART_SetConfig+0x1f8>
 800653e:	2b80      	cmp	r3, #128	@ 0x80
 8006540:	d814      	bhi.n	800656c <UART_SetConfig+0x210>
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <UART_SetConfig+0x1f0>
 8006546:	2b40      	cmp	r3, #64	@ 0x40
 8006548:	d008      	beq.n	800655c <UART_SetConfig+0x200>
 800654a:	e00f      	b.n	800656c <UART_SetConfig+0x210>
 800654c:	2300      	movs	r3, #0
 800654e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006552:	e082      	b.n	800665a <UART_SetConfig+0x2fe>
 8006554:	2302      	movs	r3, #2
 8006556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800655a:	e07e      	b.n	800665a <UART_SetConfig+0x2fe>
 800655c:	2304      	movs	r3, #4
 800655e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006562:	e07a      	b.n	800665a <UART_SetConfig+0x2fe>
 8006564:	2308      	movs	r3, #8
 8006566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800656a:	e076      	b.n	800665a <UART_SetConfig+0x2fe>
 800656c:	2310      	movs	r3, #16
 800656e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006572:	e072      	b.n	800665a <UART_SetConfig+0x2fe>
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a35      	ldr	r2, [pc, #212]	@ (8006650 <UART_SetConfig+0x2f4>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d12a      	bne.n	80065d4 <UART_SetConfig+0x278>
 800657e:	4b30      	ldr	r3, [pc, #192]	@ (8006640 <UART_SetConfig+0x2e4>)
 8006580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006584:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006588:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800658c:	d01a      	beq.n	80065c4 <UART_SetConfig+0x268>
 800658e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006592:	d81b      	bhi.n	80065cc <UART_SetConfig+0x270>
 8006594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006598:	d00c      	beq.n	80065b4 <UART_SetConfig+0x258>
 800659a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800659e:	d815      	bhi.n	80065cc <UART_SetConfig+0x270>
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d003      	beq.n	80065ac <UART_SetConfig+0x250>
 80065a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065a8:	d008      	beq.n	80065bc <UART_SetConfig+0x260>
 80065aa:	e00f      	b.n	80065cc <UART_SetConfig+0x270>
 80065ac:	2300      	movs	r3, #0
 80065ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065b2:	e052      	b.n	800665a <UART_SetConfig+0x2fe>
 80065b4:	2302      	movs	r3, #2
 80065b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065ba:	e04e      	b.n	800665a <UART_SetConfig+0x2fe>
 80065bc:	2304      	movs	r3, #4
 80065be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065c2:	e04a      	b.n	800665a <UART_SetConfig+0x2fe>
 80065c4:	2308      	movs	r3, #8
 80065c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065ca:	e046      	b.n	800665a <UART_SetConfig+0x2fe>
 80065cc:	2310      	movs	r3, #16
 80065ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065d2:	e042      	b.n	800665a <UART_SetConfig+0x2fe>
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a17      	ldr	r2, [pc, #92]	@ (8006638 <UART_SetConfig+0x2dc>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d13a      	bne.n	8006654 <UART_SetConfig+0x2f8>
 80065de:	4b18      	ldr	r3, [pc, #96]	@ (8006640 <UART_SetConfig+0x2e4>)
 80065e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80065e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065ec:	d01a      	beq.n	8006624 <UART_SetConfig+0x2c8>
 80065ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065f2:	d81b      	bhi.n	800662c <UART_SetConfig+0x2d0>
 80065f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065f8:	d00c      	beq.n	8006614 <UART_SetConfig+0x2b8>
 80065fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065fe:	d815      	bhi.n	800662c <UART_SetConfig+0x2d0>
 8006600:	2b00      	cmp	r3, #0
 8006602:	d003      	beq.n	800660c <UART_SetConfig+0x2b0>
 8006604:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006608:	d008      	beq.n	800661c <UART_SetConfig+0x2c0>
 800660a:	e00f      	b.n	800662c <UART_SetConfig+0x2d0>
 800660c:	2300      	movs	r3, #0
 800660e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006612:	e022      	b.n	800665a <UART_SetConfig+0x2fe>
 8006614:	2302      	movs	r3, #2
 8006616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800661a:	e01e      	b.n	800665a <UART_SetConfig+0x2fe>
 800661c:	2304      	movs	r3, #4
 800661e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006622:	e01a      	b.n	800665a <UART_SetConfig+0x2fe>
 8006624:	2308      	movs	r3, #8
 8006626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800662a:	e016      	b.n	800665a <UART_SetConfig+0x2fe>
 800662c:	2310      	movs	r3, #16
 800662e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006632:	e012      	b.n	800665a <UART_SetConfig+0x2fe>
 8006634:	cfff69f3 	.word	0xcfff69f3
 8006638:	40008000 	.word	0x40008000
 800663c:	40013800 	.word	0x40013800
 8006640:	40021000 	.word	0x40021000
 8006644:	40004400 	.word	0x40004400
 8006648:	40004800 	.word	0x40004800
 800664c:	40004c00 	.word	0x40004c00
 8006650:	40005000 	.word	0x40005000
 8006654:	2310      	movs	r3, #16
 8006656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4aae      	ldr	r2, [pc, #696]	@ (8006918 <UART_SetConfig+0x5bc>)
 8006660:	4293      	cmp	r3, r2
 8006662:	f040 8097 	bne.w	8006794 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006666:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800666a:	2b08      	cmp	r3, #8
 800666c:	d823      	bhi.n	80066b6 <UART_SetConfig+0x35a>
 800666e:	a201      	add	r2, pc, #4	@ (adr r2, 8006674 <UART_SetConfig+0x318>)
 8006670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006674:	08006699 	.word	0x08006699
 8006678:	080066b7 	.word	0x080066b7
 800667c:	080066a1 	.word	0x080066a1
 8006680:	080066b7 	.word	0x080066b7
 8006684:	080066a7 	.word	0x080066a7
 8006688:	080066b7 	.word	0x080066b7
 800668c:	080066b7 	.word	0x080066b7
 8006690:	080066b7 	.word	0x080066b7
 8006694:	080066af 	.word	0x080066af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006698:	f7fd feb8 	bl	800440c <HAL_RCC_GetPCLK1Freq>
 800669c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800669e:	e010      	b.n	80066c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066a0:	4b9e      	ldr	r3, [pc, #632]	@ (800691c <UART_SetConfig+0x5c0>)
 80066a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80066a4:	e00d      	b.n	80066c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066a6:	f7fd fe43 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 80066aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066ac:	e009      	b.n	80066c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80066b4:	e005      	b.n	80066c2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80066c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 8130 	beq.w	800692a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ce:	4a94      	ldr	r2, [pc, #592]	@ (8006920 <UART_SetConfig+0x5c4>)
 80066d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066d4:	461a      	mov	r2, r3
 80066d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80066dc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	685a      	ldr	r2, [r3, #4]
 80066e2:	4613      	mov	r3, r2
 80066e4:	005b      	lsls	r3, r3, #1
 80066e6:	4413      	add	r3, r2
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d305      	bcc.n	80066fa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d903      	bls.n	8006702 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006700:	e113      	b.n	800692a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006704:	2200      	movs	r2, #0
 8006706:	60bb      	str	r3, [r7, #8]
 8006708:	60fa      	str	r2, [r7, #12]
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670e:	4a84      	ldr	r2, [pc, #528]	@ (8006920 <UART_SetConfig+0x5c4>)
 8006710:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006714:	b29b      	uxth	r3, r3
 8006716:	2200      	movs	r2, #0
 8006718:	603b      	str	r3, [r7, #0]
 800671a:	607a      	str	r2, [r7, #4]
 800671c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006720:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006724:	f7f9 fd78 	bl	8000218 <__aeabi_uldivmod>
 8006728:	4602      	mov	r2, r0
 800672a:	460b      	mov	r3, r1
 800672c:	4610      	mov	r0, r2
 800672e:	4619      	mov	r1, r3
 8006730:	f04f 0200 	mov.w	r2, #0
 8006734:	f04f 0300 	mov.w	r3, #0
 8006738:	020b      	lsls	r3, r1, #8
 800673a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800673e:	0202      	lsls	r2, r0, #8
 8006740:	6979      	ldr	r1, [r7, #20]
 8006742:	6849      	ldr	r1, [r1, #4]
 8006744:	0849      	lsrs	r1, r1, #1
 8006746:	2000      	movs	r0, #0
 8006748:	460c      	mov	r4, r1
 800674a:	4605      	mov	r5, r0
 800674c:	eb12 0804 	adds.w	r8, r2, r4
 8006750:	eb43 0905 	adc.w	r9, r3, r5
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	469a      	mov	sl, r3
 800675c:	4693      	mov	fp, r2
 800675e:	4652      	mov	r2, sl
 8006760:	465b      	mov	r3, fp
 8006762:	4640      	mov	r0, r8
 8006764:	4649      	mov	r1, r9
 8006766:	f7f9 fd57 	bl	8000218 <__aeabi_uldivmod>
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
 800676e:	4613      	mov	r3, r2
 8006770:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006778:	d308      	bcc.n	800678c <UART_SetConfig+0x430>
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006780:	d204      	bcs.n	800678c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	6a3a      	ldr	r2, [r7, #32]
 8006788:	60da      	str	r2, [r3, #12]
 800678a:	e0ce      	b.n	800692a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006792:	e0ca      	b.n	800692a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800679c:	d166      	bne.n	800686c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800679e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80067a2:	2b08      	cmp	r3, #8
 80067a4:	d827      	bhi.n	80067f6 <UART_SetConfig+0x49a>
 80067a6:	a201      	add	r2, pc, #4	@ (adr r2, 80067ac <UART_SetConfig+0x450>)
 80067a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ac:	080067d1 	.word	0x080067d1
 80067b0:	080067d9 	.word	0x080067d9
 80067b4:	080067e1 	.word	0x080067e1
 80067b8:	080067f7 	.word	0x080067f7
 80067bc:	080067e7 	.word	0x080067e7
 80067c0:	080067f7 	.word	0x080067f7
 80067c4:	080067f7 	.word	0x080067f7
 80067c8:	080067f7 	.word	0x080067f7
 80067cc:	080067ef 	.word	0x080067ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067d0:	f7fd fe1c 	bl	800440c <HAL_RCC_GetPCLK1Freq>
 80067d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067d6:	e014      	b.n	8006802 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067d8:	f7fd fe2e 	bl	8004438 <HAL_RCC_GetPCLK2Freq>
 80067dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067de:	e010      	b.n	8006802 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067e0:	4b4e      	ldr	r3, [pc, #312]	@ (800691c <UART_SetConfig+0x5c0>)
 80067e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80067e4:	e00d      	b.n	8006802 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067e6:	f7fd fda3 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 80067ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067ec:	e009      	b.n	8006802 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80067f4:	e005      	b.n	8006802 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80067f6:	2300      	movs	r3, #0
 80067f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006800:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006804:	2b00      	cmp	r3, #0
 8006806:	f000 8090 	beq.w	800692a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680e:	4a44      	ldr	r2, [pc, #272]	@ (8006920 <UART_SetConfig+0x5c4>)
 8006810:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006814:	461a      	mov	r2, r3
 8006816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006818:	fbb3 f3f2 	udiv	r3, r3, r2
 800681c:	005a      	lsls	r2, r3, #1
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	085b      	lsrs	r3, r3, #1
 8006824:	441a      	add	r2, r3
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	fbb2 f3f3 	udiv	r3, r2, r3
 800682e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	2b0f      	cmp	r3, #15
 8006834:	d916      	bls.n	8006864 <UART_SetConfig+0x508>
 8006836:	6a3b      	ldr	r3, [r7, #32]
 8006838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800683c:	d212      	bcs.n	8006864 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	b29b      	uxth	r3, r3
 8006842:	f023 030f 	bic.w	r3, r3, #15
 8006846:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	085b      	lsrs	r3, r3, #1
 800684c:	b29b      	uxth	r3, r3
 800684e:	f003 0307 	and.w	r3, r3, #7
 8006852:	b29a      	uxth	r2, r3
 8006854:	8bfb      	ldrh	r3, [r7, #30]
 8006856:	4313      	orrs	r3, r2
 8006858:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	8bfa      	ldrh	r2, [r7, #30]
 8006860:	60da      	str	r2, [r3, #12]
 8006862:	e062      	b.n	800692a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800686a:	e05e      	b.n	800692a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800686c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006870:	2b08      	cmp	r3, #8
 8006872:	d828      	bhi.n	80068c6 <UART_SetConfig+0x56a>
 8006874:	a201      	add	r2, pc, #4	@ (adr r2, 800687c <UART_SetConfig+0x520>)
 8006876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687a:	bf00      	nop
 800687c:	080068a1 	.word	0x080068a1
 8006880:	080068a9 	.word	0x080068a9
 8006884:	080068b1 	.word	0x080068b1
 8006888:	080068c7 	.word	0x080068c7
 800688c:	080068b7 	.word	0x080068b7
 8006890:	080068c7 	.word	0x080068c7
 8006894:	080068c7 	.word	0x080068c7
 8006898:	080068c7 	.word	0x080068c7
 800689c:	080068bf 	.word	0x080068bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068a0:	f7fd fdb4 	bl	800440c <HAL_RCC_GetPCLK1Freq>
 80068a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80068a6:	e014      	b.n	80068d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068a8:	f7fd fdc6 	bl	8004438 <HAL_RCC_GetPCLK2Freq>
 80068ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80068ae:	e010      	b.n	80068d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068b0:	4b1a      	ldr	r3, [pc, #104]	@ (800691c <UART_SetConfig+0x5c0>)
 80068b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80068b4:	e00d      	b.n	80068d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068b6:	f7fd fd3b 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 80068ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80068bc:	e009      	b.n	80068d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80068c4:	e005      	b.n	80068d2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80068d0:	bf00      	nop
    }

    if (pclk != 0U)
 80068d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d028      	beq.n	800692a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068dc:	4a10      	ldr	r2, [pc, #64]	@ (8006920 <UART_SetConfig+0x5c4>)
 80068de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068e2:	461a      	mov	r2, r3
 80068e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	085b      	lsrs	r3, r3, #1
 80068f0:	441a      	add	r2, r3
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	2b0f      	cmp	r3, #15
 8006900:	d910      	bls.n	8006924 <UART_SetConfig+0x5c8>
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006908:	d20c      	bcs.n	8006924 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	b29a      	uxth	r2, r3
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	60da      	str	r2, [r3, #12]
 8006914:	e009      	b.n	800692a <UART_SetConfig+0x5ce>
 8006916:	bf00      	nop
 8006918:	40008000 	.word	0x40008000
 800691c:	00f42400 	.word	0x00f42400
 8006920:	0800708c 	.word	0x0800708c
      }
      else
      {
        ret = HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2201      	movs	r2, #1
 800692e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	2201      	movs	r2, #1
 8006936:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	2200      	movs	r2, #0
 800693e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	2200      	movs	r2, #0
 8006944:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006946:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800694a:	4618      	mov	r0, r3
 800694c:	3730      	adds	r7, #48	@ 0x30
 800694e:	46bd      	mov	sp, r7
 8006950:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006954 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006960:	f003 0308 	and.w	r3, r3, #8
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00a      	beq.n	800697e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	430a      	orrs	r2, r1
 800697c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	430a      	orrs	r2, r1
 800699e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00a      	beq.n	80069c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	430a      	orrs	r2, r1
 80069c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c6:	f003 0304 	and.w	r3, r3, #4
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00a      	beq.n	80069e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	430a      	orrs	r2, r1
 80069e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e8:	f003 0310 	and.w	r3, r3, #16
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00a      	beq.n	8006a06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0a:	f003 0320 	and.w	r3, r3, #32
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00a      	beq.n	8006a28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d01a      	beq.n	8006a6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a52:	d10a      	bne.n	8006a6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	430a      	orrs	r2, r1
 8006a68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00a      	beq.n	8006a8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	605a      	str	r2, [r3, #4]
  }
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b098      	sub	sp, #96	@ 0x60
 8006a9c:	af02      	add	r7, sp, #8
 8006a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006aa8:	f7fa fbd2 	bl	8001250 <HAL_GetTick>
 8006aac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0308 	and.w	r3, r3, #8
 8006ab8:	2b08      	cmp	r3, #8
 8006aba:	d12f      	bne.n	8006b1c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006abc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f88e 	bl	8006bec <UART_WaitOnFlagUntilTimeout>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d022      	beq.n	8006b1c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ade:	e853 3f00 	ldrex	r3, [r3]
 8006ae2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ae6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aea:	653b      	str	r3, [r7, #80]	@ 0x50
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	461a      	mov	r2, r3
 8006af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006af4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006af6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006afa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006afc:	e841 2300 	strex	r3, r2, [r1]
 8006b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e6      	bne.n	8006ad6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e063      	b.n	8006be4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0304 	and.w	r3, r3, #4
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d149      	bne.n	8006bbe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b2a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b32:	2200      	movs	r2, #0
 8006b34:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f857 	bl	8006bec <UART_WaitOnFlagUntilTimeout>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d03c      	beq.n	8006bbe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4c:	e853 3f00 	ldrex	r3, [r3]
 8006b50:	623b      	str	r3, [r7, #32]
   return(result);
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b62:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b64:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b6a:	e841 2300 	strex	r3, r2, [r1]
 8006b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1e6      	bne.n	8006b44 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3308      	adds	r3, #8
 8006b7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	e853 3f00 	ldrex	r3, [r3]
 8006b84:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f023 0301 	bic.w	r3, r3, #1
 8006b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	3308      	adds	r3, #8
 8006b94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b96:	61fa      	str	r2, [r7, #28]
 8006b98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9a:	69b9      	ldr	r1, [r7, #24]
 8006b9c:	69fa      	ldr	r2, [r7, #28]
 8006b9e:	e841 2300 	strex	r3, r2, [r1]
 8006ba2:	617b      	str	r3, [r7, #20]
   return(result);
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1e5      	bne.n	8006b76 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e012      	b.n	8006be4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3758      	adds	r7, #88	@ 0x58
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	603b      	str	r3, [r7, #0]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bfc:	e04f      	b.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c04:	d04b      	beq.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c06:	f7fa fb23 	bl	8001250 <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d302      	bcc.n	8006c1c <UART_WaitOnFlagUntilTimeout+0x30>
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d101      	bne.n	8006c20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e04e      	b.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0304 	and.w	r3, r3, #4
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d037      	beq.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2b80      	cmp	r3, #128	@ 0x80
 8006c32:	d034      	beq.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2b40      	cmp	r3, #64	@ 0x40
 8006c38:	d031      	beq.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	f003 0308 	and.w	r3, r3, #8
 8006c44:	2b08      	cmp	r3, #8
 8006c46:	d110      	bne.n	8006c6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2208      	movs	r2, #8
 8006c4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 f838 	bl	8006cc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2208      	movs	r2, #8
 8006c5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e029      	b.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	69db      	ldr	r3, [r3, #28]
 8006c70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c78:	d111      	bne.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 f81e 	bl	8006cc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2220      	movs	r2, #32
 8006c8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e00f      	b.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	69da      	ldr	r2, [r3, #28]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	bf0c      	ite	eq
 8006cae:	2301      	moveq	r3, #1
 8006cb0:	2300      	movne	r3, #0
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	79fb      	ldrb	r3, [r7, #7]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d0a0      	beq.n	8006bfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b095      	sub	sp, #84	@ 0x54
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cd6:	e853 3f00 	ldrex	r3, [r3]
 8006cda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cec:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006cf2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cf4:	e841 2300 	strex	r3, r2, [r1]
 8006cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1e6      	bne.n	8006cce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	3308      	adds	r3, #8
 8006d06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	e853 3f00 	ldrex	r3, [r3]
 8006d0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d16:	f023 0301 	bic.w	r3, r3, #1
 8006d1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3308      	adds	r3, #8
 8006d22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d2c:	e841 2300 	strex	r3, r2, [r1]
 8006d30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1e3      	bne.n	8006d00 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d118      	bne.n	8006d72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	e853 3f00 	ldrex	r3, [r3]
 8006d4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f023 0310 	bic.w	r3, r3, #16
 8006d54:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d5e:	61bb      	str	r3, [r7, #24]
 8006d60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d62:	6979      	ldr	r1, [r7, #20]
 8006d64:	69ba      	ldr	r2, [r7, #24]
 8006d66:	e841 2300 	strex	r3, r2, [r1]
 8006d6a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1e6      	bne.n	8006d40 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2220      	movs	r2, #32
 8006d76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006d86:	bf00      	nop
 8006d88:	3754      	adds	r7, #84	@ 0x54
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b085      	sub	sp, #20
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d101      	bne.n	8006da8 <HAL_UARTEx_DisableFifoMode+0x16>
 8006da4:	2302      	movs	r3, #2
 8006da6:	e027      	b.n	8006df8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2224      	movs	r2, #36	@ 0x24
 8006db4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f022 0201 	bic.w	r2, r2, #1
 8006dce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006dd6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2220      	movs	r2, #32
 8006dea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d101      	bne.n	8006e1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006e18:	2302      	movs	r3, #2
 8006e1a:	e02d      	b.n	8006e78 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2224      	movs	r2, #36	@ 0x24
 8006e28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f022 0201 	bic.w	r2, r2, #1
 8006e42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	430a      	orrs	r2, r1
 8006e56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f84f 	bl	8006efc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2220      	movs	r2, #32
 8006e6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d101      	bne.n	8006e98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e94:	2302      	movs	r3, #2
 8006e96:	e02d      	b.n	8006ef4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2224      	movs	r2, #36	@ 0x24
 8006ea4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f022 0201 	bic.w	r2, r2, #1
 8006ebe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	683a      	ldr	r2, [r7, #0]
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f811 	bl	8006efc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2220      	movs	r2, #32
 8006ee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d108      	bne.n	8006f1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006f1c:	e031      	b.n	8006f82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006f1e:	2308      	movs	r3, #8
 8006f20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006f22:	2308      	movs	r3, #8
 8006f24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	0e5b      	lsrs	r3, r3, #25
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	f003 0307 	and.w	r3, r3, #7
 8006f34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	0f5b      	lsrs	r3, r3, #29
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	f003 0307 	and.w	r3, r3, #7
 8006f44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f46:	7bbb      	ldrb	r3, [r7, #14]
 8006f48:	7b3a      	ldrb	r2, [r7, #12]
 8006f4a:	4911      	ldr	r1, [pc, #68]	@ (8006f90 <UARTEx_SetNbDataToProcess+0x94>)
 8006f4c:	5c8a      	ldrb	r2, [r1, r2]
 8006f4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f52:	7b3a      	ldrb	r2, [r7, #12]
 8006f54:	490f      	ldr	r1, [pc, #60]	@ (8006f94 <UARTEx_SetNbDataToProcess+0x98>)
 8006f56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f58:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
 8006f66:	7b7a      	ldrb	r2, [r7, #13]
 8006f68:	4909      	ldr	r1, [pc, #36]	@ (8006f90 <UARTEx_SetNbDataToProcess+0x94>)
 8006f6a:	5c8a      	ldrb	r2, [r1, r2]
 8006f6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f70:	7b7a      	ldrb	r2, [r7, #13]
 8006f72:	4908      	ldr	r1, [pc, #32]	@ (8006f94 <UARTEx_SetNbDataToProcess+0x98>)
 8006f74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f76:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006f82:	bf00      	nop
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	080070a4 	.word	0x080070a4
 8006f94:	080070ac 	.word	0x080070ac

08006f98 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	ed93 7a06 	vldr	s14, [r3, #24]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	edd3 7a07 	vldr	s15, [r3, #28]
 8006fae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	edd3 7a08 	vldr	s15, [r3, #32]
 8006fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	edd3 7a06 	vldr	s15, [r3, #24]
 8006fc8:	eeb1 7a67 	vneg.f32	s14, s15
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	edd3 7a08 	vldr	s15, [r3, #32]
 8006fd2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a1a      	ldr	r2, [r3, #32]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d006      	beq.n	8006ffc <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	330c      	adds	r3, #12
 8006ff2:	220c      	movs	r2, #12
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 f804 	bl	8007004 <memset>
  }

}
 8006ffc:	bf00      	nop
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <memset>:
 8007004:	4402      	add	r2, r0
 8007006:	4603      	mov	r3, r0
 8007008:	4293      	cmp	r3, r2
 800700a:	d100      	bne.n	800700e <memset+0xa>
 800700c:	4770      	bx	lr
 800700e:	f803 1b01 	strb.w	r1, [r3], #1
 8007012:	e7f9      	b.n	8007008 <memset+0x4>

08007014 <__libc_init_array>:
 8007014:	b570      	push	{r4, r5, r6, lr}
 8007016:	4d0d      	ldr	r5, [pc, #52]	@ (800704c <__libc_init_array+0x38>)
 8007018:	4c0d      	ldr	r4, [pc, #52]	@ (8007050 <__libc_init_array+0x3c>)
 800701a:	1b64      	subs	r4, r4, r5
 800701c:	10a4      	asrs	r4, r4, #2
 800701e:	2600      	movs	r6, #0
 8007020:	42a6      	cmp	r6, r4
 8007022:	d109      	bne.n	8007038 <__libc_init_array+0x24>
 8007024:	4d0b      	ldr	r5, [pc, #44]	@ (8007054 <__libc_init_array+0x40>)
 8007026:	4c0c      	ldr	r4, [pc, #48]	@ (8007058 <__libc_init_array+0x44>)
 8007028:	f000 f818 	bl	800705c <_init>
 800702c:	1b64      	subs	r4, r4, r5
 800702e:	10a4      	asrs	r4, r4, #2
 8007030:	2600      	movs	r6, #0
 8007032:	42a6      	cmp	r6, r4
 8007034:	d105      	bne.n	8007042 <__libc_init_array+0x2e>
 8007036:	bd70      	pop	{r4, r5, r6, pc}
 8007038:	f855 3b04 	ldr.w	r3, [r5], #4
 800703c:	4798      	blx	r3
 800703e:	3601      	adds	r6, #1
 8007040:	e7ee      	b.n	8007020 <__libc_init_array+0xc>
 8007042:	f855 3b04 	ldr.w	r3, [r5], #4
 8007046:	4798      	blx	r3
 8007048:	3601      	adds	r6, #1
 800704a:	e7f2      	b.n	8007032 <__libc_init_array+0x1e>
 800704c:	080070bc 	.word	0x080070bc
 8007050:	080070bc 	.word	0x080070bc
 8007054:	080070bc 	.word	0x080070bc
 8007058:	080070c0 	.word	0x080070c0

0800705c <_init>:
 800705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705e:	bf00      	nop
 8007060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007062:	bc08      	pop	{r3}
 8007064:	469e      	mov	lr, r3
 8007066:	4770      	bx	lr

08007068 <_fini>:
 8007068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706a:	bf00      	nop
 800706c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706e:	bc08      	pop	{r3}
 8007070:	469e      	mov	lr, r3
 8007072:	4770      	bx	lr
