
Elec Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081bc  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008394  08008394  00009394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083d4  080083d4  0000a010  2**0
                  CONTENTS
  4 .ARM          00000008  080083d4  080083d4  000093d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083dc  080083dc  0000a010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083dc  080083dc  000093dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083e0  080083e0  000093e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080083e4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  20000010  080083f4  0000a010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  080083f4  0000a500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018910  00000000  00000000  0000a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc8  00000000  00000000  00022950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001508  00000000  00000000  00025618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001072  00000000  00000000  00026b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028fae  00000000  00000000  00027b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a21  00000000  00000000  00050b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114781  00000000  00000000  00069561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017dce2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b28  00000000  00000000  0017dd28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00183850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800837c 	.word	0x0800837c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	0800837c 	.word	0x0800837c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f001 f8f4 	bl	80016fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f947 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 fca9 	bl	8000e6c <MX_GPIO_Init>
  MX_DMA_Init();
 800051a:	f000 fc7d 	bl	8000e18 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800051e:	f000 fa17 	bl	8000950 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000522:	f000 f98b 	bl	800083c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000526:	f000 fb5b 	bl	8000be0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800052a:	f000 fba7 	bl	8000c7c <MX_TIM4_Init>
  MX_TIM5_Init();
 800052e:	f000 fc1d 	bl	8000d6c <MX_TIM5_Init>
  MX_TIM2_Init();
 8000532:	f000 fb07 	bl	8000b44 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000536:	f000 fa55 	bl	80009e4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 200);
 800053a:	22c8      	movs	r2, #200	@ 0xc8
 800053c:	497f      	ldr	r1, [pc, #508]	@ (800073c <main+0x234>)
 800053e:	4880      	ldr	r0, [pc, #512]	@ (8000740 <main+0x238>)
 8000540:	f001 fd48 	bl	8001fd4 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000544:	487f      	ldr	r0, [pc, #508]	@ (8000744 <main+0x23c>)
 8000546:	f004 fe0d 	bl	8005164 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 800054a:	487f      	ldr	r0, [pc, #508]	@ (8000748 <main+0x240>)
 800054c:	f004 fe0a 	bl	8005164 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000550:	487e      	ldr	r0, [pc, #504]	@ (800074c <main+0x244>)
 8000552:	f004 fe77 	bl	8005244 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000556:	2100      	movs	r1, #0
 8000558:	487d      	ldr	r0, [pc, #500]	@ (8000750 <main+0x248>)
 800055a:	f004 ff4d 	bl	80053f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800055e:	2100      	movs	r1, #0
 8000560:	4879      	ldr	r0, [pc, #484]	@ (8000748 <main+0x240>)
 8000562:	f004 ff49 	bl	80053f8 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 8000566:	213c      	movs	r1, #60	@ 0x3c
 8000568:	487a      	ldr	r0, [pc, #488]	@ (8000754 <main+0x24c>)
 800056a:	f005 f8fd 	bl	8005768 <HAL_TIM_Encoder_Start>



  PID.Kp =0.1;
 800056e:	4b7a      	ldr	r3, [pc, #488]	@ (8000758 <main+0x250>)
 8000570:	4a7a      	ldr	r2, [pc, #488]	@ (800075c <main+0x254>)
 8000572:	619a      	str	r2, [r3, #24]
  PID.Ki =0;
 8000574:	4b78      	ldr	r3, [pc, #480]	@ (8000758 <main+0x250>)
 8000576:	f04f 0200 	mov.w	r2, #0
 800057a:	61da      	str	r2, [r3, #28]
  PID.Kd = 0;
 800057c:	4b76      	ldr	r3, [pc, #472]	@ (8000758 <main+0x250>)
 800057e:	f04f 0200 	mov.w	r2, #0
 8000582:	621a      	str	r2, [r3, #32]
  set_pos = 0;
 8000584:	4b76      	ldr	r3, [pc, #472]	@ (8000760 <main+0x258>)
 8000586:	f04f 0200 	mov.w	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
  z = 0;
 800058c:	4b75      	ldr	r3, [pc, #468]	@ (8000764 <main+0x25c>)
 800058e:	2200      	movs	r2, #0
 8000590:	801a      	strh	r2, [r3, #0]
  arm_pid_init_f32(&PID, 0);
 8000592:	2100      	movs	r1, #0
 8000594:	4870      	ldr	r0, [pc, #448]	@ (8000758 <main+0x250>)
 8000596:	f007 fe8f 	bl	80082b8 <arm_pid_init_f32>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Degree = (QEIReadRaw/48)*360;
 800059a:	4b73      	ldr	r3, [pc, #460]	@ (8000768 <main+0x260>)
 800059c:	ed93 7a00 	vldr	s14, [r3]
 80005a0:	eddf 6a72 	vldr	s13, [pc, #456]	@ 800076c <main+0x264>
 80005a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005a8:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8000770 <main+0x268>
 80005ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005b0:	4b70      	ldr	r3, [pc, #448]	@ (8000774 <main+0x26c>)
 80005b2:	edc3 7a00 	vstr	s15, [r3]
	  for (uint16_t i =0; i < 100;i++)
 80005b6:	2300      	movs	r3, #0
 80005b8:	81fb      	strh	r3, [r7, #14]
 80005ba:	e019      	b.n	80005f0 <main+0xe8>
	  {
		  x += ADC_RawRead[(i*2)];
 80005bc:	89fb      	ldrh	r3, [r7, #14]
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	4a5e      	ldr	r2, [pc, #376]	@ (800073c <main+0x234>)
 80005c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b6b      	ldr	r3, [pc, #428]	@ (8000778 <main+0x270>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4413      	add	r3, r2
 80005ce:	4a6a      	ldr	r2, [pc, #424]	@ (8000778 <main+0x270>)
 80005d0:	6013      	str	r3, [r2, #0]
		  y += ADC_RawRead[(i*2)+1];
 80005d2:	89fb      	ldrh	r3, [r7, #14]
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	3301      	adds	r3, #1
 80005d8:	4a58      	ldr	r2, [pc, #352]	@ (800073c <main+0x234>)
 80005da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005de:	461a      	mov	r2, r3
 80005e0:	4b66      	ldr	r3, [pc, #408]	@ (800077c <main+0x274>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4413      	add	r3, r2
 80005e6:	4a65      	ldr	r2, [pc, #404]	@ (800077c <main+0x274>)
 80005e8:	6013      	str	r3, [r2, #0]
	  for (uint16_t i =0; i < 100;i++)
 80005ea:	89fb      	ldrh	r3, [r7, #14]
 80005ec:	3301      	adds	r3, #1
 80005ee:	81fb      	strh	r3, [r7, #14]
 80005f0:	89fb      	ldrh	r3, [r7, #14]
 80005f2:	2b63      	cmp	r3, #99	@ 0x63
 80005f4:	d9e2      	bls.n	80005bc <main+0xb4>
	  }
	  posADC = x/(100);
 80005f6:	4b60      	ldr	r3, [pc, #384]	@ (8000778 <main+0x270>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a61      	ldr	r2, [pc, #388]	@ (8000780 <main+0x278>)
 80005fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000600:	095b      	lsrs	r3, r3, #5
 8000602:	b29a      	uxth	r2, r3
 8000604:	4b5f      	ldr	r3, [pc, #380]	@ (8000784 <main+0x27c>)
 8000606:	801a      	strh	r2, [r3, #0]
	  setADC = y/(100);
 8000608:	4b5c      	ldr	r3, [pc, #368]	@ (800077c <main+0x274>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a5c      	ldr	r2, [pc, #368]	@ (8000780 <main+0x278>)
 800060e:	fba2 2303 	umull	r2, r3, r2, r3
 8000612:	095b      	lsrs	r3, r3, #5
 8000614:	b29a      	uxth	r2, r3
 8000616:	4b5c      	ldr	r3, [pc, #368]	@ (8000788 <main+0x280>)
 8000618:	801a      	strh	r2, [r3, #0]
	  x = 0;
 800061a:	4b57      	ldr	r3, [pc, #348]	@ (8000778 <main+0x270>)
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
	  y = 0;
 8000620:	4b56      	ldr	r3, [pc, #344]	@ (800077c <main+0x274>)
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]


	  Vfeedback = (arm_pid_f32(&PID, set_pos - pos))*32676/3072;
 8000626:	4b4e      	ldr	r3, [pc, #312]	@ (8000760 <main+0x258>)
 8000628:	ed93 7a00 	vldr	s14, [r3]
 800062c:	4b57      	ldr	r3, [pc, #348]	@ (800078c <main+0x284>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	ee07 3a90 	vmov	s15, r3
 8000634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000638:	ee77 7a67 	vsub.f32	s15, s14, s15
 800063c:	4b46      	ldr	r3, [pc, #280]	@ (8000758 <main+0x250>)
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	edc7 7a01 	vstr	s15, [r7, #4]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	ed93 7a00 	vldr	s14, [r3]
 800064a:	edd7 7a01 	vldr	s15, [r7, #4]
 800064e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	edd3 6a01 	vldr	s13, [r3, #4]
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	edd3 7a03 	vldr	s15, [r3, #12]
 800065e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000662:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	edd3 6a02 	vldr	s13, [r3, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000672:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000676:	ee37 7a27 	vadd.f32	s14, s14, s15
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000684:	edc7 7a00 	vstr	s15, [r7]

    /* Update state */
    S->state[1] = S->state[0];
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	68da      	ldr	r2, [r3, #12]
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	683a      	ldr	r2, [r7, #0]
 800069a:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800069c:	edd7 7a00 	vldr	s15, [r7]
 80006a0:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8000790 <main+0x288>
 80006a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80006a8:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8000794 <main+0x28c>
 80006ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006b0:	4b39      	ldr	r3, [pc, #228]	@ (8000798 <main+0x290>)
 80006b2:	edc3 7a00 	vstr	s15, [r3]
	  if(Vfeedback > 0)
 80006b6:	4b38      	ldr	r3, [pc, #224]	@ (8000798 <main+0x290>)
 80006b8:	edd3 7a00 	vldr	s15, [r3]
 80006bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006c4:	dd08      	ble.n	80006d8 <main+0x1d0>
	  {
		  //z = 1;
		  PWM1 = Vfeedback;
 80006c6:	4b34      	ldr	r3, [pc, #208]	@ (8000798 <main+0x290>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a34      	ldr	r2, [pc, #208]	@ (800079c <main+0x294>)
 80006cc:	6013      	str	r3, [r2, #0]
		  PWM2 = 0;
 80006ce:	4b34      	ldr	r3, [pc, #208]	@ (80007a0 <main+0x298>)
 80006d0:	f04f 0200 	mov.w	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	e01c      	b.n	8000712 <main+0x20a>

	  }
	  else if(Vfeedback < 0)
 80006d8:	4b2f      	ldr	r3, [pc, #188]	@ (8000798 <main+0x290>)
 80006da:	edd3 7a00 	vldr	s15, [r3]
 80006de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006e6:	d50c      	bpl.n	8000702 <main+0x1fa>
	  {
		  PWM1 = 0;
 80006e8:	4b2c      	ldr	r3, [pc, #176]	@ (800079c <main+0x294>)
 80006ea:	f04f 0200 	mov.w	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
		  PWM2 = Vfeedback * -1;
 80006f0:	4b29      	ldr	r3, [pc, #164]	@ (8000798 <main+0x290>)
 80006f2:	edd3 7a00 	vldr	s15, [r3]
 80006f6:	eef1 7a67 	vneg.f32	s15, s15
 80006fa:	4b29      	ldr	r3, [pc, #164]	@ (80007a0 <main+0x298>)
 80006fc:	edc3 7a00 	vstr	s15, [r3]
 8000700:	e007      	b.n	8000712 <main+0x20a>
	  }
	  else{
		  PWM1 = 0;
 8000702:	4b26      	ldr	r3, [pc, #152]	@ (800079c <main+0x294>)
 8000704:	f04f 0200 	mov.w	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
		  PWM2 = 0;
 800070a:	4b25      	ldr	r3, [pc, #148]	@ (80007a0 <main+0x298>)
 800070c:	f04f 0200 	mov.w	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
	  }
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM1);
 8000712:	4b22      	ldr	r3, [pc, #136]	@ (800079c <main+0x294>)
 8000714:	edd3 7a00 	vldr	s15, [r3]
 8000718:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <main+0x240>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000720:	ee17 2a90 	vmov	r2, s15
 8000724:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM2);
 8000726:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <main+0x298>)
 8000728:	edd3 7a00 	vldr	s15, [r3]
 800072c:	4b08      	ldr	r3, [pc, #32]	@ (8000750 <main+0x248>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000734:	ee17 2a90 	vmov	r2, s15
 8000738:	635a      	str	r2, [r3, #52]	@ 0x34
	  Degree = (QEIReadRaw/48)*360;
 800073a:	e72e      	b.n	800059a <main+0x92>
 800073c:	20000330 	.word	0x20000330
 8000740:	2000002c 	.word	0x2000002c
 8000744:	20000224 	.word	0x20000224
 8000748:	20000270 	.word	0x20000270
 800074c:	200001d8 	.word	0x200001d8
 8000750:	2000018c 	.word	0x2000018c
 8000754:	200002bc 	.word	0x200002bc
 8000758:	200004c0 	.word	0x200004c0
 800075c:	3dcccccd 	.word	0x3dcccccd
 8000760:	20000318 	.word	0x20000318
 8000764:	20000310 	.word	0x20000310
 8000768:	20000324 	.word	0x20000324
 800076c:	42400000 	.word	0x42400000
 8000770:	43b40000 	.word	0x43b40000
 8000774:	2000032c 	.word	0x2000032c
 8000778:	20000308 	.word	0x20000308
 800077c:	2000030c 	.word	0x2000030c
 8000780:	51eb851f 	.word	0x51eb851f
 8000784:	200004e4 	.word	0x200004e4
 8000788:	200004e6 	.word	0x200004e6
 800078c:	20000314 	.word	0x20000314
 8000790:	46ff4800 	.word	0x46ff4800
 8000794:	45400000 	.word	0x45400000
 8000798:	200004e8 	.word	0x200004e8
 800079c:	2000031c 	.word	0x2000031c
 80007a0:	20000320 	.word	0x20000320

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b094      	sub	sp, #80	@ 0x50
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0318 	add.w	r3, r7, #24
 80007ae:	2238      	movs	r2, #56	@ 0x38
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f007 fdb6 	bl	8008324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007c6:	2000      	movs	r0, #0
 80007c8:	f003 fc44 	bl	8004054 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007cc:	2302      	movs	r3, #2
 80007ce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d6:	2340      	movs	r3, #64	@ 0x40
 80007d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007da:	2302      	movs	r3, #2
 80007dc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007de:	2302      	movs	r3, #2
 80007e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007e2:	2304      	movs	r3, #4
 80007e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007e6:	2355      	movs	r3, #85	@ 0x55
 80007e8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007f2:	2302      	movs	r3, #2
 80007f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f6:	f107 0318 	add.w	r3, r7, #24
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 fcde 	bl	80041bc <HAL_RCC_OscConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000806:	f000 fc97 	bl	8001138 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080a:	230f      	movs	r3, #15
 800080c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080e:	2303      	movs	r3, #3
 8000810:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2104      	movs	r1, #4
 8000822:	4618      	mov	r0, r3
 8000824:	f003 ffdc 	bl	80047e0 <HAL_RCC_ClockConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800082e:	f000 fc83 	bl	8001138 <Error_Handler>
  }
}
 8000832:	bf00      	nop
 8000834:	3750      	adds	r7, #80	@ 0x50
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08c      	sub	sp, #48	@ 0x30
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000842:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2220      	movs	r2, #32
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f007 fd65 	bl	8008324 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800085a:	4b3a      	ldr	r3, [pc, #232]	@ (8000944 <MX_ADC1_Init+0x108>)
 800085c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000860:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000862:	4b38      	ldr	r3, [pc, #224]	@ (8000944 <MX_ADC1_Init+0x108>)
 8000864:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000868:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800086a:	4b36      	ldr	r3, [pc, #216]	@ (8000944 <MX_ADC1_Init+0x108>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000870:	4b34      	ldr	r3, [pc, #208]	@ (8000944 <MX_ADC1_Init+0x108>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000876:	4b33      	ldr	r3, [pc, #204]	@ (8000944 <MX_ADC1_Init+0x108>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800087c:	4b31      	ldr	r3, [pc, #196]	@ (8000944 <MX_ADC1_Init+0x108>)
 800087e:	2201      	movs	r2, #1
 8000880:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000882:	4b30      	ldr	r3, [pc, #192]	@ (8000944 <MX_ADC1_Init+0x108>)
 8000884:	2204      	movs	r2, #4
 8000886:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000888:	4b2e      	ldr	r3, [pc, #184]	@ (8000944 <MX_ADC1_Init+0x108>)
 800088a:	2200      	movs	r2, #0
 800088c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800088e:	4b2d      	ldr	r3, [pc, #180]	@ (8000944 <MX_ADC1_Init+0x108>)
 8000890:	2200      	movs	r2, #0
 8000892:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000894:	4b2b      	ldr	r3, [pc, #172]	@ (8000944 <MX_ADC1_Init+0x108>)
 8000896:	2202      	movs	r2, #2
 8000898:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800089a:	4b2a      	ldr	r3, [pc, #168]	@ (8000944 <MX_ADC1_Init+0x108>)
 800089c:	2200      	movs	r2, #0
 800089e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80008a2:	4b28      	ldr	r3, [pc, #160]	@ (8000944 <MX_ADC1_Init+0x108>)
 80008a4:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 80008a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80008aa:	4b26      	ldr	r3, [pc, #152]	@ (8000944 <MX_ADC1_Init+0x108>)
 80008ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008b2:	4b24      	ldr	r3, [pc, #144]	@ (8000944 <MX_ADC1_Init+0x108>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008ba:	4b22      	ldr	r3, [pc, #136]	@ (8000944 <MX_ADC1_Init+0x108>)
 80008bc:	2200      	movs	r2, #0
 80008be:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80008c0:	4b20      	ldr	r3, [pc, #128]	@ (8000944 <MX_ADC1_Init+0x108>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008c8:	481e      	ldr	r0, [pc, #120]	@ (8000944 <MX_ADC1_Init+0x108>)
 80008ca:	f001 f9c7 	bl	8001c5c <HAL_ADC_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80008d4:	f000 fc30 	bl	8001138 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e0:	4619      	mov	r1, r3
 80008e2:	4818      	ldr	r0, [pc, #96]	@ (8000944 <MX_ADC1_Init+0x108>)
 80008e4:	f002 fc94 	bl	8003210 <HAL_ADCEx_MultiModeConfigChannel>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80008ee:	f000 fc23 	bl	8001138 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008f2:	4b15      	ldr	r3, [pc, #84]	@ (8000948 <MX_ADC1_Init+0x10c>)
 80008f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008f6:	2306      	movs	r3, #6
 80008f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80008fa:	2302      	movs	r3, #2
 80008fc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008fe:	237f      	movs	r3, #127	@ 0x7f
 8000900:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000902:	2304      	movs	r3, #4
 8000904:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	4619      	mov	r1, r3
 800090e:	480d      	ldr	r0, [pc, #52]	@ (8000944 <MX_ADC1_Init+0x108>)
 8000910:	f001 febc 	bl	800268c <HAL_ADC_ConfigChannel>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800091a:	f000 fc0d 	bl	8001138 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <MX_ADC1_Init+0x110>)
 8000920:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000922:	230c      	movs	r3, #12
 8000924:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	4619      	mov	r1, r3
 800092a:	4806      	ldr	r0, [pc, #24]	@ (8000944 <MX_ADC1_Init+0x108>)
 800092c:	f001 feae 	bl	800268c <HAL_ADC_ConfigChannel>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000936:	f000 fbff 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	3730      	adds	r7, #48	@ 0x30
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000002c 	.word	0x2000002c
 8000948:	04300002 	.word	0x04300002
 800094c:	08600004 	.word	0x08600004

08000950 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000954:	4b21      	ldr	r3, [pc, #132]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 8000956:	4a22      	ldr	r2, [pc, #136]	@ (80009e0 <MX_LPUART1_UART_Init+0x90>)
 8000958:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800095a:	4b20      	ldr	r3, [pc, #128]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b1e      	ldr	r3, [pc, #120]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b1c      	ldr	r3, [pc, #112]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800096e:	4b1b      	ldr	r3, [pc, #108]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b19      	ldr	r3, [pc, #100]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b18      	ldr	r3, [pc, #96]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000980:	4b16      	ldr	r3, [pc, #88]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000986:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 8000988:	2200      	movs	r2, #0
 800098a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098c:	4b13      	ldr	r3, [pc, #76]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 800098e:	2200      	movs	r2, #0
 8000990:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000992:	4812      	ldr	r0, [pc, #72]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 8000994:	f006 f928 	bl	8006be8 <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800099e:	f000 fbcb 	bl	8001138 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a2:	2100      	movs	r1, #0
 80009a4:	480d      	ldr	r0, [pc, #52]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 80009a6:	f007 fbbc 	bl	8008122 <HAL_UARTEx_SetTxFifoThreshold>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80009b0:	f000 fbc2 	bl	8001138 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b4:	2100      	movs	r1, #0
 80009b6:	4809      	ldr	r0, [pc, #36]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 80009b8:	f007 fbf1 	bl	800819e <HAL_UARTEx_SetRxFifoThreshold>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80009c2:	f000 fbb9 	bl	8001138 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 80009c8:	f007 fb72 	bl	80080b0 <HAL_UARTEx_DisableFifoMode>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80009d2:	f000 fbb1 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000f8 	.word	0x200000f8
 80009e0:	40008000 	.word	0x40008000

080009e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b09c      	sub	sp, #112	@ 0x70
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ea:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a04:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
 8000a14:	615a      	str	r2, [r3, #20]
 8000a16:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2234      	movs	r2, #52	@ 0x34
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f007 fc80 	bl	8008324 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a24:	4b45      	ldr	r3, [pc, #276]	@ (8000b3c <MX_TIM1_Init+0x158>)
 8000a26:	4a46      	ldr	r2, [pc, #280]	@ (8000b40 <MX_TIM1_Init+0x15c>)
 8000a28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8000a2a:	4b44      	ldr	r3, [pc, #272]	@ (8000b3c <MX_TIM1_Init+0x158>)
 8000a2c:	22a9      	movs	r2, #169	@ 0xa9
 8000a2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a30:	4b42      	ldr	r3, [pc, #264]	@ (8000b3c <MX_TIM1_Init+0x158>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 32675;
 8000a36:	4b41      	ldr	r3, [pc, #260]	@ (8000b3c <MX_TIM1_Init+0x158>)
 8000a38:	f647 72a3 	movw	r2, #32675	@ 0x7fa3
 8000a3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3e:	4b3f      	ldr	r3, [pc, #252]	@ (8000b3c <MX_TIM1_Init+0x158>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a44:	4b3d      	ldr	r3, [pc, #244]	@ (8000b3c <MX_TIM1_Init+0x158>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4a:	4b3c      	ldr	r3, [pc, #240]	@ (8000b3c <MX_TIM1_Init+0x158>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a50:	483a      	ldr	r0, [pc, #232]	@ (8000b3c <MX_TIM1_Init+0x158>)
 8000a52:	f004 fb2f 	bl	80050b4 <HAL_TIM_Base_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a5c:	f000 fb6c 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a64:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a66:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4833      	ldr	r0, [pc, #204]	@ (8000b3c <MX_TIM1_Init+0x158>)
 8000a6e:	f005 f96d 	bl	8005d4c <HAL_TIM_ConfigClockSource>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a78:	f000 fb5e 	bl	8001138 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a7c:	482f      	ldr	r0, [pc, #188]	@ (8000b3c <MX_TIM1_Init+0x158>)
 8000a7e:	f004 fc59 	bl	8005334 <HAL_TIM_PWM_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a88:	f000 fb56 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a90:	2300      	movs	r3, #0
 8000a92:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a98:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4827      	ldr	r0, [pc, #156]	@ (8000b3c <MX_TIM1_Init+0x158>)
 8000aa0:	f005 ff32 	bl	8006908 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000aaa:	f000 fb45 	bl	8001138 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aae:	2360      	movs	r3, #96	@ 0x60
 8000ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000aba:	2300      	movs	r3, #0
 8000abc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ace:	2200      	movs	r2, #0
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	481a      	ldr	r0, [pc, #104]	@ (8000b3c <MX_TIM1_Init+0x158>)
 8000ad4:	f005 f826 	bl	8005b24 <HAL_TIM_PWM_ConfigChannel>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000ade:	f000 fb2b 	bl	8001138 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000af6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000afa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b12:	2300      	movs	r3, #0
 8000b14:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4807      	ldr	r0, [pc, #28]	@ (8000b3c <MX_TIM1_Init+0x158>)
 8000b20:	f005 ff88 	bl	8006a34 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8000b2a:	f000 fb05 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b2e:	4803      	ldr	r0, [pc, #12]	@ (8000b3c <MX_TIM1_Init+0x158>)
 8000b30:	f000 fce0 	bl	80014f4 <HAL_TIM_MspPostInit>

}
 8000b34:	bf00      	nop
 8000b36:	3770      	adds	r7, #112	@ 0x70
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	2000018c 	.word	0x2000018c
 8000b40:	40012c00 	.word	0x40012c00

08000b44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4a:	f107 0310 	add.w	r3, r7, #16
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b62:	4b1e      	ldr	r3, [pc, #120]	@ (8000bdc <MX_TIM2_Init+0x98>)
 8000b64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bdc <MX_TIM2_Init+0x98>)
 8000b6c:	22a9      	movs	r2, #169	@ 0xa9
 8000b6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b70:	4b1a      	ldr	r3, [pc, #104]	@ (8000bdc <MX_TIM2_Init+0x98>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000b76:	4b19      	ldr	r3, [pc, #100]	@ (8000bdc <MX_TIM2_Init+0x98>)
 8000b78:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7e:	4b17      	ldr	r3, [pc, #92]	@ (8000bdc <MX_TIM2_Init+0x98>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b84:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <MX_TIM2_Init+0x98>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b8a:	4814      	ldr	r0, [pc, #80]	@ (8000bdc <MX_TIM2_Init+0x98>)
 8000b8c:	f004 fa92 	bl	80050b4 <HAL_TIM_Base_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b96:	f000 facf 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480d      	ldr	r0, [pc, #52]	@ (8000bdc <MX_TIM2_Init+0x98>)
 8000ba8:	f005 f8d0 	bl	8005d4c <HAL_TIM_ConfigClockSource>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bb2:	f000 fac1 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bb6:	2320      	movs	r3, #32
 8000bb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	@ (8000bdc <MX_TIM2_Init+0x98>)
 8000bc4:	f005 fea0 	bl	8006908 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000bce:	f000 fab3 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3720      	adds	r7, #32
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200001d8 	.word	0x200001d8

08000be0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be6:	f107 0310 	add.w	r3, r7, #16
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8000c74 <MX_TIM3_Init+0x94>)
 8000c00:	4a1d      	ldr	r2, [pc, #116]	@ (8000c78 <MX_TIM3_Init+0x98>)
 8000c02:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8000c04:	4b1b      	ldr	r3, [pc, #108]	@ (8000c74 <MX_TIM3_Init+0x94>)
 8000c06:	22a9      	movs	r2, #169	@ 0xa9
 8000c08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c74 <MX_TIM3_Init+0x94>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000c10:	4b18      	ldr	r3, [pc, #96]	@ (8000c74 <MX_TIM3_Init+0x94>)
 8000c12:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c18:	4b16      	ldr	r3, [pc, #88]	@ (8000c74 <MX_TIM3_Init+0x94>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1e:	4b15      	ldr	r3, [pc, #84]	@ (8000c74 <MX_TIM3_Init+0x94>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c24:	4813      	ldr	r0, [pc, #76]	@ (8000c74 <MX_TIM3_Init+0x94>)
 8000c26:	f004 fa45 	bl	80050b4 <HAL_TIM_Base_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000c30:	f000 fa82 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c3a:	f107 0310 	add.w	r3, r7, #16
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480c      	ldr	r0, [pc, #48]	@ (8000c74 <MX_TIM3_Init+0x94>)
 8000c42:	f005 f883 	bl	8005d4c <HAL_TIM_ConfigClockSource>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c4c:	f000 fa74 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c50:	2320      	movs	r3, #32
 8000c52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	@ (8000c74 <MX_TIM3_Init+0x94>)
 8000c5e:	f005 fe53 	bl	8006908 <HAL_TIMEx_MasterConfigSynchronization>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000c68:	f000 fa66 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	3720      	adds	r7, #32
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000224 	.word	0x20000224
 8000c78:	40000400 	.word	0x40000400

08000c7c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08e      	sub	sp, #56	@ 0x38
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]
 8000caa:	615a      	str	r2, [r3, #20]
 8000cac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cae:	4b2d      	ldr	r3, [pc, #180]	@ (8000d64 <MX_TIM4_Init+0xe8>)
 8000cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8000d68 <MX_TIM4_Init+0xec>)
 8000cb2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8000cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8000d64 <MX_TIM4_Init+0xe8>)
 8000cb6:	22a9      	movs	r2, #169	@ 0xa9
 8000cb8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cba:	4b2a      	ldr	r3, [pc, #168]	@ (8000d64 <MX_TIM4_Init+0xe8>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 32675;
 8000cc0:	4b28      	ldr	r3, [pc, #160]	@ (8000d64 <MX_TIM4_Init+0xe8>)
 8000cc2:	f647 72a3 	movw	r2, #32675	@ 0x7fa3
 8000cc6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc8:	4b26      	ldr	r3, [pc, #152]	@ (8000d64 <MX_TIM4_Init+0xe8>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cce:	4b25      	ldr	r3, [pc, #148]	@ (8000d64 <MX_TIM4_Init+0xe8>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cd4:	4823      	ldr	r0, [pc, #140]	@ (8000d64 <MX_TIM4_Init+0xe8>)
 8000cd6:	f004 f9ed 	bl	80050b4 <HAL_TIM_Base_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000ce0:	f000 fa2a 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cee:	4619      	mov	r1, r3
 8000cf0:	481c      	ldr	r0, [pc, #112]	@ (8000d64 <MX_TIM4_Init+0xe8>)
 8000cf2:	f005 f82b 	bl	8005d4c <HAL_TIM_ConfigClockSource>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000cfc:	f000 fa1c 	bl	8001138 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d00:	4818      	ldr	r0, [pc, #96]	@ (8000d64 <MX_TIM4_Init+0xe8>)
 8000d02:	f004 fb17 	bl	8005334 <HAL_TIM_PWM_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000d0c:	f000 fa14 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4811      	ldr	r0, [pc, #68]	@ (8000d64 <MX_TIM4_Init+0xe8>)
 8000d20:	f005 fdf2 	bl	8006908 <HAL_TIMEx_MasterConfigSynchronization>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000d2a:	f000 fa05 	bl	8001138 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d2e:	2360      	movs	r3, #96	@ 0x60
 8000d30:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8000d32:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d36:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d40:	463b      	mov	r3, r7
 8000d42:	2200      	movs	r2, #0
 8000d44:	4619      	mov	r1, r3
 8000d46:	4807      	ldr	r0, [pc, #28]	@ (8000d64 <MX_TIM4_Init+0xe8>)
 8000d48:	f004 feec 	bl	8005b24 <HAL_TIM_PWM_ConfigChannel>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000d52:	f000 f9f1 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d56:	4803      	ldr	r0, [pc, #12]	@ (8000d64 <MX_TIM4_Init+0xe8>)
 8000d58:	f000 fbcc 	bl	80014f4 <HAL_TIM_MspPostInit>

}
 8000d5c:	bf00      	nop
 8000d5e:	3738      	adds	r7, #56	@ 0x38
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000270 	.word	0x20000270
 8000d68:	40000800 	.word	0x40000800

08000d6c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08c      	sub	sp, #48	@ 0x30
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	2224      	movs	r2, #36	@ 0x24
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f007 fad2 	bl	8008324 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d80:	463b      	mov	r3, r7
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d8a:	4b21      	ldr	r3, [pc, #132]	@ (8000e10 <MX_TIM5_Init+0xa4>)
 8000d8c:	4a21      	ldr	r2, [pc, #132]	@ (8000e14 <MX_TIM5_Init+0xa8>)
 8000d8e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000d90:	4b1f      	ldr	r3, [pc, #124]	@ (8000e10 <MX_TIM5_Init+0xa4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d96:	4b1e      	ldr	r3, [pc, #120]	@ (8000e10 <MX_TIM5_Init+0xa4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000d9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e10 <MX_TIM5_Init+0xa4>)
 8000d9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000da2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e10 <MX_TIM5_Init+0xa4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000daa:	4b19      	ldr	r3, [pc, #100]	@ (8000e10 <MX_TIM5_Init+0xa4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000db0:	2303      	movs	r3, #3
 8000db2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000db4:	2300      	movs	r3, #0
 8000db6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000db8:	2301      	movs	r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480d      	ldr	r0, [pc, #52]	@ (8000e10 <MX_TIM5_Init+0xa4>)
 8000ddc:	f004 fc1e 	bl	800561c <HAL_TIM_Encoder_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000de6:	f000 f9a7 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dea:	2300      	movs	r3, #0
 8000dec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000df2:	463b      	mov	r3, r7
 8000df4:	4619      	mov	r1, r3
 8000df6:	4806      	ldr	r0, [pc, #24]	@ (8000e10 <MX_TIM5_Init+0xa4>)
 8000df8:	f005 fd86 	bl	8006908 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000e02:	f000 f999 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	3730      	adds	r7, #48	@ 0x30
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200002bc 	.word	0x200002bc
 8000e14:	40000c00 	.word	0x40000c00

08000e18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e1e:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <MX_DMA_Init+0x50>)
 8000e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e22:	4a11      	ldr	r2, [pc, #68]	@ (8000e68 <MX_DMA_Init+0x50>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e68 <MX_DMA_Init+0x50>)
 8000e2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e2e:	f003 0304 	and.w	r3, r3, #4
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e36:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <MX_DMA_Init+0x50>)
 8000e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e68 <MX_DMA_Init+0x50>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e42:	4b09      	ldr	r3, [pc, #36]	@ (8000e68 <MX_DMA_Init+0x50>)
 8000e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	200b      	movs	r0, #11
 8000e54:	f002 fbbf 	bl	80035d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e58:	200b      	movs	r0, #11
 8000e5a:	f002 fbd6 	bl	800360a <HAL_NVIC_EnableIRQ>

}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000

08000e6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	@ 0x28
 8000e70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e82:	4b39      	ldr	r3, [pc, #228]	@ (8000f68 <MX_GPIO_Init+0xfc>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e86:	4a38      	ldr	r2, [pc, #224]	@ (8000f68 <MX_GPIO_Init+0xfc>)
 8000e88:	f043 0304 	orr.w	r3, r3, #4
 8000e8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e8e:	4b36      	ldr	r3, [pc, #216]	@ (8000f68 <MX_GPIO_Init+0xfc>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e92:	f003 0304 	and.w	r3, r3, #4
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e9a:	4b33      	ldr	r3, [pc, #204]	@ (8000f68 <MX_GPIO_Init+0xfc>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9e:	4a32      	ldr	r2, [pc, #200]	@ (8000f68 <MX_GPIO_Init+0xfc>)
 8000ea0:	f043 0320 	orr.w	r3, r3, #32
 8000ea4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ea6:	4b30      	ldr	r3, [pc, #192]	@ (8000f68 <MX_GPIO_Init+0xfc>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eaa:	f003 0320 	and.w	r3, r3, #32
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f68 <MX_GPIO_Init+0xfc>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb6:	4a2c      	ldr	r2, [pc, #176]	@ (8000f68 <MX_GPIO_Init+0xfc>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ebe:	4b2a      	ldr	r3, [pc, #168]	@ (8000f68 <MX_GPIO_Init+0xfc>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eca:	4b27      	ldr	r3, [pc, #156]	@ (8000f68 <MX_GPIO_Init+0xfc>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ece:	4a26      	ldr	r2, [pc, #152]	@ (8000f68 <MX_GPIO_Init+0xfc>)
 8000ed0:	f043 0302 	orr.w	r3, r3, #2
 8000ed4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed6:	4b24      	ldr	r3, [pc, #144]	@ (8000f68 <MX_GPIO_Init+0xfc>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2130      	movs	r1, #48	@ 0x30
 8000ee6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eea:	f003 f85d 	bl	8003fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	481e      	ldr	r0, [pc, #120]	@ (8000f6c <MX_GPIO_Init+0x100>)
 8000ef4:	f003 f858 	bl	8003fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ef8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000efe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4818      	ldr	r0, [pc, #96]	@ (8000f70 <MX_GPIO_Init+0x104>)
 8000f10:	f002 fec8 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8000f14:	2330      	movs	r3, #48	@ 0x30
 8000f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f2e:	f002 feb9 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f32:	2301      	movs	r3, #1
 8000f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	4808      	ldr	r0, [pc, #32]	@ (8000f6c <MX_GPIO_Init+0x100>)
 8000f4a:	f002 feab 	bl	8003ca4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	2028      	movs	r0, #40	@ 0x28
 8000f54:	f002 fb3f 	bl	80035d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f58:	2028      	movs	r0, #40	@ 0x28
 8000f5a:	f002 fb56 	bl	800360a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f5e:	bf00      	nop
 8000f60:	3728      	adds	r7, #40	@ 0x28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	48000400 	.word	0x48000400
 8000f70:	48000800 	.word	0x48000800

08000f74 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if (htim == &htim2 )
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a5c      	ldr	r2, [pc, #368]	@ (80010f0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	f040 80b1 	bne.w	80010e8 <HAL_TIM_PeriodElapsedCallback+0x174>
  {
	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim5);
 8000f86:	4b5b      	ldr	r3, [pc, #364]	@ (80010f4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f8c:	ee07 3a90 	vmov	s15, r3
 8000f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f94:	4b58      	ldr	r3, [pc, #352]	@ (80010f8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000f96:	edc3 7a00 	vstr	s15, [r3]
	  //spd =  QEIReadRaw * 1000 / 250 * 8;
	  if(QEIReadRaw > 32678)
 8000f9a:	4b57      	ldr	r3, [pc, #348]	@ (80010f8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000f9c:	edd3 7a00 	vldr	s15, [r3]
 8000fa0:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 80010fc <HAL_TIM_PeriodElapsedCallback+0x188>
 8000fa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fac:	dd18      	ble.n	8000fe0 <HAL_TIM_PeriodElapsedCallback+0x6c>
	  {
		  pos -= (65536-QEIReadRaw);
 8000fae:	4b54      	ldr	r3, [pc, #336]	@ (8001100 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fba:	4b4f      	ldr	r3, [pc, #316]	@ (80010f8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000fbc:	edd3 7a00 	vldr	s15, [r3]
 8000fc0:	eddf 6a50 	vldr	s13, [pc, #320]	@ 8001104 <HAL_TIM_PeriodElapsedCallback+0x190>
 8000fc4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000fc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fd0:	ee17 2a90 	vmov	r2, s15
 8000fd4:	4b4a      	ldr	r3, [pc, #296]	@ (8001100 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000fd6:	601a      	str	r2, [r3, #0]
		  z = 1;
 8000fd8:	4b4b      	ldr	r3, [pc, #300]	@ (8001108 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	801a      	strh	r2, [r3, #0]
 8000fde:	e013      	b.n	8001008 <HAL_TIM_PeriodElapsedCallback+0x94>
	  }
	  else
	  {
		  pos += QEIReadRaw;
 8000fe0:	4b47      	ldr	r3, [pc, #284]	@ (8001100 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	ee07 3a90 	vmov	s15, r3
 8000fe8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fec:	4b42      	ldr	r3, [pc, #264]	@ (80010f8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000fee:	edd3 7a00 	vldr	s15, [r3]
 8000ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ffa:	ee17 2a90 	vmov	r2, s15
 8000ffe:	4b40      	ldr	r3, [pc, #256]	@ (8001100 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001000:	601a      	str	r2, [r3, #0]
		  z = 2;
 8001002:	4b41      	ldr	r3, [pc, #260]	@ (8001108 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001004:	2202      	movs	r2, #2
 8001006:	801a      	strh	r2, [r3, #0]
	  }
	  QEIReadOld = QEIReadRaw;
 8001008:	4b3b      	ldr	r3, [pc, #236]	@ (80010f8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a3f      	ldr	r2, [pc, #252]	@ (800110c <HAL_TIM_PeriodElapsedCallback+0x198>)
 800100e:	6013      	str	r3, [r2, #0]
	  __HAL_TIM_SET_COUNTER(&htim5, 0);
 8001010:	4b38      	ldr	r3, [pc, #224]	@ (80010f4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2200      	movs	r2, #0
 8001016:	625a      	str	r2, [r3, #36]	@ 0x24

//////////////////////////////UART//////////////////////////

	  a = a+1;
 8001018:	4b3d      	ldr	r3, [pc, #244]	@ (8001110 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	3301      	adds	r3, #1
 800101e:	b2da      	uxtb	r2, r3
 8001020:	4b3b      	ldr	r3, [pc, #236]	@ (8001110 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001022:	701a      	strb	r2, [r3, #0]
	  a = a % 5;
 8001024:	4b3a      	ldr	r3, [pc, #232]	@ (8001110 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001026:	781a      	ldrb	r2, [r3, #0]
 8001028:	4b3a      	ldr	r3, [pc, #232]	@ (8001114 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800102a:	fba3 1302 	umull	r1, r3, r3, r2
 800102e:	0899      	lsrs	r1, r3, #2
 8001030:	460b      	mov	r3, r1
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	440b      	add	r3, r1
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4b35      	ldr	r3, [pc, #212]	@ (8001110 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800103c:	701a      	strb	r2, [r3, #0]
	  if (a == 0)
 800103e:	4b34      	ldr	r3, [pc, #208]	@ (8001110 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d104      	bne.n	8001050 <HAL_TIM_PeriodElapsedCallback+0xdc>
	  {
	  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001046:	2120      	movs	r1, #32
 8001048:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800104c:	f002 ffc4 	bl	8003fd8 <HAL_GPIO_TogglePin>
	  }

	  b = b+1;
 8001050:	4b31      	ldr	r3, [pc, #196]	@ (8001118 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b2f      	ldr	r3, [pc, #188]	@ (8001118 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800105a:	701a      	strb	r2, [r3, #0]
	  b = b % 1000;
 800105c:	4b2e      	ldr	r3, [pc, #184]	@ (8001118 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b2e      	ldr	r3, [pc, #184]	@ (800111c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001064:	fb83 1302 	smull	r1, r3, r3, r2
 8001068:	1199      	asrs	r1, r3, #6
 800106a:	17d3      	asrs	r3, r2, #31
 800106c:	1acb      	subs	r3, r1, r3
 800106e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001072:	fb01 f303 	mul.w	r3, r1, r3
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4b27      	ldr	r3, [pc, #156]	@ (8001118 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800107c:	701a      	strb	r2, [r3, #0]
	  if (b == 0)
 800107e:	4b26      	ldr	r3, [pc, #152]	@ (8001118 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d130      	bne.n	80010e8 <HAL_TIM_PeriodElapsedCallback+0x174>
	  {
		  ADCst = (uint8_t)(set_ADC & 0xFF);
 8001086:	4b26      	ldr	r3, [pc, #152]	@ (8001120 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	4b25      	ldr	r3, [pc, #148]	@ (8001124 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800108e:	701a      	strb	r2, [r3, #0]
		  ADCnd = (uint8_t)((set_ADC >> 8) & 0xFF);
 8001090:	4b23      	ldr	r3, [pc, #140]	@ (8001120 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	b29b      	uxth	r3, r3
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4b23      	ldr	r3, [pc, #140]	@ (8001128 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800109c:	701a      	strb	r2, [r3, #0]
		  txBuffer[0] = 69;
 800109e:	4b23      	ldr	r3, [pc, #140]	@ (800112c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80010a0:	2245      	movs	r2, #69	@ 0x45
 80010a2:	701a      	strb	r2, [r3, #0]
		  txBuffer[1] = ADCst ;
 80010a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001124 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80010a6:	781a      	ldrb	r2, [r3, #0]
 80010a8:	4b20      	ldr	r3, [pc, #128]	@ (800112c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80010aa:	705a      	strb	r2, [r3, #1]
		  txBuffer[2] = ADCnd ;
 80010ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001128 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80010ae:	781a      	ldrb	r2, [r3, #0]
 80010b0:	4b1e      	ldr	r3, [pc, #120]	@ (800112c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80010b2:	709a      	strb	r2, [r3, #2]
		  txBuffer[3] = '\n';
 80010b4:	4b1d      	ldr	r3, [pc, #116]	@ (800112c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80010b6:	220a      	movs	r2, #10
 80010b8:	70da      	strb	r2, [r3, #3]
		  HAL_UART_Transmit(&hlpuart1, txBuffer, 4, 100);
 80010ba:	2364      	movs	r3, #100	@ 0x64
 80010bc:	2204      	movs	r2, #4
 80010be:	491b      	ldr	r1, [pc, #108]	@ (800112c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80010c0:	481b      	ldr	r0, [pc, #108]	@ (8001130 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80010c2:	f005 fde1 	bl	8006c88 <HAL_UART_Transmit>
		  HAL_UART_Receive(&hlpuart1, rxBuffer, 4, 100);
 80010c6:	2364      	movs	r3, #100	@ 0x64
 80010c8:	2204      	movs	r2, #4
 80010ca:	491a      	ldr	r1, [pc, #104]	@ (8001134 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80010cc:	4818      	ldr	r0, [pc, #96]	@ (8001130 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80010ce:	f005 fe69 	bl	8006da4 <HAL_UART_Receive>
		  rxBuffer[2] = (rxBuffer[0]-69)/256;
 80010d2:	4b18      	ldr	r3, [pc, #96]	@ (8001134 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80010d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d8:	3b45      	subs	r3, #69	@ 0x45
 80010da:	2b00      	cmp	r3, #0
 80010dc:	da00      	bge.n	80010e0 <HAL_TIM_PeriodElapsedCallback+0x16c>
 80010de:	33ff      	adds	r3, #255	@ 0xff
 80010e0:	121b      	asrs	r3, r3, #8
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80010e6:	809a      	strh	r2, [r3, #4]
	  }

	  }
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200001d8 	.word	0x200001d8
 80010f4:	200002bc 	.word	0x200002bc
 80010f8:	20000324 	.word	0x20000324
 80010fc:	46ff4c00 	.word	0x46ff4c00
 8001100:	20000314 	.word	0x20000314
 8001104:	47800000 	.word	0x47800000
 8001108:	20000310 	.word	0x20000310
 800110c:	20000328 	.word	0x20000328
 8001110:	200004f4 	.word	0x200004f4
 8001114:	cccccccd 	.word	0xcccccccd
 8001118:	200004f5 	.word	0x200004f5
 800111c:	10624dd3 	.word	0x10624dd3
 8001120:	20000000 	.word	0x20000000
 8001124:	200004f6 	.word	0x200004f6
 8001128:	200004f7 	.word	0x200004f7
 800112c:	200004f8 	.word	0x200004f8
 8001130:	200000f8 	.word	0x200000f8
 8001134:	200004ec 	.word	0x200004ec

08001138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <Error_Handler+0x8>

08001144 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <HAL_MspInit+0x44>)
 800114c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800114e:	4a0e      	ldr	r2, [pc, #56]	@ (8001188 <HAL_MspInit+0x44>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6613      	str	r3, [r2, #96]	@ 0x60
 8001156:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <HAL_MspInit+0x44>)
 8001158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <HAL_MspInit+0x44>)
 8001164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001166:	4a08      	ldr	r2, [pc, #32]	@ (8001188 <HAL_MspInit+0x44>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800116c:	6593      	str	r3, [r2, #88]	@ 0x58
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_MspInit+0x44>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800117a:	f003 f80f 	bl	800419c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000

0800118c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b09e      	sub	sp, #120	@ 0x78
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	2254      	movs	r2, #84	@ 0x54
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f007 f8b9 	bl	8008324 <memset>
  if(hadc->Instance==ADC1)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011ba:	d167      	bne.n	800128c <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011c0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011c2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80011c6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	4618      	mov	r0, r3
 80011ce:	f003 fd23 	bl	8004c18 <HAL_RCCEx_PeriphCLKConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80011d8:	f7ff ffae 	bl	8001138 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001294 <HAL_ADC_MspInit+0x108>)
 80011de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e0:	4a2c      	ldr	r2, [pc, #176]	@ (8001294 <HAL_ADC_MspInit+0x108>)
 80011e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001294 <HAL_ADC_MspInit+0x108>)
 80011ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	4b27      	ldr	r3, [pc, #156]	@ (8001294 <HAL_ADC_MspInit+0x108>)
 80011f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f8:	4a26      	ldr	r2, [pc, #152]	@ (8001294 <HAL_ADC_MspInit+0x108>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001200:	4b24      	ldr	r3, [pc, #144]	@ (8001294 <HAL_ADC_MspInit+0x108>)
 8001202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800120c:	2303      	movs	r3, #3
 800120e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001210:	2303      	movs	r3, #3
 8001212:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800121c:	4619      	mov	r1, r3
 800121e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001222:	f002 fd3f 	bl	8003ca4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001226:	4b1c      	ldr	r3, [pc, #112]	@ (8001298 <HAL_ADC_MspInit+0x10c>)
 8001228:	4a1c      	ldr	r2, [pc, #112]	@ (800129c <HAL_ADC_MspInit+0x110>)
 800122a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800122c:	4b1a      	ldr	r3, [pc, #104]	@ (8001298 <HAL_ADC_MspInit+0x10c>)
 800122e:	2205      	movs	r2, #5
 8001230:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001232:	4b19      	ldr	r3, [pc, #100]	@ (8001298 <HAL_ADC_MspInit+0x10c>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001238:	4b17      	ldr	r3, [pc, #92]	@ (8001298 <HAL_ADC_MspInit+0x10c>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800123e:	4b16      	ldr	r3, [pc, #88]	@ (8001298 <HAL_ADC_MspInit+0x10c>)
 8001240:	2280      	movs	r2, #128	@ 0x80
 8001242:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001244:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <HAL_ADC_MspInit+0x10c>)
 8001246:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800124a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800124c:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <HAL_ADC_MspInit+0x10c>)
 800124e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001252:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001254:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <HAL_ADC_MspInit+0x10c>)
 8001256:	2220      	movs	r2, #32
 8001258:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800125a:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <HAL_ADC_MspInit+0x10c>)
 800125c:	2200      	movs	r2, #0
 800125e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001260:	480d      	ldr	r0, [pc, #52]	@ (8001298 <HAL_ADC_MspInit+0x10c>)
 8001262:	f002 f9ed 	bl	8003640 <HAL_DMA_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800126c:	f7ff ff64 	bl	8001138 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a09      	ldr	r2, [pc, #36]	@ (8001298 <HAL_ADC_MspInit+0x10c>)
 8001274:	655a      	str	r2, [r3, #84]	@ 0x54
 8001276:	4a08      	ldr	r2, [pc, #32]	@ (8001298 <HAL_ADC_MspInit+0x10c>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	2012      	movs	r0, #18
 8001282:	f002 f9a8 	bl	80035d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001286:	2012      	movs	r0, #18
 8001288:	f002 f9bf 	bl	800360a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800128c:	bf00      	nop
 800128e:	3778      	adds	r7, #120	@ 0x78
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40021000 	.word	0x40021000
 8001298:	20000098 	.word	0x20000098
 800129c:	40020008 	.word	0x40020008

080012a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b09e      	sub	sp, #120	@ 0x78
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	2254      	movs	r2, #84	@ 0x54
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f007 f82f 	bl	8008324 <memset>
  if(huart->Instance==LPUART1)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a23      	ldr	r2, [pc, #140]	@ (8001358 <HAL_UART_MspInit+0xb8>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d13e      	bne.n	800134e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80012d0:	2320      	movs	r3, #32
 80012d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d8:	f107 0310 	add.w	r3, r7, #16
 80012dc:	4618      	mov	r0, r3
 80012de:	f003 fc9b 	bl	8004c18 <HAL_RCCEx_PeriphCLKConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012e8:	f7ff ff26 	bl	8001138 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80012ec:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <HAL_UART_MspInit+0xbc>)
 80012ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012f0:	4a1a      	ldr	r2, [pc, #104]	@ (800135c <HAL_UART_MspInit+0xbc>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80012f8:	4b18      	ldr	r3, [pc, #96]	@ (800135c <HAL_UART_MspInit+0xbc>)
 80012fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001304:	4b15      	ldr	r3, [pc, #84]	@ (800135c <HAL_UART_MspInit+0xbc>)
 8001306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001308:	4a14      	ldr	r2, [pc, #80]	@ (800135c <HAL_UART_MspInit+0xbc>)
 800130a:	f043 0301 	orr.w	r3, r3, #1
 800130e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001310:	4b12      	ldr	r3, [pc, #72]	@ (800135c <HAL_UART_MspInit+0xbc>)
 8001312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800131c:	230c      	movs	r3, #12
 800131e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800132c:	230c      	movs	r3, #12
 800132e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001330:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001334:	4619      	mov	r1, r3
 8001336:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800133a:	f002 fcb3 	bl	8003ca4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2100      	movs	r1, #0
 8001342:	205b      	movs	r0, #91	@ 0x5b
 8001344:	f002 f947 	bl	80035d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001348:	205b      	movs	r0, #91	@ 0x5b
 800134a:	f002 f95e 	bl	800360a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800134e:	bf00      	nop
 8001350:	3778      	adds	r7, #120	@ 0x78
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40008000 	.word	0x40008000
 800135c:	40021000 	.word	0x40021000

08001360 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a2c      	ldr	r2, [pc, #176]	@ (8001420 <HAL_TIM_Base_MspInit+0xc0>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d10c      	bne.n	800138c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001372:	4b2c      	ldr	r3, [pc, #176]	@ (8001424 <HAL_TIM_Base_MspInit+0xc4>)
 8001374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001376:	4a2b      	ldr	r2, [pc, #172]	@ (8001424 <HAL_TIM_Base_MspInit+0xc4>)
 8001378:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800137c:	6613      	str	r3, [r2, #96]	@ 0x60
 800137e:	4b29      	ldr	r3, [pc, #164]	@ (8001424 <HAL_TIM_Base_MspInit+0xc4>)
 8001380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001382:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800138a:	e044      	b.n	8001416 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001394:	d114      	bne.n	80013c0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001396:	4b23      	ldr	r3, [pc, #140]	@ (8001424 <HAL_TIM_Base_MspInit+0xc4>)
 8001398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139a:	4a22      	ldr	r2, [pc, #136]	@ (8001424 <HAL_TIM_Base_MspInit+0xc4>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80013a2:	4b20      	ldr	r3, [pc, #128]	@ (8001424 <HAL_TIM_Base_MspInit+0xc4>)
 80013a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	201c      	movs	r0, #28
 80013b4:	f002 f90f 	bl	80035d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013b8:	201c      	movs	r0, #28
 80013ba:	f002 f926 	bl	800360a <HAL_NVIC_EnableIRQ>
}
 80013be:	e02a      	b.n	8001416 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a18      	ldr	r2, [pc, #96]	@ (8001428 <HAL_TIM_Base_MspInit+0xc8>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d114      	bne.n	80013f4 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013ca:	4b16      	ldr	r3, [pc, #88]	@ (8001424 <HAL_TIM_Base_MspInit+0xc4>)
 80013cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ce:	4a15      	ldr	r2, [pc, #84]	@ (8001424 <HAL_TIM_Base_MspInit+0xc4>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80013d6:	4b13      	ldr	r3, [pc, #76]	@ (8001424 <HAL_TIM_Base_MspInit+0xc4>)
 80013d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2100      	movs	r1, #0
 80013e6:	201d      	movs	r0, #29
 80013e8:	f002 f8f5 	bl	80035d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013ec:	201d      	movs	r0, #29
 80013ee:	f002 f90c 	bl	800360a <HAL_NVIC_EnableIRQ>
}
 80013f2:	e010      	b.n	8001416 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0c      	ldr	r2, [pc, #48]	@ (800142c <HAL_TIM_Base_MspInit+0xcc>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d10b      	bne.n	8001416 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013fe:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <HAL_TIM_Base_MspInit+0xc4>)
 8001400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001402:	4a08      	ldr	r2, [pc, #32]	@ (8001424 <HAL_TIM_Base_MspInit+0xc4>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	6593      	str	r3, [r2, #88]	@ 0x58
 800140a:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <HAL_TIM_Base_MspInit+0xc4>)
 800140c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
}
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40012c00 	.word	0x40012c00
 8001424:	40021000 	.word	0x40021000
 8001428:	40000400 	.word	0x40000400
 800142c:	40000800 	.word	0x40000800

08001430 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	@ 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a25      	ldr	r2, [pc, #148]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0xb4>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d144      	bne.n	80014dc <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001452:	4b25      	ldr	r3, [pc, #148]	@ (80014e8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001456:	4a24      	ldr	r2, [pc, #144]	@ (80014e8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001458:	f043 0308 	orr.w	r3, r3, #8
 800145c:	6593      	str	r3, [r2, #88]	@ 0x58
 800145e:	4b22      	ldr	r3, [pc, #136]	@ (80014e8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	4b1f      	ldr	r3, [pc, #124]	@ (80014e8 <HAL_TIM_Encoder_MspInit+0xb8>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	4a1e      	ldr	r2, [pc, #120]	@ (80014e8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001476:	4b1c      	ldr	r3, [pc, #112]	@ (80014e8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001482:	4b19      	ldr	r3, [pc, #100]	@ (80014e8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	4a18      	ldr	r2, [pc, #96]	@ (80014e8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800148e:	4b16      	ldr	r3, [pc, #88]	@ (80014e8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PB2     ------> TIM5_CH1
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800149a:	2304      	movs	r3, #4
 800149c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80014aa:	2302      	movs	r3, #2
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	480d      	ldr	r0, [pc, #52]	@ (80014ec <HAL_TIM_Encoder_MspInit+0xbc>)
 80014b6:	f002 fbf5 	bl	8003ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 80014cc:	2301      	movs	r3, #1
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	4806      	ldr	r0, [pc, #24]	@ (80014f0 <HAL_TIM_Encoder_MspInit+0xc0>)
 80014d8:	f002 fbe4 	bl	8003ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80014dc:	bf00      	nop
 80014de:	3728      	adds	r7, #40	@ 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40000c00 	.word	0x40000c00
 80014e8:	40021000 	.word	0x40021000
 80014ec:	48000400 	.word	0x48000400
 80014f0:	48000800 	.word	0x48000800

080014f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	@ 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a23      	ldr	r2, [pc, #140]	@ (80015a0 <HAL_TIM_MspPostInit+0xac>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d11c      	bne.n	8001550 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001516:	4b23      	ldr	r3, [pc, #140]	@ (80015a4 <HAL_TIM_MspPostInit+0xb0>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151a:	4a22      	ldr	r2, [pc, #136]	@ (80015a4 <HAL_TIM_MspPostInit+0xb0>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001522:	4b20      	ldr	r3, [pc, #128]	@ (80015a4 <HAL_TIM_MspPostInit+0xb0>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800152e:	2301      	movs	r3, #1
 8001530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800153e:	2302      	movs	r3, #2
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4619      	mov	r1, r3
 8001548:	4817      	ldr	r0, [pc, #92]	@ (80015a8 <HAL_TIM_MspPostInit+0xb4>)
 800154a:	f002 fbab 	bl	8003ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800154e:	e022      	b.n	8001596 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a15      	ldr	r2, [pc, #84]	@ (80015ac <HAL_TIM_MspPostInit+0xb8>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d11d      	bne.n	8001596 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <HAL_TIM_MspPostInit+0xb0>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155e:	4a11      	ldr	r2, [pc, #68]	@ (80015a4 <HAL_TIM_MspPostInit+0xb0>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001566:	4b0f      	ldr	r3, [pc, #60]	@ (80015a4 <HAL_TIM_MspPostInit+0xb0>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001572:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001584:	230a      	movs	r3, #10
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001592:	f002 fb87 	bl	8003ca4 <HAL_GPIO_Init>
}
 8001596:	bf00      	nop
 8001598:	3728      	adds	r7, #40	@ 0x28
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40012c00 	.word	0x40012c00
 80015a4:	40021000 	.word	0x40021000
 80015a8:	48000800 	.word	0x48000800
 80015ac:	40000800 	.word	0x40000800

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <NMI_Handler+0x4>

080015b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <HardFault_Handler+0x4>

080015c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <MemManage_Handler+0x4>

080015c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <BusFault_Handler+0x4>

080015d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <UsageFault_Handler+0x4>

080015d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001606:	f000 f8cb 	bl	80017a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001614:	4802      	ldr	r0, [pc, #8]	@ (8001620 <DMA1_Channel1_IRQHandler+0x10>)
 8001616:	f002 f9f6 	bl	8003a06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000098 	.word	0x20000098

08001624 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001628:	4802      	ldr	r0, [pc, #8]	@ (8001634 <ADC1_2_IRQHandler+0x10>)
 800162a:	f000 fda7 	bl	800217c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2000002c 	.word	0x2000002c

08001638 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800163c:	4802      	ldr	r0, [pc, #8]	@ (8001648 <TIM2_IRQHandler+0x10>)
 800163e:	f004 f921 	bl	8005884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200001d8 	.word	0x200001d8

0800164c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001650:	4802      	ldr	r0, [pc, #8]	@ (800165c <TIM3_IRQHandler+0x10>)
 8001652:	f004 f917 	bl	8005884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000224 	.word	0x20000224

08001660 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001664:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001668:	f002 fcd0 	bl	800400c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}

08001670 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001674:	4802      	ldr	r0, [pc, #8]	@ (8001680 <LPUART1_IRQHandler+0x10>)
 8001676:	f005 fc5d 	bl	8006f34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200000f8 	.word	0x200000f8

08001684 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <SystemInit+0x20>)
 800168a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800168e:	4a05      	ldr	r2, [pc, #20]	@ (80016a4 <SystemInit+0x20>)
 8001690:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001694:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016a8:	480d      	ldr	r0, [pc, #52]	@ (80016e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016aa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016ac:	f7ff ffea 	bl	8001684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b0:	480c      	ldr	r0, [pc, #48]	@ (80016e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80016b2:	490d      	ldr	r1, [pc, #52]	@ (80016e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016b4:	4a0d      	ldr	r2, [pc, #52]	@ (80016ec <LoopForever+0xe>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80016b8:	e002      	b.n	80016c0 <LoopCopyDataInit>

080016ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016be:	3304      	adds	r3, #4

080016c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c4:	d3f9      	bcc.n	80016ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c6:	4a0a      	ldr	r2, [pc, #40]	@ (80016f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016c8:	4c0a      	ldr	r4, [pc, #40]	@ (80016f4 <LoopForever+0x16>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016cc:	e001      	b.n	80016d2 <LoopFillZerobss>

080016ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d0:	3204      	adds	r2, #4

080016d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d4:	d3fb      	bcc.n	80016ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016d6:	f006 fe2d 	bl	8008334 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016da:	f7fe ff15 	bl	8000508 <main>

080016de <LoopForever>:

LoopForever:
    b LoopForever
 80016de:	e7fe      	b.n	80016de <LoopForever>
  ldr   r0, =_estack
 80016e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80016ec:	080083e4 	.word	0x080083e4
  ldr r2, =_sbss
 80016f0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80016f4:	20000500 	.word	0x20000500

080016f8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016f8:	e7fe      	b.n	80016f8 <ADC3_IRQHandler>

080016fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001704:	2003      	movs	r0, #3
 8001706:	f001 ff5b 	bl	80035c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800170a:	2000      	movs	r0, #0
 800170c:	f000 f80e 	bl	800172c <HAL_InitTick>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	71fb      	strb	r3, [r7, #7]
 800171a:	e001      	b.n	8001720 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800171c:	f7ff fd12 	bl	8001144 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001720:	79fb      	ldrb	r3, [r7, #7]

}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001738:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <HAL_InitTick+0x68>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d022      	beq.n	8001786 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001740:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <HAL_InitTick+0x6c>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <HAL_InitTick+0x68>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800174c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001750:	fbb2 f3f3 	udiv	r3, r2, r3
 8001754:	4618      	mov	r0, r3
 8001756:	f001 ff66 	bl	8003626 <HAL_SYSTICK_Config>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d10f      	bne.n	8001780 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b0f      	cmp	r3, #15
 8001764:	d809      	bhi.n	800177a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001766:	2200      	movs	r2, #0
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	f04f 30ff 	mov.w	r0, #4294967295
 800176e:	f001 ff32 	bl	80035d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001772:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <HAL_InitTick+0x70>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	e007      	b.n	800178a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	73fb      	strb	r3, [r7, #15]
 800177e:	e004      	b.n	800178a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]
 8001784:	e001      	b.n	800178a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800178a:	7bfb      	ldrb	r3, [r7, #15]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	2000000c 	.word	0x2000000c
 8001798:	20000004 	.word	0x20000004
 800179c:	20000008 	.word	0x20000008

080017a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a4:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <HAL_IncTick+0x1c>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b05      	ldr	r3, [pc, #20]	@ (80017c0 <HAL_IncTick+0x20>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4413      	add	r3, r2
 80017ae:	4a03      	ldr	r2, [pc, #12]	@ (80017bc <HAL_IncTick+0x1c>)
 80017b0:	6013      	str	r3, [r2, #0]
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	200004fc 	.word	0x200004fc
 80017c0:	2000000c 	.word	0x2000000c

080017c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return uwTick;
 80017c8:	4b03      	ldr	r3, [pc, #12]	@ (80017d8 <HAL_GetTick+0x14>)
 80017ca:	681b      	ldr	r3, [r3, #0]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	200004fc 	.word	0x200004fc

080017dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	431a      	orrs	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	609a      	str	r2, [r3, #8]
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	609a      	str	r2, [r3, #8]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
 8001850:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3360      	adds	r3, #96	@ 0x60
 8001856:	461a      	mov	r2, r3
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <LL_ADC_SetOffset+0x44>)
 8001866:	4013      	ands	r3, r2
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	4313      	orrs	r3, r2
 8001874:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800187c:	bf00      	nop
 800187e:	371c      	adds	r7, #28
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	03fff000 	.word	0x03fff000

0800188c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3360      	adds	r3, #96	@ 0x60
 800189a:	461a      	mov	r2, r3
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b087      	sub	sp, #28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3360      	adds	r3, #96	@ 0x60
 80018c8:	461a      	mov	r2, r3
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	431a      	orrs	r2, r3
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018e2:	bf00      	nop
 80018e4:	371c      	adds	r7, #28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b087      	sub	sp, #28
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	60f8      	str	r0, [r7, #12]
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	3360      	adds	r3, #96	@ 0x60
 80018fe:	461a      	mov	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	431a      	orrs	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001918:	bf00      	nop
 800191a:	371c      	adds	r7, #28
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001924:	b480      	push	{r7}
 8001926:	b087      	sub	sp, #28
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	3360      	adds	r3, #96	@ 0x60
 8001934:	461a      	mov	r2, r3
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	431a      	orrs	r2, r3
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800194e:	bf00      	nop
 8001950:	371c      	adds	r7, #28
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	615a      	str	r2, [r3, #20]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b087      	sub	sp, #28
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	3330      	adds	r3, #48	@ 0x30
 80019b6:	461a      	mov	r2, r3
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	0a1b      	lsrs	r3, r3, #8
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	4413      	add	r3, r2
 80019c4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	f003 031f 	and.w	r3, r3, #31
 80019d0:	211f      	movs	r1, #31
 80019d2:	fa01 f303 	lsl.w	r3, r1, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	401a      	ands	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	0e9b      	lsrs	r3, r3, #26
 80019de:	f003 011f 	and.w	r1, r3, #31
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	f003 031f 	and.w	r3, r3, #31
 80019e8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ec:	431a      	orrs	r2, r3
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019f2:	bf00      	nop
 80019f4:	371c      	adds	r7, #28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b087      	sub	sp, #28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	3314      	adds	r3, #20
 8001a34:	461a      	mov	r2, r3
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	0e5b      	lsrs	r3, r3, #25
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	4413      	add	r3, r2
 8001a42:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	0d1b      	lsrs	r3, r3, #20
 8001a4c:	f003 031f 	and.w	r3, r3, #31
 8001a50:	2107      	movs	r1, #7
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	401a      	ands	r2, r3
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	0d1b      	lsrs	r3, r3, #20
 8001a5e:	f003 031f 	and.w	r3, r3, #31
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a6e:	bf00      	nop
 8001a70:	371c      	adds	r7, #28
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a94:	43db      	mvns	r3, r3
 8001a96:	401a      	ands	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f003 0318 	and.w	r3, r3, #24
 8001a9e:	4908      	ldr	r1, [pc, #32]	@ (8001ac0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001aa0:	40d9      	lsrs	r1, r3
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	400b      	ands	r3, r1
 8001aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	0007ffff 	.word	0x0007ffff

08001ac4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 031f 	and.w	r3, r3, #31
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001b0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6093      	str	r3, [r2, #8]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b34:	d101      	bne.n	8001b3a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001b58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b5c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b84:	d101      	bne.n	8001b8a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ba8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bac:	f043 0201 	orr.w	r2, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d101      	bne.n	8001bd8 <LL_ADC_IsEnabled+0x18>
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e000      	b.n	8001bda <LL_ADC_IsEnabled+0x1a>
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bf6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bfa:	f043 0204 	orr.w	r2, r3, #4
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d101      	bne.n	8001c26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d101      	bne.n	8001c4c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e000      	b.n	8001c4e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
	...

08001c5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c5c:	b590      	push	{r4, r7, lr}
 8001c5e:	b089      	sub	sp, #36	@ 0x24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e1a9      	b.n	8001fca <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d109      	bne.n	8001c98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff fa81 	bl	800118c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff3f 	bl	8001b20 <LL_ADC_IsDeepPowerDownEnabled>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d004      	beq.n	8001cb2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff25 	bl	8001afc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff ff5a 	bl	8001b70 <LL_ADC_IsInternalRegulatorEnabled>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d115      	bne.n	8001cee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff ff3e 	bl	8001b48 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ccc:	4b9c      	ldr	r3, [pc, #624]	@ (8001f40 <HAL_ADC_Init+0x2e4>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	099b      	lsrs	r3, r3, #6
 8001cd2:	4a9c      	ldr	r2, [pc, #624]	@ (8001f44 <HAL_ADC_Init+0x2e8>)
 8001cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd8:	099b      	lsrs	r3, r3, #6
 8001cda:	3301      	adds	r3, #1
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ce0:	e002      	b.n	8001ce8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f9      	bne.n	8001ce2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff ff3c 	bl	8001b70 <LL_ADC_IsInternalRegulatorEnabled>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10d      	bne.n	8001d1a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d02:	f043 0210 	orr.w	r2, r3, #16
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d0e:	f043 0201 	orr.w	r2, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ff75 	bl	8001c0e <LL_ADC_REG_IsConversionOngoing>
 8001d24:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d2a:	f003 0310 	and.w	r3, r3, #16
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f040 8142 	bne.w	8001fb8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f040 813e 	bne.w	8001fb8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d40:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d44:	f043 0202 	orr.w	r2, r3, #2
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff35 	bl	8001bc0 <LL_ADC_IsEnabled>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d141      	bne.n	8001de0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d64:	d004      	beq.n	8001d70 <HAL_ADC_Init+0x114>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a77      	ldr	r2, [pc, #476]	@ (8001f48 <HAL_ADC_Init+0x2ec>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d10f      	bne.n	8001d90 <HAL_ADC_Init+0x134>
 8001d70:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001d74:	f7ff ff24 	bl	8001bc0 <LL_ADC_IsEnabled>
 8001d78:	4604      	mov	r4, r0
 8001d7a:	4873      	ldr	r0, [pc, #460]	@ (8001f48 <HAL_ADC_Init+0x2ec>)
 8001d7c:	f7ff ff20 	bl	8001bc0 <LL_ADC_IsEnabled>
 8001d80:	4603      	mov	r3, r0
 8001d82:	4323      	orrs	r3, r4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	bf0c      	ite	eq
 8001d88:	2301      	moveq	r3, #1
 8001d8a:	2300      	movne	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	e012      	b.n	8001db6 <HAL_ADC_Init+0x15a>
 8001d90:	486e      	ldr	r0, [pc, #440]	@ (8001f4c <HAL_ADC_Init+0x2f0>)
 8001d92:	f7ff ff15 	bl	8001bc0 <LL_ADC_IsEnabled>
 8001d96:	4604      	mov	r4, r0
 8001d98:	486d      	ldr	r0, [pc, #436]	@ (8001f50 <HAL_ADC_Init+0x2f4>)
 8001d9a:	f7ff ff11 	bl	8001bc0 <LL_ADC_IsEnabled>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	431c      	orrs	r4, r3
 8001da2:	486c      	ldr	r0, [pc, #432]	@ (8001f54 <HAL_ADC_Init+0x2f8>)
 8001da4:	f7ff ff0c 	bl	8001bc0 <LL_ADC_IsEnabled>
 8001da8:	4603      	mov	r3, r0
 8001daa:	4323      	orrs	r3, r4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	bf0c      	ite	eq
 8001db0:	2301      	moveq	r3, #1
 8001db2:	2300      	movne	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d012      	beq.n	8001de0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dc2:	d004      	beq.n	8001dce <HAL_ADC_Init+0x172>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a5f      	ldr	r2, [pc, #380]	@ (8001f48 <HAL_ADC_Init+0x2ec>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d101      	bne.n	8001dd2 <HAL_ADC_Init+0x176>
 8001dce:	4a62      	ldr	r2, [pc, #392]	@ (8001f58 <HAL_ADC_Init+0x2fc>)
 8001dd0:	e000      	b.n	8001dd4 <HAL_ADC_Init+0x178>
 8001dd2:	4a62      	ldr	r2, [pc, #392]	@ (8001f5c <HAL_ADC_Init+0x300>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4610      	mov	r0, r2
 8001ddc:	f7ff fcfe 	bl	80017dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	7f5b      	ldrb	r3, [r3, #29]
 8001de4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dea:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001df0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001df6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001dfe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d106      	bne.n	8001e1c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e12:	3b01      	subs	r3, #1
 8001e14:	045b      	lsls	r3, r3, #17
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d009      	beq.n	8001e38 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e28:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e30:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	4b48      	ldr	r3, [pc, #288]	@ (8001f60 <HAL_ADC_Init+0x304>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	69b9      	ldr	r1, [r7, #24]
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fee4 	bl	8001c34 <LL_ADC_INJ_IsConversionOngoing>
 8001e6c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d17f      	bne.n	8001f74 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d17c      	bne.n	8001f74 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e7e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e86:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e96:	f023 0302 	bic.w	r3, r3, #2
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	69b9      	ldr	r1, [r7, #24]
 8001ea0:	430b      	orrs	r3, r1
 8001ea2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d017      	beq.n	8001edc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	691a      	ldr	r2, [r3, #16]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001eba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001ec4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ec8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6911      	ldr	r1, [r2, #16]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	430b      	orrs	r3, r1
 8001ed6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001eda:	e013      	b.n	8001f04 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001eea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001efc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f00:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d12a      	bne.n	8001f64 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001f18:	f023 0304 	bic.w	r3, r3, #4
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f24:	4311      	orrs	r1, r2
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001f2a:	4311      	orrs	r1, r2
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f30:	430a      	orrs	r2, r1
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f042 0201 	orr.w	r2, r2, #1
 8001f3c:	611a      	str	r2, [r3, #16]
 8001f3e:	e019      	b.n	8001f74 <HAL_ADC_Init+0x318>
 8001f40:	20000004 	.word	0x20000004
 8001f44:	053e2d63 	.word	0x053e2d63
 8001f48:	50000100 	.word	0x50000100
 8001f4c:	50000400 	.word	0x50000400
 8001f50:	50000500 	.word	0x50000500
 8001f54:	50000600 	.word	0x50000600
 8001f58:	50000300 	.word	0x50000300
 8001f5c:	50000700 	.word	0x50000700
 8001f60:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691a      	ldr	r2, [r3, #16]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0201 	bic.w	r2, r2, #1
 8001f72:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d10c      	bne.n	8001f96 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	f023 010f 	bic.w	r1, r3, #15
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	1e5a      	subs	r2, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f94:	e007      	b.n	8001fa6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 020f 	bic.w	r2, r2, #15
 8001fa4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001faa:	f023 0303 	bic.w	r3, r3, #3
 8001fae:	f043 0201 	orr.w	r2, r3, #1
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001fb6:	e007      	b.n	8001fc8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fbc:	f043 0210 	orr.w	r2, r3, #16
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3724      	adds	r7, #36	@ 0x24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd90      	pop	{r4, r7, pc}
 8001fd2:	bf00      	nop

08001fd4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fe8:	d004      	beq.n	8001ff4 <HAL_ADC_Start_DMA+0x20>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a5a      	ldr	r2, [pc, #360]	@ (8002158 <HAL_ADC_Start_DMA+0x184>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d101      	bne.n	8001ff8 <HAL_ADC_Start_DMA+0x24>
 8001ff4:	4b59      	ldr	r3, [pc, #356]	@ (800215c <HAL_ADC_Start_DMA+0x188>)
 8001ff6:	e000      	b.n	8001ffa <HAL_ADC_Start_DMA+0x26>
 8001ff8:	4b59      	ldr	r3, [pc, #356]	@ (8002160 <HAL_ADC_Start_DMA+0x18c>)
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fd62 	bl	8001ac4 <LL_ADC_GetMultimode>
 8002000:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fe01 	bl	8001c0e <LL_ADC_REG_IsConversionOngoing>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	f040 809b 	bne.w	800214a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800201a:	2b01      	cmp	r3, #1
 800201c:	d101      	bne.n	8002022 <HAL_ADC_Start_DMA+0x4e>
 800201e:	2302      	movs	r3, #2
 8002020:	e096      	b.n	8002150 <HAL_ADC_Start_DMA+0x17c>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a4d      	ldr	r2, [pc, #308]	@ (8002164 <HAL_ADC_Start_DMA+0x190>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d008      	beq.n	8002046 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d005      	beq.n	8002046 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	2b05      	cmp	r3, #5
 800203e:	d002      	beq.n	8002046 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	2b09      	cmp	r3, #9
 8002044:	d17a      	bne.n	800213c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 ff60 	bl	8002f0c <ADC_Enable>
 800204c:	4603      	mov	r3, r0
 800204e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002050:	7dfb      	ldrb	r3, [r7, #23]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d16d      	bne.n	8002132 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800205a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800205e:	f023 0301 	bic.w	r3, r3, #1
 8002062:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a3a      	ldr	r2, [pc, #232]	@ (8002158 <HAL_ADC_Start_DMA+0x184>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d009      	beq.n	8002088 <HAL_ADC_Start_DMA+0xb4>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a3b      	ldr	r2, [pc, #236]	@ (8002168 <HAL_ADC_Start_DMA+0x194>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d002      	beq.n	8002084 <HAL_ADC_Start_DMA+0xb0>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	e003      	b.n	800208c <HAL_ADC_Start_DMA+0xb8>
 8002084:	4b39      	ldr	r3, [pc, #228]	@ (800216c <HAL_ADC_Start_DMA+0x198>)
 8002086:	e001      	b.n	800208c <HAL_ADC_Start_DMA+0xb8>
 8002088:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	4293      	cmp	r3, r2
 8002092:	d002      	beq.n	800209a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d105      	bne.n	80020a6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800209e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d006      	beq.n	80020c0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020b6:	f023 0206 	bic.w	r2, r3, #6
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	661a      	str	r2, [r3, #96]	@ 0x60
 80020be:	e002      	b.n	80020c6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ca:	4a29      	ldr	r2, [pc, #164]	@ (8002170 <HAL_ADC_Start_DMA+0x19c>)
 80020cc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d2:	4a28      	ldr	r2, [pc, #160]	@ (8002174 <HAL_ADC_Start_DMA+0x1a0>)
 80020d4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020da:	4a27      	ldr	r2, [pc, #156]	@ (8002178 <HAL_ADC_Start_DMA+0x1a4>)
 80020dc:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	221c      	movs	r2, #28
 80020e4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f042 0210 	orr.w	r2, r2, #16
 80020fc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f042 0201 	orr.w	r2, r2, #1
 800210c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	3340      	adds	r3, #64	@ 0x40
 8002118:	4619      	mov	r1, r3
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f001 fb37 	bl	8003790 <HAL_DMA_Start_IT>
 8002122:	4603      	mov	r3, r0
 8002124:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fd5b 	bl	8001be6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002130:	e00d      	b.n	800214e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800213a:	e008      	b.n	800214e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002148:	e001      	b.n	800214e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800214a:	2302      	movs	r3, #2
 800214c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800214e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	50000100 	.word	0x50000100
 800215c:	50000300 	.word	0x50000300
 8002160:	50000700 	.word	0x50000700
 8002164:	50000600 	.word	0x50000600
 8002168:	50000500 	.word	0x50000500
 800216c:	50000400 	.word	0x50000400
 8002170:	08003039 	.word	0x08003039
 8002174:	08003111 	.word	0x08003111
 8002178:	0800312d 	.word	0x0800312d

0800217c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08a      	sub	sp, #40	@ 0x28
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002184:	2300      	movs	r3, #0
 8002186:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021a0:	d004      	beq.n	80021ac <HAL_ADC_IRQHandler+0x30>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a8e      	ldr	r2, [pc, #568]	@ (80023e0 <HAL_ADC_IRQHandler+0x264>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d101      	bne.n	80021b0 <HAL_ADC_IRQHandler+0x34>
 80021ac:	4b8d      	ldr	r3, [pc, #564]	@ (80023e4 <HAL_ADC_IRQHandler+0x268>)
 80021ae:	e000      	b.n	80021b2 <HAL_ADC_IRQHandler+0x36>
 80021b0:	4b8d      	ldr	r3, [pc, #564]	@ (80023e8 <HAL_ADC_IRQHandler+0x26c>)
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fc86 	bl	8001ac4 <LL_ADC_GetMultimode>
 80021b8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d017      	beq.n	80021f4 <HAL_ADC_IRQHandler+0x78>
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d012      	beq.n	80021f4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d105      	bne.n	80021e6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021de:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f001 f808 	bl	80031fc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2202      	movs	r2, #2
 80021f2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d004      	beq.n	8002208 <HAL_ADC_IRQHandler+0x8c>
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10b      	bne.n	8002220 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 8094 	beq.w	800233c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 808e 	beq.w	800233c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002224:	f003 0310 	and.w	r3, r3, #16
 8002228:	2b00      	cmp	r3, #0
 800222a:	d105      	bne.n	8002238 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002230:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fb9f 	bl	8001980 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d072      	beq.n	800232e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a64      	ldr	r2, [pc, #400]	@ (80023e0 <HAL_ADC_IRQHandler+0x264>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d009      	beq.n	8002266 <HAL_ADC_IRQHandler+0xea>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a65      	ldr	r2, [pc, #404]	@ (80023ec <HAL_ADC_IRQHandler+0x270>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d002      	beq.n	8002262 <HAL_ADC_IRQHandler+0xe6>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	e003      	b.n	800226a <HAL_ADC_IRQHandler+0xee>
 8002262:	4b63      	ldr	r3, [pc, #396]	@ (80023f0 <HAL_ADC_IRQHandler+0x274>)
 8002264:	e001      	b.n	800226a <HAL_ADC_IRQHandler+0xee>
 8002266:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	4293      	cmp	r3, r2
 8002270:	d008      	beq.n	8002284 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	2b05      	cmp	r3, #5
 800227c:	d002      	beq.n	8002284 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	2b09      	cmp	r3, #9
 8002282:	d104      	bne.n	800228e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	623b      	str	r3, [r7, #32]
 800228c:	e014      	b.n	80022b8 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a53      	ldr	r2, [pc, #332]	@ (80023e0 <HAL_ADC_IRQHandler+0x264>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d009      	beq.n	80022ac <HAL_ADC_IRQHandler+0x130>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a53      	ldr	r2, [pc, #332]	@ (80023ec <HAL_ADC_IRQHandler+0x270>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d002      	beq.n	80022a8 <HAL_ADC_IRQHandler+0x12c>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	e003      	b.n	80022b0 <HAL_ADC_IRQHandler+0x134>
 80022a8:	4b51      	ldr	r3, [pc, #324]	@ (80023f0 <HAL_ADC_IRQHandler+0x274>)
 80022aa:	e001      	b.n	80022b0 <HAL_ADC_IRQHandler+0x134>
 80022ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80022b0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d135      	bne.n	800232e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d12e      	bne.n	800232e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fc9a 	bl	8001c0e <LL_ADC_REG_IsConversionOngoing>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d11a      	bne.n	8002316 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 020c 	bic.w	r2, r2, #12
 80022ee:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002300:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d112      	bne.n	800232e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230c:	f043 0201 	orr.w	r2, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002314:	e00b      	b.n	800232e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800231a:	f043 0210 	orr.w	r2, r3, #16
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002326:	f043 0201 	orr.w	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f984 	bl	800263c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	220c      	movs	r2, #12
 800233a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 0320 	and.w	r3, r3, #32
 8002342:	2b00      	cmp	r3, #0
 8002344:	d004      	beq.n	8002350 <HAL_ADC_IRQHandler+0x1d4>
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	f003 0320 	and.w	r3, r3, #32
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10b      	bne.n	8002368 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 80b3 	beq.w	80024c2 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 80ad 	beq.w	80024c2 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236c:	f003 0310 	and.w	r3, r3, #16
 8002370:	2b00      	cmp	r3, #0
 8002372:	d105      	bne.n	8002380 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002378:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fb3a 	bl	80019fe <LL_ADC_INJ_IsTriggerSourceSWStart>
 800238a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff faf5 	bl	8001980 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002396:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a10      	ldr	r2, [pc, #64]	@ (80023e0 <HAL_ADC_IRQHandler+0x264>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d009      	beq.n	80023b6 <HAL_ADC_IRQHandler+0x23a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a11      	ldr	r2, [pc, #68]	@ (80023ec <HAL_ADC_IRQHandler+0x270>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d002      	beq.n	80023b2 <HAL_ADC_IRQHandler+0x236>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	e003      	b.n	80023ba <HAL_ADC_IRQHandler+0x23e>
 80023b2:	4b0f      	ldr	r3, [pc, #60]	@ (80023f0 <HAL_ADC_IRQHandler+0x274>)
 80023b4:	e001      	b.n	80023ba <HAL_ADC_IRQHandler+0x23e>
 80023b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6812      	ldr	r2, [r2, #0]
 80023be:	4293      	cmp	r3, r2
 80023c0:	d008      	beq.n	80023d4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	2b06      	cmp	r3, #6
 80023cc:	d002      	beq.n	80023d4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2b07      	cmp	r3, #7
 80023d2:	d10f      	bne.n	80023f4 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	623b      	str	r3, [r7, #32]
 80023dc:	e01f      	b.n	800241e <HAL_ADC_IRQHandler+0x2a2>
 80023de:	bf00      	nop
 80023e0:	50000100 	.word	0x50000100
 80023e4:	50000300 	.word	0x50000300
 80023e8:	50000700 	.word	0x50000700
 80023ec:	50000500 	.word	0x50000500
 80023f0:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a8b      	ldr	r2, [pc, #556]	@ (8002628 <HAL_ADC_IRQHandler+0x4ac>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d009      	beq.n	8002412 <HAL_ADC_IRQHandler+0x296>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a8a      	ldr	r2, [pc, #552]	@ (800262c <HAL_ADC_IRQHandler+0x4b0>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d002      	beq.n	800240e <HAL_ADC_IRQHandler+0x292>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	e003      	b.n	8002416 <HAL_ADC_IRQHandler+0x29a>
 800240e:	4b88      	ldr	r3, [pc, #544]	@ (8002630 <HAL_ADC_IRQHandler+0x4b4>)
 8002410:	e001      	b.n	8002416 <HAL_ADC_IRQHandler+0x29a>
 8002412:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002416:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d047      	beq.n	80024b4 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d007      	beq.n	800243e <HAL_ADC_IRQHandler+0x2c2>
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d03f      	beq.n	80024b4 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800243a:	2b00      	cmp	r3, #0
 800243c:	d13a      	bne.n	80024b4 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002448:	2b40      	cmp	r3, #64	@ 0x40
 800244a:	d133      	bne.n	80024b4 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d12e      	bne.n	80024b4 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fbea 	bl	8001c34 <LL_ADC_INJ_IsConversionOngoing>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d11a      	bne.n	800249c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002474:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800247a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800248a:	2b00      	cmp	r3, #0
 800248c:	d112      	bne.n	80024b4 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002492:	f043 0201 	orr.w	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	65da      	str	r2, [r3, #92]	@ 0x5c
 800249a:	e00b      	b.n	80024b4 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a0:	f043 0210 	orr.w	r2, r3, #16
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ac:	f043 0201 	orr.w	r2, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 fe79 	bl	80031ac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2260      	movs	r2, #96	@ 0x60
 80024c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d011      	beq.n	80024f0 <HAL_ADC_IRQHandler+0x374>
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00c      	beq.n	80024f0 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024da:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f8be 	bl	8002664 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2280      	movs	r2, #128	@ 0x80
 80024ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d012      	beq.n	8002520 <HAL_ADC_IRQHandler+0x3a4>
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00d      	beq.n	8002520 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002508:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 fe5f 	bl	80031d4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800251e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002526:	2b00      	cmp	r3, #0
 8002528:	d012      	beq.n	8002550 <HAL_ADC_IRQHandler+0x3d4>
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00d      	beq.n	8002550 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002538:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 fe51 	bl	80031e8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800254e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f003 0310 	and.w	r3, r3, #16
 8002556:	2b00      	cmp	r3, #0
 8002558:	d043      	beq.n	80025e2 <HAL_ADC_IRQHandler+0x466>
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	f003 0310 	and.w	r3, r3, #16
 8002560:	2b00      	cmp	r3, #0
 8002562:	d03e      	beq.n	80025e2 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002568:	2b00      	cmp	r3, #0
 800256a:	d102      	bne.n	8002572 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 800256c:	2301      	movs	r3, #1
 800256e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002570:	e021      	b.n	80025b6 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d015      	beq.n	80025a4 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002580:	d004      	beq.n	800258c <HAL_ADC_IRQHandler+0x410>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a28      	ldr	r2, [pc, #160]	@ (8002628 <HAL_ADC_IRQHandler+0x4ac>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d101      	bne.n	8002590 <HAL_ADC_IRQHandler+0x414>
 800258c:	4b29      	ldr	r3, [pc, #164]	@ (8002634 <HAL_ADC_IRQHandler+0x4b8>)
 800258e:	e000      	b.n	8002592 <HAL_ADC_IRQHandler+0x416>
 8002590:	4b29      	ldr	r3, [pc, #164]	@ (8002638 <HAL_ADC_IRQHandler+0x4bc>)
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff faa4 	bl	8001ae0 <LL_ADC_GetMultiDMATransfer>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00b      	beq.n	80025b6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800259e:	2301      	movs	r3, #1
 80025a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80025a2:	e008      	b.n	80025b6 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80025b2:	2301      	movs	r3, #1
 80025b4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80025b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d10e      	bne.n	80025da <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025cc:	f043 0202 	orr.w	r2, r3, #2
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f84f 	bl	8002678 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2210      	movs	r2, #16
 80025e0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d018      	beq.n	800261e <HAL_ADC_IRQHandler+0x4a2>
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d013      	beq.n	800261e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002606:	f043 0208 	orr.w	r2, r3, #8
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002616:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 fdd1 	bl	80031c0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800261e:	bf00      	nop
 8002620:	3728      	adds	r7, #40	@ 0x28
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	50000100 	.word	0x50000100
 800262c:	50000500 	.word	0x50000500
 8002630:	50000400 	.word	0x50000400
 8002634:	50000300 	.word	0x50000300
 8002638:	50000700 	.word	0x50000700

0800263c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b0b6      	sub	sp, #216	@ 0xd8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d102      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x24>
 80026aa:	2302      	movs	r3, #2
 80026ac:	f000 bc13 	b.w	8002ed6 <HAL_ADC_ConfigChannel+0x84a>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff faa6 	bl	8001c0e <LL_ADC_REG_IsConversionOngoing>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f040 83f3 	bne.w	8002eb0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6859      	ldr	r1, [r3, #4]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	f7ff f965 	bl	80019a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fa94 	bl	8001c0e <LL_ADC_REG_IsConversionOngoing>
 80026e6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff faa0 	bl	8001c34 <LL_ADC_INJ_IsConversionOngoing>
 80026f4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f040 81d9 	bne.w	8002ab4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002702:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002706:	2b00      	cmp	r3, #0
 8002708:	f040 81d4 	bne.w	8002ab4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002714:	d10f      	bne.n	8002736 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2200      	movs	r2, #0
 8002720:	4619      	mov	r1, r3
 8002722:	f7ff f97f 	bl	8001a24 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff f913 	bl	800195a <LL_ADC_SetSamplingTimeCommonConfig>
 8002734:	e00e      	b.n	8002754 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	6819      	ldr	r1, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	461a      	mov	r2, r3
 8002744:	f7ff f96e 	bl	8001a24 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2100      	movs	r1, #0
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff f903 	bl	800195a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	695a      	ldr	r2, [r3, #20]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	08db      	lsrs	r3, r3, #3
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	2b04      	cmp	r3, #4
 8002774:	d022      	beq.n	80027bc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	6919      	ldr	r1, [r3, #16]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002786:	f7ff f85d 	bl	8001844 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	6919      	ldr	r1, [r3, #16]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	461a      	mov	r2, r3
 8002798:	f7ff f8a9 	bl	80018ee <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d102      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x126>
 80027ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027b0:	e000      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x128>
 80027b2:	2300      	movs	r3, #0
 80027b4:	461a      	mov	r2, r3
 80027b6:	f7ff f8b5 	bl	8001924 <LL_ADC_SetOffsetSaturation>
 80027ba:	e17b      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2100      	movs	r1, #0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff f862 	bl	800188c <LL_ADC_GetOffsetChannel>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10a      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x15c>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2100      	movs	r1, #0
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff f857 	bl	800188c <LL_ADC_GetOffsetChannel>
 80027de:	4603      	mov	r3, r0
 80027e0:	0e9b      	lsrs	r3, r3, #26
 80027e2:	f003 021f 	and.w	r2, r3, #31
 80027e6:	e01e      	b.n	8002826 <HAL_ADC_ConfigChannel+0x19a>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2100      	movs	r1, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff f84c 	bl	800188c <LL_ADC_GetOffsetChannel>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80027fe:	fa93 f3a3 	rbit	r3, r3
 8002802:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002806:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800280a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800280e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002816:	2320      	movs	r3, #32
 8002818:	e004      	b.n	8002824 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800281a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800281e:	fab3 f383 	clz	r3, r3
 8002822:	b2db      	uxtb	r3, r3
 8002824:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282e:	2b00      	cmp	r3, #0
 8002830:	d105      	bne.n	800283e <HAL_ADC_ConfigChannel+0x1b2>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	0e9b      	lsrs	r3, r3, #26
 8002838:	f003 031f 	and.w	r3, r3, #31
 800283c:	e018      	b.n	8002870 <HAL_ADC_ConfigChannel+0x1e4>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800284a:	fa93 f3a3 	rbit	r3, r3
 800284e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002856:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800285a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002862:	2320      	movs	r3, #32
 8002864:	e004      	b.n	8002870 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002866:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800286a:	fab3 f383 	clz	r3, r3
 800286e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002870:	429a      	cmp	r2, r3
 8002872:	d106      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2200      	movs	r2, #0
 800287a:	2100      	movs	r1, #0
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff f81b 	bl	80018b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2101      	movs	r1, #1
 8002888:	4618      	mov	r0, r3
 800288a:	f7fe ffff 	bl	800188c <LL_ADC_GetOffsetChannel>
 800288e:	4603      	mov	r3, r0
 8002890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10a      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x222>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2101      	movs	r1, #1
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe fff4 	bl	800188c <LL_ADC_GetOffsetChannel>
 80028a4:	4603      	mov	r3, r0
 80028a6:	0e9b      	lsrs	r3, r3, #26
 80028a8:	f003 021f 	and.w	r2, r3, #31
 80028ac:	e01e      	b.n	80028ec <HAL_ADC_ConfigChannel+0x260>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2101      	movs	r1, #1
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe ffe9 	bl	800188c <LL_ADC_GetOffsetChannel>
 80028ba:	4603      	mov	r3, r0
 80028bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028c4:	fa93 f3a3 	rbit	r3, r3
 80028c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80028cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80028d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80028dc:	2320      	movs	r3, #32
 80028de:	e004      	b.n	80028ea <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80028e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028e4:	fab3 f383 	clz	r3, r3
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d105      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x278>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	0e9b      	lsrs	r3, r3, #26
 80028fe:	f003 031f 	and.w	r3, r3, #31
 8002902:	e018      	b.n	8002936 <HAL_ADC_ConfigChannel+0x2aa>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002910:	fa93 f3a3 	rbit	r3, r3
 8002914:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002918:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800291c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002920:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002928:	2320      	movs	r3, #32
 800292a:	e004      	b.n	8002936 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800292c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002930:	fab3 f383 	clz	r3, r3
 8002934:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002936:	429a      	cmp	r2, r3
 8002938:	d106      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2200      	movs	r2, #0
 8002940:	2101      	movs	r1, #1
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe ffb8 	bl	80018b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2102      	movs	r1, #2
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe ff9c 	bl	800188c <LL_ADC_GetOffsetChannel>
 8002954:	4603      	mov	r3, r0
 8002956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10a      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x2e8>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2102      	movs	r1, #2
 8002964:	4618      	mov	r0, r3
 8002966:	f7fe ff91 	bl	800188c <LL_ADC_GetOffsetChannel>
 800296a:	4603      	mov	r3, r0
 800296c:	0e9b      	lsrs	r3, r3, #26
 800296e:	f003 021f 	and.w	r2, r3, #31
 8002972:	e01e      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x326>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2102      	movs	r1, #2
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe ff86 	bl	800188c <LL_ADC_GetOffsetChannel>
 8002980:	4603      	mov	r3, r0
 8002982:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800298a:	fa93 f3a3 	rbit	r3, r3
 800298e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002992:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002996:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800299a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80029a2:	2320      	movs	r3, #32
 80029a4:	e004      	b.n	80029b0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80029a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029aa:	fab3 f383 	clz	r3, r3
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d105      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x33e>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	0e9b      	lsrs	r3, r3, #26
 80029c4:	f003 031f 	and.w	r3, r3, #31
 80029c8:	e016      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x36c>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80029dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80029e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80029ea:	2320      	movs	r3, #32
 80029ec:	e004      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80029ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d106      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2200      	movs	r2, #0
 8002a02:	2102      	movs	r1, #2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe ff57 	bl	80018b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2103      	movs	r1, #3
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe ff3b 	bl	800188c <LL_ADC_GetOffsetChannel>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10a      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x3aa>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2103      	movs	r1, #3
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fe ff30 	bl	800188c <LL_ADC_GetOffsetChannel>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	0e9b      	lsrs	r3, r3, #26
 8002a30:	f003 021f 	and.w	r2, r3, #31
 8002a34:	e017      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x3da>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2103      	movs	r1, #3
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fe ff25 	bl	800188c <LL_ADC_GetOffsetChannel>
 8002a42:	4603      	mov	r3, r0
 8002a44:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a48:	fa93 f3a3 	rbit	r3, r3
 8002a4c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002a4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a50:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002a52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002a58:	2320      	movs	r3, #32
 8002a5a:	e003      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002a5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a5e:	fab3 f383 	clz	r3, r3
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d105      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x3f2>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	0e9b      	lsrs	r3, r3, #26
 8002a78:	f003 031f 	and.w	r3, r3, #31
 8002a7c:	e011      	b.n	8002aa2 <HAL_ADC_ConfigChannel+0x416>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a86:	fa93 f3a3 	rbit	r3, r3
 8002a8a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002a8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002a90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002a96:	2320      	movs	r3, #32
 8002a98:	e003      	b.n	8002aa2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002a9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a9c:	fab3 f383 	clz	r3, r3
 8002aa0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d106      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	2103      	movs	r1, #3
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe ff02 	bl	80018b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff f881 	bl	8001bc0 <LL_ADC_IsEnabled>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f040 813d 	bne.w	8002d40 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	6819      	ldr	r1, [r3, #0]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	f7fe ffd2 	bl	8001a7c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	4aa2      	ldr	r2, [pc, #648]	@ (8002d68 <HAL_ADC_ConfigChannel+0x6dc>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	f040 812e 	bne.w	8002d40 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10b      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x480>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	0e9b      	lsrs	r3, r3, #26
 8002afa:	3301      	adds	r3, #1
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	2b09      	cmp	r3, #9
 8002b02:	bf94      	ite	ls
 8002b04:	2301      	movls	r3, #1
 8002b06:	2300      	movhi	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	e019      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x4b4>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b14:	fa93 f3a3 	rbit	r3, r3
 8002b18:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002b1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b1c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002b1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002b24:	2320      	movs	r3, #32
 8002b26:	e003      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002b28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	3301      	adds	r3, #1
 8002b32:	f003 031f 	and.w	r3, r3, #31
 8002b36:	2b09      	cmp	r3, #9
 8002b38:	bf94      	ite	ls
 8002b3a:	2301      	movls	r3, #1
 8002b3c:	2300      	movhi	r3, #0
 8002b3e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d079      	beq.n	8002c38 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d107      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x4d4>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	0e9b      	lsrs	r3, r3, #26
 8002b56:	3301      	adds	r3, #1
 8002b58:	069b      	lsls	r3, r3, #26
 8002b5a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b5e:	e015      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x500>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b68:	fa93 f3a3 	rbit	r3, r3
 8002b6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b70:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002b78:	2320      	movs	r3, #32
 8002b7a:	e003      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b7e:	fab3 f383 	clz	r3, r3
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	3301      	adds	r3, #1
 8002b86:	069b      	lsls	r3, r3, #26
 8002b88:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d109      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x520>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	0e9b      	lsrs	r3, r3, #26
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	f003 031f 	and.w	r3, r3, #31
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8002baa:	e017      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x550>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bb4:	fa93 f3a3 	rbit	r3, r3
 8002bb8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002bba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002bbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002bc4:	2320      	movs	r3, #32
 8002bc6:	e003      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002bc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bca:	fab3 f383 	clz	r3, r3
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	f003 031f 	and.w	r3, r3, #31
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bdc:	ea42 0103 	orr.w	r1, r2, r3
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10a      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x576>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	0e9b      	lsrs	r3, r3, #26
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	f003 021f 	and.w	r2, r3, #31
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	4413      	add	r3, r2
 8002bfe:	051b      	lsls	r3, r3, #20
 8002c00:	e018      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x5a8>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c0a:	fa93 f3a3 	rbit	r3, r3
 8002c0e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002c14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002c1a:	2320      	movs	r3, #32
 8002c1c:	e003      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c20:	fab3 f383 	clz	r3, r3
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	3301      	adds	r3, #1
 8002c28:	f003 021f 	and.w	r2, r3, #31
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	4413      	add	r3, r2
 8002c32:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c34:	430b      	orrs	r3, r1
 8002c36:	e07e      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d107      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x5c8>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	0e9b      	lsrs	r3, r3, #26
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	069b      	lsls	r3, r3, #26
 8002c4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c52:	e015      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x5f4>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c5c:	fa93 f3a3 	rbit	r3, r3
 8002c60:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c64:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002c6c:	2320      	movs	r3, #32
 8002c6e:	e003      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	3301      	adds	r3, #1
 8002c7a:	069b      	lsls	r3, r3, #26
 8002c7c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d109      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x614>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	0e9b      	lsrs	r3, r3, #26
 8002c92:	3301      	adds	r3, #1
 8002c94:	f003 031f 	and.w	r3, r3, #31
 8002c98:	2101      	movs	r1, #1
 8002c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9e:	e017      	b.n	8002cd0 <HAL_ADC_ConfigChannel+0x644>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	fa93 f3a3 	rbit	r3, r3
 8002cac:	61fb      	str	r3, [r7, #28]
  return result;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002cb8:	2320      	movs	r3, #32
 8002cba:	e003      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbe:	fab3 f383 	clz	r3, r3
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	f003 031f 	and.w	r3, r3, #31
 8002cca:	2101      	movs	r1, #1
 8002ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd0:	ea42 0103 	orr.w	r1, r2, r3
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10d      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x670>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	0e9b      	lsrs	r3, r3, #26
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	f003 021f 	and.w	r2, r3, #31
 8002cec:	4613      	mov	r3, r2
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3b1e      	subs	r3, #30
 8002cf4:	051b      	lsls	r3, r3, #20
 8002cf6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002cfa:	e01b      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x6a8>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	fa93 f3a3 	rbit	r3, r3
 8002d08:	613b      	str	r3, [r7, #16]
  return result;
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002d14:	2320      	movs	r3, #32
 8002d16:	e003      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	3301      	adds	r3, #1
 8002d22:	f003 021f 	and.w	r2, r3, #31
 8002d26:	4613      	mov	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3b1e      	subs	r3, #30
 8002d2e:	051b      	lsls	r3, r3, #20
 8002d30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d34:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	f7fe fe72 	bl	8001a24 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4b09      	ldr	r3, [pc, #36]	@ (8002d6c <HAL_ADC_ConfigChannel+0x6e0>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 80be 	beq.w	8002eca <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d56:	d004      	beq.n	8002d62 <HAL_ADC_ConfigChannel+0x6d6>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a04      	ldr	r2, [pc, #16]	@ (8002d70 <HAL_ADC_ConfigChannel+0x6e4>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d10a      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x6ec>
 8002d62:	4b04      	ldr	r3, [pc, #16]	@ (8002d74 <HAL_ADC_ConfigChannel+0x6e8>)
 8002d64:	e009      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x6ee>
 8002d66:	bf00      	nop
 8002d68:	407f0000 	.word	0x407f0000
 8002d6c:	80080000 	.word	0x80080000
 8002d70:	50000100 	.word	0x50000100
 8002d74:	50000300 	.word	0x50000300
 8002d78:	4b59      	ldr	r3, [pc, #356]	@ (8002ee0 <HAL_ADC_ConfigChannel+0x854>)
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe fd54 	bl	8001828 <LL_ADC_GetCommonPathInternalCh>
 8002d80:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a56      	ldr	r2, [pc, #344]	@ (8002ee4 <HAL_ADC_ConfigChannel+0x858>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d004      	beq.n	8002d98 <HAL_ADC_ConfigChannel+0x70c>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a55      	ldr	r2, [pc, #340]	@ (8002ee8 <HAL_ADC_ConfigChannel+0x85c>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d13a      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d134      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dac:	d005      	beq.n	8002dba <HAL_ADC_ConfigChannel+0x72e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a4e      	ldr	r2, [pc, #312]	@ (8002eec <HAL_ADC_ConfigChannel+0x860>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	f040 8085 	bne.w	8002ec4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dc2:	d004      	beq.n	8002dce <HAL_ADC_ConfigChannel+0x742>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a49      	ldr	r2, [pc, #292]	@ (8002ef0 <HAL_ADC_ConfigChannel+0x864>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d101      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x746>
 8002dce:	4a49      	ldr	r2, [pc, #292]	@ (8002ef4 <HAL_ADC_ConfigChannel+0x868>)
 8002dd0:	e000      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x748>
 8002dd2:	4a43      	ldr	r2, [pc, #268]	@ (8002ee0 <HAL_ADC_ConfigChannel+0x854>)
 8002dd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dd8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4610      	mov	r0, r2
 8002de0:	f7fe fd0f 	bl	8001802 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002de4:	4b44      	ldr	r3, [pc, #272]	@ (8002ef8 <HAL_ADC_ConfigChannel+0x86c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	099b      	lsrs	r3, r3, #6
 8002dea:	4a44      	ldr	r2, [pc, #272]	@ (8002efc <HAL_ADC_ConfigChannel+0x870>)
 8002dec:	fba2 2303 	umull	r2, r3, r2, r3
 8002df0:	099b      	lsrs	r3, r3, #6
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	4613      	mov	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002dfe:	e002      	b.n	8002e06 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1f9      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e0c:	e05a      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a3b      	ldr	r2, [pc, #236]	@ (8002f00 <HAL_ADC_ConfigChannel+0x874>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d125      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d11f      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a31      	ldr	r2, [pc, #196]	@ (8002ef0 <HAL_ADC_ConfigChannel+0x864>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d104      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x7ac>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a34      	ldr	r2, [pc, #208]	@ (8002f04 <HAL_ADC_ConfigChannel+0x878>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d047      	beq.n	8002ec8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e40:	d004      	beq.n	8002e4c <HAL_ADC_ConfigChannel+0x7c0>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a2a      	ldr	r2, [pc, #168]	@ (8002ef0 <HAL_ADC_ConfigChannel+0x864>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d101      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x7c4>
 8002e4c:	4a29      	ldr	r2, [pc, #164]	@ (8002ef4 <HAL_ADC_ConfigChannel+0x868>)
 8002e4e:	e000      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x7c6>
 8002e50:	4a23      	ldr	r2, [pc, #140]	@ (8002ee0 <HAL_ADC_ConfigChannel+0x854>)
 8002e52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	f7fe fcd0 	bl	8001802 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e62:	e031      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a27      	ldr	r2, [pc, #156]	@ (8002f08 <HAL_ADC_ConfigChannel+0x87c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d12d      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d127      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ef0 <HAL_ADC_ConfigChannel+0x864>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d022      	beq.n	8002eca <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e8c:	d004      	beq.n	8002e98 <HAL_ADC_ConfigChannel+0x80c>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a17      	ldr	r2, [pc, #92]	@ (8002ef0 <HAL_ADC_ConfigChannel+0x864>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d101      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x810>
 8002e98:	4a16      	ldr	r2, [pc, #88]	@ (8002ef4 <HAL_ADC_ConfigChannel+0x868>)
 8002e9a:	e000      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x812>
 8002e9c:	4a10      	ldr	r2, [pc, #64]	@ (8002ee0 <HAL_ADC_ConfigChannel+0x854>)
 8002e9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ea2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	f7fe fcaa 	bl	8001802 <LL_ADC_SetCommonPathInternalCh>
 8002eae:	e00c      	b.n	8002eca <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb4:	f043 0220 	orr.w	r2, r3, #32
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002ec2:	e002      	b.n	8002eca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ec4:	bf00      	nop
 8002ec6:	e000      	b.n	8002eca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ec8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ed2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	37d8      	adds	r7, #216	@ 0xd8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	50000700 	.word	0x50000700
 8002ee4:	c3210000 	.word	0xc3210000
 8002ee8:	90c00010 	.word	0x90c00010
 8002eec:	50000600 	.word	0x50000600
 8002ef0:	50000100 	.word	0x50000100
 8002ef4:	50000300 	.word	0x50000300
 8002ef8:	20000004 	.word	0x20000004
 8002efc:	053e2d63 	.word	0x053e2d63
 8002f00:	c7520000 	.word	0xc7520000
 8002f04:	50000500 	.word	0x50000500
 8002f08:	cb840000 	.word	0xcb840000

08002f0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fe fe4f 	bl	8001bc0 <LL_ADC_IsEnabled>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d176      	bne.n	8003016 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	4b3c      	ldr	r3, [pc, #240]	@ (8003020 <ADC_Enable+0x114>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00d      	beq.n	8002f52 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f3a:	f043 0210 	orr.w	r2, r3, #16
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f46:	f043 0201 	orr.w	r2, r3, #1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e062      	b.n	8003018 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fe fe1e 	bl	8001b98 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f64:	d004      	beq.n	8002f70 <ADC_Enable+0x64>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a2e      	ldr	r2, [pc, #184]	@ (8003024 <ADC_Enable+0x118>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d101      	bne.n	8002f74 <ADC_Enable+0x68>
 8002f70:	4b2d      	ldr	r3, [pc, #180]	@ (8003028 <ADC_Enable+0x11c>)
 8002f72:	e000      	b.n	8002f76 <ADC_Enable+0x6a>
 8002f74:	4b2d      	ldr	r3, [pc, #180]	@ (800302c <ADC_Enable+0x120>)
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fe fc56 	bl	8001828 <LL_ADC_GetCommonPathInternalCh>
 8002f7c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d013      	beq.n	8002fae <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f86:	4b2a      	ldr	r3, [pc, #168]	@ (8003030 <ADC_Enable+0x124>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	099b      	lsrs	r3, r3, #6
 8002f8c:	4a29      	ldr	r2, [pc, #164]	@ (8003034 <ADC_Enable+0x128>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	099b      	lsrs	r3, r3, #6
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	4613      	mov	r3, r2
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002fa0:	e002      	b.n	8002fa8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f9      	bne.n	8002fa2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002fae:	f7fe fc09 	bl	80017c4 <HAL_GetTick>
 8002fb2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fb4:	e028      	b.n	8003008 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fe fe00 	bl	8001bc0 <LL_ADC_IsEnabled>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d104      	bne.n	8002fd0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fe fde4 	bl	8001b98 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fd0:	f7fe fbf8 	bl	80017c4 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d914      	bls.n	8003008 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d00d      	beq.n	8003008 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff0:	f043 0210 	orr.w	r2, r3, #16
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ffc:	f043 0201 	orr.w	r2, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e007      	b.n	8003018 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b01      	cmp	r3, #1
 8003014:	d1cf      	bne.n	8002fb6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	8000003f 	.word	0x8000003f
 8003024:	50000100 	.word	0x50000100
 8003028:	50000300 	.word	0x50000300
 800302c:	50000700 	.word	0x50000700
 8003030:	20000004 	.word	0x20000004
 8003034:	053e2d63 	.word	0x053e2d63

08003038 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003044:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800304e:	2b00      	cmp	r3, #0
 8003050:	d14b      	bne.n	80030ea <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003056:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d021      	beq.n	80030b0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f7fe fc85 	bl	8001980 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d032      	beq.n	80030e2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d12b      	bne.n	80030e2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d11f      	bne.n	80030e2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a6:	f043 0201 	orr.w	r2, r3, #1
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030ae:	e018      	b.n	80030e2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d111      	bne.n	80030e2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d105      	bne.n	80030e2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030da:	f043 0201 	orr.w	r2, r3, #1
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f7ff faaa 	bl	800263c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80030e8:	e00e      	b.n	8003108 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ee:	f003 0310 	and.w	r3, r3, #16
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f7ff fabe 	bl	8002678 <HAL_ADC_ErrorCallback>
}
 80030fc:	e004      	b.n	8003108 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	4798      	blx	r3
}
 8003108:	bf00      	nop
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f7ff fa96 	bl	8002650 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003124:	bf00      	nop
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003138:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800314a:	f043 0204 	orr.w	r2, r3, #4
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f7ff fa90 	bl	8002678 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003158:	bf00      	nop
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <LL_ADC_IsEnabled>:
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <LL_ADC_IsEnabled+0x18>
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <LL_ADC_IsEnabled+0x1a>
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <LL_ADC_REG_IsConversionOngoing>:
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b04      	cmp	r3, #4
 8003198:	d101      	bne.n	800319e <LL_ADC_REG_IsConversionOngoing+0x18>
 800319a:	2301      	movs	r3, #1
 800319c:	e000      	b.n	80031a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003210:	b590      	push	{r4, r7, lr}
 8003212:	b0a1      	sub	sp, #132	@ 0x84
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800322a:	2302      	movs	r3, #2
 800322c:	e0e7      	b.n	80033fe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003236:	2300      	movs	r3, #0
 8003238:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800323a:	2300      	movs	r3, #0
 800323c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003246:	d102      	bne.n	800324e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003248:	4b6f      	ldr	r3, [pc, #444]	@ (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800324a:	60bb      	str	r3, [r7, #8]
 800324c:	e009      	b.n	8003262 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a6e      	ldr	r2, [pc, #440]	@ (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d102      	bne.n	800325e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003258:	4b6d      	ldr	r3, [pc, #436]	@ (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800325a:	60bb      	str	r3, [r7, #8]
 800325c:	e001      	b.n	8003262 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800325e:	2300      	movs	r3, #0
 8003260:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10b      	bne.n	8003280 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800326c:	f043 0220 	orr.w	r2, r3, #32
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0be      	b.n	80033fe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff ff7f 	bl	8003186 <LL_ADC_REG_IsConversionOngoing>
 8003288:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff ff79 	bl	8003186 <LL_ADC_REG_IsConversionOngoing>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	f040 80a0 	bne.w	80033dc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800329c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f040 809c 	bne.w	80033dc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032ac:	d004      	beq.n	80032b8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a55      	ldr	r2, [pc, #340]	@ (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d101      	bne.n	80032bc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80032b8:	4b56      	ldr	r3, [pc, #344]	@ (8003414 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80032ba:	e000      	b.n	80032be <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80032bc:	4b56      	ldr	r3, [pc, #344]	@ (8003418 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80032be:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d04b      	beq.n	8003360 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80032c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	6859      	ldr	r1, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80032da:	035b      	lsls	r3, r3, #13
 80032dc:	430b      	orrs	r3, r1
 80032de:	431a      	orrs	r2, r3
 80032e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032e2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032ec:	d004      	beq.n	80032f8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a45      	ldr	r2, [pc, #276]	@ (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d10f      	bne.n	8003318 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80032f8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80032fc:	f7ff ff30 	bl	8003160 <LL_ADC_IsEnabled>
 8003300:	4604      	mov	r4, r0
 8003302:	4841      	ldr	r0, [pc, #260]	@ (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003304:	f7ff ff2c 	bl	8003160 <LL_ADC_IsEnabled>
 8003308:	4603      	mov	r3, r0
 800330a:	4323      	orrs	r3, r4
 800330c:	2b00      	cmp	r3, #0
 800330e:	bf0c      	ite	eq
 8003310:	2301      	moveq	r3, #1
 8003312:	2300      	movne	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	e012      	b.n	800333e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003318:	483c      	ldr	r0, [pc, #240]	@ (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800331a:	f7ff ff21 	bl	8003160 <LL_ADC_IsEnabled>
 800331e:	4604      	mov	r4, r0
 8003320:	483b      	ldr	r0, [pc, #236]	@ (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003322:	f7ff ff1d 	bl	8003160 <LL_ADC_IsEnabled>
 8003326:	4603      	mov	r3, r0
 8003328:	431c      	orrs	r4, r3
 800332a:	483c      	ldr	r0, [pc, #240]	@ (800341c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800332c:	f7ff ff18 	bl	8003160 <LL_ADC_IsEnabled>
 8003330:	4603      	mov	r3, r0
 8003332:	4323      	orrs	r3, r4
 8003334:	2b00      	cmp	r3, #0
 8003336:	bf0c      	ite	eq
 8003338:	2301      	moveq	r3, #1
 800333a:	2300      	movne	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d056      	beq.n	80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003342:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800334a:	f023 030f 	bic.w	r3, r3, #15
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	6811      	ldr	r1, [r2, #0]
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	6892      	ldr	r2, [r2, #8]
 8003356:	430a      	orrs	r2, r1
 8003358:	431a      	orrs	r2, r3
 800335a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800335c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800335e:	e047      	b.n	80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003360:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003368:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800336a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003374:	d004      	beq.n	8003380 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a23      	ldr	r2, [pc, #140]	@ (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d10f      	bne.n	80033a0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003380:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003384:	f7ff feec 	bl	8003160 <LL_ADC_IsEnabled>
 8003388:	4604      	mov	r4, r0
 800338a:	481f      	ldr	r0, [pc, #124]	@ (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800338c:	f7ff fee8 	bl	8003160 <LL_ADC_IsEnabled>
 8003390:	4603      	mov	r3, r0
 8003392:	4323      	orrs	r3, r4
 8003394:	2b00      	cmp	r3, #0
 8003396:	bf0c      	ite	eq
 8003398:	2301      	moveq	r3, #1
 800339a:	2300      	movne	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	e012      	b.n	80033c6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80033a0:	481a      	ldr	r0, [pc, #104]	@ (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80033a2:	f7ff fedd 	bl	8003160 <LL_ADC_IsEnabled>
 80033a6:	4604      	mov	r4, r0
 80033a8:	4819      	ldr	r0, [pc, #100]	@ (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80033aa:	f7ff fed9 	bl	8003160 <LL_ADC_IsEnabled>
 80033ae:	4603      	mov	r3, r0
 80033b0:	431c      	orrs	r4, r3
 80033b2:	481a      	ldr	r0, [pc, #104]	@ (800341c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80033b4:	f7ff fed4 	bl	8003160 <LL_ADC_IsEnabled>
 80033b8:	4603      	mov	r3, r0
 80033ba:	4323      	orrs	r3, r4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	bf0c      	ite	eq
 80033c0:	2301      	moveq	r3, #1
 80033c2:	2300      	movne	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d012      	beq.n	80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80033d2:	f023 030f 	bic.w	r3, r3, #15
 80033d6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80033d8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033da:	e009      	b.n	80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e0:	f043 0220 	orr.w	r2, r3, #32
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80033ee:	e000      	b.n	80033f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80033fa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3784      	adds	r7, #132	@ 0x84
 8003402:	46bd      	mov	sp, r7
 8003404:	bd90      	pop	{r4, r7, pc}
 8003406:	bf00      	nop
 8003408:	50000100 	.word	0x50000100
 800340c:	50000400 	.word	0x50000400
 8003410:	50000500 	.word	0x50000500
 8003414:	50000300 	.word	0x50000300
 8003418:	50000700 	.word	0x50000700
 800341c:	50000600 	.word	0x50000600

08003420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003430:	4b0c      	ldr	r3, [pc, #48]	@ (8003464 <__NVIC_SetPriorityGrouping+0x44>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800343c:	4013      	ands	r3, r2
 800343e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003448:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800344c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003452:	4a04      	ldr	r2, [pc, #16]	@ (8003464 <__NVIC_SetPriorityGrouping+0x44>)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	60d3      	str	r3, [r2, #12]
}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800346c:	4b04      	ldr	r3, [pc, #16]	@ (8003480 <__NVIC_GetPriorityGrouping+0x18>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	0a1b      	lsrs	r3, r3, #8
 8003472:	f003 0307 	and.w	r3, r3, #7
}
 8003476:	4618      	mov	r0, r3
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	e000ed00 	.word	0xe000ed00

08003484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003492:	2b00      	cmp	r3, #0
 8003494:	db0b      	blt.n	80034ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	f003 021f 	and.w	r2, r3, #31
 800349c:	4907      	ldr	r1, [pc, #28]	@ (80034bc <__NVIC_EnableIRQ+0x38>)
 800349e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	2001      	movs	r0, #1
 80034a6:	fa00 f202 	lsl.w	r2, r0, r2
 80034aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	e000e100 	.word	0xe000e100

080034c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	6039      	str	r1, [r7, #0]
 80034ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	db0a      	blt.n	80034ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	490c      	ldr	r1, [pc, #48]	@ (800350c <__NVIC_SetPriority+0x4c>)
 80034da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034de:	0112      	lsls	r2, r2, #4
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	440b      	add	r3, r1
 80034e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034e8:	e00a      	b.n	8003500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	4908      	ldr	r1, [pc, #32]	@ (8003510 <__NVIC_SetPriority+0x50>)
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	3b04      	subs	r3, #4
 80034f8:	0112      	lsls	r2, r2, #4
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	440b      	add	r3, r1
 80034fe:	761a      	strb	r2, [r3, #24]
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	e000e100 	.word	0xe000e100
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003514:	b480      	push	{r7}
 8003516:	b089      	sub	sp, #36	@ 0x24
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f1c3 0307 	rsb	r3, r3, #7
 800352e:	2b04      	cmp	r3, #4
 8003530:	bf28      	it	cs
 8003532:	2304      	movcs	r3, #4
 8003534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3304      	adds	r3, #4
 800353a:	2b06      	cmp	r3, #6
 800353c:	d902      	bls.n	8003544 <NVIC_EncodePriority+0x30>
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3b03      	subs	r3, #3
 8003542:	e000      	b.n	8003546 <NVIC_EncodePriority+0x32>
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003548:	f04f 32ff 	mov.w	r2, #4294967295
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43da      	mvns	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	401a      	ands	r2, r3
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800355c:	f04f 31ff 	mov.w	r1, #4294967295
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	fa01 f303 	lsl.w	r3, r1, r3
 8003566:	43d9      	mvns	r1, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800356c:	4313      	orrs	r3, r2
         );
}
 800356e:	4618      	mov	r0, r3
 8003570:	3724      	adds	r7, #36	@ 0x24
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3b01      	subs	r3, #1
 8003588:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800358c:	d301      	bcc.n	8003592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800358e:	2301      	movs	r3, #1
 8003590:	e00f      	b.n	80035b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003592:	4a0a      	ldr	r2, [pc, #40]	@ (80035bc <SysTick_Config+0x40>)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3b01      	subs	r3, #1
 8003598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800359a:	210f      	movs	r1, #15
 800359c:	f04f 30ff 	mov.w	r0, #4294967295
 80035a0:	f7ff ff8e 	bl	80034c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a4:	4b05      	ldr	r3, [pc, #20]	@ (80035bc <SysTick_Config+0x40>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035aa:	4b04      	ldr	r3, [pc, #16]	@ (80035bc <SysTick_Config+0x40>)
 80035ac:	2207      	movs	r2, #7
 80035ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	e000e010 	.word	0xe000e010

080035c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff ff29 	bl	8003420 <__NVIC_SetPriorityGrouping>
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b086      	sub	sp, #24
 80035da:	af00      	add	r7, sp, #0
 80035dc:	4603      	mov	r3, r0
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035e4:	f7ff ff40 	bl	8003468 <__NVIC_GetPriorityGrouping>
 80035e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	6978      	ldr	r0, [r7, #20]
 80035f0:	f7ff ff90 	bl	8003514 <NVIC_EncodePriority>
 80035f4:	4602      	mov	r2, r0
 80035f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035fa:	4611      	mov	r1, r2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff ff5f 	bl	80034c0 <__NVIC_SetPriority>
}
 8003602:	bf00      	nop
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	4603      	mov	r3, r0
 8003612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff ff33 	bl	8003484 <__NVIC_EnableIRQ>
}
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff ffa4 	bl	800357c <SysTick_Config>
 8003634:	4603      	mov	r3, r0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e08d      	b.n	800376e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	4b47      	ldr	r3, [pc, #284]	@ (8003778 <HAL_DMA_Init+0x138>)
 800365a:	429a      	cmp	r2, r3
 800365c:	d80f      	bhi.n	800367e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	4b45      	ldr	r3, [pc, #276]	@ (800377c <HAL_DMA_Init+0x13c>)
 8003666:	4413      	add	r3, r2
 8003668:	4a45      	ldr	r2, [pc, #276]	@ (8003780 <HAL_DMA_Init+0x140>)
 800366a:	fba2 2303 	umull	r2, r3, r2, r3
 800366e:	091b      	lsrs	r3, r3, #4
 8003670:	009a      	lsls	r2, r3, #2
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a42      	ldr	r2, [pc, #264]	@ (8003784 <HAL_DMA_Init+0x144>)
 800367a:	641a      	str	r2, [r3, #64]	@ 0x40
 800367c:	e00e      	b.n	800369c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	4b40      	ldr	r3, [pc, #256]	@ (8003788 <HAL_DMA_Init+0x148>)
 8003686:	4413      	add	r3, r2
 8003688:	4a3d      	ldr	r2, [pc, #244]	@ (8003780 <HAL_DMA_Init+0x140>)
 800368a:	fba2 2303 	umull	r2, r3, r2, r3
 800368e:	091b      	lsrs	r3, r3, #4
 8003690:	009a      	lsls	r2, r3, #2
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a3c      	ldr	r2, [pc, #240]	@ (800378c <HAL_DMA_Init+0x14c>)
 800369a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80036b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80036c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 fa76 	bl	8003be0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036fc:	d102      	bne.n	8003704 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003718:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d010      	beq.n	8003744 <HAL_DMA_Init+0x104>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b04      	cmp	r3, #4
 8003728:	d80c      	bhi.n	8003744 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 fa96 	bl	8003c5c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	e008      	b.n	8003756 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40020407 	.word	0x40020407
 800377c:	bffdfff8 	.word	0xbffdfff8
 8003780:	cccccccd 	.word	0xcccccccd
 8003784:	40020000 	.word	0x40020000
 8003788:	bffdfbf8 	.word	0xbffdfbf8
 800378c:	40020400 	.word	0x40020400

08003790 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_DMA_Start_IT+0x20>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e066      	b.n	800387e <HAL_DMA_Start_IT+0xee>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d155      	bne.n	8003870 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0201 	bic.w	r2, r2, #1
 80037e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	68b9      	ldr	r1, [r7, #8]
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f9bb 	bl	8003b64 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d008      	beq.n	8003808 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f042 020e 	orr.w	r2, r2, #14
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	e00f      	b.n	8003828 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0204 	bic.w	r2, r2, #4
 8003816:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 020a 	orr.w	r2, r2, #10
 8003826:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d007      	beq.n	8003846 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003840:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003844:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800384a:	2b00      	cmp	r3, #0
 800384c:	d007      	beq.n	800385e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003858:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800385c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0201 	orr.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	e005      	b.n	800387c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003878:	2302      	movs	r3, #2
 800387a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800387c:	7dfb      	ldrb	r3, [r7, #23]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003886:	b480      	push	{r7}
 8003888:	b085      	sub	sp, #20
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d005      	beq.n	80038aa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2204      	movs	r2, #4
 80038a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	73fb      	strb	r3, [r7, #15]
 80038a8:	e037      	b.n	800391a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 020e 	bic.w	r2, r2, #14
 80038b8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038c8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0201 	bic.w	r2, r2, #1
 80038d8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038de:	f003 021f 	and.w	r2, r3, #31
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	2101      	movs	r1, #1
 80038e8:	fa01 f202 	lsl.w	r2, r1, r2
 80038ec:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80038f6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00c      	beq.n	800391a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800390a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800390e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003918:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800392a:	7bfb      	ldrb	r3, [r7, #15]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d00d      	beq.n	800396c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2204      	movs	r2, #4
 8003954:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	73fb      	strb	r3, [r7, #15]
 800396a:	e047      	b.n	80039fc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 020e 	bic.w	r2, r2, #14
 800397a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0201 	bic.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003996:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800399a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a0:	f003 021f 	and.w	r2, r3, #31
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a8:	2101      	movs	r1, #1
 80039aa:	fa01 f202 	lsl.w	r2, r1, r2
 80039ae:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80039b8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00c      	beq.n	80039dc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039d0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80039da:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	4798      	blx	r3
    }
  }
  return status;
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a22:	f003 031f 	and.w	r3, r3, #31
 8003a26:	2204      	movs	r2, #4
 8003a28:	409a      	lsls	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d026      	beq.n	8003a80 <HAL_DMA_IRQHandler+0x7a>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d021      	beq.n	8003a80 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d107      	bne.n	8003a5a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0204 	bic.w	r2, r2, #4
 8003a58:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5e:	f003 021f 	and.w	r2, r3, #31
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a66:	2104      	movs	r1, #4
 8003a68:	fa01 f202 	lsl.w	r2, r1, r2
 8003a6c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d071      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a7e:	e06c      	b.n	8003b5a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	2202      	movs	r2, #2
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d02e      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d029      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0320 	and.w	r3, r3, #32
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10b      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 020a 	bic.w	r2, r2, #10
 8003aba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac8:	f003 021f 	and.w	r2, r3, #31
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad0:	2102      	movs	r1, #2
 8003ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d038      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003af0:	e033      	b.n	8003b5a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	2208      	movs	r2, #8
 8003afc:	409a      	lsls	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4013      	ands	r3, r2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d02a      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d025      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 020e 	bic.w	r2, r2, #14
 8003b1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b24:	f003 021f 	and.w	r2, r3, #31
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b32:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d004      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b5a:	bf00      	nop
 8003b5c:	bf00      	nop
}
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b7a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d004      	beq.n	8003b8e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b8c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	f003 021f 	and.w	r2, r3, #31
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	2b10      	cmp	r3, #16
 8003bb0:	d108      	bne.n	8003bc4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003bc2:	e007      	b.n	8003bd4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	60da      	str	r2, [r3, #12]
}
 8003bd4:	bf00      	nop
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	461a      	mov	r2, r3
 8003bee:	4b16      	ldr	r3, [pc, #88]	@ (8003c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d802      	bhi.n	8003bfa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003bf4:	4b15      	ldr	r3, [pc, #84]	@ (8003c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	e001      	b.n	8003bfe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003bfa:	4b15      	ldr	r3, [pc, #84]	@ (8003c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003bfc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	3b08      	subs	r3, #8
 8003c0a:	4a12      	ldr	r2, [pc, #72]	@ (8003c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c10:	091b      	lsrs	r3, r3, #4
 8003c12:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c18:	089b      	lsrs	r3, r3, #2
 8003c1a:	009a      	lsls	r2, r3, #2
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	4413      	add	r3, r2
 8003c20:	461a      	mov	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a0b      	ldr	r2, [pc, #44]	@ (8003c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003c2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 031f 	and.w	r3, r3, #31
 8003c32:	2201      	movs	r2, #1
 8003c34:	409a      	lsls	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003c3a:	bf00      	nop
 8003c3c:	371c      	adds	r7, #28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40020407 	.word	0x40020407
 8003c4c:	40020800 	.word	0x40020800
 8003c50:	40020820 	.word	0x40020820
 8003c54:	cccccccd 	.word	0xcccccccd
 8003c58:	40020880 	.word	0x40020880

08003c5c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	461a      	mov	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a08      	ldr	r2, [pc, #32]	@ (8003ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c7e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	f003 031f 	and.w	r3, r3, #31
 8003c88:	2201      	movs	r2, #1
 8003c8a:	409a      	lsls	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003c90:	bf00      	nop
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	1000823f 	.word	0x1000823f
 8003ca0:	40020940 	.word	0x40020940

08003ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003cb2:	e15a      	b.n	8003f6a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	2101      	movs	r1, #1
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 814c 	beq.w	8003f64 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 0303 	and.w	r3, r3, #3
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d005      	beq.n	8003ce4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d130      	bne.n	8003d46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	2203      	movs	r2, #3
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	43db      	mvns	r3, r3
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4013      	ands	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	091b      	lsrs	r3, r3, #4
 8003d30:	f003 0201 	and.w	r2, r3, #1
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	2b03      	cmp	r3, #3
 8003d50:	d017      	beq.n	8003d82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	2203      	movs	r2, #3
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	43db      	mvns	r3, r3
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4013      	ands	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d123      	bne.n	8003dd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	08da      	lsrs	r2, r3, #3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3208      	adds	r2, #8
 8003d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	220f      	movs	r2, #15
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	43db      	mvns	r3, r3
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4013      	ands	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	08da      	lsrs	r2, r3, #3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3208      	adds	r2, #8
 8003dd0:	6939      	ldr	r1, [r7, #16]
 8003dd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	2203      	movs	r2, #3
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	43db      	mvns	r3, r3
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4013      	ands	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f003 0203 	and.w	r2, r3, #3
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 80a6 	beq.w	8003f64 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e18:	4b5b      	ldr	r3, [pc, #364]	@ (8003f88 <HAL_GPIO_Init+0x2e4>)
 8003e1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e1c:	4a5a      	ldr	r2, [pc, #360]	@ (8003f88 <HAL_GPIO_Init+0x2e4>)
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e24:	4b58      	ldr	r3, [pc, #352]	@ (8003f88 <HAL_GPIO_Init+0x2e4>)
 8003e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e30:	4a56      	ldr	r2, [pc, #344]	@ (8003f8c <HAL_GPIO_Init+0x2e8>)
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	089b      	lsrs	r3, r3, #2
 8003e36:	3302      	adds	r3, #2
 8003e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f003 0303 	and.w	r3, r3, #3
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	220f      	movs	r2, #15
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4013      	ands	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003e5a:	d01f      	beq.n	8003e9c <HAL_GPIO_Init+0x1f8>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a4c      	ldr	r2, [pc, #304]	@ (8003f90 <HAL_GPIO_Init+0x2ec>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d019      	beq.n	8003e98 <HAL_GPIO_Init+0x1f4>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a4b      	ldr	r2, [pc, #300]	@ (8003f94 <HAL_GPIO_Init+0x2f0>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d013      	beq.n	8003e94 <HAL_GPIO_Init+0x1f0>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a4a      	ldr	r2, [pc, #296]	@ (8003f98 <HAL_GPIO_Init+0x2f4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d00d      	beq.n	8003e90 <HAL_GPIO_Init+0x1ec>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a49      	ldr	r2, [pc, #292]	@ (8003f9c <HAL_GPIO_Init+0x2f8>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d007      	beq.n	8003e8c <HAL_GPIO_Init+0x1e8>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a48      	ldr	r2, [pc, #288]	@ (8003fa0 <HAL_GPIO_Init+0x2fc>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d101      	bne.n	8003e88 <HAL_GPIO_Init+0x1e4>
 8003e84:	2305      	movs	r3, #5
 8003e86:	e00a      	b.n	8003e9e <HAL_GPIO_Init+0x1fa>
 8003e88:	2306      	movs	r3, #6
 8003e8a:	e008      	b.n	8003e9e <HAL_GPIO_Init+0x1fa>
 8003e8c:	2304      	movs	r3, #4
 8003e8e:	e006      	b.n	8003e9e <HAL_GPIO_Init+0x1fa>
 8003e90:	2303      	movs	r3, #3
 8003e92:	e004      	b.n	8003e9e <HAL_GPIO_Init+0x1fa>
 8003e94:	2302      	movs	r3, #2
 8003e96:	e002      	b.n	8003e9e <HAL_GPIO_Init+0x1fa>
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e000      	b.n	8003e9e <HAL_GPIO_Init+0x1fa>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	f002 0203 	and.w	r2, r2, #3
 8003ea4:	0092      	lsls	r2, r2, #2
 8003ea6:	4093      	lsls	r3, r2
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003eae:	4937      	ldr	r1, [pc, #220]	@ (8003f8c <HAL_GPIO_Init+0x2e8>)
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	089b      	lsrs	r3, r3, #2
 8003eb4:	3302      	adds	r3, #2
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ebc:	4b39      	ldr	r3, [pc, #228]	@ (8003fa4 <HAL_GPIO_Init+0x300>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ee0:	4a30      	ldr	r2, [pc, #192]	@ (8003fa4 <HAL_GPIO_Init+0x300>)
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ee6:	4b2f      	ldr	r3, [pc, #188]	@ (8003fa4 <HAL_GPIO_Init+0x300>)
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f0a:	4a26      	ldr	r2, [pc, #152]	@ (8003fa4 <HAL_GPIO_Init+0x300>)
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003f10:	4b24      	ldr	r3, [pc, #144]	@ (8003fa4 <HAL_GPIO_Init+0x300>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f34:	4a1b      	ldr	r2, [pc, #108]	@ (8003fa4 <HAL_GPIO_Init+0x300>)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8003fa4 <HAL_GPIO_Init+0x300>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	43db      	mvns	r3, r3
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4013      	ands	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f5e:	4a11      	ldr	r2, [pc, #68]	@ (8003fa4 <HAL_GPIO_Init+0x300>)
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	3301      	adds	r3, #1
 8003f68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	fa22 f303 	lsr.w	r3, r2, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f47f ae9d 	bne.w	8003cb4 <HAL_GPIO_Init+0x10>
  }
}
 8003f7a:	bf00      	nop
 8003f7c:	bf00      	nop
 8003f7e:	371c      	adds	r7, #28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	40010000 	.word	0x40010000
 8003f90:	48000400 	.word	0x48000400
 8003f94:	48000800 	.word	0x48000800
 8003f98:	48000c00 	.word	0x48000c00
 8003f9c:	48001000 	.word	0x48001000
 8003fa0:	48001400 	.word	0x48001400
 8003fa4:	40010400 	.word	0x40010400

08003fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	807b      	strh	r3, [r7, #2]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fb8:	787b      	ldrb	r3, [r7, #1]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fbe:	887a      	ldrh	r2, [r7, #2]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fc4:	e002      	b.n	8003fcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fc6:	887a      	ldrh	r2, [r7, #2]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003fea:	887a      	ldrh	r2, [r7, #2]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	041a      	lsls	r2, r3, #16
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	43d9      	mvns	r1, r3
 8003ff6:	887b      	ldrh	r3, [r7, #2]
 8003ff8:	400b      	ands	r3, r1
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	619a      	str	r2, [r3, #24]
}
 8004000:	bf00      	nop
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004016:	4b08      	ldr	r3, [pc, #32]	@ (8004038 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004018:	695a      	ldr	r2, [r3, #20]
 800401a:	88fb      	ldrh	r3, [r7, #6]
 800401c:	4013      	ands	r3, r2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d006      	beq.n	8004030 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004022:	4a05      	ldr	r2, [pc, #20]	@ (8004038 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004024:	88fb      	ldrh	r3, [r7, #6]
 8004026:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004028:	88fb      	ldrh	r3, [r7, #6]
 800402a:	4618      	mov	r0, r3
 800402c:	f000 f806 	bl	800403c <HAL_GPIO_EXTI_Callback>
  }
}
 8004030:	bf00      	nop
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40010400 	.word	0x40010400

0800403c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	4603      	mov	r3, r0
 8004044:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
	...

08004054 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d141      	bne.n	80040e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004062:	4b4b      	ldr	r3, [pc, #300]	@ (8004190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800406a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800406e:	d131      	bne.n	80040d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004070:	4b47      	ldr	r3, [pc, #284]	@ (8004190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004076:	4a46      	ldr	r2, [pc, #280]	@ (8004190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004078:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800407c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004080:	4b43      	ldr	r3, [pc, #268]	@ (8004190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004088:	4a41      	ldr	r2, [pc, #260]	@ (8004190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800408a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800408e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004090:	4b40      	ldr	r3, [pc, #256]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2232      	movs	r2, #50	@ 0x32
 8004096:	fb02 f303 	mul.w	r3, r2, r3
 800409a:	4a3f      	ldr	r2, [pc, #252]	@ (8004198 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800409c:	fba2 2303 	umull	r2, r3, r2, r3
 80040a0:	0c9b      	lsrs	r3, r3, #18
 80040a2:	3301      	adds	r3, #1
 80040a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040a6:	e002      	b.n	80040ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040ae:	4b38      	ldr	r3, [pc, #224]	@ (8004190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ba:	d102      	bne.n	80040c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f2      	bne.n	80040a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040c2:	4b33      	ldr	r3, [pc, #204]	@ (8004190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ce:	d158      	bne.n	8004182 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e057      	b.n	8004184 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040d4:	4b2e      	ldr	r3, [pc, #184]	@ (8004190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040da:	4a2d      	ldr	r2, [pc, #180]	@ (8004190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80040e4:	e04d      	b.n	8004182 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040ec:	d141      	bne.n	8004172 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040ee:	4b28      	ldr	r3, [pc, #160]	@ (8004190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040fa:	d131      	bne.n	8004160 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040fc:	4b24      	ldr	r3, [pc, #144]	@ (8004190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004102:	4a23      	ldr	r2, [pc, #140]	@ (8004190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004104:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004108:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800410c:	4b20      	ldr	r3, [pc, #128]	@ (8004190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004114:	4a1e      	ldr	r2, [pc, #120]	@ (8004190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004116:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800411a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800411c:	4b1d      	ldr	r3, [pc, #116]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2232      	movs	r2, #50	@ 0x32
 8004122:	fb02 f303 	mul.w	r3, r2, r3
 8004126:	4a1c      	ldr	r2, [pc, #112]	@ (8004198 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004128:	fba2 2303 	umull	r2, r3, r2, r3
 800412c:	0c9b      	lsrs	r3, r3, #18
 800412e:	3301      	adds	r3, #1
 8004130:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004132:	e002      	b.n	800413a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	3b01      	subs	r3, #1
 8004138:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800413a:	4b15      	ldr	r3, [pc, #84]	@ (8004190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004146:	d102      	bne.n	800414e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f2      	bne.n	8004134 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800414e:	4b10      	ldr	r3, [pc, #64]	@ (8004190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800415a:	d112      	bne.n	8004182 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e011      	b.n	8004184 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004160:	4b0b      	ldr	r3, [pc, #44]	@ (8004190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004162:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004166:	4a0a      	ldr	r2, [pc, #40]	@ (8004190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800416c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004170:	e007      	b.n	8004182 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004172:	4b07      	ldr	r3, [pc, #28]	@ (8004190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800417a:	4a05      	ldr	r2, [pc, #20]	@ (8004190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800417c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004180:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	40007000 	.word	0x40007000
 8004194:	20000004 	.word	0x20000004
 8004198:	431bde83 	.word	0x431bde83

0800419c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80041a0:	4b05      	ldr	r3, [pc, #20]	@ (80041b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	4a04      	ldr	r2, [pc, #16]	@ (80041b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80041a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041aa:	6093      	str	r3, [r2, #8]
}
 80041ac:	bf00      	nop
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40007000 	.word	0x40007000

080041bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e2fe      	b.n	80047cc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d075      	beq.n	80042c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041da:	4b97      	ldr	r3, [pc, #604]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 030c 	and.w	r3, r3, #12
 80041e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041e4:	4b94      	ldr	r3, [pc, #592]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f003 0303 	and.w	r3, r3, #3
 80041ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	2b0c      	cmp	r3, #12
 80041f2:	d102      	bne.n	80041fa <HAL_RCC_OscConfig+0x3e>
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	2b03      	cmp	r3, #3
 80041f8:	d002      	beq.n	8004200 <HAL_RCC_OscConfig+0x44>
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d10b      	bne.n	8004218 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004200:	4b8d      	ldr	r3, [pc, #564]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d05b      	beq.n	80042c4 <HAL_RCC_OscConfig+0x108>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d157      	bne.n	80042c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e2d9      	b.n	80047cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004220:	d106      	bne.n	8004230 <HAL_RCC_OscConfig+0x74>
 8004222:	4b85      	ldr	r3, [pc, #532]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a84      	ldr	r2, [pc, #528]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 8004228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	e01d      	b.n	800426c <HAL_RCC_OscConfig+0xb0>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004238:	d10c      	bne.n	8004254 <HAL_RCC_OscConfig+0x98>
 800423a:	4b7f      	ldr	r3, [pc, #508]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a7e      	ldr	r2, [pc, #504]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 8004240:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	4b7c      	ldr	r3, [pc, #496]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a7b      	ldr	r2, [pc, #492]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 800424c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	e00b      	b.n	800426c <HAL_RCC_OscConfig+0xb0>
 8004254:	4b78      	ldr	r3, [pc, #480]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a77      	ldr	r2, [pc, #476]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 800425a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800425e:	6013      	str	r3, [r2, #0]
 8004260:	4b75      	ldr	r3, [pc, #468]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a74      	ldr	r2, [pc, #464]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 8004266:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800426a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d013      	beq.n	800429c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004274:	f7fd faa6 	bl	80017c4 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800427c:	f7fd faa2 	bl	80017c4 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b64      	cmp	r3, #100	@ 0x64
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e29e      	b.n	80047cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800428e:	4b6a      	ldr	r3, [pc, #424]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0f0      	beq.n	800427c <HAL_RCC_OscConfig+0xc0>
 800429a:	e014      	b.n	80042c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429c:	f7fd fa92 	bl	80017c4 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a4:	f7fd fa8e 	bl	80017c4 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b64      	cmp	r3, #100	@ 0x64
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e28a      	b.n	80047cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042b6:	4b60      	ldr	r3, [pc, #384]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f0      	bne.n	80042a4 <HAL_RCC_OscConfig+0xe8>
 80042c2:	e000      	b.n	80042c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d075      	beq.n	80043be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042d2:	4b59      	ldr	r3, [pc, #356]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 030c 	and.w	r3, r3, #12
 80042da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042dc:	4b56      	ldr	r3, [pc, #344]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f003 0303 	and.w	r3, r3, #3
 80042e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	2b0c      	cmp	r3, #12
 80042ea:	d102      	bne.n	80042f2 <HAL_RCC_OscConfig+0x136>
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d002      	beq.n	80042f8 <HAL_RCC_OscConfig+0x13c>
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d11f      	bne.n	8004338 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042f8:	4b4f      	ldr	r3, [pc, #316]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_RCC_OscConfig+0x154>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e25d      	b.n	80047cc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004310:	4b49      	ldr	r3, [pc, #292]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	061b      	lsls	r3, r3, #24
 800431e:	4946      	ldr	r1, [pc, #280]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 8004320:	4313      	orrs	r3, r2
 8004322:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004324:	4b45      	ldr	r3, [pc, #276]	@ (800443c <HAL_RCC_OscConfig+0x280>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f7fd f9ff 	bl	800172c <HAL_InitTick>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d043      	beq.n	80043bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e249      	b.n	80047cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d023      	beq.n	8004388 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004340:	4b3d      	ldr	r3, [pc, #244]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a3c      	ldr	r2, [pc, #240]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 8004346:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800434a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434c:	f7fd fa3a 	bl	80017c4 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004354:	f7fd fa36 	bl	80017c4 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e232      	b.n	80047cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004366:	4b34      	ldr	r3, [pc, #208]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0f0      	beq.n	8004354 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004372:	4b31      	ldr	r3, [pc, #196]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	061b      	lsls	r3, r3, #24
 8004380:	492d      	ldr	r1, [pc, #180]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 8004382:	4313      	orrs	r3, r2
 8004384:	604b      	str	r3, [r1, #4]
 8004386:	e01a      	b.n	80043be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004388:	4b2b      	ldr	r3, [pc, #172]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a2a      	ldr	r2, [pc, #168]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 800438e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004394:	f7fd fa16 	bl	80017c4 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800439c:	f7fd fa12 	bl	80017c4 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e20e      	b.n	80047cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043ae:	4b22      	ldr	r3, [pc, #136]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1f0      	bne.n	800439c <HAL_RCC_OscConfig+0x1e0>
 80043ba:	e000      	b.n	80043be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d041      	beq.n	800444e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d01c      	beq.n	800440c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043d2:	4b19      	ldr	r3, [pc, #100]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 80043d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043d8:	4a17      	ldr	r2, [pc, #92]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e2:	f7fd f9ef 	bl	80017c4 <HAL_GetTick>
 80043e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ea:	f7fd f9eb 	bl	80017c4 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e1e7      	b.n	80047cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 80043fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0ef      	beq.n	80043ea <HAL_RCC_OscConfig+0x22e>
 800440a:	e020      	b.n	800444e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800440c:	4b0a      	ldr	r3, [pc, #40]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 800440e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004412:	4a09      	ldr	r2, [pc, #36]	@ (8004438 <HAL_RCC_OscConfig+0x27c>)
 8004414:	f023 0301 	bic.w	r3, r3, #1
 8004418:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441c:	f7fd f9d2 	bl	80017c4 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004422:	e00d      	b.n	8004440 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004424:	f7fd f9ce 	bl	80017c4 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d906      	bls.n	8004440 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e1ca      	b.n	80047cc <HAL_RCC_OscConfig+0x610>
 8004436:	bf00      	nop
 8004438:	40021000 	.word	0x40021000
 800443c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004440:	4b8c      	ldr	r3, [pc, #560]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 8004442:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1ea      	bne.n	8004424 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0304 	and.w	r3, r3, #4
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 80a6 	beq.w	80045a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800445c:	2300      	movs	r3, #0
 800445e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004460:	4b84      	ldr	r3, [pc, #528]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 8004462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_RCC_OscConfig+0x2b4>
 800446c:	2301      	movs	r3, #1
 800446e:	e000      	b.n	8004472 <HAL_RCC_OscConfig+0x2b6>
 8004470:	2300      	movs	r3, #0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00d      	beq.n	8004492 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004476:	4b7f      	ldr	r3, [pc, #508]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 8004478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800447a:	4a7e      	ldr	r2, [pc, #504]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 800447c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004480:	6593      	str	r3, [r2, #88]	@ 0x58
 8004482:	4b7c      	ldr	r3, [pc, #496]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 8004484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800448e:	2301      	movs	r3, #1
 8004490:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004492:	4b79      	ldr	r3, [pc, #484]	@ (8004678 <HAL_RCC_OscConfig+0x4bc>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800449a:	2b00      	cmp	r3, #0
 800449c:	d118      	bne.n	80044d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800449e:	4b76      	ldr	r3, [pc, #472]	@ (8004678 <HAL_RCC_OscConfig+0x4bc>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a75      	ldr	r2, [pc, #468]	@ (8004678 <HAL_RCC_OscConfig+0x4bc>)
 80044a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044aa:	f7fd f98b 	bl	80017c4 <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b2:	f7fd f987 	bl	80017c4 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e183      	b.n	80047cc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044c4:	4b6c      	ldr	r3, [pc, #432]	@ (8004678 <HAL_RCC_OscConfig+0x4bc>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0f0      	beq.n	80044b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d108      	bne.n	80044ea <HAL_RCC_OscConfig+0x32e>
 80044d8:	4b66      	ldr	r3, [pc, #408]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 80044da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044de:	4a65      	ldr	r2, [pc, #404]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 80044e0:	f043 0301 	orr.w	r3, r3, #1
 80044e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044e8:	e024      	b.n	8004534 <HAL_RCC_OscConfig+0x378>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	2b05      	cmp	r3, #5
 80044f0:	d110      	bne.n	8004514 <HAL_RCC_OscConfig+0x358>
 80044f2:	4b60      	ldr	r3, [pc, #384]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 80044f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f8:	4a5e      	ldr	r2, [pc, #376]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 80044fa:	f043 0304 	orr.w	r3, r3, #4
 80044fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004502:	4b5c      	ldr	r3, [pc, #368]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 8004504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004508:	4a5a      	ldr	r2, [pc, #360]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 800450a:	f043 0301 	orr.w	r3, r3, #1
 800450e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004512:	e00f      	b.n	8004534 <HAL_RCC_OscConfig+0x378>
 8004514:	4b57      	ldr	r3, [pc, #348]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800451a:	4a56      	ldr	r2, [pc, #344]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 800451c:	f023 0301 	bic.w	r3, r3, #1
 8004520:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004524:	4b53      	ldr	r3, [pc, #332]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 8004526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800452a:	4a52      	ldr	r2, [pc, #328]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 800452c:	f023 0304 	bic.w	r3, r3, #4
 8004530:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d016      	beq.n	800456a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453c:	f7fd f942 	bl	80017c4 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004542:	e00a      	b.n	800455a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004544:	f7fd f93e 	bl	80017c4 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004552:	4293      	cmp	r3, r2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e138      	b.n	80047cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800455a:	4b46      	ldr	r3, [pc, #280]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 800455c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0ed      	beq.n	8004544 <HAL_RCC_OscConfig+0x388>
 8004568:	e015      	b.n	8004596 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456a:	f7fd f92b 	bl	80017c4 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004570:	e00a      	b.n	8004588 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004572:	f7fd f927 	bl	80017c4 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004580:	4293      	cmp	r3, r2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e121      	b.n	80047cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004588:	4b3a      	ldr	r3, [pc, #232]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 800458a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1ed      	bne.n	8004572 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004596:	7ffb      	ldrb	r3, [r7, #31]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d105      	bne.n	80045a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800459c:	4b35      	ldr	r3, [pc, #212]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 800459e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a0:	4a34      	ldr	r2, [pc, #208]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 80045a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045a6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0320 	and.w	r3, r3, #32
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d03c      	beq.n	800462e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d01c      	beq.n	80045f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 80045be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045c2:	4a2c      	ldr	r2, [pc, #176]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045cc:	f7fd f8fa 	bl	80017c4 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045d4:	f7fd f8f6 	bl	80017c4 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e0f2      	b.n	80047cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045e6:	4b23      	ldr	r3, [pc, #140]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 80045e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0ef      	beq.n	80045d4 <HAL_RCC_OscConfig+0x418>
 80045f4:	e01b      	b.n	800462e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045f6:	4b1f      	ldr	r3, [pc, #124]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 80045f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 80045fe:	f023 0301 	bic.w	r3, r3, #1
 8004602:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004606:	f7fd f8dd 	bl	80017c4 <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800460c:	e008      	b.n	8004620 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800460e:	f7fd f8d9 	bl	80017c4 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e0d5      	b.n	80047cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004620:	4b14      	ldr	r3, [pc, #80]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 8004622:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1ef      	bne.n	800460e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 80c9 	beq.w	80047ca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004638:	4b0e      	ldr	r3, [pc, #56]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 030c 	and.w	r3, r3, #12
 8004640:	2b0c      	cmp	r3, #12
 8004642:	f000 8083 	beq.w	800474c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d15e      	bne.n	800470c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800464e:	4b09      	ldr	r3, [pc, #36]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a08      	ldr	r2, [pc, #32]	@ (8004674 <HAL_RCC_OscConfig+0x4b8>)
 8004654:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465a:	f7fd f8b3 	bl	80017c4 <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004660:	e00c      	b.n	800467c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004662:	f7fd f8af 	bl	80017c4 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d905      	bls.n	800467c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e0ab      	b.n	80047cc <HAL_RCC_OscConfig+0x610>
 8004674:	40021000 	.word	0x40021000
 8004678:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800467c:	4b55      	ldr	r3, [pc, #340]	@ (80047d4 <HAL_RCC_OscConfig+0x618>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1ec      	bne.n	8004662 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004688:	4b52      	ldr	r3, [pc, #328]	@ (80047d4 <HAL_RCC_OscConfig+0x618>)
 800468a:	68da      	ldr	r2, [r3, #12]
 800468c:	4b52      	ldr	r3, [pc, #328]	@ (80047d8 <HAL_RCC_OscConfig+0x61c>)
 800468e:	4013      	ands	r3, r2
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6a11      	ldr	r1, [r2, #32]
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004698:	3a01      	subs	r2, #1
 800469a:	0112      	lsls	r2, r2, #4
 800469c:	4311      	orrs	r1, r2
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80046a2:	0212      	lsls	r2, r2, #8
 80046a4:	4311      	orrs	r1, r2
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80046aa:	0852      	lsrs	r2, r2, #1
 80046ac:	3a01      	subs	r2, #1
 80046ae:	0552      	lsls	r2, r2, #21
 80046b0:	4311      	orrs	r1, r2
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80046b6:	0852      	lsrs	r2, r2, #1
 80046b8:	3a01      	subs	r2, #1
 80046ba:	0652      	lsls	r2, r2, #25
 80046bc:	4311      	orrs	r1, r2
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80046c2:	06d2      	lsls	r2, r2, #27
 80046c4:	430a      	orrs	r2, r1
 80046c6:	4943      	ldr	r1, [pc, #268]	@ (80047d4 <HAL_RCC_OscConfig+0x618>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046cc:	4b41      	ldr	r3, [pc, #260]	@ (80047d4 <HAL_RCC_OscConfig+0x618>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a40      	ldr	r2, [pc, #256]	@ (80047d4 <HAL_RCC_OscConfig+0x618>)
 80046d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046d8:	4b3e      	ldr	r3, [pc, #248]	@ (80047d4 <HAL_RCC_OscConfig+0x618>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4a3d      	ldr	r2, [pc, #244]	@ (80047d4 <HAL_RCC_OscConfig+0x618>)
 80046de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e4:	f7fd f86e 	bl	80017c4 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ec:	f7fd f86a 	bl	80017c4 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e066      	b.n	80047cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046fe:	4b35      	ldr	r3, [pc, #212]	@ (80047d4 <HAL_RCC_OscConfig+0x618>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0f0      	beq.n	80046ec <HAL_RCC_OscConfig+0x530>
 800470a:	e05e      	b.n	80047ca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800470c:	4b31      	ldr	r3, [pc, #196]	@ (80047d4 <HAL_RCC_OscConfig+0x618>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a30      	ldr	r2, [pc, #192]	@ (80047d4 <HAL_RCC_OscConfig+0x618>)
 8004712:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004718:	f7fd f854 	bl	80017c4 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004720:	f7fd f850 	bl	80017c4 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e04c      	b.n	80047cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004732:	4b28      	ldr	r3, [pc, #160]	@ (80047d4 <HAL_RCC_OscConfig+0x618>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f0      	bne.n	8004720 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800473e:	4b25      	ldr	r3, [pc, #148]	@ (80047d4 <HAL_RCC_OscConfig+0x618>)
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	4924      	ldr	r1, [pc, #144]	@ (80047d4 <HAL_RCC_OscConfig+0x618>)
 8004744:	4b25      	ldr	r3, [pc, #148]	@ (80047dc <HAL_RCC_OscConfig+0x620>)
 8004746:	4013      	ands	r3, r2
 8004748:	60cb      	str	r3, [r1, #12]
 800474a:	e03e      	b.n	80047ca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e039      	b.n	80047cc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004758:	4b1e      	ldr	r3, [pc, #120]	@ (80047d4 <HAL_RCC_OscConfig+0x618>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f003 0203 	and.w	r2, r3, #3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	429a      	cmp	r2, r3
 800476a:	d12c      	bne.n	80047c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004776:	3b01      	subs	r3, #1
 8004778:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800477a:	429a      	cmp	r2, r3
 800477c:	d123      	bne.n	80047c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004788:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800478a:	429a      	cmp	r2, r3
 800478c:	d11b      	bne.n	80047c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004798:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800479a:	429a      	cmp	r2, r3
 800479c:	d113      	bne.n	80047c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a8:	085b      	lsrs	r3, r3, #1
 80047aa:	3b01      	subs	r3, #1
 80047ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d109      	bne.n	80047c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047bc:	085b      	lsrs	r3, r3, #1
 80047be:	3b01      	subs	r3, #1
 80047c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d001      	beq.n	80047ca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3720      	adds	r7, #32
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40021000 	.word	0x40021000
 80047d8:	019f800c 	.word	0x019f800c
 80047dc:	feeefffc 	.word	0xfeeefffc

080047e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047ea:	2300      	movs	r3, #0
 80047ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e11e      	b.n	8004a36 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047f8:	4b91      	ldr	r3, [pc, #580]	@ (8004a40 <HAL_RCC_ClockConfig+0x260>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 030f 	and.w	r3, r3, #15
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	429a      	cmp	r2, r3
 8004804:	d910      	bls.n	8004828 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004806:	4b8e      	ldr	r3, [pc, #568]	@ (8004a40 <HAL_RCC_ClockConfig+0x260>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f023 020f 	bic.w	r2, r3, #15
 800480e:	498c      	ldr	r1, [pc, #560]	@ (8004a40 <HAL_RCC_ClockConfig+0x260>)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	4313      	orrs	r3, r2
 8004814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004816:	4b8a      	ldr	r3, [pc, #552]	@ (8004a40 <HAL_RCC_ClockConfig+0x260>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	429a      	cmp	r2, r3
 8004822:	d001      	beq.n	8004828 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e106      	b.n	8004a36 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	d073      	beq.n	800491c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2b03      	cmp	r3, #3
 800483a:	d129      	bne.n	8004890 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800483c:	4b81      	ldr	r3, [pc, #516]	@ (8004a44 <HAL_RCC_ClockConfig+0x264>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0f4      	b.n	8004a36 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800484c:	f000 f99e 	bl	8004b8c <RCC_GetSysClockFreqFromPLLSource>
 8004850:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	4a7c      	ldr	r2, [pc, #496]	@ (8004a48 <HAL_RCC_ClockConfig+0x268>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d93f      	bls.n	80048da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800485a:	4b7a      	ldr	r3, [pc, #488]	@ (8004a44 <HAL_RCC_ClockConfig+0x264>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d009      	beq.n	800487a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800486e:	2b00      	cmp	r3, #0
 8004870:	d033      	beq.n	80048da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004876:	2b00      	cmp	r3, #0
 8004878:	d12f      	bne.n	80048da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800487a:	4b72      	ldr	r3, [pc, #456]	@ (8004a44 <HAL_RCC_ClockConfig+0x264>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004882:	4a70      	ldr	r2, [pc, #448]	@ (8004a44 <HAL_RCC_ClockConfig+0x264>)
 8004884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004888:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800488a:	2380      	movs	r3, #128	@ 0x80
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	e024      	b.n	80048da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2b02      	cmp	r3, #2
 8004896:	d107      	bne.n	80048a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004898:	4b6a      	ldr	r3, [pc, #424]	@ (8004a44 <HAL_RCC_ClockConfig+0x264>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d109      	bne.n	80048b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e0c6      	b.n	8004a36 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048a8:	4b66      	ldr	r3, [pc, #408]	@ (8004a44 <HAL_RCC_ClockConfig+0x264>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e0be      	b.n	8004a36 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80048b8:	f000 f8ce 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 80048bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	4a61      	ldr	r2, [pc, #388]	@ (8004a48 <HAL_RCC_ClockConfig+0x268>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d909      	bls.n	80048da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048c6:	4b5f      	ldr	r3, [pc, #380]	@ (8004a44 <HAL_RCC_ClockConfig+0x264>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048ce:	4a5d      	ldr	r2, [pc, #372]	@ (8004a44 <HAL_RCC_ClockConfig+0x264>)
 80048d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80048d6:	2380      	movs	r3, #128	@ 0x80
 80048d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048da:	4b5a      	ldr	r3, [pc, #360]	@ (8004a44 <HAL_RCC_ClockConfig+0x264>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f023 0203 	bic.w	r2, r3, #3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	4957      	ldr	r1, [pc, #348]	@ (8004a44 <HAL_RCC_ClockConfig+0x264>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ec:	f7fc ff6a 	bl	80017c4 <HAL_GetTick>
 80048f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f2:	e00a      	b.n	800490a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f4:	f7fc ff66 	bl	80017c4 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004902:	4293      	cmp	r3, r2
 8004904:	d901      	bls.n	800490a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e095      	b.n	8004a36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490a:	4b4e      	ldr	r3, [pc, #312]	@ (8004a44 <HAL_RCC_ClockConfig+0x264>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 020c 	and.w	r2, r3, #12
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	429a      	cmp	r2, r3
 800491a:	d1eb      	bne.n	80048f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d023      	beq.n	8004970 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d005      	beq.n	8004940 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004934:	4b43      	ldr	r3, [pc, #268]	@ (8004a44 <HAL_RCC_ClockConfig+0x264>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	4a42      	ldr	r2, [pc, #264]	@ (8004a44 <HAL_RCC_ClockConfig+0x264>)
 800493a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800493e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	2b00      	cmp	r3, #0
 800494a:	d007      	beq.n	800495c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800494c:	4b3d      	ldr	r3, [pc, #244]	@ (8004a44 <HAL_RCC_ClockConfig+0x264>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004954:	4a3b      	ldr	r2, [pc, #236]	@ (8004a44 <HAL_RCC_ClockConfig+0x264>)
 8004956:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800495a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800495c:	4b39      	ldr	r3, [pc, #228]	@ (8004a44 <HAL_RCC_ClockConfig+0x264>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	4936      	ldr	r1, [pc, #216]	@ (8004a44 <HAL_RCC_ClockConfig+0x264>)
 800496a:	4313      	orrs	r3, r2
 800496c:	608b      	str	r3, [r1, #8]
 800496e:	e008      	b.n	8004982 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2b80      	cmp	r3, #128	@ 0x80
 8004974:	d105      	bne.n	8004982 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004976:	4b33      	ldr	r3, [pc, #204]	@ (8004a44 <HAL_RCC_ClockConfig+0x264>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	4a32      	ldr	r2, [pc, #200]	@ (8004a44 <HAL_RCC_ClockConfig+0x264>)
 800497c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004980:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004982:	4b2f      	ldr	r3, [pc, #188]	@ (8004a40 <HAL_RCC_ClockConfig+0x260>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d21d      	bcs.n	80049cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004990:	4b2b      	ldr	r3, [pc, #172]	@ (8004a40 <HAL_RCC_ClockConfig+0x260>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f023 020f 	bic.w	r2, r3, #15
 8004998:	4929      	ldr	r1, [pc, #164]	@ (8004a40 <HAL_RCC_ClockConfig+0x260>)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	4313      	orrs	r3, r2
 800499e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049a0:	f7fc ff10 	bl	80017c4 <HAL_GetTick>
 80049a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a6:	e00a      	b.n	80049be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049a8:	f7fc ff0c 	bl	80017c4 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e03b      	b.n	8004a36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049be:	4b20      	ldr	r3, [pc, #128]	@ (8004a40 <HAL_RCC_ClockConfig+0x260>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d1ed      	bne.n	80049a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d008      	beq.n	80049ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004a44 <HAL_RCC_ClockConfig+0x264>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	4917      	ldr	r1, [pc, #92]	@ (8004a44 <HAL_RCC_ClockConfig+0x264>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d009      	beq.n	8004a0a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049f6:	4b13      	ldr	r3, [pc, #76]	@ (8004a44 <HAL_RCC_ClockConfig+0x264>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	490f      	ldr	r1, [pc, #60]	@ (8004a44 <HAL_RCC_ClockConfig+0x264>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a0a:	f000 f825 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	4b0c      	ldr	r3, [pc, #48]	@ (8004a44 <HAL_RCC_ClockConfig+0x264>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	091b      	lsrs	r3, r3, #4
 8004a16:	f003 030f 	and.w	r3, r3, #15
 8004a1a:	490c      	ldr	r1, [pc, #48]	@ (8004a4c <HAL_RCC_ClockConfig+0x26c>)
 8004a1c:	5ccb      	ldrb	r3, [r1, r3]
 8004a1e:	f003 031f 	and.w	r3, r3, #31
 8004a22:	fa22 f303 	lsr.w	r3, r2, r3
 8004a26:	4a0a      	ldr	r2, [pc, #40]	@ (8004a50 <HAL_RCC_ClockConfig+0x270>)
 8004a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a54 <HAL_RCC_ClockConfig+0x274>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fc fe7c 	bl	800172c <HAL_InitTick>
 8004a34:	4603      	mov	r3, r0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40022000 	.word	0x40022000
 8004a44:	40021000 	.word	0x40021000
 8004a48:	04c4b400 	.word	0x04c4b400
 8004a4c:	08008394 	.word	0x08008394
 8004a50:	20000004 	.word	0x20000004
 8004a54:	20000008 	.word	0x20000008

08004a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a5e:	4b2c      	ldr	r3, [pc, #176]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 030c 	and.w	r3, r3, #12
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d102      	bne.n	8004a70 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a6c:	613b      	str	r3, [r7, #16]
 8004a6e:	e047      	b.n	8004b00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a70:	4b27      	ldr	r3, [pc, #156]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 030c 	and.w	r3, r3, #12
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d102      	bne.n	8004a82 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a7c:	4b26      	ldr	r3, [pc, #152]	@ (8004b18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a7e:	613b      	str	r3, [r7, #16]
 8004a80:	e03e      	b.n	8004b00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a82:	4b23      	ldr	r3, [pc, #140]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 030c 	and.w	r3, r3, #12
 8004a8a:	2b0c      	cmp	r3, #12
 8004a8c:	d136      	bne.n	8004afc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a8e:	4b20      	ldr	r3, [pc, #128]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a98:	4b1d      	ldr	r3, [pc, #116]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	091b      	lsrs	r3, r3, #4
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2b03      	cmp	r3, #3
 8004aaa:	d10c      	bne.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004aac:	4a1a      	ldr	r2, [pc, #104]	@ (8004b18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab4:	4a16      	ldr	r2, [pc, #88]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ab6:	68d2      	ldr	r2, [r2, #12]
 8004ab8:	0a12      	lsrs	r2, r2, #8
 8004aba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004abe:	fb02 f303 	mul.w	r3, r2, r3
 8004ac2:	617b      	str	r3, [r7, #20]
      break;
 8004ac4:	e00c      	b.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ac6:	4a13      	ldr	r2, [pc, #76]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ace:	4a10      	ldr	r2, [pc, #64]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ad0:	68d2      	ldr	r2, [r2, #12]
 8004ad2:	0a12      	lsrs	r2, r2, #8
 8004ad4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ad8:	fb02 f303 	mul.w	r3, r2, r3
 8004adc:	617b      	str	r3, [r7, #20]
      break;
 8004ade:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	0e5b      	lsrs	r3, r3, #25
 8004ae6:	f003 0303 	and.w	r3, r3, #3
 8004aea:	3301      	adds	r3, #1
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af8:	613b      	str	r3, [r7, #16]
 8004afa:	e001      	b.n	8004b00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b00:	693b      	ldr	r3, [r7, #16]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	371c      	adds	r7, #28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	40021000 	.word	0x40021000
 8004b14:	00f42400 	.word	0x00f42400
 8004b18:	016e3600 	.word	0x016e3600

08004b1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b20:	4b03      	ldr	r3, [pc, #12]	@ (8004b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b22:	681b      	ldr	r3, [r3, #0]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	20000004 	.word	0x20000004

08004b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b38:	f7ff fff0 	bl	8004b1c <HAL_RCC_GetHCLKFreq>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	4b06      	ldr	r3, [pc, #24]	@ (8004b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	0a1b      	lsrs	r3, r3, #8
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	4904      	ldr	r1, [pc, #16]	@ (8004b5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b4a:	5ccb      	ldrb	r3, [r1, r3]
 8004b4c:	f003 031f 	and.w	r3, r3, #31
 8004b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	080083a4 	.word	0x080083a4

08004b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b64:	f7ff ffda 	bl	8004b1c <HAL_RCC_GetHCLKFreq>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	4b06      	ldr	r3, [pc, #24]	@ (8004b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	0adb      	lsrs	r3, r3, #11
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	4904      	ldr	r1, [pc, #16]	@ (8004b88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b76:	5ccb      	ldrb	r3, [r1, r3]
 8004b78:	f003 031f 	and.w	r3, r3, #31
 8004b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	40021000 	.word	0x40021000
 8004b88:	080083a4 	.word	0x080083a4

08004b8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b087      	sub	sp, #28
 8004b90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b92:	4b1e      	ldr	r3, [pc, #120]	@ (8004c0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8004c0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	091b      	lsrs	r3, r3, #4
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2b03      	cmp	r3, #3
 8004bae:	d10c      	bne.n	8004bca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bb0:	4a17      	ldr	r2, [pc, #92]	@ (8004c10 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb8:	4a14      	ldr	r2, [pc, #80]	@ (8004c0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bba:	68d2      	ldr	r2, [r2, #12]
 8004bbc:	0a12      	lsrs	r2, r2, #8
 8004bbe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004bc2:	fb02 f303 	mul.w	r3, r2, r3
 8004bc6:	617b      	str	r3, [r7, #20]
    break;
 8004bc8:	e00c      	b.n	8004be4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bca:	4a12      	ldr	r2, [pc, #72]	@ (8004c14 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd2:	4a0e      	ldr	r2, [pc, #56]	@ (8004c0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bd4:	68d2      	ldr	r2, [r2, #12]
 8004bd6:	0a12      	lsrs	r2, r2, #8
 8004bd8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004bdc:	fb02 f303 	mul.w	r3, r2, r3
 8004be0:	617b      	str	r3, [r7, #20]
    break;
 8004be2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004be4:	4b09      	ldr	r3, [pc, #36]	@ (8004c0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	0e5b      	lsrs	r3, r3, #25
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	3301      	adds	r3, #1
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004bfe:	687b      	ldr	r3, [r7, #4]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	371c      	adds	r7, #28
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	016e3600 	.word	0x016e3600
 8004c14:	00f42400 	.word	0x00f42400

08004c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c20:	2300      	movs	r3, #0
 8004c22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c24:	2300      	movs	r3, #0
 8004c26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 8098 	beq.w	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c36:	2300      	movs	r3, #0
 8004c38:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c3a:	4b43      	ldr	r3, [pc, #268]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10d      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c46:	4b40      	ldr	r3, [pc, #256]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c4a:	4a3f      	ldr	r2, [pc, #252]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c50:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c52:	4b3d      	ldr	r3, [pc, #244]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c5a:	60bb      	str	r3, [r7, #8]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c62:	4b3a      	ldr	r3, [pc, #232]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a39      	ldr	r2, [pc, #228]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c6e:	f7fc fda9 	bl	80017c4 <HAL_GetTick>
 8004c72:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c74:	e009      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c76:	f7fc fda5 	bl	80017c4 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d902      	bls.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	74fb      	strb	r3, [r7, #19]
        break;
 8004c88:	e005      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c8a:	4b30      	ldr	r3, [pc, #192]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0ef      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004c96:	7cfb      	ldrb	r3, [r7, #19]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d159      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c9c:	4b2a      	ldr	r3, [pc, #168]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ca6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d01e      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d019      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cb8:	4b23      	ldr	r3, [pc, #140]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cc4:	4b20      	ldr	r3, [pc, #128]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cca:	4a1f      	ldr	r2, [pc, #124]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ccc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cda:	4a1b      	ldr	r2, [pc, #108]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ce0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ce4:	4a18      	ldr	r2, [pc, #96]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d016      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf6:	f7fc fd65 	bl	80017c4 <HAL_GetTick>
 8004cfa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cfc:	e00b      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cfe:	f7fc fd61 	bl	80017c4 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d902      	bls.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	74fb      	strb	r3, [r7, #19]
            break;
 8004d14:	e006      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d16:	4b0c      	ldr	r3, [pc, #48]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0ec      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004d24:	7cfb      	ldrb	r3, [r7, #19]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10b      	bne.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d2a:	4b07      	ldr	r3, [pc, #28]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d38:	4903      	ldr	r1, [pc, #12]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004d40:	e008      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d42:	7cfb      	ldrb	r3, [r7, #19]
 8004d44:	74bb      	strb	r3, [r7, #18]
 8004d46:	e005      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d50:	7cfb      	ldrb	r3, [r7, #19]
 8004d52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d54:	7c7b      	ldrb	r3, [r7, #17]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d105      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d5a:	4ba7      	ldr	r3, [pc, #668]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d5e:	4aa6      	ldr	r2, [pc, #664]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d64:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d72:	4ba1      	ldr	r3, [pc, #644]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d78:	f023 0203 	bic.w	r2, r3, #3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	499d      	ldr	r1, [pc, #628]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00a      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d94:	4b98      	ldr	r3, [pc, #608]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d9a:	f023 020c 	bic.w	r2, r3, #12
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	4995      	ldr	r1, [pc, #596]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0304 	and.w	r3, r3, #4
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00a      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004db6:	4b90      	ldr	r3, [pc, #576]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dbc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	498c      	ldr	r1, [pc, #560]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0308 	and.w	r3, r3, #8
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00a      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004dd8:	4b87      	ldr	r3, [pc, #540]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dde:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	4984      	ldr	r1, [pc, #528]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0310 	and.w	r3, r3, #16
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004dfa:	4b7f      	ldr	r3, [pc, #508]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	497b      	ldr	r1, [pc, #492]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0320 	and.w	r3, r3, #32
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e1c:	4b76      	ldr	r3, [pc, #472]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e22:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	4973      	ldr	r1, [pc, #460]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e3e:	4b6e      	ldr	r3, [pc, #440]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e44:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	496a      	ldr	r1, [pc, #424]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00a      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e60:	4b65      	ldr	r3, [pc, #404]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e66:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	4962      	ldr	r1, [pc, #392]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00a      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e82:	4b5d      	ldr	r3, [pc, #372]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e90:	4959      	ldr	r1, [pc, #356]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00a      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ea4:	4b54      	ldr	r3, [pc, #336]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ea6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004eaa:	f023 0203 	bic.w	r2, r3, #3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb2:	4951      	ldr	r1, [pc, #324]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ec6:	4b4c      	ldr	r3, [pc, #304]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ecc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed4:	4948      	ldr	r1, [pc, #288]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d015      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ee8:	4b43      	ldr	r3, [pc, #268]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef6:	4940      	ldr	r1, [pc, #256]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f06:	d105      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f08:	4b3b      	ldr	r3, [pc, #236]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	4a3a      	ldr	r2, [pc, #232]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f12:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d015      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f20:	4b35      	ldr	r3, [pc, #212]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f26:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f2e:	4932      	ldr	r1, [pc, #200]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f3e:	d105      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f40:	4b2d      	ldr	r3, [pc, #180]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	4a2c      	ldr	r2, [pc, #176]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f4a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d015      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f58:	4b27      	ldr	r3, [pc, #156]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f5e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f66:	4924      	ldr	r1, [pc, #144]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f76:	d105      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f78:	4b1f      	ldr	r3, [pc, #124]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f82:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d015      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f90:	4b19      	ldr	r3, [pc, #100]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f96:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f9e:	4916      	ldr	r1, [pc, #88]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004faa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fae:	d105      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fb0:	4b11      	ldr	r3, [pc, #68]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	4a10      	ldr	r2, [pc, #64]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d019      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd6:	4908      	ldr	r1, [pc, #32]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fe6:	d109      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fe8:	4b03      	ldr	r3, [pc, #12]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	4a02      	ldr	r2, [pc, #8]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ff2:	60d3      	str	r3, [r2, #12]
 8004ff4:	e002      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004ff6:	bf00      	nop
 8004ff8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d015      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005008:	4b29      	ldr	r3, [pc, #164]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800500a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800500e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005016:	4926      	ldr	r1, [pc, #152]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005022:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005026:	d105      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005028:	4b21      	ldr	r3, [pc, #132]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	4a20      	ldr	r2, [pc, #128]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800502e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005032:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d015      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005040:	4b1b      	ldr	r3, [pc, #108]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005046:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800504e:	4918      	ldr	r1, [pc, #96]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005050:	4313      	orrs	r3, r2
 8005052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800505a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800505e:	d105      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005060:	4b13      	ldr	r3, [pc, #76]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	4a12      	ldr	r2, [pc, #72]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005066:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800506a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d015      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005078:	4b0d      	ldr	r3, [pc, #52]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800507a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800507e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005086:	490a      	ldr	r1, [pc, #40]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005088:	4313      	orrs	r3, r2
 800508a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005092:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005096:	d105      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005098:	4b05      	ldr	r3, [pc, #20]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	4a04      	ldr	r2, [pc, #16]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800509e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80050a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	40021000 	.word	0x40021000

080050b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e049      	b.n	800515a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d106      	bne.n	80050e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7fc f940 	bl	8001360 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	3304      	adds	r3, #4
 80050f0:	4619      	mov	r1, r3
 80050f2:	4610      	mov	r0, r2
 80050f4:	f000 ff68 	bl	8005fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
	...

08005164 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b01      	cmp	r3, #1
 8005176:	d001      	beq.n	800517c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e04c      	b.n	8005216 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a26      	ldr	r2, [pc, #152]	@ (8005224 <HAL_TIM_Base_Start+0xc0>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d022      	beq.n	80051d4 <HAL_TIM_Base_Start+0x70>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005196:	d01d      	beq.n	80051d4 <HAL_TIM_Base_Start+0x70>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a22      	ldr	r2, [pc, #136]	@ (8005228 <HAL_TIM_Base_Start+0xc4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d018      	beq.n	80051d4 <HAL_TIM_Base_Start+0x70>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a21      	ldr	r2, [pc, #132]	@ (800522c <HAL_TIM_Base_Start+0xc8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d013      	beq.n	80051d4 <HAL_TIM_Base_Start+0x70>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a1f      	ldr	r2, [pc, #124]	@ (8005230 <HAL_TIM_Base_Start+0xcc>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00e      	beq.n	80051d4 <HAL_TIM_Base_Start+0x70>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005234 <HAL_TIM_Base_Start+0xd0>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d009      	beq.n	80051d4 <HAL_TIM_Base_Start+0x70>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005238 <HAL_TIM_Base_Start+0xd4>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d004      	beq.n	80051d4 <HAL_TIM_Base_Start+0x70>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a1b      	ldr	r2, [pc, #108]	@ (800523c <HAL_TIM_Base_Start+0xd8>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d115      	bne.n	8005200 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	4b19      	ldr	r3, [pc, #100]	@ (8005240 <HAL_TIM_Base_Start+0xdc>)
 80051dc:	4013      	ands	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2b06      	cmp	r3, #6
 80051e4:	d015      	beq.n	8005212 <HAL_TIM_Base_Start+0xae>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051ec:	d011      	beq.n	8005212 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f042 0201 	orr.w	r2, r2, #1
 80051fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051fe:	e008      	b.n	8005212 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 0201 	orr.w	r2, r2, #1
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	e000      	b.n	8005214 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005212:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40012c00 	.word	0x40012c00
 8005228:	40000400 	.word	0x40000400
 800522c:	40000800 	.word	0x40000800
 8005230:	40000c00 	.word	0x40000c00
 8005234:	40013400 	.word	0x40013400
 8005238:	40014000 	.word	0x40014000
 800523c:	40015000 	.word	0x40015000
 8005240:	00010007 	.word	0x00010007

08005244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b01      	cmp	r3, #1
 8005256:	d001      	beq.n	800525c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e054      	b.n	8005306 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0201 	orr.w	r2, r2, #1
 8005272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a26      	ldr	r2, [pc, #152]	@ (8005314 <HAL_TIM_Base_Start_IT+0xd0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d022      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005286:	d01d      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a22      	ldr	r2, [pc, #136]	@ (8005318 <HAL_TIM_Base_Start_IT+0xd4>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d018      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a21      	ldr	r2, [pc, #132]	@ (800531c <HAL_TIM_Base_Start_IT+0xd8>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d013      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005320 <HAL_TIM_Base_Start_IT+0xdc>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00e      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005324 <HAL_TIM_Base_Start_IT+0xe0>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d009      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005328 <HAL_TIM_Base_Start_IT+0xe4>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d004      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a1b      	ldr	r2, [pc, #108]	@ (800532c <HAL_TIM_Base_Start_IT+0xe8>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d115      	bne.n	80052f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689a      	ldr	r2, [r3, #8]
 80052ca:	4b19      	ldr	r3, [pc, #100]	@ (8005330 <HAL_TIM_Base_Start_IT+0xec>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2b06      	cmp	r3, #6
 80052d4:	d015      	beq.n	8005302 <HAL_TIM_Base_Start_IT+0xbe>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052dc:	d011      	beq.n	8005302 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f042 0201 	orr.w	r2, r2, #1
 80052ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ee:	e008      	b.n	8005302 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f042 0201 	orr.w	r2, r2, #1
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	e000      	b.n	8005304 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005302:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40012c00 	.word	0x40012c00
 8005318:	40000400 	.word	0x40000400
 800531c:	40000800 	.word	0x40000800
 8005320:	40000c00 	.word	0x40000c00
 8005324:	40013400 	.word	0x40013400
 8005328:	40014000 	.word	0x40014000
 800532c:	40015000 	.word	0x40015000
 8005330:	00010007 	.word	0x00010007

08005334 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e049      	b.n	80053da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d106      	bne.n	8005360 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f841 	bl	80053e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2202      	movs	r2, #2
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3304      	adds	r3, #4
 8005370:	4619      	mov	r1, r3
 8005372:	4610      	mov	r0, r2
 8005374:	f000 fe28 	bl	8005fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053ea:	bf00      	nop
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
	...

080053f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d109      	bne.n	800541c <HAL_TIM_PWM_Start+0x24>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b01      	cmp	r3, #1
 8005412:	bf14      	ite	ne
 8005414:	2301      	movne	r3, #1
 8005416:	2300      	moveq	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	e03c      	b.n	8005496 <HAL_TIM_PWM_Start+0x9e>
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	2b04      	cmp	r3, #4
 8005420:	d109      	bne.n	8005436 <HAL_TIM_PWM_Start+0x3e>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b01      	cmp	r3, #1
 800542c:	bf14      	ite	ne
 800542e:	2301      	movne	r3, #1
 8005430:	2300      	moveq	r3, #0
 8005432:	b2db      	uxtb	r3, r3
 8005434:	e02f      	b.n	8005496 <HAL_TIM_PWM_Start+0x9e>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b08      	cmp	r3, #8
 800543a:	d109      	bne.n	8005450 <HAL_TIM_PWM_Start+0x58>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b01      	cmp	r3, #1
 8005446:	bf14      	ite	ne
 8005448:	2301      	movne	r3, #1
 800544a:	2300      	moveq	r3, #0
 800544c:	b2db      	uxtb	r3, r3
 800544e:	e022      	b.n	8005496 <HAL_TIM_PWM_Start+0x9e>
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2b0c      	cmp	r3, #12
 8005454:	d109      	bne.n	800546a <HAL_TIM_PWM_Start+0x72>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b01      	cmp	r3, #1
 8005460:	bf14      	ite	ne
 8005462:	2301      	movne	r3, #1
 8005464:	2300      	moveq	r3, #0
 8005466:	b2db      	uxtb	r3, r3
 8005468:	e015      	b.n	8005496 <HAL_TIM_PWM_Start+0x9e>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b10      	cmp	r3, #16
 800546e:	d109      	bne.n	8005484 <HAL_TIM_PWM_Start+0x8c>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b01      	cmp	r3, #1
 800547a:	bf14      	ite	ne
 800547c:	2301      	movne	r3, #1
 800547e:	2300      	moveq	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	e008      	b.n	8005496 <HAL_TIM_PWM_Start+0x9e>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b01      	cmp	r3, #1
 800548e:	bf14      	ite	ne
 8005490:	2301      	movne	r3, #1
 8005492:	2300      	moveq	r3, #0
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e0a6      	b.n	80055ec <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d104      	bne.n	80054ae <HAL_TIM_PWM_Start+0xb6>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054ac:	e023      	b.n	80054f6 <HAL_TIM_PWM_Start+0xfe>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b04      	cmp	r3, #4
 80054b2:	d104      	bne.n	80054be <HAL_TIM_PWM_Start+0xc6>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054bc:	e01b      	b.n	80054f6 <HAL_TIM_PWM_Start+0xfe>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d104      	bne.n	80054ce <HAL_TIM_PWM_Start+0xd6>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054cc:	e013      	b.n	80054f6 <HAL_TIM_PWM_Start+0xfe>
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b0c      	cmp	r3, #12
 80054d2:	d104      	bne.n	80054de <HAL_TIM_PWM_Start+0xe6>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054dc:	e00b      	b.n	80054f6 <HAL_TIM_PWM_Start+0xfe>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b10      	cmp	r3, #16
 80054e2:	d104      	bne.n	80054ee <HAL_TIM_PWM_Start+0xf6>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054ec:	e003      	b.n	80054f6 <HAL_TIM_PWM_Start+0xfe>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2202      	movs	r2, #2
 80054f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2201      	movs	r2, #1
 80054fc:	6839      	ldr	r1, [r7, #0]
 80054fe:	4618      	mov	r0, r3
 8005500:	f001 f9dc 	bl	80068bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a3a      	ldr	r2, [pc, #232]	@ (80055f4 <HAL_TIM_PWM_Start+0x1fc>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d018      	beq.n	8005540 <HAL_TIM_PWM_Start+0x148>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a39      	ldr	r2, [pc, #228]	@ (80055f8 <HAL_TIM_PWM_Start+0x200>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d013      	beq.n	8005540 <HAL_TIM_PWM_Start+0x148>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a37      	ldr	r2, [pc, #220]	@ (80055fc <HAL_TIM_PWM_Start+0x204>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d00e      	beq.n	8005540 <HAL_TIM_PWM_Start+0x148>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a36      	ldr	r2, [pc, #216]	@ (8005600 <HAL_TIM_PWM_Start+0x208>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d009      	beq.n	8005540 <HAL_TIM_PWM_Start+0x148>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a34      	ldr	r2, [pc, #208]	@ (8005604 <HAL_TIM_PWM_Start+0x20c>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d004      	beq.n	8005540 <HAL_TIM_PWM_Start+0x148>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a33      	ldr	r2, [pc, #204]	@ (8005608 <HAL_TIM_PWM_Start+0x210>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d101      	bne.n	8005544 <HAL_TIM_PWM_Start+0x14c>
 8005540:	2301      	movs	r3, #1
 8005542:	e000      	b.n	8005546 <HAL_TIM_PWM_Start+0x14e>
 8005544:	2300      	movs	r3, #0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d007      	beq.n	800555a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005558:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a25      	ldr	r2, [pc, #148]	@ (80055f4 <HAL_TIM_PWM_Start+0x1fc>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d022      	beq.n	80055aa <HAL_TIM_PWM_Start+0x1b2>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800556c:	d01d      	beq.n	80055aa <HAL_TIM_PWM_Start+0x1b2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a26      	ldr	r2, [pc, #152]	@ (800560c <HAL_TIM_PWM_Start+0x214>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d018      	beq.n	80055aa <HAL_TIM_PWM_Start+0x1b2>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a24      	ldr	r2, [pc, #144]	@ (8005610 <HAL_TIM_PWM_Start+0x218>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d013      	beq.n	80055aa <HAL_TIM_PWM_Start+0x1b2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a23      	ldr	r2, [pc, #140]	@ (8005614 <HAL_TIM_PWM_Start+0x21c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d00e      	beq.n	80055aa <HAL_TIM_PWM_Start+0x1b2>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a19      	ldr	r2, [pc, #100]	@ (80055f8 <HAL_TIM_PWM_Start+0x200>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d009      	beq.n	80055aa <HAL_TIM_PWM_Start+0x1b2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a18      	ldr	r2, [pc, #96]	@ (80055fc <HAL_TIM_PWM_Start+0x204>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d004      	beq.n	80055aa <HAL_TIM_PWM_Start+0x1b2>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a18      	ldr	r2, [pc, #96]	@ (8005608 <HAL_TIM_PWM_Start+0x210>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d115      	bne.n	80055d6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	4b19      	ldr	r3, [pc, #100]	@ (8005618 <HAL_TIM_PWM_Start+0x220>)
 80055b2:	4013      	ands	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2b06      	cmp	r3, #6
 80055ba:	d015      	beq.n	80055e8 <HAL_TIM_PWM_Start+0x1f0>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055c2:	d011      	beq.n	80055e8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0201 	orr.w	r2, r2, #1
 80055d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d4:	e008      	b.n	80055e8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f042 0201 	orr.w	r2, r2, #1
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	e000      	b.n	80055ea <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	40012c00 	.word	0x40012c00
 80055f8:	40013400 	.word	0x40013400
 80055fc:	40014000 	.word	0x40014000
 8005600:	40014400 	.word	0x40014400
 8005604:	40014800 	.word	0x40014800
 8005608:	40015000 	.word	0x40015000
 800560c:	40000400 	.word	0x40000400
 8005610:	40000800 	.word	0x40000800
 8005614:	40000c00 	.word	0x40000c00
 8005618:	00010007 	.word	0x00010007

0800561c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e097      	b.n	8005760 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d106      	bne.n	800564a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7fb fef3 	bl	8001430 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2202      	movs	r2, #2
 800564e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	6812      	ldr	r2, [r2, #0]
 800565c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005660:	f023 0307 	bic.w	r3, r3, #7
 8005664:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	3304      	adds	r3, #4
 800566e:	4619      	mov	r1, r3
 8005670:	4610      	mov	r0, r2
 8005672:	f000 fca9 	bl	8005fc8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	4313      	orrs	r3, r2
 8005696:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800569e:	f023 0303 	bic.w	r3, r3, #3
 80056a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	021b      	lsls	r3, r3, #8
 80056ae:	4313      	orrs	r3, r2
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80056bc:	f023 030c 	bic.w	r3, r3, #12
 80056c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80056c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68da      	ldr	r2, [r3, #12]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	021b      	lsls	r3, r3, #8
 80056d8:	4313      	orrs	r3, r2
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	4313      	orrs	r3, r2
 80056de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	011a      	lsls	r2, r3, #4
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	031b      	lsls	r3, r3, #12
 80056ec:	4313      	orrs	r3, r2
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80056fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005702:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	4313      	orrs	r3, r2
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005778:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005780:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005788:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005790:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d110      	bne.n	80057ba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005798:	7bfb      	ldrb	r3, [r7, #15]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d102      	bne.n	80057a4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800579e:	7b7b      	ldrb	r3, [r7, #13]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d001      	beq.n	80057a8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e069      	b.n	800587c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057b8:	e031      	b.n	800581e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b04      	cmp	r3, #4
 80057be:	d110      	bne.n	80057e2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80057c0:	7bbb      	ldrb	r3, [r7, #14]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d102      	bne.n	80057cc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80057c6:	7b3b      	ldrb	r3, [r7, #12]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d001      	beq.n	80057d0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e055      	b.n	800587c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057e0:	e01d      	b.n	800581e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057e2:	7bfb      	ldrb	r3, [r7, #15]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d108      	bne.n	80057fa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80057e8:	7bbb      	ldrb	r3, [r7, #14]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d105      	bne.n	80057fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057ee:	7b7b      	ldrb	r3, [r7, #13]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d102      	bne.n	80057fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80057f4:	7b3b      	ldrb	r3, [r7, #12]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d001      	beq.n	80057fe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e03e      	b.n	800587c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2202      	movs	r2, #2
 8005802:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2202      	movs	r2, #2
 800580a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2202      	movs	r2, #2
 8005812:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2202      	movs	r2, #2
 800581a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d003      	beq.n	800582c <HAL_TIM_Encoder_Start+0xc4>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2b04      	cmp	r3, #4
 8005828:	d008      	beq.n	800583c <HAL_TIM_Encoder_Start+0xd4>
 800582a:	e00f      	b.n	800584c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2201      	movs	r2, #1
 8005832:	2100      	movs	r1, #0
 8005834:	4618      	mov	r0, r3
 8005836:	f001 f841 	bl	80068bc <TIM_CCxChannelCmd>
      break;
 800583a:	e016      	b.n	800586a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2201      	movs	r2, #1
 8005842:	2104      	movs	r1, #4
 8005844:	4618      	mov	r0, r3
 8005846:	f001 f839 	bl	80068bc <TIM_CCxChannelCmd>
      break;
 800584a:	e00e      	b.n	800586a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2201      	movs	r2, #1
 8005852:	2100      	movs	r1, #0
 8005854:	4618      	mov	r0, r3
 8005856:	f001 f831 	bl	80068bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2201      	movs	r2, #1
 8005860:	2104      	movs	r1, #4
 8005862:	4618      	mov	r0, r3
 8005864:	f001 f82a 	bl	80068bc <TIM_CCxChannelCmd>
      break;
 8005868:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f042 0201 	orr.w	r2, r2, #1
 8005878:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d020      	beq.n	80058e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d01b      	beq.n	80058e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f06f 0202 	mvn.w	r2, #2
 80058b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fb5c 	bl	8005f8c <HAL_TIM_IC_CaptureCallback>
 80058d4:	e005      	b.n	80058e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fb4e 	bl	8005f78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 fb5f 	bl	8005fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f003 0304 	and.w	r3, r3, #4
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d020      	beq.n	8005934 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d01b      	beq.n	8005934 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f06f 0204 	mvn.w	r2, #4
 8005904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2202      	movs	r2, #2
 800590a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 fb36 	bl	8005f8c <HAL_TIM_IC_CaptureCallback>
 8005920:	e005      	b.n	800592e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fb28 	bl	8005f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 fb39 	bl	8005fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f003 0308 	and.w	r3, r3, #8
 800593a:	2b00      	cmp	r3, #0
 800593c:	d020      	beq.n	8005980 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f003 0308 	and.w	r3, r3, #8
 8005944:	2b00      	cmp	r3, #0
 8005946:	d01b      	beq.n	8005980 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f06f 0208 	mvn.w	r2, #8
 8005950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2204      	movs	r2, #4
 8005956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	f003 0303 	and.w	r3, r3, #3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fb10 	bl	8005f8c <HAL_TIM_IC_CaptureCallback>
 800596c:	e005      	b.n	800597a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fb02 	bl	8005f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 fb13 	bl	8005fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f003 0310 	and.w	r3, r3, #16
 8005986:	2b00      	cmp	r3, #0
 8005988:	d020      	beq.n	80059cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f003 0310 	and.w	r3, r3, #16
 8005990:	2b00      	cmp	r3, #0
 8005992:	d01b      	beq.n	80059cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f06f 0210 	mvn.w	r2, #16
 800599c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2208      	movs	r2, #8
 80059a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 faea 	bl	8005f8c <HAL_TIM_IC_CaptureCallback>
 80059b8:	e005      	b.n	80059c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 fadc 	bl	8005f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 faed 	bl	8005fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00c      	beq.n	80059f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d007      	beq.n	80059f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f06f 0201 	mvn.w	r2, #1
 80059e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7fb fac2 	bl	8000f74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d104      	bne.n	8005a04 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00c      	beq.n	8005a1e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d007      	beq.n	8005a1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f001 f8a9 	bl	8006b70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00c      	beq.n	8005a42 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d007      	beq.n	8005a42 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f001 f8a1 	bl	8006b84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00c      	beq.n	8005a66 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d007      	beq.n	8005a66 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 faa7 	bl	8005fb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	f003 0320 	and.w	r3, r3, #32
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00c      	beq.n	8005a8a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d007      	beq.n	8005a8a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f06f 0220 	mvn.w	r2, #32
 8005a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f001 f869 	bl	8006b5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00c      	beq.n	8005aae <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d007      	beq.n	8005aae <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f001 f875 	bl	8006b98 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00c      	beq.n	8005ad2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d007      	beq.n	8005ad2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f001 f86d 	bl	8006bac <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00c      	beq.n	8005af6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d007      	beq.n	8005af6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f001 f865 	bl	8006bc0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00c      	beq.n	8005b1a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d007      	beq.n	8005b1a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f001 f85d 	bl	8006bd4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b1a:	bf00      	nop
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
	...

08005b24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d101      	bne.n	8005b42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	e0ff      	b.n	8005d42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b14      	cmp	r3, #20
 8005b4e:	f200 80f0 	bhi.w	8005d32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b52:	a201      	add	r2, pc, #4	@ (adr r2, 8005b58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b58:	08005bad 	.word	0x08005bad
 8005b5c:	08005d33 	.word	0x08005d33
 8005b60:	08005d33 	.word	0x08005d33
 8005b64:	08005d33 	.word	0x08005d33
 8005b68:	08005bed 	.word	0x08005bed
 8005b6c:	08005d33 	.word	0x08005d33
 8005b70:	08005d33 	.word	0x08005d33
 8005b74:	08005d33 	.word	0x08005d33
 8005b78:	08005c2f 	.word	0x08005c2f
 8005b7c:	08005d33 	.word	0x08005d33
 8005b80:	08005d33 	.word	0x08005d33
 8005b84:	08005d33 	.word	0x08005d33
 8005b88:	08005c6f 	.word	0x08005c6f
 8005b8c:	08005d33 	.word	0x08005d33
 8005b90:	08005d33 	.word	0x08005d33
 8005b94:	08005d33 	.word	0x08005d33
 8005b98:	08005cb1 	.word	0x08005cb1
 8005b9c:	08005d33 	.word	0x08005d33
 8005ba0:	08005d33 	.word	0x08005d33
 8005ba4:	08005d33 	.word	0x08005d33
 8005ba8:	08005cf1 	.word	0x08005cf1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68b9      	ldr	r1, [r7, #8]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fabc 	bl	8006130 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699a      	ldr	r2, [r3, #24]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 0208 	orr.w	r2, r2, #8
 8005bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	699a      	ldr	r2, [r3, #24]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0204 	bic.w	r2, r2, #4
 8005bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6999      	ldr	r1, [r3, #24]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	691a      	ldr	r2, [r3, #16]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	619a      	str	r2, [r3, #24]
      break;
 8005bea:	e0a5      	b.n	8005d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68b9      	ldr	r1, [r7, #8]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 fb36 	bl	8006264 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699a      	ldr	r2, [r3, #24]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	699a      	ldr	r2, [r3, #24]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6999      	ldr	r1, [r3, #24]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	021a      	lsls	r2, r3, #8
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	619a      	str	r2, [r3, #24]
      break;
 8005c2c:	e084      	b.n	8005d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68b9      	ldr	r1, [r7, #8]
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 fba9 	bl	800638c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69da      	ldr	r2, [r3, #28]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f042 0208 	orr.w	r2, r2, #8
 8005c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69da      	ldr	r2, [r3, #28]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 0204 	bic.w	r2, r2, #4
 8005c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	69d9      	ldr	r1, [r3, #28]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	691a      	ldr	r2, [r3, #16]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	61da      	str	r2, [r3, #28]
      break;
 8005c6c:	e064      	b.n	8005d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68b9      	ldr	r1, [r7, #8]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f000 fc1b 	bl	80064b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	69da      	ldr	r2, [r3, #28]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	69da      	ldr	r2, [r3, #28]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	69d9      	ldr	r1, [r3, #28]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	021a      	lsls	r2, r3, #8
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	61da      	str	r2, [r3, #28]
      break;
 8005cae:	e043      	b.n	8005d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68b9      	ldr	r1, [r7, #8]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 fc8e 	bl	80065d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f042 0208 	orr.w	r2, r2, #8
 8005cca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0204 	bic.w	r2, r2, #4
 8005cda:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	691a      	ldr	r2, [r3, #16]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005cee:	e023      	b.n	8005d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68b9      	ldr	r1, [r7, #8]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 fcd8 	bl	80066ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d1a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	021a      	lsls	r2, r3, #8
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005d30:	e002      	b.n	8005d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	75fb      	strb	r3, [r7, #23]
      break;
 8005d36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3718      	adds	r7, #24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop

08005d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d101      	bne.n	8005d68 <HAL_TIM_ConfigClockSource+0x1c>
 8005d64:	2302      	movs	r3, #2
 8005d66:	e0f6      	b.n	8005f56 <HAL_TIM_ConfigClockSource+0x20a>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005d86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a6f      	ldr	r2, [pc, #444]	@ (8005f60 <HAL_TIM_ConfigClockSource+0x214>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	f000 80c1 	beq.w	8005f2a <HAL_TIM_ConfigClockSource+0x1de>
 8005da8:	4a6d      	ldr	r2, [pc, #436]	@ (8005f60 <HAL_TIM_ConfigClockSource+0x214>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	f200 80c6 	bhi.w	8005f3c <HAL_TIM_ConfigClockSource+0x1f0>
 8005db0:	4a6c      	ldr	r2, [pc, #432]	@ (8005f64 <HAL_TIM_ConfigClockSource+0x218>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	f000 80b9 	beq.w	8005f2a <HAL_TIM_ConfigClockSource+0x1de>
 8005db8:	4a6a      	ldr	r2, [pc, #424]	@ (8005f64 <HAL_TIM_ConfigClockSource+0x218>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	f200 80be 	bhi.w	8005f3c <HAL_TIM_ConfigClockSource+0x1f0>
 8005dc0:	4a69      	ldr	r2, [pc, #420]	@ (8005f68 <HAL_TIM_ConfigClockSource+0x21c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	f000 80b1 	beq.w	8005f2a <HAL_TIM_ConfigClockSource+0x1de>
 8005dc8:	4a67      	ldr	r2, [pc, #412]	@ (8005f68 <HAL_TIM_ConfigClockSource+0x21c>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	f200 80b6 	bhi.w	8005f3c <HAL_TIM_ConfigClockSource+0x1f0>
 8005dd0:	4a66      	ldr	r2, [pc, #408]	@ (8005f6c <HAL_TIM_ConfigClockSource+0x220>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	f000 80a9 	beq.w	8005f2a <HAL_TIM_ConfigClockSource+0x1de>
 8005dd8:	4a64      	ldr	r2, [pc, #400]	@ (8005f6c <HAL_TIM_ConfigClockSource+0x220>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	f200 80ae 	bhi.w	8005f3c <HAL_TIM_ConfigClockSource+0x1f0>
 8005de0:	4a63      	ldr	r2, [pc, #396]	@ (8005f70 <HAL_TIM_ConfigClockSource+0x224>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	f000 80a1 	beq.w	8005f2a <HAL_TIM_ConfigClockSource+0x1de>
 8005de8:	4a61      	ldr	r2, [pc, #388]	@ (8005f70 <HAL_TIM_ConfigClockSource+0x224>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	f200 80a6 	bhi.w	8005f3c <HAL_TIM_ConfigClockSource+0x1f0>
 8005df0:	4a60      	ldr	r2, [pc, #384]	@ (8005f74 <HAL_TIM_ConfigClockSource+0x228>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	f000 8099 	beq.w	8005f2a <HAL_TIM_ConfigClockSource+0x1de>
 8005df8:	4a5e      	ldr	r2, [pc, #376]	@ (8005f74 <HAL_TIM_ConfigClockSource+0x228>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	f200 809e 	bhi.w	8005f3c <HAL_TIM_ConfigClockSource+0x1f0>
 8005e00:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005e04:	f000 8091 	beq.w	8005f2a <HAL_TIM_ConfigClockSource+0x1de>
 8005e08:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005e0c:	f200 8096 	bhi.w	8005f3c <HAL_TIM_ConfigClockSource+0x1f0>
 8005e10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e14:	f000 8089 	beq.w	8005f2a <HAL_TIM_ConfigClockSource+0x1de>
 8005e18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e1c:	f200 808e 	bhi.w	8005f3c <HAL_TIM_ConfigClockSource+0x1f0>
 8005e20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e24:	d03e      	beq.n	8005ea4 <HAL_TIM_ConfigClockSource+0x158>
 8005e26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e2a:	f200 8087 	bhi.w	8005f3c <HAL_TIM_ConfigClockSource+0x1f0>
 8005e2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e32:	f000 8086 	beq.w	8005f42 <HAL_TIM_ConfigClockSource+0x1f6>
 8005e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e3a:	d87f      	bhi.n	8005f3c <HAL_TIM_ConfigClockSource+0x1f0>
 8005e3c:	2b70      	cmp	r3, #112	@ 0x70
 8005e3e:	d01a      	beq.n	8005e76 <HAL_TIM_ConfigClockSource+0x12a>
 8005e40:	2b70      	cmp	r3, #112	@ 0x70
 8005e42:	d87b      	bhi.n	8005f3c <HAL_TIM_ConfigClockSource+0x1f0>
 8005e44:	2b60      	cmp	r3, #96	@ 0x60
 8005e46:	d050      	beq.n	8005eea <HAL_TIM_ConfigClockSource+0x19e>
 8005e48:	2b60      	cmp	r3, #96	@ 0x60
 8005e4a:	d877      	bhi.n	8005f3c <HAL_TIM_ConfigClockSource+0x1f0>
 8005e4c:	2b50      	cmp	r3, #80	@ 0x50
 8005e4e:	d03c      	beq.n	8005eca <HAL_TIM_ConfigClockSource+0x17e>
 8005e50:	2b50      	cmp	r3, #80	@ 0x50
 8005e52:	d873      	bhi.n	8005f3c <HAL_TIM_ConfigClockSource+0x1f0>
 8005e54:	2b40      	cmp	r3, #64	@ 0x40
 8005e56:	d058      	beq.n	8005f0a <HAL_TIM_ConfigClockSource+0x1be>
 8005e58:	2b40      	cmp	r3, #64	@ 0x40
 8005e5a:	d86f      	bhi.n	8005f3c <HAL_TIM_ConfigClockSource+0x1f0>
 8005e5c:	2b30      	cmp	r3, #48	@ 0x30
 8005e5e:	d064      	beq.n	8005f2a <HAL_TIM_ConfigClockSource+0x1de>
 8005e60:	2b30      	cmp	r3, #48	@ 0x30
 8005e62:	d86b      	bhi.n	8005f3c <HAL_TIM_ConfigClockSource+0x1f0>
 8005e64:	2b20      	cmp	r3, #32
 8005e66:	d060      	beq.n	8005f2a <HAL_TIM_ConfigClockSource+0x1de>
 8005e68:	2b20      	cmp	r3, #32
 8005e6a:	d867      	bhi.n	8005f3c <HAL_TIM_ConfigClockSource+0x1f0>
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d05c      	beq.n	8005f2a <HAL_TIM_ConfigClockSource+0x1de>
 8005e70:	2b10      	cmp	r3, #16
 8005e72:	d05a      	beq.n	8005f2a <HAL_TIM_ConfigClockSource+0x1de>
 8005e74:	e062      	b.n	8005f3c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e86:	f000 fcf9 	bl	800687c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	609a      	str	r2, [r3, #8]
      break;
 8005ea2:	e04f      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005eb4:	f000 fce2 	bl	800687c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689a      	ldr	r2, [r3, #8]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ec6:	609a      	str	r2, [r3, #8]
      break;
 8005ec8:	e03c      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f000 fc54 	bl	8006784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2150      	movs	r1, #80	@ 0x50
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 fcad 	bl	8006842 <TIM_ITRx_SetConfig>
      break;
 8005ee8:	e02c      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f000 fc73 	bl	80067e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2160      	movs	r1, #96	@ 0x60
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 fc9d 	bl	8006842 <TIM_ITRx_SetConfig>
      break;
 8005f08:	e01c      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f16:	461a      	mov	r2, r3
 8005f18:	f000 fc34 	bl	8006784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2140      	movs	r1, #64	@ 0x40
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fc8d 	bl	8006842 <TIM_ITRx_SetConfig>
      break;
 8005f28:	e00c      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4619      	mov	r1, r3
 8005f34:	4610      	mov	r0, r2
 8005f36:	f000 fc84 	bl	8006842 <TIM_ITRx_SetConfig>
      break;
 8005f3a:	e003      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f40:	e000      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005f42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	00100070 	.word	0x00100070
 8005f64:	00100060 	.word	0x00100060
 8005f68:	00100050 	.word	0x00100050
 8005f6c:	00100040 	.word	0x00100040
 8005f70:	00100030 	.word	0x00100030
 8005f74:	00100020 	.word	0x00100020

08005f78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a4c      	ldr	r2, [pc, #304]	@ (800610c <TIM_Base_SetConfig+0x144>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d017      	beq.n	8006010 <TIM_Base_SetConfig+0x48>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fe6:	d013      	beq.n	8006010 <TIM_Base_SetConfig+0x48>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a49      	ldr	r2, [pc, #292]	@ (8006110 <TIM_Base_SetConfig+0x148>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d00f      	beq.n	8006010 <TIM_Base_SetConfig+0x48>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a48      	ldr	r2, [pc, #288]	@ (8006114 <TIM_Base_SetConfig+0x14c>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d00b      	beq.n	8006010 <TIM_Base_SetConfig+0x48>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a47      	ldr	r2, [pc, #284]	@ (8006118 <TIM_Base_SetConfig+0x150>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d007      	beq.n	8006010 <TIM_Base_SetConfig+0x48>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a46      	ldr	r2, [pc, #280]	@ (800611c <TIM_Base_SetConfig+0x154>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d003      	beq.n	8006010 <TIM_Base_SetConfig+0x48>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a45      	ldr	r2, [pc, #276]	@ (8006120 <TIM_Base_SetConfig+0x158>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d108      	bne.n	8006022 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a39      	ldr	r2, [pc, #228]	@ (800610c <TIM_Base_SetConfig+0x144>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d023      	beq.n	8006072 <TIM_Base_SetConfig+0xaa>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006030:	d01f      	beq.n	8006072 <TIM_Base_SetConfig+0xaa>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a36      	ldr	r2, [pc, #216]	@ (8006110 <TIM_Base_SetConfig+0x148>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d01b      	beq.n	8006072 <TIM_Base_SetConfig+0xaa>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a35      	ldr	r2, [pc, #212]	@ (8006114 <TIM_Base_SetConfig+0x14c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d017      	beq.n	8006072 <TIM_Base_SetConfig+0xaa>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a34      	ldr	r2, [pc, #208]	@ (8006118 <TIM_Base_SetConfig+0x150>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d013      	beq.n	8006072 <TIM_Base_SetConfig+0xaa>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a33      	ldr	r2, [pc, #204]	@ (800611c <TIM_Base_SetConfig+0x154>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d00f      	beq.n	8006072 <TIM_Base_SetConfig+0xaa>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a33      	ldr	r2, [pc, #204]	@ (8006124 <TIM_Base_SetConfig+0x15c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00b      	beq.n	8006072 <TIM_Base_SetConfig+0xaa>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a32      	ldr	r2, [pc, #200]	@ (8006128 <TIM_Base_SetConfig+0x160>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d007      	beq.n	8006072 <TIM_Base_SetConfig+0xaa>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a31      	ldr	r2, [pc, #196]	@ (800612c <TIM_Base_SetConfig+0x164>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d003      	beq.n	8006072 <TIM_Base_SetConfig+0xaa>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a2c      	ldr	r2, [pc, #176]	@ (8006120 <TIM_Base_SetConfig+0x158>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d108      	bne.n	8006084 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	4313      	orrs	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	689a      	ldr	r2, [r3, #8]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a18      	ldr	r2, [pc, #96]	@ (800610c <TIM_Base_SetConfig+0x144>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d013      	beq.n	80060d8 <TIM_Base_SetConfig+0x110>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a1a      	ldr	r2, [pc, #104]	@ (800611c <TIM_Base_SetConfig+0x154>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d00f      	beq.n	80060d8 <TIM_Base_SetConfig+0x110>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a1a      	ldr	r2, [pc, #104]	@ (8006124 <TIM_Base_SetConfig+0x15c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d00b      	beq.n	80060d8 <TIM_Base_SetConfig+0x110>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a19      	ldr	r2, [pc, #100]	@ (8006128 <TIM_Base_SetConfig+0x160>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d007      	beq.n	80060d8 <TIM_Base_SetConfig+0x110>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a18      	ldr	r2, [pc, #96]	@ (800612c <TIM_Base_SetConfig+0x164>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d003      	beq.n	80060d8 <TIM_Base_SetConfig+0x110>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a13      	ldr	r2, [pc, #76]	@ (8006120 <TIM_Base_SetConfig+0x158>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d103      	bne.n	80060e0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	691a      	ldr	r2, [r3, #16]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d105      	bne.n	80060fe <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	f023 0201 	bic.w	r2, r3, #1
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	611a      	str	r2, [r3, #16]
  }
}
 80060fe:	bf00      	nop
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40012c00 	.word	0x40012c00
 8006110:	40000400 	.word	0x40000400
 8006114:	40000800 	.word	0x40000800
 8006118:	40000c00 	.word	0x40000c00
 800611c:	40013400 	.word	0x40013400
 8006120:	40015000 	.word	0x40015000
 8006124:	40014000 	.word	0x40014000
 8006128:	40014400 	.word	0x40014400
 800612c:	40014800 	.word	0x40014800

08006130 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	f023 0201 	bic.w	r2, r3, #1
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800615e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0303 	bic.w	r3, r3, #3
 800616a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f023 0302 	bic.w	r3, r3, #2
 800617c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4313      	orrs	r3, r2
 8006186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a30      	ldr	r2, [pc, #192]	@ (800624c <TIM_OC1_SetConfig+0x11c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d013      	beq.n	80061b8 <TIM_OC1_SetConfig+0x88>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a2f      	ldr	r2, [pc, #188]	@ (8006250 <TIM_OC1_SetConfig+0x120>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d00f      	beq.n	80061b8 <TIM_OC1_SetConfig+0x88>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a2e      	ldr	r2, [pc, #184]	@ (8006254 <TIM_OC1_SetConfig+0x124>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d00b      	beq.n	80061b8 <TIM_OC1_SetConfig+0x88>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a2d      	ldr	r2, [pc, #180]	@ (8006258 <TIM_OC1_SetConfig+0x128>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d007      	beq.n	80061b8 <TIM_OC1_SetConfig+0x88>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a2c      	ldr	r2, [pc, #176]	@ (800625c <TIM_OC1_SetConfig+0x12c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d003      	beq.n	80061b8 <TIM_OC1_SetConfig+0x88>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a2b      	ldr	r2, [pc, #172]	@ (8006260 <TIM_OC1_SetConfig+0x130>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d10c      	bne.n	80061d2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	f023 0308 	bic.w	r3, r3, #8
 80061be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f023 0304 	bic.w	r3, r3, #4
 80061d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a1d      	ldr	r2, [pc, #116]	@ (800624c <TIM_OC1_SetConfig+0x11c>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d013      	beq.n	8006202 <TIM_OC1_SetConfig+0xd2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a1c      	ldr	r2, [pc, #112]	@ (8006250 <TIM_OC1_SetConfig+0x120>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00f      	beq.n	8006202 <TIM_OC1_SetConfig+0xd2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a1b      	ldr	r2, [pc, #108]	@ (8006254 <TIM_OC1_SetConfig+0x124>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d00b      	beq.n	8006202 <TIM_OC1_SetConfig+0xd2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a1a      	ldr	r2, [pc, #104]	@ (8006258 <TIM_OC1_SetConfig+0x128>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d007      	beq.n	8006202 <TIM_OC1_SetConfig+0xd2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a19      	ldr	r2, [pc, #100]	@ (800625c <TIM_OC1_SetConfig+0x12c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d003      	beq.n	8006202 <TIM_OC1_SetConfig+0xd2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a18      	ldr	r2, [pc, #96]	@ (8006260 <TIM_OC1_SetConfig+0x130>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d111      	bne.n	8006226 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	4313      	orrs	r3, r2
 800621a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	4313      	orrs	r3, r2
 8006224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	685a      	ldr	r2, [r3, #4]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	621a      	str	r2, [r3, #32]
}
 8006240:	bf00      	nop
 8006242:	371c      	adds	r7, #28
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	40012c00 	.word	0x40012c00
 8006250:	40013400 	.word	0x40013400
 8006254:	40014000 	.word	0x40014000
 8006258:	40014400 	.word	0x40014400
 800625c:	40014800 	.word	0x40014800
 8006260:	40015000 	.word	0x40015000

08006264 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006264:	b480      	push	{r7}
 8006266:	b087      	sub	sp, #28
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a1b      	ldr	r3, [r3, #32]
 8006278:	f023 0210 	bic.w	r2, r3, #16
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006292:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800629e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	021b      	lsls	r3, r3, #8
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f023 0320 	bic.w	r3, r3, #32
 80062b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	4313      	orrs	r3, r2
 80062be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a2c      	ldr	r2, [pc, #176]	@ (8006374 <TIM_OC2_SetConfig+0x110>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d007      	beq.n	80062d8 <TIM_OC2_SetConfig+0x74>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a2b      	ldr	r2, [pc, #172]	@ (8006378 <TIM_OC2_SetConfig+0x114>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d003      	beq.n	80062d8 <TIM_OC2_SetConfig+0x74>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a2a      	ldr	r2, [pc, #168]	@ (800637c <TIM_OC2_SetConfig+0x118>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d10d      	bne.n	80062f4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	011b      	lsls	r3, r3, #4
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a1f      	ldr	r2, [pc, #124]	@ (8006374 <TIM_OC2_SetConfig+0x110>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d013      	beq.n	8006324 <TIM_OC2_SetConfig+0xc0>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a1e      	ldr	r2, [pc, #120]	@ (8006378 <TIM_OC2_SetConfig+0x114>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d00f      	beq.n	8006324 <TIM_OC2_SetConfig+0xc0>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a1e      	ldr	r2, [pc, #120]	@ (8006380 <TIM_OC2_SetConfig+0x11c>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d00b      	beq.n	8006324 <TIM_OC2_SetConfig+0xc0>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a1d      	ldr	r2, [pc, #116]	@ (8006384 <TIM_OC2_SetConfig+0x120>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d007      	beq.n	8006324 <TIM_OC2_SetConfig+0xc0>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a1c      	ldr	r2, [pc, #112]	@ (8006388 <TIM_OC2_SetConfig+0x124>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d003      	beq.n	8006324 <TIM_OC2_SetConfig+0xc0>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a17      	ldr	r2, [pc, #92]	@ (800637c <TIM_OC2_SetConfig+0x118>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d113      	bne.n	800634c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800632a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006332:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	4313      	orrs	r3, r2
 800633e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	4313      	orrs	r3, r2
 800634a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	621a      	str	r2, [r3, #32]
}
 8006366:	bf00      	nop
 8006368:	371c      	adds	r7, #28
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	40012c00 	.word	0x40012c00
 8006378:	40013400 	.word	0x40013400
 800637c:	40015000 	.word	0x40015000
 8006380:	40014000 	.word	0x40014000
 8006384:	40014400 	.word	0x40014400
 8006388:	40014800 	.word	0x40014800

0800638c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f023 0303 	bic.w	r3, r3, #3
 80063c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	021b      	lsls	r3, r3, #8
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a2b      	ldr	r2, [pc, #172]	@ (8006498 <TIM_OC3_SetConfig+0x10c>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d007      	beq.n	80063fe <TIM_OC3_SetConfig+0x72>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a2a      	ldr	r2, [pc, #168]	@ (800649c <TIM_OC3_SetConfig+0x110>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d003      	beq.n	80063fe <TIM_OC3_SetConfig+0x72>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a29      	ldr	r2, [pc, #164]	@ (80064a0 <TIM_OC3_SetConfig+0x114>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d10d      	bne.n	800641a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006404:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	021b      	lsls	r3, r3, #8
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	4313      	orrs	r3, r2
 8006410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a1e      	ldr	r2, [pc, #120]	@ (8006498 <TIM_OC3_SetConfig+0x10c>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d013      	beq.n	800644a <TIM_OC3_SetConfig+0xbe>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a1d      	ldr	r2, [pc, #116]	@ (800649c <TIM_OC3_SetConfig+0x110>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d00f      	beq.n	800644a <TIM_OC3_SetConfig+0xbe>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a1d      	ldr	r2, [pc, #116]	@ (80064a4 <TIM_OC3_SetConfig+0x118>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d00b      	beq.n	800644a <TIM_OC3_SetConfig+0xbe>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a1c      	ldr	r2, [pc, #112]	@ (80064a8 <TIM_OC3_SetConfig+0x11c>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d007      	beq.n	800644a <TIM_OC3_SetConfig+0xbe>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a1b      	ldr	r2, [pc, #108]	@ (80064ac <TIM_OC3_SetConfig+0x120>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d003      	beq.n	800644a <TIM_OC3_SetConfig+0xbe>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a16      	ldr	r2, [pc, #88]	@ (80064a0 <TIM_OC3_SetConfig+0x114>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d113      	bne.n	8006472 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	011b      	lsls	r3, r3, #4
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	4313      	orrs	r3, r2
 8006464:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	011b      	lsls	r3, r3, #4
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	4313      	orrs	r3, r2
 8006470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	621a      	str	r2, [r3, #32]
}
 800648c:	bf00      	nop
 800648e:	371c      	adds	r7, #28
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	40012c00 	.word	0x40012c00
 800649c:	40013400 	.word	0x40013400
 80064a0:	40015000 	.word	0x40015000
 80064a4:	40014000 	.word	0x40014000
 80064a8:	40014400 	.word	0x40014400
 80064ac:	40014800 	.word	0x40014800

080064b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	021b      	lsls	r3, r3, #8
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	031b      	lsls	r3, r3, #12
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	4313      	orrs	r3, r2
 800650a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a2c      	ldr	r2, [pc, #176]	@ (80065c0 <TIM_OC4_SetConfig+0x110>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d007      	beq.n	8006524 <TIM_OC4_SetConfig+0x74>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a2b      	ldr	r2, [pc, #172]	@ (80065c4 <TIM_OC4_SetConfig+0x114>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d003      	beq.n	8006524 <TIM_OC4_SetConfig+0x74>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a2a      	ldr	r2, [pc, #168]	@ (80065c8 <TIM_OC4_SetConfig+0x118>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d10d      	bne.n	8006540 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800652a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	031b      	lsls	r3, r3, #12
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	4313      	orrs	r3, r2
 8006536:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800653e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a1f      	ldr	r2, [pc, #124]	@ (80065c0 <TIM_OC4_SetConfig+0x110>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d013      	beq.n	8006570 <TIM_OC4_SetConfig+0xc0>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a1e      	ldr	r2, [pc, #120]	@ (80065c4 <TIM_OC4_SetConfig+0x114>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d00f      	beq.n	8006570 <TIM_OC4_SetConfig+0xc0>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a1e      	ldr	r2, [pc, #120]	@ (80065cc <TIM_OC4_SetConfig+0x11c>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d00b      	beq.n	8006570 <TIM_OC4_SetConfig+0xc0>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a1d      	ldr	r2, [pc, #116]	@ (80065d0 <TIM_OC4_SetConfig+0x120>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d007      	beq.n	8006570 <TIM_OC4_SetConfig+0xc0>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a1c      	ldr	r2, [pc, #112]	@ (80065d4 <TIM_OC4_SetConfig+0x124>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d003      	beq.n	8006570 <TIM_OC4_SetConfig+0xc0>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a17      	ldr	r2, [pc, #92]	@ (80065c8 <TIM_OC4_SetConfig+0x118>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d113      	bne.n	8006598 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006576:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800657e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	019b      	lsls	r3, r3, #6
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	4313      	orrs	r3, r2
 800658a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	019b      	lsls	r3, r3, #6
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	4313      	orrs	r3, r2
 8006596:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	621a      	str	r2, [r3, #32]
}
 80065b2:	bf00      	nop
 80065b4:	371c      	adds	r7, #28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	40012c00 	.word	0x40012c00
 80065c4:	40013400 	.word	0x40013400
 80065c8:	40015000 	.word	0x40015000
 80065cc:	40014000 	.word	0x40014000
 80065d0:	40014400 	.word	0x40014400
 80065d4:	40014800 	.word	0x40014800

080065d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a1b      	ldr	r3, [r3, #32]
 80065ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800660a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	4313      	orrs	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800661c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	041b      	lsls	r3, r3, #16
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	4313      	orrs	r3, r2
 8006628:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a19      	ldr	r2, [pc, #100]	@ (8006694 <TIM_OC5_SetConfig+0xbc>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d013      	beq.n	800665a <TIM_OC5_SetConfig+0x82>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a18      	ldr	r2, [pc, #96]	@ (8006698 <TIM_OC5_SetConfig+0xc0>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d00f      	beq.n	800665a <TIM_OC5_SetConfig+0x82>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a17      	ldr	r2, [pc, #92]	@ (800669c <TIM_OC5_SetConfig+0xc4>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d00b      	beq.n	800665a <TIM_OC5_SetConfig+0x82>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a16      	ldr	r2, [pc, #88]	@ (80066a0 <TIM_OC5_SetConfig+0xc8>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d007      	beq.n	800665a <TIM_OC5_SetConfig+0x82>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a15      	ldr	r2, [pc, #84]	@ (80066a4 <TIM_OC5_SetConfig+0xcc>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d003      	beq.n	800665a <TIM_OC5_SetConfig+0x82>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a14      	ldr	r2, [pc, #80]	@ (80066a8 <TIM_OC5_SetConfig+0xd0>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d109      	bne.n	800666e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006660:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	021b      	lsls	r3, r3, #8
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	4313      	orrs	r3, r2
 800666c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	621a      	str	r2, [r3, #32]
}
 8006688:	bf00      	nop
 800668a:	371c      	adds	r7, #28
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	40012c00 	.word	0x40012c00
 8006698:	40013400 	.word	0x40013400
 800669c:	40014000 	.word	0x40014000
 80066a0:	40014400 	.word	0x40014400
 80066a4:	40014800 	.word	0x40014800
 80066a8:	40015000 	.word	0x40015000

080066ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b087      	sub	sp, #28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	021b      	lsls	r3, r3, #8
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80066f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	051b      	lsls	r3, r3, #20
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a1a      	ldr	r2, [pc, #104]	@ (800676c <TIM_OC6_SetConfig+0xc0>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d013      	beq.n	8006730 <TIM_OC6_SetConfig+0x84>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a19      	ldr	r2, [pc, #100]	@ (8006770 <TIM_OC6_SetConfig+0xc4>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d00f      	beq.n	8006730 <TIM_OC6_SetConfig+0x84>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a18      	ldr	r2, [pc, #96]	@ (8006774 <TIM_OC6_SetConfig+0xc8>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d00b      	beq.n	8006730 <TIM_OC6_SetConfig+0x84>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a17      	ldr	r2, [pc, #92]	@ (8006778 <TIM_OC6_SetConfig+0xcc>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d007      	beq.n	8006730 <TIM_OC6_SetConfig+0x84>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a16      	ldr	r2, [pc, #88]	@ (800677c <TIM_OC6_SetConfig+0xd0>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d003      	beq.n	8006730 <TIM_OC6_SetConfig+0x84>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a15      	ldr	r2, [pc, #84]	@ (8006780 <TIM_OC6_SetConfig+0xd4>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d109      	bne.n	8006744 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006736:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	029b      	lsls	r3, r3, #10
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	4313      	orrs	r3, r2
 8006742:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	621a      	str	r2, [r3, #32]
}
 800675e:	bf00      	nop
 8006760:	371c      	adds	r7, #28
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	40012c00 	.word	0x40012c00
 8006770:	40013400 	.word	0x40013400
 8006774:	40014000 	.word	0x40014000
 8006778:	40014400 	.word	0x40014400
 800677c:	40014800 	.word	0x40014800
 8006780:	40015000 	.word	0x40015000

08006784 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	f023 0201 	bic.w	r2, r3, #1
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	011b      	lsls	r3, r3, #4
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f023 030a 	bic.w	r3, r3, #10
 80067c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	621a      	str	r2, [r3, #32]
}
 80067d6:	bf00      	nop
 80067d8:	371c      	adds	r7, #28
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b087      	sub	sp, #28
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	60f8      	str	r0, [r7, #12]
 80067ea:	60b9      	str	r1, [r7, #8]
 80067ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	f023 0210 	bic.w	r2, r3, #16
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800680c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	031b      	lsls	r3, r3, #12
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	4313      	orrs	r3, r2
 8006816:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800681e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	011b      	lsls	r3, r3, #4
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	4313      	orrs	r3, r2
 8006828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	621a      	str	r2, [r3, #32]
}
 8006836:	bf00      	nop
 8006838:	371c      	adds	r7, #28
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006842:	b480      	push	{r7}
 8006844:	b085      	sub	sp, #20
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
 800684a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006858:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800685c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4313      	orrs	r3, r2
 8006864:	f043 0307 	orr.w	r3, r3, #7
 8006868:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	609a      	str	r2, [r3, #8]
}
 8006870:	bf00      	nop
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800687c:	b480      	push	{r7}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
 8006888:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006896:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	021a      	lsls	r2, r3, #8
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	431a      	orrs	r2, r3
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	609a      	str	r2, [r3, #8]
}
 80068b0:	bf00      	nop
 80068b2:	371c      	adds	r7, #28
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f003 031f 	and.w	r3, r3, #31
 80068ce:	2201      	movs	r2, #1
 80068d0:	fa02 f303 	lsl.w	r3, r2, r3
 80068d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6a1a      	ldr	r2, [r3, #32]
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	43db      	mvns	r3, r3
 80068de:	401a      	ands	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6a1a      	ldr	r2, [r3, #32]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	f003 031f 	and.w	r3, r3, #31
 80068ee:	6879      	ldr	r1, [r7, #4]
 80068f0:	fa01 f303 	lsl.w	r3, r1, r3
 80068f4:	431a      	orrs	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	621a      	str	r2, [r3, #32]
}
 80068fa:	bf00      	nop
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
	...

08006908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006918:	2b01      	cmp	r3, #1
 800691a:	d101      	bne.n	8006920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800691c:	2302      	movs	r3, #2
 800691e:	e074      	b.n	8006a0a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2202      	movs	r2, #2
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a34      	ldr	r2, [pc, #208]	@ (8006a18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d009      	beq.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a33      	ldr	r2, [pc, #204]	@ (8006a1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d004      	beq.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a31      	ldr	r2, [pc, #196]	@ (8006a20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d108      	bne.n	8006970 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006964:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	4313      	orrs	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800697a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	4313      	orrs	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a21      	ldr	r2, [pc, #132]	@ (8006a18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d022      	beq.n	80069de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069a0:	d01d      	beq.n	80069de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a1f      	ldr	r2, [pc, #124]	@ (8006a24 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d018      	beq.n	80069de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006a28 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d013      	beq.n	80069de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a1c      	ldr	r2, [pc, #112]	@ (8006a2c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d00e      	beq.n	80069de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a15      	ldr	r2, [pc, #84]	@ (8006a1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d009      	beq.n	80069de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a18      	ldr	r2, [pc, #96]	@ (8006a30 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d004      	beq.n	80069de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a11      	ldr	r2, [pc, #68]	@ (8006a20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d10c      	bne.n	80069f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	40012c00 	.word	0x40012c00
 8006a1c:	40013400 	.word	0x40013400
 8006a20:	40015000 	.word	0x40015000
 8006a24:	40000400 	.word	0x40000400
 8006a28:	40000800 	.word	0x40000800
 8006a2c:	40000c00 	.word	0x40000c00
 8006a30:	40014000 	.word	0x40014000

08006a34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d101      	bne.n	8006a50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	e078      	b.n	8006b42 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	041b      	lsls	r3, r3, #16
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a1c      	ldr	r2, [pc, #112]	@ (8006b50 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d009      	beq.n	8006af6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8006b54 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d004      	beq.n	8006af6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a19      	ldr	r2, [pc, #100]	@ (8006b58 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d11c      	bne.n	8006b30 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b00:	051b      	lsls	r3, r3, #20
 8006b02:	4313      	orrs	r3, r2
 8006b04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	40012c00 	.word	0x40012c00
 8006b54:	40013400 	.word	0x40013400
 8006b58:	40015000 	.word	0x40015000

08006b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e042      	b.n	8006c80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d106      	bne.n	8006c12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7fa fb47 	bl	80012a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2224      	movs	r2, #36	@ 0x24
 8006c16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f022 0201 	bic.w	r2, r2, #1
 8006c28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 ffbe 	bl	8007bb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fcbf 	bl	80075bc <UART_SetConfig>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d101      	bne.n	8006c48 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e01b      	b.n	8006c80 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	689a      	ldr	r2, [r3, #8]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f042 0201 	orr.w	r2, r2, #1
 8006c76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f001 f83d 	bl	8007cf8 <UART_CheckIdleState>
 8006c7e:	4603      	mov	r3, r0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b08a      	sub	sp, #40	@ 0x28
 8006c8c:	af02      	add	r7, sp, #8
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	603b      	str	r3, [r7, #0]
 8006c94:	4613      	mov	r3, r2
 8006c96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c9e:	2b20      	cmp	r3, #32
 8006ca0:	d17b      	bne.n	8006d9a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d002      	beq.n	8006cae <HAL_UART_Transmit+0x26>
 8006ca8:	88fb      	ldrh	r3, [r7, #6]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e074      	b.n	8006d9c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2221      	movs	r2, #33	@ 0x21
 8006cbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cc2:	f7fa fd7f 	bl	80017c4 <HAL_GetTick>
 8006cc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	88fa      	ldrh	r2, [r7, #6]
 8006ccc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	88fa      	ldrh	r2, [r7, #6]
 8006cd4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ce0:	d108      	bne.n	8006cf4 <HAL_UART_Transmit+0x6c>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d104      	bne.n	8006cf4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006cea:	2300      	movs	r3, #0
 8006cec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	61bb      	str	r3, [r7, #24]
 8006cf2:	e003      	b.n	8006cfc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006cfc:	e030      	b.n	8006d60 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2200      	movs	r2, #0
 8006d06:	2180      	movs	r1, #128	@ 0x80
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f001 f89f 	bl	8007e4c <UART_WaitOnFlagUntilTimeout>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d005      	beq.n	8006d20 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2220      	movs	r2, #32
 8006d18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e03d      	b.n	8006d9c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10b      	bne.n	8006d3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d34:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	3302      	adds	r3, #2
 8006d3a:	61bb      	str	r3, [r7, #24]
 8006d3c:	e007      	b.n	8006d4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	781a      	ldrb	r2, [r3, #0]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	3b01      	subs	r3, #1
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1c8      	bne.n	8006cfe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	9300      	str	r3, [sp, #0]
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	2200      	movs	r2, #0
 8006d74:	2140      	movs	r1, #64	@ 0x40
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f001 f868 	bl	8007e4c <UART_WaitOnFlagUntilTimeout>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d005      	beq.n	8006d8e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2220      	movs	r2, #32
 8006d86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e006      	b.n	8006d9c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2220      	movs	r2, #32
 8006d92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	e000      	b.n	8006d9c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006d9a:	2302      	movs	r3, #2
  }
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3720      	adds	r7, #32
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b08a      	sub	sp, #40	@ 0x28
 8006da8:	af02      	add	r7, sp, #8
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	603b      	str	r3, [r7, #0]
 8006db0:	4613      	mov	r3, r2
 8006db2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006dba:	2b20      	cmp	r3, #32
 8006dbc:	f040 80b5 	bne.w	8006f2a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d002      	beq.n	8006dcc <HAL_UART_Receive+0x28>
 8006dc6:	88fb      	ldrh	r3, [r7, #6]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d101      	bne.n	8006dd0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e0ad      	b.n	8006f2c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2222      	movs	r2, #34	@ 0x22
 8006ddc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006de6:	f7fa fced 	bl	80017c4 <HAL_GetTick>
 8006dea:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	88fa      	ldrh	r2, [r7, #6]
 8006df0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	88fa      	ldrh	r2, [r7, #6]
 8006df8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e04:	d10e      	bne.n	8006e24 <HAL_UART_Receive+0x80>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d105      	bne.n	8006e1a <HAL_UART_Receive+0x76>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006e14:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e18:	e02d      	b.n	8006e76 <HAL_UART_Receive+0xd2>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	22ff      	movs	r2, #255	@ 0xff
 8006e1e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e22:	e028      	b.n	8006e76 <HAL_UART_Receive+0xd2>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10d      	bne.n	8006e48 <HAL_UART_Receive+0xa4>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d104      	bne.n	8006e3e <HAL_UART_Receive+0x9a>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	22ff      	movs	r2, #255	@ 0xff
 8006e38:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e3c:	e01b      	b.n	8006e76 <HAL_UART_Receive+0xd2>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	227f      	movs	r2, #127	@ 0x7f
 8006e42:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e46:	e016      	b.n	8006e76 <HAL_UART_Receive+0xd2>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e50:	d10d      	bne.n	8006e6e <HAL_UART_Receive+0xca>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d104      	bne.n	8006e64 <HAL_UART_Receive+0xc0>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	227f      	movs	r2, #127	@ 0x7f
 8006e5e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e62:	e008      	b.n	8006e76 <HAL_UART_Receive+0xd2>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	223f      	movs	r2, #63	@ 0x3f
 8006e68:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e6c:	e003      	b.n	8006e76 <HAL_UART_Receive+0xd2>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006e7c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e86:	d108      	bne.n	8006e9a <HAL_UART_Receive+0xf6>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d104      	bne.n	8006e9a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006e90:	2300      	movs	r3, #0
 8006e92:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	61bb      	str	r3, [r7, #24]
 8006e98:	e003      	b.n	8006ea2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006ea2:	e036      	b.n	8006f12 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	2120      	movs	r1, #32
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f000 ffcc 	bl	8007e4c <UART_WaitOnFlagUntilTimeout>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d005      	beq.n	8006ec6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2220      	movs	r2, #32
 8006ebe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e032      	b.n	8006f2c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10c      	bne.n	8006ee6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	8a7b      	ldrh	r3, [r7, #18]
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	3302      	adds	r3, #2
 8006ee2:	61bb      	str	r3, [r7, #24]
 8006ee4:	e00c      	b.n	8006f00 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	8a7b      	ldrh	r3, [r7, #18]
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	3301      	adds	r3, #1
 8006efe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1c2      	bne.n	8006ea4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2220      	movs	r2, #32
 8006f22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	e000      	b.n	8006f2c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8006f2a:	2302      	movs	r3, #2
  }
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3720      	adds	r7, #32
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b0ba      	sub	sp, #232	@ 0xe8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006f5e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006f62:	4013      	ands	r3, r2
 8006f64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006f68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d11b      	bne.n	8006fa8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f74:	f003 0320 	and.w	r3, r3, #32
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d015      	beq.n	8006fa8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f80:	f003 0320 	and.w	r3, r3, #32
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d105      	bne.n	8006f94 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006f88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d009      	beq.n	8006fa8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 82e3 	beq.w	8007564 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	4798      	blx	r3
      }
      return;
 8006fa6:	e2dd      	b.n	8007564 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006fa8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f000 8123 	beq.w	80071f8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006fb2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006fb6:	4b8d      	ldr	r3, [pc, #564]	@ (80071ec <HAL_UART_IRQHandler+0x2b8>)
 8006fb8:	4013      	ands	r3, r2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d106      	bne.n	8006fcc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006fbe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006fc2:	4b8b      	ldr	r3, [pc, #556]	@ (80071f0 <HAL_UART_IRQHandler+0x2bc>)
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f000 8116 	beq.w	80071f8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d011      	beq.n	8006ffc <HAL_UART_IRQHandler+0xc8>
 8006fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00b      	beq.n	8006ffc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ff2:	f043 0201 	orr.w	r2, r3, #1
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007000:	f003 0302 	and.w	r3, r3, #2
 8007004:	2b00      	cmp	r3, #0
 8007006:	d011      	beq.n	800702c <HAL_UART_IRQHandler+0xf8>
 8007008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00b      	beq.n	800702c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2202      	movs	r2, #2
 800701a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007022:	f043 0204 	orr.w	r2, r3, #4
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800702c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007030:	f003 0304 	and.w	r3, r3, #4
 8007034:	2b00      	cmp	r3, #0
 8007036:	d011      	beq.n	800705c <HAL_UART_IRQHandler+0x128>
 8007038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00b      	beq.n	800705c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2204      	movs	r2, #4
 800704a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007052:	f043 0202 	orr.w	r2, r3, #2
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800705c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007060:	f003 0308 	and.w	r3, r3, #8
 8007064:	2b00      	cmp	r3, #0
 8007066:	d017      	beq.n	8007098 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800706c:	f003 0320 	and.w	r3, r3, #32
 8007070:	2b00      	cmp	r3, #0
 8007072:	d105      	bne.n	8007080 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007074:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007078:	4b5c      	ldr	r3, [pc, #368]	@ (80071ec <HAL_UART_IRQHandler+0x2b8>)
 800707a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00b      	beq.n	8007098 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2208      	movs	r2, #8
 8007086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800708e:	f043 0208 	orr.w	r2, r3, #8
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800709c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d012      	beq.n	80070ca <HAL_UART_IRQHandler+0x196>
 80070a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00c      	beq.n	80070ca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070c0:	f043 0220 	orr.w	r2, r3, #32
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 8249 	beq.w	8007568 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80070d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070da:	f003 0320 	and.w	r3, r3, #32
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d013      	beq.n	800710a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80070e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070e6:	f003 0320 	and.w	r3, r3, #32
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d105      	bne.n	80070fa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80070ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d007      	beq.n	800710a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d003      	beq.n	800710a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007110:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800711e:	2b40      	cmp	r3, #64	@ 0x40
 8007120:	d005      	beq.n	800712e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007122:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007126:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800712a:	2b00      	cmp	r3, #0
 800712c:	d054      	beq.n	80071d8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fef9 	bl	8007f26 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800713e:	2b40      	cmp	r3, #64	@ 0x40
 8007140:	d146      	bne.n	80071d0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	3308      	adds	r3, #8
 8007148:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007150:	e853 3f00 	ldrex	r3, [r3]
 8007154:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007158:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800715c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007160:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	3308      	adds	r3, #8
 800716a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800716e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007172:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007176:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800717a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800717e:	e841 2300 	strex	r3, r2, [r1]
 8007182:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007186:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1d9      	bne.n	8007142 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007194:	2b00      	cmp	r3, #0
 8007196:	d017      	beq.n	80071c8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800719e:	4a15      	ldr	r2, [pc, #84]	@ (80071f4 <HAL_UART_IRQHandler+0x2c0>)
 80071a0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7fc fbc5 	bl	8003938 <HAL_DMA_Abort_IT>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d019      	beq.n	80071e8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80071c2:	4610      	mov	r0, r2
 80071c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c6:	e00f      	b.n	80071e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f9e1 	bl	8007590 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ce:	e00b      	b.n	80071e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f9dd 	bl	8007590 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071d6:	e007      	b.n	80071e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f9d9 	bl	8007590 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80071e6:	e1bf      	b.n	8007568 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071e8:	bf00      	nop
    return;
 80071ea:	e1bd      	b.n	8007568 <HAL_UART_IRQHandler+0x634>
 80071ec:	10000001 	.word	0x10000001
 80071f0:	04000120 	.word	0x04000120
 80071f4:	08007ff3 	.word	0x08007ff3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	f040 8153 	bne.w	80074a8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007206:	f003 0310 	and.w	r3, r3, #16
 800720a:	2b00      	cmp	r3, #0
 800720c:	f000 814c 	beq.w	80074a8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007214:	f003 0310 	and.w	r3, r3, #16
 8007218:	2b00      	cmp	r3, #0
 800721a:	f000 8145 	beq.w	80074a8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2210      	movs	r2, #16
 8007224:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007230:	2b40      	cmp	r3, #64	@ 0x40
 8007232:	f040 80bb 	bne.w	80073ac <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007244:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 818f 	beq.w	800756c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007254:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007258:	429a      	cmp	r2, r3
 800725a:	f080 8187 	bcs.w	800756c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007264:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0320 	and.w	r3, r3, #32
 8007276:	2b00      	cmp	r3, #0
 8007278:	f040 8087 	bne.w	800738a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007284:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007288:	e853 3f00 	ldrex	r3, [r3]
 800728c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007290:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007294:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007298:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	461a      	mov	r2, r3
 80072a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80072a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80072aa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80072b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80072b6:	e841 2300 	strex	r3, r2, [r1]
 80072ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80072be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1da      	bne.n	800727c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	3308      	adds	r3, #8
 80072cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072d0:	e853 3f00 	ldrex	r3, [r3]
 80072d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80072d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072d8:	f023 0301 	bic.w	r3, r3, #1
 80072dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	3308      	adds	r3, #8
 80072e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80072ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80072ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80072f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80072f6:	e841 2300 	strex	r3, r2, [r1]
 80072fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80072fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1e1      	bne.n	80072c6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	3308      	adds	r3, #8
 8007308:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800730c:	e853 3f00 	ldrex	r3, [r3]
 8007310:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007312:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007314:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007318:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	3308      	adds	r3, #8
 8007322:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007326:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007328:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800732c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800732e:	e841 2300 	strex	r3, r2, [r1]
 8007332:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007334:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1e3      	bne.n	8007302 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2220      	movs	r2, #32
 800733e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007350:	e853 3f00 	ldrex	r3, [r3]
 8007354:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007356:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007358:	f023 0310 	bic.w	r3, r3, #16
 800735c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	461a      	mov	r2, r3
 8007366:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800736a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800736c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007370:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007372:	e841 2300 	strex	r3, r2, [r1]
 8007376:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007378:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1e4      	bne.n	8007348 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007384:	4618      	mov	r0, r3
 8007386:	f7fc fa7e 	bl	8003886 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2202      	movs	r2, #2
 800738e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800739c:	b29b      	uxth	r3, r3
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f8fd 	bl	80075a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80073aa:	e0df      	b.n	800756c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 80d1 	beq.w	8007570 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80073ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f000 80cc 	beq.w	8007570 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073e0:	e853 3f00 	ldrex	r3, [r3]
 80073e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80073e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	461a      	mov	r2, r3
 80073f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80073fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80073fc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007400:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007402:	e841 2300 	strex	r3, r2, [r1]
 8007406:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1e4      	bne.n	80073d8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3308      	adds	r3, #8
 8007414:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	623b      	str	r3, [r7, #32]
   return(result);
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007424:	f023 0301 	bic.w	r3, r3, #1
 8007428:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3308      	adds	r3, #8
 8007432:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007436:	633a      	str	r2, [r7, #48]	@ 0x30
 8007438:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800743c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800743e:	e841 2300 	strex	r3, r2, [r1]
 8007442:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1e1      	bne.n	800740e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2220      	movs	r2, #32
 800744e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	e853 3f00 	ldrex	r3, [r3]
 800746a:	60fb      	str	r3, [r7, #12]
   return(result);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f023 0310 	bic.w	r3, r3, #16
 8007472:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	461a      	mov	r2, r3
 800747c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007480:	61fb      	str	r3, [r7, #28]
 8007482:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007484:	69b9      	ldr	r1, [r7, #24]
 8007486:	69fa      	ldr	r2, [r7, #28]
 8007488:	e841 2300 	strex	r3, r2, [r1]
 800748c:	617b      	str	r3, [r7, #20]
   return(result);
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1e4      	bne.n	800745e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2202      	movs	r2, #2
 8007498:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800749a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800749e:	4619      	mov	r1, r3
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f87f 	bl	80075a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074a6:	e063      	b.n	8007570 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80074a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00e      	beq.n	80074d2 <HAL_UART_IRQHandler+0x59e>
 80074b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d008      	beq.n	80074d2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80074c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fdd2 	bl	8008074 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80074d0:	e051      	b.n	8007576 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80074d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d014      	beq.n	8007508 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80074de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d105      	bne.n	80074f6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80074ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d008      	beq.n	8007508 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d03a      	beq.n	8007574 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	4798      	blx	r3
    }
    return;
 8007506:	e035      	b.n	8007574 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800750c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007510:	2b00      	cmp	r3, #0
 8007512:	d009      	beq.n	8007528 <HAL_UART_IRQHandler+0x5f4>
 8007514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800751c:	2b00      	cmp	r3, #0
 800751e:	d003      	beq.n	8007528 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fd7c 	bl	800801e <UART_EndTransmit_IT>
    return;
 8007526:	e026      	b.n	8007576 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800752c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d009      	beq.n	8007548 <HAL_UART_IRQHandler+0x614>
 8007534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007538:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d003      	beq.n	8007548 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fdab 	bl	800809c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007546:	e016      	b.n	8007576 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800754c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d010      	beq.n	8007576 <HAL_UART_IRQHandler+0x642>
 8007554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007558:	2b00      	cmp	r3, #0
 800755a:	da0c      	bge.n	8007576 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fd93 	bl	8008088 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007562:	e008      	b.n	8007576 <HAL_UART_IRQHandler+0x642>
      return;
 8007564:	bf00      	nop
 8007566:	e006      	b.n	8007576 <HAL_UART_IRQHandler+0x642>
    return;
 8007568:	bf00      	nop
 800756a:	e004      	b.n	8007576 <HAL_UART_IRQHandler+0x642>
      return;
 800756c:	bf00      	nop
 800756e:	e002      	b.n	8007576 <HAL_UART_IRQHandler+0x642>
      return;
 8007570:	bf00      	nop
 8007572:	e000      	b.n	8007576 <HAL_UART_IRQHandler+0x642>
    return;
 8007574:	bf00      	nop
  }
}
 8007576:	37e8      	adds	r7, #232	@ 0xe8
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	460b      	mov	r3, r1
 80075ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075c0:	b08c      	sub	sp, #48	@ 0x30
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	689a      	ldr	r2, [r3, #8]
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	431a      	orrs	r2, r3
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	431a      	orrs	r2, r3
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	69db      	ldr	r3, [r3, #28]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	4baa      	ldr	r3, [pc, #680]	@ (8007894 <UART_SetConfig+0x2d8>)
 80075ec:	4013      	ands	r3, r2
 80075ee:	697a      	ldr	r2, [r7, #20]
 80075f0:	6812      	ldr	r2, [r2, #0]
 80075f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075f4:	430b      	orrs	r3, r1
 80075f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	68da      	ldr	r2, [r3, #12]
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	430a      	orrs	r2, r1
 800760c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a9f      	ldr	r2, [pc, #636]	@ (8007898 <UART_SetConfig+0x2dc>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d004      	beq.n	8007628 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007624:	4313      	orrs	r3, r2
 8007626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007632:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	6812      	ldr	r2, [r2, #0]
 800763a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800763c:	430b      	orrs	r3, r1
 800763e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007646:	f023 010f 	bic.w	r1, r3, #15
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	430a      	orrs	r2, r1
 8007654:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a90      	ldr	r2, [pc, #576]	@ (800789c <UART_SetConfig+0x2e0>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d125      	bne.n	80076ac <UART_SetConfig+0xf0>
 8007660:	4b8f      	ldr	r3, [pc, #572]	@ (80078a0 <UART_SetConfig+0x2e4>)
 8007662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007666:	f003 0303 	and.w	r3, r3, #3
 800766a:	2b03      	cmp	r3, #3
 800766c:	d81a      	bhi.n	80076a4 <UART_SetConfig+0xe8>
 800766e:	a201      	add	r2, pc, #4	@ (adr r2, 8007674 <UART_SetConfig+0xb8>)
 8007670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007674:	08007685 	.word	0x08007685
 8007678:	08007695 	.word	0x08007695
 800767c:	0800768d 	.word	0x0800768d
 8007680:	0800769d 	.word	0x0800769d
 8007684:	2301      	movs	r3, #1
 8007686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800768a:	e116      	b.n	80078ba <UART_SetConfig+0x2fe>
 800768c:	2302      	movs	r3, #2
 800768e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007692:	e112      	b.n	80078ba <UART_SetConfig+0x2fe>
 8007694:	2304      	movs	r3, #4
 8007696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800769a:	e10e      	b.n	80078ba <UART_SetConfig+0x2fe>
 800769c:	2308      	movs	r3, #8
 800769e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076a2:	e10a      	b.n	80078ba <UART_SetConfig+0x2fe>
 80076a4:	2310      	movs	r3, #16
 80076a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076aa:	e106      	b.n	80078ba <UART_SetConfig+0x2fe>
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a7c      	ldr	r2, [pc, #496]	@ (80078a4 <UART_SetConfig+0x2e8>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d138      	bne.n	8007728 <UART_SetConfig+0x16c>
 80076b6:	4b7a      	ldr	r3, [pc, #488]	@ (80078a0 <UART_SetConfig+0x2e4>)
 80076b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076bc:	f003 030c 	and.w	r3, r3, #12
 80076c0:	2b0c      	cmp	r3, #12
 80076c2:	d82d      	bhi.n	8007720 <UART_SetConfig+0x164>
 80076c4:	a201      	add	r2, pc, #4	@ (adr r2, 80076cc <UART_SetConfig+0x110>)
 80076c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ca:	bf00      	nop
 80076cc:	08007701 	.word	0x08007701
 80076d0:	08007721 	.word	0x08007721
 80076d4:	08007721 	.word	0x08007721
 80076d8:	08007721 	.word	0x08007721
 80076dc:	08007711 	.word	0x08007711
 80076e0:	08007721 	.word	0x08007721
 80076e4:	08007721 	.word	0x08007721
 80076e8:	08007721 	.word	0x08007721
 80076ec:	08007709 	.word	0x08007709
 80076f0:	08007721 	.word	0x08007721
 80076f4:	08007721 	.word	0x08007721
 80076f8:	08007721 	.word	0x08007721
 80076fc:	08007719 	.word	0x08007719
 8007700:	2300      	movs	r3, #0
 8007702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007706:	e0d8      	b.n	80078ba <UART_SetConfig+0x2fe>
 8007708:	2302      	movs	r3, #2
 800770a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800770e:	e0d4      	b.n	80078ba <UART_SetConfig+0x2fe>
 8007710:	2304      	movs	r3, #4
 8007712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007716:	e0d0      	b.n	80078ba <UART_SetConfig+0x2fe>
 8007718:	2308      	movs	r3, #8
 800771a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800771e:	e0cc      	b.n	80078ba <UART_SetConfig+0x2fe>
 8007720:	2310      	movs	r3, #16
 8007722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007726:	e0c8      	b.n	80078ba <UART_SetConfig+0x2fe>
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a5e      	ldr	r2, [pc, #376]	@ (80078a8 <UART_SetConfig+0x2ec>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d125      	bne.n	800777e <UART_SetConfig+0x1c2>
 8007732:	4b5b      	ldr	r3, [pc, #364]	@ (80078a0 <UART_SetConfig+0x2e4>)
 8007734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007738:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800773c:	2b30      	cmp	r3, #48	@ 0x30
 800773e:	d016      	beq.n	800776e <UART_SetConfig+0x1b2>
 8007740:	2b30      	cmp	r3, #48	@ 0x30
 8007742:	d818      	bhi.n	8007776 <UART_SetConfig+0x1ba>
 8007744:	2b20      	cmp	r3, #32
 8007746:	d00a      	beq.n	800775e <UART_SetConfig+0x1a2>
 8007748:	2b20      	cmp	r3, #32
 800774a:	d814      	bhi.n	8007776 <UART_SetConfig+0x1ba>
 800774c:	2b00      	cmp	r3, #0
 800774e:	d002      	beq.n	8007756 <UART_SetConfig+0x19a>
 8007750:	2b10      	cmp	r3, #16
 8007752:	d008      	beq.n	8007766 <UART_SetConfig+0x1aa>
 8007754:	e00f      	b.n	8007776 <UART_SetConfig+0x1ba>
 8007756:	2300      	movs	r3, #0
 8007758:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800775c:	e0ad      	b.n	80078ba <UART_SetConfig+0x2fe>
 800775e:	2302      	movs	r3, #2
 8007760:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007764:	e0a9      	b.n	80078ba <UART_SetConfig+0x2fe>
 8007766:	2304      	movs	r3, #4
 8007768:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800776c:	e0a5      	b.n	80078ba <UART_SetConfig+0x2fe>
 800776e:	2308      	movs	r3, #8
 8007770:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007774:	e0a1      	b.n	80078ba <UART_SetConfig+0x2fe>
 8007776:	2310      	movs	r3, #16
 8007778:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800777c:	e09d      	b.n	80078ba <UART_SetConfig+0x2fe>
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a4a      	ldr	r2, [pc, #296]	@ (80078ac <UART_SetConfig+0x2f0>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d125      	bne.n	80077d4 <UART_SetConfig+0x218>
 8007788:	4b45      	ldr	r3, [pc, #276]	@ (80078a0 <UART_SetConfig+0x2e4>)
 800778a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800778e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007792:	2bc0      	cmp	r3, #192	@ 0xc0
 8007794:	d016      	beq.n	80077c4 <UART_SetConfig+0x208>
 8007796:	2bc0      	cmp	r3, #192	@ 0xc0
 8007798:	d818      	bhi.n	80077cc <UART_SetConfig+0x210>
 800779a:	2b80      	cmp	r3, #128	@ 0x80
 800779c:	d00a      	beq.n	80077b4 <UART_SetConfig+0x1f8>
 800779e:	2b80      	cmp	r3, #128	@ 0x80
 80077a0:	d814      	bhi.n	80077cc <UART_SetConfig+0x210>
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d002      	beq.n	80077ac <UART_SetConfig+0x1f0>
 80077a6:	2b40      	cmp	r3, #64	@ 0x40
 80077a8:	d008      	beq.n	80077bc <UART_SetConfig+0x200>
 80077aa:	e00f      	b.n	80077cc <UART_SetConfig+0x210>
 80077ac:	2300      	movs	r3, #0
 80077ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077b2:	e082      	b.n	80078ba <UART_SetConfig+0x2fe>
 80077b4:	2302      	movs	r3, #2
 80077b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ba:	e07e      	b.n	80078ba <UART_SetConfig+0x2fe>
 80077bc:	2304      	movs	r3, #4
 80077be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077c2:	e07a      	b.n	80078ba <UART_SetConfig+0x2fe>
 80077c4:	2308      	movs	r3, #8
 80077c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ca:	e076      	b.n	80078ba <UART_SetConfig+0x2fe>
 80077cc:	2310      	movs	r3, #16
 80077ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077d2:	e072      	b.n	80078ba <UART_SetConfig+0x2fe>
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a35      	ldr	r2, [pc, #212]	@ (80078b0 <UART_SetConfig+0x2f4>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d12a      	bne.n	8007834 <UART_SetConfig+0x278>
 80077de:	4b30      	ldr	r3, [pc, #192]	@ (80078a0 <UART_SetConfig+0x2e4>)
 80077e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077ec:	d01a      	beq.n	8007824 <UART_SetConfig+0x268>
 80077ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077f2:	d81b      	bhi.n	800782c <UART_SetConfig+0x270>
 80077f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077f8:	d00c      	beq.n	8007814 <UART_SetConfig+0x258>
 80077fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077fe:	d815      	bhi.n	800782c <UART_SetConfig+0x270>
 8007800:	2b00      	cmp	r3, #0
 8007802:	d003      	beq.n	800780c <UART_SetConfig+0x250>
 8007804:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007808:	d008      	beq.n	800781c <UART_SetConfig+0x260>
 800780a:	e00f      	b.n	800782c <UART_SetConfig+0x270>
 800780c:	2300      	movs	r3, #0
 800780e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007812:	e052      	b.n	80078ba <UART_SetConfig+0x2fe>
 8007814:	2302      	movs	r3, #2
 8007816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800781a:	e04e      	b.n	80078ba <UART_SetConfig+0x2fe>
 800781c:	2304      	movs	r3, #4
 800781e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007822:	e04a      	b.n	80078ba <UART_SetConfig+0x2fe>
 8007824:	2308      	movs	r3, #8
 8007826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800782a:	e046      	b.n	80078ba <UART_SetConfig+0x2fe>
 800782c:	2310      	movs	r3, #16
 800782e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007832:	e042      	b.n	80078ba <UART_SetConfig+0x2fe>
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a17      	ldr	r2, [pc, #92]	@ (8007898 <UART_SetConfig+0x2dc>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d13a      	bne.n	80078b4 <UART_SetConfig+0x2f8>
 800783e:	4b18      	ldr	r3, [pc, #96]	@ (80078a0 <UART_SetConfig+0x2e4>)
 8007840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007844:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007848:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800784c:	d01a      	beq.n	8007884 <UART_SetConfig+0x2c8>
 800784e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007852:	d81b      	bhi.n	800788c <UART_SetConfig+0x2d0>
 8007854:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007858:	d00c      	beq.n	8007874 <UART_SetConfig+0x2b8>
 800785a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800785e:	d815      	bhi.n	800788c <UART_SetConfig+0x2d0>
 8007860:	2b00      	cmp	r3, #0
 8007862:	d003      	beq.n	800786c <UART_SetConfig+0x2b0>
 8007864:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007868:	d008      	beq.n	800787c <UART_SetConfig+0x2c0>
 800786a:	e00f      	b.n	800788c <UART_SetConfig+0x2d0>
 800786c:	2300      	movs	r3, #0
 800786e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007872:	e022      	b.n	80078ba <UART_SetConfig+0x2fe>
 8007874:	2302      	movs	r3, #2
 8007876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800787a:	e01e      	b.n	80078ba <UART_SetConfig+0x2fe>
 800787c:	2304      	movs	r3, #4
 800787e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007882:	e01a      	b.n	80078ba <UART_SetConfig+0x2fe>
 8007884:	2308      	movs	r3, #8
 8007886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800788a:	e016      	b.n	80078ba <UART_SetConfig+0x2fe>
 800788c:	2310      	movs	r3, #16
 800788e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007892:	e012      	b.n	80078ba <UART_SetConfig+0x2fe>
 8007894:	cfff69f3 	.word	0xcfff69f3
 8007898:	40008000 	.word	0x40008000
 800789c:	40013800 	.word	0x40013800
 80078a0:	40021000 	.word	0x40021000
 80078a4:	40004400 	.word	0x40004400
 80078a8:	40004800 	.word	0x40004800
 80078ac:	40004c00 	.word	0x40004c00
 80078b0:	40005000 	.word	0x40005000
 80078b4:	2310      	movs	r3, #16
 80078b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4aae      	ldr	r2, [pc, #696]	@ (8007b78 <UART_SetConfig+0x5bc>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	f040 8097 	bne.w	80079f4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80078ca:	2b08      	cmp	r3, #8
 80078cc:	d823      	bhi.n	8007916 <UART_SetConfig+0x35a>
 80078ce:	a201      	add	r2, pc, #4	@ (adr r2, 80078d4 <UART_SetConfig+0x318>)
 80078d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d4:	080078f9 	.word	0x080078f9
 80078d8:	08007917 	.word	0x08007917
 80078dc:	08007901 	.word	0x08007901
 80078e0:	08007917 	.word	0x08007917
 80078e4:	08007907 	.word	0x08007907
 80078e8:	08007917 	.word	0x08007917
 80078ec:	08007917 	.word	0x08007917
 80078f0:	08007917 	.word	0x08007917
 80078f4:	0800790f 	.word	0x0800790f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078f8:	f7fd f91c 	bl	8004b34 <HAL_RCC_GetPCLK1Freq>
 80078fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80078fe:	e010      	b.n	8007922 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007900:	4b9e      	ldr	r3, [pc, #632]	@ (8007b7c <UART_SetConfig+0x5c0>)
 8007902:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007904:	e00d      	b.n	8007922 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007906:	f7fd f8a7 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 800790a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800790c:	e009      	b.n	8007922 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800790e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007912:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007914:	e005      	b.n	8007922 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007916:	2300      	movs	r3, #0
 8007918:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007920:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 8130 	beq.w	8007b8a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800792e:	4a94      	ldr	r2, [pc, #592]	@ (8007b80 <UART_SetConfig+0x5c4>)
 8007930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007934:	461a      	mov	r2, r3
 8007936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007938:	fbb3 f3f2 	udiv	r3, r3, r2
 800793c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	4613      	mov	r3, r2
 8007944:	005b      	lsls	r3, r3, #1
 8007946:	4413      	add	r3, r2
 8007948:	69ba      	ldr	r2, [r7, #24]
 800794a:	429a      	cmp	r2, r3
 800794c:	d305      	bcc.n	800795a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007954:	69ba      	ldr	r2, [r7, #24]
 8007956:	429a      	cmp	r2, r3
 8007958:	d903      	bls.n	8007962 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007960:	e113      	b.n	8007b8a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007964:	2200      	movs	r2, #0
 8007966:	60bb      	str	r3, [r7, #8]
 8007968:	60fa      	str	r2, [r7, #12]
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800796e:	4a84      	ldr	r2, [pc, #528]	@ (8007b80 <UART_SetConfig+0x5c4>)
 8007970:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007974:	b29b      	uxth	r3, r3
 8007976:	2200      	movs	r2, #0
 8007978:	603b      	str	r3, [r7, #0]
 800797a:	607a      	str	r2, [r7, #4]
 800797c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007980:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007984:	f7f8 fc48 	bl	8000218 <__aeabi_uldivmod>
 8007988:	4602      	mov	r2, r0
 800798a:	460b      	mov	r3, r1
 800798c:	4610      	mov	r0, r2
 800798e:	4619      	mov	r1, r3
 8007990:	f04f 0200 	mov.w	r2, #0
 8007994:	f04f 0300 	mov.w	r3, #0
 8007998:	020b      	lsls	r3, r1, #8
 800799a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800799e:	0202      	lsls	r2, r0, #8
 80079a0:	6979      	ldr	r1, [r7, #20]
 80079a2:	6849      	ldr	r1, [r1, #4]
 80079a4:	0849      	lsrs	r1, r1, #1
 80079a6:	2000      	movs	r0, #0
 80079a8:	460c      	mov	r4, r1
 80079aa:	4605      	mov	r5, r0
 80079ac:	eb12 0804 	adds.w	r8, r2, r4
 80079b0:	eb43 0905 	adc.w	r9, r3, r5
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	469a      	mov	sl, r3
 80079bc:	4693      	mov	fp, r2
 80079be:	4652      	mov	r2, sl
 80079c0:	465b      	mov	r3, fp
 80079c2:	4640      	mov	r0, r8
 80079c4:	4649      	mov	r1, r9
 80079c6:	f7f8 fc27 	bl	8000218 <__aeabi_uldivmod>
 80079ca:	4602      	mov	r2, r0
 80079cc:	460b      	mov	r3, r1
 80079ce:	4613      	mov	r3, r2
 80079d0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079d8:	d308      	bcc.n	80079ec <UART_SetConfig+0x430>
 80079da:	6a3b      	ldr	r3, [r7, #32]
 80079dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079e0:	d204      	bcs.n	80079ec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6a3a      	ldr	r2, [r7, #32]
 80079e8:	60da      	str	r2, [r3, #12]
 80079ea:	e0ce      	b.n	8007b8a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80079f2:	e0ca      	b.n	8007b8a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	69db      	ldr	r3, [r3, #28]
 80079f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079fc:	d166      	bne.n	8007acc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80079fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a02:	2b08      	cmp	r3, #8
 8007a04:	d827      	bhi.n	8007a56 <UART_SetConfig+0x49a>
 8007a06:	a201      	add	r2, pc, #4	@ (adr r2, 8007a0c <UART_SetConfig+0x450>)
 8007a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0c:	08007a31 	.word	0x08007a31
 8007a10:	08007a39 	.word	0x08007a39
 8007a14:	08007a41 	.word	0x08007a41
 8007a18:	08007a57 	.word	0x08007a57
 8007a1c:	08007a47 	.word	0x08007a47
 8007a20:	08007a57 	.word	0x08007a57
 8007a24:	08007a57 	.word	0x08007a57
 8007a28:	08007a57 	.word	0x08007a57
 8007a2c:	08007a4f 	.word	0x08007a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a30:	f7fd f880 	bl	8004b34 <HAL_RCC_GetPCLK1Freq>
 8007a34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a36:	e014      	b.n	8007a62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a38:	f7fd f892 	bl	8004b60 <HAL_RCC_GetPCLK2Freq>
 8007a3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a3e:	e010      	b.n	8007a62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a40:	4b4e      	ldr	r3, [pc, #312]	@ (8007b7c <UART_SetConfig+0x5c0>)
 8007a42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a44:	e00d      	b.n	8007a62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a46:	f7fd f807 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 8007a4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a4c:	e009      	b.n	8007a62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a54:	e005      	b.n	8007a62 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007a60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f000 8090 	beq.w	8007b8a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a6e:	4a44      	ldr	r2, [pc, #272]	@ (8007b80 <UART_SetConfig+0x5c4>)
 8007a70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a74:	461a      	mov	r2, r3
 8007a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a78:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a7c:	005a      	lsls	r2, r3, #1
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	085b      	lsrs	r3, r3, #1
 8007a84:	441a      	add	r2, r3
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a90:	6a3b      	ldr	r3, [r7, #32]
 8007a92:	2b0f      	cmp	r3, #15
 8007a94:	d916      	bls.n	8007ac4 <UART_SetConfig+0x508>
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a9c:	d212      	bcs.n	8007ac4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a9e:	6a3b      	ldr	r3, [r7, #32]
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	f023 030f 	bic.w	r3, r3, #15
 8007aa6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	085b      	lsrs	r3, r3, #1
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	f003 0307 	and.w	r3, r3, #7
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	8bfb      	ldrh	r3, [r7, #30]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	8bfa      	ldrh	r2, [r7, #30]
 8007ac0:	60da      	str	r2, [r3, #12]
 8007ac2:	e062      	b.n	8007b8a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007aca:	e05e      	b.n	8007b8a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007acc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007ad0:	2b08      	cmp	r3, #8
 8007ad2:	d828      	bhi.n	8007b26 <UART_SetConfig+0x56a>
 8007ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8007adc <UART_SetConfig+0x520>)
 8007ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ada:	bf00      	nop
 8007adc:	08007b01 	.word	0x08007b01
 8007ae0:	08007b09 	.word	0x08007b09
 8007ae4:	08007b11 	.word	0x08007b11
 8007ae8:	08007b27 	.word	0x08007b27
 8007aec:	08007b17 	.word	0x08007b17
 8007af0:	08007b27 	.word	0x08007b27
 8007af4:	08007b27 	.word	0x08007b27
 8007af8:	08007b27 	.word	0x08007b27
 8007afc:	08007b1f 	.word	0x08007b1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b00:	f7fd f818 	bl	8004b34 <HAL_RCC_GetPCLK1Freq>
 8007b04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b06:	e014      	b.n	8007b32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b08:	f7fd f82a 	bl	8004b60 <HAL_RCC_GetPCLK2Freq>
 8007b0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b0e:	e010      	b.n	8007b32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b10:	4b1a      	ldr	r3, [pc, #104]	@ (8007b7c <UART_SetConfig+0x5c0>)
 8007b12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b14:	e00d      	b.n	8007b32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b16:	f7fc ff9f 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 8007b1a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b1c:	e009      	b.n	8007b32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b24:	e005      	b.n	8007b32 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007b30:	bf00      	nop
    }

    if (pclk != 0U)
 8007b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d028      	beq.n	8007b8a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3c:	4a10      	ldr	r2, [pc, #64]	@ (8007b80 <UART_SetConfig+0x5c4>)
 8007b3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b42:	461a      	mov	r2, r3
 8007b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b46:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	085b      	lsrs	r3, r3, #1
 8007b50:	441a      	add	r2, r3
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
 8007b5e:	2b0f      	cmp	r3, #15
 8007b60:	d910      	bls.n	8007b84 <UART_SetConfig+0x5c8>
 8007b62:	6a3b      	ldr	r3, [r7, #32]
 8007b64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b68:	d20c      	bcs.n	8007b84 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b6a:	6a3b      	ldr	r3, [r7, #32]
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	60da      	str	r2, [r3, #12]
 8007b74:	e009      	b.n	8007b8a <UART_SetConfig+0x5ce>
 8007b76:	bf00      	nop
 8007b78:	40008000 	.word	0x40008000
 8007b7c:	00f42400 	.word	0x00f42400
 8007b80:	080083ac 	.word	0x080083ac
      }
      else
      {
        ret = HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007ba6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3730      	adds	r7, #48	@ 0x30
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007bb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc0:	f003 0308 	and.w	r3, r3, #8
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00a      	beq.n	8007bde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00a      	beq.n	8007c00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	430a      	orrs	r2, r1
 8007bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c04:	f003 0302 	and.w	r3, r3, #2
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00a      	beq.n	8007c22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c26:	f003 0304 	and.w	r3, r3, #4
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00a      	beq.n	8007c44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	430a      	orrs	r2, r1
 8007c42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c48:	f003 0310 	and.w	r3, r3, #16
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00a      	beq.n	8007c66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	430a      	orrs	r2, r1
 8007c64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c6a:	f003 0320 	and.w	r3, r3, #32
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00a      	beq.n	8007c88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	430a      	orrs	r2, r1
 8007c86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d01a      	beq.n	8007cca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cb2:	d10a      	bne.n	8007cca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00a      	beq.n	8007cec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	605a      	str	r2, [r3, #4]
  }
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b098      	sub	sp, #96	@ 0x60
 8007cfc:	af02      	add	r7, sp, #8
 8007cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d08:	f7f9 fd5c 	bl	80017c4 <HAL_GetTick>
 8007d0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 0308 	and.w	r3, r3, #8
 8007d18:	2b08      	cmp	r3, #8
 8007d1a:	d12f      	bne.n	8007d7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d24:	2200      	movs	r2, #0
 8007d26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f88e 	bl	8007e4c <UART_WaitOnFlagUntilTimeout>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d022      	beq.n	8007d7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3e:	e853 3f00 	ldrex	r3, [r3]
 8007d42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	461a      	mov	r2, r3
 8007d52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d54:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d56:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d5c:	e841 2300 	strex	r3, r2, [r1]
 8007d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1e6      	bne.n	8007d36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2220      	movs	r2, #32
 8007d6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e063      	b.n	8007e44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 0304 	and.w	r3, r3, #4
 8007d86:	2b04      	cmp	r3, #4
 8007d88:	d149      	bne.n	8007e1e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d8a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d92:	2200      	movs	r2, #0
 8007d94:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 f857 	bl	8007e4c <UART_WaitOnFlagUntilTimeout>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d03c      	beq.n	8007e1e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dac:	e853 3f00 	ldrex	r3, [r3]
 8007db0:	623b      	str	r3, [r7, #32]
   return(result);
 8007db2:	6a3b      	ldr	r3, [r7, #32]
 8007db4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007db8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8007dc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007dc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dca:	e841 2300 	strex	r3, r2, [r1]
 8007dce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1e6      	bne.n	8007da4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	3308      	adds	r3, #8
 8007ddc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	e853 3f00 	ldrex	r3, [r3]
 8007de4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f023 0301 	bic.w	r3, r3, #1
 8007dec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	3308      	adds	r3, #8
 8007df4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007df6:	61fa      	str	r2, [r7, #28]
 8007df8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfa:	69b9      	ldr	r1, [r7, #24]
 8007dfc:	69fa      	ldr	r2, [r7, #28]
 8007dfe:	e841 2300 	strex	r3, r2, [r1]
 8007e02:	617b      	str	r3, [r7, #20]
   return(result);
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1e5      	bne.n	8007dd6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2220      	movs	r2, #32
 8007e0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e012      	b.n	8007e44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2220      	movs	r2, #32
 8007e22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2220      	movs	r2, #32
 8007e2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3758      	adds	r7, #88	@ 0x58
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	603b      	str	r3, [r7, #0]
 8007e58:	4613      	mov	r3, r2
 8007e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e5c:	e04f      	b.n	8007efe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e64:	d04b      	beq.n	8007efe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e66:	f7f9 fcad 	bl	80017c4 <HAL_GetTick>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	69ba      	ldr	r2, [r7, #24]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d302      	bcc.n	8007e7c <UART_WaitOnFlagUntilTimeout+0x30>
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d101      	bne.n	8007e80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	e04e      	b.n	8007f1e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 0304 	and.w	r3, r3, #4
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d037      	beq.n	8007efe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2b80      	cmp	r3, #128	@ 0x80
 8007e92:	d034      	beq.n	8007efe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2b40      	cmp	r3, #64	@ 0x40
 8007e98:	d031      	beq.n	8007efe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	69db      	ldr	r3, [r3, #28]
 8007ea0:	f003 0308 	and.w	r3, r3, #8
 8007ea4:	2b08      	cmp	r3, #8
 8007ea6:	d110      	bne.n	8007eca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2208      	movs	r2, #8
 8007eae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f000 f838 	bl	8007f26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2208      	movs	r2, #8
 8007eba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e029      	b.n	8007f1e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	69db      	ldr	r3, [r3, #28]
 8007ed0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ed4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ed8:	d111      	bne.n	8007efe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ee2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f000 f81e 	bl	8007f26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2220      	movs	r2, #32
 8007eee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e00f      	b.n	8007f1e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	69da      	ldr	r2, [r3, #28]
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	4013      	ands	r3, r2
 8007f08:	68ba      	ldr	r2, [r7, #8]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	bf0c      	ite	eq
 8007f0e:	2301      	moveq	r3, #1
 8007f10:	2300      	movne	r3, #0
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	461a      	mov	r2, r3
 8007f16:	79fb      	ldrb	r3, [r7, #7]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d0a0      	beq.n	8007e5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b095      	sub	sp, #84	@ 0x54
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f36:	e853 3f00 	ldrex	r3, [r3]
 8007f3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	461a      	mov	r2, r3
 8007f4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f4e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f54:	e841 2300 	strex	r3, r2, [r1]
 8007f58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1e6      	bne.n	8007f2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	3308      	adds	r3, #8
 8007f66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f68:	6a3b      	ldr	r3, [r7, #32]
 8007f6a:	e853 3f00 	ldrex	r3, [r3]
 8007f6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f76:	f023 0301 	bic.w	r3, r3, #1
 8007f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	3308      	adds	r3, #8
 8007f82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f8c:	e841 2300 	strex	r3, r2, [r1]
 8007f90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d1e3      	bne.n	8007f60 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d118      	bne.n	8007fd2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	e853 3f00 	ldrex	r3, [r3]
 8007fac:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	f023 0310 	bic.w	r3, r3, #16
 8007fb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fbe:	61bb      	str	r3, [r7, #24]
 8007fc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc2:	6979      	ldr	r1, [r7, #20]
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	e841 2300 	strex	r3, r2, [r1]
 8007fca:	613b      	str	r3, [r7, #16]
   return(result);
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1e6      	bne.n	8007fa0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2220      	movs	r2, #32
 8007fd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007fe6:	bf00      	nop
 8007fe8:	3754      	adds	r7, #84	@ 0x54
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b084      	sub	sp, #16
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ffe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f7ff fabd 	bl	8007590 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008016:	bf00      	nop
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b088      	sub	sp, #32
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	e853 3f00 	ldrex	r3, [r3]
 8008032:	60bb      	str	r3, [r7, #8]
   return(result);
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800803a:	61fb      	str	r3, [r7, #28]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	461a      	mov	r2, r3
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	61bb      	str	r3, [r7, #24]
 8008046:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008048:	6979      	ldr	r1, [r7, #20]
 800804a:	69ba      	ldr	r2, [r7, #24]
 800804c:	e841 2300 	strex	r3, r2, [r1]
 8008050:	613b      	str	r3, [r7, #16]
   return(result);
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1e6      	bne.n	8008026 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2220      	movs	r2, #32
 800805c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f7ff fa88 	bl	800757c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800806c:	bf00      	nop
 800806e:	3720      	adds	r7, #32
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800807c:	bf00      	nop
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d101      	bne.n	80080c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80080c2:	2302      	movs	r3, #2
 80080c4:	e027      	b.n	8008116 <HAL_UARTEx_DisableFifoMode+0x66>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2201      	movs	r2, #1
 80080ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2224      	movs	r2, #36	@ 0x24
 80080d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f022 0201 	bic.w	r2, r2, #1
 80080ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80080f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2220      	movs	r2, #32
 8008108:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3714      	adds	r7, #20
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b084      	sub	sp, #16
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008132:	2b01      	cmp	r3, #1
 8008134:	d101      	bne.n	800813a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008136:	2302      	movs	r3, #2
 8008138:	e02d      	b.n	8008196 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2224      	movs	r2, #36	@ 0x24
 8008146:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f022 0201 	bic.w	r2, r2, #1
 8008160:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	683a      	ldr	r2, [r7, #0]
 8008172:	430a      	orrs	r2, r1
 8008174:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f850 	bl	800821c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2220      	movs	r2, #32
 8008188:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b084      	sub	sp, #16
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d101      	bne.n	80081b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80081b2:	2302      	movs	r3, #2
 80081b4:	e02d      	b.n	8008212 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2201      	movs	r2, #1
 80081ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2224      	movs	r2, #36	@ 0x24
 80081c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f022 0201 	bic.w	r2, r2, #1
 80081dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	683a      	ldr	r2, [r7, #0]
 80081ee:	430a      	orrs	r2, r1
 80081f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f812 	bl	800821c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2220      	movs	r2, #32
 8008204:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
	...

0800821c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008228:	2b00      	cmp	r3, #0
 800822a:	d108      	bne.n	800823e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800823c:	e031      	b.n	80082a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800823e:	2308      	movs	r3, #8
 8008240:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008242:	2308      	movs	r3, #8
 8008244:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	0e5b      	lsrs	r3, r3, #25
 800824e:	b2db      	uxtb	r3, r3
 8008250:	f003 0307 	and.w	r3, r3, #7
 8008254:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	0f5b      	lsrs	r3, r3, #29
 800825e:	b2db      	uxtb	r3, r3
 8008260:	f003 0307 	and.w	r3, r3, #7
 8008264:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008266:	7bbb      	ldrb	r3, [r7, #14]
 8008268:	7b3a      	ldrb	r2, [r7, #12]
 800826a:	4911      	ldr	r1, [pc, #68]	@ (80082b0 <UARTEx_SetNbDataToProcess+0x94>)
 800826c:	5c8a      	ldrb	r2, [r1, r2]
 800826e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008272:	7b3a      	ldrb	r2, [r7, #12]
 8008274:	490f      	ldr	r1, [pc, #60]	@ (80082b4 <UARTEx_SetNbDataToProcess+0x98>)
 8008276:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008278:	fb93 f3f2 	sdiv	r3, r3, r2
 800827c:	b29a      	uxth	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008284:	7bfb      	ldrb	r3, [r7, #15]
 8008286:	7b7a      	ldrb	r2, [r7, #13]
 8008288:	4909      	ldr	r1, [pc, #36]	@ (80082b0 <UARTEx_SetNbDataToProcess+0x94>)
 800828a:	5c8a      	ldrb	r2, [r1, r2]
 800828c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008290:	7b7a      	ldrb	r2, [r7, #13]
 8008292:	4908      	ldr	r1, [pc, #32]	@ (80082b4 <UARTEx_SetNbDataToProcess+0x98>)
 8008294:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008296:	fb93 f3f2 	sdiv	r3, r3, r2
 800829a:	b29a      	uxth	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80082a2:	bf00      	nop
 80082a4:	3714      	adds	r7, #20
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	080083c4 	.word	0x080083c4
 80082b4:	080083cc 	.word	0x080083cc

080082b8 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	ed93 7a06 	vldr	s14, [r3, #24]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	edd3 7a07 	vldr	s15, [r3, #28]
 80082ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	edd3 7a08 	vldr	s15, [r3, #32]
 80082d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	edd3 7a06 	vldr	s15, [r3, #24]
 80082e8:	eeb1 7a67 	vneg.f32	s14, s15
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	edd3 7a08 	vldr	s15, [r3, #32]
 80082f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80082f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a1a      	ldr	r2, [r3, #32]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d006      	beq.n	800831c <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	330c      	adds	r3, #12
 8008312:	220c      	movs	r2, #12
 8008314:	2100      	movs	r1, #0
 8008316:	4618      	mov	r0, r3
 8008318:	f000 f804 	bl	8008324 <memset>
  }

}
 800831c:	bf00      	nop
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <memset>:
 8008324:	4402      	add	r2, r0
 8008326:	4603      	mov	r3, r0
 8008328:	4293      	cmp	r3, r2
 800832a:	d100      	bne.n	800832e <memset+0xa>
 800832c:	4770      	bx	lr
 800832e:	f803 1b01 	strb.w	r1, [r3], #1
 8008332:	e7f9      	b.n	8008328 <memset+0x4>

08008334 <__libc_init_array>:
 8008334:	b570      	push	{r4, r5, r6, lr}
 8008336:	4d0d      	ldr	r5, [pc, #52]	@ (800836c <__libc_init_array+0x38>)
 8008338:	4c0d      	ldr	r4, [pc, #52]	@ (8008370 <__libc_init_array+0x3c>)
 800833a:	1b64      	subs	r4, r4, r5
 800833c:	10a4      	asrs	r4, r4, #2
 800833e:	2600      	movs	r6, #0
 8008340:	42a6      	cmp	r6, r4
 8008342:	d109      	bne.n	8008358 <__libc_init_array+0x24>
 8008344:	4d0b      	ldr	r5, [pc, #44]	@ (8008374 <__libc_init_array+0x40>)
 8008346:	4c0c      	ldr	r4, [pc, #48]	@ (8008378 <__libc_init_array+0x44>)
 8008348:	f000 f818 	bl	800837c <_init>
 800834c:	1b64      	subs	r4, r4, r5
 800834e:	10a4      	asrs	r4, r4, #2
 8008350:	2600      	movs	r6, #0
 8008352:	42a6      	cmp	r6, r4
 8008354:	d105      	bne.n	8008362 <__libc_init_array+0x2e>
 8008356:	bd70      	pop	{r4, r5, r6, pc}
 8008358:	f855 3b04 	ldr.w	r3, [r5], #4
 800835c:	4798      	blx	r3
 800835e:	3601      	adds	r6, #1
 8008360:	e7ee      	b.n	8008340 <__libc_init_array+0xc>
 8008362:	f855 3b04 	ldr.w	r3, [r5], #4
 8008366:	4798      	blx	r3
 8008368:	3601      	adds	r6, #1
 800836a:	e7f2      	b.n	8008352 <__libc_init_array+0x1e>
 800836c:	080083dc 	.word	0x080083dc
 8008370:	080083dc 	.word	0x080083dc
 8008374:	080083dc 	.word	0x080083dc
 8008378:	080083e0 	.word	0x080083e0

0800837c <_init>:
 800837c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800837e:	bf00      	nop
 8008380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008382:	bc08      	pop	{r3}
 8008384:	469e      	mov	lr, r3
 8008386:	4770      	bx	lr

08008388 <_fini>:
 8008388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800838a:	bf00      	nop
 800838c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800838e:	bc08      	pop	{r3}
 8008390:	469e      	mov	lr, r3
 8008392:	4770      	bx	lr
