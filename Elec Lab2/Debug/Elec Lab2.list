
Elec Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dec  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007fc4  08007fc4  00008fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008004  08008004  0000a00c  2**0
                  CONTENTS
  4 .ARM          00000008  08008004  08008004  00009004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800800c  0800800c  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800800c  0800800c  0000900c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008010  08008010  00009010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008014  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  2000000c  08008020  0000a00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08008020  0000a4ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000188a8  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002caf  00000000  00000000  000228e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001508  00000000  00000000  00025598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001072  00000000  00000000  00026aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028fae  00000000  00000000  00027b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189e2  00000000  00000000  00050ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114781  00000000  00000000  000694a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017dc23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b2c  00000000  00000000  0017dc68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00183794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007fac 	.word	0x08007fac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08007fac 	.word	0x08007fac

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f001 f87c 	bl	800160a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f949 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 fcab 	bl	8000e70 <MX_GPIO_Init>
  MX_DMA_Init();
 800051a:	f000 fc7f 	bl	8000e1c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800051e:	f000 fa19 	bl	8000954 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000522:	f000 f98d 	bl	8000840 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000526:	f000 fb5d 	bl	8000be4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800052a:	f000 fba9 	bl	8000c80 <MX_TIM4_Init>
  MX_TIM5_Init();
 800052e:	f000 fc1f 	bl	8000d70 <MX_TIM5_Init>
  MX_TIM2_Init();
 8000532:	f000 fb09 	bl	8000b48 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000536:	f000 fa57 	bl	80009e8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 200);
 800053a:	22c8      	movs	r2, #200	@ 0xc8
 800053c:	4981      	ldr	r1, [pc, #516]	@ (8000744 <main+0x23c>)
 800053e:	4882      	ldr	r0, [pc, #520]	@ (8000748 <main+0x240>)
 8000540:	f001 fcd0 	bl	8001ee4 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000544:	4881      	ldr	r0, [pc, #516]	@ (800074c <main+0x244>)
 8000546:	f004 fd7b 	bl	8005040 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 800054a:	4881      	ldr	r0, [pc, #516]	@ (8000750 <main+0x248>)
 800054c:	f004 fd78 	bl	8005040 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000550:	4880      	ldr	r0, [pc, #512]	@ (8000754 <main+0x24c>)
 8000552:	f004 fde5 	bl	8005120 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000556:	2100      	movs	r1, #0
 8000558:	487f      	ldr	r0, [pc, #508]	@ (8000758 <main+0x250>)
 800055a:	f004 febb 	bl	80052d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800055e:	2100      	movs	r1, #0
 8000560:	487b      	ldr	r0, [pc, #492]	@ (8000750 <main+0x248>)
 8000562:	f004 feb7 	bl	80052d4 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 8000566:	213c      	movs	r1, #60	@ 0x3c
 8000568:	487c      	ldr	r0, [pc, #496]	@ (800075c <main+0x254>)
 800056a:	f005 f86b 	bl	8005644 <HAL_TIM_Encoder_Start>



  PID.Kp =2;
 800056e:	4b7c      	ldr	r3, [pc, #496]	@ (8000760 <main+0x258>)
 8000570:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000574:	619a      	str	r2, [r3, #24]
  PID.Ki =0;
 8000576:	4b7a      	ldr	r3, [pc, #488]	@ (8000760 <main+0x258>)
 8000578:	f04f 0200 	mov.w	r2, #0
 800057c:	61da      	str	r2, [r3, #28]
  PID.Kd = 0;
 800057e:	4b78      	ldr	r3, [pc, #480]	@ (8000760 <main+0x258>)
 8000580:	f04f 0200 	mov.w	r2, #0
 8000584:	621a      	str	r2, [r3, #32]
  set_pos = 0;
 8000586:	4b77      	ldr	r3, [pc, #476]	@ (8000764 <main+0x25c>)
 8000588:	f04f 0200 	mov.w	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
  z = 0;
 800058e:	4b76      	ldr	r3, [pc, #472]	@ (8000768 <main+0x260>)
 8000590:	2200      	movs	r2, #0
 8000592:	801a      	strh	r2, [r3, #0]
  arm_pid_init_f32(&PID, 0);
 8000594:	2100      	movs	r1, #0
 8000596:	4872      	ldr	r0, [pc, #456]	@ (8000760 <main+0x258>)
 8000598:	f007 fca6 	bl	8007ee8 <arm_pid_init_f32>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Degree = (QEIReadRaw/48)*360;
 800059c:	4b73      	ldr	r3, [pc, #460]	@ (800076c <main+0x264>)
 800059e:	ed93 7a00 	vldr	s14, [r3]
 80005a2:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8000770 <main+0x268>
 80005a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005aa:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8000774 <main+0x26c>
 80005ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005b2:	4b71      	ldr	r3, [pc, #452]	@ (8000778 <main+0x270>)
 80005b4:	edc3 7a00 	vstr	s15, [r3]
	  for (uint16_t i =0; i < 100;i++)
 80005b8:	2300      	movs	r3, #0
 80005ba:	81fb      	strh	r3, [r7, #14]
 80005bc:	e019      	b.n	80005f2 <main+0xea>
	  {
		  x += ADC_RawRead[(i*2)];
 80005be:	89fb      	ldrh	r3, [r7, #14]
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	4a60      	ldr	r2, [pc, #384]	@ (8000744 <main+0x23c>)
 80005c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005c8:	461a      	mov	r2, r3
 80005ca:	4b6c      	ldr	r3, [pc, #432]	@ (800077c <main+0x274>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4413      	add	r3, r2
 80005d0:	4a6a      	ldr	r2, [pc, #424]	@ (800077c <main+0x274>)
 80005d2:	6013      	str	r3, [r2, #0]
		  y += ADC_RawRead[(i*2)+1];
 80005d4:	89fb      	ldrh	r3, [r7, #14]
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	3301      	adds	r3, #1
 80005da:	4a5a      	ldr	r2, [pc, #360]	@ (8000744 <main+0x23c>)
 80005dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b67      	ldr	r3, [pc, #412]	@ (8000780 <main+0x278>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4413      	add	r3, r2
 80005e8:	4a65      	ldr	r2, [pc, #404]	@ (8000780 <main+0x278>)
 80005ea:	6013      	str	r3, [r2, #0]
	  for (uint16_t i =0; i < 100;i++)
 80005ec:	89fb      	ldrh	r3, [r7, #14]
 80005ee:	3301      	adds	r3, #1
 80005f0:	81fb      	strh	r3, [r7, #14]
 80005f2:	89fb      	ldrh	r3, [r7, #14]
 80005f4:	2b63      	cmp	r3, #99	@ 0x63
 80005f6:	d9e2      	bls.n	80005be <main+0xb6>
	  }
	  posADC = x/(100);
 80005f8:	4b60      	ldr	r3, [pc, #384]	@ (800077c <main+0x274>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a61      	ldr	r2, [pc, #388]	@ (8000784 <main+0x27c>)
 80005fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000602:	095b      	lsrs	r3, r3, #5
 8000604:	b29a      	uxth	r2, r3
 8000606:	4b60      	ldr	r3, [pc, #384]	@ (8000788 <main+0x280>)
 8000608:	801a      	strh	r2, [r3, #0]
	  setADC = y/(100);
 800060a:	4b5d      	ldr	r3, [pc, #372]	@ (8000780 <main+0x278>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a5d      	ldr	r2, [pc, #372]	@ (8000784 <main+0x27c>)
 8000610:	fba2 2303 	umull	r2, r3, r2, r3
 8000614:	095b      	lsrs	r3, r3, #5
 8000616:	b29a      	uxth	r2, r3
 8000618:	4b5c      	ldr	r3, [pc, #368]	@ (800078c <main+0x284>)
 800061a:	801a      	strh	r2, [r3, #0]
	  x = 0;
 800061c:	4b57      	ldr	r3, [pc, #348]	@ (800077c <main+0x274>)
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
	  y = 0;
 8000622:	4b57      	ldr	r3, [pc, #348]	@ (8000780 <main+0x278>)
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]


	  Vfeedback = (arm_pid_f32(&PID, set_pos - pos))*32676*2/3072;
 8000628:	4b4e      	ldr	r3, [pc, #312]	@ (8000764 <main+0x25c>)
 800062a:	ed93 7a00 	vldr	s14, [r3]
 800062e:	4b58      	ldr	r3, [pc, #352]	@ (8000790 <main+0x288>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	ee07 3a90 	vmov	s15, r3
 8000636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800063a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800063e:	4b48      	ldr	r3, [pc, #288]	@ (8000760 <main+0x258>)
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	edc7 7a01 	vstr	s15, [r7, #4]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	ed93 7a00 	vldr	s14, [r3]
 800064c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000650:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	edd3 6a01 	vldr	s13, [r3, #4]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000660:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000664:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	edd3 6a02 	vldr	s13, [r3, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	edd3 7a04 	vldr	s15, [r3, #16]
 8000674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000678:	ee37 7a27 	vadd.f32	s14, s14, s15
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000686:	edc7 7a00 	vstr	s15, [r7]

    /* Update state */
    S->state[1] = S->state[0];
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	68da      	ldr	r2, [r3, #12]
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	683a      	ldr	r2, [r7, #0]
 800069c:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800069e:	edd7 7a00 	vldr	s15, [r7]
 80006a2:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8000794 <main+0x28c>
 80006a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006aa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80006ae:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8000798 <main+0x290>
 80006b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006b6:	4b39      	ldr	r3, [pc, #228]	@ (800079c <main+0x294>)
 80006b8:	edc3 7a00 	vstr	s15, [r3]
	  if(Vfeedback > 0)
 80006bc:	4b37      	ldr	r3, [pc, #220]	@ (800079c <main+0x294>)
 80006be:	edd3 7a00 	vldr	s15, [r3]
 80006c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ca:	dd08      	ble.n	80006de <main+0x1d6>
	  {
		  //z = 1;
		  PWM1 = Vfeedback;
 80006cc:	4b33      	ldr	r3, [pc, #204]	@ (800079c <main+0x294>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a33      	ldr	r2, [pc, #204]	@ (80007a0 <main+0x298>)
 80006d2:	6013      	str	r3, [r2, #0]
		  PWM2 = 0;
 80006d4:	4b33      	ldr	r3, [pc, #204]	@ (80007a4 <main+0x29c>)
 80006d6:	f04f 0200 	mov.w	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	e01c      	b.n	8000718 <main+0x210>

	  }
	  else if(Vfeedback < 0)
 80006de:	4b2f      	ldr	r3, [pc, #188]	@ (800079c <main+0x294>)
 80006e0:	edd3 7a00 	vldr	s15, [r3]
 80006e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ec:	d50c      	bpl.n	8000708 <main+0x200>
	  {
		  PWM1 = 0;
 80006ee:	4b2c      	ldr	r3, [pc, #176]	@ (80007a0 <main+0x298>)
 80006f0:	f04f 0200 	mov.w	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
		  PWM2 = Vfeedback * -1;
 80006f6:	4b29      	ldr	r3, [pc, #164]	@ (800079c <main+0x294>)
 80006f8:	edd3 7a00 	vldr	s15, [r3]
 80006fc:	eef1 7a67 	vneg.f32	s15, s15
 8000700:	4b28      	ldr	r3, [pc, #160]	@ (80007a4 <main+0x29c>)
 8000702:	edc3 7a00 	vstr	s15, [r3]
 8000706:	e007      	b.n	8000718 <main+0x210>
	  }
	  else{
		  PWM1 = 0;
 8000708:	4b25      	ldr	r3, [pc, #148]	@ (80007a0 <main+0x298>)
 800070a:	f04f 0200 	mov.w	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
		  PWM2 = 0;
 8000710:	4b24      	ldr	r3, [pc, #144]	@ (80007a4 <main+0x29c>)
 8000712:	f04f 0200 	mov.w	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
	  }
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM1);
 8000718:	4b21      	ldr	r3, [pc, #132]	@ (80007a0 <main+0x298>)
 800071a:	edd3 7a00 	vldr	s15, [r3]
 800071e:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <main+0x248>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000726:	ee17 2a90 	vmov	r2, s15
 800072a:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM2);
 800072c:	4b1d      	ldr	r3, [pc, #116]	@ (80007a4 <main+0x29c>)
 800072e:	edd3 7a00 	vldr	s15, [r3]
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <main+0x250>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800073a:	ee17 2a90 	vmov	r2, s15
 800073e:	635a      	str	r2, [r3, #52]	@ 0x34
	  Degree = (QEIReadRaw/48)*360;
 8000740:	e72c      	b.n	800059c <main+0x94>
 8000742:	bf00      	nop
 8000744:	2000032c 	.word	0x2000032c
 8000748:	20000028 	.word	0x20000028
 800074c:	20000220 	.word	0x20000220
 8000750:	2000026c 	.word	0x2000026c
 8000754:	200001d4 	.word	0x200001d4
 8000758:	20000188 	.word	0x20000188
 800075c:	200002b8 	.word	0x200002b8
 8000760:	200004bc 	.word	0x200004bc
 8000764:	20000314 	.word	0x20000314
 8000768:	2000030c 	.word	0x2000030c
 800076c:	20000320 	.word	0x20000320
 8000770:	42400000 	.word	0x42400000
 8000774:	43b40000 	.word	0x43b40000
 8000778:	20000328 	.word	0x20000328
 800077c:	20000304 	.word	0x20000304
 8000780:	20000308 	.word	0x20000308
 8000784:	51eb851f 	.word	0x51eb851f
 8000788:	200004e0 	.word	0x200004e0
 800078c:	200004e2 	.word	0x200004e2
 8000790:	20000310 	.word	0x20000310
 8000794:	46ff4800 	.word	0x46ff4800
 8000798:	45400000 	.word	0x45400000
 800079c:	200004e4 	.word	0x200004e4
 80007a0:	20000318 	.word	0x20000318
 80007a4:	2000031c 	.word	0x2000031c

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b094      	sub	sp, #80	@ 0x50
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0318 	add.w	r3, r7, #24
 80007b2:	2238      	movs	r2, #56	@ 0x38
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f007 fbcc 	bl	8007f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f003 fbb0 	bl	8003f30 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d0:	2302      	movs	r3, #2
 80007d2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007da:	2340      	movs	r3, #64	@ 0x40
 80007dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007de:	2302      	movs	r3, #2
 80007e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e2:	2302      	movs	r3, #2
 80007e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007e6:	2304      	movs	r3, #4
 80007e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007ea:	2355      	movs	r3, #85	@ 0x55
 80007ec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007f2:	2302      	movs	r3, #2
 80007f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fa:	f107 0318 	add.w	r3, r7, #24
 80007fe:	4618      	mov	r0, r3
 8000800:	f003 fc4a 	bl	8004098 <HAL_RCC_OscConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800080a:	f000 fc1d 	bl	8001048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080e:	230f      	movs	r3, #15
 8000810:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000812:	2303      	movs	r3, #3
 8000814:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2104      	movs	r1, #4
 8000826:	4618      	mov	r0, r3
 8000828:	f003 ff48 	bl	80046bc <HAL_RCC_ClockConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000832:	f000 fc09 	bl	8001048 <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	3750      	adds	r7, #80	@ 0x50
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08c      	sub	sp, #48	@ 0x30
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2220      	movs	r2, #32
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f007 fb7b 	bl	8007f54 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800085e:	4b3a      	ldr	r3, [pc, #232]	@ (8000948 <MX_ADC1_Init+0x108>)
 8000860:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000864:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000866:	4b38      	ldr	r3, [pc, #224]	@ (8000948 <MX_ADC1_Init+0x108>)
 8000868:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800086c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800086e:	4b36      	ldr	r3, [pc, #216]	@ (8000948 <MX_ADC1_Init+0x108>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000874:	4b34      	ldr	r3, [pc, #208]	@ (8000948 <MX_ADC1_Init+0x108>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800087a:	4b33      	ldr	r3, [pc, #204]	@ (8000948 <MX_ADC1_Init+0x108>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000880:	4b31      	ldr	r3, [pc, #196]	@ (8000948 <MX_ADC1_Init+0x108>)
 8000882:	2201      	movs	r2, #1
 8000884:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000886:	4b30      	ldr	r3, [pc, #192]	@ (8000948 <MX_ADC1_Init+0x108>)
 8000888:	2204      	movs	r2, #4
 800088a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800088c:	4b2e      	ldr	r3, [pc, #184]	@ (8000948 <MX_ADC1_Init+0x108>)
 800088e:	2200      	movs	r2, #0
 8000890:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000892:	4b2d      	ldr	r3, [pc, #180]	@ (8000948 <MX_ADC1_Init+0x108>)
 8000894:	2200      	movs	r2, #0
 8000896:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000898:	4b2b      	ldr	r3, [pc, #172]	@ (8000948 <MX_ADC1_Init+0x108>)
 800089a:	2202      	movs	r2, #2
 800089c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800089e:	4b2a      	ldr	r3, [pc, #168]	@ (8000948 <MX_ADC1_Init+0x108>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80008a6:	4b28      	ldr	r3, [pc, #160]	@ (8000948 <MX_ADC1_Init+0x108>)
 80008a8:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 80008ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80008ae:	4b26      	ldr	r3, [pc, #152]	@ (8000948 <MX_ADC1_Init+0x108>)
 80008b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008b6:	4b24      	ldr	r3, [pc, #144]	@ (8000948 <MX_ADC1_Init+0x108>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008be:	4b22      	ldr	r3, [pc, #136]	@ (8000948 <MX_ADC1_Init+0x108>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80008c4:	4b20      	ldr	r3, [pc, #128]	@ (8000948 <MX_ADC1_Init+0x108>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008cc:	481e      	ldr	r0, [pc, #120]	@ (8000948 <MX_ADC1_Init+0x108>)
 80008ce:	f001 f94d 	bl	8001b6c <HAL_ADC_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80008d8:	f000 fbb6 	bl	8001048 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e4:	4619      	mov	r1, r3
 80008e6:	4818      	ldr	r0, [pc, #96]	@ (8000948 <MX_ADC1_Init+0x108>)
 80008e8:	f002 fc1a 	bl	8003120 <HAL_ADCEx_MultiModeConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80008f2:	f000 fba9 	bl	8001048 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008f6:	4b15      	ldr	r3, [pc, #84]	@ (800094c <MX_ADC1_Init+0x10c>)
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008fa:	2306      	movs	r3, #6
 80008fc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80008fe:	2302      	movs	r3, #2
 8000900:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000902:	237f      	movs	r3, #127	@ 0x7f
 8000904:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000906:	2304      	movs	r3, #4
 8000908:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	4619      	mov	r1, r3
 8000912:	480d      	ldr	r0, [pc, #52]	@ (8000948 <MX_ADC1_Init+0x108>)
 8000914:	f001 fe42 	bl	800259c <HAL_ADC_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800091e:	f000 fb93 	bl	8001048 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000922:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <MX_ADC1_Init+0x110>)
 8000924:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000926:	230c      	movs	r3, #12
 8000928:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4619      	mov	r1, r3
 800092e:	4806      	ldr	r0, [pc, #24]	@ (8000948 <MX_ADC1_Init+0x108>)
 8000930:	f001 fe34 	bl	800259c <HAL_ADC_ConfigChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800093a:	f000 fb85 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	3730      	adds	r7, #48	@ 0x30
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000028 	.word	0x20000028
 800094c:	04300002 	.word	0x04300002
 8000950:	08600004 	.word	0x08600004

08000954 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000958:	4b21      	ldr	r3, [pc, #132]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 800095a:	4a22      	ldr	r2, [pc, #136]	@ (80009e4 <MX_LPUART1_UART_Init+0x90>)
 800095c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800095e:	4b20      	ldr	r3, [pc, #128]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 8000960:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000964:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b1e      	ldr	r3, [pc, #120]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b1c      	ldr	r3, [pc, #112]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000972:	4b1b      	ldr	r3, [pc, #108]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000978:	4b19      	ldr	r3, [pc, #100]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 800097a:	220c      	movs	r2, #12
 800097c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b18      	ldr	r3, [pc, #96]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000984:	4b16      	ldr	r3, [pc, #88]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800098a:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 800098c:	2200      	movs	r2, #0
 800098e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000990:	4b13      	ldr	r3, [pc, #76]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 8000992:	2200      	movs	r2, #0
 8000994:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000996:	4812      	ldr	r0, [pc, #72]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 8000998:	f006 f894 	bl	8006ac4 <HAL_UART_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80009a2:	f000 fb51 	bl	8001048 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a6:	2100      	movs	r1, #0
 80009a8:	480d      	ldr	r0, [pc, #52]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 80009aa:	f007 f9d2 	bl	8007d52 <HAL_UARTEx_SetTxFifoThreshold>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80009b4:	f000 fb48 	bl	8001048 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b8:	2100      	movs	r1, #0
 80009ba:	4809      	ldr	r0, [pc, #36]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 80009bc:	f007 fa07 	bl	8007dce <HAL_UARTEx_SetRxFifoThreshold>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80009c6:	f000 fb3f 	bl	8001048 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 80009cc:	f007 f988 	bl	8007ce0 <HAL_UARTEx_DisableFifoMode>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80009d6:	f000 fb37 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200000f4 	.word	0x200000f4
 80009e4:	40008000 	.word	0x40008000

080009e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b09c      	sub	sp, #112	@ 0x70
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ee:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a08:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
 8000a18:	615a      	str	r2, [r3, #20]
 8000a1a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2234      	movs	r2, #52	@ 0x34
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f007 fa96 	bl	8007f54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a28:	4b45      	ldr	r3, [pc, #276]	@ (8000b40 <MX_TIM1_Init+0x158>)
 8000a2a:	4a46      	ldr	r2, [pc, #280]	@ (8000b44 <MX_TIM1_Init+0x15c>)
 8000a2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8000a2e:	4b44      	ldr	r3, [pc, #272]	@ (8000b40 <MX_TIM1_Init+0x158>)
 8000a30:	22a9      	movs	r2, #169	@ 0xa9
 8000a32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a34:	4b42      	ldr	r3, [pc, #264]	@ (8000b40 <MX_TIM1_Init+0x158>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 32675;
 8000a3a:	4b41      	ldr	r3, [pc, #260]	@ (8000b40 <MX_TIM1_Init+0x158>)
 8000a3c:	f647 72a3 	movw	r2, #32675	@ 0x7fa3
 8000a40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a42:	4b3f      	ldr	r3, [pc, #252]	@ (8000b40 <MX_TIM1_Init+0x158>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a48:	4b3d      	ldr	r3, [pc, #244]	@ (8000b40 <MX_TIM1_Init+0x158>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4e:	4b3c      	ldr	r3, [pc, #240]	@ (8000b40 <MX_TIM1_Init+0x158>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a54:	483a      	ldr	r0, [pc, #232]	@ (8000b40 <MX_TIM1_Init+0x158>)
 8000a56:	f004 fa9b 	bl	8004f90 <HAL_TIM_Base_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a60:	f000 faf2 	bl	8001048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a68:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a6a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4833      	ldr	r0, [pc, #204]	@ (8000b40 <MX_TIM1_Init+0x158>)
 8000a72:	f005 f8d9 	bl	8005c28 <HAL_TIM_ConfigClockSource>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a7c:	f000 fae4 	bl	8001048 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a80:	482f      	ldr	r0, [pc, #188]	@ (8000b40 <MX_TIM1_Init+0x158>)
 8000a82:	f004 fbc5 	bl	8005210 <HAL_TIM_PWM_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a8c:	f000 fadc 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a90:	2300      	movs	r3, #0
 8000a92:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a94:	2300      	movs	r3, #0
 8000a96:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4827      	ldr	r0, [pc, #156]	@ (8000b40 <MX_TIM1_Init+0x158>)
 8000aa4:	f005 fe9e 	bl	80067e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000aae:	f000 facb 	bl	8001048 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ab2:	2360      	movs	r3, #96	@ 0x60
 8000ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aba:	2300      	movs	r3, #0
 8000abc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aca:	2300      	movs	r3, #0
 8000acc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ace:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	481a      	ldr	r0, [pc, #104]	@ (8000b40 <MX_TIM1_Init+0x158>)
 8000ad8:	f004 ff92 	bl	8005a00 <HAL_TIM_PWM_ConfigChannel>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000ae2:	f000 fab1 	bl	8001048 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000afa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000afe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b10:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b16:	2300      	movs	r3, #0
 8000b18:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	4619      	mov	r1, r3
 8000b22:	4807      	ldr	r0, [pc, #28]	@ (8000b40 <MX_TIM1_Init+0x158>)
 8000b24:	f005 fef4 	bl	8006910 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8000b2e:	f000 fa8b 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b32:	4803      	ldr	r0, [pc, #12]	@ (8000b40 <MX_TIM1_Init+0x158>)
 8000b34:	f000 fc66 	bl	8001404 <HAL_TIM_MspPostInit>

}
 8000b38:	bf00      	nop
 8000b3a:	3770      	adds	r7, #112	@ 0x70
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000188 	.word	0x20000188
 8000b44:	40012c00 	.word	0x40012c00

08000b48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b088      	sub	sp, #32
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4e:	f107 0310 	add.w	r3, r7, #16
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b66:	4b1e      	ldr	r3, [pc, #120]	@ (8000be0 <MX_TIM2_Init+0x98>)
 8000b68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000be0 <MX_TIM2_Init+0x98>)
 8000b70:	22a9      	movs	r2, #169	@ 0xa9
 8000b72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b74:	4b1a      	ldr	r3, [pc, #104]	@ (8000be0 <MX_TIM2_Init+0x98>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000b7a:	4b19      	ldr	r3, [pc, #100]	@ (8000be0 <MX_TIM2_Init+0x98>)
 8000b7c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b82:	4b17      	ldr	r3, [pc, #92]	@ (8000be0 <MX_TIM2_Init+0x98>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b88:	4b15      	ldr	r3, [pc, #84]	@ (8000be0 <MX_TIM2_Init+0x98>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b8e:	4814      	ldr	r0, [pc, #80]	@ (8000be0 <MX_TIM2_Init+0x98>)
 8000b90:	f004 f9fe 	bl	8004f90 <HAL_TIM_Base_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b9a:	f000 fa55 	bl	8001048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480d      	ldr	r0, [pc, #52]	@ (8000be0 <MX_TIM2_Init+0x98>)
 8000bac:	f005 f83c 	bl	8005c28 <HAL_TIM_ConfigClockSource>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bb6:	f000 fa47 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bba:	2320      	movs	r3, #32
 8000bbc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4806      	ldr	r0, [pc, #24]	@ (8000be0 <MX_TIM2_Init+0x98>)
 8000bc8:	f005 fe0c 	bl	80067e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000bd2:	f000 fa39 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	3720      	adds	r7, #32
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200001d4 	.word	0x200001d4

08000be4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bea:	f107 0310 	add.w	r3, r7, #16
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c02:	4b1d      	ldr	r3, [pc, #116]	@ (8000c78 <MX_TIM3_Init+0x94>)
 8000c04:	4a1d      	ldr	r2, [pc, #116]	@ (8000c7c <MX_TIM3_Init+0x98>)
 8000c06:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	@ (8000c78 <MX_TIM3_Init+0x94>)
 8000c0a:	22a9      	movs	r2, #169	@ 0xa9
 8000c0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c78 <MX_TIM3_Init+0x94>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000c14:	4b18      	ldr	r3, [pc, #96]	@ (8000c78 <MX_TIM3_Init+0x94>)
 8000c16:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1c:	4b16      	ldr	r3, [pc, #88]	@ (8000c78 <MX_TIM3_Init+0x94>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c22:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <MX_TIM3_Init+0x94>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c28:	4813      	ldr	r0, [pc, #76]	@ (8000c78 <MX_TIM3_Init+0x94>)
 8000c2a:	f004 f9b1 	bl	8004f90 <HAL_TIM_Base_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000c34:	f000 fa08 	bl	8001048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c3e:	f107 0310 	add.w	r3, r7, #16
 8000c42:	4619      	mov	r1, r3
 8000c44:	480c      	ldr	r0, [pc, #48]	@ (8000c78 <MX_TIM3_Init+0x94>)
 8000c46:	f004 ffef 	bl	8005c28 <HAL_TIM_ConfigClockSource>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c50:	f000 f9fa 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c54:	2320      	movs	r3, #32
 8000c56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <MX_TIM3_Init+0x94>)
 8000c62:	f005 fdbf 	bl	80067e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000c6c:	f000 f9ec 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000220 	.word	0x20000220
 8000c7c:	40000400 	.word	0x40000400

08000c80 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08e      	sub	sp, #56	@ 0x38
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]
 8000cae:	615a      	str	r2, [r3, #20]
 8000cb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8000d68 <MX_TIM4_Init+0xe8>)
 8000cb4:	4a2d      	ldr	r2, [pc, #180]	@ (8000d6c <MX_TIM4_Init+0xec>)
 8000cb6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8000cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d68 <MX_TIM4_Init+0xe8>)
 8000cba:	22a9      	movs	r2, #169	@ 0xa9
 8000cbc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8000d68 <MX_TIM4_Init+0xe8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 32675;
 8000cc4:	4b28      	ldr	r3, [pc, #160]	@ (8000d68 <MX_TIM4_Init+0xe8>)
 8000cc6:	f647 72a3 	movw	r2, #32675	@ 0x7fa3
 8000cca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ccc:	4b26      	ldr	r3, [pc, #152]	@ (8000d68 <MX_TIM4_Init+0xe8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd2:	4b25      	ldr	r3, [pc, #148]	@ (8000d68 <MX_TIM4_Init+0xe8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cd8:	4823      	ldr	r0, [pc, #140]	@ (8000d68 <MX_TIM4_Init+0xe8>)
 8000cda:	f004 f959 	bl	8004f90 <HAL_TIM_Base_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000ce4:	f000 f9b0 	bl	8001048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cec:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	481c      	ldr	r0, [pc, #112]	@ (8000d68 <MX_TIM4_Init+0xe8>)
 8000cf6:	f004 ff97 	bl	8005c28 <HAL_TIM_ConfigClockSource>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000d00:	f000 f9a2 	bl	8001048 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d04:	4818      	ldr	r0, [pc, #96]	@ (8000d68 <MX_TIM4_Init+0xe8>)
 8000d06:	f004 fa83 	bl	8005210 <HAL_TIM_PWM_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000d10:	f000 f99a 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d1c:	f107 031c 	add.w	r3, r7, #28
 8000d20:	4619      	mov	r1, r3
 8000d22:	4811      	ldr	r0, [pc, #68]	@ (8000d68 <MX_TIM4_Init+0xe8>)
 8000d24:	f005 fd5e 	bl	80067e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000d2e:	f000 f98b 	bl	8001048 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d32:	2360      	movs	r3, #96	@ 0x60
 8000d34:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8000d36:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d3a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d44:	463b      	mov	r3, r7
 8000d46:	2200      	movs	r2, #0
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4807      	ldr	r0, [pc, #28]	@ (8000d68 <MX_TIM4_Init+0xe8>)
 8000d4c:	f004 fe58 	bl	8005a00 <HAL_TIM_PWM_ConfigChannel>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000d56:	f000 f977 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d5a:	4803      	ldr	r0, [pc, #12]	@ (8000d68 <MX_TIM4_Init+0xe8>)
 8000d5c:	f000 fb52 	bl	8001404 <HAL_TIM_MspPostInit>

}
 8000d60:	bf00      	nop
 8000d62:	3738      	adds	r7, #56	@ 0x38
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	2000026c 	.word	0x2000026c
 8000d6c:	40000800 	.word	0x40000800

08000d70 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08c      	sub	sp, #48	@ 0x30
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	2224      	movs	r2, #36	@ 0x24
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f007 f8e8 	bl	8007f54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d84:	463b      	mov	r3, r7
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d8e:	4b21      	ldr	r3, [pc, #132]	@ (8000e14 <MX_TIM5_Init+0xa4>)
 8000d90:	4a21      	ldr	r2, [pc, #132]	@ (8000e18 <MX_TIM5_Init+0xa8>)
 8000d92:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000d94:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <MX_TIM5_Init+0xa4>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e14 <MX_TIM5_Init+0xa4>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000da0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e14 <MX_TIM5_Init+0xa4>)
 8000da2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000da6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <MX_TIM5_Init+0xa4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dae:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <MX_TIM5_Init+0xa4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000db4:	2303      	movs	r3, #3
 8000db6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000db8:	2300      	movs	r3, #0
 8000dba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000dd8:	f107 030c 	add.w	r3, r7, #12
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480d      	ldr	r0, [pc, #52]	@ (8000e14 <MX_TIM5_Init+0xa4>)
 8000de0:	f004 fb8a 	bl	80054f8 <HAL_TIM_Encoder_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000dea:	f000 f92d 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dee:	2300      	movs	r3, #0
 8000df0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000df6:	463b      	mov	r3, r7
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4806      	ldr	r0, [pc, #24]	@ (8000e14 <MX_TIM5_Init+0xa4>)
 8000dfc:	f005 fcf2 	bl	80067e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000e06:	f000 f91f 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	3730      	adds	r7, #48	@ 0x30
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200002b8 	.word	0x200002b8
 8000e18:	40000c00 	.word	0x40000c00

08000e1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e22:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <MX_DMA_Init+0x50>)
 8000e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e26:	4a11      	ldr	r2, [pc, #68]	@ (8000e6c <MX_DMA_Init+0x50>)
 8000e28:	f043 0304 	orr.w	r3, r3, #4
 8000e2c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e6c <MX_DMA_Init+0x50>)
 8000e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e6c <MX_DMA_Init+0x50>)
 8000e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e6c <MX_DMA_Init+0x50>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e46:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <MX_DMA_Init+0x50>)
 8000e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2100      	movs	r1, #0
 8000e56:	200b      	movs	r0, #11
 8000e58:	f002 fb45 	bl	80034e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e5c:	200b      	movs	r0, #11
 8000e5e:	f002 fb5c 	bl	800351a <HAL_NVIC_EnableIRQ>

}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40021000 	.word	0x40021000

08000e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	@ 0x28
 8000e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	4b39      	ldr	r3, [pc, #228]	@ (8000f6c <MX_GPIO_Init+0xfc>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8a:	4a38      	ldr	r2, [pc, #224]	@ (8000f6c <MX_GPIO_Init+0xfc>)
 8000e8c:	f043 0304 	orr.w	r3, r3, #4
 8000e90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e92:	4b36      	ldr	r3, [pc, #216]	@ (8000f6c <MX_GPIO_Init+0xfc>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e96:	f003 0304 	and.w	r3, r3, #4
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e9e:	4b33      	ldr	r3, [pc, #204]	@ (8000f6c <MX_GPIO_Init+0xfc>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea2:	4a32      	ldr	r2, [pc, #200]	@ (8000f6c <MX_GPIO_Init+0xfc>)
 8000ea4:	f043 0320 	orr.w	r3, r3, #32
 8000ea8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eaa:	4b30      	ldr	r3, [pc, #192]	@ (8000f6c <MX_GPIO_Init+0xfc>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eae:	f003 0320 	and.w	r3, r3, #32
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	4b2d      	ldr	r3, [pc, #180]	@ (8000f6c <MX_GPIO_Init+0xfc>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eba:	4a2c      	ldr	r2, [pc, #176]	@ (8000f6c <MX_GPIO_Init+0xfc>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f6c <MX_GPIO_Init+0xfc>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	4b27      	ldr	r3, [pc, #156]	@ (8000f6c <MX_GPIO_Init+0xfc>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed2:	4a26      	ldr	r2, [pc, #152]	@ (8000f6c <MX_GPIO_Init+0xfc>)
 8000ed4:	f043 0302 	orr.w	r3, r3, #2
 8000ed8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eda:	4b24      	ldr	r3, [pc, #144]	@ (8000f6c <MX_GPIO_Init+0xfc>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2130      	movs	r1, #48	@ 0x30
 8000eea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eee:	f002 ffe3 	bl	8003eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	481e      	ldr	r0, [pc, #120]	@ (8000f70 <MX_GPIO_Init+0x100>)
 8000ef8:	f002 ffde 	bl	8003eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000efc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f02:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	4619      	mov	r1, r3
 8000f12:	4818      	ldr	r0, [pc, #96]	@ (8000f74 <MX_GPIO_Init+0x104>)
 8000f14:	f002 fe4e 	bl	8003bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8000f18:	2330      	movs	r3, #48	@ 0x30
 8000f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f32:	f002 fe3f 	bl	8003bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f36:	2301      	movs	r3, #1
 8000f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4808      	ldr	r0, [pc, #32]	@ (8000f70 <MX_GPIO_Init+0x100>)
 8000f4e:	f002 fe31 	bl	8003bb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	2028      	movs	r0, #40	@ 0x28
 8000f58:	f002 fac5 	bl	80034e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f5c:	2028      	movs	r0, #40	@ 0x28
 8000f5e:	f002 fadc 	bl	800351a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	@ 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	48000400 	.word	0x48000400
 8000f74:	48000800 	.word	0x48000800

08000f78 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if (htim == &htim2 )
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a29      	ldr	r2, [pc, #164]	@ (8001028 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d148      	bne.n	800101a <HAL_TIM_PeriodElapsedCallback+0xa2>
  {
	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim5);
 8000f88:	4b28      	ldr	r3, [pc, #160]	@ (800102c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f8e:	ee07 3a90 	vmov	s15, r3
 8000f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f96:	4b26      	ldr	r3, [pc, #152]	@ (8001030 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000f98:	edc3 7a00 	vstr	s15, [r3]
	  //spd =  QEIReadRaw * 1000 / 250 * 8;
	  if(QEIReadRaw > 32678)
 8000f9c:	4b24      	ldr	r3, [pc, #144]	@ (8001030 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000f9e:	edd3 7a00 	vldr	s15, [r3]
 8000fa2:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001034 <HAL_TIM_PeriodElapsedCallback+0xbc>
 8000fa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fae:	dd18      	ble.n	8000fe2 <HAL_TIM_PeriodElapsedCallback+0x6a>
	  {
		  pos -= (65536-QEIReadRaw);
 8000fb0:	4b21      	ldr	r3, [pc, #132]	@ (8001038 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	ee07 3a90 	vmov	s15, r3
 8000fb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001030 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000fbe:	edd3 7a00 	vldr	s15, [r3]
 8000fc2:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800103c <HAL_TIM_PeriodElapsedCallback+0xc4>
 8000fc6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000fca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fd2:	ee17 2a90 	vmov	r2, s15
 8000fd6:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000fd8:	601a      	str	r2, [r3, #0]
		  z = 1;
 8000fda:	4b19      	ldr	r3, [pc, #100]	@ (8001040 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	801a      	strh	r2, [r3, #0]
 8000fe0:	e013      	b.n	800100a <HAL_TIM_PeriodElapsedCallback+0x92>
	  }
	  else
	  {
		  pos += QEIReadRaw;
 8000fe2:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	ee07 3a90 	vmov	s15, r3
 8000fea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fee:	4b10      	ldr	r3, [pc, #64]	@ (8001030 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000ff0:	edd3 7a00 	vldr	s15, [r3]
 8000ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ffc:	ee17 2a90 	vmov	r2, s15
 8001000:	4b0d      	ldr	r3, [pc, #52]	@ (8001038 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001002:	601a      	str	r2, [r3, #0]
		  z = 2;
 8001004:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001006:	2202      	movs	r2, #2
 8001008:	801a      	strh	r2, [r3, #0]
	  }
	  QEIReadOld = QEIReadRaw;
 800100a:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a0d      	ldr	r2, [pc, #52]	@ (8001044 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001010:	6013      	str	r3, [r2, #0]
	  __HAL_TIM_SET_COUNTER(&htim5, 0);
 8001012:	4b06      	ldr	r3, [pc, #24]	@ (800102c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2200      	movs	r2, #0
 8001018:	625a      	str	r2, [r3, #36]	@ 0x24
//		  HAL_UART_Receive(&hlpuart1, rxBuffer, 4, 100);
//		  rxBuffer[2] = (rxBuffer[0]-69)/256;
//	  }

	  }
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	200001d4 	.word	0x200001d4
 800102c:	200002b8 	.word	0x200002b8
 8001030:	20000320 	.word	0x20000320
 8001034:	46ff4c00 	.word	0x46ff4c00
 8001038:	20000310 	.word	0x20000310
 800103c:	47800000 	.word	0x47800000
 8001040:	2000030c 	.word	0x2000030c
 8001044:	20000324 	.word	0x20000324

08001048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800104c:	b672      	cpsid	i
}
 800104e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <Error_Handler+0x8>

08001054 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <HAL_MspInit+0x44>)
 800105c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800105e:	4a0e      	ldr	r2, [pc, #56]	@ (8001098 <HAL_MspInit+0x44>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6613      	str	r3, [r2, #96]	@ 0x60
 8001066:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <HAL_MspInit+0x44>)
 8001068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001072:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <HAL_MspInit+0x44>)
 8001074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001076:	4a08      	ldr	r2, [pc, #32]	@ (8001098 <HAL_MspInit+0x44>)
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800107c:	6593      	str	r3, [r2, #88]	@ 0x58
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <HAL_MspInit+0x44>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800108a:	f002 fff5 	bl	8004078 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000

0800109c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b09e      	sub	sp, #120	@ 0x78
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	2254      	movs	r2, #84	@ 0x54
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f006 ff49 	bl	8007f54 <memset>
  if(hadc->Instance==ADC1)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010ca:	d167      	bne.n	800119c <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80010cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010d0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80010d2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80010d6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 fd09 	bl	8004af4 <HAL_RCCEx_PeriphCLKConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80010e8:	f7ff ffae 	bl	8001048 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010ec:	4b2d      	ldr	r3, [pc, #180]	@ (80011a4 <HAL_ADC_MspInit+0x108>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f0:	4a2c      	ldr	r2, [pc, #176]	@ (80011a4 <HAL_ADC_MspInit+0x108>)
 80010f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f8:	4b2a      	ldr	r3, [pc, #168]	@ (80011a4 <HAL_ADC_MspInit+0x108>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4b27      	ldr	r3, [pc, #156]	@ (80011a4 <HAL_ADC_MspInit+0x108>)
 8001106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001108:	4a26      	ldr	r2, [pc, #152]	@ (80011a4 <HAL_ADC_MspInit+0x108>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001110:	4b24      	ldr	r3, [pc, #144]	@ (80011a4 <HAL_ADC_MspInit+0x108>)
 8001112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800111c:	2303      	movs	r3, #3
 800111e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001120:	2303      	movs	r3, #3
 8001122:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800112c:	4619      	mov	r1, r3
 800112e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001132:	f002 fd3f 	bl	8003bb4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001136:	4b1c      	ldr	r3, [pc, #112]	@ (80011a8 <HAL_ADC_MspInit+0x10c>)
 8001138:	4a1c      	ldr	r2, [pc, #112]	@ (80011ac <HAL_ADC_MspInit+0x110>)
 800113a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800113c:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <HAL_ADC_MspInit+0x10c>)
 800113e:	2205      	movs	r2, #5
 8001140:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001142:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <HAL_ADC_MspInit+0x10c>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001148:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <HAL_ADC_MspInit+0x10c>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800114e:	4b16      	ldr	r3, [pc, #88]	@ (80011a8 <HAL_ADC_MspInit+0x10c>)
 8001150:	2280      	movs	r2, #128	@ 0x80
 8001152:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001154:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <HAL_ADC_MspInit+0x10c>)
 8001156:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800115a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800115c:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <HAL_ADC_MspInit+0x10c>)
 800115e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001162:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001164:	4b10      	ldr	r3, [pc, #64]	@ (80011a8 <HAL_ADC_MspInit+0x10c>)
 8001166:	2220      	movs	r2, #32
 8001168:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800116a:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <HAL_ADC_MspInit+0x10c>)
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001170:	480d      	ldr	r0, [pc, #52]	@ (80011a8 <HAL_ADC_MspInit+0x10c>)
 8001172:	f002 f9ed 	bl	8003550 <HAL_DMA_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800117c:	f7ff ff64 	bl	8001048 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a09      	ldr	r2, [pc, #36]	@ (80011a8 <HAL_ADC_MspInit+0x10c>)
 8001184:	655a      	str	r2, [r3, #84]	@ 0x54
 8001186:	4a08      	ldr	r2, [pc, #32]	@ (80011a8 <HAL_ADC_MspInit+0x10c>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2012      	movs	r0, #18
 8001192:	f002 f9a8 	bl	80034e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001196:	2012      	movs	r0, #18
 8001198:	f002 f9bf 	bl	800351a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800119c:	bf00      	nop
 800119e:	3778      	adds	r7, #120	@ 0x78
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40021000 	.word	0x40021000
 80011a8:	20000094 	.word	0x20000094
 80011ac:	40020008 	.word	0x40020008

080011b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b09e      	sub	sp, #120	@ 0x78
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	2254      	movs	r2, #84	@ 0x54
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f006 febf 	bl	8007f54 <memset>
  if(huart->Instance==LPUART1)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a23      	ldr	r2, [pc, #140]	@ (8001268 <HAL_UART_MspInit+0xb8>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d13e      	bne.n	800125e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80011e0:	2320      	movs	r3, #32
 80011e2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4618      	mov	r0, r3
 80011ee:	f003 fc81 	bl	8004af4 <HAL_RCCEx_PeriphCLKConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011f8:	f7ff ff26 	bl	8001048 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80011fc:	4b1b      	ldr	r3, [pc, #108]	@ (800126c <HAL_UART_MspInit+0xbc>)
 80011fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001200:	4a1a      	ldr	r2, [pc, #104]	@ (800126c <HAL_UART_MspInit+0xbc>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001208:	4b18      	ldr	r3, [pc, #96]	@ (800126c <HAL_UART_MspInit+0xbc>)
 800120a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001214:	4b15      	ldr	r3, [pc, #84]	@ (800126c <HAL_UART_MspInit+0xbc>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001218:	4a14      	ldr	r2, [pc, #80]	@ (800126c <HAL_UART_MspInit+0xbc>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001220:	4b12      	ldr	r3, [pc, #72]	@ (800126c <HAL_UART_MspInit+0xbc>)
 8001222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800122c:	230c      	movs	r3, #12
 800122e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800123c:	230c      	movs	r3, #12
 800123e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001244:	4619      	mov	r1, r3
 8001246:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800124a:	f002 fcb3 	bl	8003bb4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	205b      	movs	r0, #91	@ 0x5b
 8001254:	f002 f947 	bl	80034e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001258:	205b      	movs	r0, #91	@ 0x5b
 800125a:	f002 f95e 	bl	800351a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800125e:	bf00      	nop
 8001260:	3778      	adds	r7, #120	@ 0x78
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40008000 	.word	0x40008000
 800126c:	40021000 	.word	0x40021000

08001270 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a2c      	ldr	r2, [pc, #176]	@ (8001330 <HAL_TIM_Base_MspInit+0xc0>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d10c      	bne.n	800129c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001282:	4b2c      	ldr	r3, [pc, #176]	@ (8001334 <HAL_TIM_Base_MspInit+0xc4>)
 8001284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001286:	4a2b      	ldr	r2, [pc, #172]	@ (8001334 <HAL_TIM_Base_MspInit+0xc4>)
 8001288:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800128c:	6613      	str	r3, [r2, #96]	@ 0x60
 800128e:	4b29      	ldr	r3, [pc, #164]	@ (8001334 <HAL_TIM_Base_MspInit+0xc4>)
 8001290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001292:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800129a:	e044      	b.n	8001326 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012a4:	d114      	bne.n	80012d0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012a6:	4b23      	ldr	r3, [pc, #140]	@ (8001334 <HAL_TIM_Base_MspInit+0xc4>)
 80012a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012aa:	4a22      	ldr	r2, [pc, #136]	@ (8001334 <HAL_TIM_Base_MspInit+0xc4>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80012b2:	4b20      	ldr	r3, [pc, #128]	@ (8001334 <HAL_TIM_Base_MspInit+0xc4>)
 80012b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2100      	movs	r1, #0
 80012c2:	201c      	movs	r0, #28
 80012c4:	f002 f90f 	bl	80034e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012c8:	201c      	movs	r0, #28
 80012ca:	f002 f926 	bl	800351a <HAL_NVIC_EnableIRQ>
}
 80012ce:	e02a      	b.n	8001326 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a18      	ldr	r2, [pc, #96]	@ (8001338 <HAL_TIM_Base_MspInit+0xc8>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d114      	bne.n	8001304 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012da:	4b16      	ldr	r3, [pc, #88]	@ (8001334 <HAL_TIM_Base_MspInit+0xc4>)
 80012dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012de:	4a15      	ldr	r2, [pc, #84]	@ (8001334 <HAL_TIM_Base_MspInit+0xc4>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012e6:	4b13      	ldr	r3, [pc, #76]	@ (8001334 <HAL_TIM_Base_MspInit+0xc4>)
 80012e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	201d      	movs	r0, #29
 80012f8:	f002 f8f5 	bl	80034e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012fc:	201d      	movs	r0, #29
 80012fe:	f002 f90c 	bl	800351a <HAL_NVIC_EnableIRQ>
}
 8001302:	e010      	b.n	8001326 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0c      	ldr	r2, [pc, #48]	@ (800133c <HAL_TIM_Base_MspInit+0xcc>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d10b      	bne.n	8001326 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800130e:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <HAL_TIM_Base_MspInit+0xc4>)
 8001310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001312:	4a08      	ldr	r2, [pc, #32]	@ (8001334 <HAL_TIM_Base_MspInit+0xc4>)
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	6593      	str	r3, [r2, #88]	@ 0x58
 800131a:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <HAL_TIM_Base_MspInit+0xc4>)
 800131c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40012c00 	.word	0x40012c00
 8001334:	40021000 	.word	0x40021000
 8001338:	40000400 	.word	0x40000400
 800133c:	40000800 	.word	0x40000800

08001340 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	@ 0x28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a25      	ldr	r2, [pc, #148]	@ (80013f4 <HAL_TIM_Encoder_MspInit+0xb4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d144      	bne.n	80013ec <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001362:	4b25      	ldr	r3, [pc, #148]	@ (80013f8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001366:	4a24      	ldr	r2, [pc, #144]	@ (80013f8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001368:	f043 0308 	orr.w	r3, r3, #8
 800136c:	6593      	str	r3, [r2, #88]	@ 0x58
 800136e:	4b22      	ldr	r3, [pc, #136]	@ (80013f8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137a:	4b1f      	ldr	r3, [pc, #124]	@ (80013f8 <HAL_TIM_Encoder_MspInit+0xb8>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	4a1e      	ldr	r2, [pc, #120]	@ (80013f8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001386:	4b1c      	ldr	r3, [pc, #112]	@ (80013f8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001392:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001396:	4a18      	ldr	r2, [pc, #96]	@ (80013f8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800139e:	4b16      	ldr	r3, [pc, #88]	@ (80013f8 <HAL_TIM_Encoder_MspInit+0xb8>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PB2     ------> TIM5_CH1
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013aa:	2304      	movs	r3, #4
 80013ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80013ba:	2302      	movs	r3, #2
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	480d      	ldr	r0, [pc, #52]	@ (80013fc <HAL_TIM_Encoder_MspInit+0xbc>)
 80013c6:	f002 fbf5 	bl	8003bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2300      	movs	r3, #0
 80013da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 80013dc:	2301      	movs	r3, #1
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	4806      	ldr	r0, [pc, #24]	@ (8001400 <HAL_TIM_Encoder_MspInit+0xc0>)
 80013e8:	f002 fbe4 	bl	8003bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	@ 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40000c00 	.word	0x40000c00
 80013f8:	40021000 	.word	0x40021000
 80013fc:	48000400 	.word	0x48000400
 8001400:	48000800 	.word	0x48000800

08001404 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	@ 0x28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a23      	ldr	r2, [pc, #140]	@ (80014b0 <HAL_TIM_MspPostInit+0xac>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d11c      	bne.n	8001460 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001426:	4b23      	ldr	r3, [pc, #140]	@ (80014b4 <HAL_TIM_MspPostInit+0xb0>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142a:	4a22      	ldr	r2, [pc, #136]	@ (80014b4 <HAL_TIM_MspPostInit+0xb0>)
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001432:	4b20      	ldr	r3, [pc, #128]	@ (80014b4 <HAL_TIM_MspPostInit+0xb0>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800143e:	2301      	movs	r3, #1
 8001440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800144e:	2302      	movs	r3, #2
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	4817      	ldr	r0, [pc, #92]	@ (80014b8 <HAL_TIM_MspPostInit+0xb4>)
 800145a:	f002 fbab 	bl	8003bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800145e:	e022      	b.n	80014a6 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a15      	ldr	r2, [pc, #84]	@ (80014bc <HAL_TIM_MspPostInit+0xb8>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d11d      	bne.n	80014a6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <HAL_TIM_MspPostInit+0xb0>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	4a11      	ldr	r2, [pc, #68]	@ (80014b4 <HAL_TIM_MspPostInit+0xb0>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001476:	4b0f      	ldr	r3, [pc, #60]	@ (80014b4 <HAL_TIM_MspPostInit+0xb0>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001482:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001494:	230a      	movs	r3, #10
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a2:	f002 fb87 	bl	8003bb4 <HAL_GPIO_Init>
}
 80014a6:	bf00      	nop
 80014a8:	3728      	adds	r7, #40	@ 0x28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40012c00 	.word	0x40012c00
 80014b4:	40021000 	.word	0x40021000
 80014b8:	48000800 	.word	0x48000800
 80014bc:	40000800 	.word	0x40000800

080014c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <NMI_Handler+0x4>

080014c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <HardFault_Handler+0x4>

080014d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <MemManage_Handler+0x4>

080014d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <BusFault_Handler+0x4>

080014e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <UsageFault_Handler+0x4>

080014e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001516:	f000 f8cb 	bl	80016b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001524:	4802      	ldr	r0, [pc, #8]	@ (8001530 <DMA1_Channel1_IRQHandler+0x10>)
 8001526:	f002 f9f6 	bl	8003916 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000094 	.word	0x20000094

08001534 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001538:	4802      	ldr	r0, [pc, #8]	@ (8001544 <ADC1_2_IRQHandler+0x10>)
 800153a:	f000 fda7 	bl	800208c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000028 	.word	0x20000028

08001548 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800154c:	4802      	ldr	r0, [pc, #8]	@ (8001558 <TIM2_IRQHandler+0x10>)
 800154e:	f004 f907 	bl	8005760 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200001d4 	.word	0x200001d4

0800155c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001560:	4802      	ldr	r0, [pc, #8]	@ (800156c <TIM3_IRQHandler+0x10>)
 8001562:	f004 f8fd 	bl	8005760 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000220 	.word	0x20000220

08001570 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001574:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001578:	f002 fcb6 	bl	8003ee8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}

08001580 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001584:	4802      	ldr	r0, [pc, #8]	@ (8001590 <LPUART1_IRQHandler+0x10>)
 8001586:	f005 faed 	bl	8006b64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200000f4 	.word	0x200000f4

08001594 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <SystemInit+0x20>)
 800159a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800159e:	4a05      	ldr	r2, [pc, #20]	@ (80015b4 <SystemInit+0x20>)
 80015a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015b8:	480d      	ldr	r0, [pc, #52]	@ (80015f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015ba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015bc:	f7ff ffea 	bl	8001594 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c0:	480c      	ldr	r0, [pc, #48]	@ (80015f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80015c2:	490d      	ldr	r1, [pc, #52]	@ (80015f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015c4:	4a0d      	ldr	r2, [pc, #52]	@ (80015fc <LoopForever+0xe>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80015c8:	e002      	b.n	80015d0 <LoopCopyDataInit>

080015ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ce:	3304      	adds	r3, #4

080015d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d4:	d3f9      	bcc.n	80015ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001600 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001604 <LoopForever+0x16>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015dc:	e001      	b.n	80015e2 <LoopFillZerobss>

080015de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e0:	3204      	adds	r2, #4

080015e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e4:	d3fb      	bcc.n	80015de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015e6:	f006 fcbd 	bl	8007f64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ea:	f7fe ff8d 	bl	8000508 <main>

080015ee <LoopForever>:

LoopForever:
    b LoopForever
 80015ee:	e7fe      	b.n	80015ee <LoopForever>
  ldr   r0, =_estack
 80015f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015fc:	08008014 	.word	0x08008014
  ldr r2, =_sbss
 8001600:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001604:	200004ec 	.word	0x200004ec

08001608 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001608:	e7fe      	b.n	8001608 <ADC3_IRQHandler>

0800160a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001610:	2300      	movs	r3, #0
 8001612:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001614:	2003      	movs	r0, #3
 8001616:	f001 ff5b 	bl	80034d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800161a:	2000      	movs	r0, #0
 800161c:	f000 f80e 	bl	800163c <HAL_InitTick>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d002      	beq.n	800162c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	71fb      	strb	r3, [r7, #7]
 800162a:	e001      	b.n	8001630 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800162c:	f7ff fd12 	bl	8001054 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001630:	79fb      	ldrb	r3, [r7, #7]

}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001648:	4b16      	ldr	r3, [pc, #88]	@ (80016a4 <HAL_InitTick+0x68>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d022      	beq.n	8001696 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001650:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <HAL_InitTick+0x6c>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <HAL_InitTick+0x68>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800165c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001660:	fbb2 f3f3 	udiv	r3, r2, r3
 8001664:	4618      	mov	r0, r3
 8001666:	f001 ff66 	bl	8003536 <HAL_SYSTICK_Config>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d10f      	bne.n	8001690 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b0f      	cmp	r3, #15
 8001674:	d809      	bhi.n	800168a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001676:	2200      	movs	r2, #0
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	f04f 30ff 	mov.w	r0, #4294967295
 800167e:	f001 ff32 	bl	80034e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001682:	4a0a      	ldr	r2, [pc, #40]	@ (80016ac <HAL_InitTick+0x70>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	e007      	b.n	800169a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	73fb      	strb	r3, [r7, #15]
 800168e:	e004      	b.n	800169a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	73fb      	strb	r3, [r7, #15]
 8001694:	e001      	b.n	800169a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800169a:	7bfb      	ldrb	r3, [r7, #15]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000008 	.word	0x20000008
 80016a8:	20000000 	.word	0x20000000
 80016ac:	20000004 	.word	0x20000004

080016b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b4:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <HAL_IncTick+0x1c>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b05      	ldr	r3, [pc, #20]	@ (80016d0 <HAL_IncTick+0x20>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4413      	add	r3, r2
 80016be:	4a03      	ldr	r2, [pc, #12]	@ (80016cc <HAL_IncTick+0x1c>)
 80016c0:	6013      	str	r3, [r2, #0]
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	200004e8 	.word	0x200004e8
 80016d0:	20000008 	.word	0x20000008

080016d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return uwTick;
 80016d8:	4b03      	ldr	r3, [pc, #12]	@ (80016e8 <HAL_GetTick+0x14>)
 80016da:	681b      	ldr	r3, [r3, #0]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	200004e8 	.word	0x200004e8

080016ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	431a      	orrs	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	609a      	str	r2, [r3, #8]
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	609a      	str	r2, [r3, #8]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001754:	b480      	push	{r7}
 8001756:	b087      	sub	sp, #28
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	3360      	adds	r3, #96	@ 0x60
 8001766:	461a      	mov	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b08      	ldr	r3, [pc, #32]	@ (8001798 <LL_ADC_SetOffset+0x44>)
 8001776:	4013      	ands	r3, r2
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	4313      	orrs	r3, r2
 8001784:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800178c:	bf00      	nop
 800178e:	371c      	adds	r7, #28
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	03fff000 	.word	0x03fff000

0800179c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3360      	adds	r3, #96	@ 0x60
 80017aa:	461a      	mov	r2, r3
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b087      	sub	sp, #28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	3360      	adds	r3, #96	@ 0x60
 80017d8:	461a      	mov	r2, r3
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	431a      	orrs	r2, r3
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017f2:	bf00      	nop
 80017f4:	371c      	adds	r7, #28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80017fe:	b480      	push	{r7}
 8001800:	b087      	sub	sp, #28
 8001802:	af00      	add	r7, sp, #0
 8001804:	60f8      	str	r0, [r7, #12]
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	3360      	adds	r3, #96	@ 0x60
 800180e:	461a      	mov	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	431a      	orrs	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001828:	bf00      	nop
 800182a:	371c      	adds	r7, #28
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001834:	b480      	push	{r7}
 8001836:	b087      	sub	sp, #28
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	3360      	adds	r3, #96	@ 0x60
 8001844:	461a      	mov	r2, r3
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	431a      	orrs	r2, r3
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800185e:	bf00      	nop
 8001860:	371c      	adds	r7, #28
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	615a      	str	r2, [r3, #20]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018a4:	2301      	movs	r3, #1
 80018a6:	e000      	b.n	80018aa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b087      	sub	sp, #28
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	3330      	adds	r3, #48	@ 0x30
 80018c6:	461a      	mov	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	0a1b      	lsrs	r3, r3, #8
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	4413      	add	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	f003 031f 	and.w	r3, r3, #31
 80018e0:	211f      	movs	r1, #31
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	401a      	ands	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	0e9b      	lsrs	r3, r3, #26
 80018ee:	f003 011f 	and.w	r1, r3, #31
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	f003 031f 	and.w	r3, r3, #31
 80018f8:	fa01 f303 	lsl.w	r3, r1, r3
 80018fc:	431a      	orrs	r2, r3
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001902:	bf00      	nop
 8001904:	371c      	adds	r7, #28
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001934:	b480      	push	{r7}
 8001936:	b087      	sub	sp, #28
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3314      	adds	r3, #20
 8001944:	461a      	mov	r2, r3
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	0e5b      	lsrs	r3, r3, #25
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	4413      	add	r3, r2
 8001952:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	0d1b      	lsrs	r3, r3, #20
 800195c:	f003 031f 	and.w	r3, r3, #31
 8001960:	2107      	movs	r1, #7
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	401a      	ands	r2, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	0d1b      	lsrs	r3, r3, #20
 800196e:	f003 031f 	and.w	r3, r3, #31
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	431a      	orrs	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800197e:	bf00      	nop
 8001980:	371c      	adds	r7, #28
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a4:	43db      	mvns	r3, r3
 80019a6:	401a      	ands	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f003 0318 	and.w	r3, r3, #24
 80019ae:	4908      	ldr	r1, [pc, #32]	@ (80019d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019b0:	40d9      	lsrs	r1, r3
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	400b      	ands	r3, r1
 80019b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ba:	431a      	orrs	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	0007ffff 	.word	0x0007ffff

080019d4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 031f 	and.w	r3, r3, #31
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001a1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6093      	str	r3, [r2, #8]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a44:	d101      	bne.n	8001a4a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001a68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a6c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001a94:	d101      	bne.n	8001a9a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ab8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001abc:	f043 0201 	orr.w	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <LL_ADC_IsEnabled+0x18>
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <LL_ADC_IsEnabled+0x1a>
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b06:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b0a:	f043 0204 	orr.w	r2, r3, #4
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d101      	bne.n	8001b36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d101      	bne.n	8001b5c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b089      	sub	sp, #36	@ 0x24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e1a9      	b.n	8001eda <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d109      	bne.n	8001ba8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff fa81 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff3f 	bl	8001a30 <LL_ADC_IsDeepPowerDownEnabled>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d004      	beq.n	8001bc2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff25 	bl	8001a0c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff ff5a 	bl	8001a80 <LL_ADC_IsInternalRegulatorEnabled>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d115      	bne.n	8001bfe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff ff3e 	bl	8001a58 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bdc:	4b9c      	ldr	r3, [pc, #624]	@ (8001e50 <HAL_ADC_Init+0x2e4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	099b      	lsrs	r3, r3, #6
 8001be2:	4a9c      	ldr	r2, [pc, #624]	@ (8001e54 <HAL_ADC_Init+0x2e8>)
 8001be4:	fba2 2303 	umull	r2, r3, r2, r3
 8001be8:	099b      	lsrs	r3, r3, #6
 8001bea:	3301      	adds	r3, #1
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bf0:	e002      	b.n	8001bf8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f9      	bne.n	8001bf2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ff3c 	bl	8001a80 <LL_ADC_IsInternalRegulatorEnabled>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10d      	bne.n	8001c2a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c12:	f043 0210 	orr.w	r2, r3, #16
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c1e:	f043 0201 	orr.w	r2, r3, #1
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff ff75 	bl	8001b1e <LL_ADC_REG_IsConversionOngoing>
 8001c34:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c3a:	f003 0310 	and.w	r3, r3, #16
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f040 8142 	bne.w	8001ec8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f040 813e 	bne.w	8001ec8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c50:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c54:	f043 0202 	orr.w	r2, r3, #2
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff35 	bl	8001ad0 <LL_ADC_IsEnabled>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d141      	bne.n	8001cf0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c74:	d004      	beq.n	8001c80 <HAL_ADC_Init+0x114>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a77      	ldr	r2, [pc, #476]	@ (8001e58 <HAL_ADC_Init+0x2ec>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d10f      	bne.n	8001ca0 <HAL_ADC_Init+0x134>
 8001c80:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001c84:	f7ff ff24 	bl	8001ad0 <LL_ADC_IsEnabled>
 8001c88:	4604      	mov	r4, r0
 8001c8a:	4873      	ldr	r0, [pc, #460]	@ (8001e58 <HAL_ADC_Init+0x2ec>)
 8001c8c:	f7ff ff20 	bl	8001ad0 <LL_ADC_IsEnabled>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4323      	orrs	r3, r4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	e012      	b.n	8001cc6 <HAL_ADC_Init+0x15a>
 8001ca0:	486e      	ldr	r0, [pc, #440]	@ (8001e5c <HAL_ADC_Init+0x2f0>)
 8001ca2:	f7ff ff15 	bl	8001ad0 <LL_ADC_IsEnabled>
 8001ca6:	4604      	mov	r4, r0
 8001ca8:	486d      	ldr	r0, [pc, #436]	@ (8001e60 <HAL_ADC_Init+0x2f4>)
 8001caa:	f7ff ff11 	bl	8001ad0 <LL_ADC_IsEnabled>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	431c      	orrs	r4, r3
 8001cb2:	486c      	ldr	r0, [pc, #432]	@ (8001e64 <HAL_ADC_Init+0x2f8>)
 8001cb4:	f7ff ff0c 	bl	8001ad0 <LL_ADC_IsEnabled>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4323      	orrs	r3, r4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	bf0c      	ite	eq
 8001cc0:	2301      	moveq	r3, #1
 8001cc2:	2300      	movne	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d012      	beq.n	8001cf0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cd2:	d004      	beq.n	8001cde <HAL_ADC_Init+0x172>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a5f      	ldr	r2, [pc, #380]	@ (8001e58 <HAL_ADC_Init+0x2ec>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ADC_Init+0x176>
 8001cde:	4a62      	ldr	r2, [pc, #392]	@ (8001e68 <HAL_ADC_Init+0x2fc>)
 8001ce0:	e000      	b.n	8001ce4 <HAL_ADC_Init+0x178>
 8001ce2:	4a62      	ldr	r2, [pc, #392]	@ (8001e6c <HAL_ADC_Init+0x300>)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4610      	mov	r0, r2
 8001cec:	f7ff fcfe 	bl	80016ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	7f5b      	ldrb	r3, [r3, #29]
 8001cf4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cfa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d00:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d06:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d0e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d106      	bne.n	8001d2c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d22:	3b01      	subs	r3, #1
 8001d24:	045b      	lsls	r3, r3, #17
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d009      	beq.n	8001d48 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d38:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d40:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	4b48      	ldr	r3, [pc, #288]	@ (8001e70 <HAL_ADC_Init+0x304>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	69b9      	ldr	r1, [r7, #24]
 8001d58:	430b      	orrs	r3, r1
 8001d5a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fee4 	bl	8001b44 <LL_ADC_INJ_IsConversionOngoing>
 8001d7c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d17f      	bne.n	8001e84 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d17c      	bne.n	8001e84 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d8e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d96:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001da6:	f023 0302 	bic.w	r3, r3, #2
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	69b9      	ldr	r1, [r7, #24]
 8001db0:	430b      	orrs	r3, r1
 8001db2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d017      	beq.n	8001dec <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691a      	ldr	r2, [r3, #16]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001dca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001dd4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001dd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6911      	ldr	r1, [r2, #16]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	430b      	orrs	r3, r1
 8001de6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001dea:	e013      	b.n	8001e14 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691a      	ldr	r2, [r3, #16]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001dfa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001e0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e10:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d12a      	bne.n	8001e74 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001e28:	f023 0304 	bic.w	r3, r3, #4
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e34:	4311      	orrs	r1, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001e3a:	4311      	orrs	r1, r2
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e40:	430a      	orrs	r2, r1
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 0201 	orr.w	r2, r2, #1
 8001e4c:	611a      	str	r2, [r3, #16]
 8001e4e:	e019      	b.n	8001e84 <HAL_ADC_Init+0x318>
 8001e50:	20000000 	.word	0x20000000
 8001e54:	053e2d63 	.word	0x053e2d63
 8001e58:	50000100 	.word	0x50000100
 8001e5c:	50000400 	.word	0x50000400
 8001e60:	50000500 	.word	0x50000500
 8001e64:	50000600 	.word	0x50000600
 8001e68:	50000300 	.word	0x50000300
 8001e6c:	50000700 	.word	0x50000700
 8001e70:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691a      	ldr	r2, [r3, #16]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d10c      	bne.n	8001ea6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	f023 010f 	bic.w	r1, r3, #15
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	1e5a      	subs	r2, r3, #1
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ea4:	e007      	b.n	8001eb6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 020f 	bic.w	r2, r2, #15
 8001eb4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eba:	f023 0303 	bic.w	r3, r3, #3
 8001ebe:	f043 0201 	orr.w	r2, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ec6:	e007      	b.n	8001ed8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ecc:	f043 0210 	orr.w	r2, r3, #16
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ed8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3724      	adds	r7, #36	@ 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd90      	pop	{r4, r7, pc}
 8001ee2:	bf00      	nop

08001ee4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ef8:	d004      	beq.n	8001f04 <HAL_ADC_Start_DMA+0x20>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a5a      	ldr	r2, [pc, #360]	@ (8002068 <HAL_ADC_Start_DMA+0x184>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d101      	bne.n	8001f08 <HAL_ADC_Start_DMA+0x24>
 8001f04:	4b59      	ldr	r3, [pc, #356]	@ (800206c <HAL_ADC_Start_DMA+0x188>)
 8001f06:	e000      	b.n	8001f0a <HAL_ADC_Start_DMA+0x26>
 8001f08:	4b59      	ldr	r3, [pc, #356]	@ (8002070 <HAL_ADC_Start_DMA+0x18c>)
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fd62 	bl	80019d4 <LL_ADC_GetMultimode>
 8001f10:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fe01 	bl	8001b1e <LL_ADC_REG_IsConversionOngoing>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f040 809b 	bne.w	800205a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_ADC_Start_DMA+0x4e>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e096      	b.n	8002060 <HAL_ADC_Start_DMA+0x17c>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a4d      	ldr	r2, [pc, #308]	@ (8002074 <HAL_ADC_Start_DMA+0x190>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d008      	beq.n	8001f56 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	2b05      	cmp	r3, #5
 8001f4e:	d002      	beq.n	8001f56 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	2b09      	cmp	r3, #9
 8001f54:	d17a      	bne.n	800204c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 ff60 	bl	8002e1c <ADC_Enable>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001f60:	7dfb      	ldrb	r3, [r7, #23]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d16d      	bne.n	8002042 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f6a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f6e:	f023 0301 	bic.w	r3, r3, #1
 8001f72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a3a      	ldr	r2, [pc, #232]	@ (8002068 <HAL_ADC_Start_DMA+0x184>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d009      	beq.n	8001f98 <HAL_ADC_Start_DMA+0xb4>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a3b      	ldr	r2, [pc, #236]	@ (8002078 <HAL_ADC_Start_DMA+0x194>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d002      	beq.n	8001f94 <HAL_ADC_Start_DMA+0xb0>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	e003      	b.n	8001f9c <HAL_ADC_Start_DMA+0xb8>
 8001f94:	4b39      	ldr	r3, [pc, #228]	@ (800207c <HAL_ADC_Start_DMA+0x198>)
 8001f96:	e001      	b.n	8001f9c <HAL_ADC_Start_DMA+0xb8>
 8001f98:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d002      	beq.n	8001faa <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d105      	bne.n	8001fb6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fae:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d006      	beq.n	8001fd0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fc6:	f023 0206 	bic.w	r2, r3, #6
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	661a      	str	r2, [r3, #96]	@ 0x60
 8001fce:	e002      	b.n	8001fd6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fda:	4a29      	ldr	r2, [pc, #164]	@ (8002080 <HAL_ADC_Start_DMA+0x19c>)
 8001fdc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe2:	4a28      	ldr	r2, [pc, #160]	@ (8002084 <HAL_ADC_Start_DMA+0x1a0>)
 8001fe4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fea:	4a27      	ldr	r2, [pc, #156]	@ (8002088 <HAL_ADC_Start_DMA+0x1a4>)
 8001fec:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	221c      	movs	r2, #28
 8001ff4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f042 0210 	orr.w	r2, r2, #16
 800200c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f042 0201 	orr.w	r2, r2, #1
 800201c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	3340      	adds	r3, #64	@ 0x40
 8002028:	4619      	mov	r1, r3
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f001 fb37 	bl	80036a0 <HAL_DMA_Start_IT>
 8002032:	4603      	mov	r3, r0
 8002034:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fd5b 	bl	8001af6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002040:	e00d      	b.n	800205e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800204a:	e008      	b.n	800205e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002058:	e001      	b.n	800205e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800205a:	2302      	movs	r3, #2
 800205c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800205e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	50000100 	.word	0x50000100
 800206c:	50000300 	.word	0x50000300
 8002070:	50000700 	.word	0x50000700
 8002074:	50000600 	.word	0x50000600
 8002078:	50000500 	.word	0x50000500
 800207c:	50000400 	.word	0x50000400
 8002080:	08002f49 	.word	0x08002f49
 8002084:	08003021 	.word	0x08003021
 8002088:	0800303d 	.word	0x0800303d

0800208c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	@ 0x28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002094:	2300      	movs	r3, #0
 8002096:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020b0:	d004      	beq.n	80020bc <HAL_ADC_IRQHandler+0x30>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a8e      	ldr	r2, [pc, #568]	@ (80022f0 <HAL_ADC_IRQHandler+0x264>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d101      	bne.n	80020c0 <HAL_ADC_IRQHandler+0x34>
 80020bc:	4b8d      	ldr	r3, [pc, #564]	@ (80022f4 <HAL_ADC_IRQHandler+0x268>)
 80020be:	e000      	b.n	80020c2 <HAL_ADC_IRQHandler+0x36>
 80020c0:	4b8d      	ldr	r3, [pc, #564]	@ (80022f8 <HAL_ADC_IRQHandler+0x26c>)
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fc86 	bl	80019d4 <LL_ADC_GetMultimode>
 80020c8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d017      	beq.n	8002104 <HAL_ADC_IRQHandler+0x78>
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d012      	beq.n	8002104 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e2:	f003 0310 	and.w	r3, r3, #16
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d105      	bne.n	80020f6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ee:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f001 f808 	bl	800310c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2202      	movs	r2, #2
 8002102:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b00      	cmp	r3, #0
 800210c:	d004      	beq.n	8002118 <HAL_ADC_IRQHandler+0x8c>
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10b      	bne.n	8002130 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 8094 	beq.w	800224c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 808e 	beq.w	800224c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	d105      	bne.n	8002148 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002140:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fb9f 	bl	8001890 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d072      	beq.n	800223e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a64      	ldr	r2, [pc, #400]	@ (80022f0 <HAL_ADC_IRQHandler+0x264>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d009      	beq.n	8002176 <HAL_ADC_IRQHandler+0xea>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a65      	ldr	r2, [pc, #404]	@ (80022fc <HAL_ADC_IRQHandler+0x270>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d002      	beq.n	8002172 <HAL_ADC_IRQHandler+0xe6>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	e003      	b.n	800217a <HAL_ADC_IRQHandler+0xee>
 8002172:	4b63      	ldr	r3, [pc, #396]	@ (8002300 <HAL_ADC_IRQHandler+0x274>)
 8002174:	e001      	b.n	800217a <HAL_ADC_IRQHandler+0xee>
 8002176:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	4293      	cmp	r3, r2
 8002180:	d008      	beq.n	8002194 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	2b05      	cmp	r3, #5
 800218c:	d002      	beq.n	8002194 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	2b09      	cmp	r3, #9
 8002192:	d104      	bne.n	800219e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	623b      	str	r3, [r7, #32]
 800219c:	e014      	b.n	80021c8 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a53      	ldr	r2, [pc, #332]	@ (80022f0 <HAL_ADC_IRQHandler+0x264>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d009      	beq.n	80021bc <HAL_ADC_IRQHandler+0x130>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a53      	ldr	r2, [pc, #332]	@ (80022fc <HAL_ADC_IRQHandler+0x270>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d002      	beq.n	80021b8 <HAL_ADC_IRQHandler+0x12c>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	e003      	b.n	80021c0 <HAL_ADC_IRQHandler+0x134>
 80021b8:	4b51      	ldr	r3, [pc, #324]	@ (8002300 <HAL_ADC_IRQHandler+0x274>)
 80021ba:	e001      	b.n	80021c0 <HAL_ADC_IRQHandler+0x134>
 80021bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80021c0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d135      	bne.n	800223e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d12e      	bne.n	800223e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fc9a 	bl	8001b1e <LL_ADC_REG_IsConversionOngoing>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d11a      	bne.n	8002226 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 020c 	bic.w	r2, r2, #12
 80021fe:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002204:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002210:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d112      	bne.n	800223e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800221c:	f043 0201 	orr.w	r2, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002224:	e00b      	b.n	800223e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800222a:	f043 0210 	orr.w	r2, r3, #16
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002236:	f043 0201 	orr.w	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f984 	bl	800254c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	220c      	movs	r2, #12
 800224a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f003 0320 	and.w	r3, r3, #32
 8002252:	2b00      	cmp	r3, #0
 8002254:	d004      	beq.n	8002260 <HAL_ADC_IRQHandler+0x1d4>
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	f003 0320 	and.w	r3, r3, #32
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10b      	bne.n	8002278 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 80b3 	beq.w	80023d2 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 80ad 	beq.w	80023d2 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227c:	f003 0310 	and.w	r3, r3, #16
 8002280:	2b00      	cmp	r3, #0
 8002282:	d105      	bne.n	8002290 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002288:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fb3a 	bl	800190e <LL_ADC_INJ_IsTriggerSourceSWStart>
 800229a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff faf5 	bl	8001890 <LL_ADC_REG_IsTriggerSourceSWStart>
 80022a6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a10      	ldr	r2, [pc, #64]	@ (80022f0 <HAL_ADC_IRQHandler+0x264>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d009      	beq.n	80022c6 <HAL_ADC_IRQHandler+0x23a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a11      	ldr	r2, [pc, #68]	@ (80022fc <HAL_ADC_IRQHandler+0x270>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d002      	beq.n	80022c2 <HAL_ADC_IRQHandler+0x236>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	e003      	b.n	80022ca <HAL_ADC_IRQHandler+0x23e>
 80022c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002300 <HAL_ADC_IRQHandler+0x274>)
 80022c4:	e001      	b.n	80022ca <HAL_ADC_IRQHandler+0x23e>
 80022c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d008      	beq.n	80022e4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d002      	beq.n	80022e4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	2b07      	cmp	r3, #7
 80022e2:	d10f      	bne.n	8002304 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	623b      	str	r3, [r7, #32]
 80022ec:	e01f      	b.n	800232e <HAL_ADC_IRQHandler+0x2a2>
 80022ee:	bf00      	nop
 80022f0:	50000100 	.word	0x50000100
 80022f4:	50000300 	.word	0x50000300
 80022f8:	50000700 	.word	0x50000700
 80022fc:	50000500 	.word	0x50000500
 8002300:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a8b      	ldr	r2, [pc, #556]	@ (8002538 <HAL_ADC_IRQHandler+0x4ac>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d009      	beq.n	8002322 <HAL_ADC_IRQHandler+0x296>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a8a      	ldr	r2, [pc, #552]	@ (800253c <HAL_ADC_IRQHandler+0x4b0>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d002      	beq.n	800231e <HAL_ADC_IRQHandler+0x292>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	e003      	b.n	8002326 <HAL_ADC_IRQHandler+0x29a>
 800231e:	4b88      	ldr	r3, [pc, #544]	@ (8002540 <HAL_ADC_IRQHandler+0x4b4>)
 8002320:	e001      	b.n	8002326 <HAL_ADC_IRQHandler+0x29a>
 8002322:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002326:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d047      	beq.n	80023c4 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d007      	beq.n	800234e <HAL_ADC_IRQHandler+0x2c2>
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d03f      	beq.n	80023c4 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800234a:	2b00      	cmp	r3, #0
 800234c:	d13a      	bne.n	80023c4 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002358:	2b40      	cmp	r3, #64	@ 0x40
 800235a:	d133      	bne.n	80023c4 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d12e      	bne.n	80023c4 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fbea 	bl	8001b44 <LL_ADC_INJ_IsConversionOngoing>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d11a      	bne.n	80023ac <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002384:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800238a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800239a:	2b00      	cmp	r3, #0
 800239c:	d112      	bne.n	80023c4 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a2:	f043 0201 	orr.w	r2, r3, #1
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023aa:	e00b      	b.n	80023c4 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b0:	f043 0210 	orr.w	r2, r3, #16
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023bc:	f043 0201 	orr.w	r2, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 fe79 	bl	80030bc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2260      	movs	r2, #96	@ 0x60
 80023d0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d011      	beq.n	8002400 <HAL_ADC_IRQHandler+0x374>
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00c      	beq.n	8002400 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ea:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f8be 	bl	8002574 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2280      	movs	r2, #128	@ 0x80
 80023fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002406:	2b00      	cmp	r3, #0
 8002408:	d012      	beq.n	8002430 <HAL_ADC_IRQHandler+0x3a4>
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00d      	beq.n	8002430 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002418:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 fe5f 	bl	80030e4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800242e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002436:	2b00      	cmp	r3, #0
 8002438:	d012      	beq.n	8002460 <HAL_ADC_IRQHandler+0x3d4>
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00d      	beq.n	8002460 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002448:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 fe51 	bl	80030f8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800245e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f003 0310 	and.w	r3, r3, #16
 8002466:	2b00      	cmp	r3, #0
 8002468:	d043      	beq.n	80024f2 <HAL_ADC_IRQHandler+0x466>
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	f003 0310 	and.w	r3, r3, #16
 8002470:	2b00      	cmp	r3, #0
 8002472:	d03e      	beq.n	80024f2 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002478:	2b00      	cmp	r3, #0
 800247a:	d102      	bne.n	8002482 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 800247c:	2301      	movs	r3, #1
 800247e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002480:	e021      	b.n	80024c6 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d015      	beq.n	80024b4 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002490:	d004      	beq.n	800249c <HAL_ADC_IRQHandler+0x410>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a28      	ldr	r2, [pc, #160]	@ (8002538 <HAL_ADC_IRQHandler+0x4ac>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d101      	bne.n	80024a0 <HAL_ADC_IRQHandler+0x414>
 800249c:	4b29      	ldr	r3, [pc, #164]	@ (8002544 <HAL_ADC_IRQHandler+0x4b8>)
 800249e:	e000      	b.n	80024a2 <HAL_ADC_IRQHandler+0x416>
 80024a0:	4b29      	ldr	r3, [pc, #164]	@ (8002548 <HAL_ADC_IRQHandler+0x4bc>)
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff faa4 	bl	80019f0 <LL_ADC_GetMultiDMATransfer>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00b      	beq.n	80024c6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80024ae:	2301      	movs	r3, #1
 80024b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80024b2:	e008      	b.n	80024c6 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80024c2:	2301      	movs	r3, #1
 80024c4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80024c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d10e      	bne.n	80024ea <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024dc:	f043 0202 	orr.w	r2, r3, #2
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f84f 	bl	8002588 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2210      	movs	r2, #16
 80024f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d018      	beq.n	800252e <HAL_ADC_IRQHandler+0x4a2>
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002502:	2b00      	cmp	r3, #0
 8002504:	d013      	beq.n	800252e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800250a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002516:	f043 0208 	orr.w	r2, r3, #8
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002526:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 fdd1 	bl	80030d0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800252e:	bf00      	nop
 8002530:	3728      	adds	r7, #40	@ 0x28
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	50000100 	.word	0x50000100
 800253c:	50000500 	.word	0x50000500
 8002540:	50000400 	.word	0x50000400
 8002544:	50000300 	.word	0x50000300
 8002548:	50000700 	.word	0x50000700

0800254c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b0b6      	sub	sp, #216	@ 0xd8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d102      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x24>
 80025ba:	2302      	movs	r3, #2
 80025bc:	f000 bc13 	b.w	8002de6 <HAL_ADC_ConfigChannel+0x84a>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff faa6 	bl	8001b1e <LL_ADC_REG_IsConversionOngoing>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f040 83f3 	bne.w	8002dc0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	6859      	ldr	r1, [r3, #4]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	f7ff f965 	bl	80018b6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fa94 	bl	8001b1e <LL_ADC_REG_IsConversionOngoing>
 80025f6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff faa0 	bl	8001b44 <LL_ADC_INJ_IsConversionOngoing>
 8002604:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002608:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800260c:	2b00      	cmp	r3, #0
 800260e:	f040 81d9 	bne.w	80029c4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002612:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 81d4 	bne.w	80029c4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002624:	d10f      	bne.n	8002646 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2200      	movs	r2, #0
 8002630:	4619      	mov	r1, r3
 8002632:	f7ff f97f 	bl	8001934 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff f913 	bl	800186a <LL_ADC_SetSamplingTimeCommonConfig>
 8002644:	e00e      	b.n	8002664 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6818      	ldr	r0, [r3, #0]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	6819      	ldr	r1, [r3, #0]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	461a      	mov	r2, r3
 8002654:	f7ff f96e 	bl	8001934 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2100      	movs	r1, #0
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff f903 	bl	800186a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	695a      	ldr	r2, [r3, #20]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	08db      	lsrs	r3, r3, #3
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	2b04      	cmp	r3, #4
 8002684:	d022      	beq.n	80026cc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	6919      	ldr	r1, [r3, #16]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002696:	f7ff f85d 	bl	8001754 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	6919      	ldr	r1, [r3, #16]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	461a      	mov	r2, r3
 80026a8:	f7ff f8a9 	bl	80017fe <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d102      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x126>
 80026bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026c0:	e000      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x128>
 80026c2:	2300      	movs	r3, #0
 80026c4:	461a      	mov	r2, r3
 80026c6:	f7ff f8b5 	bl	8001834 <LL_ADC_SetOffsetSaturation>
 80026ca:	e17b      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2100      	movs	r1, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff f862 	bl	800179c <LL_ADC_GetOffsetChannel>
 80026d8:	4603      	mov	r3, r0
 80026da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10a      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x15c>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2100      	movs	r1, #0
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff f857 	bl	800179c <LL_ADC_GetOffsetChannel>
 80026ee:	4603      	mov	r3, r0
 80026f0:	0e9b      	lsrs	r3, r3, #26
 80026f2:	f003 021f 	and.w	r2, r3, #31
 80026f6:	e01e      	b.n	8002736 <HAL_ADC_ConfigChannel+0x19a>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2100      	movs	r1, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff f84c 	bl	800179c <LL_ADC_GetOffsetChannel>
 8002704:	4603      	mov	r3, r0
 8002706:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800270e:	fa93 f3a3 	rbit	r3, r3
 8002712:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002716:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800271a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800271e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002726:	2320      	movs	r3, #32
 8002728:	e004      	b.n	8002734 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800272a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800272e:	fab3 f383 	clz	r3, r3
 8002732:	b2db      	uxtb	r3, r3
 8002734:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273e:	2b00      	cmp	r3, #0
 8002740:	d105      	bne.n	800274e <HAL_ADC_ConfigChannel+0x1b2>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	0e9b      	lsrs	r3, r3, #26
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	e018      	b.n	8002780 <HAL_ADC_ConfigChannel+0x1e4>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800275a:	fa93 f3a3 	rbit	r3, r3
 800275e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002766:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800276a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002772:	2320      	movs	r3, #32
 8002774:	e004      	b.n	8002780 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002776:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800277a:	fab3 f383 	clz	r3, r3
 800277e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002780:	429a      	cmp	r2, r3
 8002782:	d106      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2200      	movs	r2, #0
 800278a:	2100      	movs	r1, #0
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff f81b 	bl	80017c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2101      	movs	r1, #1
 8002798:	4618      	mov	r0, r3
 800279a:	f7fe ffff 	bl	800179c <LL_ADC_GetOffsetChannel>
 800279e:	4603      	mov	r3, r0
 80027a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10a      	bne.n	80027be <HAL_ADC_ConfigChannel+0x222>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2101      	movs	r1, #1
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fe fff4 	bl	800179c <LL_ADC_GetOffsetChannel>
 80027b4:	4603      	mov	r3, r0
 80027b6:	0e9b      	lsrs	r3, r3, #26
 80027b8:	f003 021f 	and.w	r2, r3, #31
 80027bc:	e01e      	b.n	80027fc <HAL_ADC_ConfigChannel+0x260>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2101      	movs	r1, #1
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe ffe9 	bl	800179c <LL_ADC_GetOffsetChannel>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027d4:	fa93 f3a3 	rbit	r3, r3
 80027d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80027dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80027e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80027ec:	2320      	movs	r3, #32
 80027ee:	e004      	b.n	80027fa <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80027f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027f4:	fab3 f383 	clz	r3, r3
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002804:	2b00      	cmp	r3, #0
 8002806:	d105      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x278>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	0e9b      	lsrs	r3, r3, #26
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	e018      	b.n	8002846 <HAL_ADC_ConfigChannel+0x2aa>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002820:	fa93 f3a3 	rbit	r3, r3
 8002824:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002828:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800282c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002830:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002838:	2320      	movs	r3, #32
 800283a:	e004      	b.n	8002846 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800283c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002840:	fab3 f383 	clz	r3, r3
 8002844:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002846:	429a      	cmp	r2, r3
 8002848:	d106      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2200      	movs	r2, #0
 8002850:	2101      	movs	r1, #1
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe ffb8 	bl	80017c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2102      	movs	r1, #2
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe ff9c 	bl	800179c <LL_ADC_GetOffsetChannel>
 8002864:	4603      	mov	r3, r0
 8002866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10a      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x2e8>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2102      	movs	r1, #2
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe ff91 	bl	800179c <LL_ADC_GetOffsetChannel>
 800287a:	4603      	mov	r3, r0
 800287c:	0e9b      	lsrs	r3, r3, #26
 800287e:	f003 021f 	and.w	r2, r3, #31
 8002882:	e01e      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x326>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2102      	movs	r1, #2
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe ff86 	bl	800179c <LL_ADC_GetOffsetChannel>
 8002890:	4603      	mov	r3, r0
 8002892:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80028a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80028aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80028b2:	2320      	movs	r3, #32
 80028b4:	e004      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80028b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028ba:	fab3 f383 	clz	r3, r3
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d105      	bne.n	80028da <HAL_ADC_ConfigChannel+0x33e>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	0e9b      	lsrs	r3, r3, #26
 80028d4:	f003 031f 	and.w	r3, r3, #31
 80028d8:	e016      	b.n	8002908 <HAL_ADC_ConfigChannel+0x36c>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80028ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80028f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80028fa:	2320      	movs	r3, #32
 80028fc:	e004      	b.n	8002908 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80028fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002902:	fab3 f383 	clz	r3, r3
 8002906:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002908:	429a      	cmp	r2, r3
 800290a:	d106      	bne.n	800291a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2200      	movs	r2, #0
 8002912:	2102      	movs	r1, #2
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe ff57 	bl	80017c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2103      	movs	r1, #3
 8002920:	4618      	mov	r0, r3
 8002922:	f7fe ff3b 	bl	800179c <LL_ADC_GetOffsetChannel>
 8002926:	4603      	mov	r3, r0
 8002928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10a      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x3aa>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2103      	movs	r1, #3
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe ff30 	bl	800179c <LL_ADC_GetOffsetChannel>
 800293c:	4603      	mov	r3, r0
 800293e:	0e9b      	lsrs	r3, r3, #26
 8002940:	f003 021f 	and.w	r2, r3, #31
 8002944:	e017      	b.n	8002976 <HAL_ADC_ConfigChannel+0x3da>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2103      	movs	r1, #3
 800294c:	4618      	mov	r0, r3
 800294e:	f7fe ff25 	bl	800179c <LL_ADC_GetOffsetChannel>
 8002952:	4603      	mov	r3, r0
 8002954:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002958:	fa93 f3a3 	rbit	r3, r3
 800295c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800295e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002960:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002962:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002968:	2320      	movs	r3, #32
 800296a:	e003      	b.n	8002974 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800296c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800296e:	fab3 f383 	clz	r3, r3
 8002972:	b2db      	uxtb	r3, r3
 8002974:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297e:	2b00      	cmp	r3, #0
 8002980:	d105      	bne.n	800298e <HAL_ADC_ConfigChannel+0x3f2>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0e9b      	lsrs	r3, r3, #26
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	e011      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x416>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800299c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800299e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80029a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80029a6:	2320      	movs	r3, #32
 80029a8:	e003      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80029aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d106      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2200      	movs	r2, #0
 80029bc:	2103      	movs	r1, #3
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe ff02 	bl	80017c8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff f881 	bl	8001ad0 <LL_ADC_IsEnabled>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f040 813d 	bne.w	8002c50 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6819      	ldr	r1, [r3, #0]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	461a      	mov	r2, r3
 80029e4:	f7fe ffd2 	bl	800198c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4aa2      	ldr	r2, [pc, #648]	@ (8002c78 <HAL_ADC_ConfigChannel+0x6dc>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	f040 812e 	bne.w	8002c50 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10b      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x480>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	0e9b      	lsrs	r3, r3, #26
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	2b09      	cmp	r3, #9
 8002a12:	bf94      	ite	ls
 8002a14:	2301      	movls	r3, #1
 8002a16:	2300      	movhi	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	e019      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x4b4>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a24:	fa93 f3a3 	rbit	r3, r3
 8002a28:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002a2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a2c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002a2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002a34:	2320      	movs	r3, #32
 8002a36:	e003      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002a38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	3301      	adds	r3, #1
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	2b09      	cmp	r3, #9
 8002a48:	bf94      	ite	ls
 8002a4a:	2301      	movls	r3, #1
 8002a4c:	2300      	movhi	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d079      	beq.n	8002b48 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d107      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x4d4>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	0e9b      	lsrs	r3, r3, #26
 8002a66:	3301      	adds	r3, #1
 8002a68:	069b      	lsls	r3, r3, #26
 8002a6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a6e:	e015      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x500>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002a7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a80:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002a88:	2320      	movs	r3, #32
 8002a8a:	e003      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002a8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	3301      	adds	r3, #1
 8002a96:	069b      	lsls	r3, r3, #26
 8002a98:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d109      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x520>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	0e9b      	lsrs	r3, r3, #26
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aba:	e017      	b.n	8002aec <HAL_ADC_ConfigChannel+0x550>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ac4:	fa93 f3a3 	rbit	r3, r3
 8002ac8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002aca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002acc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002ace:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002ad4:	2320      	movs	r3, #32
 8002ad6:	e003      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002ad8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ada:	fab3 f383 	clz	r3, r3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aec:	ea42 0103 	orr.w	r1, r2, r3
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10a      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x576>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	0e9b      	lsrs	r3, r3, #26
 8002b02:	3301      	adds	r3, #1
 8002b04:	f003 021f 	and.w	r2, r3, #31
 8002b08:	4613      	mov	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	051b      	lsls	r3, r3, #20
 8002b10:	e018      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x5a8>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b1a:	fa93 f3a3 	rbit	r3, r3
 8002b1e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002b24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002b2a:	2320      	movs	r3, #32
 8002b2c:	e003      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b30:	fab3 f383 	clz	r3, r3
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	3301      	adds	r3, #1
 8002b38:	f003 021f 	and.w	r2, r3, #31
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4413      	add	r3, r2
 8002b42:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b44:	430b      	orrs	r3, r1
 8002b46:	e07e      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d107      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x5c8>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	0e9b      	lsrs	r3, r3, #26
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	069b      	lsls	r3, r3, #26
 8002b5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b62:	e015      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x5f4>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b74:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002b7c:	2320      	movs	r3, #32
 8002b7e:	e003      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b82:	fab3 f383 	clz	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	3301      	adds	r3, #1
 8002b8a:	069b      	lsls	r3, r3, #26
 8002b8c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d109      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x614>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	0e9b      	lsrs	r3, r3, #26
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	2101      	movs	r1, #1
 8002baa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bae:	e017      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x644>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	61fb      	str	r3, [r7, #28]
  return result;
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002bc8:	2320      	movs	r3, #32
 8002bca:	e003      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f003 031f 	and.w	r3, r3, #31
 8002bda:	2101      	movs	r1, #1
 8002bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002be0:	ea42 0103 	orr.w	r1, r2, r3
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10d      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x670>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	0e9b      	lsrs	r3, r3, #26
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f003 021f 	and.w	r2, r3, #31
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	3b1e      	subs	r3, #30
 8002c04:	051b      	lsls	r3, r3, #20
 8002c06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c0a:	e01b      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x6a8>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	fa93 f3a3 	rbit	r3, r3
 8002c18:	613b      	str	r3, [r7, #16]
  return result;
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002c24:	2320      	movs	r3, #32
 8002c26:	e003      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	fab3 f383 	clz	r3, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	3301      	adds	r3, #1
 8002c32:	f003 021f 	and.w	r2, r3, #31
 8002c36:	4613      	mov	r3, r2
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3b1e      	subs	r3, #30
 8002c3e:	051b      	lsls	r3, r3, #20
 8002c40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c44:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	f7fe fe72 	bl	8001934 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4b09      	ldr	r3, [pc, #36]	@ (8002c7c <HAL_ADC_ConfigChannel+0x6e0>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80be 	beq.w	8002dda <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c66:	d004      	beq.n	8002c72 <HAL_ADC_ConfigChannel+0x6d6>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a04      	ldr	r2, [pc, #16]	@ (8002c80 <HAL_ADC_ConfigChannel+0x6e4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d10a      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x6ec>
 8002c72:	4b04      	ldr	r3, [pc, #16]	@ (8002c84 <HAL_ADC_ConfigChannel+0x6e8>)
 8002c74:	e009      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x6ee>
 8002c76:	bf00      	nop
 8002c78:	407f0000 	.word	0x407f0000
 8002c7c:	80080000 	.word	0x80080000
 8002c80:	50000100 	.word	0x50000100
 8002c84:	50000300 	.word	0x50000300
 8002c88:	4b59      	ldr	r3, [pc, #356]	@ (8002df0 <HAL_ADC_ConfigChannel+0x854>)
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fe fd54 	bl	8001738 <LL_ADC_GetCommonPathInternalCh>
 8002c90:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a56      	ldr	r2, [pc, #344]	@ (8002df4 <HAL_ADC_ConfigChannel+0x858>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d004      	beq.n	8002ca8 <HAL_ADC_ConfigChannel+0x70c>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a55      	ldr	r2, [pc, #340]	@ (8002df8 <HAL_ADC_ConfigChannel+0x85c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d13a      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ca8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d134      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cbc:	d005      	beq.n	8002cca <HAL_ADC_ConfigChannel+0x72e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a4e      	ldr	r2, [pc, #312]	@ (8002dfc <HAL_ADC_ConfigChannel+0x860>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	f040 8085 	bne.w	8002dd4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cd2:	d004      	beq.n	8002cde <HAL_ADC_ConfigChannel+0x742>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a49      	ldr	r2, [pc, #292]	@ (8002e00 <HAL_ADC_ConfigChannel+0x864>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d101      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x746>
 8002cde:	4a49      	ldr	r2, [pc, #292]	@ (8002e04 <HAL_ADC_ConfigChannel+0x868>)
 8002ce0:	e000      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x748>
 8002ce2:	4a43      	ldr	r2, [pc, #268]	@ (8002df0 <HAL_ADC_ConfigChannel+0x854>)
 8002ce4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ce8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002cec:	4619      	mov	r1, r3
 8002cee:	4610      	mov	r0, r2
 8002cf0:	f7fe fd0f 	bl	8001712 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cf4:	4b44      	ldr	r3, [pc, #272]	@ (8002e08 <HAL_ADC_ConfigChannel+0x86c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	099b      	lsrs	r3, r3, #6
 8002cfa:	4a44      	ldr	r2, [pc, #272]	@ (8002e0c <HAL_ADC_ConfigChannel+0x870>)
 8002cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002d00:	099b      	lsrs	r3, r3, #6
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	4613      	mov	r3, r2
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d0e:	e002      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1f9      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d1c:	e05a      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a3b      	ldr	r2, [pc, #236]	@ (8002e10 <HAL_ADC_ConfigChannel+0x874>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d125      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d11f      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a31      	ldr	r2, [pc, #196]	@ (8002e00 <HAL_ADC_ConfigChannel+0x864>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d104      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x7ac>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a34      	ldr	r2, [pc, #208]	@ (8002e14 <HAL_ADC_ConfigChannel+0x878>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d047      	beq.n	8002dd8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d50:	d004      	beq.n	8002d5c <HAL_ADC_ConfigChannel+0x7c0>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a2a      	ldr	r2, [pc, #168]	@ (8002e00 <HAL_ADC_ConfigChannel+0x864>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d101      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x7c4>
 8002d5c:	4a29      	ldr	r2, [pc, #164]	@ (8002e04 <HAL_ADC_ConfigChannel+0x868>)
 8002d5e:	e000      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x7c6>
 8002d60:	4a23      	ldr	r2, [pc, #140]	@ (8002df0 <HAL_ADC_ConfigChannel+0x854>)
 8002d62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	f7fe fcd0 	bl	8001712 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d72:	e031      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a27      	ldr	r2, [pc, #156]	@ (8002e18 <HAL_ADC_ConfigChannel+0x87c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d12d      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d127      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8002e00 <HAL_ADC_ConfigChannel+0x864>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d022      	beq.n	8002dda <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d9c:	d004      	beq.n	8002da8 <HAL_ADC_ConfigChannel+0x80c>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a17      	ldr	r2, [pc, #92]	@ (8002e00 <HAL_ADC_ConfigChannel+0x864>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d101      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x810>
 8002da8:	4a16      	ldr	r2, [pc, #88]	@ (8002e04 <HAL_ADC_ConfigChannel+0x868>)
 8002daa:	e000      	b.n	8002dae <HAL_ADC_ConfigChannel+0x812>
 8002dac:	4a10      	ldr	r2, [pc, #64]	@ (8002df0 <HAL_ADC_ConfigChannel+0x854>)
 8002dae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002db2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002db6:	4619      	mov	r1, r3
 8002db8:	4610      	mov	r0, r2
 8002dba:	f7fe fcaa 	bl	8001712 <LL_ADC_SetCommonPathInternalCh>
 8002dbe:	e00c      	b.n	8002dda <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc4:	f043 0220 	orr.w	r2, r3, #32
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002dd2:	e002      	b.n	8002dda <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dd4:	bf00      	nop
 8002dd6:	e000      	b.n	8002dda <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dd8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002de2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	37d8      	adds	r7, #216	@ 0xd8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	50000700 	.word	0x50000700
 8002df4:	c3210000 	.word	0xc3210000
 8002df8:	90c00010 	.word	0x90c00010
 8002dfc:	50000600 	.word	0x50000600
 8002e00:	50000100 	.word	0x50000100
 8002e04:	50000300 	.word	0x50000300
 8002e08:	20000000 	.word	0x20000000
 8002e0c:	053e2d63 	.word	0x053e2d63
 8002e10:	c7520000 	.word	0xc7520000
 8002e14:	50000500 	.word	0x50000500
 8002e18:	cb840000 	.word	0xcb840000

08002e1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fe fe4f 	bl	8001ad0 <LL_ADC_IsEnabled>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d176      	bne.n	8002f26 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f30 <ADC_Enable+0x114>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00d      	beq.n	8002e62 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e4a:	f043 0210 	orr.w	r2, r3, #16
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e56:	f043 0201 	orr.w	r2, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e062      	b.n	8002f28 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe fe1e 	bl	8001aa8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e74:	d004      	beq.n	8002e80 <ADC_Enable+0x64>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a2e      	ldr	r2, [pc, #184]	@ (8002f34 <ADC_Enable+0x118>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d101      	bne.n	8002e84 <ADC_Enable+0x68>
 8002e80:	4b2d      	ldr	r3, [pc, #180]	@ (8002f38 <ADC_Enable+0x11c>)
 8002e82:	e000      	b.n	8002e86 <ADC_Enable+0x6a>
 8002e84:	4b2d      	ldr	r3, [pc, #180]	@ (8002f3c <ADC_Enable+0x120>)
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fe fc56 	bl	8001738 <LL_ADC_GetCommonPathInternalCh>
 8002e8c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002e8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d013      	beq.n	8002ebe <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e96:	4b2a      	ldr	r3, [pc, #168]	@ (8002f40 <ADC_Enable+0x124>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	099b      	lsrs	r3, r3, #6
 8002e9c:	4a29      	ldr	r2, [pc, #164]	@ (8002f44 <ADC_Enable+0x128>)
 8002e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea2:	099b      	lsrs	r3, r3, #6
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002eb0:	e002      	b.n	8002eb8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f9      	bne.n	8002eb2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ebe:	f7fe fc09 	bl	80016d4 <HAL_GetTick>
 8002ec2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ec4:	e028      	b.n	8002f18 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe fe00 	bl	8001ad0 <LL_ADC_IsEnabled>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d104      	bne.n	8002ee0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fe fde4 	bl	8001aa8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ee0:	f7fe fbf8 	bl	80016d4 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d914      	bls.n	8002f18 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d00d      	beq.n	8002f18 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f00:	f043 0210 	orr.w	r2, r3, #16
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f0c:	f043 0201 	orr.w	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e007      	b.n	8002f28 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d1cf      	bne.n	8002ec6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	8000003f 	.word	0x8000003f
 8002f34:	50000100 	.word	0x50000100
 8002f38:	50000300 	.word	0x50000300
 8002f3c:	50000700 	.word	0x50000700
 8002f40:	20000000 	.word	0x20000000
 8002f44:	053e2d63 	.word	0x053e2d63

08002f48 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f54:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f5a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d14b      	bne.n	8002ffa <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f66:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d021      	beq.n	8002fc0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fe fc85 	bl	8001890 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d032      	beq.n	8002ff2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d12b      	bne.n	8002ff2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f9e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002faa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d11f      	bne.n	8002ff2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb6:	f043 0201 	orr.w	r2, r3, #1
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fbe:	e018      	b.n	8002ff2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d111      	bne.n	8002ff2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d105      	bne.n	8002ff2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fea:	f043 0201 	orr.w	r2, r3, #1
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f7ff faaa 	bl	800254c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ff8:	e00e      	b.n	8003018 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f7ff fabe 	bl	8002588 <HAL_ADC_ErrorCallback>
}
 800300c:	e004      	b.n	8003018 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	4798      	blx	r3
}
 8003018:	bf00      	nop
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f7ff fa96 	bl	8002560 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003034:	bf00      	nop
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003048:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800305a:	f043 0204 	orr.w	r2, r3, #4
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f7ff fa90 	bl	8002588 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003068:	bf00      	nop
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <LL_ADC_IsEnabled>:
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <LL_ADC_IsEnabled+0x18>
 8003084:	2301      	movs	r3, #1
 8003086:	e000      	b.n	800308a <LL_ADC_IsEnabled+0x1a>
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <LL_ADC_REG_IsConversionOngoing>:
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d101      	bne.n	80030ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003120:	b590      	push	{r4, r7, lr}
 8003122:	b0a1      	sub	sp, #132	@ 0x84
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800313a:	2302      	movs	r3, #2
 800313c:	e0e7      	b.n	800330e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003146:	2300      	movs	r3, #0
 8003148:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800314a:	2300      	movs	r3, #0
 800314c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003156:	d102      	bne.n	800315e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003158:	4b6f      	ldr	r3, [pc, #444]	@ (8003318 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800315a:	60bb      	str	r3, [r7, #8]
 800315c:	e009      	b.n	8003172 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a6e      	ldr	r2, [pc, #440]	@ (800331c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d102      	bne.n	800316e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003168:	4b6d      	ldr	r3, [pc, #436]	@ (8003320 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800316a:	60bb      	str	r3, [r7, #8]
 800316c:	e001      	b.n	8003172 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800316e:	2300      	movs	r3, #0
 8003170:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10b      	bne.n	8003190 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800317c:	f043 0220 	orr.w	r2, r3, #32
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0be      	b.n	800330e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff ff7f 	bl	8003096 <LL_ADC_REG_IsConversionOngoing>
 8003198:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff ff79 	bl	8003096 <LL_ADC_REG_IsConversionOngoing>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f040 80a0 	bne.w	80032ec <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80031ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f040 809c 	bne.w	80032ec <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031bc:	d004      	beq.n	80031c8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a55      	ldr	r2, [pc, #340]	@ (8003318 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d101      	bne.n	80031cc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80031c8:	4b56      	ldr	r3, [pc, #344]	@ (8003324 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80031ca:	e000      	b.n	80031ce <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80031cc:	4b56      	ldr	r3, [pc, #344]	@ (8003328 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80031ce:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d04b      	beq.n	8003270 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80031d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80031ea:	035b      	lsls	r3, r3, #13
 80031ec:	430b      	orrs	r3, r1
 80031ee:	431a      	orrs	r2, r3
 80031f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031f2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031fc:	d004      	beq.n	8003208 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a45      	ldr	r2, [pc, #276]	@ (8003318 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d10f      	bne.n	8003228 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003208:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800320c:	f7ff ff30 	bl	8003070 <LL_ADC_IsEnabled>
 8003210:	4604      	mov	r4, r0
 8003212:	4841      	ldr	r0, [pc, #260]	@ (8003318 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003214:	f7ff ff2c 	bl	8003070 <LL_ADC_IsEnabled>
 8003218:	4603      	mov	r3, r0
 800321a:	4323      	orrs	r3, r4
 800321c:	2b00      	cmp	r3, #0
 800321e:	bf0c      	ite	eq
 8003220:	2301      	moveq	r3, #1
 8003222:	2300      	movne	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	e012      	b.n	800324e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003228:	483c      	ldr	r0, [pc, #240]	@ (800331c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800322a:	f7ff ff21 	bl	8003070 <LL_ADC_IsEnabled>
 800322e:	4604      	mov	r4, r0
 8003230:	483b      	ldr	r0, [pc, #236]	@ (8003320 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003232:	f7ff ff1d 	bl	8003070 <LL_ADC_IsEnabled>
 8003236:	4603      	mov	r3, r0
 8003238:	431c      	orrs	r4, r3
 800323a:	483c      	ldr	r0, [pc, #240]	@ (800332c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800323c:	f7ff ff18 	bl	8003070 <LL_ADC_IsEnabled>
 8003240:	4603      	mov	r3, r0
 8003242:	4323      	orrs	r3, r4
 8003244:	2b00      	cmp	r3, #0
 8003246:	bf0c      	ite	eq
 8003248:	2301      	moveq	r3, #1
 800324a:	2300      	movne	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d056      	beq.n	8003300 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003252:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800325a:	f023 030f 	bic.w	r3, r3, #15
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	6811      	ldr	r1, [r2, #0]
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	6892      	ldr	r2, [r2, #8]
 8003266:	430a      	orrs	r2, r1
 8003268:	431a      	orrs	r2, r3
 800326a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800326c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800326e:	e047      	b.n	8003300 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003270:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003278:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800327a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003284:	d004      	beq.n	8003290 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a23      	ldr	r2, [pc, #140]	@ (8003318 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d10f      	bne.n	80032b0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003290:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003294:	f7ff feec 	bl	8003070 <LL_ADC_IsEnabled>
 8003298:	4604      	mov	r4, r0
 800329a:	481f      	ldr	r0, [pc, #124]	@ (8003318 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800329c:	f7ff fee8 	bl	8003070 <LL_ADC_IsEnabled>
 80032a0:	4603      	mov	r3, r0
 80032a2:	4323      	orrs	r3, r4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	bf0c      	ite	eq
 80032a8:	2301      	moveq	r3, #1
 80032aa:	2300      	movne	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	e012      	b.n	80032d6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80032b0:	481a      	ldr	r0, [pc, #104]	@ (800331c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80032b2:	f7ff fedd 	bl	8003070 <LL_ADC_IsEnabled>
 80032b6:	4604      	mov	r4, r0
 80032b8:	4819      	ldr	r0, [pc, #100]	@ (8003320 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80032ba:	f7ff fed9 	bl	8003070 <LL_ADC_IsEnabled>
 80032be:	4603      	mov	r3, r0
 80032c0:	431c      	orrs	r4, r3
 80032c2:	481a      	ldr	r0, [pc, #104]	@ (800332c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80032c4:	f7ff fed4 	bl	8003070 <LL_ADC_IsEnabled>
 80032c8:	4603      	mov	r3, r0
 80032ca:	4323      	orrs	r3, r4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	bf0c      	ite	eq
 80032d0:	2301      	moveq	r3, #1
 80032d2:	2300      	movne	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d012      	beq.n	8003300 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80032e2:	f023 030f 	bic.w	r3, r3, #15
 80032e6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80032e8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032ea:	e009      	b.n	8003300 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f0:	f043 0220 	orr.w	r2, r3, #32
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80032fe:	e000      	b.n	8003302 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003300:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800330a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800330e:	4618      	mov	r0, r3
 8003310:	3784      	adds	r7, #132	@ 0x84
 8003312:	46bd      	mov	sp, r7
 8003314:	bd90      	pop	{r4, r7, pc}
 8003316:	bf00      	nop
 8003318:	50000100 	.word	0x50000100
 800331c:	50000400 	.word	0x50000400
 8003320:	50000500 	.word	0x50000500
 8003324:	50000300 	.word	0x50000300
 8003328:	50000700 	.word	0x50000700
 800332c:	50000600 	.word	0x50000600

08003330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003340:	4b0c      	ldr	r3, [pc, #48]	@ (8003374 <__NVIC_SetPriorityGrouping+0x44>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800334c:	4013      	ands	r3, r2
 800334e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003358:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800335c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003362:	4a04      	ldr	r2, [pc, #16]	@ (8003374 <__NVIC_SetPriorityGrouping+0x44>)
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	60d3      	str	r3, [r2, #12]
}
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800337c:	4b04      	ldr	r3, [pc, #16]	@ (8003390 <__NVIC_GetPriorityGrouping+0x18>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	0a1b      	lsrs	r3, r3, #8
 8003382:	f003 0307 	and.w	r3, r3, #7
}
 8003386:	4618      	mov	r0, r3
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	e000ed00 	.word	0xe000ed00

08003394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800339e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	db0b      	blt.n	80033be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	f003 021f 	and.w	r2, r3, #31
 80033ac:	4907      	ldr	r1, [pc, #28]	@ (80033cc <__NVIC_EnableIRQ+0x38>)
 80033ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	2001      	movs	r0, #1
 80033b6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	e000e100 	.word	0xe000e100

080033d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	6039      	str	r1, [r7, #0]
 80033da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	db0a      	blt.n	80033fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	490c      	ldr	r1, [pc, #48]	@ (800341c <__NVIC_SetPriority+0x4c>)
 80033ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ee:	0112      	lsls	r2, r2, #4
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	440b      	add	r3, r1
 80033f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033f8:	e00a      	b.n	8003410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	4908      	ldr	r1, [pc, #32]	@ (8003420 <__NVIC_SetPriority+0x50>)
 8003400:	79fb      	ldrb	r3, [r7, #7]
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	3b04      	subs	r3, #4
 8003408:	0112      	lsls	r2, r2, #4
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	440b      	add	r3, r1
 800340e:	761a      	strb	r2, [r3, #24]
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	e000e100 	.word	0xe000e100
 8003420:	e000ed00 	.word	0xe000ed00

08003424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003424:	b480      	push	{r7}
 8003426:	b089      	sub	sp, #36	@ 0x24
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f1c3 0307 	rsb	r3, r3, #7
 800343e:	2b04      	cmp	r3, #4
 8003440:	bf28      	it	cs
 8003442:	2304      	movcs	r3, #4
 8003444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	3304      	adds	r3, #4
 800344a:	2b06      	cmp	r3, #6
 800344c:	d902      	bls.n	8003454 <NVIC_EncodePriority+0x30>
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	3b03      	subs	r3, #3
 8003452:	e000      	b.n	8003456 <NVIC_EncodePriority+0x32>
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003458:	f04f 32ff 	mov.w	r2, #4294967295
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43da      	mvns	r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	401a      	ands	r2, r3
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800346c:	f04f 31ff 	mov.w	r1, #4294967295
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	fa01 f303 	lsl.w	r3, r1, r3
 8003476:	43d9      	mvns	r1, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800347c:	4313      	orrs	r3, r2
         );
}
 800347e:	4618      	mov	r0, r3
 8003480:	3724      	adds	r7, #36	@ 0x24
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
	...

0800348c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3b01      	subs	r3, #1
 8003498:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800349c:	d301      	bcc.n	80034a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800349e:	2301      	movs	r3, #1
 80034a0:	e00f      	b.n	80034c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034a2:	4a0a      	ldr	r2, [pc, #40]	@ (80034cc <SysTick_Config+0x40>)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034aa:	210f      	movs	r1, #15
 80034ac:	f04f 30ff 	mov.w	r0, #4294967295
 80034b0:	f7ff ff8e 	bl	80033d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034b4:	4b05      	ldr	r3, [pc, #20]	@ (80034cc <SysTick_Config+0x40>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ba:	4b04      	ldr	r3, [pc, #16]	@ (80034cc <SysTick_Config+0x40>)
 80034bc:	2207      	movs	r2, #7
 80034be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	e000e010 	.word	0xe000e010

080034d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff ff29 	bl	8003330 <__NVIC_SetPriorityGrouping>
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b086      	sub	sp, #24
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	4603      	mov	r3, r0
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	607a      	str	r2, [r7, #4]
 80034f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034f4:	f7ff ff40 	bl	8003378 <__NVIC_GetPriorityGrouping>
 80034f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	68b9      	ldr	r1, [r7, #8]
 80034fe:	6978      	ldr	r0, [r7, #20]
 8003500:	f7ff ff90 	bl	8003424 <NVIC_EncodePriority>
 8003504:	4602      	mov	r2, r0
 8003506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800350a:	4611      	mov	r1, r2
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff ff5f 	bl	80033d0 <__NVIC_SetPriority>
}
 8003512:	bf00      	nop
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	4603      	mov	r3, r0
 8003522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff ff33 	bl	8003394 <__NVIC_EnableIRQ>
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff ffa4 	bl	800348c <SysTick_Config>
 8003544:	4603      	mov	r3, r0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
	...

08003550 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e08d      	b.n	800367e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	4b47      	ldr	r3, [pc, #284]	@ (8003688 <HAL_DMA_Init+0x138>)
 800356a:	429a      	cmp	r2, r3
 800356c:	d80f      	bhi.n	800358e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	4b45      	ldr	r3, [pc, #276]	@ (800368c <HAL_DMA_Init+0x13c>)
 8003576:	4413      	add	r3, r2
 8003578:	4a45      	ldr	r2, [pc, #276]	@ (8003690 <HAL_DMA_Init+0x140>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	091b      	lsrs	r3, r3, #4
 8003580:	009a      	lsls	r2, r3, #2
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a42      	ldr	r2, [pc, #264]	@ (8003694 <HAL_DMA_Init+0x144>)
 800358a:	641a      	str	r2, [r3, #64]	@ 0x40
 800358c:	e00e      	b.n	80035ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	4b40      	ldr	r3, [pc, #256]	@ (8003698 <HAL_DMA_Init+0x148>)
 8003596:	4413      	add	r3, r2
 8003598:	4a3d      	ldr	r2, [pc, #244]	@ (8003690 <HAL_DMA_Init+0x140>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	091b      	lsrs	r3, r3, #4
 80035a0:	009a      	lsls	r2, r3, #2
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a3c      	ldr	r2, [pc, #240]	@ (800369c <HAL_DMA_Init+0x14c>)
 80035aa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80035c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80035d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 fa76 	bl	8003af0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800360c:	d102      	bne.n	8003614 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003628:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d010      	beq.n	8003654 <HAL_DMA_Init+0x104>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b04      	cmp	r3, #4
 8003638:	d80c      	bhi.n	8003654 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fa96 	bl	8003b6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003650:	605a      	str	r2, [r3, #4]
 8003652:	e008      	b.n	8003666 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40020407 	.word	0x40020407
 800368c:	bffdfff8 	.word	0xbffdfff8
 8003690:	cccccccd 	.word	0xcccccccd
 8003694:	40020000 	.word	0x40020000
 8003698:	bffdfbf8 	.word	0xbffdfbf8
 800369c:	40020400 	.word	0x40020400

080036a0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ae:	2300      	movs	r3, #0
 80036b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_DMA_Start_IT+0x20>
 80036bc:	2302      	movs	r3, #2
 80036be:	e066      	b.n	800378e <HAL_DMA_Start_IT+0xee>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d155      	bne.n	8003780 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0201 	bic.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	68b9      	ldr	r1, [r7, #8]
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 f9bb 	bl	8003a74 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003702:	2b00      	cmp	r3, #0
 8003704:	d008      	beq.n	8003718 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 020e 	orr.w	r2, r2, #14
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	e00f      	b.n	8003738 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0204 	bic.w	r2, r2, #4
 8003726:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 020a 	orr.w	r2, r2, #10
 8003736:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d007      	beq.n	8003756 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003750:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003754:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800375a:	2b00      	cmp	r3, #0
 800375c:	d007      	beq.n	800376e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003768:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800376c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 0201 	orr.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	e005      	b.n	800378c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003788:	2302      	movs	r3, #2
 800378a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800378c:	7dfb      	ldrb	r3, [r7, #23]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003796:	b480      	push	{r7}
 8003798:	b085      	sub	sp, #20
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d005      	beq.n	80037ba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2204      	movs	r2, #4
 80037b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	73fb      	strb	r3, [r7, #15]
 80037b8:	e037      	b.n	800382a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 020e 	bic.w	r2, r2, #14
 80037c8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037d8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0201 	bic.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ee:	f003 021f 	and.w	r2, r3, #31
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f6:	2101      	movs	r1, #1
 80037f8:	fa01 f202 	lsl.w	r2, r1, r2
 80037fc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003806:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00c      	beq.n	800382a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800381e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003828:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800383a:	7bfb      	ldrb	r3, [r7, #15]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d00d      	beq.n	800387c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2204      	movs	r2, #4
 8003864:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
 800387a:	e047      	b.n	800390c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 020e 	bic.w	r2, r2, #14
 800388a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0201 	bic.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b0:	f003 021f 	and.w	r2, r3, #31
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b8:	2101      	movs	r1, #1
 80038ba:	fa01 f202 	lsl.w	r2, r1, r2
 80038be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80038c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00c      	beq.n	80038ec <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80038ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	4798      	blx	r3
    }
  }
  return status;
 800390c:	7bfb      	ldrb	r3, [r7, #15]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b084      	sub	sp, #16
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003932:	f003 031f 	and.w	r3, r3, #31
 8003936:	2204      	movs	r2, #4
 8003938:	409a      	lsls	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4013      	ands	r3, r2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d026      	beq.n	8003990 <HAL_DMA_IRQHandler+0x7a>
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d021      	beq.n	8003990 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b00      	cmp	r3, #0
 8003958:	d107      	bne.n	800396a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0204 	bic.w	r2, r2, #4
 8003968:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396e:	f003 021f 	and.w	r2, r3, #31
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003976:	2104      	movs	r1, #4
 8003978:	fa01 f202 	lsl.w	r2, r1, r2
 800397c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003982:	2b00      	cmp	r3, #0
 8003984:	d071      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800398e:	e06c      	b.n	8003a6a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	2202      	movs	r2, #2
 800399a:	409a      	lsls	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4013      	ands	r3, r2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d02e      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d029      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0320 	and.w	r3, r3, #32
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10b      	bne.n	80039d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 020a 	bic.w	r2, r2, #10
 80039ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d8:	f003 021f 	and.w	r2, r3, #31
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e0:	2102      	movs	r1, #2
 80039e2:	fa01 f202 	lsl.w	r2, r1, r2
 80039e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d038      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a00:	e033      	b.n	8003a6a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a06:	f003 031f 	and.w	r3, r3, #31
 8003a0a:	2208      	movs	r2, #8
 8003a0c:	409a      	lsls	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4013      	ands	r3, r2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d02a      	beq.n	8003a6c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d025      	beq.n	8003a6c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 020e 	bic.w	r2, r2, #14
 8003a2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a34:	f003 021f 	and.w	r2, r3, #31
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d004      	beq.n	8003a6c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a6a:	bf00      	nop
 8003a6c:	bf00      	nop
}
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a8a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d004      	beq.n	8003a9e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a9c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa2:	f003 021f 	and.w	r2, r3, #31
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aaa:	2101      	movs	r1, #1
 8003aac:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	2b10      	cmp	r3, #16
 8003ac0:	d108      	bne.n	8003ad4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ad2:	e007      	b.n	8003ae4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	60da      	str	r2, [r3, #12]
}
 8003ae4:	bf00      	nop
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	4b16      	ldr	r3, [pc, #88]	@ (8003b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d802      	bhi.n	8003b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003b04:	4b15      	ldr	r3, [pc, #84]	@ (8003b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	e001      	b.n	8003b0e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003b0a:	4b15      	ldr	r3, [pc, #84]	@ (8003b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003b0c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	3b08      	subs	r3, #8
 8003b1a:	4a12      	ldr	r2, [pc, #72]	@ (8003b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b20:	091b      	lsrs	r3, r3, #4
 8003b22:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b28:	089b      	lsrs	r3, r3, #2
 8003b2a:	009a      	lsls	r2, r3, #2
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	4413      	add	r3, r2
 8003b30:	461a      	mov	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a0b      	ldr	r2, [pc, #44]	@ (8003b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003b3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f003 031f 	and.w	r3, r3, #31
 8003b42:	2201      	movs	r2, #1
 8003b44:	409a      	lsls	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b4a:	bf00      	nop
 8003b4c:	371c      	adds	r7, #28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40020407 	.word	0x40020407
 8003b5c:	40020800 	.word	0x40020800
 8003b60:	40020820 	.word	0x40020820
 8003b64:	cccccccd 	.word	0xcccccccd
 8003b68:	40020880 	.word	0x40020880

08003b6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003b80:	4413      	add	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	461a      	mov	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a08      	ldr	r2, [pc, #32]	@ (8003bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b8e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	f003 031f 	and.w	r3, r3, #31
 8003b98:	2201      	movs	r2, #1
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003ba0:	bf00      	nop
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	1000823f 	.word	0x1000823f
 8003bb0:	40020940 	.word	0x40020940

08003bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003bc2:	e15a      	b.n	8003e7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	2101      	movs	r1, #1
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 814c 	beq.w	8003e74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d005      	beq.n	8003bf4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d130      	bne.n	8003c56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	2203      	movs	r2, #3
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	43db      	mvns	r3, r3
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	43db      	mvns	r3, r3
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4013      	ands	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	091b      	lsrs	r3, r3, #4
 8003c40:	f003 0201 	and.w	r2, r3, #1
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	2b03      	cmp	r3, #3
 8003c60:	d017      	beq.n	8003c92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	2203      	movs	r2, #3
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	43db      	mvns	r3, r3
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4013      	ands	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d123      	bne.n	8003ce6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	08da      	lsrs	r2, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3208      	adds	r2, #8
 8003ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003caa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	220f      	movs	r2, #15
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	691a      	ldr	r2, [r3, #16]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	08da      	lsrs	r2, r3, #3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3208      	adds	r2, #8
 8003ce0:	6939      	ldr	r1, [r7, #16]
 8003ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	2203      	movs	r2, #3
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f003 0203 	and.w	r2, r3, #3
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 80a6 	beq.w	8003e74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d28:	4b5b      	ldr	r3, [pc, #364]	@ (8003e98 <HAL_GPIO_Init+0x2e4>)
 8003d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d2c:	4a5a      	ldr	r2, [pc, #360]	@ (8003e98 <HAL_GPIO_Init+0x2e4>)
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d34:	4b58      	ldr	r3, [pc, #352]	@ (8003e98 <HAL_GPIO_Init+0x2e4>)
 8003d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d40:	4a56      	ldr	r2, [pc, #344]	@ (8003e9c <HAL_GPIO_Init+0x2e8>)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	089b      	lsrs	r3, r3, #2
 8003d46:	3302      	adds	r3, #2
 8003d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f003 0303 	and.w	r3, r3, #3
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	220f      	movs	r2, #15
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4013      	ands	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d6a:	d01f      	beq.n	8003dac <HAL_GPIO_Init+0x1f8>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a4c      	ldr	r2, [pc, #304]	@ (8003ea0 <HAL_GPIO_Init+0x2ec>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d019      	beq.n	8003da8 <HAL_GPIO_Init+0x1f4>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a4b      	ldr	r2, [pc, #300]	@ (8003ea4 <HAL_GPIO_Init+0x2f0>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d013      	beq.n	8003da4 <HAL_GPIO_Init+0x1f0>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a4a      	ldr	r2, [pc, #296]	@ (8003ea8 <HAL_GPIO_Init+0x2f4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00d      	beq.n	8003da0 <HAL_GPIO_Init+0x1ec>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a49      	ldr	r2, [pc, #292]	@ (8003eac <HAL_GPIO_Init+0x2f8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d007      	beq.n	8003d9c <HAL_GPIO_Init+0x1e8>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a48      	ldr	r2, [pc, #288]	@ (8003eb0 <HAL_GPIO_Init+0x2fc>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d101      	bne.n	8003d98 <HAL_GPIO_Init+0x1e4>
 8003d94:	2305      	movs	r3, #5
 8003d96:	e00a      	b.n	8003dae <HAL_GPIO_Init+0x1fa>
 8003d98:	2306      	movs	r3, #6
 8003d9a:	e008      	b.n	8003dae <HAL_GPIO_Init+0x1fa>
 8003d9c:	2304      	movs	r3, #4
 8003d9e:	e006      	b.n	8003dae <HAL_GPIO_Init+0x1fa>
 8003da0:	2303      	movs	r3, #3
 8003da2:	e004      	b.n	8003dae <HAL_GPIO_Init+0x1fa>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e002      	b.n	8003dae <HAL_GPIO_Init+0x1fa>
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <HAL_GPIO_Init+0x1fa>
 8003dac:	2300      	movs	r3, #0
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	f002 0203 	and.w	r2, r2, #3
 8003db4:	0092      	lsls	r2, r2, #2
 8003db6:	4093      	lsls	r3, r2
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dbe:	4937      	ldr	r1, [pc, #220]	@ (8003e9c <HAL_GPIO_Init+0x2e8>)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	089b      	lsrs	r3, r3, #2
 8003dc4:	3302      	adds	r3, #2
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dcc:	4b39      	ldr	r3, [pc, #228]	@ (8003eb4 <HAL_GPIO_Init+0x300>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003df0:	4a30      	ldr	r2, [pc, #192]	@ (8003eb4 <HAL_GPIO_Init+0x300>)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003df6:	4b2f      	ldr	r3, [pc, #188]	@ (8003eb4 <HAL_GPIO_Init+0x300>)
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	43db      	mvns	r3, r3
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	4013      	ands	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e1a:	4a26      	ldr	r2, [pc, #152]	@ (8003eb4 <HAL_GPIO_Init+0x300>)
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003e20:	4b24      	ldr	r3, [pc, #144]	@ (8003eb4 <HAL_GPIO_Init+0x300>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e44:	4a1b      	ldr	r2, [pc, #108]	@ (8003eb4 <HAL_GPIO_Init+0x300>)
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8003eb4 <HAL_GPIO_Init+0x300>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	43db      	mvns	r3, r3
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4013      	ands	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e6e:	4a11      	ldr	r2, [pc, #68]	@ (8003eb4 <HAL_GPIO_Init+0x300>)
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	3301      	adds	r3, #1
 8003e78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	fa22 f303 	lsr.w	r3, r2, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f47f ae9d 	bne.w	8003bc4 <HAL_GPIO_Init+0x10>
  }
}
 8003e8a:	bf00      	nop
 8003e8c:	bf00      	nop
 8003e8e:	371c      	adds	r7, #28
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	40010000 	.word	0x40010000
 8003ea0:	48000400 	.word	0x48000400
 8003ea4:	48000800 	.word	0x48000800
 8003ea8:	48000c00 	.word	0x48000c00
 8003eac:	48001000 	.word	0x48001000
 8003eb0:	48001400 	.word	0x48001400
 8003eb4:	40010400 	.word	0x40010400

08003eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	807b      	strh	r3, [r7, #2]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ec8:	787b      	ldrb	r3, [r7, #1]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ece:	887a      	ldrh	r2, [r7, #2]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ed4:	e002      	b.n	8003edc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ed6:	887a      	ldrh	r2, [r7, #2]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ef2:	4b08      	ldr	r3, [pc, #32]	@ (8003f14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ef4:	695a      	ldr	r2, [r3, #20]
 8003ef6:	88fb      	ldrh	r3, [r7, #6]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d006      	beq.n	8003f0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003efe:	4a05      	ldr	r2, [pc, #20]	@ (8003f14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f00:	88fb      	ldrh	r3, [r7, #6]
 8003f02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f04:	88fb      	ldrh	r3, [r7, #6]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 f806 	bl	8003f18 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f0c:	bf00      	nop
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40010400 	.word	0x40010400

08003f18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
	...

08003f30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d141      	bne.n	8003fc2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f3e:	4b4b      	ldr	r3, [pc, #300]	@ (800406c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f4a:	d131      	bne.n	8003fb0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f4c:	4b47      	ldr	r3, [pc, #284]	@ (800406c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f52:	4a46      	ldr	r2, [pc, #280]	@ (800406c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f5c:	4b43      	ldr	r3, [pc, #268]	@ (800406c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f64:	4a41      	ldr	r2, [pc, #260]	@ (800406c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f6c:	4b40      	ldr	r3, [pc, #256]	@ (8004070 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2232      	movs	r2, #50	@ 0x32
 8003f72:	fb02 f303 	mul.w	r3, r2, r3
 8003f76:	4a3f      	ldr	r2, [pc, #252]	@ (8004074 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f78:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7c:	0c9b      	lsrs	r3, r3, #18
 8003f7e:	3301      	adds	r3, #1
 8003f80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f82:	e002      	b.n	8003f8a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f8a:	4b38      	ldr	r3, [pc, #224]	@ (800406c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f96:	d102      	bne.n	8003f9e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f2      	bne.n	8003f84 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f9e:	4b33      	ldr	r3, [pc, #204]	@ (800406c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003faa:	d158      	bne.n	800405e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e057      	b.n	8004060 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fb0:	4b2e      	ldr	r3, [pc, #184]	@ (800406c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fb6:	4a2d      	ldr	r2, [pc, #180]	@ (800406c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003fc0:	e04d      	b.n	800405e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fc8:	d141      	bne.n	800404e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fca:	4b28      	ldr	r3, [pc, #160]	@ (800406c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fd6:	d131      	bne.n	800403c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fd8:	4b24      	ldr	r3, [pc, #144]	@ (800406c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fde:	4a23      	ldr	r2, [pc, #140]	@ (800406c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fe4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fe8:	4b20      	ldr	r3, [pc, #128]	@ (800406c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ff0:	4a1e      	ldr	r2, [pc, #120]	@ (800406c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ff6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8004070 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2232      	movs	r2, #50	@ 0x32
 8003ffe:	fb02 f303 	mul.w	r3, r2, r3
 8004002:	4a1c      	ldr	r2, [pc, #112]	@ (8004074 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004004:	fba2 2303 	umull	r2, r3, r2, r3
 8004008:	0c9b      	lsrs	r3, r3, #18
 800400a:	3301      	adds	r3, #1
 800400c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800400e:	e002      	b.n	8004016 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	3b01      	subs	r3, #1
 8004014:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004016:	4b15      	ldr	r3, [pc, #84]	@ (800406c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800401e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004022:	d102      	bne.n	800402a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f2      	bne.n	8004010 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800402a:	4b10      	ldr	r3, [pc, #64]	@ (800406c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004036:	d112      	bne.n	800405e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e011      	b.n	8004060 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800403c:	4b0b      	ldr	r3, [pc, #44]	@ (800406c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800403e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004042:	4a0a      	ldr	r2, [pc, #40]	@ (800406c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004048:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800404c:	e007      	b.n	800405e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800404e:	4b07      	ldr	r3, [pc, #28]	@ (800406c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004056:	4a05      	ldr	r2, [pc, #20]	@ (800406c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004058:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800405c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	40007000 	.word	0x40007000
 8004070:	20000000 	.word	0x20000000
 8004074:	431bde83 	.word	0x431bde83

08004078 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800407c:	4b05      	ldr	r3, [pc, #20]	@ (8004094 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	4a04      	ldr	r2, [pc, #16]	@ (8004094 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004082:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004086:	6093      	str	r3, [r2, #8]
}
 8004088:	bf00      	nop
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	40007000 	.word	0x40007000

08004098 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b088      	sub	sp, #32
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e2fe      	b.n	80046a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d075      	beq.n	80041a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040b6:	4b97      	ldr	r3, [pc, #604]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 030c 	and.w	r3, r3, #12
 80040be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040c0:	4b94      	ldr	r3, [pc, #592]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 0303 	and.w	r3, r3, #3
 80040c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	2b0c      	cmp	r3, #12
 80040ce:	d102      	bne.n	80040d6 <HAL_RCC_OscConfig+0x3e>
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d002      	beq.n	80040dc <HAL_RCC_OscConfig+0x44>
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d10b      	bne.n	80040f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040dc:	4b8d      	ldr	r3, [pc, #564]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d05b      	beq.n	80041a0 <HAL_RCC_OscConfig+0x108>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d157      	bne.n	80041a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e2d9      	b.n	80046a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040fc:	d106      	bne.n	800410c <HAL_RCC_OscConfig+0x74>
 80040fe:	4b85      	ldr	r3, [pc, #532]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a84      	ldr	r2, [pc, #528]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 8004104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	e01d      	b.n	8004148 <HAL_RCC_OscConfig+0xb0>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004114:	d10c      	bne.n	8004130 <HAL_RCC_OscConfig+0x98>
 8004116:	4b7f      	ldr	r3, [pc, #508]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a7e      	ldr	r2, [pc, #504]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 800411c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	4b7c      	ldr	r3, [pc, #496]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a7b      	ldr	r2, [pc, #492]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 8004128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	e00b      	b.n	8004148 <HAL_RCC_OscConfig+0xb0>
 8004130:	4b78      	ldr	r3, [pc, #480]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a77      	ldr	r2, [pc, #476]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 8004136:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800413a:	6013      	str	r3, [r2, #0]
 800413c:	4b75      	ldr	r3, [pc, #468]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a74      	ldr	r2, [pc, #464]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 8004142:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d013      	beq.n	8004178 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004150:	f7fd fac0 	bl	80016d4 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004158:	f7fd fabc 	bl	80016d4 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b64      	cmp	r3, #100	@ 0x64
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e29e      	b.n	80046a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800416a:	4b6a      	ldr	r3, [pc, #424]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f0      	beq.n	8004158 <HAL_RCC_OscConfig+0xc0>
 8004176:	e014      	b.n	80041a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004178:	f7fd faac 	bl	80016d4 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004180:	f7fd faa8 	bl	80016d4 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b64      	cmp	r3, #100	@ 0x64
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e28a      	b.n	80046a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004192:	4b60      	ldr	r3, [pc, #384]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0xe8>
 800419e:	e000      	b.n	80041a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d075      	beq.n	800429a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ae:	4b59      	ldr	r3, [pc, #356]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 030c 	and.w	r3, r3, #12
 80041b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041b8:	4b56      	ldr	r3, [pc, #344]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f003 0303 	and.w	r3, r3, #3
 80041c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	2b0c      	cmp	r3, #12
 80041c6:	d102      	bne.n	80041ce <HAL_RCC_OscConfig+0x136>
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d002      	beq.n	80041d4 <HAL_RCC_OscConfig+0x13c>
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d11f      	bne.n	8004214 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041d4:	4b4f      	ldr	r3, [pc, #316]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d005      	beq.n	80041ec <HAL_RCC_OscConfig+0x154>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e25d      	b.n	80046a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ec:	4b49      	ldr	r3, [pc, #292]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	061b      	lsls	r3, r3, #24
 80041fa:	4946      	ldr	r1, [pc, #280]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004200:	4b45      	ldr	r3, [pc, #276]	@ (8004318 <HAL_RCC_OscConfig+0x280>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4618      	mov	r0, r3
 8004206:	f7fd fa19 	bl	800163c <HAL_InitTick>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d043      	beq.n	8004298 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e249      	b.n	80046a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d023      	beq.n	8004264 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800421c:	4b3d      	ldr	r3, [pc, #244]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a3c      	ldr	r2, [pc, #240]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 8004222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7fd fa54 	bl	80016d4 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004230:	f7fd fa50 	bl	80016d4 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e232      	b.n	80046a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004242:	4b34      	ldr	r3, [pc, #208]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0f0      	beq.n	8004230 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800424e:	4b31      	ldr	r3, [pc, #196]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	061b      	lsls	r3, r3, #24
 800425c:	492d      	ldr	r1, [pc, #180]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 800425e:	4313      	orrs	r3, r2
 8004260:	604b      	str	r3, [r1, #4]
 8004262:	e01a      	b.n	800429a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004264:	4b2b      	ldr	r3, [pc, #172]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a2a      	ldr	r2, [pc, #168]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 800426a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800426e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004270:	f7fd fa30 	bl	80016d4 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004278:	f7fd fa2c 	bl	80016d4 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e20e      	b.n	80046a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800428a:	4b22      	ldr	r3, [pc, #136]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1f0      	bne.n	8004278 <HAL_RCC_OscConfig+0x1e0>
 8004296:	e000      	b.n	800429a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004298:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d041      	beq.n	800432a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d01c      	beq.n	80042e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ae:	4b19      	ldr	r3, [pc, #100]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 80042b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042b4:	4a17      	ldr	r2, [pc, #92]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 80042b6:	f043 0301 	orr.w	r3, r3, #1
 80042ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042be:	f7fd fa09 	bl	80016d4 <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042c4:	e008      	b.n	80042d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042c6:	f7fd fa05 	bl	80016d4 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e1e7      	b.n	80046a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 80042da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0ef      	beq.n	80042c6 <HAL_RCC_OscConfig+0x22e>
 80042e6:	e020      	b.n	800432a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 80042ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042ee:	4a09      	ldr	r2, [pc, #36]	@ (8004314 <HAL_RCC_OscConfig+0x27c>)
 80042f0:	f023 0301 	bic.w	r3, r3, #1
 80042f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f8:	f7fd f9ec 	bl	80016d4 <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042fe:	e00d      	b.n	800431c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004300:	f7fd f9e8 	bl	80016d4 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d906      	bls.n	800431c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e1ca      	b.n	80046a8 <HAL_RCC_OscConfig+0x610>
 8004312:	bf00      	nop
 8004314:	40021000 	.word	0x40021000
 8004318:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800431c:	4b8c      	ldr	r3, [pc, #560]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 800431e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1ea      	bne.n	8004300 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 80a6 	beq.w	8004484 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004338:	2300      	movs	r3, #0
 800433a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800433c:	4b84      	ldr	r3, [pc, #528]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 800433e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <HAL_RCC_OscConfig+0x2b4>
 8004348:	2301      	movs	r3, #1
 800434a:	e000      	b.n	800434e <HAL_RCC_OscConfig+0x2b6>
 800434c:	2300      	movs	r3, #0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00d      	beq.n	800436e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004352:	4b7f      	ldr	r3, [pc, #508]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 8004354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004356:	4a7e      	ldr	r2, [pc, #504]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 8004358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800435c:	6593      	str	r3, [r2, #88]	@ 0x58
 800435e:	4b7c      	ldr	r3, [pc, #496]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 8004360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800436a:	2301      	movs	r3, #1
 800436c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800436e:	4b79      	ldr	r3, [pc, #484]	@ (8004554 <HAL_RCC_OscConfig+0x4bc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004376:	2b00      	cmp	r3, #0
 8004378:	d118      	bne.n	80043ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800437a:	4b76      	ldr	r3, [pc, #472]	@ (8004554 <HAL_RCC_OscConfig+0x4bc>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a75      	ldr	r2, [pc, #468]	@ (8004554 <HAL_RCC_OscConfig+0x4bc>)
 8004380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004386:	f7fd f9a5 	bl	80016d4 <HAL_GetTick>
 800438a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800438c:	e008      	b.n	80043a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800438e:	f7fd f9a1 	bl	80016d4 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e183      	b.n	80046a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043a0:	4b6c      	ldr	r3, [pc, #432]	@ (8004554 <HAL_RCC_OscConfig+0x4bc>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0f0      	beq.n	800438e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d108      	bne.n	80043c6 <HAL_RCC_OscConfig+0x32e>
 80043b4:	4b66      	ldr	r3, [pc, #408]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ba:	4a65      	ldr	r2, [pc, #404]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 80043bc:	f043 0301 	orr.w	r3, r3, #1
 80043c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043c4:	e024      	b.n	8004410 <HAL_RCC_OscConfig+0x378>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	2b05      	cmp	r3, #5
 80043cc:	d110      	bne.n	80043f0 <HAL_RCC_OscConfig+0x358>
 80043ce:	4b60      	ldr	r3, [pc, #384]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 80043d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d4:	4a5e      	ldr	r2, [pc, #376]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 80043d6:	f043 0304 	orr.w	r3, r3, #4
 80043da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043de:	4b5c      	ldr	r3, [pc, #368]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 80043e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043e4:	4a5a      	ldr	r2, [pc, #360]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 80043e6:	f043 0301 	orr.w	r3, r3, #1
 80043ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043ee:	e00f      	b.n	8004410 <HAL_RCC_OscConfig+0x378>
 80043f0:	4b57      	ldr	r3, [pc, #348]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 80043f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f6:	4a56      	ldr	r2, [pc, #344]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 80043f8:	f023 0301 	bic.w	r3, r3, #1
 80043fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004400:	4b53      	ldr	r3, [pc, #332]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004406:	4a52      	ldr	r2, [pc, #328]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 8004408:	f023 0304 	bic.w	r3, r3, #4
 800440c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d016      	beq.n	8004446 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004418:	f7fd f95c 	bl	80016d4 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800441e:	e00a      	b.n	8004436 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004420:	f7fd f958 	bl	80016d4 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800442e:	4293      	cmp	r3, r2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e138      	b.n	80046a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004436:	4b46      	ldr	r3, [pc, #280]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 8004438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0ed      	beq.n	8004420 <HAL_RCC_OscConfig+0x388>
 8004444:	e015      	b.n	8004472 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004446:	f7fd f945 	bl	80016d4 <HAL_GetTick>
 800444a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800444c:	e00a      	b.n	8004464 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800444e:	f7fd f941 	bl	80016d4 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800445c:	4293      	cmp	r3, r2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e121      	b.n	80046a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004464:	4b3a      	ldr	r3, [pc, #232]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 8004466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1ed      	bne.n	800444e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004472:	7ffb      	ldrb	r3, [r7, #31]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d105      	bne.n	8004484 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004478:	4b35      	ldr	r3, [pc, #212]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 800447a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800447c:	4a34      	ldr	r2, [pc, #208]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 800447e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004482:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d03c      	beq.n	800450a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01c      	beq.n	80044d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004498:	4b2d      	ldr	r3, [pc, #180]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 800449a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800449e:	4a2c      	ldr	r2, [pc, #176]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 80044a0:	f043 0301 	orr.w	r3, r3, #1
 80044a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a8:	f7fd f914 	bl	80016d4 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044b0:	f7fd f910 	bl	80016d4 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e0f2      	b.n	80046a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044c2:	4b23      	ldr	r3, [pc, #140]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 80044c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0ef      	beq.n	80044b0 <HAL_RCC_OscConfig+0x418>
 80044d0:	e01b      	b.n	800450a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044d2:	4b1f      	ldr	r3, [pc, #124]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 80044d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 80044da:	f023 0301 	bic.w	r3, r3, #1
 80044de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e2:	f7fd f8f7 	bl	80016d4 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044ea:	f7fd f8f3 	bl	80016d4 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e0d5      	b.n	80046a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044fc:	4b14      	ldr	r3, [pc, #80]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 80044fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1ef      	bne.n	80044ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 80c9 	beq.w	80046a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004514:	4b0e      	ldr	r3, [pc, #56]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f003 030c 	and.w	r3, r3, #12
 800451c:	2b0c      	cmp	r3, #12
 800451e:	f000 8083 	beq.w	8004628 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	2b02      	cmp	r3, #2
 8004528:	d15e      	bne.n	80045e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800452a:	4b09      	ldr	r3, [pc, #36]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a08      	ldr	r2, [pc, #32]	@ (8004550 <HAL_RCC_OscConfig+0x4b8>)
 8004530:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004536:	f7fd f8cd 	bl	80016d4 <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800453c:	e00c      	b.n	8004558 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800453e:	f7fd f8c9 	bl	80016d4 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d905      	bls.n	8004558 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e0ab      	b.n	80046a8 <HAL_RCC_OscConfig+0x610>
 8004550:	40021000 	.word	0x40021000
 8004554:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004558:	4b55      	ldr	r3, [pc, #340]	@ (80046b0 <HAL_RCC_OscConfig+0x618>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1ec      	bne.n	800453e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004564:	4b52      	ldr	r3, [pc, #328]	@ (80046b0 <HAL_RCC_OscConfig+0x618>)
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	4b52      	ldr	r3, [pc, #328]	@ (80046b4 <HAL_RCC_OscConfig+0x61c>)
 800456a:	4013      	ands	r3, r2
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6a11      	ldr	r1, [r2, #32]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004574:	3a01      	subs	r2, #1
 8004576:	0112      	lsls	r2, r2, #4
 8004578:	4311      	orrs	r1, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800457e:	0212      	lsls	r2, r2, #8
 8004580:	4311      	orrs	r1, r2
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004586:	0852      	lsrs	r2, r2, #1
 8004588:	3a01      	subs	r2, #1
 800458a:	0552      	lsls	r2, r2, #21
 800458c:	4311      	orrs	r1, r2
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004592:	0852      	lsrs	r2, r2, #1
 8004594:	3a01      	subs	r2, #1
 8004596:	0652      	lsls	r2, r2, #25
 8004598:	4311      	orrs	r1, r2
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800459e:	06d2      	lsls	r2, r2, #27
 80045a0:	430a      	orrs	r2, r1
 80045a2:	4943      	ldr	r1, [pc, #268]	@ (80046b0 <HAL_RCC_OscConfig+0x618>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045a8:	4b41      	ldr	r3, [pc, #260]	@ (80046b0 <HAL_RCC_OscConfig+0x618>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a40      	ldr	r2, [pc, #256]	@ (80046b0 <HAL_RCC_OscConfig+0x618>)
 80045ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045b4:	4b3e      	ldr	r3, [pc, #248]	@ (80046b0 <HAL_RCC_OscConfig+0x618>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4a3d      	ldr	r2, [pc, #244]	@ (80046b0 <HAL_RCC_OscConfig+0x618>)
 80045ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c0:	f7fd f888 	bl	80016d4 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c8:	f7fd f884 	bl	80016d4 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e066      	b.n	80046a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045da:	4b35      	ldr	r3, [pc, #212]	@ (80046b0 <HAL_RCC_OscConfig+0x618>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0f0      	beq.n	80045c8 <HAL_RCC_OscConfig+0x530>
 80045e6:	e05e      	b.n	80046a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e8:	4b31      	ldr	r3, [pc, #196]	@ (80046b0 <HAL_RCC_OscConfig+0x618>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a30      	ldr	r2, [pc, #192]	@ (80046b0 <HAL_RCC_OscConfig+0x618>)
 80045ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f4:	f7fd f86e 	bl	80016d4 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045fc:	f7fd f86a 	bl	80016d4 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e04c      	b.n	80046a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800460e:	4b28      	ldr	r3, [pc, #160]	@ (80046b0 <HAL_RCC_OscConfig+0x618>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800461a:	4b25      	ldr	r3, [pc, #148]	@ (80046b0 <HAL_RCC_OscConfig+0x618>)
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	4924      	ldr	r1, [pc, #144]	@ (80046b0 <HAL_RCC_OscConfig+0x618>)
 8004620:	4b25      	ldr	r3, [pc, #148]	@ (80046b8 <HAL_RCC_OscConfig+0x620>)
 8004622:	4013      	ands	r3, r2
 8004624:	60cb      	str	r3, [r1, #12]
 8004626:	e03e      	b.n	80046a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d101      	bne.n	8004634 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e039      	b.n	80046a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004634:	4b1e      	ldr	r3, [pc, #120]	@ (80046b0 <HAL_RCC_OscConfig+0x618>)
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f003 0203 	and.w	r2, r3, #3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	429a      	cmp	r2, r3
 8004646:	d12c      	bne.n	80046a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004652:	3b01      	subs	r3, #1
 8004654:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004656:	429a      	cmp	r2, r3
 8004658:	d123      	bne.n	80046a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004664:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004666:	429a      	cmp	r2, r3
 8004668:	d11b      	bne.n	80046a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004674:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004676:	429a      	cmp	r2, r3
 8004678:	d113      	bne.n	80046a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004684:	085b      	lsrs	r3, r3, #1
 8004686:	3b01      	subs	r3, #1
 8004688:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d109      	bne.n	80046a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004698:	085b      	lsrs	r3, r3, #1
 800469a:	3b01      	subs	r3, #1
 800469c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800469e:	429a      	cmp	r2, r3
 80046a0:	d001      	beq.n	80046a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3720      	adds	r7, #32
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40021000 	.word	0x40021000
 80046b4:	019f800c 	.word	0x019f800c
 80046b8:	feeefffc 	.word	0xfeeefffc

080046bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80046c6:	2300      	movs	r3, #0
 80046c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e11e      	b.n	8004912 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046d4:	4b91      	ldr	r3, [pc, #580]	@ (800491c <HAL_RCC_ClockConfig+0x260>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 030f 	and.w	r3, r3, #15
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d910      	bls.n	8004704 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e2:	4b8e      	ldr	r3, [pc, #568]	@ (800491c <HAL_RCC_ClockConfig+0x260>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f023 020f 	bic.w	r2, r3, #15
 80046ea:	498c      	ldr	r1, [pc, #560]	@ (800491c <HAL_RCC_ClockConfig+0x260>)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f2:	4b8a      	ldr	r3, [pc, #552]	@ (800491c <HAL_RCC_ClockConfig+0x260>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d001      	beq.n	8004704 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e106      	b.n	8004912 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d073      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b03      	cmp	r3, #3
 8004716:	d129      	bne.n	800476c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004718:	4b81      	ldr	r3, [pc, #516]	@ (8004920 <HAL_RCC_ClockConfig+0x264>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0f4      	b.n	8004912 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004728:	f000 f99e 	bl	8004a68 <RCC_GetSysClockFreqFromPLLSource>
 800472c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	4a7c      	ldr	r2, [pc, #496]	@ (8004924 <HAL_RCC_ClockConfig+0x268>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d93f      	bls.n	80047b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004736:	4b7a      	ldr	r3, [pc, #488]	@ (8004920 <HAL_RCC_ClockConfig+0x264>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d009      	beq.n	8004756 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800474a:	2b00      	cmp	r3, #0
 800474c:	d033      	beq.n	80047b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004752:	2b00      	cmp	r3, #0
 8004754:	d12f      	bne.n	80047b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004756:	4b72      	ldr	r3, [pc, #456]	@ (8004920 <HAL_RCC_ClockConfig+0x264>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800475e:	4a70      	ldr	r2, [pc, #448]	@ (8004920 <HAL_RCC_ClockConfig+0x264>)
 8004760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004764:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004766:	2380      	movs	r3, #128	@ 0x80
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	e024      	b.n	80047b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2b02      	cmp	r3, #2
 8004772:	d107      	bne.n	8004784 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004774:	4b6a      	ldr	r3, [pc, #424]	@ (8004920 <HAL_RCC_ClockConfig+0x264>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d109      	bne.n	8004794 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e0c6      	b.n	8004912 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004784:	4b66      	ldr	r3, [pc, #408]	@ (8004920 <HAL_RCC_ClockConfig+0x264>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e0be      	b.n	8004912 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004794:	f000 f8ce 	bl	8004934 <HAL_RCC_GetSysClockFreq>
 8004798:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	4a61      	ldr	r2, [pc, #388]	@ (8004924 <HAL_RCC_ClockConfig+0x268>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d909      	bls.n	80047b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047a2:	4b5f      	ldr	r3, [pc, #380]	@ (8004920 <HAL_RCC_ClockConfig+0x264>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047aa:	4a5d      	ldr	r2, [pc, #372]	@ (8004920 <HAL_RCC_ClockConfig+0x264>)
 80047ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80047b2:	2380      	movs	r3, #128	@ 0x80
 80047b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047b6:	4b5a      	ldr	r3, [pc, #360]	@ (8004920 <HAL_RCC_ClockConfig+0x264>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f023 0203 	bic.w	r2, r3, #3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	4957      	ldr	r1, [pc, #348]	@ (8004920 <HAL_RCC_ClockConfig+0x264>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c8:	f7fc ff84 	bl	80016d4 <HAL_GetTick>
 80047cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ce:	e00a      	b.n	80047e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d0:	f7fc ff80 	bl	80016d4 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047de:	4293      	cmp	r3, r2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e095      	b.n	8004912 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e6:	4b4e      	ldr	r3, [pc, #312]	@ (8004920 <HAL_RCC_ClockConfig+0x264>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 020c 	and.w	r2, r3, #12
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d1eb      	bne.n	80047d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d023      	beq.n	800484c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004810:	4b43      	ldr	r3, [pc, #268]	@ (8004920 <HAL_RCC_ClockConfig+0x264>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	4a42      	ldr	r2, [pc, #264]	@ (8004920 <HAL_RCC_ClockConfig+0x264>)
 8004816:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800481a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0308 	and.w	r3, r3, #8
 8004824:	2b00      	cmp	r3, #0
 8004826:	d007      	beq.n	8004838 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004828:	4b3d      	ldr	r3, [pc, #244]	@ (8004920 <HAL_RCC_ClockConfig+0x264>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004830:	4a3b      	ldr	r2, [pc, #236]	@ (8004920 <HAL_RCC_ClockConfig+0x264>)
 8004832:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004836:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004838:	4b39      	ldr	r3, [pc, #228]	@ (8004920 <HAL_RCC_ClockConfig+0x264>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	4936      	ldr	r1, [pc, #216]	@ (8004920 <HAL_RCC_ClockConfig+0x264>)
 8004846:	4313      	orrs	r3, r2
 8004848:	608b      	str	r3, [r1, #8]
 800484a:	e008      	b.n	800485e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2b80      	cmp	r3, #128	@ 0x80
 8004850:	d105      	bne.n	800485e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004852:	4b33      	ldr	r3, [pc, #204]	@ (8004920 <HAL_RCC_ClockConfig+0x264>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	4a32      	ldr	r2, [pc, #200]	@ (8004920 <HAL_RCC_ClockConfig+0x264>)
 8004858:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800485c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800485e:	4b2f      	ldr	r3, [pc, #188]	@ (800491c <HAL_RCC_ClockConfig+0x260>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d21d      	bcs.n	80048a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486c:	4b2b      	ldr	r3, [pc, #172]	@ (800491c <HAL_RCC_ClockConfig+0x260>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f023 020f 	bic.w	r2, r3, #15
 8004874:	4929      	ldr	r1, [pc, #164]	@ (800491c <HAL_RCC_ClockConfig+0x260>)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	4313      	orrs	r3, r2
 800487a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800487c:	f7fc ff2a 	bl	80016d4 <HAL_GetTick>
 8004880:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004882:	e00a      	b.n	800489a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004884:	f7fc ff26 	bl	80016d4 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004892:	4293      	cmp	r3, r2
 8004894:	d901      	bls.n	800489a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e03b      	b.n	8004912 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800489a:	4b20      	ldr	r3, [pc, #128]	@ (800491c <HAL_RCC_ClockConfig+0x260>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d1ed      	bne.n	8004884 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d008      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004920 <HAL_RCC_ClockConfig+0x264>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	4917      	ldr	r1, [pc, #92]	@ (8004920 <HAL_RCC_ClockConfig+0x264>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d009      	beq.n	80048e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048d2:	4b13      	ldr	r3, [pc, #76]	@ (8004920 <HAL_RCC_ClockConfig+0x264>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	490f      	ldr	r1, [pc, #60]	@ (8004920 <HAL_RCC_ClockConfig+0x264>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048e6:	f000 f825 	bl	8004934 <HAL_RCC_GetSysClockFreq>
 80048ea:	4602      	mov	r2, r0
 80048ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004920 <HAL_RCC_ClockConfig+0x264>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	091b      	lsrs	r3, r3, #4
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	490c      	ldr	r1, [pc, #48]	@ (8004928 <HAL_RCC_ClockConfig+0x26c>)
 80048f8:	5ccb      	ldrb	r3, [r1, r3]
 80048fa:	f003 031f 	and.w	r3, r3, #31
 80048fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004902:	4a0a      	ldr	r2, [pc, #40]	@ (800492c <HAL_RCC_ClockConfig+0x270>)
 8004904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004906:	4b0a      	ldr	r3, [pc, #40]	@ (8004930 <HAL_RCC_ClockConfig+0x274>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f7fc fe96 	bl	800163c <HAL_InitTick>
 8004910:	4603      	mov	r3, r0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	40022000 	.word	0x40022000
 8004920:	40021000 	.word	0x40021000
 8004924:	04c4b400 	.word	0x04c4b400
 8004928:	08007fc4 	.word	0x08007fc4
 800492c:	20000000 	.word	0x20000000
 8004930:	20000004 	.word	0x20000004

08004934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800493a:	4b2c      	ldr	r3, [pc, #176]	@ (80049ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f003 030c 	and.w	r3, r3, #12
 8004942:	2b04      	cmp	r3, #4
 8004944:	d102      	bne.n	800494c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004946:	4b2a      	ldr	r3, [pc, #168]	@ (80049f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004948:	613b      	str	r3, [r7, #16]
 800494a:	e047      	b.n	80049dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800494c:	4b27      	ldr	r3, [pc, #156]	@ (80049ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f003 030c 	and.w	r3, r3, #12
 8004954:	2b08      	cmp	r3, #8
 8004956:	d102      	bne.n	800495e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004958:	4b26      	ldr	r3, [pc, #152]	@ (80049f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800495a:	613b      	str	r3, [r7, #16]
 800495c:	e03e      	b.n	80049dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800495e:	4b23      	ldr	r3, [pc, #140]	@ (80049ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 030c 	and.w	r3, r3, #12
 8004966:	2b0c      	cmp	r3, #12
 8004968:	d136      	bne.n	80049d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800496a:	4b20      	ldr	r3, [pc, #128]	@ (80049ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004974:	4b1d      	ldr	r3, [pc, #116]	@ (80049ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	091b      	lsrs	r3, r3, #4
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	3301      	adds	r3, #1
 8004980:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b03      	cmp	r3, #3
 8004986:	d10c      	bne.n	80049a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004988:	4a1a      	ldr	r2, [pc, #104]	@ (80049f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004990:	4a16      	ldr	r2, [pc, #88]	@ (80049ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004992:	68d2      	ldr	r2, [r2, #12]
 8004994:	0a12      	lsrs	r2, r2, #8
 8004996:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800499a:	fb02 f303 	mul.w	r3, r2, r3
 800499e:	617b      	str	r3, [r7, #20]
      break;
 80049a0:	e00c      	b.n	80049bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049a2:	4a13      	ldr	r2, [pc, #76]	@ (80049f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049aa:	4a10      	ldr	r2, [pc, #64]	@ (80049ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80049ac:	68d2      	ldr	r2, [r2, #12]
 80049ae:	0a12      	lsrs	r2, r2, #8
 80049b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80049b4:	fb02 f303 	mul.w	r3, r2, r3
 80049b8:	617b      	str	r3, [r7, #20]
      break;
 80049ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049bc:	4b0b      	ldr	r3, [pc, #44]	@ (80049ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	0e5b      	lsrs	r3, r3, #25
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	3301      	adds	r3, #1
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d4:	613b      	str	r3, [r7, #16]
 80049d6:	e001      	b.n	80049dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80049dc:	693b      	ldr	r3, [r7, #16]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	371c      	adds	r7, #28
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	40021000 	.word	0x40021000
 80049f0:	00f42400 	.word	0x00f42400
 80049f4:	016e3600 	.word	0x016e3600

080049f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049fc:	4b03      	ldr	r3, [pc, #12]	@ (8004a0c <HAL_RCC_GetHCLKFreq+0x14>)
 80049fe:	681b      	ldr	r3, [r3, #0]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	20000000 	.word	0x20000000

08004a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a14:	f7ff fff0 	bl	80049f8 <HAL_RCC_GetHCLKFreq>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	4b06      	ldr	r3, [pc, #24]	@ (8004a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	0a1b      	lsrs	r3, r3, #8
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	4904      	ldr	r1, [pc, #16]	@ (8004a38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a26:	5ccb      	ldrb	r3, [r1, r3]
 8004a28:	f003 031f 	and.w	r3, r3, #31
 8004a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40021000 	.word	0x40021000
 8004a38:	08007fd4 	.word	0x08007fd4

08004a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a40:	f7ff ffda 	bl	80049f8 <HAL_RCC_GetHCLKFreq>
 8004a44:	4602      	mov	r2, r0
 8004a46:	4b06      	ldr	r3, [pc, #24]	@ (8004a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	0adb      	lsrs	r3, r3, #11
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	4904      	ldr	r1, [pc, #16]	@ (8004a64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a52:	5ccb      	ldrb	r3, [r1, r3]
 8004a54:	f003 031f 	and.w	r3, r3, #31
 8004a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40021000 	.word	0x40021000
 8004a64:	08007fd4 	.word	0x08007fd4

08004a68 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ae8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f003 0303 	and.w	r3, r3, #3
 8004a76:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a78:	4b1b      	ldr	r3, [pc, #108]	@ (8004ae8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	091b      	lsrs	r3, r3, #4
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	3301      	adds	r3, #1
 8004a84:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	d10c      	bne.n	8004aa6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a8c:	4a17      	ldr	r2, [pc, #92]	@ (8004aec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a94:	4a14      	ldr	r2, [pc, #80]	@ (8004ae8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a96:	68d2      	ldr	r2, [r2, #12]
 8004a98:	0a12      	lsrs	r2, r2, #8
 8004a9a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a9e:	fb02 f303 	mul.w	r3, r2, r3
 8004aa2:	617b      	str	r3, [r7, #20]
    break;
 8004aa4:	e00c      	b.n	8004ac0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004aa6:	4a12      	ldr	r2, [pc, #72]	@ (8004af0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	4a0e      	ldr	r2, [pc, #56]	@ (8004ae8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ab0:	68d2      	ldr	r2, [r2, #12]
 8004ab2:	0a12      	lsrs	r2, r2, #8
 8004ab4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ab8:	fb02 f303 	mul.w	r3, r2, r3
 8004abc:	617b      	str	r3, [r7, #20]
    break;
 8004abe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ac0:	4b09      	ldr	r3, [pc, #36]	@ (8004ae8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	0e5b      	lsrs	r3, r3, #25
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	3301      	adds	r3, #1
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004ada:	687b      	ldr	r3, [r7, #4]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	371c      	adds	r7, #28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	016e3600 	.word	0x016e3600
 8004af0:	00f42400 	.word	0x00f42400

08004af4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004afc:	2300      	movs	r3, #0
 8004afe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b00:	2300      	movs	r3, #0
 8004b02:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 8098 	beq.w	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b12:	2300      	movs	r3, #0
 8004b14:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b16:	4b43      	ldr	r3, [pc, #268]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10d      	bne.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b22:	4b40      	ldr	r3, [pc, #256]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b26:	4a3f      	ldr	r2, [pc, #252]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b36:	60bb      	str	r3, [r7, #8]
 8004b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b3e:	4b3a      	ldr	r3, [pc, #232]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a39      	ldr	r2, [pc, #228]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b4a:	f7fc fdc3 	bl	80016d4 <HAL_GetTick>
 8004b4e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b50:	e009      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b52:	f7fc fdbf 	bl	80016d4 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d902      	bls.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	74fb      	strb	r3, [r7, #19]
        break;
 8004b64:	e005      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b66:	4b30      	ldr	r3, [pc, #192]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0ef      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004b72:	7cfb      	ldrb	r3, [r7, #19]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d159      	bne.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b78:	4b2a      	ldr	r3, [pc, #168]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b82:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d01e      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d019      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b94:	4b23      	ldr	r3, [pc, #140]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ba0:	4b20      	ldr	r3, [pc, #128]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ba6:	4a1f      	ldr	r2, [pc, #124]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ba8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bc0:	4a18      	ldr	r2, [pc, #96]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d016      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd2:	f7fc fd7f 	bl	80016d4 <HAL_GetTick>
 8004bd6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bd8:	e00b      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bda:	f7fc fd7b 	bl	80016d4 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d902      	bls.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	74fb      	strb	r3, [r7, #19]
            break;
 8004bf0:	e006      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0ec      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004c00:	7cfb      	ldrb	r3, [r7, #19]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10b      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c06:	4b07      	ldr	r3, [pc, #28]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c14:	4903      	ldr	r1, [pc, #12]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004c1c:	e008      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c1e:	7cfb      	ldrb	r3, [r7, #19]
 8004c20:	74bb      	strb	r3, [r7, #18]
 8004c22:	e005      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004c24:	40021000 	.word	0x40021000
 8004c28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c2c:	7cfb      	ldrb	r3, [r7, #19]
 8004c2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c30:	7c7b      	ldrb	r3, [r7, #17]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d105      	bne.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c36:	4ba7      	ldr	r3, [pc, #668]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c3a:	4aa6      	ldr	r2, [pc, #664]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c40:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00a      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c4e:	4ba1      	ldr	r3, [pc, #644]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c54:	f023 0203 	bic.w	r2, r3, #3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	499d      	ldr	r1, [pc, #628]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00a      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c70:	4b98      	ldr	r3, [pc, #608]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c76:	f023 020c 	bic.w	r2, r3, #12
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	4995      	ldr	r1, [pc, #596]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0304 	and.w	r3, r3, #4
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c92:	4b90      	ldr	r3, [pc, #576]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c98:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	498c      	ldr	r1, [pc, #560]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0308 	and.w	r3, r3, #8
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cb4:	4b87      	ldr	r3, [pc, #540]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	4984      	ldr	r1, [pc, #528]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0310 	and.w	r3, r3, #16
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cd6:	4b7f      	ldr	r3, [pc, #508]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cdc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	497b      	ldr	r1, [pc, #492]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00a      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cf8:	4b76      	ldr	r3, [pc, #472]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	4973      	ldr	r1, [pc, #460]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d1a:	4b6e      	ldr	r3, [pc, #440]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d20:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	496a      	ldr	r1, [pc, #424]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00a      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d3c:	4b65      	ldr	r3, [pc, #404]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d42:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	4962      	ldr	r1, [pc, #392]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d5e:	4b5d      	ldr	r3, [pc, #372]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d64:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6c:	4959      	ldr	r1, [pc, #356]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d80:	4b54      	ldr	r3, [pc, #336]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d86:	f023 0203 	bic.w	r2, r3, #3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8e:	4951      	ldr	r1, [pc, #324]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004da2:	4b4c      	ldr	r3, [pc, #304]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db0:	4948      	ldr	r1, [pc, #288]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d015      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dc4:	4b43      	ldr	r3, [pc, #268]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd2:	4940      	ldr	r1, [pc, #256]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004de2:	d105      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004de4:	4b3b      	ldr	r3, [pc, #236]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	4a3a      	ldr	r2, [pc, #232]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d015      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004dfc:	4b35      	ldr	r3, [pc, #212]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e02:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e0a:	4932      	ldr	r1, [pc, #200]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e1a:	d105      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	4a2c      	ldr	r2, [pc, #176]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e26:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d015      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e34:	4b27      	ldr	r3, [pc, #156]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e3a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e42:	4924      	ldr	r1, [pc, #144]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e52:	d105      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e54:	4b1f      	ldr	r3, [pc, #124]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	4a1e      	ldr	r2, [pc, #120]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e5e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d015      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e6c:	4b19      	ldr	r3, [pc, #100]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e72:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7a:	4916      	ldr	r1, [pc, #88]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e8a:	d105      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e8c:	4b11      	ldr	r3, [pc, #68]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	4a10      	ldr	r2, [pc, #64]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e96:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d019      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eaa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb2:	4908      	ldr	r1, [pc, #32]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ebe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ec2:	d109      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ec4:	4b03      	ldr	r3, [pc, #12]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	4a02      	ldr	r2, [pc, #8]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ece:	60d3      	str	r3, [r2, #12]
 8004ed0:	e002      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004ed2:	bf00      	nop
 8004ed4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d015      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ee4:	4b29      	ldr	r3, [pc, #164]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef2:	4926      	ldr	r1, [pc, #152]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004efe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f02:	d105      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f04:	4b21      	ldr	r3, [pc, #132]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	4a20      	ldr	r2, [pc, #128]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f0e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d015      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f22:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f2a:	4918      	ldr	r1, [pc, #96]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f3a:	d105      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f3c:	4b13      	ldr	r3, [pc, #76]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	4a12      	ldr	r2, [pc, #72]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f46:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d015      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f54:	4b0d      	ldr	r3, [pc, #52]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f62:	490a      	ldr	r1, [pc, #40]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f72:	d105      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f74:	4b05      	ldr	r3, [pc, #20]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	4a04      	ldr	r2, [pc, #16]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f7e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004f80:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3718      	adds	r7, #24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	40021000 	.word	0x40021000

08004f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e049      	b.n	8005036 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fc f95a 	bl	8001270 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4610      	mov	r0, r2
 8004fd0:	f000 ff68 	bl	8005ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b01      	cmp	r3, #1
 8005052:	d001      	beq.n	8005058 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e04c      	b.n	80050f2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a26      	ldr	r2, [pc, #152]	@ (8005100 <HAL_TIM_Base_Start+0xc0>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d022      	beq.n	80050b0 <HAL_TIM_Base_Start+0x70>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005072:	d01d      	beq.n	80050b0 <HAL_TIM_Base_Start+0x70>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a22      	ldr	r2, [pc, #136]	@ (8005104 <HAL_TIM_Base_Start+0xc4>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d018      	beq.n	80050b0 <HAL_TIM_Base_Start+0x70>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a21      	ldr	r2, [pc, #132]	@ (8005108 <HAL_TIM_Base_Start+0xc8>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d013      	beq.n	80050b0 <HAL_TIM_Base_Start+0x70>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a1f      	ldr	r2, [pc, #124]	@ (800510c <HAL_TIM_Base_Start+0xcc>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00e      	beq.n	80050b0 <HAL_TIM_Base_Start+0x70>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a1e      	ldr	r2, [pc, #120]	@ (8005110 <HAL_TIM_Base_Start+0xd0>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d009      	beq.n	80050b0 <HAL_TIM_Base_Start+0x70>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005114 <HAL_TIM_Base_Start+0xd4>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d004      	beq.n	80050b0 <HAL_TIM_Base_Start+0x70>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005118 <HAL_TIM_Base_Start+0xd8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d115      	bne.n	80050dc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	4b19      	ldr	r3, [pc, #100]	@ (800511c <HAL_TIM_Base_Start+0xdc>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2b06      	cmp	r3, #6
 80050c0:	d015      	beq.n	80050ee <HAL_TIM_Base_Start+0xae>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050c8:	d011      	beq.n	80050ee <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 0201 	orr.w	r2, r2, #1
 80050d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050da:	e008      	b.n	80050ee <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0201 	orr.w	r2, r2, #1
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	e000      	b.n	80050f0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40012c00 	.word	0x40012c00
 8005104:	40000400 	.word	0x40000400
 8005108:	40000800 	.word	0x40000800
 800510c:	40000c00 	.word	0x40000c00
 8005110:	40013400 	.word	0x40013400
 8005114:	40014000 	.word	0x40014000
 8005118:	40015000 	.word	0x40015000
 800511c:	00010007 	.word	0x00010007

08005120 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b01      	cmp	r3, #1
 8005132:	d001      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e054      	b.n	80051e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f042 0201 	orr.w	r2, r2, #1
 800514e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a26      	ldr	r2, [pc, #152]	@ (80051f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d022      	beq.n	80051a0 <HAL_TIM_Base_Start_IT+0x80>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005162:	d01d      	beq.n	80051a0 <HAL_TIM_Base_Start_IT+0x80>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a22      	ldr	r2, [pc, #136]	@ (80051f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d018      	beq.n	80051a0 <HAL_TIM_Base_Start_IT+0x80>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a21      	ldr	r2, [pc, #132]	@ (80051f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d013      	beq.n	80051a0 <HAL_TIM_Base_Start_IT+0x80>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a1f      	ldr	r2, [pc, #124]	@ (80051fc <HAL_TIM_Base_Start_IT+0xdc>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00e      	beq.n	80051a0 <HAL_TIM_Base_Start_IT+0x80>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a1e      	ldr	r2, [pc, #120]	@ (8005200 <HAL_TIM_Base_Start_IT+0xe0>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d009      	beq.n	80051a0 <HAL_TIM_Base_Start_IT+0x80>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a1c      	ldr	r2, [pc, #112]	@ (8005204 <HAL_TIM_Base_Start_IT+0xe4>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d004      	beq.n	80051a0 <HAL_TIM_Base_Start_IT+0x80>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a1b      	ldr	r2, [pc, #108]	@ (8005208 <HAL_TIM_Base_Start_IT+0xe8>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d115      	bne.n	80051cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	4b19      	ldr	r3, [pc, #100]	@ (800520c <HAL_TIM_Base_Start_IT+0xec>)
 80051a8:	4013      	ands	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b06      	cmp	r3, #6
 80051b0:	d015      	beq.n	80051de <HAL_TIM_Base_Start_IT+0xbe>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051b8:	d011      	beq.n	80051de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f042 0201 	orr.w	r2, r2, #1
 80051c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ca:	e008      	b.n	80051de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 0201 	orr.w	r2, r2, #1
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	e000      	b.n	80051e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	40012c00 	.word	0x40012c00
 80051f4:	40000400 	.word	0x40000400
 80051f8:	40000800 	.word	0x40000800
 80051fc:	40000c00 	.word	0x40000c00
 8005200:	40013400 	.word	0x40013400
 8005204:	40014000 	.word	0x40014000
 8005208:	40015000 	.word	0x40015000
 800520c:	00010007 	.word	0x00010007

08005210 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e049      	b.n	80052b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d106      	bne.n	800523c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f841 	bl	80052be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3304      	adds	r3, #4
 800524c:	4619      	mov	r1, r3
 800524e:	4610      	mov	r0, r2
 8005250:	f000 fe28 	bl	8005ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052be:	b480      	push	{r7}
 80052c0:	b083      	sub	sp, #12
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
	...

080052d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d109      	bne.n	80052f8 <HAL_TIM_PWM_Start+0x24>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	bf14      	ite	ne
 80052f0:	2301      	movne	r3, #1
 80052f2:	2300      	moveq	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	e03c      	b.n	8005372 <HAL_TIM_PWM_Start+0x9e>
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d109      	bne.n	8005312 <HAL_TIM_PWM_Start+0x3e>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b01      	cmp	r3, #1
 8005308:	bf14      	ite	ne
 800530a:	2301      	movne	r3, #1
 800530c:	2300      	moveq	r3, #0
 800530e:	b2db      	uxtb	r3, r3
 8005310:	e02f      	b.n	8005372 <HAL_TIM_PWM_Start+0x9e>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b08      	cmp	r3, #8
 8005316:	d109      	bne.n	800532c <HAL_TIM_PWM_Start+0x58>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b01      	cmp	r3, #1
 8005322:	bf14      	ite	ne
 8005324:	2301      	movne	r3, #1
 8005326:	2300      	moveq	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	e022      	b.n	8005372 <HAL_TIM_PWM_Start+0x9e>
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	2b0c      	cmp	r3, #12
 8005330:	d109      	bne.n	8005346 <HAL_TIM_PWM_Start+0x72>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b01      	cmp	r3, #1
 800533c:	bf14      	ite	ne
 800533e:	2301      	movne	r3, #1
 8005340:	2300      	moveq	r3, #0
 8005342:	b2db      	uxtb	r3, r3
 8005344:	e015      	b.n	8005372 <HAL_TIM_PWM_Start+0x9e>
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b10      	cmp	r3, #16
 800534a:	d109      	bne.n	8005360 <HAL_TIM_PWM_Start+0x8c>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b01      	cmp	r3, #1
 8005356:	bf14      	ite	ne
 8005358:	2301      	movne	r3, #1
 800535a:	2300      	moveq	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	e008      	b.n	8005372 <HAL_TIM_PWM_Start+0x9e>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b01      	cmp	r3, #1
 800536a:	bf14      	ite	ne
 800536c:	2301      	movne	r3, #1
 800536e:	2300      	moveq	r3, #0
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e0a6      	b.n	80054c8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d104      	bne.n	800538a <HAL_TIM_PWM_Start+0xb6>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005388:	e023      	b.n	80053d2 <HAL_TIM_PWM_Start+0xfe>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b04      	cmp	r3, #4
 800538e:	d104      	bne.n	800539a <HAL_TIM_PWM_Start+0xc6>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005398:	e01b      	b.n	80053d2 <HAL_TIM_PWM_Start+0xfe>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b08      	cmp	r3, #8
 800539e:	d104      	bne.n	80053aa <HAL_TIM_PWM_Start+0xd6>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053a8:	e013      	b.n	80053d2 <HAL_TIM_PWM_Start+0xfe>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	2b0c      	cmp	r3, #12
 80053ae:	d104      	bne.n	80053ba <HAL_TIM_PWM_Start+0xe6>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053b8:	e00b      	b.n	80053d2 <HAL_TIM_PWM_Start+0xfe>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b10      	cmp	r3, #16
 80053be:	d104      	bne.n	80053ca <HAL_TIM_PWM_Start+0xf6>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053c8:	e003      	b.n	80053d2 <HAL_TIM_PWM_Start+0xfe>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2202      	movs	r2, #2
 80053ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2201      	movs	r2, #1
 80053d8:	6839      	ldr	r1, [r7, #0]
 80053da:	4618      	mov	r0, r3
 80053dc:	f001 f9dc 	bl	8006798 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a3a      	ldr	r2, [pc, #232]	@ (80054d0 <HAL_TIM_PWM_Start+0x1fc>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d018      	beq.n	800541c <HAL_TIM_PWM_Start+0x148>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a39      	ldr	r2, [pc, #228]	@ (80054d4 <HAL_TIM_PWM_Start+0x200>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d013      	beq.n	800541c <HAL_TIM_PWM_Start+0x148>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a37      	ldr	r2, [pc, #220]	@ (80054d8 <HAL_TIM_PWM_Start+0x204>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d00e      	beq.n	800541c <HAL_TIM_PWM_Start+0x148>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a36      	ldr	r2, [pc, #216]	@ (80054dc <HAL_TIM_PWM_Start+0x208>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d009      	beq.n	800541c <HAL_TIM_PWM_Start+0x148>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a34      	ldr	r2, [pc, #208]	@ (80054e0 <HAL_TIM_PWM_Start+0x20c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d004      	beq.n	800541c <HAL_TIM_PWM_Start+0x148>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a33      	ldr	r2, [pc, #204]	@ (80054e4 <HAL_TIM_PWM_Start+0x210>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d101      	bne.n	8005420 <HAL_TIM_PWM_Start+0x14c>
 800541c:	2301      	movs	r3, #1
 800541e:	e000      	b.n	8005422 <HAL_TIM_PWM_Start+0x14e>
 8005420:	2300      	movs	r3, #0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d007      	beq.n	8005436 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005434:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a25      	ldr	r2, [pc, #148]	@ (80054d0 <HAL_TIM_PWM_Start+0x1fc>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d022      	beq.n	8005486 <HAL_TIM_PWM_Start+0x1b2>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005448:	d01d      	beq.n	8005486 <HAL_TIM_PWM_Start+0x1b2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a26      	ldr	r2, [pc, #152]	@ (80054e8 <HAL_TIM_PWM_Start+0x214>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d018      	beq.n	8005486 <HAL_TIM_PWM_Start+0x1b2>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a24      	ldr	r2, [pc, #144]	@ (80054ec <HAL_TIM_PWM_Start+0x218>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d013      	beq.n	8005486 <HAL_TIM_PWM_Start+0x1b2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a23      	ldr	r2, [pc, #140]	@ (80054f0 <HAL_TIM_PWM_Start+0x21c>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d00e      	beq.n	8005486 <HAL_TIM_PWM_Start+0x1b2>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a19      	ldr	r2, [pc, #100]	@ (80054d4 <HAL_TIM_PWM_Start+0x200>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d009      	beq.n	8005486 <HAL_TIM_PWM_Start+0x1b2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a18      	ldr	r2, [pc, #96]	@ (80054d8 <HAL_TIM_PWM_Start+0x204>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d004      	beq.n	8005486 <HAL_TIM_PWM_Start+0x1b2>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a18      	ldr	r2, [pc, #96]	@ (80054e4 <HAL_TIM_PWM_Start+0x210>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d115      	bne.n	80054b2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	4b19      	ldr	r3, [pc, #100]	@ (80054f4 <HAL_TIM_PWM_Start+0x220>)
 800548e:	4013      	ands	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b06      	cmp	r3, #6
 8005496:	d015      	beq.n	80054c4 <HAL_TIM_PWM_Start+0x1f0>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800549e:	d011      	beq.n	80054c4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0201 	orr.w	r2, r2, #1
 80054ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b0:	e008      	b.n	80054c4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f042 0201 	orr.w	r2, r2, #1
 80054c0:	601a      	str	r2, [r3, #0]
 80054c2:	e000      	b.n	80054c6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40012c00 	.word	0x40012c00
 80054d4:	40013400 	.word	0x40013400
 80054d8:	40014000 	.word	0x40014000
 80054dc:	40014400 	.word	0x40014400
 80054e0:	40014800 	.word	0x40014800
 80054e4:	40015000 	.word	0x40015000
 80054e8:	40000400 	.word	0x40000400
 80054ec:	40000800 	.word	0x40000800
 80054f0:	40000c00 	.word	0x40000c00
 80054f4:	00010007 	.word	0x00010007

080054f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e097      	b.n	800563c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d106      	bne.n	8005526 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7fb ff0d 	bl	8001340 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2202      	movs	r2, #2
 800552a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	6812      	ldr	r2, [r2, #0]
 8005538:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800553c:	f023 0307 	bic.w	r3, r3, #7
 8005540:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	3304      	adds	r3, #4
 800554a:	4619      	mov	r1, r3
 800554c:	4610      	mov	r0, r2
 800554e:	f000 fca9 	bl	8005ea4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	4313      	orrs	r3, r2
 8005572:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800557a:	f023 0303 	bic.w	r3, r3, #3
 800557e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	021b      	lsls	r3, r3, #8
 800558a:	4313      	orrs	r3, r2
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005598:	f023 030c 	bic.w	r3, r3, #12
 800559c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	021b      	lsls	r3, r3, #8
 80055b4:	4313      	orrs	r3, r2
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	011a      	lsls	r2, r3, #4
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	031b      	lsls	r3, r3, #12
 80055c8:	4313      	orrs	r3, r2
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80055d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80055de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	011b      	lsls	r3, r3, #4
 80055ea:	4313      	orrs	r3, r2
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3718      	adds	r7, #24
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005654:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800565c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005664:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800566c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d110      	bne.n	8005696 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d102      	bne.n	8005680 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800567a:	7b7b      	ldrb	r3, [r7, #13]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d001      	beq.n	8005684 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e069      	b.n	8005758 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005694:	e031      	b.n	80056fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b04      	cmp	r3, #4
 800569a:	d110      	bne.n	80056be <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800569c:	7bbb      	ldrb	r3, [r7, #14]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d102      	bne.n	80056a8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056a2:	7b3b      	ldrb	r3, [r7, #12]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d001      	beq.n	80056ac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e055      	b.n	8005758 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2202      	movs	r2, #2
 80056b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056bc:	e01d      	b.n	80056fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056be:	7bfb      	ldrb	r3, [r7, #15]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d108      	bne.n	80056d6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056c4:	7bbb      	ldrb	r3, [r7, #14]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d105      	bne.n	80056d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056ca:	7b7b      	ldrb	r3, [r7, #13]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d102      	bne.n	80056d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056d0:	7b3b      	ldrb	r3, [r7, #12]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d001      	beq.n	80056da <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e03e      	b.n	8005758 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2202      	movs	r2, #2
 80056de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2202      	movs	r2, #2
 80056e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2202      	movs	r2, #2
 80056ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2202      	movs	r2, #2
 80056f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <HAL_TIM_Encoder_Start+0xc4>
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	2b04      	cmp	r3, #4
 8005704:	d008      	beq.n	8005718 <HAL_TIM_Encoder_Start+0xd4>
 8005706:	e00f      	b.n	8005728 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2201      	movs	r2, #1
 800570e:	2100      	movs	r1, #0
 8005710:	4618      	mov	r0, r3
 8005712:	f001 f841 	bl	8006798 <TIM_CCxChannelCmd>
      break;
 8005716:	e016      	b.n	8005746 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2201      	movs	r2, #1
 800571e:	2104      	movs	r1, #4
 8005720:	4618      	mov	r0, r3
 8005722:	f001 f839 	bl	8006798 <TIM_CCxChannelCmd>
      break;
 8005726:	e00e      	b.n	8005746 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2201      	movs	r2, #1
 800572e:	2100      	movs	r1, #0
 8005730:	4618      	mov	r0, r3
 8005732:	f001 f831 	bl	8006798 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2201      	movs	r2, #1
 800573c:	2104      	movs	r1, #4
 800573e:	4618      	mov	r0, r3
 8005740:	f001 f82a 	bl	8006798 <TIM_CCxChannelCmd>
      break;
 8005744:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f042 0201 	orr.w	r2, r2, #1
 8005754:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d020      	beq.n	80057c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d01b      	beq.n	80057c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f06f 0202 	mvn.w	r2, #2
 8005794:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	f003 0303 	and.w	r3, r3, #3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fb5c 	bl	8005e68 <HAL_TIM_IC_CaptureCallback>
 80057b0:	e005      	b.n	80057be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fb4e 	bl	8005e54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 fb5f 	bl	8005e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f003 0304 	and.w	r3, r3, #4
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d020      	beq.n	8005810 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d01b      	beq.n	8005810 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f06f 0204 	mvn.w	r2, #4
 80057e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2202      	movs	r2, #2
 80057e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fb36 	bl	8005e68 <HAL_TIM_IC_CaptureCallback>
 80057fc:	e005      	b.n	800580a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fb28 	bl	8005e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fb39 	bl	8005e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f003 0308 	and.w	r3, r3, #8
 8005816:	2b00      	cmp	r3, #0
 8005818:	d020      	beq.n	800585c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	2b00      	cmp	r3, #0
 8005822:	d01b      	beq.n	800585c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f06f 0208 	mvn.w	r2, #8
 800582c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2204      	movs	r2, #4
 8005832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	f003 0303 	and.w	r3, r3, #3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fb10 	bl	8005e68 <HAL_TIM_IC_CaptureCallback>
 8005848:	e005      	b.n	8005856 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fb02 	bl	8005e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fb13 	bl	8005e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f003 0310 	and.w	r3, r3, #16
 8005862:	2b00      	cmp	r3, #0
 8005864:	d020      	beq.n	80058a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f003 0310 	and.w	r3, r3, #16
 800586c:	2b00      	cmp	r3, #0
 800586e:	d01b      	beq.n	80058a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f06f 0210 	mvn.w	r2, #16
 8005878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2208      	movs	r2, #8
 800587e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 faea 	bl	8005e68 <HAL_TIM_IC_CaptureCallback>
 8005894:	e005      	b.n	80058a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fadc 	bl	8005e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 faed 	bl	8005e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00c      	beq.n	80058cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d007      	beq.n	80058cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f06f 0201 	mvn.w	r2, #1
 80058c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7fb fb56 	bl	8000f78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d104      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00c      	beq.n	80058fa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d007      	beq.n	80058fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80058f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f001 f8a9 	bl	8006a4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00c      	beq.n	800591e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800590a:	2b00      	cmp	r3, #0
 800590c:	d007      	beq.n	800591e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f001 f8a1 	bl	8006a60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00c      	beq.n	8005942 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800592e:	2b00      	cmp	r3, #0
 8005930:	d007      	beq.n	8005942 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800593a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 faa7 	bl	8005e90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f003 0320 	and.w	r3, r3, #32
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00c      	beq.n	8005966 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f003 0320 	and.w	r3, r3, #32
 8005952:	2b00      	cmp	r3, #0
 8005954:	d007      	beq.n	8005966 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f06f 0220 	mvn.w	r2, #32
 800595e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f001 f869 	bl	8006a38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00c      	beq.n	800598a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d007      	beq.n	800598a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f001 f875 	bl	8006a74 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00c      	beq.n	80059ae <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d007      	beq.n	80059ae <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80059a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f001 f86d 	bl	8006a88 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00c      	beq.n	80059d2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d007      	beq.n	80059d2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80059ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f001 f865 	bl	8006a9c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00c      	beq.n	80059f6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d007      	beq.n	80059f6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80059ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f001 f85d 	bl	8006ab0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059f6:	bf00      	nop
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
	...

08005a00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d101      	bne.n	8005a1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	e0ff      	b.n	8005c1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b14      	cmp	r3, #20
 8005a2a:	f200 80f0 	bhi.w	8005c0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a34:	08005a89 	.word	0x08005a89
 8005a38:	08005c0f 	.word	0x08005c0f
 8005a3c:	08005c0f 	.word	0x08005c0f
 8005a40:	08005c0f 	.word	0x08005c0f
 8005a44:	08005ac9 	.word	0x08005ac9
 8005a48:	08005c0f 	.word	0x08005c0f
 8005a4c:	08005c0f 	.word	0x08005c0f
 8005a50:	08005c0f 	.word	0x08005c0f
 8005a54:	08005b0b 	.word	0x08005b0b
 8005a58:	08005c0f 	.word	0x08005c0f
 8005a5c:	08005c0f 	.word	0x08005c0f
 8005a60:	08005c0f 	.word	0x08005c0f
 8005a64:	08005b4b 	.word	0x08005b4b
 8005a68:	08005c0f 	.word	0x08005c0f
 8005a6c:	08005c0f 	.word	0x08005c0f
 8005a70:	08005c0f 	.word	0x08005c0f
 8005a74:	08005b8d 	.word	0x08005b8d
 8005a78:	08005c0f 	.word	0x08005c0f
 8005a7c:	08005c0f 	.word	0x08005c0f
 8005a80:	08005c0f 	.word	0x08005c0f
 8005a84:	08005bcd 	.word	0x08005bcd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 fabc 	bl	800600c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699a      	ldr	r2, [r3, #24]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0208 	orr.w	r2, r2, #8
 8005aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	699a      	ldr	r2, [r3, #24]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0204 	bic.w	r2, r2, #4
 8005ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6999      	ldr	r1, [r3, #24]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	691a      	ldr	r2, [r3, #16]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	619a      	str	r2, [r3, #24]
      break;
 8005ac6:	e0a5      	b.n	8005c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68b9      	ldr	r1, [r7, #8]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f000 fb36 	bl	8006140 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	699a      	ldr	r2, [r3, #24]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	699a      	ldr	r2, [r3, #24]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005af2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6999      	ldr	r1, [r3, #24]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	021a      	lsls	r2, r3, #8
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	619a      	str	r2, [r3, #24]
      break;
 8005b08:	e084      	b.n	8005c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68b9      	ldr	r1, [r7, #8]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 fba9 	bl	8006268 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69da      	ldr	r2, [r3, #28]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f042 0208 	orr.w	r2, r2, #8
 8005b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69da      	ldr	r2, [r3, #28]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0204 	bic.w	r2, r2, #4
 8005b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	69d9      	ldr	r1, [r3, #28]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	61da      	str	r2, [r3, #28]
      break;
 8005b48:	e064      	b.n	8005c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68b9      	ldr	r1, [r7, #8]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f000 fc1b 	bl	800638c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	69da      	ldr	r2, [r3, #28]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69da      	ldr	r2, [r3, #28]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	69d9      	ldr	r1, [r3, #28]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	021a      	lsls	r2, r3, #8
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	61da      	str	r2, [r3, #28]
      break;
 8005b8a:	e043      	b.n	8005c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68b9      	ldr	r1, [r7, #8]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fc8e 	bl	80064b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0208 	orr.w	r2, r2, #8
 8005ba6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0204 	bic.w	r2, r2, #4
 8005bb6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	691a      	ldr	r2, [r3, #16]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005bca:	e023      	b.n	8005c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68b9      	ldr	r1, [r7, #8]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fcd8 	bl	8006588 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005be6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bf6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	021a      	lsls	r2, r3, #8
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005c0c:	e002      	b.n	8005c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	75fb      	strb	r3, [r7, #23]
      break;
 8005c12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop

08005c28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c32:	2300      	movs	r3, #0
 8005c34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d101      	bne.n	8005c44 <HAL_TIM_ConfigClockSource+0x1c>
 8005c40:	2302      	movs	r3, #2
 8005c42:	e0f6      	b.n	8005e32 <HAL_TIM_ConfigClockSource+0x20a>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005c62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a6f      	ldr	r2, [pc, #444]	@ (8005e3c <HAL_TIM_ConfigClockSource+0x214>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	f000 80c1 	beq.w	8005e06 <HAL_TIM_ConfigClockSource+0x1de>
 8005c84:	4a6d      	ldr	r2, [pc, #436]	@ (8005e3c <HAL_TIM_ConfigClockSource+0x214>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	f200 80c6 	bhi.w	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c8c:	4a6c      	ldr	r2, [pc, #432]	@ (8005e40 <HAL_TIM_ConfigClockSource+0x218>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	f000 80b9 	beq.w	8005e06 <HAL_TIM_ConfigClockSource+0x1de>
 8005c94:	4a6a      	ldr	r2, [pc, #424]	@ (8005e40 <HAL_TIM_ConfigClockSource+0x218>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	f200 80be 	bhi.w	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c9c:	4a69      	ldr	r2, [pc, #420]	@ (8005e44 <HAL_TIM_ConfigClockSource+0x21c>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	f000 80b1 	beq.w	8005e06 <HAL_TIM_ConfigClockSource+0x1de>
 8005ca4:	4a67      	ldr	r2, [pc, #412]	@ (8005e44 <HAL_TIM_ConfigClockSource+0x21c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	f200 80b6 	bhi.w	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cac:	4a66      	ldr	r2, [pc, #408]	@ (8005e48 <HAL_TIM_ConfigClockSource+0x220>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	f000 80a9 	beq.w	8005e06 <HAL_TIM_ConfigClockSource+0x1de>
 8005cb4:	4a64      	ldr	r2, [pc, #400]	@ (8005e48 <HAL_TIM_ConfigClockSource+0x220>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	f200 80ae 	bhi.w	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cbc:	4a63      	ldr	r2, [pc, #396]	@ (8005e4c <HAL_TIM_ConfigClockSource+0x224>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	f000 80a1 	beq.w	8005e06 <HAL_TIM_ConfigClockSource+0x1de>
 8005cc4:	4a61      	ldr	r2, [pc, #388]	@ (8005e4c <HAL_TIM_ConfigClockSource+0x224>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	f200 80a6 	bhi.w	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ccc:	4a60      	ldr	r2, [pc, #384]	@ (8005e50 <HAL_TIM_ConfigClockSource+0x228>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	f000 8099 	beq.w	8005e06 <HAL_TIM_ConfigClockSource+0x1de>
 8005cd4:	4a5e      	ldr	r2, [pc, #376]	@ (8005e50 <HAL_TIM_ConfigClockSource+0x228>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	f200 809e 	bhi.w	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cdc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005ce0:	f000 8091 	beq.w	8005e06 <HAL_TIM_ConfigClockSource+0x1de>
 8005ce4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005ce8:	f200 8096 	bhi.w	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cf0:	f000 8089 	beq.w	8005e06 <HAL_TIM_ConfigClockSource+0x1de>
 8005cf4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cf8:	f200 808e 	bhi.w	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d00:	d03e      	beq.n	8005d80 <HAL_TIM_ConfigClockSource+0x158>
 8005d02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d06:	f200 8087 	bhi.w	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d0e:	f000 8086 	beq.w	8005e1e <HAL_TIM_ConfigClockSource+0x1f6>
 8005d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d16:	d87f      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d18:	2b70      	cmp	r3, #112	@ 0x70
 8005d1a:	d01a      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x12a>
 8005d1c:	2b70      	cmp	r3, #112	@ 0x70
 8005d1e:	d87b      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d20:	2b60      	cmp	r3, #96	@ 0x60
 8005d22:	d050      	beq.n	8005dc6 <HAL_TIM_ConfigClockSource+0x19e>
 8005d24:	2b60      	cmp	r3, #96	@ 0x60
 8005d26:	d877      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d28:	2b50      	cmp	r3, #80	@ 0x50
 8005d2a:	d03c      	beq.n	8005da6 <HAL_TIM_ConfigClockSource+0x17e>
 8005d2c:	2b50      	cmp	r3, #80	@ 0x50
 8005d2e:	d873      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d30:	2b40      	cmp	r3, #64	@ 0x40
 8005d32:	d058      	beq.n	8005de6 <HAL_TIM_ConfigClockSource+0x1be>
 8005d34:	2b40      	cmp	r3, #64	@ 0x40
 8005d36:	d86f      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d38:	2b30      	cmp	r3, #48	@ 0x30
 8005d3a:	d064      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x1de>
 8005d3c:	2b30      	cmp	r3, #48	@ 0x30
 8005d3e:	d86b      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d40:	2b20      	cmp	r3, #32
 8005d42:	d060      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x1de>
 8005d44:	2b20      	cmp	r3, #32
 8005d46:	d867      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d05c      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x1de>
 8005d4c:	2b10      	cmp	r3, #16
 8005d4e:	d05a      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x1de>
 8005d50:	e062      	b.n	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d62:	f000 fcf9 	bl	8006758 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	609a      	str	r2, [r3, #8]
      break;
 8005d7e:	e04f      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d90:	f000 fce2 	bl	8006758 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689a      	ldr	r2, [r3, #8]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005da2:	609a      	str	r2, [r3, #8]
      break;
 8005da4:	e03c      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005db2:	461a      	mov	r2, r3
 8005db4:	f000 fc54 	bl	8006660 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2150      	movs	r1, #80	@ 0x50
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 fcad 	bl	800671e <TIM_ITRx_SetConfig>
      break;
 8005dc4:	e02c      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f000 fc73 	bl	80066be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2160      	movs	r1, #96	@ 0x60
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 fc9d 	bl	800671e <TIM_ITRx_SetConfig>
      break;
 8005de4:	e01c      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005df2:	461a      	mov	r2, r3
 8005df4:	f000 fc34 	bl	8006660 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2140      	movs	r1, #64	@ 0x40
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 fc8d 	bl	800671e <TIM_ITRx_SetConfig>
      break;
 8005e04:	e00c      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4619      	mov	r1, r3
 8005e10:	4610      	mov	r0, r2
 8005e12:	f000 fc84 	bl	800671e <TIM_ITRx_SetConfig>
      break;
 8005e16:	e003      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e1c:	e000      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005e1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	00100070 	.word	0x00100070
 8005e40:	00100060 	.word	0x00100060
 8005e44:	00100050 	.word	0x00100050
 8005e48:	00100040 	.word	0x00100040
 8005e4c:	00100030 	.word	0x00100030
 8005e50:	00100020 	.word	0x00100020

08005e54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a4c      	ldr	r2, [pc, #304]	@ (8005fe8 <TIM_Base_SetConfig+0x144>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d017      	beq.n	8005eec <TIM_Base_SetConfig+0x48>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ec2:	d013      	beq.n	8005eec <TIM_Base_SetConfig+0x48>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a49      	ldr	r2, [pc, #292]	@ (8005fec <TIM_Base_SetConfig+0x148>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00f      	beq.n	8005eec <TIM_Base_SetConfig+0x48>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a48      	ldr	r2, [pc, #288]	@ (8005ff0 <TIM_Base_SetConfig+0x14c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d00b      	beq.n	8005eec <TIM_Base_SetConfig+0x48>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a47      	ldr	r2, [pc, #284]	@ (8005ff4 <TIM_Base_SetConfig+0x150>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d007      	beq.n	8005eec <TIM_Base_SetConfig+0x48>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a46      	ldr	r2, [pc, #280]	@ (8005ff8 <TIM_Base_SetConfig+0x154>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d003      	beq.n	8005eec <TIM_Base_SetConfig+0x48>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a45      	ldr	r2, [pc, #276]	@ (8005ffc <TIM_Base_SetConfig+0x158>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d108      	bne.n	8005efe <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a39      	ldr	r2, [pc, #228]	@ (8005fe8 <TIM_Base_SetConfig+0x144>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d023      	beq.n	8005f4e <TIM_Base_SetConfig+0xaa>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f0c:	d01f      	beq.n	8005f4e <TIM_Base_SetConfig+0xaa>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a36      	ldr	r2, [pc, #216]	@ (8005fec <TIM_Base_SetConfig+0x148>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d01b      	beq.n	8005f4e <TIM_Base_SetConfig+0xaa>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a35      	ldr	r2, [pc, #212]	@ (8005ff0 <TIM_Base_SetConfig+0x14c>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d017      	beq.n	8005f4e <TIM_Base_SetConfig+0xaa>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a34      	ldr	r2, [pc, #208]	@ (8005ff4 <TIM_Base_SetConfig+0x150>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d013      	beq.n	8005f4e <TIM_Base_SetConfig+0xaa>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a33      	ldr	r2, [pc, #204]	@ (8005ff8 <TIM_Base_SetConfig+0x154>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d00f      	beq.n	8005f4e <TIM_Base_SetConfig+0xaa>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a33      	ldr	r2, [pc, #204]	@ (8006000 <TIM_Base_SetConfig+0x15c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d00b      	beq.n	8005f4e <TIM_Base_SetConfig+0xaa>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a32      	ldr	r2, [pc, #200]	@ (8006004 <TIM_Base_SetConfig+0x160>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d007      	beq.n	8005f4e <TIM_Base_SetConfig+0xaa>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a31      	ldr	r2, [pc, #196]	@ (8006008 <TIM_Base_SetConfig+0x164>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d003      	beq.n	8005f4e <TIM_Base_SetConfig+0xaa>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a2c      	ldr	r2, [pc, #176]	@ (8005ffc <TIM_Base_SetConfig+0x158>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d108      	bne.n	8005f60 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a18      	ldr	r2, [pc, #96]	@ (8005fe8 <TIM_Base_SetConfig+0x144>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d013      	beq.n	8005fb4 <TIM_Base_SetConfig+0x110>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ff8 <TIM_Base_SetConfig+0x154>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d00f      	beq.n	8005fb4 <TIM_Base_SetConfig+0x110>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a1a      	ldr	r2, [pc, #104]	@ (8006000 <TIM_Base_SetConfig+0x15c>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d00b      	beq.n	8005fb4 <TIM_Base_SetConfig+0x110>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a19      	ldr	r2, [pc, #100]	@ (8006004 <TIM_Base_SetConfig+0x160>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d007      	beq.n	8005fb4 <TIM_Base_SetConfig+0x110>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a18      	ldr	r2, [pc, #96]	@ (8006008 <TIM_Base_SetConfig+0x164>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d003      	beq.n	8005fb4 <TIM_Base_SetConfig+0x110>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a13      	ldr	r2, [pc, #76]	@ (8005ffc <TIM_Base_SetConfig+0x158>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d103      	bne.n	8005fbc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	691a      	ldr	r2, [r3, #16]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d105      	bne.n	8005fda <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	f023 0201 	bic.w	r2, r3, #1
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	611a      	str	r2, [r3, #16]
  }
}
 8005fda:	bf00      	nop
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	40012c00 	.word	0x40012c00
 8005fec:	40000400 	.word	0x40000400
 8005ff0:	40000800 	.word	0x40000800
 8005ff4:	40000c00 	.word	0x40000c00
 8005ff8:	40013400 	.word	0x40013400
 8005ffc:	40015000 	.word	0x40015000
 8006000:	40014000 	.word	0x40014000
 8006004:	40014400 	.word	0x40014400
 8006008:	40014800 	.word	0x40014800

0800600c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800600c:	b480      	push	{r7}
 800600e:	b087      	sub	sp, #28
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	f023 0201 	bic.w	r2, r3, #1
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800603a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800603e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 0303 	bic.w	r3, r3, #3
 8006046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	4313      	orrs	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f023 0302 	bic.w	r3, r3, #2
 8006058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	4313      	orrs	r3, r2
 8006062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a30      	ldr	r2, [pc, #192]	@ (8006128 <TIM_OC1_SetConfig+0x11c>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d013      	beq.n	8006094 <TIM_OC1_SetConfig+0x88>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a2f      	ldr	r2, [pc, #188]	@ (800612c <TIM_OC1_SetConfig+0x120>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00f      	beq.n	8006094 <TIM_OC1_SetConfig+0x88>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a2e      	ldr	r2, [pc, #184]	@ (8006130 <TIM_OC1_SetConfig+0x124>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d00b      	beq.n	8006094 <TIM_OC1_SetConfig+0x88>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a2d      	ldr	r2, [pc, #180]	@ (8006134 <TIM_OC1_SetConfig+0x128>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d007      	beq.n	8006094 <TIM_OC1_SetConfig+0x88>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a2c      	ldr	r2, [pc, #176]	@ (8006138 <TIM_OC1_SetConfig+0x12c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d003      	beq.n	8006094 <TIM_OC1_SetConfig+0x88>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a2b      	ldr	r2, [pc, #172]	@ (800613c <TIM_OC1_SetConfig+0x130>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d10c      	bne.n	80060ae <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f023 0308 	bic.w	r3, r3, #8
 800609a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f023 0304 	bic.w	r3, r3, #4
 80060ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006128 <TIM_OC1_SetConfig+0x11c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d013      	beq.n	80060de <TIM_OC1_SetConfig+0xd2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a1c      	ldr	r2, [pc, #112]	@ (800612c <TIM_OC1_SetConfig+0x120>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d00f      	beq.n	80060de <TIM_OC1_SetConfig+0xd2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a1b      	ldr	r2, [pc, #108]	@ (8006130 <TIM_OC1_SetConfig+0x124>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d00b      	beq.n	80060de <TIM_OC1_SetConfig+0xd2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a1a      	ldr	r2, [pc, #104]	@ (8006134 <TIM_OC1_SetConfig+0x128>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d007      	beq.n	80060de <TIM_OC1_SetConfig+0xd2>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a19      	ldr	r2, [pc, #100]	@ (8006138 <TIM_OC1_SetConfig+0x12c>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d003      	beq.n	80060de <TIM_OC1_SetConfig+0xd2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a18      	ldr	r2, [pc, #96]	@ (800613c <TIM_OC1_SetConfig+0x130>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d111      	bne.n	8006102 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	4313      	orrs	r3, r2
 8006100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	621a      	str	r2, [r3, #32]
}
 800611c:	bf00      	nop
 800611e:	371c      	adds	r7, #28
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	40012c00 	.word	0x40012c00
 800612c:	40013400 	.word	0x40013400
 8006130:	40014000 	.word	0x40014000
 8006134:	40014400 	.word	0x40014400
 8006138:	40014800 	.word	0x40014800
 800613c:	40015000 	.word	0x40015000

08006140 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	f023 0210 	bic.w	r2, r3, #16
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800616e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800617a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	021b      	lsls	r3, r3, #8
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	4313      	orrs	r3, r2
 8006186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f023 0320 	bic.w	r3, r3, #32
 800618e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	011b      	lsls	r3, r3, #4
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	4313      	orrs	r3, r2
 800619a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a2c      	ldr	r2, [pc, #176]	@ (8006250 <TIM_OC2_SetConfig+0x110>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d007      	beq.n	80061b4 <TIM_OC2_SetConfig+0x74>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a2b      	ldr	r2, [pc, #172]	@ (8006254 <TIM_OC2_SetConfig+0x114>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d003      	beq.n	80061b4 <TIM_OC2_SetConfig+0x74>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a2a      	ldr	r2, [pc, #168]	@ (8006258 <TIM_OC2_SetConfig+0x118>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d10d      	bne.n	80061d0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	011b      	lsls	r3, r3, #4
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a1f      	ldr	r2, [pc, #124]	@ (8006250 <TIM_OC2_SetConfig+0x110>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d013      	beq.n	8006200 <TIM_OC2_SetConfig+0xc0>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a1e      	ldr	r2, [pc, #120]	@ (8006254 <TIM_OC2_SetConfig+0x114>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d00f      	beq.n	8006200 <TIM_OC2_SetConfig+0xc0>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a1e      	ldr	r2, [pc, #120]	@ (800625c <TIM_OC2_SetConfig+0x11c>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d00b      	beq.n	8006200 <TIM_OC2_SetConfig+0xc0>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a1d      	ldr	r2, [pc, #116]	@ (8006260 <TIM_OC2_SetConfig+0x120>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d007      	beq.n	8006200 <TIM_OC2_SetConfig+0xc0>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a1c      	ldr	r2, [pc, #112]	@ (8006264 <TIM_OC2_SetConfig+0x124>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d003      	beq.n	8006200 <TIM_OC2_SetConfig+0xc0>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a17      	ldr	r2, [pc, #92]	@ (8006258 <TIM_OC2_SetConfig+0x118>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d113      	bne.n	8006228 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006206:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800620e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	4313      	orrs	r3, r2
 800621a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	4313      	orrs	r3, r2
 8006226:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	621a      	str	r2, [r3, #32]
}
 8006242:	bf00      	nop
 8006244:	371c      	adds	r7, #28
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	40012c00 	.word	0x40012c00
 8006254:	40013400 	.word	0x40013400
 8006258:	40015000 	.word	0x40015000
 800625c:	40014000 	.word	0x40014000
 8006260:	40014400 	.word	0x40014400
 8006264:	40014800 	.word	0x40014800

08006268 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800629a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0303 	bic.w	r3, r3, #3
 80062a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	021b      	lsls	r3, r3, #8
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	4313      	orrs	r3, r2
 80062c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a2b      	ldr	r2, [pc, #172]	@ (8006374 <TIM_OC3_SetConfig+0x10c>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d007      	beq.n	80062da <TIM_OC3_SetConfig+0x72>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a2a      	ldr	r2, [pc, #168]	@ (8006378 <TIM_OC3_SetConfig+0x110>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d003      	beq.n	80062da <TIM_OC3_SetConfig+0x72>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a29      	ldr	r2, [pc, #164]	@ (800637c <TIM_OC3_SetConfig+0x114>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d10d      	bne.n	80062f6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	021b      	lsls	r3, r3, #8
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a1e      	ldr	r2, [pc, #120]	@ (8006374 <TIM_OC3_SetConfig+0x10c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d013      	beq.n	8006326 <TIM_OC3_SetConfig+0xbe>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a1d      	ldr	r2, [pc, #116]	@ (8006378 <TIM_OC3_SetConfig+0x110>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d00f      	beq.n	8006326 <TIM_OC3_SetConfig+0xbe>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a1d      	ldr	r2, [pc, #116]	@ (8006380 <TIM_OC3_SetConfig+0x118>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d00b      	beq.n	8006326 <TIM_OC3_SetConfig+0xbe>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a1c      	ldr	r2, [pc, #112]	@ (8006384 <TIM_OC3_SetConfig+0x11c>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d007      	beq.n	8006326 <TIM_OC3_SetConfig+0xbe>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a1b      	ldr	r2, [pc, #108]	@ (8006388 <TIM_OC3_SetConfig+0x120>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d003      	beq.n	8006326 <TIM_OC3_SetConfig+0xbe>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a16      	ldr	r2, [pc, #88]	@ (800637c <TIM_OC3_SetConfig+0x114>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d113      	bne.n	800634e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800632c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	011b      	lsls	r3, r3, #4
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	4313      	orrs	r3, r2
 8006340:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	4313      	orrs	r3, r2
 800634c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	621a      	str	r2, [r3, #32]
}
 8006368:	bf00      	nop
 800636a:	371c      	adds	r7, #28
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	40012c00 	.word	0x40012c00
 8006378:	40013400 	.word	0x40013400
 800637c:	40015000 	.word	0x40015000
 8006380:	40014000 	.word	0x40014000
 8006384:	40014400 	.word	0x40014400
 8006388:	40014800 	.word	0x40014800

0800638c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	021b      	lsls	r3, r3, #8
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	031b      	lsls	r3, r3, #12
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a2c      	ldr	r2, [pc, #176]	@ (800649c <TIM_OC4_SetConfig+0x110>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d007      	beq.n	8006400 <TIM_OC4_SetConfig+0x74>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a2b      	ldr	r2, [pc, #172]	@ (80064a0 <TIM_OC4_SetConfig+0x114>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d003      	beq.n	8006400 <TIM_OC4_SetConfig+0x74>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a2a      	ldr	r2, [pc, #168]	@ (80064a4 <TIM_OC4_SetConfig+0x118>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d10d      	bne.n	800641c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	031b      	lsls	r3, r3, #12
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	4313      	orrs	r3, r2
 8006412:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800641a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a1f      	ldr	r2, [pc, #124]	@ (800649c <TIM_OC4_SetConfig+0x110>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d013      	beq.n	800644c <TIM_OC4_SetConfig+0xc0>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a1e      	ldr	r2, [pc, #120]	@ (80064a0 <TIM_OC4_SetConfig+0x114>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d00f      	beq.n	800644c <TIM_OC4_SetConfig+0xc0>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a1e      	ldr	r2, [pc, #120]	@ (80064a8 <TIM_OC4_SetConfig+0x11c>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d00b      	beq.n	800644c <TIM_OC4_SetConfig+0xc0>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a1d      	ldr	r2, [pc, #116]	@ (80064ac <TIM_OC4_SetConfig+0x120>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d007      	beq.n	800644c <TIM_OC4_SetConfig+0xc0>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a1c      	ldr	r2, [pc, #112]	@ (80064b0 <TIM_OC4_SetConfig+0x124>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d003      	beq.n	800644c <TIM_OC4_SetConfig+0xc0>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a17      	ldr	r2, [pc, #92]	@ (80064a4 <TIM_OC4_SetConfig+0x118>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d113      	bne.n	8006474 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006452:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800645a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	019b      	lsls	r3, r3, #6
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	4313      	orrs	r3, r2
 8006466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	019b      	lsls	r3, r3, #6
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	4313      	orrs	r3, r2
 8006472:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	621a      	str	r2, [r3, #32]
}
 800648e:	bf00      	nop
 8006490:	371c      	adds	r7, #28
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	40012c00 	.word	0x40012c00
 80064a0:	40013400 	.word	0x40013400
 80064a4:	40015000 	.word	0x40015000
 80064a8:	40014000 	.word	0x40014000
 80064ac:	40014400 	.word	0x40014400
 80064b0:	40014800 	.word	0x40014800

080064b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80064f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	041b      	lsls	r3, r3, #16
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	4313      	orrs	r3, r2
 8006504:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a19      	ldr	r2, [pc, #100]	@ (8006570 <TIM_OC5_SetConfig+0xbc>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d013      	beq.n	8006536 <TIM_OC5_SetConfig+0x82>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a18      	ldr	r2, [pc, #96]	@ (8006574 <TIM_OC5_SetConfig+0xc0>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d00f      	beq.n	8006536 <TIM_OC5_SetConfig+0x82>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a17      	ldr	r2, [pc, #92]	@ (8006578 <TIM_OC5_SetConfig+0xc4>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d00b      	beq.n	8006536 <TIM_OC5_SetConfig+0x82>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a16      	ldr	r2, [pc, #88]	@ (800657c <TIM_OC5_SetConfig+0xc8>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d007      	beq.n	8006536 <TIM_OC5_SetConfig+0x82>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a15      	ldr	r2, [pc, #84]	@ (8006580 <TIM_OC5_SetConfig+0xcc>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d003      	beq.n	8006536 <TIM_OC5_SetConfig+0x82>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a14      	ldr	r2, [pc, #80]	@ (8006584 <TIM_OC5_SetConfig+0xd0>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d109      	bne.n	800654a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800653c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	021b      	lsls	r3, r3, #8
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	4313      	orrs	r3, r2
 8006548:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	621a      	str	r2, [r3, #32]
}
 8006564:	bf00      	nop
 8006566:	371c      	adds	r7, #28
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	40012c00 	.word	0x40012c00
 8006574:	40013400 	.word	0x40013400
 8006578:	40014000 	.word	0x40014000
 800657c:	40014400 	.word	0x40014400
 8006580:	40014800 	.word	0x40014800
 8006584:	40015000 	.word	0x40015000

08006588 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006588:	b480      	push	{r7}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a1b      	ldr	r3, [r3, #32]
 800659c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	021b      	lsls	r3, r3, #8
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80065ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	051b      	lsls	r3, r3, #20
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	4313      	orrs	r3, r2
 80065da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a1a      	ldr	r2, [pc, #104]	@ (8006648 <TIM_OC6_SetConfig+0xc0>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d013      	beq.n	800660c <TIM_OC6_SetConfig+0x84>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a19      	ldr	r2, [pc, #100]	@ (800664c <TIM_OC6_SetConfig+0xc4>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d00f      	beq.n	800660c <TIM_OC6_SetConfig+0x84>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a18      	ldr	r2, [pc, #96]	@ (8006650 <TIM_OC6_SetConfig+0xc8>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d00b      	beq.n	800660c <TIM_OC6_SetConfig+0x84>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a17      	ldr	r2, [pc, #92]	@ (8006654 <TIM_OC6_SetConfig+0xcc>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d007      	beq.n	800660c <TIM_OC6_SetConfig+0x84>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a16      	ldr	r2, [pc, #88]	@ (8006658 <TIM_OC6_SetConfig+0xd0>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d003      	beq.n	800660c <TIM_OC6_SetConfig+0x84>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a15      	ldr	r2, [pc, #84]	@ (800665c <TIM_OC6_SetConfig+0xd4>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d109      	bne.n	8006620 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006612:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	029b      	lsls	r3, r3, #10
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	4313      	orrs	r3, r2
 800661e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	621a      	str	r2, [r3, #32]
}
 800663a:	bf00      	nop
 800663c:	371c      	adds	r7, #28
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	40012c00 	.word	0x40012c00
 800664c:	40013400 	.word	0x40013400
 8006650:	40014000 	.word	0x40014000
 8006654:	40014400 	.word	0x40014400
 8006658:	40014800 	.word	0x40014800
 800665c:	40015000 	.word	0x40015000

08006660 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006660:	b480      	push	{r7}
 8006662:	b087      	sub	sp, #28
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	f023 0201 	bic.w	r2, r3, #1
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800668a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	011b      	lsls	r3, r3, #4
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	4313      	orrs	r3, r2
 8006694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f023 030a 	bic.w	r3, r3, #10
 800669c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	621a      	str	r2, [r3, #32]
}
 80066b2:	bf00      	nop
 80066b4:	371c      	adds	r7, #28
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066be:	b480      	push	{r7}
 80066c0:	b087      	sub	sp, #28
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	60f8      	str	r0, [r7, #12]
 80066c6:	60b9      	str	r1, [r7, #8]
 80066c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	f023 0210 	bic.w	r2, r3, #16
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80066e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	031b      	lsls	r3, r3, #12
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80066fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	011b      	lsls	r3, r3, #4
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	4313      	orrs	r3, r2
 8006704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	621a      	str	r2, [r3, #32]
}
 8006712:	bf00      	nop
 8006714:	371c      	adds	r7, #28
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800671e:	b480      	push	{r7}
 8006720:	b085      	sub	sp, #20
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
 8006726:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006734:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006738:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	f043 0307 	orr.w	r3, r3, #7
 8006744:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	609a      	str	r2, [r3, #8]
}
 800674c:	bf00      	nop
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006772:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	021a      	lsls	r2, r3, #8
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	431a      	orrs	r2, r3
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	4313      	orrs	r3, r2
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	4313      	orrs	r3, r2
 8006784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	609a      	str	r2, [r3, #8]
}
 800678c:	bf00      	nop
 800678e:	371c      	adds	r7, #28
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006798:	b480      	push	{r7}
 800679a:	b087      	sub	sp, #28
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f003 031f 	and.w	r3, r3, #31
 80067aa:	2201      	movs	r2, #1
 80067ac:	fa02 f303 	lsl.w	r3, r2, r3
 80067b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6a1a      	ldr	r2, [r3, #32]
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	43db      	mvns	r3, r3
 80067ba:	401a      	ands	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6a1a      	ldr	r2, [r3, #32]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	f003 031f 	and.w	r3, r3, #31
 80067ca:	6879      	ldr	r1, [r7, #4]
 80067cc:	fa01 f303 	lsl.w	r3, r1, r3
 80067d0:	431a      	orrs	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	621a      	str	r2, [r3, #32]
}
 80067d6:	bf00      	nop
 80067d8:	371c      	adds	r7, #28
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
	...

080067e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d101      	bne.n	80067fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067f8:	2302      	movs	r3, #2
 80067fa:	e074      	b.n	80068e6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2202      	movs	r2, #2
 8006808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a34      	ldr	r2, [pc, #208]	@ (80068f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d009      	beq.n	800683a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a33      	ldr	r2, [pc, #204]	@ (80068f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d004      	beq.n	800683a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a31      	ldr	r2, [pc, #196]	@ (80068fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d108      	bne.n	800684c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006840:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	4313      	orrs	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006856:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	4313      	orrs	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a21      	ldr	r2, [pc, #132]	@ (80068f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d022      	beq.n	80068ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800687c:	d01d      	beq.n	80068ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a1f      	ldr	r2, [pc, #124]	@ (8006900 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d018      	beq.n	80068ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a1d      	ldr	r2, [pc, #116]	@ (8006904 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d013      	beq.n	80068ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a1c      	ldr	r2, [pc, #112]	@ (8006908 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d00e      	beq.n	80068ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a15      	ldr	r2, [pc, #84]	@ (80068f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d009      	beq.n	80068ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a18      	ldr	r2, [pc, #96]	@ (800690c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d004      	beq.n	80068ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a11      	ldr	r2, [pc, #68]	@ (80068fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d10c      	bne.n	80068d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	40012c00 	.word	0x40012c00
 80068f8:	40013400 	.word	0x40013400
 80068fc:	40015000 	.word	0x40015000
 8006900:	40000400 	.word	0x40000400
 8006904:	40000800 	.word	0x40000800
 8006908:	40000c00 	.word	0x40000c00
 800690c:	40014000 	.word	0x40014000

08006910 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006924:	2b01      	cmp	r3, #1
 8006926:	d101      	bne.n	800692c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006928:	2302      	movs	r3, #2
 800692a:	e078      	b.n	8006a1e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	4313      	orrs	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	4313      	orrs	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	4313      	orrs	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4313      	orrs	r3, r2
 800696a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	4313      	orrs	r3, r2
 8006978:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	4313      	orrs	r3, r2
 8006986:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006992:	4313      	orrs	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	041b      	lsls	r3, r3, #16
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	69db      	ldr	r3, [r3, #28]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a1c      	ldr	r2, [pc, #112]	@ (8006a2c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d009      	beq.n	80069d2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a1b      	ldr	r2, [pc, #108]	@ (8006a30 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d004      	beq.n	80069d2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a19      	ldr	r2, [pc, #100]	@ (8006a34 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d11c      	bne.n	8006a0c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069dc:	051b      	lsls	r3, r3, #20
 80069de:	4313      	orrs	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069fa:	4313      	orrs	r3, r2
 80069fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3714      	adds	r7, #20
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	40012c00 	.word	0x40012c00
 8006a30:	40013400 	.word	0x40013400
 8006a34:	40015000 	.word	0x40015000

08006a38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e042      	b.n	8006b5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d106      	bne.n	8006aee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f7fa fb61 	bl	80011b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2224      	movs	r2, #36	@ 0x24
 8006af2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0201 	bic.w	r2, r2, #1
 8006b04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d002      	beq.n	8006b14 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fe68 	bl	80077e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fb69 	bl	80071ec <UART_SetConfig>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d101      	bne.n	8006b24 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e01b      	b.n	8006b5c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689a      	ldr	r2, [r3, #8]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f042 0201 	orr.w	r2, r2, #1
 8006b52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fee7 	bl	8007928 <UART_CheckIdleState>
 8006b5a:	4603      	mov	r3, r0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3708      	adds	r7, #8
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b0ba      	sub	sp, #232	@ 0xe8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006b8e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006b92:	4013      	ands	r3, r2
 8006b94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006b98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d11b      	bne.n	8006bd8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ba4:	f003 0320 	and.w	r3, r3, #32
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d015      	beq.n	8006bd8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bb0:	f003 0320 	and.w	r3, r3, #32
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d105      	bne.n	8006bc4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d009      	beq.n	8006bd8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f000 82e3 	beq.w	8007194 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	4798      	blx	r3
      }
      return;
 8006bd6:	e2dd      	b.n	8007194 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006bd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f000 8123 	beq.w	8006e28 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006be2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006be6:	4b8d      	ldr	r3, [pc, #564]	@ (8006e1c <HAL_UART_IRQHandler+0x2b8>)
 8006be8:	4013      	ands	r3, r2
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d106      	bne.n	8006bfc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006bee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006bf2:	4b8b      	ldr	r3, [pc, #556]	@ (8006e20 <HAL_UART_IRQHandler+0x2bc>)
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f000 8116 	beq.w	8006e28 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d011      	beq.n	8006c2c <HAL_UART_IRQHandler+0xc8>
 8006c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00b      	beq.n	8006c2c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c22:	f043 0201 	orr.w	r2, r3, #1
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d011      	beq.n	8006c5c <HAL_UART_IRQHandler+0xf8>
 8006c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00b      	beq.n	8006c5c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2202      	movs	r2, #2
 8006c4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c52:	f043 0204 	orr.w	r2, r3, #4
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d011      	beq.n	8006c8c <HAL_UART_IRQHandler+0x128>
 8006c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c6c:	f003 0301 	and.w	r3, r3, #1
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00b      	beq.n	8006c8c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2204      	movs	r2, #4
 8006c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c82:	f043 0202 	orr.w	r2, r3, #2
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c90:	f003 0308 	and.w	r3, r3, #8
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d017      	beq.n	8006cc8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c9c:	f003 0320 	and.w	r3, r3, #32
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d105      	bne.n	8006cb0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006ca4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006ca8:	4b5c      	ldr	r3, [pc, #368]	@ (8006e1c <HAL_UART_IRQHandler+0x2b8>)
 8006caa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00b      	beq.n	8006cc8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2208      	movs	r2, #8
 8006cb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cbe:	f043 0208 	orr.w	r2, r3, #8
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ccc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d012      	beq.n	8006cfa <HAL_UART_IRQHandler+0x196>
 8006cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cd8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00c      	beq.n	8006cfa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ce8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cf0:	f043 0220 	orr.w	r2, r3, #32
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 8249 	beq.w	8007198 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d0a:	f003 0320 	and.w	r3, r3, #32
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d013      	beq.n	8006d3a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d16:	f003 0320 	and.w	r3, r3, #32
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d105      	bne.n	8006d2a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d007      	beq.n	8006d3a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d003      	beq.n	8006d3a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d4e:	2b40      	cmp	r3, #64	@ 0x40
 8006d50:	d005      	beq.n	8006d5e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d56:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d054      	beq.n	8006e08 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fef9 	bl	8007b56 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d6e:	2b40      	cmp	r3, #64	@ 0x40
 8006d70:	d146      	bne.n	8006e00 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	3308      	adds	r3, #8
 8006d78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006d80:	e853 3f00 	ldrex	r3, [r3]
 8006d84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	3308      	adds	r3, #8
 8006d9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006d9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006da2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006daa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006dae:	e841 2300 	strex	r3, r2, [r1]
 8006db2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006db6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1d9      	bne.n	8006d72 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d017      	beq.n	8006df8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dce:	4a15      	ldr	r2, [pc, #84]	@ (8006e24 <HAL_UART_IRQHandler+0x2c0>)
 8006dd0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7fc fd35 	bl	8003848 <HAL_DMA_Abort_IT>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d019      	beq.n	8006e18 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006df2:	4610      	mov	r0, r2
 8006df4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df6:	e00f      	b.n	8006e18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f9e1 	bl	80071c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dfe:	e00b      	b.n	8006e18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f9dd 	bl	80071c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e06:	e007      	b.n	8006e18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f9d9 	bl	80071c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006e16:	e1bf      	b.n	8007198 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e18:	bf00      	nop
    return;
 8006e1a:	e1bd      	b.n	8007198 <HAL_UART_IRQHandler+0x634>
 8006e1c:	10000001 	.word	0x10000001
 8006e20:	04000120 	.word	0x04000120
 8006e24:	08007c23 	.word	0x08007c23

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	f040 8153 	bne.w	80070d8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e36:	f003 0310 	and.w	r3, r3, #16
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f000 814c 	beq.w	80070d8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e44:	f003 0310 	and.w	r3, r3, #16
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 8145 	beq.w	80070d8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2210      	movs	r2, #16
 8006e54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e60:	2b40      	cmp	r3, #64	@ 0x40
 8006e62:	f040 80bb 	bne.w	8006fdc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f000 818f 	beq.w	800719c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	f080 8187 	bcs.w	800719c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0320 	and.w	r3, r3, #32
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f040 8087 	bne.w	8006fba <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006eb8:	e853 3f00 	ldrex	r3, [r3]
 8006ebc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ec0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ec4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ed6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006eda:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ede:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006ee2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006ee6:	e841 2300 	strex	r3, r2, [r1]
 8006eea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006eee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1da      	bne.n	8006eac <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	3308      	adds	r3, #8
 8006efc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f00:	e853 3f00 	ldrex	r3, [r3]
 8006f04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006f06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f08:	f023 0301 	bic.w	r3, r3, #1
 8006f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3308      	adds	r3, #8
 8006f16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006f1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006f1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006f22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006f26:	e841 2300 	strex	r3, r2, [r1]
 8006f2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006f2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1e1      	bne.n	8006ef6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	3308      	adds	r3, #8
 8006f38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f3c:	e853 3f00 	ldrex	r3, [r3]
 8006f40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006f42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	3308      	adds	r3, #8
 8006f52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006f56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006f58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006f5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006f5e:	e841 2300 	strex	r3, r2, [r1]
 8006f62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006f64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1e3      	bne.n	8006f32 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f80:	e853 3f00 	ldrex	r3, [r3]
 8006f84:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f88:	f023 0310 	bic.w	r3, r3, #16
 8006f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	461a      	mov	r2, r3
 8006f96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f9c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006fa0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006fa2:	e841 2300 	strex	r3, r2, [r1]
 8006fa6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006fa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1e4      	bne.n	8006f78 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7fc fbee 	bl	8003796 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2202      	movs	r2, #2
 8006fbe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 f8fd 	bl	80071d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fda:	e0df      	b.n	800719c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f000 80d1 	beq.w	80071a0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006ffe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 80cc 	beq.w	80071a0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007010:	e853 3f00 	ldrex	r3, [r3]
 8007014:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007018:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800701c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	461a      	mov	r2, r3
 8007026:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800702a:	647b      	str	r3, [r7, #68]	@ 0x44
 800702c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007030:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007032:	e841 2300 	strex	r3, r2, [r1]
 8007036:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1e4      	bne.n	8007008 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	3308      	adds	r3, #8
 8007044:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007048:	e853 3f00 	ldrex	r3, [r3]
 800704c:	623b      	str	r3, [r7, #32]
   return(result);
 800704e:	6a3b      	ldr	r3, [r7, #32]
 8007050:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007054:	f023 0301 	bic.w	r3, r3, #1
 8007058:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	3308      	adds	r3, #8
 8007062:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007066:	633a      	str	r2, [r7, #48]	@ 0x30
 8007068:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800706c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800706e:	e841 2300 	strex	r3, r2, [r1]
 8007072:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1e1      	bne.n	800703e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2220      	movs	r2, #32
 800707e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	e853 3f00 	ldrex	r3, [r3]
 800709a:	60fb      	str	r3, [r7, #12]
   return(result);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f023 0310 	bic.w	r3, r3, #16
 80070a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	461a      	mov	r2, r3
 80070ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80070b0:	61fb      	str	r3, [r7, #28]
 80070b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b4:	69b9      	ldr	r1, [r7, #24]
 80070b6:	69fa      	ldr	r2, [r7, #28]
 80070b8:	e841 2300 	strex	r3, r2, [r1]
 80070bc:	617b      	str	r3, [r7, #20]
   return(result);
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1e4      	bne.n	800708e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2202      	movs	r2, #2
 80070c8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80070ce:	4619      	mov	r1, r3
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 f87f 	bl	80071d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070d6:	e063      	b.n	80071a0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80070d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00e      	beq.n	8007102 <HAL_UART_IRQHandler+0x59e>
 80070e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d008      	beq.n	8007102 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80070f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fdd2 	bl	8007ca4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007100:	e051      	b.n	80071a6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800710a:	2b00      	cmp	r3, #0
 800710c:	d014      	beq.n	8007138 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800710e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007116:	2b00      	cmp	r3, #0
 8007118:	d105      	bne.n	8007126 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800711a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800711e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d008      	beq.n	8007138 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800712a:	2b00      	cmp	r3, #0
 800712c:	d03a      	beq.n	80071a4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	4798      	blx	r3
    }
    return;
 8007136:	e035      	b.n	80071a4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800713c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007140:	2b00      	cmp	r3, #0
 8007142:	d009      	beq.n	8007158 <HAL_UART_IRQHandler+0x5f4>
 8007144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800714c:	2b00      	cmp	r3, #0
 800714e:	d003      	beq.n	8007158 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fd7c 	bl	8007c4e <UART_EndTransmit_IT>
    return;
 8007156:	e026      	b.n	80071a6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800715c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d009      	beq.n	8007178 <HAL_UART_IRQHandler+0x614>
 8007164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007168:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d003      	beq.n	8007178 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fdab 	bl	8007ccc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007176:	e016      	b.n	80071a6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800717c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d010      	beq.n	80071a6 <HAL_UART_IRQHandler+0x642>
 8007184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007188:	2b00      	cmp	r3, #0
 800718a:	da0c      	bge.n	80071a6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fd93 	bl	8007cb8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007192:	e008      	b.n	80071a6 <HAL_UART_IRQHandler+0x642>
      return;
 8007194:	bf00      	nop
 8007196:	e006      	b.n	80071a6 <HAL_UART_IRQHandler+0x642>
    return;
 8007198:	bf00      	nop
 800719a:	e004      	b.n	80071a6 <HAL_UART_IRQHandler+0x642>
      return;
 800719c:	bf00      	nop
 800719e:	e002      	b.n	80071a6 <HAL_UART_IRQHandler+0x642>
      return;
 80071a0:	bf00      	nop
 80071a2:	e000      	b.n	80071a6 <HAL_UART_IRQHandler+0x642>
    return;
 80071a4:	bf00      	nop
  }
}
 80071a6:	37e8      	adds	r7, #232	@ 0xe8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80071c8:	bf00      	nop
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	460b      	mov	r3, r1
 80071de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071f0:	b08c      	sub	sp, #48	@ 0x30
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071f6:	2300      	movs	r3, #0
 80071f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	689a      	ldr	r2, [r3, #8]
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	431a      	orrs	r2, r3
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	431a      	orrs	r2, r3
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	69db      	ldr	r3, [r3, #28]
 8007210:	4313      	orrs	r3, r2
 8007212:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	4baa      	ldr	r3, [pc, #680]	@ (80074c4 <UART_SetConfig+0x2d8>)
 800721c:	4013      	ands	r3, r2
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	6812      	ldr	r2, [r2, #0]
 8007222:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007224:	430b      	orrs	r3, r1
 8007226:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	68da      	ldr	r2, [r3, #12]
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	430a      	orrs	r2, r1
 800723c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a9f      	ldr	r2, [pc, #636]	@ (80074c8 <UART_SetConfig+0x2dc>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d004      	beq.n	8007258 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007254:	4313      	orrs	r3, r2
 8007256:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007262:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	6812      	ldr	r2, [r2, #0]
 800726a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800726c:	430b      	orrs	r3, r1
 800726e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007276:	f023 010f 	bic.w	r1, r3, #15
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a90      	ldr	r2, [pc, #576]	@ (80074cc <UART_SetConfig+0x2e0>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d125      	bne.n	80072dc <UART_SetConfig+0xf0>
 8007290:	4b8f      	ldr	r3, [pc, #572]	@ (80074d0 <UART_SetConfig+0x2e4>)
 8007292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007296:	f003 0303 	and.w	r3, r3, #3
 800729a:	2b03      	cmp	r3, #3
 800729c:	d81a      	bhi.n	80072d4 <UART_SetConfig+0xe8>
 800729e:	a201      	add	r2, pc, #4	@ (adr r2, 80072a4 <UART_SetConfig+0xb8>)
 80072a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a4:	080072b5 	.word	0x080072b5
 80072a8:	080072c5 	.word	0x080072c5
 80072ac:	080072bd 	.word	0x080072bd
 80072b0:	080072cd 	.word	0x080072cd
 80072b4:	2301      	movs	r3, #1
 80072b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072ba:	e116      	b.n	80074ea <UART_SetConfig+0x2fe>
 80072bc:	2302      	movs	r3, #2
 80072be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072c2:	e112      	b.n	80074ea <UART_SetConfig+0x2fe>
 80072c4:	2304      	movs	r3, #4
 80072c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072ca:	e10e      	b.n	80074ea <UART_SetConfig+0x2fe>
 80072cc:	2308      	movs	r3, #8
 80072ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072d2:	e10a      	b.n	80074ea <UART_SetConfig+0x2fe>
 80072d4:	2310      	movs	r3, #16
 80072d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072da:	e106      	b.n	80074ea <UART_SetConfig+0x2fe>
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a7c      	ldr	r2, [pc, #496]	@ (80074d4 <UART_SetConfig+0x2e8>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d138      	bne.n	8007358 <UART_SetConfig+0x16c>
 80072e6:	4b7a      	ldr	r3, [pc, #488]	@ (80074d0 <UART_SetConfig+0x2e4>)
 80072e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ec:	f003 030c 	and.w	r3, r3, #12
 80072f0:	2b0c      	cmp	r3, #12
 80072f2:	d82d      	bhi.n	8007350 <UART_SetConfig+0x164>
 80072f4:	a201      	add	r2, pc, #4	@ (adr r2, 80072fc <UART_SetConfig+0x110>)
 80072f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fa:	bf00      	nop
 80072fc:	08007331 	.word	0x08007331
 8007300:	08007351 	.word	0x08007351
 8007304:	08007351 	.word	0x08007351
 8007308:	08007351 	.word	0x08007351
 800730c:	08007341 	.word	0x08007341
 8007310:	08007351 	.word	0x08007351
 8007314:	08007351 	.word	0x08007351
 8007318:	08007351 	.word	0x08007351
 800731c:	08007339 	.word	0x08007339
 8007320:	08007351 	.word	0x08007351
 8007324:	08007351 	.word	0x08007351
 8007328:	08007351 	.word	0x08007351
 800732c:	08007349 	.word	0x08007349
 8007330:	2300      	movs	r3, #0
 8007332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007336:	e0d8      	b.n	80074ea <UART_SetConfig+0x2fe>
 8007338:	2302      	movs	r3, #2
 800733a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800733e:	e0d4      	b.n	80074ea <UART_SetConfig+0x2fe>
 8007340:	2304      	movs	r3, #4
 8007342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007346:	e0d0      	b.n	80074ea <UART_SetConfig+0x2fe>
 8007348:	2308      	movs	r3, #8
 800734a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800734e:	e0cc      	b.n	80074ea <UART_SetConfig+0x2fe>
 8007350:	2310      	movs	r3, #16
 8007352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007356:	e0c8      	b.n	80074ea <UART_SetConfig+0x2fe>
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a5e      	ldr	r2, [pc, #376]	@ (80074d8 <UART_SetConfig+0x2ec>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d125      	bne.n	80073ae <UART_SetConfig+0x1c2>
 8007362:	4b5b      	ldr	r3, [pc, #364]	@ (80074d0 <UART_SetConfig+0x2e4>)
 8007364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007368:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800736c:	2b30      	cmp	r3, #48	@ 0x30
 800736e:	d016      	beq.n	800739e <UART_SetConfig+0x1b2>
 8007370:	2b30      	cmp	r3, #48	@ 0x30
 8007372:	d818      	bhi.n	80073a6 <UART_SetConfig+0x1ba>
 8007374:	2b20      	cmp	r3, #32
 8007376:	d00a      	beq.n	800738e <UART_SetConfig+0x1a2>
 8007378:	2b20      	cmp	r3, #32
 800737a:	d814      	bhi.n	80073a6 <UART_SetConfig+0x1ba>
 800737c:	2b00      	cmp	r3, #0
 800737e:	d002      	beq.n	8007386 <UART_SetConfig+0x19a>
 8007380:	2b10      	cmp	r3, #16
 8007382:	d008      	beq.n	8007396 <UART_SetConfig+0x1aa>
 8007384:	e00f      	b.n	80073a6 <UART_SetConfig+0x1ba>
 8007386:	2300      	movs	r3, #0
 8007388:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800738c:	e0ad      	b.n	80074ea <UART_SetConfig+0x2fe>
 800738e:	2302      	movs	r3, #2
 8007390:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007394:	e0a9      	b.n	80074ea <UART_SetConfig+0x2fe>
 8007396:	2304      	movs	r3, #4
 8007398:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800739c:	e0a5      	b.n	80074ea <UART_SetConfig+0x2fe>
 800739e:	2308      	movs	r3, #8
 80073a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073a4:	e0a1      	b.n	80074ea <UART_SetConfig+0x2fe>
 80073a6:	2310      	movs	r3, #16
 80073a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073ac:	e09d      	b.n	80074ea <UART_SetConfig+0x2fe>
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a4a      	ldr	r2, [pc, #296]	@ (80074dc <UART_SetConfig+0x2f0>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d125      	bne.n	8007404 <UART_SetConfig+0x218>
 80073b8:	4b45      	ldr	r3, [pc, #276]	@ (80074d0 <UART_SetConfig+0x2e4>)
 80073ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80073c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80073c4:	d016      	beq.n	80073f4 <UART_SetConfig+0x208>
 80073c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80073c8:	d818      	bhi.n	80073fc <UART_SetConfig+0x210>
 80073ca:	2b80      	cmp	r3, #128	@ 0x80
 80073cc:	d00a      	beq.n	80073e4 <UART_SetConfig+0x1f8>
 80073ce:	2b80      	cmp	r3, #128	@ 0x80
 80073d0:	d814      	bhi.n	80073fc <UART_SetConfig+0x210>
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d002      	beq.n	80073dc <UART_SetConfig+0x1f0>
 80073d6:	2b40      	cmp	r3, #64	@ 0x40
 80073d8:	d008      	beq.n	80073ec <UART_SetConfig+0x200>
 80073da:	e00f      	b.n	80073fc <UART_SetConfig+0x210>
 80073dc:	2300      	movs	r3, #0
 80073de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073e2:	e082      	b.n	80074ea <UART_SetConfig+0x2fe>
 80073e4:	2302      	movs	r3, #2
 80073e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073ea:	e07e      	b.n	80074ea <UART_SetConfig+0x2fe>
 80073ec:	2304      	movs	r3, #4
 80073ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073f2:	e07a      	b.n	80074ea <UART_SetConfig+0x2fe>
 80073f4:	2308      	movs	r3, #8
 80073f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073fa:	e076      	b.n	80074ea <UART_SetConfig+0x2fe>
 80073fc:	2310      	movs	r3, #16
 80073fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007402:	e072      	b.n	80074ea <UART_SetConfig+0x2fe>
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a35      	ldr	r2, [pc, #212]	@ (80074e0 <UART_SetConfig+0x2f4>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d12a      	bne.n	8007464 <UART_SetConfig+0x278>
 800740e:	4b30      	ldr	r3, [pc, #192]	@ (80074d0 <UART_SetConfig+0x2e4>)
 8007410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007414:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007418:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800741c:	d01a      	beq.n	8007454 <UART_SetConfig+0x268>
 800741e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007422:	d81b      	bhi.n	800745c <UART_SetConfig+0x270>
 8007424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007428:	d00c      	beq.n	8007444 <UART_SetConfig+0x258>
 800742a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800742e:	d815      	bhi.n	800745c <UART_SetConfig+0x270>
 8007430:	2b00      	cmp	r3, #0
 8007432:	d003      	beq.n	800743c <UART_SetConfig+0x250>
 8007434:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007438:	d008      	beq.n	800744c <UART_SetConfig+0x260>
 800743a:	e00f      	b.n	800745c <UART_SetConfig+0x270>
 800743c:	2300      	movs	r3, #0
 800743e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007442:	e052      	b.n	80074ea <UART_SetConfig+0x2fe>
 8007444:	2302      	movs	r3, #2
 8007446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800744a:	e04e      	b.n	80074ea <UART_SetConfig+0x2fe>
 800744c:	2304      	movs	r3, #4
 800744e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007452:	e04a      	b.n	80074ea <UART_SetConfig+0x2fe>
 8007454:	2308      	movs	r3, #8
 8007456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800745a:	e046      	b.n	80074ea <UART_SetConfig+0x2fe>
 800745c:	2310      	movs	r3, #16
 800745e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007462:	e042      	b.n	80074ea <UART_SetConfig+0x2fe>
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a17      	ldr	r2, [pc, #92]	@ (80074c8 <UART_SetConfig+0x2dc>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d13a      	bne.n	80074e4 <UART_SetConfig+0x2f8>
 800746e:	4b18      	ldr	r3, [pc, #96]	@ (80074d0 <UART_SetConfig+0x2e4>)
 8007470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007474:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007478:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800747c:	d01a      	beq.n	80074b4 <UART_SetConfig+0x2c8>
 800747e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007482:	d81b      	bhi.n	80074bc <UART_SetConfig+0x2d0>
 8007484:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007488:	d00c      	beq.n	80074a4 <UART_SetConfig+0x2b8>
 800748a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800748e:	d815      	bhi.n	80074bc <UART_SetConfig+0x2d0>
 8007490:	2b00      	cmp	r3, #0
 8007492:	d003      	beq.n	800749c <UART_SetConfig+0x2b0>
 8007494:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007498:	d008      	beq.n	80074ac <UART_SetConfig+0x2c0>
 800749a:	e00f      	b.n	80074bc <UART_SetConfig+0x2d0>
 800749c:	2300      	movs	r3, #0
 800749e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074a2:	e022      	b.n	80074ea <UART_SetConfig+0x2fe>
 80074a4:	2302      	movs	r3, #2
 80074a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074aa:	e01e      	b.n	80074ea <UART_SetConfig+0x2fe>
 80074ac:	2304      	movs	r3, #4
 80074ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074b2:	e01a      	b.n	80074ea <UART_SetConfig+0x2fe>
 80074b4:	2308      	movs	r3, #8
 80074b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ba:	e016      	b.n	80074ea <UART_SetConfig+0x2fe>
 80074bc:	2310      	movs	r3, #16
 80074be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074c2:	e012      	b.n	80074ea <UART_SetConfig+0x2fe>
 80074c4:	cfff69f3 	.word	0xcfff69f3
 80074c8:	40008000 	.word	0x40008000
 80074cc:	40013800 	.word	0x40013800
 80074d0:	40021000 	.word	0x40021000
 80074d4:	40004400 	.word	0x40004400
 80074d8:	40004800 	.word	0x40004800
 80074dc:	40004c00 	.word	0x40004c00
 80074e0:	40005000 	.word	0x40005000
 80074e4:	2310      	movs	r3, #16
 80074e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4aae      	ldr	r2, [pc, #696]	@ (80077a8 <UART_SetConfig+0x5bc>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	f040 8097 	bne.w	8007624 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80074fa:	2b08      	cmp	r3, #8
 80074fc:	d823      	bhi.n	8007546 <UART_SetConfig+0x35a>
 80074fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007504 <UART_SetConfig+0x318>)
 8007500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007504:	08007529 	.word	0x08007529
 8007508:	08007547 	.word	0x08007547
 800750c:	08007531 	.word	0x08007531
 8007510:	08007547 	.word	0x08007547
 8007514:	08007537 	.word	0x08007537
 8007518:	08007547 	.word	0x08007547
 800751c:	08007547 	.word	0x08007547
 8007520:	08007547 	.word	0x08007547
 8007524:	0800753f 	.word	0x0800753f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007528:	f7fd fa72 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 800752c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800752e:	e010      	b.n	8007552 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007530:	4b9e      	ldr	r3, [pc, #632]	@ (80077ac <UART_SetConfig+0x5c0>)
 8007532:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007534:	e00d      	b.n	8007552 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007536:	f7fd f9fd 	bl	8004934 <HAL_RCC_GetSysClockFreq>
 800753a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800753c:	e009      	b.n	8007552 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800753e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007542:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007544:	e005      	b.n	8007552 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007546:	2300      	movs	r3, #0
 8007548:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007550:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 8130 	beq.w	80077ba <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800755e:	4a94      	ldr	r2, [pc, #592]	@ (80077b0 <UART_SetConfig+0x5c4>)
 8007560:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007564:	461a      	mov	r2, r3
 8007566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007568:	fbb3 f3f2 	udiv	r3, r3, r2
 800756c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	4613      	mov	r3, r2
 8007574:	005b      	lsls	r3, r3, #1
 8007576:	4413      	add	r3, r2
 8007578:	69ba      	ldr	r2, [r7, #24]
 800757a:	429a      	cmp	r2, r3
 800757c:	d305      	bcc.n	800758a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007584:	69ba      	ldr	r2, [r7, #24]
 8007586:	429a      	cmp	r2, r3
 8007588:	d903      	bls.n	8007592 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007590:	e113      	b.n	80077ba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007594:	2200      	movs	r2, #0
 8007596:	60bb      	str	r3, [r7, #8]
 8007598:	60fa      	str	r2, [r7, #12]
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800759e:	4a84      	ldr	r2, [pc, #528]	@ (80077b0 <UART_SetConfig+0x5c4>)
 80075a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	2200      	movs	r2, #0
 80075a8:	603b      	str	r3, [r7, #0]
 80075aa:	607a      	str	r2, [r7, #4]
 80075ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075b4:	f7f8 fe30 	bl	8000218 <__aeabi_uldivmod>
 80075b8:	4602      	mov	r2, r0
 80075ba:	460b      	mov	r3, r1
 80075bc:	4610      	mov	r0, r2
 80075be:	4619      	mov	r1, r3
 80075c0:	f04f 0200 	mov.w	r2, #0
 80075c4:	f04f 0300 	mov.w	r3, #0
 80075c8:	020b      	lsls	r3, r1, #8
 80075ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80075ce:	0202      	lsls	r2, r0, #8
 80075d0:	6979      	ldr	r1, [r7, #20]
 80075d2:	6849      	ldr	r1, [r1, #4]
 80075d4:	0849      	lsrs	r1, r1, #1
 80075d6:	2000      	movs	r0, #0
 80075d8:	460c      	mov	r4, r1
 80075da:	4605      	mov	r5, r0
 80075dc:	eb12 0804 	adds.w	r8, r2, r4
 80075e0:	eb43 0905 	adc.w	r9, r3, r5
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	469a      	mov	sl, r3
 80075ec:	4693      	mov	fp, r2
 80075ee:	4652      	mov	r2, sl
 80075f0:	465b      	mov	r3, fp
 80075f2:	4640      	mov	r0, r8
 80075f4:	4649      	mov	r1, r9
 80075f6:	f7f8 fe0f 	bl	8000218 <__aeabi_uldivmod>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	4613      	mov	r3, r2
 8007600:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007602:	6a3b      	ldr	r3, [r7, #32]
 8007604:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007608:	d308      	bcc.n	800761c <UART_SetConfig+0x430>
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007610:	d204      	bcs.n	800761c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6a3a      	ldr	r2, [r7, #32]
 8007618:	60da      	str	r2, [r3, #12]
 800761a:	e0ce      	b.n	80077ba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007622:	e0ca      	b.n	80077ba <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800762c:	d166      	bne.n	80076fc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800762e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007632:	2b08      	cmp	r3, #8
 8007634:	d827      	bhi.n	8007686 <UART_SetConfig+0x49a>
 8007636:	a201      	add	r2, pc, #4	@ (adr r2, 800763c <UART_SetConfig+0x450>)
 8007638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763c:	08007661 	.word	0x08007661
 8007640:	08007669 	.word	0x08007669
 8007644:	08007671 	.word	0x08007671
 8007648:	08007687 	.word	0x08007687
 800764c:	08007677 	.word	0x08007677
 8007650:	08007687 	.word	0x08007687
 8007654:	08007687 	.word	0x08007687
 8007658:	08007687 	.word	0x08007687
 800765c:	0800767f 	.word	0x0800767f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007660:	f7fd f9d6 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 8007664:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007666:	e014      	b.n	8007692 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007668:	f7fd f9e8 	bl	8004a3c <HAL_RCC_GetPCLK2Freq>
 800766c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800766e:	e010      	b.n	8007692 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007670:	4b4e      	ldr	r3, [pc, #312]	@ (80077ac <UART_SetConfig+0x5c0>)
 8007672:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007674:	e00d      	b.n	8007692 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007676:	f7fd f95d 	bl	8004934 <HAL_RCC_GetSysClockFreq>
 800767a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800767c:	e009      	b.n	8007692 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800767e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007682:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007684:	e005      	b.n	8007692 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007686:	2300      	movs	r3, #0
 8007688:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007690:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 8090 	beq.w	80077ba <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800769e:	4a44      	ldr	r2, [pc, #272]	@ (80077b0 <UART_SetConfig+0x5c4>)
 80076a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076a4:	461a      	mov	r2, r3
 80076a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80076ac:	005a      	lsls	r2, r3, #1
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	085b      	lsrs	r3, r3, #1
 80076b4:	441a      	add	r2, r3
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80076be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	2b0f      	cmp	r3, #15
 80076c4:	d916      	bls.n	80076f4 <UART_SetConfig+0x508>
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076cc:	d212      	bcs.n	80076f4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	f023 030f 	bic.w	r3, r3, #15
 80076d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	085b      	lsrs	r3, r3, #1
 80076dc:	b29b      	uxth	r3, r3
 80076de:	f003 0307 	and.w	r3, r3, #7
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	8bfb      	ldrh	r3, [r7, #30]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	8bfa      	ldrh	r2, [r7, #30]
 80076f0:	60da      	str	r2, [r3, #12]
 80076f2:	e062      	b.n	80077ba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80076fa:	e05e      	b.n	80077ba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007700:	2b08      	cmp	r3, #8
 8007702:	d828      	bhi.n	8007756 <UART_SetConfig+0x56a>
 8007704:	a201      	add	r2, pc, #4	@ (adr r2, 800770c <UART_SetConfig+0x520>)
 8007706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770a:	bf00      	nop
 800770c:	08007731 	.word	0x08007731
 8007710:	08007739 	.word	0x08007739
 8007714:	08007741 	.word	0x08007741
 8007718:	08007757 	.word	0x08007757
 800771c:	08007747 	.word	0x08007747
 8007720:	08007757 	.word	0x08007757
 8007724:	08007757 	.word	0x08007757
 8007728:	08007757 	.word	0x08007757
 800772c:	0800774f 	.word	0x0800774f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007730:	f7fd f96e 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 8007734:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007736:	e014      	b.n	8007762 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007738:	f7fd f980 	bl	8004a3c <HAL_RCC_GetPCLK2Freq>
 800773c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800773e:	e010      	b.n	8007762 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007740:	4b1a      	ldr	r3, [pc, #104]	@ (80077ac <UART_SetConfig+0x5c0>)
 8007742:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007744:	e00d      	b.n	8007762 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007746:	f7fd f8f5 	bl	8004934 <HAL_RCC_GetSysClockFreq>
 800774a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800774c:	e009      	b.n	8007762 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800774e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007752:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007754:	e005      	b.n	8007762 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007756:	2300      	movs	r3, #0
 8007758:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007760:	bf00      	nop
    }

    if (pclk != 0U)
 8007762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007764:	2b00      	cmp	r3, #0
 8007766:	d028      	beq.n	80077ba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800776c:	4a10      	ldr	r2, [pc, #64]	@ (80077b0 <UART_SetConfig+0x5c4>)
 800776e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007772:	461a      	mov	r2, r3
 8007774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007776:	fbb3 f2f2 	udiv	r2, r3, r2
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	085b      	lsrs	r3, r3, #1
 8007780:	441a      	add	r2, r3
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	fbb2 f3f3 	udiv	r3, r2, r3
 800778a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800778c:	6a3b      	ldr	r3, [r7, #32]
 800778e:	2b0f      	cmp	r3, #15
 8007790:	d910      	bls.n	80077b4 <UART_SetConfig+0x5c8>
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007798:	d20c      	bcs.n	80077b4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	b29a      	uxth	r2, r3
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	60da      	str	r2, [r3, #12]
 80077a4:	e009      	b.n	80077ba <UART_SetConfig+0x5ce>
 80077a6:	bf00      	nop
 80077a8:	40008000 	.word	0x40008000
 80077ac:	00f42400 	.word	0x00f42400
 80077b0:	08007fdc 	.word	0x08007fdc
      }
      else
      {
        ret = HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	2201      	movs	r2, #1
 80077be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	2200      	movs	r2, #0
 80077ce:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	2200      	movs	r2, #0
 80077d4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80077d6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3730      	adds	r7, #48	@ 0x30
 80077de:	46bd      	mov	sp, r7
 80077e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080077e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f0:	f003 0308 	and.w	r3, r3, #8
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00a      	beq.n	800780e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	430a      	orrs	r2, r1
 800780c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00a      	beq.n	8007830 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	430a      	orrs	r2, r1
 800782e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007834:	f003 0302 	and.w	r3, r3, #2
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00a      	beq.n	8007852 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007856:	f003 0304 	and.w	r3, r3, #4
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00a      	beq.n	8007874 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	430a      	orrs	r2, r1
 8007872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007878:	f003 0310 	and.w	r3, r3, #16
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00a      	beq.n	8007896 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	430a      	orrs	r2, r1
 8007894:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800789a:	f003 0320 	and.w	r3, r3, #32
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00a      	beq.n	80078b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	430a      	orrs	r2, r1
 80078b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d01a      	beq.n	80078fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078e2:	d10a      	bne.n	80078fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00a      	beq.n	800791c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	430a      	orrs	r2, r1
 800791a:	605a      	str	r2, [r3, #4]
  }
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b098      	sub	sp, #96	@ 0x60
 800792c:	af02      	add	r7, sp, #8
 800792e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007938:	f7f9 fecc 	bl	80016d4 <HAL_GetTick>
 800793c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0308 	and.w	r3, r3, #8
 8007948:	2b08      	cmp	r3, #8
 800794a:	d12f      	bne.n	80079ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800794c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007954:	2200      	movs	r2, #0
 8007956:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f88e 	bl	8007a7c <UART_WaitOnFlagUntilTimeout>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d022      	beq.n	80079ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800796e:	e853 3f00 	ldrex	r3, [r3]
 8007972:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007976:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800797a:	653b      	str	r3, [r7, #80]	@ 0x50
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	461a      	mov	r2, r3
 8007982:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007984:	647b      	str	r3, [r7, #68]	@ 0x44
 8007986:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007988:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800798a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800798c:	e841 2300 	strex	r3, r2, [r1]
 8007990:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1e6      	bne.n	8007966 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2220      	movs	r2, #32
 800799c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e063      	b.n	8007a74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 0304 	and.w	r3, r3, #4
 80079b6:	2b04      	cmp	r3, #4
 80079b8:	d149      	bne.n	8007a4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079c2:	2200      	movs	r2, #0
 80079c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f857 	bl	8007a7c <UART_WaitOnFlagUntilTimeout>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d03c      	beq.n	8007a4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079dc:	e853 3f00 	ldrex	r3, [r3]
 80079e0:	623b      	str	r3, [r7, #32]
   return(result);
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	461a      	mov	r2, r3
 80079f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80079f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079fa:	e841 2300 	strex	r3, r2, [r1]
 80079fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1e6      	bne.n	80079d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	3308      	adds	r3, #8
 8007a0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	e853 3f00 	ldrex	r3, [r3]
 8007a14:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f023 0301 	bic.w	r3, r3, #1
 8007a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	3308      	adds	r3, #8
 8007a24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a26:	61fa      	str	r2, [r7, #28]
 8007a28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2a:	69b9      	ldr	r1, [r7, #24]
 8007a2c:	69fa      	ldr	r2, [r7, #28]
 8007a2e:	e841 2300 	strex	r3, r2, [r1]
 8007a32:	617b      	str	r3, [r7, #20]
   return(result);
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1e5      	bne.n	8007a06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2220      	movs	r2, #32
 8007a3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e012      	b.n	8007a74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2220      	movs	r2, #32
 8007a52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3758      	adds	r7, #88	@ 0x58
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	603b      	str	r3, [r7, #0]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a8c:	e04f      	b.n	8007b2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a94:	d04b      	beq.n	8007b2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a96:	f7f9 fe1d 	bl	80016d4 <HAL_GetTick>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	69ba      	ldr	r2, [r7, #24]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d302      	bcc.n	8007aac <UART_WaitOnFlagUntilTimeout+0x30>
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d101      	bne.n	8007ab0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e04e      	b.n	8007b4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0304 	and.w	r3, r3, #4
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d037      	beq.n	8007b2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	2b80      	cmp	r3, #128	@ 0x80
 8007ac2:	d034      	beq.n	8007b2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	2b40      	cmp	r3, #64	@ 0x40
 8007ac8:	d031      	beq.n	8007b2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	f003 0308 	and.w	r3, r3, #8
 8007ad4:	2b08      	cmp	r3, #8
 8007ad6:	d110      	bne.n	8007afa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2208      	movs	r2, #8
 8007ade:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 f838 	bl	8007b56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2208      	movs	r2, #8
 8007aea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e029      	b.n	8007b4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	69db      	ldr	r3, [r3, #28]
 8007b00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b08:	d111      	bne.n	8007b2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 f81e 	bl	8007b56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	e00f      	b.n	8007b4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	69da      	ldr	r2, [r3, #28]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	4013      	ands	r3, r2
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	bf0c      	ite	eq
 8007b3e:	2301      	moveq	r3, #1
 8007b40:	2300      	movne	r3, #0
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	461a      	mov	r2, r3
 8007b46:	79fb      	ldrb	r3, [r7, #7]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d0a0      	beq.n	8007a8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b56:	b480      	push	{r7}
 8007b58:	b095      	sub	sp, #84	@ 0x54
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b66:	e853 3f00 	ldrex	r3, [r3]
 8007b6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	461a      	mov	r2, r3
 8007b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b84:	e841 2300 	strex	r3, r2, [r1]
 8007b88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1e6      	bne.n	8007b5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3308      	adds	r3, #8
 8007b96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	e853 3f00 	ldrex	r3, [r3]
 8007b9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ba6:	f023 0301 	bic.w	r3, r3, #1
 8007baa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	3308      	adds	r3, #8
 8007bb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bbc:	e841 2300 	strex	r3, r2, [r1]
 8007bc0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d1e3      	bne.n	8007b90 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d118      	bne.n	8007c02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	e853 3f00 	ldrex	r3, [r3]
 8007bdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	f023 0310 	bic.w	r3, r3, #16
 8007be4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	461a      	mov	r2, r3
 8007bec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bee:	61bb      	str	r3, [r7, #24]
 8007bf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf2:	6979      	ldr	r1, [r7, #20]
 8007bf4:	69ba      	ldr	r2, [r7, #24]
 8007bf6:	e841 2300 	strex	r3, r2, [r1]
 8007bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1e6      	bne.n	8007bd0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2220      	movs	r2, #32
 8007c06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007c16:	bf00      	nop
 8007c18:	3754      	adds	r7, #84	@ 0x54
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f7ff fabd 	bl	80071c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c46:	bf00      	nop
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b088      	sub	sp, #32
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	e853 3f00 	ldrex	r3, [r3]
 8007c62:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c6a:	61fb      	str	r3, [r7, #28]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	461a      	mov	r2, r3
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	61bb      	str	r3, [r7, #24]
 8007c76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c78:	6979      	ldr	r1, [r7, #20]
 8007c7a:	69ba      	ldr	r2, [r7, #24]
 8007c7c:	e841 2300 	strex	r3, r2, [r1]
 8007c80:	613b      	str	r3, [r7, #16]
   return(result);
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1e6      	bne.n	8007c56 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2220      	movs	r2, #32
 8007c8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7ff fa88 	bl	80071ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c9c:	bf00      	nop
 8007c9e:	3720      	adds	r7, #32
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d101      	bne.n	8007cf6 <HAL_UARTEx_DisableFifoMode+0x16>
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	e027      	b.n	8007d46 <HAL_UARTEx_DisableFifoMode+0x66>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2224      	movs	r2, #36	@ 0x24
 8007d02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f022 0201 	bic.w	r2, r2, #1
 8007d1c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007d24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2220      	movs	r2, #32
 8007d38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3714      	adds	r7, #20
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr

08007d52 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b084      	sub	sp, #16
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d101      	bne.n	8007d6a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d66:	2302      	movs	r3, #2
 8007d68:	e02d      	b.n	8007dc6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2224      	movs	r2, #36	@ 0x24
 8007d76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f022 0201 	bic.w	r2, r2, #1
 8007d90:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	683a      	ldr	r2, [r7, #0]
 8007da2:	430a      	orrs	r2, r1
 8007da4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f850 	bl	8007e4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2220      	movs	r2, #32
 8007db8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b084      	sub	sp, #16
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d101      	bne.n	8007de6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007de2:	2302      	movs	r3, #2
 8007de4:	e02d      	b.n	8007e42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2224      	movs	r2, #36	@ 0x24
 8007df2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f022 0201 	bic.w	r2, r2, #1
 8007e0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	683a      	ldr	r2, [r7, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f812 	bl	8007e4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2220      	movs	r2, #32
 8007e34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
	...

08007e4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d108      	bne.n	8007e6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e6c:	e031      	b.n	8007ed2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e6e:	2308      	movs	r3, #8
 8007e70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e72:	2308      	movs	r3, #8
 8007e74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	0e5b      	lsrs	r3, r3, #25
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	f003 0307 	and.w	r3, r3, #7
 8007e84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	0f5b      	lsrs	r3, r3, #29
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	f003 0307 	and.w	r3, r3, #7
 8007e94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e96:	7bbb      	ldrb	r3, [r7, #14]
 8007e98:	7b3a      	ldrb	r2, [r7, #12]
 8007e9a:	4911      	ldr	r1, [pc, #68]	@ (8007ee0 <UARTEx_SetNbDataToProcess+0x94>)
 8007e9c:	5c8a      	ldrb	r2, [r1, r2]
 8007e9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ea2:	7b3a      	ldrb	r2, [r7, #12]
 8007ea4:	490f      	ldr	r1, [pc, #60]	@ (8007ee4 <UARTEx_SetNbDataToProcess+0x98>)
 8007ea6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ea8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
 8007eb6:	7b7a      	ldrb	r2, [r7, #13]
 8007eb8:	4909      	ldr	r1, [pc, #36]	@ (8007ee0 <UARTEx_SetNbDataToProcess+0x94>)
 8007eba:	5c8a      	ldrb	r2, [r1, r2]
 8007ebc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ec0:	7b7a      	ldrb	r2, [r7, #13]
 8007ec2:	4908      	ldr	r1, [pc, #32]	@ (8007ee4 <UARTEx_SetNbDataToProcess+0x98>)
 8007ec4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ec6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007ed2:	bf00      	nop
 8007ed4:	3714      	adds	r7, #20
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	08007ff4 	.word	0x08007ff4
 8007ee4:	08007ffc 	.word	0x08007ffc

08007ee8 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	ed93 7a06 	vldr	s14, [r3, #24]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	edd3 7a07 	vldr	s15, [r3, #28]
 8007efe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	edd3 7a08 	vldr	s15, [r3, #32]
 8007f08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	edd3 7a06 	vldr	s15, [r3, #24]
 8007f18:	eeb1 7a67 	vneg.f32	s14, s15
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	edd3 7a08 	vldr	s15, [r3, #32]
 8007f22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a1a      	ldr	r2, [r3, #32]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d006      	beq.n	8007f4c <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	330c      	adds	r3, #12
 8007f42:	220c      	movs	r2, #12
 8007f44:	2100      	movs	r1, #0
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 f804 	bl	8007f54 <memset>
  }

}
 8007f4c:	bf00      	nop
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <memset>:
 8007f54:	4402      	add	r2, r0
 8007f56:	4603      	mov	r3, r0
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d100      	bne.n	8007f5e <memset+0xa>
 8007f5c:	4770      	bx	lr
 8007f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f62:	e7f9      	b.n	8007f58 <memset+0x4>

08007f64 <__libc_init_array>:
 8007f64:	b570      	push	{r4, r5, r6, lr}
 8007f66:	4d0d      	ldr	r5, [pc, #52]	@ (8007f9c <__libc_init_array+0x38>)
 8007f68:	4c0d      	ldr	r4, [pc, #52]	@ (8007fa0 <__libc_init_array+0x3c>)
 8007f6a:	1b64      	subs	r4, r4, r5
 8007f6c:	10a4      	asrs	r4, r4, #2
 8007f6e:	2600      	movs	r6, #0
 8007f70:	42a6      	cmp	r6, r4
 8007f72:	d109      	bne.n	8007f88 <__libc_init_array+0x24>
 8007f74:	4d0b      	ldr	r5, [pc, #44]	@ (8007fa4 <__libc_init_array+0x40>)
 8007f76:	4c0c      	ldr	r4, [pc, #48]	@ (8007fa8 <__libc_init_array+0x44>)
 8007f78:	f000 f818 	bl	8007fac <_init>
 8007f7c:	1b64      	subs	r4, r4, r5
 8007f7e:	10a4      	asrs	r4, r4, #2
 8007f80:	2600      	movs	r6, #0
 8007f82:	42a6      	cmp	r6, r4
 8007f84:	d105      	bne.n	8007f92 <__libc_init_array+0x2e>
 8007f86:	bd70      	pop	{r4, r5, r6, pc}
 8007f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f8c:	4798      	blx	r3
 8007f8e:	3601      	adds	r6, #1
 8007f90:	e7ee      	b.n	8007f70 <__libc_init_array+0xc>
 8007f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f96:	4798      	blx	r3
 8007f98:	3601      	adds	r6, #1
 8007f9a:	e7f2      	b.n	8007f82 <__libc_init_array+0x1e>
 8007f9c:	0800800c 	.word	0x0800800c
 8007fa0:	0800800c 	.word	0x0800800c
 8007fa4:	0800800c 	.word	0x0800800c
 8007fa8:	08008010 	.word	0x08008010

08007fac <_init>:
 8007fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fae:	bf00      	nop
 8007fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb2:	bc08      	pop	{r3}
 8007fb4:	469e      	mov	lr, r3
 8007fb6:	4770      	bx	lr

08007fb8 <_fini>:
 8007fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fba:	bf00      	nop
 8007fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fbe:	bc08      	pop	{r3}
 8007fc0:	469e      	mov	lr, r3
 8007fc2:	4770      	bx	lr
