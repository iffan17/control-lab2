
Elec Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007794  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800796c  0800796c  0000896c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079ac  080079ac  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  080079ac  080079ac  000089ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079b4  080079b4  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079b4  080079b4  000089b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079b8  080079b8  000089b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080079bc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000440  2000000c  080079c8  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  080079c8  0000944c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018201  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cd2  00000000  00000000  0002123d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  00023f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001055  00000000  00000000  000253f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dd6  00000000  00000000  0002644d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001881e  00000000  00000000  0004f223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001140f1  00000000  00000000  00067a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017bb32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bcc  00000000  00000000  0017bb78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00181744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007954 	.word	0x08007954

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08007954 	.word	0x08007954

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b96a 	b.w	8000d40 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	460c      	mov	r4, r1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d14e      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a90:	4694      	mov	ip, r2
 8000a92:	458c      	cmp	ip, r1
 8000a94:	4686      	mov	lr, r0
 8000a96:	fab2 f282 	clz	r2, r2
 8000a9a:	d962      	bls.n	8000b62 <__udivmoddi4+0xde>
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	4091      	lsls	r1, r2
 8000aa4:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aac:	4319      	orrs	r1, r3
 8000aae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ab2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab6:	fa1f f68c 	uxth.w	r6, ip
 8000aba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000abe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ac2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aca:	fb04 f106 	mul.w	r1, r4, r6
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ada:	f080 8112 	bcs.w	8000d02 <__udivmoddi4+0x27e>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 810f 	bls.w	8000d02 <__udivmoddi4+0x27e>
 8000ae4:	3c02      	subs	r4, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a59      	subs	r1, r3, r1
 8000aea:	fa1f f38e 	uxth.w	r3, lr
 8000aee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000af2:	fb07 1110 	mls	r1, r7, r0, r1
 8000af6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afa:	fb00 f606 	mul.w	r6, r0, r6
 8000afe:	429e      	cmp	r6, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x94>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b0a:	f080 80fc 	bcs.w	8000d06 <__udivmoddi4+0x282>
 8000b0e:	429e      	cmp	r6, r3
 8000b10:	f240 80f9 	bls.w	8000d06 <__udivmoddi4+0x282>
 8000b14:	4463      	add	r3, ip
 8000b16:	3802      	subs	r0, #2
 8000b18:	1b9b      	subs	r3, r3, r6
 8000b1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b1e:	2100      	movs	r1, #0
 8000b20:	b11d      	cbz	r5, 8000b2a <__udivmoddi4+0xa6>
 8000b22:	40d3      	lsrs	r3, r2
 8000b24:	2200      	movs	r2, #0
 8000b26:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d905      	bls.n	8000b3e <__udivmoddi4+0xba>
 8000b32:	b10d      	cbz	r5, 8000b38 <__udivmoddi4+0xb4>
 8000b34:	e9c5 0100 	strd	r0, r1, [r5]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e7f5      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b3e:	fab3 f183 	clz	r1, r3
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d146      	bne.n	8000bd4 <__udivmoddi4+0x150>
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xcc>
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	f0c0 80f0 	bcc.w	8000d30 <__udivmoddi4+0x2ac>
 8000b50:	1a86      	subs	r6, r0, r2
 8000b52:	eb64 0303 	sbc.w	r3, r4, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	2d00      	cmp	r5, #0
 8000b5a:	d0e6      	beq.n	8000b2a <__udivmoddi4+0xa6>
 8000b5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b60:	e7e3      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	f040 8090 	bne.w	8000c88 <__udivmoddi4+0x204>
 8000b68:	eba1 040c 	sub.w	r4, r1, ip
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	fa1f f78c 	uxth.w	r7, ip
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b86:	fb07 f006 	mul.w	r0, r7, r6
 8000b8a:	4298      	cmp	r0, r3
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x11c>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x11a>
 8000b98:	4298      	cmp	r0, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2b4>
 8000b9e:	4626      	mov	r6, r4
 8000ba0:	1a1c      	subs	r4, r3, r0
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000baa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bb2:	fb00 f707 	mul.w	r7, r0, r7
 8000bb6:	429f      	cmp	r7, r3
 8000bb8:	d908      	bls.n	8000bcc <__udivmoddi4+0x148>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc2:	d202      	bcs.n	8000bca <__udivmoddi4+0x146>
 8000bc4:	429f      	cmp	r7, r3
 8000bc6:	f200 80b0 	bhi.w	8000d2a <__udivmoddi4+0x2a6>
 8000bca:	4620      	mov	r0, r4
 8000bcc:	1bdb      	subs	r3, r3, r7
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	e7a5      	b.n	8000b20 <__udivmoddi4+0x9c>
 8000bd4:	f1c1 0620 	rsb	r6, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 f706 	lsr.w	r7, r2, r6
 8000bde:	431f      	orrs	r7, r3
 8000be0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000be4:	fa04 f301 	lsl.w	r3, r4, r1
 8000be8:	ea43 030c 	orr.w	r3, r3, ip
 8000bec:	40f4      	lsrs	r4, r6
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	0c38      	lsrs	r0, r7, #16
 8000bf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fb00 441e 	mls	r4, r0, lr, r4
 8000c04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c08:	fb0e f90c 	mul.w	r9, lr, ip
 8000c0c:	45a1      	cmp	r9, r4
 8000c0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x1a6>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c1a:	f080 8084 	bcs.w	8000d26 <__udivmoddi4+0x2a2>
 8000c1e:	45a1      	cmp	r9, r4
 8000c20:	f240 8081 	bls.w	8000d26 <__udivmoddi4+0x2a2>
 8000c24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c28:	443c      	add	r4, r7
 8000c2a:	eba4 0409 	sub.w	r4, r4, r9
 8000c2e:	fa1f f983 	uxth.w	r9, r3
 8000c32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c36:	fb00 4413 	mls	r4, r0, r3, r4
 8000c3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x1d2>
 8000c46:	193c      	adds	r4, r7, r4
 8000c48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c4c:	d267      	bcs.n	8000d1e <__udivmoddi4+0x29a>
 8000c4e:	45a4      	cmp	ip, r4
 8000c50:	d965      	bls.n	8000d1e <__udivmoddi4+0x29a>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	443c      	add	r4, r7
 8000c56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	429c      	cmp	r4, r3
 8000c64:	46ce      	mov	lr, r9
 8000c66:	469c      	mov	ip, r3
 8000c68:	d351      	bcc.n	8000d0e <__udivmoddi4+0x28a>
 8000c6a:	d04e      	beq.n	8000d0a <__udivmoddi4+0x286>
 8000c6c:	b155      	cbz	r5, 8000c84 <__udivmoddi4+0x200>
 8000c6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c72:	eb64 040c 	sbc.w	r4, r4, ip
 8000c76:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7a:	40cb      	lsrs	r3, r1
 8000c7c:	431e      	orrs	r6, r3
 8000c7e:	40cc      	lsrs	r4, r1
 8000c80:	e9c5 6400 	strd	r6, r4, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	e750      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c94:	fa24 f303 	lsr.w	r3, r4, r3
 8000c98:	4094      	lsls	r4, r2
 8000c9a:	430c      	orrs	r4, r1
 8000c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb0:	0c23      	lsrs	r3, r4, #16
 8000cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb6:	fb00 f107 	mul.w	r1, r0, r7
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x24c>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cc6:	d22c      	bcs.n	8000d22 <__udivmoddi4+0x29e>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d92a      	bls.n	8000d22 <__udivmoddi4+0x29e>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce0:	fb01 f307 	mul.w	r3, r1, r7
 8000ce4:	42a3      	cmp	r3, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x276>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf0:	d213      	bcs.n	8000d1a <__udivmoddi4+0x296>
 8000cf2:	42a3      	cmp	r3, r4
 8000cf4:	d911      	bls.n	8000d1a <__udivmoddi4+0x296>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	1ae4      	subs	r4, r4, r3
 8000cfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d00:	e739      	b.n	8000b76 <__udivmoddi4+0xf2>
 8000d02:	4604      	mov	r4, r0
 8000d04:	e6f0      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d06:	4608      	mov	r0, r1
 8000d08:	e706      	b.n	8000b18 <__udivmoddi4+0x94>
 8000d0a:	45c8      	cmp	r8, r9
 8000d0c:	d2ae      	bcs.n	8000c6c <__udivmoddi4+0x1e8>
 8000d0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d16:	3801      	subs	r0, #1
 8000d18:	e7a8      	b.n	8000c6c <__udivmoddi4+0x1e8>
 8000d1a:	4631      	mov	r1, r6
 8000d1c:	e7ed      	b.n	8000cfa <__udivmoddi4+0x276>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	e799      	b.n	8000c56 <__udivmoddi4+0x1d2>
 8000d22:	4630      	mov	r0, r6
 8000d24:	e7d4      	b.n	8000cd0 <__udivmoddi4+0x24c>
 8000d26:	46d6      	mov	lr, sl
 8000d28:	e77f      	b.n	8000c2a <__udivmoddi4+0x1a6>
 8000d2a:	4463      	add	r3, ip
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	e74d      	b.n	8000bcc <__udivmoddi4+0x148>
 8000d30:	4606      	mov	r6, r0
 8000d32:	4623      	mov	r3, r4
 8000d34:	4608      	mov	r0, r1
 8000d36:	e70f      	b.n	8000b58 <__udivmoddi4+0xd4>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	e730      	b.n	8000ba0 <__udivmoddi4+0x11c>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	0000      	movs	r0, r0
	...

08000d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4e:	f000 fe96 	bl	8001a7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d52:	f000 f943 	bl	8000fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d56:	f000 fbb3 	bl	80014c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d5a:	f000 fb87 	bl	800146c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000d5e:	f000 fa13 	bl	8001188 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000d62:	f000 f987 	bl	8001074 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000d66:	f000 fa59 	bl	800121c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d6a:	f000 faa5 	bl	80012b8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000d6e:	f000 fb29 	bl	80013c4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 200);
 8000d72:	22c8      	movs	r2, #200	@ 0xc8
 8000d74:	4984      	ldr	r1, [pc, #528]	@ (8000f88 <main+0x240>)
 8000d76:	4885      	ldr	r0, [pc, #532]	@ (8000f8c <main+0x244>)
 8000d78:	f001 faee 	bl	8002358 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000d7c:	4884      	ldr	r0, [pc, #528]	@ (8000f90 <main+0x248>)
 8000d7e:	f004 fad9 	bl	8005334 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 8000d82:	4884      	ldr	r0, [pc, #528]	@ (8000f94 <main+0x24c>)
 8000d84:	f004 fad6 	bl	8005334 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4882      	ldr	r0, [pc, #520]	@ (8000f94 <main+0x24c>)
 8000d8c:	f004 fba4 	bl	80054d8 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 8000d90:	213c      	movs	r1, #60	@ 0x3c
 8000d92:	4881      	ldr	r0, [pc, #516]	@ (8000f98 <main+0x250>)
 8000d94:	f004 fd58 	bl	8005848 <HAL_TIM_Encoder_Start>

  PID.Kp =0.1;
 8000d98:	4b80      	ldr	r3, [pc, #512]	@ (8000f9c <main+0x254>)
 8000d9a:	4a81      	ldr	r2, [pc, #516]	@ (8000fa0 <main+0x258>)
 8000d9c:	619a      	str	r2, [r3, #24]
  PID.Ki =0.00001;
 8000d9e:	4b7f      	ldr	r3, [pc, #508]	@ (8000f9c <main+0x254>)
 8000da0:	4a80      	ldr	r2, [pc, #512]	@ (8000fa4 <main+0x25c>)
 8000da2:	61da      	str	r2, [r3, #28]
  PID.Kd = 0.1;
 8000da4:	4b7d      	ldr	r3, [pc, #500]	@ (8000f9c <main+0x254>)
 8000da6:	4a7e      	ldr	r2, [pc, #504]	@ (8000fa0 <main+0x258>)
 8000da8:	621a      	str	r2, [r3, #32]
  setVolt = 0;
 8000daa:	4b7f      	ldr	r3, [pc, #508]	@ (8000fa8 <main+0x260>)
 8000dac:	f04f 0200 	mov.w	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
  arm_pid_init_f32(&PID, 0);
 8000db2:	2100      	movs	r1, #0
 8000db4:	4879      	ldr	r0, [pc, #484]	@ (8000f9c <main+0x254>)
 8000db6:	f006 fd6b 	bl	8007890 <arm_pid_init_f32>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim5);
 8000dba:	4b77      	ldr	r3, [pc, #476]	@ (8000f98 <main+0x250>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dc0:	ee07 3a90 	vmov	s15, r3
 8000dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dc8:	4b78      	ldr	r3, [pc, #480]	@ (8000fac <main+0x264>)
 8000dca:	edc3 7a00 	vstr	s15, [r3]
	  Degree = (QEIReadRaw/48)*360;
 8000dce:	4b77      	ldr	r3, [pc, #476]	@ (8000fac <main+0x264>)
 8000dd0:	ed93 7a00 	vldr	s14, [r3]
 8000dd4:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8000fb0 <main+0x268>
 8000dd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ddc:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8000fb4 <main+0x26c>
 8000de0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000de4:	4b74      	ldr	r3, [pc, #464]	@ (8000fb8 <main+0x270>)
 8000de6:	edc3 7a00 	vstr	s15, [r3]
	  for (uint16_t i =0; i < 100;i++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	81fb      	strh	r3, [r7, #14]
 8000dee:	e019      	b.n	8000e24 <main+0xdc>
	  {
		  x += ADC_RawRead[(i*2)];
 8000df0:	89fb      	ldrh	r3, [r7, #14]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4a64      	ldr	r2, [pc, #400]	@ (8000f88 <main+0x240>)
 8000df6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4b6f      	ldr	r3, [pc, #444]	@ (8000fbc <main+0x274>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4413      	add	r3, r2
 8000e02:	4a6e      	ldr	r2, [pc, #440]	@ (8000fbc <main+0x274>)
 8000e04:	6013      	str	r3, [r2, #0]
		  y += ADC_RawRead[(i*2)+1];
 8000e06:	89fb      	ldrh	r3, [r7, #14]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	4a5e      	ldr	r2, [pc, #376]	@ (8000f88 <main+0x240>)
 8000e0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b6a      	ldr	r3, [pc, #424]	@ (8000fc0 <main+0x278>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4413      	add	r3, r2
 8000e1a:	4a69      	ldr	r2, [pc, #420]	@ (8000fc0 <main+0x278>)
 8000e1c:	6013      	str	r3, [r2, #0]
	  for (uint16_t i =0; i < 100;i++)
 8000e1e:	89fb      	ldrh	r3, [r7, #14]
 8000e20:	3301      	adds	r3, #1
 8000e22:	81fb      	strh	r3, [r7, #14]
 8000e24:	89fb      	ldrh	r3, [r7, #14]
 8000e26:	2b63      	cmp	r3, #99	@ 0x63
 8000e28:	d9e2      	bls.n	8000df0 <main+0xa8>
	  }
	  position = x/100;
 8000e2a:	4b64      	ldr	r3, [pc, #400]	@ (8000fbc <main+0x274>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a65      	ldr	r2, [pc, #404]	@ (8000fc4 <main+0x27c>)
 8000e30:	fba2 2303 	umull	r2, r3, r2, r3
 8000e34:	095b      	lsrs	r3, r3, #5
 8000e36:	ee07 3a90 	vmov	s15, r3
 8000e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e3e:	4b62      	ldr	r3, [pc, #392]	@ (8000fc8 <main+0x280>)
 8000e40:	edc3 7a00 	vstr	s15, [r3]
	  setposition = y/100;
 8000e44:	4b5e      	ldr	r3, [pc, #376]	@ (8000fc0 <main+0x278>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a5e      	ldr	r2, [pc, #376]	@ (8000fc4 <main+0x27c>)
 8000e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4e:	095b      	lsrs	r3, r3, #5
 8000e50:	ee07 3a90 	vmov	s15, r3
 8000e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e58:	4b5c      	ldr	r3, [pc, #368]	@ (8000fcc <main+0x284>)
 8000e5a:	edc3 7a00 	vstr	s15, [r3]
	  x = 0;
 8000e5e:	4b57      	ldr	r3, [pc, #348]	@ (8000fbc <main+0x274>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
	  y = 0;
 8000e64:	4b56      	ldr	r3, [pc, #344]	@ (8000fc0 <main+0x278>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
	  //inVolt = (position/4096)*2*3.14;
	  inVolt = (QEIReadRaw/48)*2*3.14;
 8000e6a:	4b50      	ldr	r3, [pc, #320]	@ (8000fac <main+0x264>)
 8000e6c:	ed93 7a00 	vldr	s14, [r3]
 8000e70:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8000fb0 <main+0x268>
 8000e74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e78:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000e7c:	ee17 0a90 	vmov	r0, s15
 8000e80:	f7ff fb2e 	bl	80004e0 <__aeabi_f2d>
 8000e84:	a33e      	add	r3, pc, #248	@ (adr r3, 8000f80 <main+0x238>)
 8000e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8a:	f7ff fb81 	bl	8000590 <__aeabi_dmul>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	460b      	mov	r3, r1
 8000e92:	4610      	mov	r0, r2
 8000e94:	4619      	mov	r1, r3
 8000e96:	f7ff fd8d 	bl	80009b4 <__aeabi_d2f>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	4a4c      	ldr	r2, [pc, #304]	@ (8000fd0 <main+0x288>)
 8000e9e:	6013      	str	r3, [r2, #0]
	  //setVolt = (setposition/4096)*3.3;
	  static uint32_t timestamp =0;

	  if(timestamp < HAL_GetTick())
 8000ea0:	f000 fe52 	bl	8001b48 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	4b4b      	ldr	r3, [pc, #300]	@ (8000fd4 <main+0x28c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d985      	bls.n	8000dba <main+0x72>
	  {
	  timestamp = HAL_GetTick()+10;
 8000eae:	f000 fe4b 	bl	8001b48 <HAL_GetTick>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	330a      	adds	r3, #10
 8000eb6:	4a47      	ldr	r2, [pc, #284]	@ (8000fd4 <main+0x28c>)
 8000eb8:	6013      	str	r3, [r2, #0]
	  Vfeedback = arm_pid_f32(&PID, setVolt - inVolt);
 8000eba:	4b3b      	ldr	r3, [pc, #236]	@ (8000fa8 <main+0x260>)
 8000ebc:	ed93 7a00 	vldr	s14, [r3]
 8000ec0:	4b43      	ldr	r3, [pc, #268]	@ (8000fd0 <main+0x288>)
 8000ec2:	edd3 7a00 	vldr	s15, [r3]
 8000ec6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eca:	4b34      	ldr	r3, [pc, #208]	@ (8000f9c <main+0x254>)
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	edc7 7a01 	vstr	s15, [r7, #4]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	ed93 7a00 	vldr	s14, [r3]
 8000ed8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000edc:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	edd3 6a01 	vldr	s13, [r3, #4]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	edd3 7a03 	vldr	s15, [r3, #12]
 8000eec:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000ef0:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	edd3 6a02 	vldr	s13, [r3, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f12:	edc7 7a00 	vstr	s15, [r7]

    /* Update state */
    S->state[1] = S->state[0];
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	68da      	ldr	r2, [r3, #12]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	683a      	ldr	r2, [r7, #0]
 8000f28:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	4a2a      	ldr	r2, [pc, #168]	@ (8000fd8 <main+0x290>)
 8000f2e:	6013      	str	r3, [r2, #0]

	  if(Vfeedback >= 0)
 8000f30:	4b29      	ldr	r3, [pc, #164]	@ (8000fd8 <main+0x290>)
 8000f32:	edd3 7a00 	vldr	s15, [r3]
 8000f36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f3e:	db0e      	blt.n	8000f5e <main+0x216>
	  {
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, Vfeedback);
 8000f40:	4b25      	ldr	r3, [pc, #148]	@ (8000fd8 <main+0x290>)
 8000f42:	edd3 7a00 	vldr	s15, [r3]
 8000f46:	4b13      	ldr	r3, [pc, #76]	@ (8000f94 <main+0x24c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f4e:	ee17 2a90 	vmov	r2, s15
 8000f52:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8000f54:	4b0f      	ldr	r3, [pc, #60]	@ (8000f94 <main+0x24c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f5c:	e72d      	b.n	8000dba <main+0x72>
	  }
	  else{
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f94 <main+0x24c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2200      	movs	r2, #0
 8000f64:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, -Vfeedback);
 8000f66:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd8 <main+0x290>)
 8000f68:	edd3 7a00 	vldr	s15, [r3]
 8000f6c:	eef1 7a67 	vneg.f32	s15, s15
 8000f70:	4b08      	ldr	r3, [pc, #32]	@ (8000f94 <main+0x24c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f78:	ee17 2a90 	vmov	r2, s15
 8000f7c:	639a      	str	r2, [r3, #56]	@ 0x38
  {
 8000f7e:	e71c      	b.n	8000dba <main+0x72>
 8000f80:	51eb851f 	.word	0x51eb851f
 8000f84:	40091eb8 	.word	0x40091eb8
 8000f88:	20000274 	.word	0x20000274
 8000f8c:	20000028 	.word	0x20000028
 8000f90:	20000188 	.word	0x20000188
 8000f94:	200001d4 	.word	0x200001d4
 8000f98:	20000220 	.word	0x20000220
 8000f9c:	20000404 	.word	0x20000404
 8000fa0:	3dcccccd 	.word	0x3dcccccd
 8000fa4:	3727c5ac 	.word	0x3727c5ac
 8000fa8:	20000440 	.word	0x20000440
 8000fac:	2000026c 	.word	0x2000026c
 8000fb0:	42400000 	.word	0x42400000
 8000fb4:	43b40000 	.word	0x43b40000
 8000fb8:	20000270 	.word	0x20000270
 8000fbc:	20000434 	.word	0x20000434
 8000fc0:	20000438 	.word	0x20000438
 8000fc4:	51eb851f 	.word	0x51eb851f
 8000fc8:	20000428 	.word	0x20000428
 8000fcc:	2000042c 	.word	0x2000042c
 8000fd0:	2000043c 	.word	0x2000043c
 8000fd4:	20000444 	.word	0x20000444
 8000fd8:	20000430 	.word	0x20000430

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b094      	sub	sp, #80	@ 0x50
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0318 	add.w	r3, r7, #24
 8000fe6:	2238      	movs	r2, #56	@ 0x38
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f006 fc86 	bl	80078fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f003 f910 	bl	8004224 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001004:	2302      	movs	r3, #2
 8001006:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001008:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800100c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100e:	2340      	movs	r3, #64	@ 0x40
 8001010:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001012:	2302      	movs	r3, #2
 8001014:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001016:	2302      	movs	r3, #2
 8001018:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800101a:	2304      	movs	r3, #4
 800101c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800101e:	2355      	movs	r3, #85	@ 0x55
 8001020:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001022:	2302      	movs	r3, #2
 8001024:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001026:	2302      	movs	r3, #2
 8001028:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800102a:	2302      	movs	r3, #2
 800102c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102e:	f107 0318 	add.w	r3, r7, #24
 8001032:	4618      	mov	r0, r3
 8001034:	f003 f9aa 	bl	800438c <HAL_RCC_OscConfig>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800103e:	f000 faad 	bl	800159c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001042:	230f      	movs	r3, #15
 8001044:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001046:	2303      	movs	r3, #3
 8001048:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	2104      	movs	r1, #4
 800105a:	4618      	mov	r0, r3
 800105c:	f003 fca8 	bl	80049b0 <HAL_RCC_ClockConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001066:	f000 fa99 	bl	800159c <Error_Handler>
  }
}
 800106a:	bf00      	nop
 800106c:	3750      	adds	r7, #80	@ 0x50
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08c      	sub	sp, #48	@ 0x30
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800107a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2220      	movs	r2, #32
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f006 fc35 	bl	80078fc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001092:	4b3a      	ldr	r3, [pc, #232]	@ (800117c <MX_ADC1_Init+0x108>)
 8001094:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001098:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800109a:	4b38      	ldr	r3, [pc, #224]	@ (800117c <MX_ADC1_Init+0x108>)
 800109c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80010a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010a2:	4b36      	ldr	r3, [pc, #216]	@ (800117c <MX_ADC1_Init+0x108>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a8:	4b34      	ldr	r3, [pc, #208]	@ (800117c <MX_ADC1_Init+0x108>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80010ae:	4b33      	ldr	r3, [pc, #204]	@ (800117c <MX_ADC1_Init+0x108>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010b4:	4b31      	ldr	r3, [pc, #196]	@ (800117c <MX_ADC1_Init+0x108>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ba:	4b30      	ldr	r3, [pc, #192]	@ (800117c <MX_ADC1_Init+0x108>)
 80010bc:	2204      	movs	r2, #4
 80010be:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010c0:	4b2e      	ldr	r3, [pc, #184]	@ (800117c <MX_ADC1_Init+0x108>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010c6:	4b2d      	ldr	r3, [pc, #180]	@ (800117c <MX_ADC1_Init+0x108>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80010cc:	4b2b      	ldr	r3, [pc, #172]	@ (800117c <MX_ADC1_Init+0x108>)
 80010ce:	2202      	movs	r2, #2
 80010d0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010d2:	4b2a      	ldr	r3, [pc, #168]	@ (800117c <MX_ADC1_Init+0x108>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80010da:	4b28      	ldr	r3, [pc, #160]	@ (800117c <MX_ADC1_Init+0x108>)
 80010dc:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 80010e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010e2:	4b26      	ldr	r3, [pc, #152]	@ (800117c <MX_ADC1_Init+0x108>)
 80010e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010ea:	4b24      	ldr	r3, [pc, #144]	@ (800117c <MX_ADC1_Init+0x108>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010f2:	4b22      	ldr	r3, [pc, #136]	@ (800117c <MX_ADC1_Init+0x108>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010f8:	4b20      	ldr	r3, [pc, #128]	@ (800117c <MX_ADC1_Init+0x108>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001100:	481e      	ldr	r0, [pc, #120]	@ (800117c <MX_ADC1_Init+0x108>)
 8001102:	f000 ff6d 	bl	8001fe0 <HAL_ADC_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800110c:	f000 fa46 	bl	800159c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001114:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001118:	4619      	mov	r1, r3
 800111a:	4818      	ldr	r0, [pc, #96]	@ (800117c <MX_ADC1_Init+0x108>)
 800111c:	f002 fa3a 	bl	8003594 <HAL_ADCEx_MultiModeConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001126:	f000 fa39 	bl	800159c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800112a:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <MX_ADC1_Init+0x10c>)
 800112c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800112e:	2306      	movs	r3, #6
 8001130:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001132:	2302      	movs	r3, #2
 8001134:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001136:	237f      	movs	r3, #127	@ 0x7f
 8001138:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800113a:	2304      	movs	r3, #4
 800113c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	4619      	mov	r1, r3
 8001146:	480d      	ldr	r0, [pc, #52]	@ (800117c <MX_ADC1_Init+0x108>)
 8001148:	f001 fc62 	bl	8002a10 <HAL_ADC_ConfigChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001152:	f000 fa23 	bl	800159c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001156:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <MX_ADC1_Init+0x110>)
 8001158:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800115a:	230c      	movs	r3, #12
 800115c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	4619      	mov	r1, r3
 8001162:	4806      	ldr	r0, [pc, #24]	@ (800117c <MX_ADC1_Init+0x108>)
 8001164:	f001 fc54 	bl	8002a10 <HAL_ADC_ConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800116e:	f000 fa15 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	3730      	adds	r7, #48	@ 0x30
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000028 	.word	0x20000028
 8001180:	04300002 	.word	0x04300002
 8001184:	08600004 	.word	0x08600004

08001188 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800118c:	4b21      	ldr	r3, [pc, #132]	@ (8001214 <MX_LPUART1_UART_Init+0x8c>)
 800118e:	4a22      	ldr	r2, [pc, #136]	@ (8001218 <MX_LPUART1_UART_Init+0x90>)
 8001190:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001192:	4b20      	ldr	r3, [pc, #128]	@ (8001214 <MX_LPUART1_UART_Init+0x8c>)
 8001194:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001198:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800119a:	4b1e      	ldr	r3, [pc, #120]	@ (8001214 <MX_LPUART1_UART_Init+0x8c>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80011a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001214 <MX_LPUART1_UART_Init+0x8c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80011a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <MX_LPUART1_UART_Init+0x8c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80011ac:	4b19      	ldr	r3, [pc, #100]	@ (8001214 <MX_LPUART1_UART_Init+0x8c>)
 80011ae:	220c      	movs	r2, #12
 80011b0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b2:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <MX_LPUART1_UART_Init+0x8c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011b8:	4b16      	ldr	r3, [pc, #88]	@ (8001214 <MX_LPUART1_UART_Init+0x8c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <MX_LPUART1_UART_Init+0x8c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c4:	4b13      	ldr	r3, [pc, #76]	@ (8001214 <MX_LPUART1_UART_Init+0x8c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80011ca:	4812      	ldr	r0, [pc, #72]	@ (8001214 <MX_LPUART1_UART_Init+0x8c>)
 80011cc:	f005 fcf2 	bl	8006bb4 <HAL_UART_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80011d6:	f000 f9e1 	bl	800159c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011da:	2100      	movs	r1, #0
 80011dc:	480d      	ldr	r0, [pc, #52]	@ (8001214 <MX_LPUART1_UART_Init+0x8c>)
 80011de:	f006 fa8d 	bl	80076fc <HAL_UARTEx_SetTxFifoThreshold>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80011e8:	f000 f9d8 	bl	800159c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ec:	2100      	movs	r1, #0
 80011ee:	4809      	ldr	r0, [pc, #36]	@ (8001214 <MX_LPUART1_UART_Init+0x8c>)
 80011f0:	f006 fac2 	bl	8007778 <HAL_UARTEx_SetRxFifoThreshold>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80011fa:	f000 f9cf 	bl	800159c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80011fe:	4805      	ldr	r0, [pc, #20]	@ (8001214 <MX_LPUART1_UART_Init+0x8c>)
 8001200:	f006 fa43 	bl	800768a <HAL_UARTEx_DisableFifoMode>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800120a:	f000 f9c7 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200000f4 	.word	0x200000f4
 8001218:	40008000 	.word	0x40008000

0800121c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001222:	f107 0310 	add.w	r3, r7, #16
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800123a:	4b1d      	ldr	r3, [pc, #116]	@ (80012b0 <MX_TIM3_Init+0x94>)
 800123c:	4a1d      	ldr	r2, [pc, #116]	@ (80012b4 <MX_TIM3_Init+0x98>)
 800123e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001240:	4b1b      	ldr	r3, [pc, #108]	@ (80012b0 <MX_TIM3_Init+0x94>)
 8001242:	22a9      	movs	r2, #169	@ 0xa9
 8001244:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001246:	4b1a      	ldr	r3, [pc, #104]	@ (80012b0 <MX_TIM3_Init+0x94>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800124c:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <MX_TIM3_Init+0x94>)
 800124e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001252:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001254:	4b16      	ldr	r3, [pc, #88]	@ (80012b0 <MX_TIM3_Init+0x94>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125a:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <MX_TIM3_Init+0x94>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001260:	4813      	ldr	r0, [pc, #76]	@ (80012b0 <MX_TIM3_Init+0x94>)
 8001262:	f004 f80f 	bl	8005284 <HAL_TIM_Base_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800126c:	f000 f996 	bl	800159c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001270:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001274:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	4619      	mov	r1, r3
 800127c:	480c      	ldr	r0, [pc, #48]	@ (80012b0 <MX_TIM3_Init+0x94>)
 800127e:	f004 fdd5 	bl	8005e2c <HAL_TIM_ConfigClockSource>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001288:	f000 f988 	bl	800159c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800128c:	2320      	movs	r3, #32
 800128e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	4619      	mov	r1, r3
 8001298:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <MX_TIM3_Init+0x94>)
 800129a:	f005 fbaf 	bl	80069fc <HAL_TIMEx_MasterConfigSynchronization>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012a4:	f000 f97a 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	3720      	adds	r7, #32
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000188 	.word	0x20000188
 80012b4:	40000400 	.word	0x40000400

080012b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08e      	sub	sp, #56	@ 0x38
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d8:	463b      	mov	r3, r7
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]
 80012e6:	615a      	str	r2, [r3, #20]
 80012e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012ea:	4b34      	ldr	r3, [pc, #208]	@ (80013bc <MX_TIM4_Init+0x104>)
 80012ec:	4a34      	ldr	r2, [pc, #208]	@ (80013c0 <MX_TIM4_Init+0x108>)
 80012ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 80012f0:	4b32      	ldr	r3, [pc, #200]	@ (80013bc <MX_TIM4_Init+0x104>)
 80012f2:	22a9      	movs	r2, #169	@ 0xa9
 80012f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f6:	4b31      	ldr	r3, [pc, #196]	@ (80013bc <MX_TIM4_Init+0x104>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80012fc:	4b2f      	ldr	r3, [pc, #188]	@ (80013bc <MX_TIM4_Init+0x104>)
 80012fe:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001302:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001304:	4b2d      	ldr	r3, [pc, #180]	@ (80013bc <MX_TIM4_Init+0x104>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130a:	4b2c      	ldr	r3, [pc, #176]	@ (80013bc <MX_TIM4_Init+0x104>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001310:	482a      	ldr	r0, [pc, #168]	@ (80013bc <MX_TIM4_Init+0x104>)
 8001312:	f003 ffb7 	bl	8005284 <HAL_TIM_Base_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800131c:	f000 f93e 	bl	800159c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001320:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001324:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001326:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800132a:	4619      	mov	r1, r3
 800132c:	4823      	ldr	r0, [pc, #140]	@ (80013bc <MX_TIM4_Init+0x104>)
 800132e:	f004 fd7d 	bl	8005e2c <HAL_TIM_ConfigClockSource>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001338:	f000 f930 	bl	800159c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800133c:	481f      	ldr	r0, [pc, #124]	@ (80013bc <MX_TIM4_Init+0x104>)
 800133e:	f004 f869 	bl	8005414 <HAL_TIM_PWM_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001348:	f000 f928 	bl	800159c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	4818      	ldr	r0, [pc, #96]	@ (80013bc <MX_TIM4_Init+0x104>)
 800135c:	f005 fb4e 	bl	80069fc <HAL_TIMEx_MasterConfigSynchronization>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001366:	f000 f919 	bl	800159c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136a:	2360      	movs	r3, #96	@ 0x60
 800136c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 800136e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001372:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800137c:	463b      	mov	r3, r7
 800137e:	2200      	movs	r2, #0
 8001380:	4619      	mov	r1, r3
 8001382:	480e      	ldr	r0, [pc, #56]	@ (80013bc <MX_TIM4_Init+0x104>)
 8001384:	f004 fc3e 	bl	8005c04 <HAL_TIM_PWM_ConfigChannel>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800138e:	f000 f905 	bl	800159c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001396:	463b      	mov	r3, r7
 8001398:	2204      	movs	r2, #4
 800139a:	4619      	mov	r1, r3
 800139c:	4807      	ldr	r0, [pc, #28]	@ (80013bc <MX_TIM4_Init+0x104>)
 800139e:	f004 fc31 	bl	8005c04 <HAL_TIM_PWM_ConfigChannel>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 80013a8:	f000 f8f8 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013ac:	4803      	ldr	r0, [pc, #12]	@ (80013bc <MX_TIM4_Init+0x104>)
 80013ae:	f000 fa9d 	bl	80018ec <HAL_TIM_MspPostInit>

}
 80013b2:	bf00      	nop
 80013b4:	3738      	adds	r7, #56	@ 0x38
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200001d4 	.word	0x200001d4
 80013c0:	40000800 	.word	0x40000800

080013c4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08c      	sub	sp, #48	@ 0x30
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	2224      	movs	r2, #36	@ 0x24
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f006 fa92 	bl	80078fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d8:	463b      	mov	r3, r7
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013e2:	4b20      	ldr	r3, [pc, #128]	@ (8001464 <MX_TIM5_Init+0xa0>)
 80013e4:	4a20      	ldr	r2, [pc, #128]	@ (8001468 <MX_TIM5_Init+0xa4>)
 80013e6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80013e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001464 <MX_TIM5_Init+0xa0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001464 <MX_TIM5_Init+0xa0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 47;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001464 <MX_TIM5_Init+0xa0>)
 80013f6:	222f      	movs	r2, #47	@ 0x2f
 80013f8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001464 <MX_TIM5_Init+0xa0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001400:	4b18      	ldr	r3, [pc, #96]	@ (8001464 <MX_TIM5_Init+0xa0>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001406:	2303      	movs	r3, #3
 8001408:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800140e:	2301      	movs	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800141a:	2300      	movs	r3, #0
 800141c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800141e:	2301      	movs	r3, #1
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001422:	2300      	movs	r3, #0
 8001424:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800142a:	f107 030c 	add.w	r3, r7, #12
 800142e:	4619      	mov	r1, r3
 8001430:	480c      	ldr	r0, [pc, #48]	@ (8001464 <MX_TIM5_Init+0xa0>)
 8001432:	f004 f963 	bl	80056fc <HAL_TIM_Encoder_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 800143c:	f000 f8ae 	bl	800159c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001440:	2300      	movs	r3, #0
 8001442:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001448:	463b      	mov	r3, r7
 800144a:	4619      	mov	r1, r3
 800144c:	4805      	ldr	r0, [pc, #20]	@ (8001464 <MX_TIM5_Init+0xa0>)
 800144e:	f005 fad5 	bl	80069fc <HAL_TIMEx_MasterConfigSynchronization>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001458:	f000 f8a0 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800145c:	bf00      	nop
 800145e:	3730      	adds	r7, #48	@ 0x30
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000220 	.word	0x20000220
 8001468:	40000c00 	.word	0x40000c00

0800146c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001472:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <MX_DMA_Init+0x50>)
 8001474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001476:	4a11      	ldr	r2, [pc, #68]	@ (80014bc <MX_DMA_Init+0x50>)
 8001478:	f043 0304 	orr.w	r3, r3, #4
 800147c:	6493      	str	r3, [r2, #72]	@ 0x48
 800147e:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <MX_DMA_Init+0x50>)
 8001480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001482:	f003 0304 	and.w	r3, r3, #4
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800148a:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <MX_DMA_Init+0x50>)
 800148c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800148e:	4a0b      	ldr	r2, [pc, #44]	@ (80014bc <MX_DMA_Init+0x50>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6493      	str	r3, [r2, #72]	@ 0x48
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <MX_DMA_Init+0x50>)
 8001498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	200b      	movs	r0, #11
 80014a8:	f002 fa57 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014ac:	200b      	movs	r0, #11
 80014ae:	f002 fa6e 	bl	800398e <HAL_NVIC_EnableIRQ>

}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000

080014c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	@ 0x28
 80014c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001594 <MX_GPIO_Init+0xd4>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014da:	4a2e      	ldr	r2, [pc, #184]	@ (8001594 <MX_GPIO_Init+0xd4>)
 80014dc:	f043 0304 	orr.w	r3, r3, #4
 80014e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001594 <MX_GPIO_Init+0xd4>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ee:	4b29      	ldr	r3, [pc, #164]	@ (8001594 <MX_GPIO_Init+0xd4>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f2:	4a28      	ldr	r2, [pc, #160]	@ (8001594 <MX_GPIO_Init+0xd4>)
 80014f4:	f043 0320 	orr.w	r3, r3, #32
 80014f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014fa:	4b26      	ldr	r3, [pc, #152]	@ (8001594 <MX_GPIO_Init+0xd4>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fe:	f003 0320 	and.w	r3, r3, #32
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	4b23      	ldr	r3, [pc, #140]	@ (8001594 <MX_GPIO_Init+0xd4>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150a:	4a22      	ldr	r2, [pc, #136]	@ (8001594 <MX_GPIO_Init+0xd4>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001512:	4b20      	ldr	r3, [pc, #128]	@ (8001594 <MX_GPIO_Init+0xd4>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151e:	4b1d      	ldr	r3, [pc, #116]	@ (8001594 <MX_GPIO_Init+0xd4>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001522:	4a1c      	ldr	r2, [pc, #112]	@ (8001594 <MX_GPIO_Init+0xd4>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800152a:	4b1a      	ldr	r3, [pc, #104]	@ (8001594 <MX_GPIO_Init+0xd4>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	2120      	movs	r1, #32
 800153a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800153e:	f002 fe35 	bl	80041ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001542:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001548:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800154c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4619      	mov	r1, r3
 8001558:	480f      	ldr	r0, [pc, #60]	@ (8001598 <MX_GPIO_Init+0xd8>)
 800155a:	f002 fca5 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800155e:	2320      	movs	r3, #32
 8001560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	2301      	movs	r3, #1
 8001564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001578:	f002 fc96 	bl	8003ea8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800157c:	2200      	movs	r2, #0
 800157e:	2100      	movs	r1, #0
 8001580:	2028      	movs	r0, #40	@ 0x28
 8001582:	f002 f9ea 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001586:	2028      	movs	r0, #40	@ 0x28
 8001588:	f002 fa01 	bl	800398e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800158c:	bf00      	nop
 800158e:	3728      	adds	r7, #40	@ 0x28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40021000 	.word	0x40021000
 8001598:	48000800 	.word	0x48000800

0800159c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a0:	b672      	cpsid	i
}
 80015a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <Error_Handler+0x8>

080015a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ae:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <HAL_MspInit+0x44>)
 80015b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015b2:	4a0e      	ldr	r2, [pc, #56]	@ (80015ec <HAL_MspInit+0x44>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80015ba:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <HAL_MspInit+0x44>)
 80015bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c6:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <HAL_MspInit+0x44>)
 80015c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ca:	4a08      	ldr	r2, [pc, #32]	@ (80015ec <HAL_MspInit+0x44>)
 80015cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80015d2:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <HAL_MspInit+0x44>)
 80015d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80015de:	f002 fec5 	bl	800436c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000

080015f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b09e      	sub	sp, #120	@ 0x78
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001608:	f107 0310 	add.w	r3, r7, #16
 800160c:	2254      	movs	r2, #84	@ 0x54
 800160e:	2100      	movs	r1, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f006 f973 	bl	80078fc <memset>
  if(hadc->Instance==ADC1)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800161e:	d167      	bne.n	80016f0 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001620:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001624:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001626:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800162a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800162c:	f107 0310 	add.w	r3, r7, #16
 8001630:	4618      	mov	r0, r3
 8001632:	f003 fbd9 	bl	8004de8 <HAL_RCCEx_PeriphCLKConfig>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800163c:	f7ff ffae 	bl	800159c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001640:	4b2d      	ldr	r3, [pc, #180]	@ (80016f8 <HAL_ADC_MspInit+0x108>)
 8001642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001644:	4a2c      	ldr	r2, [pc, #176]	@ (80016f8 <HAL_ADC_MspInit+0x108>)
 8001646:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800164a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800164c:	4b2a      	ldr	r3, [pc, #168]	@ (80016f8 <HAL_ADC_MspInit+0x108>)
 800164e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001650:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001658:	4b27      	ldr	r3, [pc, #156]	@ (80016f8 <HAL_ADC_MspInit+0x108>)
 800165a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165c:	4a26      	ldr	r2, [pc, #152]	@ (80016f8 <HAL_ADC_MspInit+0x108>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001664:	4b24      	ldr	r3, [pc, #144]	@ (80016f8 <HAL_ADC_MspInit+0x108>)
 8001666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001670:	2303      	movs	r3, #3
 8001672:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001674:	2303      	movs	r3, #3
 8001676:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001680:	4619      	mov	r1, r3
 8001682:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001686:	f002 fc0f 	bl	8003ea8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800168a:	4b1c      	ldr	r3, [pc, #112]	@ (80016fc <HAL_ADC_MspInit+0x10c>)
 800168c:	4a1c      	ldr	r2, [pc, #112]	@ (8001700 <HAL_ADC_MspInit+0x110>)
 800168e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001690:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <HAL_ADC_MspInit+0x10c>)
 8001692:	2205      	movs	r2, #5
 8001694:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001696:	4b19      	ldr	r3, [pc, #100]	@ (80016fc <HAL_ADC_MspInit+0x10c>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800169c:	4b17      	ldr	r3, [pc, #92]	@ (80016fc <HAL_ADC_MspInit+0x10c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016a2:	4b16      	ldr	r3, [pc, #88]	@ (80016fc <HAL_ADC_MspInit+0x10c>)
 80016a4:	2280      	movs	r2, #128	@ 0x80
 80016a6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016a8:	4b14      	ldr	r3, [pc, #80]	@ (80016fc <HAL_ADC_MspInit+0x10c>)
 80016aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016ae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016b0:	4b12      	ldr	r3, [pc, #72]	@ (80016fc <HAL_ADC_MspInit+0x10c>)
 80016b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016b6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016b8:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <HAL_ADC_MspInit+0x10c>)
 80016ba:	2220      	movs	r2, #32
 80016bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016be:	4b0f      	ldr	r3, [pc, #60]	@ (80016fc <HAL_ADC_MspInit+0x10c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016c4:	480d      	ldr	r0, [pc, #52]	@ (80016fc <HAL_ADC_MspInit+0x10c>)
 80016c6:	f002 f97d 	bl	80039c4 <HAL_DMA_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80016d0:	f7ff ff64 	bl	800159c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a09      	ldr	r2, [pc, #36]	@ (80016fc <HAL_ADC_MspInit+0x10c>)
 80016d8:	655a      	str	r2, [r3, #84]	@ 0x54
 80016da:	4a08      	ldr	r2, [pc, #32]	@ (80016fc <HAL_ADC_MspInit+0x10c>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2100      	movs	r1, #0
 80016e4:	2012      	movs	r0, #18
 80016e6:	f002 f938 	bl	800395a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80016ea:	2012      	movs	r0, #18
 80016ec:	f002 f94f 	bl	800398e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016f0:	bf00      	nop
 80016f2:	3778      	adds	r7, #120	@ 0x78
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40021000 	.word	0x40021000
 80016fc:	20000094 	.word	0x20000094
 8001700:	40020008 	.word	0x40020008

08001704 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b09e      	sub	sp, #120	@ 0x78
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800171c:	f107 0310 	add.w	r3, r7, #16
 8001720:	2254      	movs	r2, #84	@ 0x54
 8001722:	2100      	movs	r1, #0
 8001724:	4618      	mov	r0, r3
 8001726:	f006 f8e9 	bl	80078fc <memset>
  if(huart->Instance==LPUART1)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a1f      	ldr	r2, [pc, #124]	@ (80017ac <HAL_UART_MspInit+0xa8>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d136      	bne.n	80017a2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001734:	2320      	movs	r3, #32
 8001736:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001738:	2300      	movs	r3, #0
 800173a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800173c:	f107 0310 	add.w	r3, r7, #16
 8001740:	4618      	mov	r0, r3
 8001742:	f003 fb51 	bl	8004de8 <HAL_RCCEx_PeriphCLKConfig>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800174c:	f7ff ff26 	bl	800159c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001750:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <HAL_UART_MspInit+0xac>)
 8001752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001754:	4a16      	ldr	r2, [pc, #88]	@ (80017b0 <HAL_UART_MspInit+0xac>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800175c:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <HAL_UART_MspInit+0xac>)
 800175e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <HAL_UART_MspInit+0xac>)
 800176a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176c:	4a10      	ldr	r2, [pc, #64]	@ (80017b0 <HAL_UART_MspInit+0xac>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001774:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <HAL_UART_MspInit+0xac>)
 8001776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001780:	230c      	movs	r3, #12
 8001782:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001790:	230c      	movs	r3, #12
 8001792:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001798:	4619      	mov	r1, r3
 800179a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800179e:	f002 fb83 	bl	8003ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80017a2:	bf00      	nop
 80017a4:	3778      	adds	r7, #120	@ 0x78
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40008000 	.word	0x40008000
 80017b0:	40021000 	.word	0x40021000

080017b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a16      	ldr	r2, [pc, #88]	@ (800181c <HAL_TIM_Base_MspInit+0x68>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d114      	bne.n	80017f0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017c6:	4b16      	ldr	r3, [pc, #88]	@ (8001820 <HAL_TIM_Base_MspInit+0x6c>)
 80017c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ca:	4a15      	ldr	r2, [pc, #84]	@ (8001820 <HAL_TIM_Base_MspInit+0x6c>)
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80017d2:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <HAL_TIM_Base_MspInit+0x6c>)
 80017d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	201d      	movs	r0, #29
 80017e4:	f002 f8b9 	bl	800395a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017e8:	201d      	movs	r0, #29
 80017ea:	f002 f8d0 	bl	800398e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80017ee:	e010      	b.n	8001812 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001824 <HAL_TIM_Base_MspInit+0x70>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d10b      	bne.n	8001812 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017fa:	4b09      	ldr	r3, [pc, #36]	@ (8001820 <HAL_TIM_Base_MspInit+0x6c>)
 80017fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fe:	4a08      	ldr	r2, [pc, #32]	@ (8001820 <HAL_TIM_Base_MspInit+0x6c>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	6593      	str	r3, [r2, #88]	@ 0x58
 8001806:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <HAL_TIM_Base_MspInit+0x6c>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
}
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40000400 	.word	0x40000400
 8001820:	40021000 	.word	0x40021000
 8001824:	40000800 	.word	0x40000800

08001828 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	@ 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a25      	ldr	r2, [pc, #148]	@ (80018dc <HAL_TIM_Encoder_MspInit+0xb4>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d144      	bne.n	80018d4 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800184a:	4b25      	ldr	r3, [pc, #148]	@ (80018e0 <HAL_TIM_Encoder_MspInit+0xb8>)
 800184c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184e:	4a24      	ldr	r2, [pc, #144]	@ (80018e0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001850:	f043 0308 	orr.w	r3, r3, #8
 8001854:	6593      	str	r3, [r2, #88]	@ 0x58
 8001856:	4b22      	ldr	r3, [pc, #136]	@ (80018e0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	4b1f      	ldr	r3, [pc, #124]	@ (80018e0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001866:	4a1e      	ldr	r2, [pc, #120]	@ (80018e0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800186e:	4b1c      	ldr	r3, [pc, #112]	@ (80018e0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800187a:	4b19      	ldr	r3, [pc, #100]	@ (80018e0 <HAL_TIM_Encoder_MspInit+0xb8>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187e:	4a18      	ldr	r2, [pc, #96]	@ (80018e0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001880:	f043 0304 	orr.w	r3, r3, #4
 8001884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001886:	4b16      	ldr	r3, [pc, #88]	@ (80018e0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PB2     ------> TIM5_CH1
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001892:	2304      	movs	r3, #4
 8001894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	2300      	movs	r3, #0
 80018a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80018a2:	2302      	movs	r3, #2
 80018a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	480d      	ldr	r0, [pc, #52]	@ (80018e4 <HAL_TIM_Encoder_MspInit+0xbc>)
 80018ae:	f002 fafb 	bl	8003ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80018b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 80018c4:	2301      	movs	r3, #1
 80018c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	4806      	ldr	r0, [pc, #24]	@ (80018e8 <HAL_TIM_Encoder_MspInit+0xc0>)
 80018d0:	f002 faea 	bl	8003ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80018d4:	bf00      	nop
 80018d6:	3728      	adds	r7, #40	@ 0x28
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40000c00 	.word	0x40000c00
 80018e0:	40021000 	.word	0x40021000
 80018e4:	48000400 	.word	0x48000400
 80018e8:	48000800 	.word	0x48000800

080018ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 030c 	add.w	r3, r7, #12
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a12      	ldr	r2, [pc, #72]	@ (8001954 <HAL_TIM_MspPostInit+0x68>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d11d      	bne.n	800194a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190e:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <HAL_TIM_MspPostInit+0x6c>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001912:	4a11      	ldr	r2, [pc, #68]	@ (8001958 <HAL_TIM_MspPostInit+0x6c>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800191a:	4b0f      	ldr	r3, [pc, #60]	@ (8001958 <HAL_TIM_MspPostInit+0x6c>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001926:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800192a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001938:	230a      	movs	r3, #10
 800193a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193c:	f107 030c 	add.w	r3, r7, #12
 8001940:	4619      	mov	r1, r3
 8001942:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001946:	f002 faaf 	bl	8003ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800194a:	bf00      	nop
 800194c:	3720      	adds	r7, #32
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40000800 	.word	0x40000800
 8001958:	40021000 	.word	0x40021000

0800195c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <NMI_Handler+0x4>

08001964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <HardFault_Handler+0x4>

0800196c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <MemManage_Handler+0x4>

08001974 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <BusFault_Handler+0x4>

0800197c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <UsageFault_Handler+0x4>

08001984 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b2:	f000 f8b7 	bl	8001b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019c0:	4802      	ldr	r0, [pc, #8]	@ (80019cc <DMA1_Channel1_IRQHandler+0x10>)
 80019c2:	f002 f922 	bl	8003c0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000094 	.word	0x20000094

080019d0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80019d4:	4802      	ldr	r0, [pc, #8]	@ (80019e0 <ADC1_2_IRQHandler+0x10>)
 80019d6:	f000 fd93 	bl	8002500 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000028 	.word	0x20000028

080019e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019e8:	4802      	ldr	r0, [pc, #8]	@ (80019f4 <TIM3_IRQHandler+0x10>)
 80019ea:	f003 ffbb 	bl	8005964 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000188 	.word	0x20000188

080019f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80019fc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a00:	f002 fbec 	bl	80041dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a0c:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <SystemInit+0x20>)
 8001a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a12:	4a05      	ldr	r2, [pc, #20]	@ (8001a28 <SystemInit+0x20>)
 8001a14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a2c:	480d      	ldr	r0, [pc, #52]	@ (8001a64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a2e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a30:	f7ff ffea 	bl	8001a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a34:	480c      	ldr	r0, [pc, #48]	@ (8001a68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a36:	490d      	ldr	r1, [pc, #52]	@ (8001a6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a38:	4a0d      	ldr	r2, [pc, #52]	@ (8001a70 <LoopForever+0xe>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a3c:	e002      	b.n	8001a44 <LoopCopyDataInit>

08001a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a42:	3304      	adds	r3, #4

08001a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a48:	d3f9      	bcc.n	8001a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a4c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a78 <LoopForever+0x16>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a50:	e001      	b.n	8001a56 <LoopFillZerobss>

08001a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a54:	3204      	adds	r2, #4

08001a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a58:	d3fb      	bcc.n	8001a52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a5a:	f005 ff57 	bl	800790c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a5e:	f7ff f973 	bl	8000d48 <main>

08001a62 <LoopForever>:

LoopForever:
    b LoopForever
 8001a62:	e7fe      	b.n	8001a62 <LoopForever>
  ldr   r0, =_estack
 8001a64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a70:	080079bc 	.word	0x080079bc
  ldr r2, =_sbss
 8001a74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a78:	2000044c 	.word	0x2000044c

08001a7c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a7c:	e7fe      	b.n	8001a7c <ADC3_IRQHandler>

08001a7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a88:	2003      	movs	r0, #3
 8001a8a:	f001 ff5b 	bl	8003944 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f000 f80e 	bl	8001ab0 <HAL_InitTick>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d002      	beq.n	8001aa0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	71fb      	strb	r3, [r7, #7]
 8001a9e:	e001      	b.n	8001aa4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001aa0:	f7ff fd82 	bl	80015a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001aa4:	79fb      	ldrb	r3, [r7, #7]

}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001abc:	4b16      	ldr	r3, [pc, #88]	@ (8001b18 <HAL_InitTick+0x68>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d022      	beq.n	8001b0a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ac4:	4b15      	ldr	r3, [pc, #84]	@ (8001b1c <HAL_InitTick+0x6c>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b13      	ldr	r3, [pc, #76]	@ (8001b18 <HAL_InitTick+0x68>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ad0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f001 ff66 	bl	80039aa <HAL_SYSTICK_Config>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10f      	bne.n	8001b04 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b0f      	cmp	r3, #15
 8001ae8:	d809      	bhi.n	8001afe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aea:	2200      	movs	r2, #0
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	f04f 30ff 	mov.w	r0, #4294967295
 8001af2:	f001 ff32 	bl	800395a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001af6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b20 <HAL_InitTick+0x70>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	e007      	b.n	8001b0e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	73fb      	strb	r3, [r7, #15]
 8001b02:	e004      	b.n	8001b0e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
 8001b08:	e001      	b.n	8001b0e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000008 	.word	0x20000008
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	20000004 	.word	0x20000004

08001b24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b28:	4b05      	ldr	r3, [pc, #20]	@ (8001b40 <HAL_IncTick+0x1c>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <HAL_IncTick+0x20>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4413      	add	r3, r2
 8001b32:	4a03      	ldr	r2, [pc, #12]	@ (8001b40 <HAL_IncTick+0x1c>)
 8001b34:	6013      	str	r3, [r2, #0]
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	20000448 	.word	0x20000448
 8001b44:	20000008 	.word	0x20000008

08001b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b4c:	4b03      	ldr	r3, [pc, #12]	@ (8001b5c <HAL_GetTick+0x14>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20000448 	.word	0x20000448

08001b60 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	431a      	orrs	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	609a      	str	r2, [r3, #8]
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b087      	sub	sp, #28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
 8001bd4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	3360      	adds	r3, #96	@ 0x60
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b08      	ldr	r3, [pc, #32]	@ (8001c0c <LL_ADC_SetOffset+0x44>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c00:	bf00      	nop
 8001c02:	371c      	adds	r7, #28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	03fff000 	.word	0x03fff000

08001c10 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3360      	adds	r3, #96	@ 0x60
 8001c1e:	461a      	mov	r2, r3
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b087      	sub	sp, #28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	3360      	adds	r3, #96	@ 0x60
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	431a      	orrs	r2, r3
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c66:	bf00      	nop
 8001c68:	371c      	adds	r7, #28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b087      	sub	sp, #28
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	3360      	adds	r3, #96	@ 0x60
 8001c82:	461a      	mov	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	431a      	orrs	r2, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001c9c:	bf00      	nop
 8001c9e:	371c      	adds	r7, #28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b087      	sub	sp, #28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	3360      	adds	r3, #96	@ 0x60
 8001cb8:	461a      	mov	r2, r3
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001cd2:	bf00      	nop
 8001cd4:	371c      	adds	r7, #28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	615a      	str	r2, [r3, #20]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b087      	sub	sp, #28
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	3330      	adds	r3, #48	@ 0x30
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	0a1b      	lsrs	r3, r3, #8
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	4413      	add	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	f003 031f 	and.w	r3, r3, #31
 8001d54:	211f      	movs	r1, #31
 8001d56:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	401a      	ands	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	0e9b      	lsrs	r3, r3, #26
 8001d62:	f003 011f 	and.w	r1, r3, #31
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	f003 031f 	and.w	r3, r3, #31
 8001d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d70:	431a      	orrs	r2, r3
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d76:	bf00      	nop
 8001d78:	371c      	adds	r7, #28
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	3314      	adds	r3, #20
 8001db8:	461a      	mov	r2, r3
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	0e5b      	lsrs	r3, r3, #25
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	4413      	add	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	0d1b      	lsrs	r3, r3, #20
 8001dd0:	f003 031f 	and.w	r3, r3, #31
 8001dd4:	2107      	movs	r1, #7
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	401a      	ands	r2, r3
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	0d1b      	lsrs	r3, r3, #20
 8001de2:	f003 031f 	and.w	r3, r3, #31
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dec:	431a      	orrs	r2, r3
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001df2:	bf00      	nop
 8001df4:	371c      	adds	r7, #28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f003 0318 	and.w	r3, r3, #24
 8001e22:	4908      	ldr	r1, [pc, #32]	@ (8001e44 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e24:	40d9      	lsrs	r1, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	400b      	ands	r3, r1
 8001e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e36:	bf00      	nop
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	0007ffff 	.word	0x0007ffff

08001e48 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 031f 	and.w	r3, r3, #31
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6093      	str	r3, [r2, #8]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001eb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001eb8:	d101      	bne.n	8001ebe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001edc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ee0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f08:	d101      	bne.n	8001f0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f30:	f043 0201 	orr.w	r2, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <LL_ADC_IsEnabled+0x18>
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e000      	b.n	8001f5e <LL_ADC_IsEnabled+0x1a>
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f7a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f7e:	f043 0204 	orr.w	r2, r3, #4
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d101      	bne.n	8001faa <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 0308 	and.w	r3, r3, #8
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d101      	bne.n	8001fd0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fe0:	b590      	push	{r4, r7, lr}
 8001fe2:	b089      	sub	sp, #36	@ 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e1a9      	b.n	800234e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002004:	2b00      	cmp	r3, #0
 8002006:	d109      	bne.n	800201c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff faf1 	bl	80015f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff3f 	bl	8001ea4 <LL_ADC_IsDeepPowerDownEnabled>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d004      	beq.n	8002036 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ff25 	bl	8001e80 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff5a 	bl	8001ef4 <LL_ADC_IsInternalRegulatorEnabled>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d115      	bne.n	8002072 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ff3e 	bl	8001ecc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002050:	4b9c      	ldr	r3, [pc, #624]	@ (80022c4 <HAL_ADC_Init+0x2e4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	099b      	lsrs	r3, r3, #6
 8002056:	4a9c      	ldr	r2, [pc, #624]	@ (80022c8 <HAL_ADC_Init+0x2e8>)
 8002058:	fba2 2303 	umull	r2, r3, r2, r3
 800205c:	099b      	lsrs	r3, r3, #6
 800205e:	3301      	adds	r3, #1
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002064:	e002      	b.n	800206c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	3b01      	subs	r3, #1
 800206a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f9      	bne.n	8002066 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ff3c 	bl	8001ef4 <LL_ADC_IsInternalRegulatorEnabled>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10d      	bne.n	800209e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002086:	f043 0210 	orr.w	r2, r3, #16
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002092:	f043 0201 	orr.w	r2, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff ff75 	bl	8001f92 <LL_ADC_REG_IsConversionOngoing>
 80020a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f040 8142 	bne.w	800233c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f040 813e 	bne.w	800233c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80020c8:	f043 0202 	orr.w	r2, r3, #2
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff35 	bl	8001f44 <LL_ADC_IsEnabled>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d141      	bne.n	8002164 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020e8:	d004      	beq.n	80020f4 <HAL_ADC_Init+0x114>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a77      	ldr	r2, [pc, #476]	@ (80022cc <HAL_ADC_Init+0x2ec>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d10f      	bne.n	8002114 <HAL_ADC_Init+0x134>
 80020f4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80020f8:	f7ff ff24 	bl	8001f44 <LL_ADC_IsEnabled>
 80020fc:	4604      	mov	r4, r0
 80020fe:	4873      	ldr	r0, [pc, #460]	@ (80022cc <HAL_ADC_Init+0x2ec>)
 8002100:	f7ff ff20 	bl	8001f44 <LL_ADC_IsEnabled>
 8002104:	4603      	mov	r3, r0
 8002106:	4323      	orrs	r3, r4
 8002108:	2b00      	cmp	r3, #0
 800210a:	bf0c      	ite	eq
 800210c:	2301      	moveq	r3, #1
 800210e:	2300      	movne	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	e012      	b.n	800213a <HAL_ADC_Init+0x15a>
 8002114:	486e      	ldr	r0, [pc, #440]	@ (80022d0 <HAL_ADC_Init+0x2f0>)
 8002116:	f7ff ff15 	bl	8001f44 <LL_ADC_IsEnabled>
 800211a:	4604      	mov	r4, r0
 800211c:	486d      	ldr	r0, [pc, #436]	@ (80022d4 <HAL_ADC_Init+0x2f4>)
 800211e:	f7ff ff11 	bl	8001f44 <LL_ADC_IsEnabled>
 8002122:	4603      	mov	r3, r0
 8002124:	431c      	orrs	r4, r3
 8002126:	486c      	ldr	r0, [pc, #432]	@ (80022d8 <HAL_ADC_Init+0x2f8>)
 8002128:	f7ff ff0c 	bl	8001f44 <LL_ADC_IsEnabled>
 800212c:	4603      	mov	r3, r0
 800212e:	4323      	orrs	r3, r4
 8002130:	2b00      	cmp	r3, #0
 8002132:	bf0c      	ite	eq
 8002134:	2301      	moveq	r3, #1
 8002136:	2300      	movne	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d012      	beq.n	8002164 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002146:	d004      	beq.n	8002152 <HAL_ADC_Init+0x172>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a5f      	ldr	r2, [pc, #380]	@ (80022cc <HAL_ADC_Init+0x2ec>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d101      	bne.n	8002156 <HAL_ADC_Init+0x176>
 8002152:	4a62      	ldr	r2, [pc, #392]	@ (80022dc <HAL_ADC_Init+0x2fc>)
 8002154:	e000      	b.n	8002158 <HAL_ADC_Init+0x178>
 8002156:	4a62      	ldr	r2, [pc, #392]	@ (80022e0 <HAL_ADC_Init+0x300>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	4619      	mov	r1, r3
 800215e:	4610      	mov	r0, r2
 8002160:	f7ff fcfe 	bl	8001b60 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	7f5b      	ldrb	r3, [r3, #29]
 8002168:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800216e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002174:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800217a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002182:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800218e:	2b01      	cmp	r3, #1
 8002190:	d106      	bne.n	80021a0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002196:	3b01      	subs	r3, #1
 8002198:	045b      	lsls	r3, r3, #17
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d009      	beq.n	80021bc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ac:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	4b48      	ldr	r3, [pc, #288]	@ (80022e4 <HAL_ADC_Init+0x304>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	69b9      	ldr	r1, [r7, #24]
 80021cc:	430b      	orrs	r3, r1
 80021ce:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fee4 	bl	8001fb8 <LL_ADC_INJ_IsConversionOngoing>
 80021f0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d17f      	bne.n	80022f8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d17c      	bne.n	80022f8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002202:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800220a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800221a:	f023 0302 	bic.w	r3, r3, #2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	69b9      	ldr	r1, [r7, #24]
 8002224:	430b      	orrs	r3, r1
 8002226:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d017      	beq.n	8002260 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691a      	ldr	r2, [r3, #16]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800223e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002248:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800224c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6911      	ldr	r1, [r2, #16]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	430b      	orrs	r3, r1
 800225a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800225e:	e013      	b.n	8002288 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691a      	ldr	r2, [r3, #16]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800226e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002280:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002284:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800228e:	2b01      	cmp	r3, #1
 8002290:	d12a      	bne.n	80022e8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800229c:	f023 0304 	bic.w	r3, r3, #4
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022a8:	4311      	orrs	r1, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80022ae:	4311      	orrs	r1, r2
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80022b4:	430a      	orrs	r2, r1
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f042 0201 	orr.w	r2, r2, #1
 80022c0:	611a      	str	r2, [r3, #16]
 80022c2:	e019      	b.n	80022f8 <HAL_ADC_Init+0x318>
 80022c4:	20000000 	.word	0x20000000
 80022c8:	053e2d63 	.word	0x053e2d63
 80022cc:	50000100 	.word	0x50000100
 80022d0:	50000400 	.word	0x50000400
 80022d4:	50000500 	.word	0x50000500
 80022d8:	50000600 	.word	0x50000600
 80022dc:	50000300 	.word	0x50000300
 80022e0:	50000700 	.word	0x50000700
 80022e4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691a      	ldr	r2, [r3, #16]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0201 	bic.w	r2, r2, #1
 80022f6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d10c      	bne.n	800231a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	f023 010f 	bic.w	r1, r3, #15
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	1e5a      	subs	r2, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	631a      	str	r2, [r3, #48]	@ 0x30
 8002318:	e007      	b.n	800232a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 020f 	bic.w	r2, r2, #15
 8002328:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232e:	f023 0303 	bic.w	r3, r3, #3
 8002332:	f043 0201 	orr.w	r2, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	65da      	str	r2, [r3, #92]	@ 0x5c
 800233a:	e007      	b.n	800234c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002340:	f043 0210 	orr.w	r2, r3, #16
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800234c:	7ffb      	ldrb	r3, [r7, #31]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3724      	adds	r7, #36	@ 0x24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd90      	pop	{r4, r7, pc}
 8002356:	bf00      	nop

08002358 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800236c:	d004      	beq.n	8002378 <HAL_ADC_Start_DMA+0x20>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a5a      	ldr	r2, [pc, #360]	@ (80024dc <HAL_ADC_Start_DMA+0x184>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d101      	bne.n	800237c <HAL_ADC_Start_DMA+0x24>
 8002378:	4b59      	ldr	r3, [pc, #356]	@ (80024e0 <HAL_ADC_Start_DMA+0x188>)
 800237a:	e000      	b.n	800237e <HAL_ADC_Start_DMA+0x26>
 800237c:	4b59      	ldr	r3, [pc, #356]	@ (80024e4 <HAL_ADC_Start_DMA+0x18c>)
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fd62 	bl	8001e48 <LL_ADC_GetMultimode>
 8002384:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fe01 	bl	8001f92 <LL_ADC_REG_IsConversionOngoing>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	f040 809b 	bne.w	80024ce <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_ADC_Start_DMA+0x4e>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e096      	b.n	80024d4 <HAL_ADC_Start_DMA+0x17c>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a4d      	ldr	r2, [pc, #308]	@ (80024e8 <HAL_ADC_Start_DMA+0x190>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d008      	beq.n	80023ca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	2b05      	cmp	r3, #5
 80023c2:	d002      	beq.n	80023ca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	2b09      	cmp	r3, #9
 80023c8:	d17a      	bne.n	80024c0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 ff60 	bl	8003290 <ADC_Enable>
 80023d0:	4603      	mov	r3, r0
 80023d2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80023d4:	7dfb      	ldrb	r3, [r7, #23]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d16d      	bne.n	80024b6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023de:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80023e2:	f023 0301 	bic.w	r3, r3, #1
 80023e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a3a      	ldr	r2, [pc, #232]	@ (80024dc <HAL_ADC_Start_DMA+0x184>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d009      	beq.n	800240c <HAL_ADC_Start_DMA+0xb4>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a3b      	ldr	r2, [pc, #236]	@ (80024ec <HAL_ADC_Start_DMA+0x194>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d002      	beq.n	8002408 <HAL_ADC_Start_DMA+0xb0>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	e003      	b.n	8002410 <HAL_ADC_Start_DMA+0xb8>
 8002408:	4b39      	ldr	r3, [pc, #228]	@ (80024f0 <HAL_ADC_Start_DMA+0x198>)
 800240a:	e001      	b.n	8002410 <HAL_ADC_Start_DMA+0xb8>
 800240c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	4293      	cmp	r3, r2
 8002416:	d002      	beq.n	800241e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d105      	bne.n	800242a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002422:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d006      	beq.n	8002444 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800243a:	f023 0206 	bic.w	r2, r3, #6
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	661a      	str	r2, [r3, #96]	@ 0x60
 8002442:	e002      	b.n	800244a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800244e:	4a29      	ldr	r2, [pc, #164]	@ (80024f4 <HAL_ADC_Start_DMA+0x19c>)
 8002450:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002456:	4a28      	ldr	r2, [pc, #160]	@ (80024f8 <HAL_ADC_Start_DMA+0x1a0>)
 8002458:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245e:	4a27      	ldr	r2, [pc, #156]	@ (80024fc <HAL_ADC_Start_DMA+0x1a4>)
 8002460:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	221c      	movs	r2, #28
 8002468:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 0210 	orr.w	r2, r2, #16
 8002480:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0201 	orr.w	r2, r2, #1
 8002490:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	3340      	adds	r3, #64	@ 0x40
 800249c:	4619      	mov	r1, r3
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f001 fb37 	bl	8003b14 <HAL_DMA_Start_IT>
 80024a6:	4603      	mov	r3, r0
 80024a8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fd5b 	bl	8001f6a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80024b4:	e00d      	b.n	80024d2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80024be:	e008      	b.n	80024d2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80024cc:	e001      	b.n	80024d2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024ce:	2302      	movs	r3, #2
 80024d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80024d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	50000100 	.word	0x50000100
 80024e0:	50000300 	.word	0x50000300
 80024e4:	50000700 	.word	0x50000700
 80024e8:	50000600 	.word	0x50000600
 80024ec:	50000500 	.word	0x50000500
 80024f0:	50000400 	.word	0x50000400
 80024f4:	080033bd 	.word	0x080033bd
 80024f8:	08003495 	.word	0x08003495
 80024fc:	080034b1 	.word	0x080034b1

08002500 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08a      	sub	sp, #40	@ 0x28
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002508:	2300      	movs	r3, #0
 800250a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002524:	d004      	beq.n	8002530 <HAL_ADC_IRQHandler+0x30>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a8e      	ldr	r2, [pc, #568]	@ (8002764 <HAL_ADC_IRQHandler+0x264>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d101      	bne.n	8002534 <HAL_ADC_IRQHandler+0x34>
 8002530:	4b8d      	ldr	r3, [pc, #564]	@ (8002768 <HAL_ADC_IRQHandler+0x268>)
 8002532:	e000      	b.n	8002536 <HAL_ADC_IRQHandler+0x36>
 8002534:	4b8d      	ldr	r3, [pc, #564]	@ (800276c <HAL_ADC_IRQHandler+0x26c>)
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fc86 	bl	8001e48 <LL_ADC_GetMultimode>
 800253c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d017      	beq.n	8002578 <HAL_ADC_IRQHandler+0x78>
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d012      	beq.n	8002578 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	2b00      	cmp	r3, #0
 800255c:	d105      	bne.n	800256a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002562:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f001 f808 	bl	8003580 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2202      	movs	r2, #2
 8002576:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	2b00      	cmp	r3, #0
 8002580:	d004      	beq.n	800258c <HAL_ADC_IRQHandler+0x8c>
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10b      	bne.n	80025a4 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 8094 	beq.w	80026c0 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 808e 	beq.w	80026c0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a8:	f003 0310 	and.w	r3, r3, #16
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fb9f 	bl	8001d04 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d072      	beq.n	80026b2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a64      	ldr	r2, [pc, #400]	@ (8002764 <HAL_ADC_IRQHandler+0x264>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d009      	beq.n	80025ea <HAL_ADC_IRQHandler+0xea>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a65      	ldr	r2, [pc, #404]	@ (8002770 <HAL_ADC_IRQHandler+0x270>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d002      	beq.n	80025e6 <HAL_ADC_IRQHandler+0xe6>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	e003      	b.n	80025ee <HAL_ADC_IRQHandler+0xee>
 80025e6:	4b63      	ldr	r3, [pc, #396]	@ (8002774 <HAL_ADC_IRQHandler+0x274>)
 80025e8:	e001      	b.n	80025ee <HAL_ADC_IRQHandler+0xee>
 80025ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d008      	beq.n	8002608 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	2b05      	cmp	r3, #5
 8002600:	d002      	beq.n	8002608 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2b09      	cmp	r3, #9
 8002606:	d104      	bne.n	8002612 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	623b      	str	r3, [r7, #32]
 8002610:	e014      	b.n	800263c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a53      	ldr	r2, [pc, #332]	@ (8002764 <HAL_ADC_IRQHandler+0x264>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d009      	beq.n	8002630 <HAL_ADC_IRQHandler+0x130>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a53      	ldr	r2, [pc, #332]	@ (8002770 <HAL_ADC_IRQHandler+0x270>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d002      	beq.n	800262c <HAL_ADC_IRQHandler+0x12c>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	e003      	b.n	8002634 <HAL_ADC_IRQHandler+0x134>
 800262c:	4b51      	ldr	r3, [pc, #324]	@ (8002774 <HAL_ADC_IRQHandler+0x274>)
 800262e:	e001      	b.n	8002634 <HAL_ADC_IRQHandler+0x134>
 8002630:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002634:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d135      	bne.n	80026b2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	2b08      	cmp	r3, #8
 8002652:	d12e      	bne.n	80026b2 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff fc9a 	bl	8001f92 <LL_ADC_REG_IsConversionOngoing>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d11a      	bne.n	800269a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 020c 	bic.w	r2, r2, #12
 8002672:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002678:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002684:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d112      	bne.n	80026b2 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002690:	f043 0201 	orr.w	r2, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002698:	e00b      	b.n	80026b2 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269e:	f043 0210 	orr.w	r2, r3, #16
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026aa:	f043 0201 	orr.w	r2, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f984 	bl	80029c0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	220c      	movs	r2, #12
 80026be:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d004      	beq.n	80026d4 <HAL_ADC_IRQHandler+0x1d4>
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10b      	bne.n	80026ec <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 80b3 	beq.w	8002846 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 80ad 	beq.w	8002846 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f0:	f003 0310 	and.w	r3, r3, #16
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d105      	bne.n	8002704 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fb3a 	bl	8001d82 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800270e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff faf5 	bl	8001d04 <LL_ADC_REG_IsTriggerSourceSWStart>
 800271a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a10      	ldr	r2, [pc, #64]	@ (8002764 <HAL_ADC_IRQHandler+0x264>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d009      	beq.n	800273a <HAL_ADC_IRQHandler+0x23a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a11      	ldr	r2, [pc, #68]	@ (8002770 <HAL_ADC_IRQHandler+0x270>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d002      	beq.n	8002736 <HAL_ADC_IRQHandler+0x236>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	e003      	b.n	800273e <HAL_ADC_IRQHandler+0x23e>
 8002736:	4b0f      	ldr	r3, [pc, #60]	@ (8002774 <HAL_ADC_IRQHandler+0x274>)
 8002738:	e001      	b.n	800273e <HAL_ADC_IRQHandler+0x23e>
 800273a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	4293      	cmp	r3, r2
 8002744:	d008      	beq.n	8002758 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	2b06      	cmp	r3, #6
 8002750:	d002      	beq.n	8002758 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2b07      	cmp	r3, #7
 8002756:	d10f      	bne.n	8002778 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	623b      	str	r3, [r7, #32]
 8002760:	e01f      	b.n	80027a2 <HAL_ADC_IRQHandler+0x2a2>
 8002762:	bf00      	nop
 8002764:	50000100 	.word	0x50000100
 8002768:	50000300 	.word	0x50000300
 800276c:	50000700 	.word	0x50000700
 8002770:	50000500 	.word	0x50000500
 8002774:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a8b      	ldr	r2, [pc, #556]	@ (80029ac <HAL_ADC_IRQHandler+0x4ac>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d009      	beq.n	8002796 <HAL_ADC_IRQHandler+0x296>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a8a      	ldr	r2, [pc, #552]	@ (80029b0 <HAL_ADC_IRQHandler+0x4b0>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d002      	beq.n	8002792 <HAL_ADC_IRQHandler+0x292>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	e003      	b.n	800279a <HAL_ADC_IRQHandler+0x29a>
 8002792:	4b88      	ldr	r3, [pc, #544]	@ (80029b4 <HAL_ADC_IRQHandler+0x4b4>)
 8002794:	e001      	b.n	800279a <HAL_ADC_IRQHandler+0x29a>
 8002796:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800279a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d047      	beq.n	8002838 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d007      	beq.n	80027c2 <HAL_ADC_IRQHandler+0x2c2>
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d03f      	beq.n	8002838 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d13a      	bne.n	8002838 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027cc:	2b40      	cmp	r3, #64	@ 0x40
 80027ce:	d133      	bne.n	8002838 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d12e      	bne.n	8002838 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fbea 	bl	8001fb8 <LL_ADC_INJ_IsConversionOngoing>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d11a      	bne.n	8002820 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80027f8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800280a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280e:	2b00      	cmp	r3, #0
 8002810:	d112      	bne.n	8002838 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002816:	f043 0201 	orr.w	r2, r3, #1
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800281e:	e00b      	b.n	8002838 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002824:	f043 0210 	orr.w	r2, r3, #16
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002830:	f043 0201 	orr.w	r2, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 fe79 	bl	8003530 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2260      	movs	r2, #96	@ 0x60
 8002844:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800284c:	2b00      	cmp	r3, #0
 800284e:	d011      	beq.n	8002874 <HAL_ADC_IRQHandler+0x374>
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00c      	beq.n	8002874 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f8be 	bl	80029e8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2280      	movs	r2, #128	@ 0x80
 8002872:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d012      	beq.n	80028a4 <HAL_ADC_IRQHandler+0x3a4>
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00d      	beq.n	80028a4 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 fe5f 	bl	8003558 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d012      	beq.n	80028d4 <HAL_ADC_IRQHandler+0x3d4>
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00d      	beq.n	80028d4 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028bc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 fe51 	bl	800356c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f003 0310 	and.w	r3, r3, #16
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d043      	beq.n	8002966 <HAL_ADC_IRQHandler+0x466>
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	f003 0310 	and.w	r3, r3, #16
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d03e      	beq.n	8002966 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d102      	bne.n	80028f6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80028f0:	2301      	movs	r3, #1
 80028f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80028f4:	e021      	b.n	800293a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d015      	beq.n	8002928 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002904:	d004      	beq.n	8002910 <HAL_ADC_IRQHandler+0x410>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a28      	ldr	r2, [pc, #160]	@ (80029ac <HAL_ADC_IRQHandler+0x4ac>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d101      	bne.n	8002914 <HAL_ADC_IRQHandler+0x414>
 8002910:	4b29      	ldr	r3, [pc, #164]	@ (80029b8 <HAL_ADC_IRQHandler+0x4b8>)
 8002912:	e000      	b.n	8002916 <HAL_ADC_IRQHandler+0x416>
 8002914:	4b29      	ldr	r3, [pc, #164]	@ (80029bc <HAL_ADC_IRQHandler+0x4bc>)
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff faa4 	bl	8001e64 <LL_ADC_GetMultiDMATransfer>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00b      	beq.n	800293a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002922:	2301      	movs	r3, #1
 8002924:	627b      	str	r3, [r7, #36]	@ 0x24
 8002926:	e008      	b.n	800293a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002936:	2301      	movs	r3, #1
 8002938:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	2b01      	cmp	r3, #1
 800293e:	d10e      	bne.n	800295e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002944:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002950:	f043 0202 	orr.w	r2, r3, #2
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f84f 	bl	80029fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2210      	movs	r2, #16
 8002964:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800296c:	2b00      	cmp	r3, #0
 800296e:	d018      	beq.n	80029a2 <HAL_ADC_IRQHandler+0x4a2>
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002976:	2b00      	cmp	r3, #0
 8002978:	d013      	beq.n	80029a2 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800298a:	f043 0208 	orr.w	r2, r3, #8
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800299a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 fdd1 	bl	8003544 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80029a2:	bf00      	nop
 80029a4:	3728      	adds	r7, #40	@ 0x28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	50000100 	.word	0x50000100
 80029b0:	50000500 	.word	0x50000500
 80029b4:	50000400 	.word	0x50000400
 80029b8:	50000300 	.word	0x50000300
 80029bc:	50000700 	.word	0x50000700

080029c0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b0b6      	sub	sp, #216	@ 0xd8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d102      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x24>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	f000 bc13 	b.w	800325a <HAL_ADC_ConfigChannel+0x84a>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff faa6 	bl	8001f92 <LL_ADC_REG_IsConversionOngoing>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f040 83f3 	bne.w	8003234 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6818      	ldr	r0, [r3, #0]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	6859      	ldr	r1, [r3, #4]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f7ff f965 	bl	8001d2a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff fa94 	bl	8001f92 <LL_ADC_REG_IsConversionOngoing>
 8002a6a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff faa0 	bl	8001fb8 <LL_ADC_INJ_IsConversionOngoing>
 8002a78:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f040 81d9 	bne.w	8002e38 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f040 81d4 	bne.w	8002e38 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a98:	d10f      	bne.n	8002aba <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6818      	ldr	r0, [r3, #0]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f7ff f97f 	bl	8001da8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff f913 	bl	8001cde <LL_ADC_SetSamplingTimeCommonConfig>
 8002ab8:	e00e      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	6819      	ldr	r1, [r3, #0]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	f7ff f96e 	bl	8001da8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff f903 	bl	8001cde <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	695a      	ldr	r2, [r3, #20]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	08db      	lsrs	r3, r3, #3
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d022      	beq.n	8002b40 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	6919      	ldr	r1, [r3, #16]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b0a:	f7ff f85d 	bl	8001bc8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	6919      	ldr	r1, [r3, #16]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f7ff f8a9 	bl	8001c72 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6818      	ldr	r0, [r3, #0]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d102      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x126>
 8002b30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b34:	e000      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x128>
 8002b36:	2300      	movs	r3, #0
 8002b38:	461a      	mov	r2, r3
 8002b3a:	f7ff f8b5 	bl	8001ca8 <LL_ADC_SetOffsetSaturation>
 8002b3e:	e17b      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2100      	movs	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff f862 	bl	8001c10 <LL_ADC_GetOffsetChannel>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10a      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x15c>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff f857 	bl	8001c10 <LL_ADC_GetOffsetChannel>
 8002b62:	4603      	mov	r3, r0
 8002b64:	0e9b      	lsrs	r3, r3, #26
 8002b66:	f003 021f 	and.w	r2, r3, #31
 8002b6a:	e01e      	b.n	8002baa <HAL_ADC_ConfigChannel+0x19a>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2100      	movs	r1, #0
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff f84c 	bl	8001c10 <LL_ADC_GetOffsetChannel>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b82:	fa93 f3a3 	rbit	r3, r3
 8002b86:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002b9a:	2320      	movs	r3, #32
 8002b9c:	e004      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002b9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d105      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x1b2>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	0e9b      	lsrs	r3, r3, #26
 8002bbc:	f003 031f 	and.w	r3, r3, #31
 8002bc0:	e018      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x1e4>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002bd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002bde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002be6:	2320      	movs	r3, #32
 8002be8:	e004      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002bea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002bee:	fab3 f383 	clz	r3, r3
 8002bf2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d106      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2100      	movs	r1, #0
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff f81b 	bl	8001c3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fe ffff 	bl	8001c10 <LL_ADC_GetOffsetChannel>
 8002c12:	4603      	mov	r3, r0
 8002c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10a      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x222>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2101      	movs	r1, #1
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe fff4 	bl	8001c10 <LL_ADC_GetOffsetChannel>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	0e9b      	lsrs	r3, r3, #26
 8002c2c:	f003 021f 	and.w	r2, r3, #31
 8002c30:	e01e      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x260>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2101      	movs	r1, #1
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fe ffe9 	bl	8001c10 <LL_ADC_GetOffsetChannel>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c48:	fa93 f3a3 	rbit	r3, r3
 8002c4c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002c50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002c58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002c60:	2320      	movs	r3, #32
 8002c62:	e004      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002c64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c68:	fab3 f383 	clz	r3, r3
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d105      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x278>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	0e9b      	lsrs	r3, r3, #26
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	e018      	b.n	8002cba <HAL_ADC_ConfigChannel+0x2aa>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c94:	fa93 f3a3 	rbit	r3, r3
 8002c98:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002c9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ca0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002ca4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002cac:	2320      	movs	r3, #32
 8002cae:	e004      	b.n	8002cba <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002cb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002cb4:	fab3 f383 	clz	r3, r3
 8002cb8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d106      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe ffb8 	bl	8001c3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2102      	movs	r1, #2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fe ff9c 	bl	8001c10 <LL_ADC_GetOffsetChannel>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10a      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x2e8>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2102      	movs	r1, #2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fe ff91 	bl	8001c10 <LL_ADC_GetOffsetChannel>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	0e9b      	lsrs	r3, r3, #26
 8002cf2:	f003 021f 	and.w	r2, r3, #31
 8002cf6:	e01e      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x326>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2102      	movs	r1, #2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe ff86 	bl	8001c10 <LL_ADC_GetOffsetChannel>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d0e:	fa93 f3a3 	rbit	r3, r3
 8002d12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002d16:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002d1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002d26:	2320      	movs	r3, #32
 8002d28:	e004      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002d2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d2e:	fab3 f383 	clz	r3, r3
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d105      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x33e>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	0e9b      	lsrs	r3, r3, #26
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	e016      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x36c>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d5a:	fa93 f3a3 	rbit	r3, r3
 8002d5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002d60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002d66:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002d6e:	2320      	movs	r3, #32
 8002d70:	e004      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002d72:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d106      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2200      	movs	r2, #0
 8002d86:	2102      	movs	r1, #2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fe ff57 	bl	8001c3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2103      	movs	r1, #3
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fe ff3b 	bl	8001c10 <LL_ADC_GetOffsetChannel>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10a      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x3aa>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2103      	movs	r1, #3
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fe ff30 	bl	8001c10 <LL_ADC_GetOffsetChannel>
 8002db0:	4603      	mov	r3, r0
 8002db2:	0e9b      	lsrs	r3, r3, #26
 8002db4:	f003 021f 	and.w	r2, r3, #31
 8002db8:	e017      	b.n	8002dea <HAL_ADC_ConfigChannel+0x3da>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2103      	movs	r1, #3
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fe ff25 	bl	8001c10 <LL_ADC_GetOffsetChannel>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dcc:	fa93 f3a3 	rbit	r3, r3
 8002dd0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002dd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002dd4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002dd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002ddc:	2320      	movs	r3, #32
 8002dde:	e003      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002de0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002de2:	fab3 f383 	clz	r3, r3
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d105      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x3f2>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	0e9b      	lsrs	r3, r3, #26
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	e011      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x416>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002e10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e12:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002e14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002e1a:	2320      	movs	r3, #32
 8002e1c:	e003      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002e1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e20:	fab3 f383 	clz	r3, r3
 8002e24:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d106      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2103      	movs	r1, #3
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe ff02 	bl	8001c3c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff f881 	bl	8001f44 <LL_ADC_IsEnabled>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f040 813d 	bne.w	80030c4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6819      	ldr	r1, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	461a      	mov	r2, r3
 8002e58:	f7fe ffd2 	bl	8001e00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	4aa2      	ldr	r2, [pc, #648]	@ (80030ec <HAL_ADC_ConfigChannel+0x6dc>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	f040 812e 	bne.w	80030c4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10b      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x480>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	0e9b      	lsrs	r3, r3, #26
 8002e7e:	3301      	adds	r3, #1
 8002e80:	f003 031f 	and.w	r3, r3, #31
 8002e84:	2b09      	cmp	r3, #9
 8002e86:	bf94      	ite	ls
 8002e88:	2301      	movls	r3, #1
 8002e8a:	2300      	movhi	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	e019      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x4b4>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e98:	fa93 f3a3 	rbit	r3, r3
 8002e9c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002e9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ea0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002ea2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002ea8:	2320      	movs	r3, #32
 8002eaa:	e003      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002eac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002eae:	fab3 f383 	clz	r3, r3
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	f003 031f 	and.w	r3, r3, #31
 8002eba:	2b09      	cmp	r3, #9
 8002ebc:	bf94      	ite	ls
 8002ebe:	2301      	movls	r3, #1
 8002ec0:	2300      	movhi	r3, #0
 8002ec2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d079      	beq.n	8002fbc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d107      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x4d4>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	0e9b      	lsrs	r3, r3, #26
 8002eda:	3301      	adds	r3, #1
 8002edc:	069b      	lsls	r3, r3, #26
 8002ede:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ee2:	e015      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x500>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002ef2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ef4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002efc:	2320      	movs	r3, #32
 8002efe:	e003      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f02:	fab3 f383 	clz	r3, r3
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	3301      	adds	r3, #1
 8002f0a:	069b      	lsls	r3, r3, #26
 8002f0c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d109      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x520>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	0e9b      	lsrs	r3, r3, #26
 8002f22:	3301      	adds	r3, #1
 8002f24:	f003 031f 	and.w	r3, r3, #31
 8002f28:	2101      	movs	r1, #1
 8002f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2e:	e017      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x550>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f38:	fa93 f3a3 	rbit	r3, r3
 8002f3c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f40:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002f42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002f48:	2320      	movs	r3, #32
 8002f4a:	e003      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002f4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f4e:	fab3 f383 	clz	r3, r3
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	3301      	adds	r3, #1
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f60:	ea42 0103 	orr.w	r1, r2, r3
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10a      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x576>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	0e9b      	lsrs	r3, r3, #26
 8002f76:	3301      	adds	r3, #1
 8002f78:	f003 021f 	and.w	r2, r3, #31
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4413      	add	r3, r2
 8002f82:	051b      	lsls	r3, r3, #20
 8002f84:	e018      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x5a8>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f8e:	fa93 f3a3 	rbit	r3, r3
 8002f92:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002f9e:	2320      	movs	r3, #32
 8002fa0:	e003      	b.n	8002faa <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fa4:	fab3 f383 	clz	r3, r3
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	3301      	adds	r3, #1
 8002fac:	f003 021f 	and.w	r2, r3, #31
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	4413      	add	r3, r2
 8002fb6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	e07e      	b.n	80030ba <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d107      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0x5c8>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	0e9b      	lsrs	r3, r3, #26
 8002fce:	3301      	adds	r3, #1
 8002fd0:	069b      	lsls	r3, r3, #26
 8002fd2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fd6:	e015      	b.n	8003004 <HAL_ADC_ConfigChannel+0x5f4>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fe0:	fa93 f3a3 	rbit	r3, r3
 8002fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002ff0:	2320      	movs	r3, #32
 8002ff2:	e003      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff6:	fab3 f383 	clz	r3, r3
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	069b      	lsls	r3, r3, #26
 8003000:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800300c:	2b00      	cmp	r3, #0
 800300e:	d109      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x614>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	0e9b      	lsrs	r3, r3, #26
 8003016:	3301      	adds	r3, #1
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	2101      	movs	r1, #1
 800301e:	fa01 f303 	lsl.w	r3, r1, r3
 8003022:	e017      	b.n	8003054 <HAL_ADC_ConfigChannel+0x644>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	fa93 f3a3 	rbit	r3, r3
 8003030:	61fb      	str	r3, [r7, #28]
  return result;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800303c:	2320      	movs	r3, #32
 800303e:	e003      	b.n	8003048 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003042:	fab3 f383 	clz	r3, r3
 8003046:	b2db      	uxtb	r3, r3
 8003048:	3301      	adds	r3, #1
 800304a:	f003 031f 	and.w	r3, r3, #31
 800304e:	2101      	movs	r1, #1
 8003050:	fa01 f303 	lsl.w	r3, r1, r3
 8003054:	ea42 0103 	orr.w	r1, r2, r3
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10d      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x670>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	0e9b      	lsrs	r3, r3, #26
 800306a:	3301      	adds	r3, #1
 800306c:	f003 021f 	and.w	r2, r3, #31
 8003070:	4613      	mov	r3, r2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	4413      	add	r3, r2
 8003076:	3b1e      	subs	r3, #30
 8003078:	051b      	lsls	r3, r3, #20
 800307a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800307e:	e01b      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x6a8>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	fa93 f3a3 	rbit	r3, r3
 800308c:	613b      	str	r3, [r7, #16]
  return result;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003098:	2320      	movs	r3, #32
 800309a:	e003      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	3301      	adds	r3, #1
 80030a6:	f003 021f 	and.w	r2, r3, #31
 80030aa:	4613      	mov	r3, r2
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	4413      	add	r3, r2
 80030b0:	3b1e      	subs	r3, #30
 80030b2:	051b      	lsls	r3, r3, #20
 80030b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030b8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030be:	4619      	mov	r1, r3
 80030c0:	f7fe fe72 	bl	8001da8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	4b09      	ldr	r3, [pc, #36]	@ (80030f0 <HAL_ADC_ConfigChannel+0x6e0>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 80be 	beq.w	800324e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030da:	d004      	beq.n	80030e6 <HAL_ADC_ConfigChannel+0x6d6>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a04      	ldr	r2, [pc, #16]	@ (80030f4 <HAL_ADC_ConfigChannel+0x6e4>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d10a      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x6ec>
 80030e6:	4b04      	ldr	r3, [pc, #16]	@ (80030f8 <HAL_ADC_ConfigChannel+0x6e8>)
 80030e8:	e009      	b.n	80030fe <HAL_ADC_ConfigChannel+0x6ee>
 80030ea:	bf00      	nop
 80030ec:	407f0000 	.word	0x407f0000
 80030f0:	80080000 	.word	0x80080000
 80030f4:	50000100 	.word	0x50000100
 80030f8:	50000300 	.word	0x50000300
 80030fc:	4b59      	ldr	r3, [pc, #356]	@ (8003264 <HAL_ADC_ConfigChannel+0x854>)
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe fd54 	bl	8001bac <LL_ADC_GetCommonPathInternalCh>
 8003104:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a56      	ldr	r2, [pc, #344]	@ (8003268 <HAL_ADC_ConfigChannel+0x858>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d004      	beq.n	800311c <HAL_ADC_ConfigChannel+0x70c>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a55      	ldr	r2, [pc, #340]	@ (800326c <HAL_ADC_ConfigChannel+0x85c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d13a      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800311c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003120:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d134      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003130:	d005      	beq.n	800313e <HAL_ADC_ConfigChannel+0x72e>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a4e      	ldr	r2, [pc, #312]	@ (8003270 <HAL_ADC_ConfigChannel+0x860>)
 8003138:	4293      	cmp	r3, r2
 800313a:	f040 8085 	bne.w	8003248 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003146:	d004      	beq.n	8003152 <HAL_ADC_ConfigChannel+0x742>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a49      	ldr	r2, [pc, #292]	@ (8003274 <HAL_ADC_ConfigChannel+0x864>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d101      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x746>
 8003152:	4a49      	ldr	r2, [pc, #292]	@ (8003278 <HAL_ADC_ConfigChannel+0x868>)
 8003154:	e000      	b.n	8003158 <HAL_ADC_ConfigChannel+0x748>
 8003156:	4a43      	ldr	r2, [pc, #268]	@ (8003264 <HAL_ADC_ConfigChannel+0x854>)
 8003158:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800315c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003160:	4619      	mov	r1, r3
 8003162:	4610      	mov	r0, r2
 8003164:	f7fe fd0f 	bl	8001b86 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003168:	4b44      	ldr	r3, [pc, #272]	@ (800327c <HAL_ADC_ConfigChannel+0x86c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	099b      	lsrs	r3, r3, #6
 800316e:	4a44      	ldr	r2, [pc, #272]	@ (8003280 <HAL_ADC_ConfigChannel+0x870>)
 8003170:	fba2 2303 	umull	r2, r3, r2, r3
 8003174:	099b      	lsrs	r3, r3, #6
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	4613      	mov	r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003182:	e002      	b.n	800318a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	3b01      	subs	r3, #1
 8003188:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1f9      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003190:	e05a      	b.n	8003248 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a3b      	ldr	r2, [pc, #236]	@ (8003284 <HAL_ADC_ConfigChannel+0x874>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d125      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800319c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d11f      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a31      	ldr	r2, [pc, #196]	@ (8003274 <HAL_ADC_ConfigChannel+0x864>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d104      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x7ac>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a34      	ldr	r2, [pc, #208]	@ (8003288 <HAL_ADC_ConfigChannel+0x878>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d047      	beq.n	800324c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031c4:	d004      	beq.n	80031d0 <HAL_ADC_ConfigChannel+0x7c0>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a2a      	ldr	r2, [pc, #168]	@ (8003274 <HAL_ADC_ConfigChannel+0x864>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d101      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x7c4>
 80031d0:	4a29      	ldr	r2, [pc, #164]	@ (8003278 <HAL_ADC_ConfigChannel+0x868>)
 80031d2:	e000      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x7c6>
 80031d4:	4a23      	ldr	r2, [pc, #140]	@ (8003264 <HAL_ADC_ConfigChannel+0x854>)
 80031d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031de:	4619      	mov	r1, r3
 80031e0:	4610      	mov	r0, r2
 80031e2:	f7fe fcd0 	bl	8001b86 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031e6:	e031      	b.n	800324c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a27      	ldr	r2, [pc, #156]	@ (800328c <HAL_ADC_ConfigChannel+0x87c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d12d      	bne.n	800324e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d127      	bne.n	800324e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1c      	ldr	r2, [pc, #112]	@ (8003274 <HAL_ADC_ConfigChannel+0x864>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d022      	beq.n	800324e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003210:	d004      	beq.n	800321c <HAL_ADC_ConfigChannel+0x80c>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a17      	ldr	r2, [pc, #92]	@ (8003274 <HAL_ADC_ConfigChannel+0x864>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d101      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x810>
 800321c:	4a16      	ldr	r2, [pc, #88]	@ (8003278 <HAL_ADC_ConfigChannel+0x868>)
 800321e:	e000      	b.n	8003222 <HAL_ADC_ConfigChannel+0x812>
 8003220:	4a10      	ldr	r2, [pc, #64]	@ (8003264 <HAL_ADC_ConfigChannel+0x854>)
 8003222:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003226:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800322a:	4619      	mov	r1, r3
 800322c:	4610      	mov	r0, r2
 800322e:	f7fe fcaa 	bl	8001b86 <LL_ADC_SetCommonPathInternalCh>
 8003232:	e00c      	b.n	800324e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003238:	f043 0220 	orr.w	r2, r3, #32
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003246:	e002      	b.n	800324e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003248:	bf00      	nop
 800324a:	e000      	b.n	800324e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800324c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003256:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800325a:	4618      	mov	r0, r3
 800325c:	37d8      	adds	r7, #216	@ 0xd8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	50000700 	.word	0x50000700
 8003268:	c3210000 	.word	0xc3210000
 800326c:	90c00010 	.word	0x90c00010
 8003270:	50000600 	.word	0x50000600
 8003274:	50000100 	.word	0x50000100
 8003278:	50000300 	.word	0x50000300
 800327c:	20000000 	.word	0x20000000
 8003280:	053e2d63 	.word	0x053e2d63
 8003284:	c7520000 	.word	0xc7520000
 8003288:	50000500 	.word	0x50000500
 800328c:	cb840000 	.word	0xcb840000

08003290 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003298:	2300      	movs	r3, #0
 800329a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fe fe4f 	bl	8001f44 <LL_ADC_IsEnabled>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d176      	bne.n	800339a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	4b3c      	ldr	r3, [pc, #240]	@ (80033a4 <ADC_Enable+0x114>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00d      	beq.n	80032d6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032be:	f043 0210 	orr.w	r2, r3, #16
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ca:	f043 0201 	orr.w	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e062      	b.n	800339c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fe fe1e 	bl	8001f1c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032e8:	d004      	beq.n	80032f4 <ADC_Enable+0x64>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a2e      	ldr	r2, [pc, #184]	@ (80033a8 <ADC_Enable+0x118>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d101      	bne.n	80032f8 <ADC_Enable+0x68>
 80032f4:	4b2d      	ldr	r3, [pc, #180]	@ (80033ac <ADC_Enable+0x11c>)
 80032f6:	e000      	b.n	80032fa <ADC_Enable+0x6a>
 80032f8:	4b2d      	ldr	r3, [pc, #180]	@ (80033b0 <ADC_Enable+0x120>)
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fe fc56 	bl	8001bac <LL_ADC_GetCommonPathInternalCh>
 8003300:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003302:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003306:	2b00      	cmp	r3, #0
 8003308:	d013      	beq.n	8003332 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800330a:	4b2a      	ldr	r3, [pc, #168]	@ (80033b4 <ADC_Enable+0x124>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	099b      	lsrs	r3, r3, #6
 8003310:	4a29      	ldr	r2, [pc, #164]	@ (80033b8 <ADC_Enable+0x128>)
 8003312:	fba2 2303 	umull	r2, r3, r2, r3
 8003316:	099b      	lsrs	r3, r3, #6
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	4613      	mov	r3, r2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	4413      	add	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003324:	e002      	b.n	800332c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	3b01      	subs	r3, #1
 800332a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f9      	bne.n	8003326 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003332:	f7fe fc09 	bl	8001b48 <HAL_GetTick>
 8003336:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003338:	e028      	b.n	800338c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7fe fe00 	bl	8001f44 <LL_ADC_IsEnabled>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d104      	bne.n	8003354 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f7fe fde4 	bl	8001f1c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003354:	f7fe fbf8 	bl	8001b48 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d914      	bls.n	800338c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b01      	cmp	r3, #1
 800336e:	d00d      	beq.n	800338c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003374:	f043 0210 	orr.w	r2, r3, #16
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003380:	f043 0201 	orr.w	r2, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e007      	b.n	800339c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b01      	cmp	r3, #1
 8003398:	d1cf      	bne.n	800333a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	8000003f 	.word	0x8000003f
 80033a8:	50000100 	.word	0x50000100
 80033ac:	50000300 	.word	0x50000300
 80033b0:	50000700 	.word	0x50000700
 80033b4:	20000000 	.word	0x20000000
 80033b8:	053e2d63 	.word	0x053e2d63

080033bc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ce:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d14b      	bne.n	800346e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033da:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d021      	beq.n	8003434 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe fc85 	bl	8001d04 <LL_ADC_REG_IsTriggerSourceSWStart>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d032      	beq.n	8003466 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d12b      	bne.n	8003466 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003412:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d11f      	bne.n	8003466 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342a:	f043 0201 	orr.w	r2, r3, #1
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003432:	e018      	b.n	8003466 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d111      	bne.n	8003466 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003446:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003452:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d105      	bne.n	8003466 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345e:	f043 0201 	orr.w	r2, r3, #1
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f7ff faaa 	bl	80029c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800346c:	e00e      	b.n	800348c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003472:	f003 0310 	and.w	r3, r3, #16
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f7ff fabe 	bl	80029fc <HAL_ADC_ErrorCallback>
}
 8003480:	e004      	b.n	800348c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	4798      	blx	r3
}
 800348c:	bf00      	nop
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f7ff fa96 	bl	80029d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034a8:	bf00      	nop
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ce:	f043 0204 	orr.w	r2, r3, #4
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f7ff fa90 	bl	80029fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034dc:	bf00      	nop
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <LL_ADC_IsEnabled>:
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <LL_ADC_IsEnabled+0x18>
 80034f8:	2301      	movs	r3, #1
 80034fa:	e000      	b.n	80034fe <LL_ADC_IsEnabled+0x1a>
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <LL_ADC_REG_IsConversionOngoing>:
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b04      	cmp	r3, #4
 800351c:	d101      	bne.n	8003522 <LL_ADC_REG_IsConversionOngoing+0x18>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003594:	b590      	push	{r4, r7, lr}
 8003596:	b0a1      	sub	sp, #132	@ 0x84
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e0e7      	b.n	8003782 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80035ba:	2300      	movs	r3, #0
 80035bc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80035be:	2300      	movs	r3, #0
 80035c0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035ca:	d102      	bne.n	80035d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80035cc:	4b6f      	ldr	r3, [pc, #444]	@ (800378c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035ce:	60bb      	str	r3, [r7, #8]
 80035d0:	e009      	b.n	80035e6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a6e      	ldr	r2, [pc, #440]	@ (8003790 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d102      	bne.n	80035e2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80035dc:	4b6d      	ldr	r3, [pc, #436]	@ (8003794 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80035de:	60bb      	str	r3, [r7, #8]
 80035e0:	e001      	b.n	80035e6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80035e2:	2300      	movs	r3, #0
 80035e4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10b      	bne.n	8003604 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f0:	f043 0220 	orr.w	r2, r3, #32
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0be      	b.n	8003782 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff ff7f 	bl	800350a <LL_ADC_REG_IsConversionOngoing>
 800360c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff ff79 	bl	800350a <LL_ADC_REG_IsConversionOngoing>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	f040 80a0 	bne.w	8003760 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003620:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003622:	2b00      	cmp	r3, #0
 8003624:	f040 809c 	bne.w	8003760 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003630:	d004      	beq.n	800363c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a55      	ldr	r2, [pc, #340]	@ (800378c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d101      	bne.n	8003640 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800363c:	4b56      	ldr	r3, [pc, #344]	@ (8003798 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800363e:	e000      	b.n	8003642 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003640:	4b56      	ldr	r3, [pc, #344]	@ (800379c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003642:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d04b      	beq.n	80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800364c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	6859      	ldr	r1, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800365e:	035b      	lsls	r3, r3, #13
 8003660:	430b      	orrs	r3, r1
 8003662:	431a      	orrs	r2, r3
 8003664:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003666:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003670:	d004      	beq.n	800367c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a45      	ldr	r2, [pc, #276]	@ (800378c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d10f      	bne.n	800369c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800367c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003680:	f7ff ff30 	bl	80034e4 <LL_ADC_IsEnabled>
 8003684:	4604      	mov	r4, r0
 8003686:	4841      	ldr	r0, [pc, #260]	@ (800378c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003688:	f7ff ff2c 	bl	80034e4 <LL_ADC_IsEnabled>
 800368c:	4603      	mov	r3, r0
 800368e:	4323      	orrs	r3, r4
 8003690:	2b00      	cmp	r3, #0
 8003692:	bf0c      	ite	eq
 8003694:	2301      	moveq	r3, #1
 8003696:	2300      	movne	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	e012      	b.n	80036c2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800369c:	483c      	ldr	r0, [pc, #240]	@ (8003790 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800369e:	f7ff ff21 	bl	80034e4 <LL_ADC_IsEnabled>
 80036a2:	4604      	mov	r4, r0
 80036a4:	483b      	ldr	r0, [pc, #236]	@ (8003794 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80036a6:	f7ff ff1d 	bl	80034e4 <LL_ADC_IsEnabled>
 80036aa:	4603      	mov	r3, r0
 80036ac:	431c      	orrs	r4, r3
 80036ae:	483c      	ldr	r0, [pc, #240]	@ (80037a0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80036b0:	f7ff ff18 	bl	80034e4 <LL_ADC_IsEnabled>
 80036b4:	4603      	mov	r3, r0
 80036b6:	4323      	orrs	r3, r4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	bf0c      	ite	eq
 80036bc:	2301      	moveq	r3, #1
 80036be:	2300      	movne	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d056      	beq.n	8003774 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80036c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80036ce:	f023 030f 	bic.w	r3, r3, #15
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	6811      	ldr	r1, [r2, #0]
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	6892      	ldr	r2, [r2, #8]
 80036da:	430a      	orrs	r2, r1
 80036dc:	431a      	orrs	r2, r3
 80036de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036e0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036e2:	e047      	b.n	8003774 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80036e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036ee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036f8:	d004      	beq.n	8003704 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a23      	ldr	r2, [pc, #140]	@ (800378c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d10f      	bne.n	8003724 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003704:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003708:	f7ff feec 	bl	80034e4 <LL_ADC_IsEnabled>
 800370c:	4604      	mov	r4, r0
 800370e:	481f      	ldr	r0, [pc, #124]	@ (800378c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003710:	f7ff fee8 	bl	80034e4 <LL_ADC_IsEnabled>
 8003714:	4603      	mov	r3, r0
 8003716:	4323      	orrs	r3, r4
 8003718:	2b00      	cmp	r3, #0
 800371a:	bf0c      	ite	eq
 800371c:	2301      	moveq	r3, #1
 800371e:	2300      	movne	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	e012      	b.n	800374a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003724:	481a      	ldr	r0, [pc, #104]	@ (8003790 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003726:	f7ff fedd 	bl	80034e4 <LL_ADC_IsEnabled>
 800372a:	4604      	mov	r4, r0
 800372c:	4819      	ldr	r0, [pc, #100]	@ (8003794 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800372e:	f7ff fed9 	bl	80034e4 <LL_ADC_IsEnabled>
 8003732:	4603      	mov	r3, r0
 8003734:	431c      	orrs	r4, r3
 8003736:	481a      	ldr	r0, [pc, #104]	@ (80037a0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003738:	f7ff fed4 	bl	80034e4 <LL_ADC_IsEnabled>
 800373c:	4603      	mov	r3, r0
 800373e:	4323      	orrs	r3, r4
 8003740:	2b00      	cmp	r3, #0
 8003742:	bf0c      	ite	eq
 8003744:	2301      	moveq	r3, #1
 8003746:	2300      	movne	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d012      	beq.n	8003774 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800374e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003756:	f023 030f 	bic.w	r3, r3, #15
 800375a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800375c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800375e:	e009      	b.n	8003774 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003764:	f043 0220 	orr.w	r2, r3, #32
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003772:	e000      	b.n	8003776 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003774:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800377e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003782:	4618      	mov	r0, r3
 8003784:	3784      	adds	r7, #132	@ 0x84
 8003786:	46bd      	mov	sp, r7
 8003788:	bd90      	pop	{r4, r7, pc}
 800378a:	bf00      	nop
 800378c:	50000100 	.word	0x50000100
 8003790:	50000400 	.word	0x50000400
 8003794:	50000500 	.word	0x50000500
 8003798:	50000300 	.word	0x50000300
 800379c:	50000700 	.word	0x50000700
 80037a0:	50000600 	.word	0x50000600

080037a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037b4:	4b0c      	ldr	r3, [pc, #48]	@ (80037e8 <__NVIC_SetPriorityGrouping+0x44>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037c0:	4013      	ands	r3, r2
 80037c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037d6:	4a04      	ldr	r2, [pc, #16]	@ (80037e8 <__NVIC_SetPriorityGrouping+0x44>)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	60d3      	str	r3, [r2, #12]
}
 80037dc:	bf00      	nop
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f0:	4b04      	ldr	r3, [pc, #16]	@ (8003804 <__NVIC_GetPriorityGrouping+0x18>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	0a1b      	lsrs	r3, r3, #8
 80037f6:	f003 0307 	and.w	r3, r3, #7
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003816:	2b00      	cmp	r3, #0
 8003818:	db0b      	blt.n	8003832 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	f003 021f 	and.w	r2, r3, #31
 8003820:	4907      	ldr	r1, [pc, #28]	@ (8003840 <__NVIC_EnableIRQ+0x38>)
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	2001      	movs	r0, #1
 800382a:	fa00 f202 	lsl.w	r2, r0, r2
 800382e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	e000e100 	.word	0xe000e100

08003844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	6039      	str	r1, [r7, #0]
 800384e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003854:	2b00      	cmp	r3, #0
 8003856:	db0a      	blt.n	800386e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	b2da      	uxtb	r2, r3
 800385c:	490c      	ldr	r1, [pc, #48]	@ (8003890 <__NVIC_SetPriority+0x4c>)
 800385e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003862:	0112      	lsls	r2, r2, #4
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	440b      	add	r3, r1
 8003868:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800386c:	e00a      	b.n	8003884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	4908      	ldr	r1, [pc, #32]	@ (8003894 <__NVIC_SetPriority+0x50>)
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	3b04      	subs	r3, #4
 800387c:	0112      	lsls	r2, r2, #4
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	440b      	add	r3, r1
 8003882:	761a      	strb	r2, [r3, #24]
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	e000e100 	.word	0xe000e100
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003898:	b480      	push	{r7}
 800389a:	b089      	sub	sp, #36	@ 0x24
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f1c3 0307 	rsb	r3, r3, #7
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	bf28      	it	cs
 80038b6:	2304      	movcs	r3, #4
 80038b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	3304      	adds	r3, #4
 80038be:	2b06      	cmp	r3, #6
 80038c0:	d902      	bls.n	80038c8 <NVIC_EncodePriority+0x30>
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3b03      	subs	r3, #3
 80038c6:	e000      	b.n	80038ca <NVIC_EncodePriority+0x32>
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038cc:	f04f 32ff 	mov.w	r2, #4294967295
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43da      	mvns	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	401a      	ands	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e0:	f04f 31ff 	mov.w	r1, #4294967295
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ea:	43d9      	mvns	r1, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f0:	4313      	orrs	r3, r2
         );
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3724      	adds	r7, #36	@ 0x24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
	...

08003900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3b01      	subs	r3, #1
 800390c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003910:	d301      	bcc.n	8003916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003912:	2301      	movs	r3, #1
 8003914:	e00f      	b.n	8003936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003916:	4a0a      	ldr	r2, [pc, #40]	@ (8003940 <SysTick_Config+0x40>)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3b01      	subs	r3, #1
 800391c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800391e:	210f      	movs	r1, #15
 8003920:	f04f 30ff 	mov.w	r0, #4294967295
 8003924:	f7ff ff8e 	bl	8003844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003928:	4b05      	ldr	r3, [pc, #20]	@ (8003940 <SysTick_Config+0x40>)
 800392a:	2200      	movs	r2, #0
 800392c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800392e:	4b04      	ldr	r3, [pc, #16]	@ (8003940 <SysTick_Config+0x40>)
 8003930:	2207      	movs	r2, #7
 8003932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	e000e010 	.word	0xe000e010

08003944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff ff29 	bl	80037a4 <__NVIC_SetPriorityGrouping>
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b086      	sub	sp, #24
 800395e:	af00      	add	r7, sp, #0
 8003960:	4603      	mov	r3, r0
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
 8003966:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003968:	f7ff ff40 	bl	80037ec <__NVIC_GetPriorityGrouping>
 800396c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	68b9      	ldr	r1, [r7, #8]
 8003972:	6978      	ldr	r0, [r7, #20]
 8003974:	f7ff ff90 	bl	8003898 <NVIC_EncodePriority>
 8003978:	4602      	mov	r2, r0
 800397a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800397e:	4611      	mov	r1, r2
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff ff5f 	bl	8003844 <__NVIC_SetPriority>
}
 8003986:	bf00      	nop
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	4603      	mov	r3, r0
 8003996:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff ff33 	bl	8003808 <__NVIC_EnableIRQ>
}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b082      	sub	sp, #8
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff ffa4 	bl	8003900 <SysTick_Config>
 80039b8:	4603      	mov	r3, r0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e08d      	b.n	8003af2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	4b47      	ldr	r3, [pc, #284]	@ (8003afc <HAL_DMA_Init+0x138>)
 80039de:	429a      	cmp	r2, r3
 80039e0:	d80f      	bhi.n	8003a02 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	4b45      	ldr	r3, [pc, #276]	@ (8003b00 <HAL_DMA_Init+0x13c>)
 80039ea:	4413      	add	r3, r2
 80039ec:	4a45      	ldr	r2, [pc, #276]	@ (8003b04 <HAL_DMA_Init+0x140>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	091b      	lsrs	r3, r3, #4
 80039f4:	009a      	lsls	r2, r3, #2
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a42      	ldr	r2, [pc, #264]	@ (8003b08 <HAL_DMA_Init+0x144>)
 80039fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a00:	e00e      	b.n	8003a20 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	4b40      	ldr	r3, [pc, #256]	@ (8003b0c <HAL_DMA_Init+0x148>)
 8003a0a:	4413      	add	r3, r2
 8003a0c:	4a3d      	ldr	r2, [pc, #244]	@ (8003b04 <HAL_DMA_Init+0x140>)
 8003a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a12:	091b      	lsrs	r3, r3, #4
 8003a14:	009a      	lsls	r2, r3, #2
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a3c      	ldr	r2, [pc, #240]	@ (8003b10 <HAL_DMA_Init+0x14c>)
 8003a1e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f9b6 	bl	8003de4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a80:	d102      	bne.n	8003a88 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a9c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d010      	beq.n	8003ac8 <HAL_DMA_Init+0x104>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d80c      	bhi.n	8003ac8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f9d6 	bl	8003e60 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ac4:	605a      	str	r2, [r3, #4]
 8003ac6:	e008      	b.n	8003ada <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40020407 	.word	0x40020407
 8003b00:	bffdfff8 	.word	0xbffdfff8
 8003b04:	cccccccd 	.word	0xcccccccd
 8003b08:	40020000 	.word	0x40020000
 8003b0c:	bffdfbf8 	.word	0xbffdfbf8
 8003b10:	40020400 	.word	0x40020400

08003b14 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <HAL_DMA_Start_IT+0x20>
 8003b30:	2302      	movs	r3, #2
 8003b32:	e066      	b.n	8003c02 <HAL_DMA_Start_IT+0xee>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d155      	bne.n	8003bf4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0201 	bic.w	r2, r2, #1
 8003b64:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	68b9      	ldr	r1, [r7, #8]
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 f8fb 	bl	8003d68 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d008      	beq.n	8003b8c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f042 020e 	orr.w	r2, r2, #14
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	e00f      	b.n	8003bac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0204 	bic.w	r2, r2, #4
 8003b9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 020a 	orr.w	r2, r2, #10
 8003baa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d007      	beq.n	8003bca <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bc8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d007      	beq.n	8003be2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003be0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f042 0201 	orr.w	r2, r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	e005      	b.n	8003c00 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c26:	f003 031f 	and.w	r3, r3, #31
 8003c2a:	2204      	movs	r2, #4
 8003c2c:	409a      	lsls	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d026      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x7a>
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d021      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d107      	bne.n	8003c5e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0204 	bic.w	r2, r2, #4
 8003c5c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c62:	f003 021f 	and.w	r2, r3, #31
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	2104      	movs	r1, #4
 8003c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c70:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d071      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003c82:	e06c      	b.n	8003d5e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c88:	f003 031f 	and.w	r3, r3, #31
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d02e      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d029      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0320 	and.w	r3, r3, #32
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10b      	bne.n	8003cc8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 020a 	bic.w	r2, r2, #10
 8003cbe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ccc:	f003 021f 	and.w	r2, r3, #31
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd4:	2102      	movs	r1, #2
 8003cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cda:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d038      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003cf4:	e033      	b.n	8003d5e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cfa:	f003 031f 	and.w	r3, r3, #31
 8003cfe:	2208      	movs	r2, #8
 8003d00:	409a      	lsls	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4013      	ands	r3, r2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d02a      	beq.n	8003d60 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f003 0308 	and.w	r3, r3, #8
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d025      	beq.n	8003d60 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 020e 	bic.w	r2, r2, #14
 8003d22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d28:	f003 021f 	and.w	r2, r3, #31
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d30:	2101      	movs	r1, #1
 8003d32:	fa01 f202 	lsl.w	r2, r1, r2
 8003d36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d004      	beq.n	8003d60 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d5e:	bf00      	nop
 8003d60:	bf00      	nop
}
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
 8003d74:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d7e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d004      	beq.n	8003d92 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d90:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d96:	f003 021f 	and.w	r2, r3, #31
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9e:	2101      	movs	r1, #1
 8003da0:	fa01 f202 	lsl.w	r2, r1, r2
 8003da4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b10      	cmp	r3, #16
 8003db4:	d108      	bne.n	8003dc8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003dc6:	e007      	b.n	8003dd8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	60da      	str	r2, [r3, #12]
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	461a      	mov	r2, r3
 8003df2:	4b16      	ldr	r3, [pc, #88]	@ (8003e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d802      	bhi.n	8003dfe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003df8:	4b15      	ldr	r3, [pc, #84]	@ (8003e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	e001      	b.n	8003e02 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003dfe:	4b15      	ldr	r3, [pc, #84]	@ (8003e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003e00:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	3b08      	subs	r3, #8
 8003e0e:	4a12      	ldr	r2, [pc, #72]	@ (8003e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003e10:	fba2 2303 	umull	r2, r3, r2, r3
 8003e14:	091b      	lsrs	r3, r3, #4
 8003e16:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1c:	089b      	lsrs	r3, r3, #2
 8003e1e:	009a      	lsls	r2, r3, #2
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4413      	add	r3, r2
 8003e24:	461a      	mov	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a0b      	ldr	r2, [pc, #44]	@ (8003e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003e2e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f003 031f 	and.w	r3, r3, #31
 8003e36:	2201      	movs	r2, #1
 8003e38:	409a      	lsls	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003e3e:	bf00      	nop
 8003e40:	371c      	adds	r7, #28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40020407 	.word	0x40020407
 8003e50:	40020800 	.word	0x40020800
 8003e54:	40020820 	.word	0x40020820
 8003e58:	cccccccd 	.word	0xcccccccd
 8003e5c:	40020880 	.word	0x40020880

08003e60 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003e74:	4413      	add	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	461a      	mov	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a08      	ldr	r2, [pc, #32]	@ (8003ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003e82:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003e94:	bf00      	nop
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	1000823f 	.word	0x1000823f
 8003ea4:	40020940 	.word	0x40020940

08003ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003eb6:	e15a      	b.n	800416e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 814c 	beq.w	8004168 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f003 0303 	and.w	r3, r3, #3
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d005      	beq.n	8003ee8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d130      	bne.n	8003f4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	2203      	movs	r2, #3
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4013      	ands	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f1e:	2201      	movs	r2, #1
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	43db      	mvns	r3, r3
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	091b      	lsrs	r3, r3, #4
 8003f34:	f003 0201 	and.w	r2, r3, #1
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	d017      	beq.n	8003f86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	2203      	movs	r2, #3
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43db      	mvns	r3, r3
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d123      	bne.n	8003fda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	08da      	lsrs	r2, r3, #3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3208      	adds	r2, #8
 8003f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	220f      	movs	r2, #15
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	08da      	lsrs	r2, r3, #3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3208      	adds	r2, #8
 8003fd4:	6939      	ldr	r1, [r7, #16]
 8003fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fea:	43db      	mvns	r3, r3
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f003 0203 	and.w	r2, r3, #3
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 80a6 	beq.w	8004168 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800401c:	4b5b      	ldr	r3, [pc, #364]	@ (800418c <HAL_GPIO_Init+0x2e4>)
 800401e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004020:	4a5a      	ldr	r2, [pc, #360]	@ (800418c <HAL_GPIO_Init+0x2e4>)
 8004022:	f043 0301 	orr.w	r3, r3, #1
 8004026:	6613      	str	r3, [r2, #96]	@ 0x60
 8004028:	4b58      	ldr	r3, [pc, #352]	@ (800418c <HAL_GPIO_Init+0x2e4>)
 800402a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004034:	4a56      	ldr	r2, [pc, #344]	@ (8004190 <HAL_GPIO_Init+0x2e8>)
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	089b      	lsrs	r3, r3, #2
 800403a:	3302      	adds	r3, #2
 800403c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004040:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f003 0303 	and.w	r3, r3, #3
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	220f      	movs	r2, #15
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	43db      	mvns	r3, r3
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	4013      	ands	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800405e:	d01f      	beq.n	80040a0 <HAL_GPIO_Init+0x1f8>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a4c      	ldr	r2, [pc, #304]	@ (8004194 <HAL_GPIO_Init+0x2ec>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d019      	beq.n	800409c <HAL_GPIO_Init+0x1f4>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a4b      	ldr	r2, [pc, #300]	@ (8004198 <HAL_GPIO_Init+0x2f0>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d013      	beq.n	8004098 <HAL_GPIO_Init+0x1f0>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a4a      	ldr	r2, [pc, #296]	@ (800419c <HAL_GPIO_Init+0x2f4>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00d      	beq.n	8004094 <HAL_GPIO_Init+0x1ec>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a49      	ldr	r2, [pc, #292]	@ (80041a0 <HAL_GPIO_Init+0x2f8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d007      	beq.n	8004090 <HAL_GPIO_Init+0x1e8>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a48      	ldr	r2, [pc, #288]	@ (80041a4 <HAL_GPIO_Init+0x2fc>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d101      	bne.n	800408c <HAL_GPIO_Init+0x1e4>
 8004088:	2305      	movs	r3, #5
 800408a:	e00a      	b.n	80040a2 <HAL_GPIO_Init+0x1fa>
 800408c:	2306      	movs	r3, #6
 800408e:	e008      	b.n	80040a2 <HAL_GPIO_Init+0x1fa>
 8004090:	2304      	movs	r3, #4
 8004092:	e006      	b.n	80040a2 <HAL_GPIO_Init+0x1fa>
 8004094:	2303      	movs	r3, #3
 8004096:	e004      	b.n	80040a2 <HAL_GPIO_Init+0x1fa>
 8004098:	2302      	movs	r3, #2
 800409a:	e002      	b.n	80040a2 <HAL_GPIO_Init+0x1fa>
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <HAL_GPIO_Init+0x1fa>
 80040a0:	2300      	movs	r3, #0
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	f002 0203 	and.w	r2, r2, #3
 80040a8:	0092      	lsls	r2, r2, #2
 80040aa:	4093      	lsls	r3, r2
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040b2:	4937      	ldr	r1, [pc, #220]	@ (8004190 <HAL_GPIO_Init+0x2e8>)
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	089b      	lsrs	r3, r3, #2
 80040b8:	3302      	adds	r3, #2
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040c0:	4b39      	ldr	r3, [pc, #228]	@ (80041a8 <HAL_GPIO_Init+0x300>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	43db      	mvns	r3, r3
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4013      	ands	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040e4:	4a30      	ldr	r2, [pc, #192]	@ (80041a8 <HAL_GPIO_Init+0x300>)
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040ea:	4b2f      	ldr	r3, [pc, #188]	@ (80041a8 <HAL_GPIO_Init+0x300>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	43db      	mvns	r3, r3
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4013      	ands	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800410e:	4a26      	ldr	r2, [pc, #152]	@ (80041a8 <HAL_GPIO_Init+0x300>)
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004114:	4b24      	ldr	r3, [pc, #144]	@ (80041a8 <HAL_GPIO_Init+0x300>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	43db      	mvns	r3, r3
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4013      	ands	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004138:	4a1b      	ldr	r2, [pc, #108]	@ (80041a8 <HAL_GPIO_Init+0x300>)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800413e:	4b1a      	ldr	r3, [pc, #104]	@ (80041a8 <HAL_GPIO_Init+0x300>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	43db      	mvns	r3, r3
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4013      	ands	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004162:	4a11      	ldr	r2, [pc, #68]	@ (80041a8 <HAL_GPIO_Init+0x300>)
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	3301      	adds	r3, #1
 800416c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	fa22 f303 	lsr.w	r3, r2, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	f47f ae9d 	bne.w	8003eb8 <HAL_GPIO_Init+0x10>
  }
}
 800417e:	bf00      	nop
 8004180:	bf00      	nop
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	40021000 	.word	0x40021000
 8004190:	40010000 	.word	0x40010000
 8004194:	48000400 	.word	0x48000400
 8004198:	48000800 	.word	0x48000800
 800419c:	48000c00 	.word	0x48000c00
 80041a0:	48001000 	.word	0x48001000
 80041a4:	48001400 	.word	0x48001400
 80041a8:	40010400 	.word	0x40010400

080041ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	807b      	strh	r3, [r7, #2]
 80041b8:	4613      	mov	r3, r2
 80041ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041bc:	787b      	ldrb	r3, [r7, #1]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041c2:	887a      	ldrh	r2, [r7, #2]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041c8:	e002      	b.n	80041d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041ca:	887a      	ldrh	r2, [r7, #2]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80041e6:	4b08      	ldr	r3, [pc, #32]	@ (8004208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041e8:	695a      	ldr	r2, [r3, #20]
 80041ea:	88fb      	ldrh	r3, [r7, #6]
 80041ec:	4013      	ands	r3, r2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d006      	beq.n	8004200 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041f2:	4a05      	ldr	r2, [pc, #20]	@ (8004208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041f4:	88fb      	ldrh	r3, [r7, #6]
 80041f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041f8:	88fb      	ldrh	r3, [r7, #6]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 f806 	bl	800420c <HAL_GPIO_EXTI_Callback>
  }
}
 8004200:	bf00      	nop
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40010400 	.word	0x40010400

0800420c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
	...

08004224 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d141      	bne.n	80042b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004232:	4b4b      	ldr	r3, [pc, #300]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800423a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800423e:	d131      	bne.n	80042a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004240:	4b47      	ldr	r3, [pc, #284]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004242:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004246:	4a46      	ldr	r2, [pc, #280]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004248:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800424c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004250:	4b43      	ldr	r3, [pc, #268]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004258:	4a41      	ldr	r2, [pc, #260]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800425a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800425e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004260:	4b40      	ldr	r3, [pc, #256]	@ (8004364 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2232      	movs	r2, #50	@ 0x32
 8004266:	fb02 f303 	mul.w	r3, r2, r3
 800426a:	4a3f      	ldr	r2, [pc, #252]	@ (8004368 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800426c:	fba2 2303 	umull	r2, r3, r2, r3
 8004270:	0c9b      	lsrs	r3, r3, #18
 8004272:	3301      	adds	r3, #1
 8004274:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004276:	e002      	b.n	800427e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	3b01      	subs	r3, #1
 800427c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800427e:	4b38      	ldr	r3, [pc, #224]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800428a:	d102      	bne.n	8004292 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1f2      	bne.n	8004278 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004292:	4b33      	ldr	r3, [pc, #204]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800429a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800429e:	d158      	bne.n	8004352 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e057      	b.n	8004354 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042a4:	4b2e      	ldr	r3, [pc, #184]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042aa:	4a2d      	ldr	r2, [pc, #180]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80042b4:	e04d      	b.n	8004352 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042bc:	d141      	bne.n	8004342 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042be:	4b28      	ldr	r3, [pc, #160]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80042c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042ca:	d131      	bne.n	8004330 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042cc:	4b24      	ldr	r3, [pc, #144]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042d2:	4a23      	ldr	r2, [pc, #140]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042dc:	4b20      	ldr	r3, [pc, #128]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004364 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2232      	movs	r2, #50	@ 0x32
 80042f2:	fb02 f303 	mul.w	r3, r2, r3
 80042f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004368 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042f8:	fba2 2303 	umull	r2, r3, r2, r3
 80042fc:	0c9b      	lsrs	r3, r3, #18
 80042fe:	3301      	adds	r3, #1
 8004300:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004302:	e002      	b.n	800430a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	3b01      	subs	r3, #1
 8004308:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800430a:	4b15      	ldr	r3, [pc, #84]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004316:	d102      	bne.n	800431e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1f2      	bne.n	8004304 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800431e:	4b10      	ldr	r3, [pc, #64]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800432a:	d112      	bne.n	8004352 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e011      	b.n	8004354 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004330:	4b0b      	ldr	r3, [pc, #44]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004336:	4a0a      	ldr	r2, [pc, #40]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004338:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800433c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004340:	e007      	b.n	8004352 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004342:	4b07      	ldr	r3, [pc, #28]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800434a:	4a05      	ldr	r2, [pc, #20]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800434c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004350:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	40007000 	.word	0x40007000
 8004364:	20000000 	.word	0x20000000
 8004368:	431bde83 	.word	0x431bde83

0800436c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004370:	4b05      	ldr	r3, [pc, #20]	@ (8004388 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	4a04      	ldr	r2, [pc, #16]	@ (8004388 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004376:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800437a:	6093      	str	r3, [r2, #8]
}
 800437c:	bf00      	nop
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	40007000 	.word	0x40007000

0800438c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e2fe      	b.n	800499c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d075      	beq.n	8004496 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043aa:	4b97      	ldr	r3, [pc, #604]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 030c 	and.w	r3, r3, #12
 80043b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043b4:	4b94      	ldr	r3, [pc, #592]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f003 0303 	and.w	r3, r3, #3
 80043bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	2b0c      	cmp	r3, #12
 80043c2:	d102      	bne.n	80043ca <HAL_RCC_OscConfig+0x3e>
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	2b03      	cmp	r3, #3
 80043c8:	d002      	beq.n	80043d0 <HAL_RCC_OscConfig+0x44>
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d10b      	bne.n	80043e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d0:	4b8d      	ldr	r3, [pc, #564]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d05b      	beq.n	8004494 <HAL_RCC_OscConfig+0x108>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d157      	bne.n	8004494 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e2d9      	b.n	800499c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043f0:	d106      	bne.n	8004400 <HAL_RCC_OscConfig+0x74>
 80043f2:	4b85      	ldr	r3, [pc, #532]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a84      	ldr	r2, [pc, #528]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 80043f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	e01d      	b.n	800443c <HAL_RCC_OscConfig+0xb0>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004408:	d10c      	bne.n	8004424 <HAL_RCC_OscConfig+0x98>
 800440a:	4b7f      	ldr	r3, [pc, #508]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a7e      	ldr	r2, [pc, #504]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 8004410:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	4b7c      	ldr	r3, [pc, #496]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a7b      	ldr	r2, [pc, #492]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 800441c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	e00b      	b.n	800443c <HAL_RCC_OscConfig+0xb0>
 8004424:	4b78      	ldr	r3, [pc, #480]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a77      	ldr	r2, [pc, #476]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 800442a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	4b75      	ldr	r3, [pc, #468]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a74      	ldr	r2, [pc, #464]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 8004436:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800443a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d013      	beq.n	800446c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004444:	f7fd fb80 	bl	8001b48 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800444c:	f7fd fb7c 	bl	8001b48 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b64      	cmp	r3, #100	@ 0x64
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e29e      	b.n	800499c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800445e:	4b6a      	ldr	r3, [pc, #424]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0f0      	beq.n	800444c <HAL_RCC_OscConfig+0xc0>
 800446a:	e014      	b.n	8004496 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446c:	f7fd fb6c 	bl	8001b48 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004474:	f7fd fb68 	bl	8001b48 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b64      	cmp	r3, #100	@ 0x64
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e28a      	b.n	800499c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004486:	4b60      	ldr	r3, [pc, #384]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f0      	bne.n	8004474 <HAL_RCC_OscConfig+0xe8>
 8004492:	e000      	b.n	8004496 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d075      	beq.n	800458e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044a2:	4b59      	ldr	r3, [pc, #356]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 030c 	and.w	r3, r3, #12
 80044aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044ac:	4b56      	ldr	r3, [pc, #344]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	2b0c      	cmp	r3, #12
 80044ba:	d102      	bne.n	80044c2 <HAL_RCC_OscConfig+0x136>
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d002      	beq.n	80044c8 <HAL_RCC_OscConfig+0x13c>
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d11f      	bne.n	8004508 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044c8:	4b4f      	ldr	r3, [pc, #316]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <HAL_RCC_OscConfig+0x154>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e25d      	b.n	800499c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e0:	4b49      	ldr	r3, [pc, #292]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	061b      	lsls	r3, r3, #24
 80044ee:	4946      	ldr	r1, [pc, #280]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80044f4:	4b45      	ldr	r3, [pc, #276]	@ (800460c <HAL_RCC_OscConfig+0x280>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fd fad9 	bl	8001ab0 <HAL_InitTick>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d043      	beq.n	800458c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e249      	b.n	800499c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d023      	beq.n	8004558 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004510:	4b3d      	ldr	r3, [pc, #244]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a3c      	ldr	r2, [pc, #240]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 8004516:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800451a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451c:	f7fd fb14 	bl	8001b48 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004524:	f7fd fb10 	bl	8001b48 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e232      	b.n	800499c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004536:	4b34      	ldr	r3, [pc, #208]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f0      	beq.n	8004524 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004542:	4b31      	ldr	r3, [pc, #196]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	061b      	lsls	r3, r3, #24
 8004550:	492d      	ldr	r1, [pc, #180]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 8004552:	4313      	orrs	r3, r2
 8004554:	604b      	str	r3, [r1, #4]
 8004556:	e01a      	b.n	800458e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004558:	4b2b      	ldr	r3, [pc, #172]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a2a      	ldr	r2, [pc, #168]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 800455e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004564:	f7fd faf0 	bl	8001b48 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800456c:	f7fd faec 	bl	8001b48 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e20e      	b.n	800499c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800457e:	4b22      	ldr	r3, [pc, #136]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1f0      	bne.n	800456c <HAL_RCC_OscConfig+0x1e0>
 800458a:	e000      	b.n	800458e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800458c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0308 	and.w	r3, r3, #8
 8004596:	2b00      	cmp	r3, #0
 8004598:	d041      	beq.n	800461e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d01c      	beq.n	80045dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045a2:	4b19      	ldr	r3, [pc, #100]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 80045a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045a8:	4a17      	ldr	r2, [pc, #92]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 80045aa:	f043 0301 	orr.w	r3, r3, #1
 80045ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b2:	f7fd fac9 	bl	8001b48 <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045b8:	e008      	b.n	80045cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045ba:	f7fd fac5 	bl	8001b48 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d901      	bls.n	80045cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e1e7      	b.n	800499c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 80045ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0ef      	beq.n	80045ba <HAL_RCC_OscConfig+0x22e>
 80045da:	e020      	b.n	800461e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 80045de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045e2:	4a09      	ldr	r2, [pc, #36]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 80045e4:	f023 0301 	bic.w	r3, r3, #1
 80045e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ec:	f7fd faac 	bl	8001b48 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045f2:	e00d      	b.n	8004610 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045f4:	f7fd faa8 	bl	8001b48 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d906      	bls.n	8004610 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e1ca      	b.n	800499c <HAL_RCC_OscConfig+0x610>
 8004606:	bf00      	nop
 8004608:	40021000 	.word	0x40021000
 800460c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004610:	4b8c      	ldr	r3, [pc, #560]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 8004612:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1ea      	bne.n	80045f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0304 	and.w	r3, r3, #4
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 80a6 	beq.w	8004778 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800462c:	2300      	movs	r3, #0
 800462e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004630:	4b84      	ldr	r3, [pc, #528]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 8004632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_RCC_OscConfig+0x2b4>
 800463c:	2301      	movs	r3, #1
 800463e:	e000      	b.n	8004642 <HAL_RCC_OscConfig+0x2b6>
 8004640:	2300      	movs	r3, #0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00d      	beq.n	8004662 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004646:	4b7f      	ldr	r3, [pc, #508]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 8004648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800464a:	4a7e      	ldr	r2, [pc, #504]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 800464c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004650:	6593      	str	r3, [r2, #88]	@ 0x58
 8004652:	4b7c      	ldr	r3, [pc, #496]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 8004654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800465e:	2301      	movs	r3, #1
 8004660:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004662:	4b79      	ldr	r3, [pc, #484]	@ (8004848 <HAL_RCC_OscConfig+0x4bc>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800466a:	2b00      	cmp	r3, #0
 800466c:	d118      	bne.n	80046a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800466e:	4b76      	ldr	r3, [pc, #472]	@ (8004848 <HAL_RCC_OscConfig+0x4bc>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a75      	ldr	r2, [pc, #468]	@ (8004848 <HAL_RCC_OscConfig+0x4bc>)
 8004674:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800467a:	f7fd fa65 	bl	8001b48 <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004680:	e008      	b.n	8004694 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004682:	f7fd fa61 	bl	8001b48 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e183      	b.n	800499c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004694:	4b6c      	ldr	r3, [pc, #432]	@ (8004848 <HAL_RCC_OscConfig+0x4bc>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0f0      	beq.n	8004682 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d108      	bne.n	80046ba <HAL_RCC_OscConfig+0x32e>
 80046a8:	4b66      	ldr	r3, [pc, #408]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 80046aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ae:	4a65      	ldr	r2, [pc, #404]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046b8:	e024      	b.n	8004704 <HAL_RCC_OscConfig+0x378>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2b05      	cmp	r3, #5
 80046c0:	d110      	bne.n	80046e4 <HAL_RCC_OscConfig+0x358>
 80046c2:	4b60      	ldr	r3, [pc, #384]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 80046c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c8:	4a5e      	ldr	r2, [pc, #376]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 80046ca:	f043 0304 	orr.w	r3, r3, #4
 80046ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046d2:	4b5c      	ldr	r3, [pc, #368]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 80046d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046d8:	4a5a      	ldr	r2, [pc, #360]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 80046da:	f043 0301 	orr.w	r3, r3, #1
 80046de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046e2:	e00f      	b.n	8004704 <HAL_RCC_OscConfig+0x378>
 80046e4:	4b57      	ldr	r3, [pc, #348]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 80046e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ea:	4a56      	ldr	r2, [pc, #344]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 80046ec:	f023 0301 	bic.w	r3, r3, #1
 80046f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046f4:	4b53      	ldr	r3, [pc, #332]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 80046f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046fa:	4a52      	ldr	r2, [pc, #328]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 80046fc:	f023 0304 	bic.w	r3, r3, #4
 8004700:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d016      	beq.n	800473a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470c:	f7fd fa1c 	bl	8001b48 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004712:	e00a      	b.n	800472a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004714:	f7fd fa18 	bl	8001b48 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004722:	4293      	cmp	r3, r2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e138      	b.n	800499c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800472a:	4b46      	ldr	r3, [pc, #280]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 800472c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0ed      	beq.n	8004714 <HAL_RCC_OscConfig+0x388>
 8004738:	e015      	b.n	8004766 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473a:	f7fd fa05 	bl	8001b48 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004740:	e00a      	b.n	8004758 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004742:	f7fd fa01 	bl	8001b48 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004750:	4293      	cmp	r3, r2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e121      	b.n	800499c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004758:	4b3a      	ldr	r3, [pc, #232]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 800475a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1ed      	bne.n	8004742 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004766:	7ffb      	ldrb	r3, [r7, #31]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d105      	bne.n	8004778 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800476c:	4b35      	ldr	r3, [pc, #212]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 800476e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004770:	4a34      	ldr	r2, [pc, #208]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 8004772:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004776:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0320 	and.w	r3, r3, #32
 8004780:	2b00      	cmp	r3, #0
 8004782:	d03c      	beq.n	80047fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d01c      	beq.n	80047c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800478c:	4b2d      	ldr	r3, [pc, #180]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 800478e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004792:	4a2c      	ldr	r2, [pc, #176]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 8004794:	f043 0301 	orr.w	r3, r3, #1
 8004798:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479c:	f7fd f9d4 	bl	8001b48 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047a4:	f7fd f9d0 	bl	8001b48 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e0f2      	b.n	800499c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047b6:	4b23      	ldr	r3, [pc, #140]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 80047b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0ef      	beq.n	80047a4 <HAL_RCC_OscConfig+0x418>
 80047c4:	e01b      	b.n	80047fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047c6:	4b1f      	ldr	r3, [pc, #124]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 80047c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 80047ce:	f023 0301 	bic.w	r3, r3, #1
 80047d2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d6:	f7fd f9b7 	bl	8001b48 <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047de:	f7fd f9b3 	bl	8001b48 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e0d5      	b.n	800499c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047f0:	4b14      	ldr	r3, [pc, #80]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 80047f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1ef      	bne.n	80047de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 80c9 	beq.w	800499a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004808:	4b0e      	ldr	r3, [pc, #56]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f003 030c 	and.w	r3, r3, #12
 8004810:	2b0c      	cmp	r3, #12
 8004812:	f000 8083 	beq.w	800491c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	2b02      	cmp	r3, #2
 800481c:	d15e      	bne.n	80048dc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800481e:	4b09      	ldr	r3, [pc, #36]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a08      	ldr	r2, [pc, #32]	@ (8004844 <HAL_RCC_OscConfig+0x4b8>)
 8004824:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482a:	f7fd f98d 	bl	8001b48 <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004830:	e00c      	b.n	800484c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004832:	f7fd f989 	bl	8001b48 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d905      	bls.n	800484c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e0ab      	b.n	800499c <HAL_RCC_OscConfig+0x610>
 8004844:	40021000 	.word	0x40021000
 8004848:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800484c:	4b55      	ldr	r3, [pc, #340]	@ (80049a4 <HAL_RCC_OscConfig+0x618>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1ec      	bne.n	8004832 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004858:	4b52      	ldr	r3, [pc, #328]	@ (80049a4 <HAL_RCC_OscConfig+0x618>)
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	4b52      	ldr	r3, [pc, #328]	@ (80049a8 <HAL_RCC_OscConfig+0x61c>)
 800485e:	4013      	ands	r3, r2
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6a11      	ldr	r1, [r2, #32]
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004868:	3a01      	subs	r2, #1
 800486a:	0112      	lsls	r2, r2, #4
 800486c:	4311      	orrs	r1, r2
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004872:	0212      	lsls	r2, r2, #8
 8004874:	4311      	orrs	r1, r2
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800487a:	0852      	lsrs	r2, r2, #1
 800487c:	3a01      	subs	r2, #1
 800487e:	0552      	lsls	r2, r2, #21
 8004880:	4311      	orrs	r1, r2
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004886:	0852      	lsrs	r2, r2, #1
 8004888:	3a01      	subs	r2, #1
 800488a:	0652      	lsls	r2, r2, #25
 800488c:	4311      	orrs	r1, r2
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004892:	06d2      	lsls	r2, r2, #27
 8004894:	430a      	orrs	r2, r1
 8004896:	4943      	ldr	r1, [pc, #268]	@ (80049a4 <HAL_RCC_OscConfig+0x618>)
 8004898:	4313      	orrs	r3, r2
 800489a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800489c:	4b41      	ldr	r3, [pc, #260]	@ (80049a4 <HAL_RCC_OscConfig+0x618>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a40      	ldr	r2, [pc, #256]	@ (80049a4 <HAL_RCC_OscConfig+0x618>)
 80048a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048a8:	4b3e      	ldr	r3, [pc, #248]	@ (80049a4 <HAL_RCC_OscConfig+0x618>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	4a3d      	ldr	r2, [pc, #244]	@ (80049a4 <HAL_RCC_OscConfig+0x618>)
 80048ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b4:	f7fd f948 	bl	8001b48 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048bc:	f7fd f944 	bl	8001b48 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e066      	b.n	800499c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ce:	4b35      	ldr	r3, [pc, #212]	@ (80049a4 <HAL_RCC_OscConfig+0x618>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0f0      	beq.n	80048bc <HAL_RCC_OscConfig+0x530>
 80048da:	e05e      	b.n	800499a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048dc:	4b31      	ldr	r3, [pc, #196]	@ (80049a4 <HAL_RCC_OscConfig+0x618>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a30      	ldr	r2, [pc, #192]	@ (80049a4 <HAL_RCC_OscConfig+0x618>)
 80048e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e8:	f7fd f92e 	bl	8001b48 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f0:	f7fd f92a 	bl	8001b48 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e04c      	b.n	800499c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004902:	4b28      	ldr	r3, [pc, #160]	@ (80049a4 <HAL_RCC_OscConfig+0x618>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1f0      	bne.n	80048f0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800490e:	4b25      	ldr	r3, [pc, #148]	@ (80049a4 <HAL_RCC_OscConfig+0x618>)
 8004910:	68da      	ldr	r2, [r3, #12]
 8004912:	4924      	ldr	r1, [pc, #144]	@ (80049a4 <HAL_RCC_OscConfig+0x618>)
 8004914:	4b25      	ldr	r3, [pc, #148]	@ (80049ac <HAL_RCC_OscConfig+0x620>)
 8004916:	4013      	ands	r3, r2
 8004918:	60cb      	str	r3, [r1, #12]
 800491a:	e03e      	b.n	800499a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e039      	b.n	800499c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004928:	4b1e      	ldr	r3, [pc, #120]	@ (80049a4 <HAL_RCC_OscConfig+0x618>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f003 0203 	and.w	r2, r3, #3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	429a      	cmp	r2, r3
 800493a:	d12c      	bne.n	8004996 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004946:	3b01      	subs	r3, #1
 8004948:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800494a:	429a      	cmp	r2, r3
 800494c:	d123      	bne.n	8004996 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004958:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800495a:	429a      	cmp	r2, r3
 800495c:	d11b      	bne.n	8004996 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004968:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800496a:	429a      	cmp	r2, r3
 800496c:	d113      	bne.n	8004996 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004978:	085b      	lsrs	r3, r3, #1
 800497a:	3b01      	subs	r3, #1
 800497c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800497e:	429a      	cmp	r2, r3
 8004980:	d109      	bne.n	8004996 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800498c:	085b      	lsrs	r3, r3, #1
 800498e:	3b01      	subs	r3, #1
 8004990:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004992:	429a      	cmp	r2, r3
 8004994:	d001      	beq.n	800499a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e000      	b.n	800499c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3720      	adds	r7, #32
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40021000 	.word	0x40021000
 80049a8:	019f800c 	.word	0x019f800c
 80049ac:	feeefffc 	.word	0xfeeefffc

080049b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80049ba:	2300      	movs	r3, #0
 80049bc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e11e      	b.n	8004c06 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049c8:	4b91      	ldr	r3, [pc, #580]	@ (8004c10 <HAL_RCC_ClockConfig+0x260>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 030f 	and.w	r3, r3, #15
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d910      	bls.n	80049f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d6:	4b8e      	ldr	r3, [pc, #568]	@ (8004c10 <HAL_RCC_ClockConfig+0x260>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f023 020f 	bic.w	r2, r3, #15
 80049de:	498c      	ldr	r1, [pc, #560]	@ (8004c10 <HAL_RCC_ClockConfig+0x260>)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e6:	4b8a      	ldr	r3, [pc, #552]	@ (8004c10 <HAL_RCC_ClockConfig+0x260>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d001      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e106      	b.n	8004c06 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d073      	beq.n	8004aec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	d129      	bne.n	8004a60 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a0c:	4b81      	ldr	r3, [pc, #516]	@ (8004c14 <HAL_RCC_ClockConfig+0x264>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e0f4      	b.n	8004c06 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004a1c:	f000 f99e 	bl	8004d5c <RCC_GetSysClockFreqFromPLLSource>
 8004a20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	4a7c      	ldr	r2, [pc, #496]	@ (8004c18 <HAL_RCC_ClockConfig+0x268>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d93f      	bls.n	8004aaa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a2a:	4b7a      	ldr	r3, [pc, #488]	@ (8004c14 <HAL_RCC_ClockConfig+0x264>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d009      	beq.n	8004a4a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d033      	beq.n	8004aaa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d12f      	bne.n	8004aaa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a4a:	4b72      	ldr	r3, [pc, #456]	@ (8004c14 <HAL_RCC_ClockConfig+0x264>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a52:	4a70      	ldr	r2, [pc, #448]	@ (8004c14 <HAL_RCC_ClockConfig+0x264>)
 8004a54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a5a:	2380      	movs	r3, #128	@ 0x80
 8004a5c:	617b      	str	r3, [r7, #20]
 8004a5e:	e024      	b.n	8004aaa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d107      	bne.n	8004a78 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a68:	4b6a      	ldr	r3, [pc, #424]	@ (8004c14 <HAL_RCC_ClockConfig+0x264>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d109      	bne.n	8004a88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e0c6      	b.n	8004c06 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a78:	4b66      	ldr	r3, [pc, #408]	@ (8004c14 <HAL_RCC_ClockConfig+0x264>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e0be      	b.n	8004c06 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004a88:	f000 f8ce 	bl	8004c28 <HAL_RCC_GetSysClockFreq>
 8004a8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	4a61      	ldr	r2, [pc, #388]	@ (8004c18 <HAL_RCC_ClockConfig+0x268>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d909      	bls.n	8004aaa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a96:	4b5f      	ldr	r3, [pc, #380]	@ (8004c14 <HAL_RCC_ClockConfig+0x264>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a9e:	4a5d      	ldr	r2, [pc, #372]	@ (8004c14 <HAL_RCC_ClockConfig+0x264>)
 8004aa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aa4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004aa6:	2380      	movs	r3, #128	@ 0x80
 8004aa8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004aaa:	4b5a      	ldr	r3, [pc, #360]	@ (8004c14 <HAL_RCC_ClockConfig+0x264>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f023 0203 	bic.w	r2, r3, #3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	4957      	ldr	r1, [pc, #348]	@ (8004c14 <HAL_RCC_ClockConfig+0x264>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004abc:	f7fd f844 	bl	8001b48 <HAL_GetTick>
 8004ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac2:	e00a      	b.n	8004ada <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac4:	f7fd f840 	bl	8001b48 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e095      	b.n	8004c06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ada:	4b4e      	ldr	r3, [pc, #312]	@ (8004c14 <HAL_RCC_ClockConfig+0x264>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 020c 	and.w	r2, r3, #12
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d1eb      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d023      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d005      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b04:	4b43      	ldr	r3, [pc, #268]	@ (8004c14 <HAL_RCC_ClockConfig+0x264>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	4a42      	ldr	r2, [pc, #264]	@ (8004c14 <HAL_RCC_ClockConfig+0x264>)
 8004b0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b0e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0308 	and.w	r3, r3, #8
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d007      	beq.n	8004b2c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004b1c:	4b3d      	ldr	r3, [pc, #244]	@ (8004c14 <HAL_RCC_ClockConfig+0x264>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004b24:	4a3b      	ldr	r2, [pc, #236]	@ (8004c14 <HAL_RCC_ClockConfig+0x264>)
 8004b26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b2c:	4b39      	ldr	r3, [pc, #228]	@ (8004c14 <HAL_RCC_ClockConfig+0x264>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	4936      	ldr	r1, [pc, #216]	@ (8004c14 <HAL_RCC_ClockConfig+0x264>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	608b      	str	r3, [r1, #8]
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	2b80      	cmp	r3, #128	@ 0x80
 8004b44:	d105      	bne.n	8004b52 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004b46:	4b33      	ldr	r3, [pc, #204]	@ (8004c14 <HAL_RCC_ClockConfig+0x264>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	4a32      	ldr	r2, [pc, #200]	@ (8004c14 <HAL_RCC_ClockConfig+0x264>)
 8004b4c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b50:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b52:	4b2f      	ldr	r3, [pc, #188]	@ (8004c10 <HAL_RCC_ClockConfig+0x260>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d21d      	bcs.n	8004b9c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b60:	4b2b      	ldr	r3, [pc, #172]	@ (8004c10 <HAL_RCC_ClockConfig+0x260>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f023 020f 	bic.w	r2, r3, #15
 8004b68:	4929      	ldr	r1, [pc, #164]	@ (8004c10 <HAL_RCC_ClockConfig+0x260>)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b70:	f7fc ffea 	bl	8001b48 <HAL_GetTick>
 8004b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b76:	e00a      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b78:	f7fc ffe6 	bl	8001b48 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e03b      	b.n	8004c06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8e:	4b20      	ldr	r3, [pc, #128]	@ (8004c10 <HAL_RCC_ClockConfig+0x260>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 030f 	and.w	r3, r3, #15
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d1ed      	bne.n	8004b78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d008      	beq.n	8004bba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8004c14 <HAL_RCC_ClockConfig+0x264>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	4917      	ldr	r1, [pc, #92]	@ (8004c14 <HAL_RCC_ClockConfig+0x264>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d009      	beq.n	8004bda <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bc6:	4b13      	ldr	r3, [pc, #76]	@ (8004c14 <HAL_RCC_ClockConfig+0x264>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	490f      	ldr	r1, [pc, #60]	@ (8004c14 <HAL_RCC_ClockConfig+0x264>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bda:	f000 f825 	bl	8004c28 <HAL_RCC_GetSysClockFreq>
 8004bde:	4602      	mov	r2, r0
 8004be0:	4b0c      	ldr	r3, [pc, #48]	@ (8004c14 <HAL_RCC_ClockConfig+0x264>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	091b      	lsrs	r3, r3, #4
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	490c      	ldr	r1, [pc, #48]	@ (8004c1c <HAL_RCC_ClockConfig+0x26c>)
 8004bec:	5ccb      	ldrb	r3, [r1, r3]
 8004bee:	f003 031f 	and.w	r3, r3, #31
 8004bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8004c20 <HAL_RCC_ClockConfig+0x270>)
 8004bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8004c24 <HAL_RCC_ClockConfig+0x274>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fc ff56 	bl	8001ab0 <HAL_InitTick>
 8004c04:	4603      	mov	r3, r0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3718      	adds	r7, #24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	40022000 	.word	0x40022000
 8004c14:	40021000 	.word	0x40021000
 8004c18:	04c4b400 	.word	0x04c4b400
 8004c1c:	0800796c 	.word	0x0800796c
 8004c20:	20000000 	.word	0x20000000
 8004c24:	20000004 	.word	0x20000004

08004c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004c2e:	4b2c      	ldr	r3, [pc, #176]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 030c 	and.w	r3, r3, #12
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d102      	bne.n	8004c40 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ce4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c3c:	613b      	str	r3, [r7, #16]
 8004c3e:	e047      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004c40:	4b27      	ldr	r3, [pc, #156]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f003 030c 	and.w	r3, r3, #12
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d102      	bne.n	8004c52 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c4c:	4b26      	ldr	r3, [pc, #152]	@ (8004ce8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c4e:	613b      	str	r3, [r7, #16]
 8004c50:	e03e      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004c52:	4b23      	ldr	r3, [pc, #140]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 030c 	and.w	r3, r3, #12
 8004c5a:	2b0c      	cmp	r3, #12
 8004c5c:	d136      	bne.n	8004ccc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c5e:	4b20      	ldr	r3, [pc, #128]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c68:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	091b      	lsrs	r3, r3, #4
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	3301      	adds	r3, #1
 8004c74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2b03      	cmp	r3, #3
 8004c7a:	d10c      	bne.n	8004c96 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c7c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ce8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c84:	4a16      	ldr	r2, [pc, #88]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c86:	68d2      	ldr	r2, [r2, #12]
 8004c88:	0a12      	lsrs	r2, r2, #8
 8004c8a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c8e:	fb02 f303 	mul.w	r3, r2, r3
 8004c92:	617b      	str	r3, [r7, #20]
      break;
 8004c94:	e00c      	b.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c96:	4a13      	ldr	r2, [pc, #76]	@ (8004ce4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9e:	4a10      	ldr	r2, [pc, #64]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ca0:	68d2      	ldr	r2, [r2, #12]
 8004ca2:	0a12      	lsrs	r2, r2, #8
 8004ca4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ca8:	fb02 f303 	mul.w	r3, r2, r3
 8004cac:	617b      	str	r3, [r7, #20]
      break;
 8004cae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	0e5b      	lsrs	r3, r3, #25
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	3301      	adds	r3, #1
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc8:	613b      	str	r3, [r7, #16]
 8004cca:	e001      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004cd0:	693b      	ldr	r3, [r7, #16]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	371c      	adds	r7, #28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	00f42400 	.word	0x00f42400
 8004ce8:	016e3600 	.word	0x016e3600

08004cec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cf0:	4b03      	ldr	r3, [pc, #12]	@ (8004d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	20000000 	.word	0x20000000

08004d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d08:	f7ff fff0 	bl	8004cec <HAL_RCC_GetHCLKFreq>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	4b06      	ldr	r3, [pc, #24]	@ (8004d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	0a1b      	lsrs	r3, r3, #8
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	4904      	ldr	r1, [pc, #16]	@ (8004d2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d1a:	5ccb      	ldrb	r3, [r1, r3]
 8004d1c:	f003 031f 	and.w	r3, r3, #31
 8004d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	0800797c 	.word	0x0800797c

08004d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d34:	f7ff ffda 	bl	8004cec <HAL_RCC_GetHCLKFreq>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	4b06      	ldr	r3, [pc, #24]	@ (8004d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	0adb      	lsrs	r3, r3, #11
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	4904      	ldr	r1, [pc, #16]	@ (8004d58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d46:	5ccb      	ldrb	r3, [r1, r3]
 8004d48:	f003 031f 	and.w	r3, r3, #31
 8004d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	40021000 	.word	0x40021000
 8004d58:	0800797c 	.word	0x0800797c

08004d5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d62:	4b1e      	ldr	r3, [pc, #120]	@ (8004ddc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8004ddc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	091b      	lsrs	r3, r3, #4
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	3301      	adds	r3, #1
 8004d78:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	d10c      	bne.n	8004d9a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d80:	4a17      	ldr	r2, [pc, #92]	@ (8004de0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d88:	4a14      	ldr	r2, [pc, #80]	@ (8004ddc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d8a:	68d2      	ldr	r2, [r2, #12]
 8004d8c:	0a12      	lsrs	r2, r2, #8
 8004d8e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d92:	fb02 f303 	mul.w	r3, r2, r3
 8004d96:	617b      	str	r3, [r7, #20]
    break;
 8004d98:	e00c      	b.n	8004db4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d9a:	4a12      	ldr	r2, [pc, #72]	@ (8004de4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da2:	4a0e      	ldr	r2, [pc, #56]	@ (8004ddc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004da4:	68d2      	ldr	r2, [r2, #12]
 8004da6:	0a12      	lsrs	r2, r2, #8
 8004da8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004dac:	fb02 f303 	mul.w	r3, r2, r3
 8004db0:	617b      	str	r3, [r7, #20]
    break;
 8004db2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004db4:	4b09      	ldr	r3, [pc, #36]	@ (8004ddc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	0e5b      	lsrs	r3, r3, #25
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dcc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004dce:	687b      	ldr	r3, [r7, #4]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	371c      	adds	r7, #28
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	016e3600 	.word	0x016e3600
 8004de4:	00f42400 	.word	0x00f42400

08004de8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004df0:	2300      	movs	r3, #0
 8004df2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004df4:	2300      	movs	r3, #0
 8004df6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 8098 	beq.w	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e06:	2300      	movs	r3, #0
 8004e08:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e0a:	4b43      	ldr	r3, [pc, #268]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10d      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e16:	4b40      	ldr	r3, [pc, #256]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e1a:	4a3f      	ldr	r2, [pc, #252]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e20:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e22:	4b3d      	ldr	r3, [pc, #244]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e2a:	60bb      	str	r3, [r7, #8]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e32:	4b3a      	ldr	r3, [pc, #232]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a39      	ldr	r2, [pc, #228]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e3e:	f7fc fe83 	bl	8001b48 <HAL_GetTick>
 8004e42:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e44:	e009      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e46:	f7fc fe7f 	bl	8001b48 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d902      	bls.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	74fb      	strb	r3, [r7, #19]
        break;
 8004e58:	e005      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e5a:	4b30      	ldr	r3, [pc, #192]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0ef      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004e66:	7cfb      	ldrb	r3, [r7, #19]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d159      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e6c:	4b2a      	ldr	r3, [pc, #168]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e76:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d01e      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d019      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e88:	4b23      	ldr	r3, [pc, #140]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e94:	4b20      	ldr	r3, [pc, #128]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ea0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004eb4:	4a18      	ldr	r2, [pc, #96]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d016      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec6:	f7fc fe3f 	bl	8001b48 <HAL_GetTick>
 8004eca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ecc:	e00b      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ece:	f7fc fe3b 	bl	8001b48 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d902      	bls.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	74fb      	strb	r3, [r7, #19]
            break;
 8004ee4:	e006      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d0ec      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ef4:	7cfb      	ldrb	r3, [r7, #19]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10b      	bne.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004efa:	4b07      	ldr	r3, [pc, #28]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f08:	4903      	ldr	r1, [pc, #12]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f10:	e008      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f12:	7cfb      	ldrb	r3, [r7, #19]
 8004f14:	74bb      	strb	r3, [r7, #18]
 8004f16:	e005      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f20:	7cfb      	ldrb	r3, [r7, #19]
 8004f22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f24:	7c7b      	ldrb	r3, [r7, #17]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d105      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f2a:	4ba7      	ldr	r3, [pc, #668]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f2e:	4aa6      	ldr	r2, [pc, #664]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f34:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f42:	4ba1      	ldr	r3, [pc, #644]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f48:	f023 0203 	bic.w	r2, r3, #3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	499d      	ldr	r1, [pc, #628]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00a      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f64:	4b98      	ldr	r3, [pc, #608]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f6a:	f023 020c 	bic.w	r2, r3, #12
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	4995      	ldr	r1, [pc, #596]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0304 	and.w	r3, r3, #4
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f86:	4b90      	ldr	r3, [pc, #576]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f8c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	498c      	ldr	r1, [pc, #560]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0308 	and.w	r3, r3, #8
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00a      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fa8:	4b87      	ldr	r3, [pc, #540]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	4984      	ldr	r1, [pc, #528]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0310 	and.w	r3, r3, #16
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fca:	4b7f      	ldr	r3, [pc, #508]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	497b      	ldr	r1, [pc, #492]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0320 	and.w	r3, r3, #32
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00a      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fec:	4b76      	ldr	r3, [pc, #472]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	4973      	ldr	r1, [pc, #460]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800500e:	4b6e      	ldr	r3, [pc, #440]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005014:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	496a      	ldr	r1, [pc, #424]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00a      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005030:	4b65      	ldr	r3, [pc, #404]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005036:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	4962      	ldr	r1, [pc, #392]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005040:	4313      	orrs	r3, r2
 8005042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005052:	4b5d      	ldr	r3, [pc, #372]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005058:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005060:	4959      	ldr	r1, [pc, #356]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005062:	4313      	orrs	r3, r2
 8005064:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00a      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005074:	4b54      	ldr	r3, [pc, #336]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005076:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800507a:	f023 0203 	bic.w	r2, r3, #3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005082:	4951      	ldr	r1, [pc, #324]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005084:	4313      	orrs	r3, r2
 8005086:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005096:	4b4c      	ldr	r3, [pc, #304]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800509c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a4:	4948      	ldr	r1, [pc, #288]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d015      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050b8:	4b43      	ldr	r3, [pc, #268]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c6:	4940      	ldr	r1, [pc, #256]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050d6:	d105      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050d8:	4b3b      	ldr	r3, [pc, #236]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	4a3a      	ldr	r2, [pc, #232]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d015      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050f0:	4b35      	ldr	r3, [pc, #212]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050fe:	4932      	ldr	r1, [pc, #200]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800510a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800510e:	d105      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005110:	4b2d      	ldr	r3, [pc, #180]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	4a2c      	ldr	r2, [pc, #176]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005116:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800511a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d015      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005128:	4b27      	ldr	r3, [pc, #156]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800512a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800512e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005136:	4924      	ldr	r1, [pc, #144]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005142:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005146:	d105      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005148:	4b1f      	ldr	r3, [pc, #124]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	4a1e      	ldr	r2, [pc, #120]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800514e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005152:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d015      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005160:	4b19      	ldr	r3, [pc, #100]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005166:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800516e:	4916      	ldr	r1, [pc, #88]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800517a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800517e:	d105      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005180:	4b11      	ldr	r3, [pc, #68]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	4a10      	ldr	r2, [pc, #64]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005186:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800518a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d019      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005198:	4b0b      	ldr	r3, [pc, #44]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800519a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800519e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a6:	4908      	ldr	r1, [pc, #32]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051b6:	d109      	bne.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051b8:	4b03      	ldr	r3, [pc, #12]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	4a02      	ldr	r2, [pc, #8]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051c2:	60d3      	str	r3, [r2, #12]
 80051c4:	e002      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80051c6:	bf00      	nop
 80051c8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d015      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80051d8:	4b29      	ldr	r3, [pc, #164]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e6:	4926      	ldr	r1, [pc, #152]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051f6:	d105      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80051f8:	4b21      	ldr	r3, [pc, #132]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	4a20      	ldr	r2, [pc, #128]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005202:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d015      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005210:	4b1b      	ldr	r3, [pc, #108]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005216:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800521e:	4918      	ldr	r1, [pc, #96]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800522a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800522e:	d105      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005230:	4b13      	ldr	r3, [pc, #76]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	4a12      	ldr	r2, [pc, #72]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800523a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d015      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005248:	4b0d      	ldr	r3, [pc, #52]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800524a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800524e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005256:	490a      	ldr	r1, [pc, #40]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005262:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005266:	d105      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005268:	4b05      	ldr	r3, [pc, #20]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	4a04      	ldr	r2, [pc, #16]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800526e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005272:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005274:	7cbb      	ldrb	r3, [r7, #18]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3718      	adds	r7, #24
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	40021000 	.word	0x40021000

08005284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e049      	b.n	800532a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d106      	bne.n	80052b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7fc fa82 	bl	80017b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	3304      	adds	r3, #4
 80052c0:	4619      	mov	r1, r3
 80052c2:	4610      	mov	r0, r2
 80052c4:	f000 fefa 	bl	80060bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b01      	cmp	r3, #1
 8005346:	d001      	beq.n	800534c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e04c      	b.n	80053e6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a26      	ldr	r2, [pc, #152]	@ (80053f4 <HAL_TIM_Base_Start+0xc0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d022      	beq.n	80053a4 <HAL_TIM_Base_Start+0x70>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005366:	d01d      	beq.n	80053a4 <HAL_TIM_Base_Start+0x70>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a22      	ldr	r2, [pc, #136]	@ (80053f8 <HAL_TIM_Base_Start+0xc4>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d018      	beq.n	80053a4 <HAL_TIM_Base_Start+0x70>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a21      	ldr	r2, [pc, #132]	@ (80053fc <HAL_TIM_Base_Start+0xc8>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d013      	beq.n	80053a4 <HAL_TIM_Base_Start+0x70>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a1f      	ldr	r2, [pc, #124]	@ (8005400 <HAL_TIM_Base_Start+0xcc>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d00e      	beq.n	80053a4 <HAL_TIM_Base_Start+0x70>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a1e      	ldr	r2, [pc, #120]	@ (8005404 <HAL_TIM_Base_Start+0xd0>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d009      	beq.n	80053a4 <HAL_TIM_Base_Start+0x70>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a1c      	ldr	r2, [pc, #112]	@ (8005408 <HAL_TIM_Base_Start+0xd4>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d004      	beq.n	80053a4 <HAL_TIM_Base_Start+0x70>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a1b      	ldr	r2, [pc, #108]	@ (800540c <HAL_TIM_Base_Start+0xd8>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d115      	bne.n	80053d0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689a      	ldr	r2, [r3, #8]
 80053aa:	4b19      	ldr	r3, [pc, #100]	@ (8005410 <HAL_TIM_Base_Start+0xdc>)
 80053ac:	4013      	ands	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2b06      	cmp	r3, #6
 80053b4:	d015      	beq.n	80053e2 <HAL_TIM_Base_Start+0xae>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053bc:	d011      	beq.n	80053e2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0201 	orr.w	r2, r2, #1
 80053cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ce:	e008      	b.n	80053e2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0201 	orr.w	r2, r2, #1
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	e000      	b.n	80053e4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	40012c00 	.word	0x40012c00
 80053f8:	40000400 	.word	0x40000400
 80053fc:	40000800 	.word	0x40000800
 8005400:	40000c00 	.word	0x40000c00
 8005404:	40013400 	.word	0x40013400
 8005408:	40014000 	.word	0x40014000
 800540c:	40015000 	.word	0x40015000
 8005410:	00010007 	.word	0x00010007

08005414 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e049      	b.n	80054ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d106      	bne.n	8005440 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f841 	bl	80054c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	3304      	adds	r3, #4
 8005450:	4619      	mov	r1, r3
 8005452:	4610      	mov	r0, r2
 8005454:	f000 fe32 	bl	80060bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
	...

080054d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d109      	bne.n	80054fc <HAL_TIM_PWM_Start+0x24>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	bf14      	ite	ne
 80054f4:	2301      	movne	r3, #1
 80054f6:	2300      	moveq	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	e03c      	b.n	8005576 <HAL_TIM_PWM_Start+0x9e>
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d109      	bne.n	8005516 <HAL_TIM_PWM_Start+0x3e>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b01      	cmp	r3, #1
 800550c:	bf14      	ite	ne
 800550e:	2301      	movne	r3, #1
 8005510:	2300      	moveq	r3, #0
 8005512:	b2db      	uxtb	r3, r3
 8005514:	e02f      	b.n	8005576 <HAL_TIM_PWM_Start+0x9e>
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b08      	cmp	r3, #8
 800551a:	d109      	bne.n	8005530 <HAL_TIM_PWM_Start+0x58>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b01      	cmp	r3, #1
 8005526:	bf14      	ite	ne
 8005528:	2301      	movne	r3, #1
 800552a:	2300      	moveq	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	e022      	b.n	8005576 <HAL_TIM_PWM_Start+0x9e>
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2b0c      	cmp	r3, #12
 8005534:	d109      	bne.n	800554a <HAL_TIM_PWM_Start+0x72>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b01      	cmp	r3, #1
 8005540:	bf14      	ite	ne
 8005542:	2301      	movne	r3, #1
 8005544:	2300      	moveq	r3, #0
 8005546:	b2db      	uxtb	r3, r3
 8005548:	e015      	b.n	8005576 <HAL_TIM_PWM_Start+0x9e>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b10      	cmp	r3, #16
 800554e:	d109      	bne.n	8005564 <HAL_TIM_PWM_Start+0x8c>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b01      	cmp	r3, #1
 800555a:	bf14      	ite	ne
 800555c:	2301      	movne	r3, #1
 800555e:	2300      	moveq	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	e008      	b.n	8005576 <HAL_TIM_PWM_Start+0x9e>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b01      	cmp	r3, #1
 800556e:	bf14      	ite	ne
 8005570:	2301      	movne	r3, #1
 8005572:	2300      	moveq	r3, #0
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e0a6      	b.n	80056cc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d104      	bne.n	800558e <HAL_TIM_PWM_Start+0xb6>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800558c:	e023      	b.n	80055d6 <HAL_TIM_PWM_Start+0xfe>
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b04      	cmp	r3, #4
 8005592:	d104      	bne.n	800559e <HAL_TIM_PWM_Start+0xc6>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800559c:	e01b      	b.n	80055d6 <HAL_TIM_PWM_Start+0xfe>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d104      	bne.n	80055ae <HAL_TIM_PWM_Start+0xd6>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055ac:	e013      	b.n	80055d6 <HAL_TIM_PWM_Start+0xfe>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b0c      	cmp	r3, #12
 80055b2:	d104      	bne.n	80055be <HAL_TIM_PWM_Start+0xe6>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055bc:	e00b      	b.n	80055d6 <HAL_TIM_PWM_Start+0xfe>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b10      	cmp	r3, #16
 80055c2:	d104      	bne.n	80055ce <HAL_TIM_PWM_Start+0xf6>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055cc:	e003      	b.n	80055d6 <HAL_TIM_PWM_Start+0xfe>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2202      	movs	r2, #2
 80055d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2201      	movs	r2, #1
 80055dc:	6839      	ldr	r1, [r7, #0]
 80055de:	4618      	mov	r0, r3
 80055e0:	f001 f9e6 	bl	80069b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a3a      	ldr	r2, [pc, #232]	@ (80056d4 <HAL_TIM_PWM_Start+0x1fc>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d018      	beq.n	8005620 <HAL_TIM_PWM_Start+0x148>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a39      	ldr	r2, [pc, #228]	@ (80056d8 <HAL_TIM_PWM_Start+0x200>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d013      	beq.n	8005620 <HAL_TIM_PWM_Start+0x148>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a37      	ldr	r2, [pc, #220]	@ (80056dc <HAL_TIM_PWM_Start+0x204>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d00e      	beq.n	8005620 <HAL_TIM_PWM_Start+0x148>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a36      	ldr	r2, [pc, #216]	@ (80056e0 <HAL_TIM_PWM_Start+0x208>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d009      	beq.n	8005620 <HAL_TIM_PWM_Start+0x148>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a34      	ldr	r2, [pc, #208]	@ (80056e4 <HAL_TIM_PWM_Start+0x20c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d004      	beq.n	8005620 <HAL_TIM_PWM_Start+0x148>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a33      	ldr	r2, [pc, #204]	@ (80056e8 <HAL_TIM_PWM_Start+0x210>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d101      	bne.n	8005624 <HAL_TIM_PWM_Start+0x14c>
 8005620:	2301      	movs	r3, #1
 8005622:	e000      	b.n	8005626 <HAL_TIM_PWM_Start+0x14e>
 8005624:	2300      	movs	r3, #0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d007      	beq.n	800563a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005638:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a25      	ldr	r2, [pc, #148]	@ (80056d4 <HAL_TIM_PWM_Start+0x1fc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d022      	beq.n	800568a <HAL_TIM_PWM_Start+0x1b2>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800564c:	d01d      	beq.n	800568a <HAL_TIM_PWM_Start+0x1b2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a26      	ldr	r2, [pc, #152]	@ (80056ec <HAL_TIM_PWM_Start+0x214>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d018      	beq.n	800568a <HAL_TIM_PWM_Start+0x1b2>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a24      	ldr	r2, [pc, #144]	@ (80056f0 <HAL_TIM_PWM_Start+0x218>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d013      	beq.n	800568a <HAL_TIM_PWM_Start+0x1b2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a23      	ldr	r2, [pc, #140]	@ (80056f4 <HAL_TIM_PWM_Start+0x21c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d00e      	beq.n	800568a <HAL_TIM_PWM_Start+0x1b2>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a19      	ldr	r2, [pc, #100]	@ (80056d8 <HAL_TIM_PWM_Start+0x200>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d009      	beq.n	800568a <HAL_TIM_PWM_Start+0x1b2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a18      	ldr	r2, [pc, #96]	@ (80056dc <HAL_TIM_PWM_Start+0x204>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d004      	beq.n	800568a <HAL_TIM_PWM_Start+0x1b2>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a18      	ldr	r2, [pc, #96]	@ (80056e8 <HAL_TIM_PWM_Start+0x210>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d115      	bne.n	80056b6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	4b19      	ldr	r3, [pc, #100]	@ (80056f8 <HAL_TIM_PWM_Start+0x220>)
 8005692:	4013      	ands	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2b06      	cmp	r3, #6
 800569a:	d015      	beq.n	80056c8 <HAL_TIM_PWM_Start+0x1f0>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056a2:	d011      	beq.n	80056c8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0201 	orr.w	r2, r2, #1
 80056b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b4:	e008      	b.n	80056c8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f042 0201 	orr.w	r2, r2, #1
 80056c4:	601a      	str	r2, [r3, #0]
 80056c6:	e000      	b.n	80056ca <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	40012c00 	.word	0x40012c00
 80056d8:	40013400 	.word	0x40013400
 80056dc:	40014000 	.word	0x40014000
 80056e0:	40014400 	.word	0x40014400
 80056e4:	40014800 	.word	0x40014800
 80056e8:	40015000 	.word	0x40015000
 80056ec:	40000400 	.word	0x40000400
 80056f0:	40000800 	.word	0x40000800
 80056f4:	40000c00 	.word	0x40000c00
 80056f8:	00010007 	.word	0x00010007

080056fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e097      	b.n	8005840 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d106      	bne.n	800572a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7fc f87f 	bl	8001828 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2202      	movs	r2, #2
 800572e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6812      	ldr	r2, [r2, #0]
 800573c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005740:	f023 0307 	bic.w	r3, r3, #7
 8005744:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	3304      	adds	r3, #4
 800574e:	4619      	mov	r1, r3
 8005750:	4610      	mov	r0, r2
 8005752:	f000 fcb3 	bl	80060bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	4313      	orrs	r3, r2
 8005776:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800577e:	f023 0303 	bic.w	r3, r3, #3
 8005782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	021b      	lsls	r3, r3, #8
 800578e:	4313      	orrs	r3, r2
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800579c:	f023 030c 	bic.w	r3, r3, #12
 80057a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68da      	ldr	r2, [r3, #12]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	021b      	lsls	r3, r3, #8
 80057b8:	4313      	orrs	r3, r2
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	011a      	lsls	r2, r3, #4
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	031b      	lsls	r3, r3, #12
 80057cc:	4313      	orrs	r3, r2
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80057da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80057e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	011b      	lsls	r3, r3, #4
 80057ee:	4313      	orrs	r3, r2
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005858:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005860:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005868:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005870:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d110      	bne.n	800589a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005878:	7bfb      	ldrb	r3, [r7, #15]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d102      	bne.n	8005884 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800587e:	7b7b      	ldrb	r3, [r7, #13]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d001      	beq.n	8005888 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e069      	b.n	800595c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2202      	movs	r2, #2
 8005894:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005898:	e031      	b.n	80058fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b04      	cmp	r3, #4
 800589e:	d110      	bne.n	80058c2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058a0:	7bbb      	ldrb	r3, [r7, #14]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d102      	bne.n	80058ac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058a6:	7b3b      	ldrb	r3, [r7, #12]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d001      	beq.n	80058b0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e055      	b.n	800595c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2202      	movs	r2, #2
 80058bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058c0:	e01d      	b.n	80058fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d108      	bne.n	80058da <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058c8:	7bbb      	ldrb	r3, [r7, #14]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d105      	bne.n	80058da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058ce:	7b7b      	ldrb	r3, [r7, #13]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d102      	bne.n	80058da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058d4:	7b3b      	ldrb	r3, [r7, #12]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d001      	beq.n	80058de <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e03e      	b.n	800595c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2202      	movs	r2, #2
 80058e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2202      	movs	r2, #2
 80058ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2202      	movs	r2, #2
 80058f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2202      	movs	r2, #2
 80058fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <HAL_TIM_Encoder_Start+0xc4>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	2b04      	cmp	r3, #4
 8005908:	d008      	beq.n	800591c <HAL_TIM_Encoder_Start+0xd4>
 800590a:	e00f      	b.n	800592c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2201      	movs	r2, #1
 8005912:	2100      	movs	r1, #0
 8005914:	4618      	mov	r0, r3
 8005916:	f001 f84b 	bl	80069b0 <TIM_CCxChannelCmd>
      break;
 800591a:	e016      	b.n	800594a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2201      	movs	r2, #1
 8005922:	2104      	movs	r1, #4
 8005924:	4618      	mov	r0, r3
 8005926:	f001 f843 	bl	80069b0 <TIM_CCxChannelCmd>
      break;
 800592a:	e00e      	b.n	800594a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2201      	movs	r2, #1
 8005932:	2100      	movs	r1, #0
 8005934:	4618      	mov	r0, r3
 8005936:	f001 f83b 	bl	80069b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2201      	movs	r2, #1
 8005940:	2104      	movs	r1, #4
 8005942:	4618      	mov	r0, r3
 8005944:	f001 f834 	bl	80069b0 <TIM_CCxChannelCmd>
      break;
 8005948:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 0201 	orr.w	r2, r2, #1
 8005958:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d020      	beq.n	80059c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d01b      	beq.n	80059c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f06f 0202 	mvn.w	r2, #2
 8005998:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	f003 0303 	and.w	r3, r3, #3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fb66 	bl	8006080 <HAL_TIM_IC_CaptureCallback>
 80059b4:	e005      	b.n	80059c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fb58 	bl	800606c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fb69 	bl	8006094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f003 0304 	and.w	r3, r3, #4
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d020      	beq.n	8005a14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d01b      	beq.n	8005a14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f06f 0204 	mvn.w	r2, #4
 80059e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2202      	movs	r2, #2
 80059ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 fb40 	bl	8006080 <HAL_TIM_IC_CaptureCallback>
 8005a00:	e005      	b.n	8005a0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fb32 	bl	800606c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 fb43 	bl	8006094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f003 0308 	and.w	r3, r3, #8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d020      	beq.n	8005a60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f003 0308 	and.w	r3, r3, #8
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d01b      	beq.n	8005a60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f06f 0208 	mvn.w	r2, #8
 8005a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2204      	movs	r2, #4
 8005a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	f003 0303 	and.w	r3, r3, #3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fb1a 	bl	8006080 <HAL_TIM_IC_CaptureCallback>
 8005a4c:	e005      	b.n	8005a5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fb0c 	bl	800606c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fb1d 	bl	8006094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f003 0310 	and.w	r3, r3, #16
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d020      	beq.n	8005aac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f003 0310 	and.w	r3, r3, #16
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01b      	beq.n	8005aac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f06f 0210 	mvn.w	r2, #16
 8005a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2208      	movs	r2, #8
 8005a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 faf4 	bl	8006080 <HAL_TIM_IC_CaptureCallback>
 8005a98:	e005      	b.n	8005aa6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fae6 	bl	800606c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 faf7 	bl	8006094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00c      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d007      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f06f 0201 	mvn.w	r2, #1
 8005ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 fac4 	bl	8006058 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d104      	bne.n	8005ae4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00c      	beq.n	8005afe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d007      	beq.n	8005afe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f001 f81f 	bl	8006b3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00c      	beq.n	8005b22 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d007      	beq.n	8005b22 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f001 f817 	bl	8006b50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00c      	beq.n	8005b46 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d007      	beq.n	8005b46 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 fab1 	bl	80060a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	f003 0320 	and.w	r3, r3, #32
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00c      	beq.n	8005b6a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f003 0320 	and.w	r3, r3, #32
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d007      	beq.n	8005b6a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f06f 0220 	mvn.w	r2, #32
 8005b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 ffdf 	bl	8006b28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00c      	beq.n	8005b8e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d007      	beq.n	8005b8e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 ffeb 	bl	8006b64 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00c      	beq.n	8005bb2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d007      	beq.n	8005bb2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 ffe3 	bl	8006b78 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00c      	beq.n	8005bd6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d007      	beq.n	8005bd6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 ffdb 	bl	8006b8c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00c      	beq.n	8005bfa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d007      	beq.n	8005bfa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 ffd3 	bl	8006ba0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bfa:	bf00      	nop
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
	...

08005c04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d101      	bne.n	8005c22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c1e:	2302      	movs	r3, #2
 8005c20:	e0ff      	b.n	8005e22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b14      	cmp	r3, #20
 8005c2e:	f200 80f0 	bhi.w	8005e12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c32:	a201      	add	r2, pc, #4	@ (adr r2, 8005c38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c38:	08005c8d 	.word	0x08005c8d
 8005c3c:	08005e13 	.word	0x08005e13
 8005c40:	08005e13 	.word	0x08005e13
 8005c44:	08005e13 	.word	0x08005e13
 8005c48:	08005ccd 	.word	0x08005ccd
 8005c4c:	08005e13 	.word	0x08005e13
 8005c50:	08005e13 	.word	0x08005e13
 8005c54:	08005e13 	.word	0x08005e13
 8005c58:	08005d0f 	.word	0x08005d0f
 8005c5c:	08005e13 	.word	0x08005e13
 8005c60:	08005e13 	.word	0x08005e13
 8005c64:	08005e13 	.word	0x08005e13
 8005c68:	08005d4f 	.word	0x08005d4f
 8005c6c:	08005e13 	.word	0x08005e13
 8005c70:	08005e13 	.word	0x08005e13
 8005c74:	08005e13 	.word	0x08005e13
 8005c78:	08005d91 	.word	0x08005d91
 8005c7c:	08005e13 	.word	0x08005e13
 8005c80:	08005e13 	.word	0x08005e13
 8005c84:	08005e13 	.word	0x08005e13
 8005c88:	08005dd1 	.word	0x08005dd1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68b9      	ldr	r1, [r7, #8]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 fac6 	bl	8006224 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	699a      	ldr	r2, [r3, #24]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0208 	orr.w	r2, r2, #8
 8005ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699a      	ldr	r2, [r3, #24]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0204 	bic.w	r2, r2, #4
 8005cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6999      	ldr	r1, [r3, #24]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	691a      	ldr	r2, [r3, #16]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	619a      	str	r2, [r3, #24]
      break;
 8005cca:	e0a5      	b.n	8005e18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68b9      	ldr	r1, [r7, #8]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 fb40 	bl	8006358 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	699a      	ldr	r2, [r3, #24]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ce6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	699a      	ldr	r2, [r3, #24]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6999      	ldr	r1, [r3, #24]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	021a      	lsls	r2, r3, #8
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	619a      	str	r2, [r3, #24]
      break;
 8005d0c:	e084      	b.n	8005e18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68b9      	ldr	r1, [r7, #8]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 fbb3 	bl	8006480 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	69da      	ldr	r2, [r3, #28]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f042 0208 	orr.w	r2, r2, #8
 8005d28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69da      	ldr	r2, [r3, #28]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 0204 	bic.w	r2, r2, #4
 8005d38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69d9      	ldr	r1, [r3, #28]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	691a      	ldr	r2, [r3, #16]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	61da      	str	r2, [r3, #28]
      break;
 8005d4c:	e064      	b.n	8005e18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68b9      	ldr	r1, [r7, #8]
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 fc25 	bl	80065a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69da      	ldr	r2, [r3, #28]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	69da      	ldr	r2, [r3, #28]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69d9      	ldr	r1, [r3, #28]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	021a      	lsls	r2, r3, #8
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	61da      	str	r2, [r3, #28]
      break;
 8005d8e:	e043      	b.n	8005e18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68b9      	ldr	r1, [r7, #8]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 fc98 	bl	80066cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f042 0208 	orr.w	r2, r2, #8
 8005daa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 0204 	bic.w	r2, r2, #4
 8005dba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	691a      	ldr	r2, [r3, #16]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005dce:	e023      	b.n	8005e18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68b9      	ldr	r1, [r7, #8]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 fce2 	bl	80067a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dfa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	021a      	lsls	r2, r3, #8
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005e10:	e002      	b.n	8005e18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	75fb      	strb	r3, [r7, #23]
      break;
 8005e16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop

08005e2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_TIM_ConfigClockSource+0x1c>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e0f6      	b.n	8006036 <HAL_TIM_ConfigClockSource+0x20a>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005e66:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005e6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a6f      	ldr	r2, [pc, #444]	@ (8006040 <HAL_TIM_ConfigClockSource+0x214>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	f000 80c1 	beq.w	800600a <HAL_TIM_ConfigClockSource+0x1de>
 8005e88:	4a6d      	ldr	r2, [pc, #436]	@ (8006040 <HAL_TIM_ConfigClockSource+0x214>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	f200 80c6 	bhi.w	800601c <HAL_TIM_ConfigClockSource+0x1f0>
 8005e90:	4a6c      	ldr	r2, [pc, #432]	@ (8006044 <HAL_TIM_ConfigClockSource+0x218>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	f000 80b9 	beq.w	800600a <HAL_TIM_ConfigClockSource+0x1de>
 8005e98:	4a6a      	ldr	r2, [pc, #424]	@ (8006044 <HAL_TIM_ConfigClockSource+0x218>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	f200 80be 	bhi.w	800601c <HAL_TIM_ConfigClockSource+0x1f0>
 8005ea0:	4a69      	ldr	r2, [pc, #420]	@ (8006048 <HAL_TIM_ConfigClockSource+0x21c>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	f000 80b1 	beq.w	800600a <HAL_TIM_ConfigClockSource+0x1de>
 8005ea8:	4a67      	ldr	r2, [pc, #412]	@ (8006048 <HAL_TIM_ConfigClockSource+0x21c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	f200 80b6 	bhi.w	800601c <HAL_TIM_ConfigClockSource+0x1f0>
 8005eb0:	4a66      	ldr	r2, [pc, #408]	@ (800604c <HAL_TIM_ConfigClockSource+0x220>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	f000 80a9 	beq.w	800600a <HAL_TIM_ConfigClockSource+0x1de>
 8005eb8:	4a64      	ldr	r2, [pc, #400]	@ (800604c <HAL_TIM_ConfigClockSource+0x220>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	f200 80ae 	bhi.w	800601c <HAL_TIM_ConfigClockSource+0x1f0>
 8005ec0:	4a63      	ldr	r2, [pc, #396]	@ (8006050 <HAL_TIM_ConfigClockSource+0x224>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	f000 80a1 	beq.w	800600a <HAL_TIM_ConfigClockSource+0x1de>
 8005ec8:	4a61      	ldr	r2, [pc, #388]	@ (8006050 <HAL_TIM_ConfigClockSource+0x224>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	f200 80a6 	bhi.w	800601c <HAL_TIM_ConfigClockSource+0x1f0>
 8005ed0:	4a60      	ldr	r2, [pc, #384]	@ (8006054 <HAL_TIM_ConfigClockSource+0x228>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	f000 8099 	beq.w	800600a <HAL_TIM_ConfigClockSource+0x1de>
 8005ed8:	4a5e      	ldr	r2, [pc, #376]	@ (8006054 <HAL_TIM_ConfigClockSource+0x228>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	f200 809e 	bhi.w	800601c <HAL_TIM_ConfigClockSource+0x1f0>
 8005ee0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005ee4:	f000 8091 	beq.w	800600a <HAL_TIM_ConfigClockSource+0x1de>
 8005ee8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005eec:	f200 8096 	bhi.w	800601c <HAL_TIM_ConfigClockSource+0x1f0>
 8005ef0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ef4:	f000 8089 	beq.w	800600a <HAL_TIM_ConfigClockSource+0x1de>
 8005ef8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005efc:	f200 808e 	bhi.w	800601c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f04:	d03e      	beq.n	8005f84 <HAL_TIM_ConfigClockSource+0x158>
 8005f06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f0a:	f200 8087 	bhi.w	800601c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f12:	f000 8086 	beq.w	8006022 <HAL_TIM_ConfigClockSource+0x1f6>
 8005f16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f1a:	d87f      	bhi.n	800601c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f1c:	2b70      	cmp	r3, #112	@ 0x70
 8005f1e:	d01a      	beq.n	8005f56 <HAL_TIM_ConfigClockSource+0x12a>
 8005f20:	2b70      	cmp	r3, #112	@ 0x70
 8005f22:	d87b      	bhi.n	800601c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f24:	2b60      	cmp	r3, #96	@ 0x60
 8005f26:	d050      	beq.n	8005fca <HAL_TIM_ConfigClockSource+0x19e>
 8005f28:	2b60      	cmp	r3, #96	@ 0x60
 8005f2a:	d877      	bhi.n	800601c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f2c:	2b50      	cmp	r3, #80	@ 0x50
 8005f2e:	d03c      	beq.n	8005faa <HAL_TIM_ConfigClockSource+0x17e>
 8005f30:	2b50      	cmp	r3, #80	@ 0x50
 8005f32:	d873      	bhi.n	800601c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f34:	2b40      	cmp	r3, #64	@ 0x40
 8005f36:	d058      	beq.n	8005fea <HAL_TIM_ConfigClockSource+0x1be>
 8005f38:	2b40      	cmp	r3, #64	@ 0x40
 8005f3a:	d86f      	bhi.n	800601c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f3c:	2b30      	cmp	r3, #48	@ 0x30
 8005f3e:	d064      	beq.n	800600a <HAL_TIM_ConfigClockSource+0x1de>
 8005f40:	2b30      	cmp	r3, #48	@ 0x30
 8005f42:	d86b      	bhi.n	800601c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f44:	2b20      	cmp	r3, #32
 8005f46:	d060      	beq.n	800600a <HAL_TIM_ConfigClockSource+0x1de>
 8005f48:	2b20      	cmp	r3, #32
 8005f4a:	d867      	bhi.n	800601c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d05c      	beq.n	800600a <HAL_TIM_ConfigClockSource+0x1de>
 8005f50:	2b10      	cmp	r3, #16
 8005f52:	d05a      	beq.n	800600a <HAL_TIM_ConfigClockSource+0x1de>
 8005f54:	e062      	b.n	800601c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f66:	f000 fd03 	bl	8006970 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	609a      	str	r2, [r3, #8]
      break;
 8005f82:	e04f      	b.n	8006024 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f94:	f000 fcec 	bl	8006970 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689a      	ldr	r2, [r3, #8]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fa6:	609a      	str	r2, [r3, #8]
      break;
 8005fa8:	e03c      	b.n	8006024 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f000 fc5e 	bl	8006878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2150      	movs	r1, #80	@ 0x50
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 fcb7 	bl	8006936 <TIM_ITRx_SetConfig>
      break;
 8005fc8:	e02c      	b.n	8006024 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	f000 fc7d 	bl	80068d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2160      	movs	r1, #96	@ 0x60
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 fca7 	bl	8006936 <TIM_ITRx_SetConfig>
      break;
 8005fe8:	e01c      	b.n	8006024 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	f000 fc3e 	bl	8006878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2140      	movs	r1, #64	@ 0x40
 8006002:	4618      	mov	r0, r3
 8006004:	f000 fc97 	bl	8006936 <TIM_ITRx_SetConfig>
      break;
 8006008:	e00c      	b.n	8006024 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4619      	mov	r1, r3
 8006014:	4610      	mov	r0, r2
 8006016:	f000 fc8e 	bl	8006936 <TIM_ITRx_SetConfig>
      break;
 800601a:	e003      	b.n	8006024 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	73fb      	strb	r3, [r7, #15]
      break;
 8006020:	e000      	b.n	8006024 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006022:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006034:	7bfb      	ldrb	r3, [r7, #15]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	00100070 	.word	0x00100070
 8006044:	00100060 	.word	0x00100060
 8006048:	00100050 	.word	0x00100050
 800604c:	00100040 	.word	0x00100040
 8006050:	00100030 	.word	0x00100030
 8006054:	00100020 	.word	0x00100020

08006058 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a4c      	ldr	r2, [pc, #304]	@ (8006200 <TIM_Base_SetConfig+0x144>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d017      	beq.n	8006104 <TIM_Base_SetConfig+0x48>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060da:	d013      	beq.n	8006104 <TIM_Base_SetConfig+0x48>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a49      	ldr	r2, [pc, #292]	@ (8006204 <TIM_Base_SetConfig+0x148>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d00f      	beq.n	8006104 <TIM_Base_SetConfig+0x48>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a48      	ldr	r2, [pc, #288]	@ (8006208 <TIM_Base_SetConfig+0x14c>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d00b      	beq.n	8006104 <TIM_Base_SetConfig+0x48>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a47      	ldr	r2, [pc, #284]	@ (800620c <TIM_Base_SetConfig+0x150>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d007      	beq.n	8006104 <TIM_Base_SetConfig+0x48>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a46      	ldr	r2, [pc, #280]	@ (8006210 <TIM_Base_SetConfig+0x154>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d003      	beq.n	8006104 <TIM_Base_SetConfig+0x48>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a45      	ldr	r2, [pc, #276]	@ (8006214 <TIM_Base_SetConfig+0x158>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d108      	bne.n	8006116 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800610a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	4313      	orrs	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a39      	ldr	r2, [pc, #228]	@ (8006200 <TIM_Base_SetConfig+0x144>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d023      	beq.n	8006166 <TIM_Base_SetConfig+0xaa>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006124:	d01f      	beq.n	8006166 <TIM_Base_SetConfig+0xaa>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a36      	ldr	r2, [pc, #216]	@ (8006204 <TIM_Base_SetConfig+0x148>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d01b      	beq.n	8006166 <TIM_Base_SetConfig+0xaa>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a35      	ldr	r2, [pc, #212]	@ (8006208 <TIM_Base_SetConfig+0x14c>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d017      	beq.n	8006166 <TIM_Base_SetConfig+0xaa>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a34      	ldr	r2, [pc, #208]	@ (800620c <TIM_Base_SetConfig+0x150>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d013      	beq.n	8006166 <TIM_Base_SetConfig+0xaa>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a33      	ldr	r2, [pc, #204]	@ (8006210 <TIM_Base_SetConfig+0x154>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d00f      	beq.n	8006166 <TIM_Base_SetConfig+0xaa>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a33      	ldr	r2, [pc, #204]	@ (8006218 <TIM_Base_SetConfig+0x15c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d00b      	beq.n	8006166 <TIM_Base_SetConfig+0xaa>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a32      	ldr	r2, [pc, #200]	@ (800621c <TIM_Base_SetConfig+0x160>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d007      	beq.n	8006166 <TIM_Base_SetConfig+0xaa>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a31      	ldr	r2, [pc, #196]	@ (8006220 <TIM_Base_SetConfig+0x164>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d003      	beq.n	8006166 <TIM_Base_SetConfig+0xaa>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a2c      	ldr	r2, [pc, #176]	@ (8006214 <TIM_Base_SetConfig+0x158>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d108      	bne.n	8006178 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800616c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	4313      	orrs	r3, r2
 8006176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	689a      	ldr	r2, [r3, #8]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a18      	ldr	r2, [pc, #96]	@ (8006200 <TIM_Base_SetConfig+0x144>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d013      	beq.n	80061cc <TIM_Base_SetConfig+0x110>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a1a      	ldr	r2, [pc, #104]	@ (8006210 <TIM_Base_SetConfig+0x154>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d00f      	beq.n	80061cc <TIM_Base_SetConfig+0x110>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a1a      	ldr	r2, [pc, #104]	@ (8006218 <TIM_Base_SetConfig+0x15c>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d00b      	beq.n	80061cc <TIM_Base_SetConfig+0x110>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a19      	ldr	r2, [pc, #100]	@ (800621c <TIM_Base_SetConfig+0x160>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d007      	beq.n	80061cc <TIM_Base_SetConfig+0x110>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a18      	ldr	r2, [pc, #96]	@ (8006220 <TIM_Base_SetConfig+0x164>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d003      	beq.n	80061cc <TIM_Base_SetConfig+0x110>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a13      	ldr	r2, [pc, #76]	@ (8006214 <TIM_Base_SetConfig+0x158>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d103      	bne.n	80061d4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	691a      	ldr	r2, [r3, #16]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d105      	bne.n	80061f2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	f023 0201 	bic.w	r2, r3, #1
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	611a      	str	r2, [r3, #16]
  }
}
 80061f2:	bf00      	nop
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	40012c00 	.word	0x40012c00
 8006204:	40000400 	.word	0x40000400
 8006208:	40000800 	.word	0x40000800
 800620c:	40000c00 	.word	0x40000c00
 8006210:	40013400 	.word	0x40013400
 8006214:	40015000 	.word	0x40015000
 8006218:	40014000 	.word	0x40014000
 800621c:	40014400 	.word	0x40014400
 8006220:	40014800 	.word	0x40014800

08006224 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006224:	b480      	push	{r7}
 8006226:	b087      	sub	sp, #28
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	f023 0201 	bic.w	r2, r3, #1
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 0303 	bic.w	r3, r3, #3
 800625e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4313      	orrs	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f023 0302 	bic.w	r3, r3, #2
 8006270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	4313      	orrs	r3, r2
 800627a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a30      	ldr	r2, [pc, #192]	@ (8006340 <TIM_OC1_SetConfig+0x11c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d013      	beq.n	80062ac <TIM_OC1_SetConfig+0x88>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a2f      	ldr	r2, [pc, #188]	@ (8006344 <TIM_OC1_SetConfig+0x120>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d00f      	beq.n	80062ac <TIM_OC1_SetConfig+0x88>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a2e      	ldr	r2, [pc, #184]	@ (8006348 <TIM_OC1_SetConfig+0x124>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d00b      	beq.n	80062ac <TIM_OC1_SetConfig+0x88>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a2d      	ldr	r2, [pc, #180]	@ (800634c <TIM_OC1_SetConfig+0x128>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d007      	beq.n	80062ac <TIM_OC1_SetConfig+0x88>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a2c      	ldr	r2, [pc, #176]	@ (8006350 <TIM_OC1_SetConfig+0x12c>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d003      	beq.n	80062ac <TIM_OC1_SetConfig+0x88>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a2b      	ldr	r2, [pc, #172]	@ (8006354 <TIM_OC1_SetConfig+0x130>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d10c      	bne.n	80062c6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f023 0308 	bic.w	r3, r3, #8
 80062b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f023 0304 	bic.w	r3, r3, #4
 80062c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006340 <TIM_OC1_SetConfig+0x11c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d013      	beq.n	80062f6 <TIM_OC1_SetConfig+0xd2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a1c      	ldr	r2, [pc, #112]	@ (8006344 <TIM_OC1_SetConfig+0x120>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00f      	beq.n	80062f6 <TIM_OC1_SetConfig+0xd2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a1b      	ldr	r2, [pc, #108]	@ (8006348 <TIM_OC1_SetConfig+0x124>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00b      	beq.n	80062f6 <TIM_OC1_SetConfig+0xd2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a1a      	ldr	r2, [pc, #104]	@ (800634c <TIM_OC1_SetConfig+0x128>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d007      	beq.n	80062f6 <TIM_OC1_SetConfig+0xd2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a19      	ldr	r2, [pc, #100]	@ (8006350 <TIM_OC1_SetConfig+0x12c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d003      	beq.n	80062f6 <TIM_OC1_SetConfig+0xd2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a18      	ldr	r2, [pc, #96]	@ (8006354 <TIM_OC1_SetConfig+0x130>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d111      	bne.n	800631a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	4313      	orrs	r3, r2
 800630e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	4313      	orrs	r3, r2
 8006318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	621a      	str	r2, [r3, #32]
}
 8006334:	bf00      	nop
 8006336:	371c      	adds	r7, #28
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	40012c00 	.word	0x40012c00
 8006344:	40013400 	.word	0x40013400
 8006348:	40014000 	.word	0x40014000
 800634c:	40014400 	.word	0x40014400
 8006350:	40014800 	.word	0x40014800
 8006354:	40015000 	.word	0x40015000

08006358 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a1b      	ldr	r3, [r3, #32]
 800636c:	f023 0210 	bic.w	r2, r3, #16
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006386:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800638a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	021b      	lsls	r3, r3, #8
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	4313      	orrs	r3, r2
 800639e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f023 0320 	bic.w	r3, r3, #32
 80063a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	011b      	lsls	r3, r3, #4
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a2c      	ldr	r2, [pc, #176]	@ (8006468 <TIM_OC2_SetConfig+0x110>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d007      	beq.n	80063cc <TIM_OC2_SetConfig+0x74>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a2b      	ldr	r2, [pc, #172]	@ (800646c <TIM_OC2_SetConfig+0x114>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d003      	beq.n	80063cc <TIM_OC2_SetConfig+0x74>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a2a      	ldr	r2, [pc, #168]	@ (8006470 <TIM_OC2_SetConfig+0x118>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d10d      	bne.n	80063e8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	011b      	lsls	r3, r3, #4
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	4313      	orrs	r3, r2
 80063de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a1f      	ldr	r2, [pc, #124]	@ (8006468 <TIM_OC2_SetConfig+0x110>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d013      	beq.n	8006418 <TIM_OC2_SetConfig+0xc0>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a1e      	ldr	r2, [pc, #120]	@ (800646c <TIM_OC2_SetConfig+0x114>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d00f      	beq.n	8006418 <TIM_OC2_SetConfig+0xc0>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a1e      	ldr	r2, [pc, #120]	@ (8006474 <TIM_OC2_SetConfig+0x11c>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d00b      	beq.n	8006418 <TIM_OC2_SetConfig+0xc0>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a1d      	ldr	r2, [pc, #116]	@ (8006478 <TIM_OC2_SetConfig+0x120>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d007      	beq.n	8006418 <TIM_OC2_SetConfig+0xc0>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a1c      	ldr	r2, [pc, #112]	@ (800647c <TIM_OC2_SetConfig+0x124>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d003      	beq.n	8006418 <TIM_OC2_SetConfig+0xc0>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a17      	ldr	r2, [pc, #92]	@ (8006470 <TIM_OC2_SetConfig+0x118>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d113      	bne.n	8006440 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800641e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006426:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	4313      	orrs	r3, r2
 8006432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	4313      	orrs	r3, r2
 800643e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	621a      	str	r2, [r3, #32]
}
 800645a:	bf00      	nop
 800645c:	371c      	adds	r7, #28
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	40012c00 	.word	0x40012c00
 800646c:	40013400 	.word	0x40013400
 8006470:	40015000 	.word	0x40015000
 8006474:	40014000 	.word	0x40014000
 8006478:	40014400 	.word	0x40014400
 800647c:	40014800 	.word	0x40014800

08006480 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006480:	b480      	push	{r7}
 8006482:	b087      	sub	sp, #28
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a1b      	ldr	r3, [r3, #32]
 8006494:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 0303 	bic.w	r3, r3, #3
 80064ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	021b      	lsls	r3, r3, #8
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a2b      	ldr	r2, [pc, #172]	@ (800658c <TIM_OC3_SetConfig+0x10c>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d007      	beq.n	80064f2 <TIM_OC3_SetConfig+0x72>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a2a      	ldr	r2, [pc, #168]	@ (8006590 <TIM_OC3_SetConfig+0x110>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d003      	beq.n	80064f2 <TIM_OC3_SetConfig+0x72>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a29      	ldr	r2, [pc, #164]	@ (8006594 <TIM_OC3_SetConfig+0x114>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d10d      	bne.n	800650e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	021b      	lsls	r3, r3, #8
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	4313      	orrs	r3, r2
 8006504:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800650c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a1e      	ldr	r2, [pc, #120]	@ (800658c <TIM_OC3_SetConfig+0x10c>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d013      	beq.n	800653e <TIM_OC3_SetConfig+0xbe>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a1d      	ldr	r2, [pc, #116]	@ (8006590 <TIM_OC3_SetConfig+0x110>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d00f      	beq.n	800653e <TIM_OC3_SetConfig+0xbe>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a1d      	ldr	r2, [pc, #116]	@ (8006598 <TIM_OC3_SetConfig+0x118>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d00b      	beq.n	800653e <TIM_OC3_SetConfig+0xbe>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a1c      	ldr	r2, [pc, #112]	@ (800659c <TIM_OC3_SetConfig+0x11c>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d007      	beq.n	800653e <TIM_OC3_SetConfig+0xbe>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a1b      	ldr	r2, [pc, #108]	@ (80065a0 <TIM_OC3_SetConfig+0x120>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d003      	beq.n	800653e <TIM_OC3_SetConfig+0xbe>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a16      	ldr	r2, [pc, #88]	@ (8006594 <TIM_OC3_SetConfig+0x114>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d113      	bne.n	8006566 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006544:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800654c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	011b      	lsls	r3, r3, #4
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	4313      	orrs	r3, r2
 8006558:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	011b      	lsls	r3, r3, #4
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	4313      	orrs	r3, r2
 8006564:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	621a      	str	r2, [r3, #32]
}
 8006580:	bf00      	nop
 8006582:	371c      	adds	r7, #28
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	40012c00 	.word	0x40012c00
 8006590:	40013400 	.word	0x40013400
 8006594:	40015000 	.word	0x40015000
 8006598:	40014000 	.word	0x40014000
 800659c:	40014400 	.word	0x40014400
 80065a0:	40014800 	.word	0x40014800

080065a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b087      	sub	sp, #28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a1b      	ldr	r3, [r3, #32]
 80065b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	021b      	lsls	r3, r3, #8
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	031b      	lsls	r3, r3, #12
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a2c      	ldr	r2, [pc, #176]	@ (80066b4 <TIM_OC4_SetConfig+0x110>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d007      	beq.n	8006618 <TIM_OC4_SetConfig+0x74>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a2b      	ldr	r2, [pc, #172]	@ (80066b8 <TIM_OC4_SetConfig+0x114>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d003      	beq.n	8006618 <TIM_OC4_SetConfig+0x74>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a2a      	ldr	r2, [pc, #168]	@ (80066bc <TIM_OC4_SetConfig+0x118>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d10d      	bne.n	8006634 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800661e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	031b      	lsls	r3, r3, #12
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	4313      	orrs	r3, r2
 800662a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006632:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a1f      	ldr	r2, [pc, #124]	@ (80066b4 <TIM_OC4_SetConfig+0x110>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d013      	beq.n	8006664 <TIM_OC4_SetConfig+0xc0>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a1e      	ldr	r2, [pc, #120]	@ (80066b8 <TIM_OC4_SetConfig+0x114>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d00f      	beq.n	8006664 <TIM_OC4_SetConfig+0xc0>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a1e      	ldr	r2, [pc, #120]	@ (80066c0 <TIM_OC4_SetConfig+0x11c>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d00b      	beq.n	8006664 <TIM_OC4_SetConfig+0xc0>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a1d      	ldr	r2, [pc, #116]	@ (80066c4 <TIM_OC4_SetConfig+0x120>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d007      	beq.n	8006664 <TIM_OC4_SetConfig+0xc0>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a1c      	ldr	r2, [pc, #112]	@ (80066c8 <TIM_OC4_SetConfig+0x124>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d003      	beq.n	8006664 <TIM_OC4_SetConfig+0xc0>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a17      	ldr	r2, [pc, #92]	@ (80066bc <TIM_OC4_SetConfig+0x118>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d113      	bne.n	800668c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800666a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006672:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	019b      	lsls	r3, r3, #6
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	4313      	orrs	r3, r2
 800667e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	019b      	lsls	r3, r3, #6
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	4313      	orrs	r3, r2
 800668a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	621a      	str	r2, [r3, #32]
}
 80066a6:	bf00      	nop
 80066a8:	371c      	adds	r7, #28
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	40012c00 	.word	0x40012c00
 80066b8:	40013400 	.word	0x40013400
 80066bc:	40015000 	.word	0x40015000
 80066c0:	40014000 	.word	0x40014000
 80066c4:	40014400 	.word	0x40014400
 80066c8:	40014800 	.word	0x40014800

080066cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b087      	sub	sp, #28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	4313      	orrs	r3, r2
 8006708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006710:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	041b      	lsls	r3, r3, #16
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	4313      	orrs	r3, r2
 800671c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a19      	ldr	r2, [pc, #100]	@ (8006788 <TIM_OC5_SetConfig+0xbc>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d013      	beq.n	800674e <TIM_OC5_SetConfig+0x82>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a18      	ldr	r2, [pc, #96]	@ (800678c <TIM_OC5_SetConfig+0xc0>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d00f      	beq.n	800674e <TIM_OC5_SetConfig+0x82>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a17      	ldr	r2, [pc, #92]	@ (8006790 <TIM_OC5_SetConfig+0xc4>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d00b      	beq.n	800674e <TIM_OC5_SetConfig+0x82>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a16      	ldr	r2, [pc, #88]	@ (8006794 <TIM_OC5_SetConfig+0xc8>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d007      	beq.n	800674e <TIM_OC5_SetConfig+0x82>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a15      	ldr	r2, [pc, #84]	@ (8006798 <TIM_OC5_SetConfig+0xcc>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d003      	beq.n	800674e <TIM_OC5_SetConfig+0x82>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a14      	ldr	r2, [pc, #80]	@ (800679c <TIM_OC5_SetConfig+0xd0>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d109      	bne.n	8006762 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006754:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	021b      	lsls	r3, r3, #8
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	4313      	orrs	r3, r2
 8006760:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	685a      	ldr	r2, [r3, #4]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	621a      	str	r2, [r3, #32]
}
 800677c:	bf00      	nop
 800677e:	371c      	adds	r7, #28
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	40012c00 	.word	0x40012c00
 800678c:	40013400 	.word	0x40013400
 8006790:	40014000 	.word	0x40014000
 8006794:	40014400 	.word	0x40014400
 8006798:	40014800 	.word	0x40014800
 800679c:	40015000 	.word	0x40015000

080067a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	021b      	lsls	r3, r3, #8
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	4313      	orrs	r3, r2
 80067de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80067e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	051b      	lsls	r3, r3, #20
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a1a      	ldr	r2, [pc, #104]	@ (8006860 <TIM_OC6_SetConfig+0xc0>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d013      	beq.n	8006824 <TIM_OC6_SetConfig+0x84>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a19      	ldr	r2, [pc, #100]	@ (8006864 <TIM_OC6_SetConfig+0xc4>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d00f      	beq.n	8006824 <TIM_OC6_SetConfig+0x84>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a18      	ldr	r2, [pc, #96]	@ (8006868 <TIM_OC6_SetConfig+0xc8>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d00b      	beq.n	8006824 <TIM_OC6_SetConfig+0x84>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a17      	ldr	r2, [pc, #92]	@ (800686c <TIM_OC6_SetConfig+0xcc>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d007      	beq.n	8006824 <TIM_OC6_SetConfig+0x84>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a16      	ldr	r2, [pc, #88]	@ (8006870 <TIM_OC6_SetConfig+0xd0>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d003      	beq.n	8006824 <TIM_OC6_SetConfig+0x84>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a15      	ldr	r2, [pc, #84]	@ (8006874 <TIM_OC6_SetConfig+0xd4>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d109      	bne.n	8006838 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800682a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	029b      	lsls	r3, r3, #10
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	4313      	orrs	r3, r2
 8006836:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685a      	ldr	r2, [r3, #4]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	621a      	str	r2, [r3, #32]
}
 8006852:	bf00      	nop
 8006854:	371c      	adds	r7, #28
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	40012c00 	.word	0x40012c00
 8006864:	40013400 	.word	0x40013400
 8006868:	40014000 	.word	0x40014000
 800686c:	40014400 	.word	0x40014400
 8006870:	40014800 	.word	0x40014800
 8006874:	40015000 	.word	0x40015000

08006878 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006878:	b480      	push	{r7}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	f023 0201 	bic.w	r2, r3, #1
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	011b      	lsls	r3, r3, #4
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f023 030a 	bic.w	r3, r3, #10
 80068b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	621a      	str	r2, [r3, #32]
}
 80068ca:	bf00      	nop
 80068cc:	371c      	adds	r7, #28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b087      	sub	sp, #28
 80068da:	af00      	add	r7, sp, #0
 80068dc:	60f8      	str	r0, [r7, #12]
 80068de:	60b9      	str	r1, [r7, #8]
 80068e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	f023 0210 	bic.w	r2, r3, #16
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006900:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	031b      	lsls	r3, r3, #12
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	4313      	orrs	r3, r2
 800690a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006912:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	011b      	lsls	r3, r3, #4
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	4313      	orrs	r3, r2
 800691c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	621a      	str	r2, [r3, #32]
}
 800692a:	bf00      	nop
 800692c:	371c      	adds	r7, #28
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006936:	b480      	push	{r7}
 8006938:	b085      	sub	sp, #20
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800694c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006950:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4313      	orrs	r3, r2
 8006958:	f043 0307 	orr.w	r3, r3, #7
 800695c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	609a      	str	r2, [r3, #8]
}
 8006964:	bf00      	nop
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800698a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	021a      	lsls	r2, r3, #8
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	431a      	orrs	r2, r3
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	4313      	orrs	r3, r2
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	4313      	orrs	r3, r2
 800699c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	609a      	str	r2, [r3, #8]
}
 80069a4:	bf00      	nop
 80069a6:	371c      	adds	r7, #28
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b087      	sub	sp, #28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f003 031f 	and.w	r3, r3, #31
 80069c2:	2201      	movs	r2, #1
 80069c4:	fa02 f303 	lsl.w	r3, r2, r3
 80069c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6a1a      	ldr	r2, [r3, #32]
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	43db      	mvns	r3, r3
 80069d2:	401a      	ands	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6a1a      	ldr	r2, [r3, #32]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f003 031f 	and.w	r3, r3, #31
 80069e2:	6879      	ldr	r1, [r7, #4]
 80069e4:	fa01 f303 	lsl.w	r3, r1, r3
 80069e8:	431a      	orrs	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	621a      	str	r2, [r3, #32]
}
 80069ee:	bf00      	nop
 80069f0:	371c      	adds	r7, #28
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
	...

080069fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d101      	bne.n	8006a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a10:	2302      	movs	r3, #2
 8006a12:	e074      	b.n	8006afe <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a34      	ldr	r2, [pc, #208]	@ (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d009      	beq.n	8006a52 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a33      	ldr	r2, [pc, #204]	@ (8006b10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d004      	beq.n	8006a52 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a31      	ldr	r2, [pc, #196]	@ (8006b14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d108      	bne.n	8006a64 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006a58:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a21      	ldr	r2, [pc, #132]	@ (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d022      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a94:	d01d      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a1f      	ldr	r2, [pc, #124]	@ (8006b18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d018      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8006b1c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d013      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a1c      	ldr	r2, [pc, #112]	@ (8006b20 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d00e      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a15      	ldr	r2, [pc, #84]	@ (8006b10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d009      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a18      	ldr	r2, [pc, #96]	@ (8006b24 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d004      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a11      	ldr	r2, [pc, #68]	@ (8006b14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d10c      	bne.n	8006aec <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ad8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	40012c00 	.word	0x40012c00
 8006b10:	40013400 	.word	0x40013400
 8006b14:	40015000 	.word	0x40015000
 8006b18:	40000400 	.word	0x40000400
 8006b1c:	40000800 	.word	0x40000800
 8006b20:	40000c00 	.word	0x40000c00
 8006b24:	40014000 	.word	0x40014000

08006b28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d101      	bne.n	8006bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e042      	b.n	8006c4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d106      	bne.n	8006bde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7fa fd93 	bl	8001704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2224      	movs	r2, #36	@ 0x24
 8006be2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f022 0201 	bic.w	r2, r2, #1
 8006bf4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fb24 	bl	800724c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f825 	bl	8006c54 <UART_SetConfig>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d101      	bne.n	8006c14 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e01b      	b.n	8006c4c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685a      	ldr	r2, [r3, #4]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689a      	ldr	r2, [r3, #8]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f042 0201 	orr.w	r2, r2, #1
 8006c42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fba3 	bl	8007390 <UART_CheckIdleState>
 8006c4a:	4603      	mov	r3, r0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c58:	b08c      	sub	sp, #48	@ 0x30
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	431a      	orrs	r2, r3
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	4baa      	ldr	r3, [pc, #680]	@ (8006f2c <UART_SetConfig+0x2d8>)
 8006c84:	4013      	ands	r3, r2
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	6812      	ldr	r2, [r2, #0]
 8006c8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c8c:	430b      	orrs	r3, r1
 8006c8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	68da      	ldr	r2, [r3, #12]
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a9f      	ldr	r2, [pc, #636]	@ (8006f30 <UART_SetConfig+0x2dc>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d004      	beq.n	8006cc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006cca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	6812      	ldr	r2, [r2, #0]
 8006cd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cd4:	430b      	orrs	r3, r1
 8006cd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cde:	f023 010f 	bic.w	r1, r3, #15
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a90      	ldr	r2, [pc, #576]	@ (8006f34 <UART_SetConfig+0x2e0>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d125      	bne.n	8006d44 <UART_SetConfig+0xf0>
 8006cf8:	4b8f      	ldr	r3, [pc, #572]	@ (8006f38 <UART_SetConfig+0x2e4>)
 8006cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cfe:	f003 0303 	and.w	r3, r3, #3
 8006d02:	2b03      	cmp	r3, #3
 8006d04:	d81a      	bhi.n	8006d3c <UART_SetConfig+0xe8>
 8006d06:	a201      	add	r2, pc, #4	@ (adr r2, 8006d0c <UART_SetConfig+0xb8>)
 8006d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0c:	08006d1d 	.word	0x08006d1d
 8006d10:	08006d2d 	.word	0x08006d2d
 8006d14:	08006d25 	.word	0x08006d25
 8006d18:	08006d35 	.word	0x08006d35
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d22:	e116      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006d24:	2302      	movs	r3, #2
 8006d26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d2a:	e112      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006d2c:	2304      	movs	r3, #4
 8006d2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d32:	e10e      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006d34:	2308      	movs	r3, #8
 8006d36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d3a:	e10a      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006d3c:	2310      	movs	r3, #16
 8006d3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d42:	e106      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a7c      	ldr	r2, [pc, #496]	@ (8006f3c <UART_SetConfig+0x2e8>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d138      	bne.n	8006dc0 <UART_SetConfig+0x16c>
 8006d4e:	4b7a      	ldr	r3, [pc, #488]	@ (8006f38 <UART_SetConfig+0x2e4>)
 8006d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d54:	f003 030c 	and.w	r3, r3, #12
 8006d58:	2b0c      	cmp	r3, #12
 8006d5a:	d82d      	bhi.n	8006db8 <UART_SetConfig+0x164>
 8006d5c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d64 <UART_SetConfig+0x110>)
 8006d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d62:	bf00      	nop
 8006d64:	08006d99 	.word	0x08006d99
 8006d68:	08006db9 	.word	0x08006db9
 8006d6c:	08006db9 	.word	0x08006db9
 8006d70:	08006db9 	.word	0x08006db9
 8006d74:	08006da9 	.word	0x08006da9
 8006d78:	08006db9 	.word	0x08006db9
 8006d7c:	08006db9 	.word	0x08006db9
 8006d80:	08006db9 	.word	0x08006db9
 8006d84:	08006da1 	.word	0x08006da1
 8006d88:	08006db9 	.word	0x08006db9
 8006d8c:	08006db9 	.word	0x08006db9
 8006d90:	08006db9 	.word	0x08006db9
 8006d94:	08006db1 	.word	0x08006db1
 8006d98:	2300      	movs	r3, #0
 8006d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d9e:	e0d8      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006da0:	2302      	movs	r3, #2
 8006da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006da6:	e0d4      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006da8:	2304      	movs	r3, #4
 8006daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dae:	e0d0      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006db0:	2308      	movs	r3, #8
 8006db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006db6:	e0cc      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006db8:	2310      	movs	r3, #16
 8006dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dbe:	e0c8      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a5e      	ldr	r2, [pc, #376]	@ (8006f40 <UART_SetConfig+0x2ec>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d125      	bne.n	8006e16 <UART_SetConfig+0x1c2>
 8006dca:	4b5b      	ldr	r3, [pc, #364]	@ (8006f38 <UART_SetConfig+0x2e4>)
 8006dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dd0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006dd4:	2b30      	cmp	r3, #48	@ 0x30
 8006dd6:	d016      	beq.n	8006e06 <UART_SetConfig+0x1b2>
 8006dd8:	2b30      	cmp	r3, #48	@ 0x30
 8006dda:	d818      	bhi.n	8006e0e <UART_SetConfig+0x1ba>
 8006ddc:	2b20      	cmp	r3, #32
 8006dde:	d00a      	beq.n	8006df6 <UART_SetConfig+0x1a2>
 8006de0:	2b20      	cmp	r3, #32
 8006de2:	d814      	bhi.n	8006e0e <UART_SetConfig+0x1ba>
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <UART_SetConfig+0x19a>
 8006de8:	2b10      	cmp	r3, #16
 8006dea:	d008      	beq.n	8006dfe <UART_SetConfig+0x1aa>
 8006dec:	e00f      	b.n	8006e0e <UART_SetConfig+0x1ba>
 8006dee:	2300      	movs	r3, #0
 8006df0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006df4:	e0ad      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006df6:	2302      	movs	r3, #2
 8006df8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dfc:	e0a9      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006dfe:	2304      	movs	r3, #4
 8006e00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e04:	e0a5      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006e06:	2308      	movs	r3, #8
 8006e08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e0c:	e0a1      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006e0e:	2310      	movs	r3, #16
 8006e10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e14:	e09d      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a4a      	ldr	r2, [pc, #296]	@ (8006f44 <UART_SetConfig+0x2f0>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d125      	bne.n	8006e6c <UART_SetConfig+0x218>
 8006e20:	4b45      	ldr	r3, [pc, #276]	@ (8006f38 <UART_SetConfig+0x2e4>)
 8006e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e26:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006e2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e2c:	d016      	beq.n	8006e5c <UART_SetConfig+0x208>
 8006e2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e30:	d818      	bhi.n	8006e64 <UART_SetConfig+0x210>
 8006e32:	2b80      	cmp	r3, #128	@ 0x80
 8006e34:	d00a      	beq.n	8006e4c <UART_SetConfig+0x1f8>
 8006e36:	2b80      	cmp	r3, #128	@ 0x80
 8006e38:	d814      	bhi.n	8006e64 <UART_SetConfig+0x210>
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d002      	beq.n	8006e44 <UART_SetConfig+0x1f0>
 8006e3e:	2b40      	cmp	r3, #64	@ 0x40
 8006e40:	d008      	beq.n	8006e54 <UART_SetConfig+0x200>
 8006e42:	e00f      	b.n	8006e64 <UART_SetConfig+0x210>
 8006e44:	2300      	movs	r3, #0
 8006e46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e4a:	e082      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e52:	e07e      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006e54:	2304      	movs	r3, #4
 8006e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e5a:	e07a      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006e5c:	2308      	movs	r3, #8
 8006e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e62:	e076      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006e64:	2310      	movs	r3, #16
 8006e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e6a:	e072      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a35      	ldr	r2, [pc, #212]	@ (8006f48 <UART_SetConfig+0x2f4>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d12a      	bne.n	8006ecc <UART_SetConfig+0x278>
 8006e76:	4b30      	ldr	r3, [pc, #192]	@ (8006f38 <UART_SetConfig+0x2e4>)
 8006e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e84:	d01a      	beq.n	8006ebc <UART_SetConfig+0x268>
 8006e86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e8a:	d81b      	bhi.n	8006ec4 <UART_SetConfig+0x270>
 8006e8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e90:	d00c      	beq.n	8006eac <UART_SetConfig+0x258>
 8006e92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e96:	d815      	bhi.n	8006ec4 <UART_SetConfig+0x270>
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d003      	beq.n	8006ea4 <UART_SetConfig+0x250>
 8006e9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ea0:	d008      	beq.n	8006eb4 <UART_SetConfig+0x260>
 8006ea2:	e00f      	b.n	8006ec4 <UART_SetConfig+0x270>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eaa:	e052      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006eac:	2302      	movs	r3, #2
 8006eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eb2:	e04e      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006eb4:	2304      	movs	r3, #4
 8006eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eba:	e04a      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006ebc:	2308      	movs	r3, #8
 8006ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ec2:	e046      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006ec4:	2310      	movs	r3, #16
 8006ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eca:	e042      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a17      	ldr	r2, [pc, #92]	@ (8006f30 <UART_SetConfig+0x2dc>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d13a      	bne.n	8006f4c <UART_SetConfig+0x2f8>
 8006ed6:	4b18      	ldr	r3, [pc, #96]	@ (8006f38 <UART_SetConfig+0x2e4>)
 8006ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006edc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006ee0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ee4:	d01a      	beq.n	8006f1c <UART_SetConfig+0x2c8>
 8006ee6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006eea:	d81b      	bhi.n	8006f24 <UART_SetConfig+0x2d0>
 8006eec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ef0:	d00c      	beq.n	8006f0c <UART_SetConfig+0x2b8>
 8006ef2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ef6:	d815      	bhi.n	8006f24 <UART_SetConfig+0x2d0>
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d003      	beq.n	8006f04 <UART_SetConfig+0x2b0>
 8006efc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f00:	d008      	beq.n	8006f14 <UART_SetConfig+0x2c0>
 8006f02:	e00f      	b.n	8006f24 <UART_SetConfig+0x2d0>
 8006f04:	2300      	movs	r3, #0
 8006f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f0a:	e022      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f12:	e01e      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006f14:	2304      	movs	r3, #4
 8006f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f1a:	e01a      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006f1c:	2308      	movs	r3, #8
 8006f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f22:	e016      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006f24:	2310      	movs	r3, #16
 8006f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f2a:	e012      	b.n	8006f52 <UART_SetConfig+0x2fe>
 8006f2c:	cfff69f3 	.word	0xcfff69f3
 8006f30:	40008000 	.word	0x40008000
 8006f34:	40013800 	.word	0x40013800
 8006f38:	40021000 	.word	0x40021000
 8006f3c:	40004400 	.word	0x40004400
 8006f40:	40004800 	.word	0x40004800
 8006f44:	40004c00 	.word	0x40004c00
 8006f48:	40005000 	.word	0x40005000
 8006f4c:	2310      	movs	r3, #16
 8006f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4aae      	ldr	r2, [pc, #696]	@ (8007210 <UART_SetConfig+0x5bc>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	f040 8097 	bne.w	800708c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f5e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006f62:	2b08      	cmp	r3, #8
 8006f64:	d823      	bhi.n	8006fae <UART_SetConfig+0x35a>
 8006f66:	a201      	add	r2, pc, #4	@ (adr r2, 8006f6c <UART_SetConfig+0x318>)
 8006f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6c:	08006f91 	.word	0x08006f91
 8006f70:	08006faf 	.word	0x08006faf
 8006f74:	08006f99 	.word	0x08006f99
 8006f78:	08006faf 	.word	0x08006faf
 8006f7c:	08006f9f 	.word	0x08006f9f
 8006f80:	08006faf 	.word	0x08006faf
 8006f84:	08006faf 	.word	0x08006faf
 8006f88:	08006faf 	.word	0x08006faf
 8006f8c:	08006fa7 	.word	0x08006fa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f90:	f7fd feb8 	bl	8004d04 <HAL_RCC_GetPCLK1Freq>
 8006f94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f96:	e010      	b.n	8006fba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f98:	4b9e      	ldr	r3, [pc, #632]	@ (8007214 <UART_SetConfig+0x5c0>)
 8006f9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f9c:	e00d      	b.n	8006fba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f9e:	f7fd fe43 	bl	8004c28 <HAL_RCC_GetSysClockFreq>
 8006fa2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006fa4:	e009      	b.n	8006fba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006faa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006fac:	e005      	b.n	8006fba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006fb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 8130 	beq.w	8007222 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc6:	4a94      	ldr	r2, [pc, #592]	@ (8007218 <UART_SetConfig+0x5c4>)
 8006fc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fcc:	461a      	mov	r2, r3
 8006fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fd4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	005b      	lsls	r3, r3, #1
 8006fde:	4413      	add	r3, r2
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d305      	bcc.n	8006ff2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fec:	69ba      	ldr	r2, [r7, #24]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d903      	bls.n	8006ffa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006ff8:	e113      	b.n	8007222 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	60bb      	str	r3, [r7, #8]
 8007000:	60fa      	str	r2, [r7, #12]
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007006:	4a84      	ldr	r2, [pc, #528]	@ (8007218 <UART_SetConfig+0x5c4>)
 8007008:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800700c:	b29b      	uxth	r3, r3
 800700e:	2200      	movs	r2, #0
 8007010:	603b      	str	r3, [r7, #0]
 8007012:	607a      	str	r2, [r7, #4]
 8007014:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007018:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800701c:	f7f9 fd1a 	bl	8000a54 <__aeabi_uldivmod>
 8007020:	4602      	mov	r2, r0
 8007022:	460b      	mov	r3, r1
 8007024:	4610      	mov	r0, r2
 8007026:	4619      	mov	r1, r3
 8007028:	f04f 0200 	mov.w	r2, #0
 800702c:	f04f 0300 	mov.w	r3, #0
 8007030:	020b      	lsls	r3, r1, #8
 8007032:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007036:	0202      	lsls	r2, r0, #8
 8007038:	6979      	ldr	r1, [r7, #20]
 800703a:	6849      	ldr	r1, [r1, #4]
 800703c:	0849      	lsrs	r1, r1, #1
 800703e:	2000      	movs	r0, #0
 8007040:	460c      	mov	r4, r1
 8007042:	4605      	mov	r5, r0
 8007044:	eb12 0804 	adds.w	r8, r2, r4
 8007048:	eb43 0905 	adc.w	r9, r3, r5
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	469a      	mov	sl, r3
 8007054:	4693      	mov	fp, r2
 8007056:	4652      	mov	r2, sl
 8007058:	465b      	mov	r3, fp
 800705a:	4640      	mov	r0, r8
 800705c:	4649      	mov	r1, r9
 800705e:	f7f9 fcf9 	bl	8000a54 <__aeabi_uldivmod>
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	4613      	mov	r3, r2
 8007068:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007070:	d308      	bcc.n	8007084 <UART_SetConfig+0x430>
 8007072:	6a3b      	ldr	r3, [r7, #32]
 8007074:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007078:	d204      	bcs.n	8007084 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6a3a      	ldr	r2, [r7, #32]
 8007080:	60da      	str	r2, [r3, #12]
 8007082:	e0ce      	b.n	8007222 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800708a:	e0ca      	b.n	8007222 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	69db      	ldr	r3, [r3, #28]
 8007090:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007094:	d166      	bne.n	8007164 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007096:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800709a:	2b08      	cmp	r3, #8
 800709c:	d827      	bhi.n	80070ee <UART_SetConfig+0x49a>
 800709e:	a201      	add	r2, pc, #4	@ (adr r2, 80070a4 <UART_SetConfig+0x450>)
 80070a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a4:	080070c9 	.word	0x080070c9
 80070a8:	080070d1 	.word	0x080070d1
 80070ac:	080070d9 	.word	0x080070d9
 80070b0:	080070ef 	.word	0x080070ef
 80070b4:	080070df 	.word	0x080070df
 80070b8:	080070ef 	.word	0x080070ef
 80070bc:	080070ef 	.word	0x080070ef
 80070c0:	080070ef 	.word	0x080070ef
 80070c4:	080070e7 	.word	0x080070e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070c8:	f7fd fe1c 	bl	8004d04 <HAL_RCC_GetPCLK1Freq>
 80070cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070ce:	e014      	b.n	80070fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070d0:	f7fd fe2e 	bl	8004d30 <HAL_RCC_GetPCLK2Freq>
 80070d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070d6:	e010      	b.n	80070fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070d8:	4b4e      	ldr	r3, [pc, #312]	@ (8007214 <UART_SetConfig+0x5c0>)
 80070da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80070dc:	e00d      	b.n	80070fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070de:	f7fd fda3 	bl	8004c28 <HAL_RCC_GetSysClockFreq>
 80070e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070e4:	e009      	b.n	80070fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80070ec:	e005      	b.n	80070fa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80070ee:	2300      	movs	r3, #0
 80070f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80070f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 8090 	beq.w	8007222 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007106:	4a44      	ldr	r2, [pc, #272]	@ (8007218 <UART_SetConfig+0x5c4>)
 8007108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800710c:	461a      	mov	r2, r3
 800710e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007110:	fbb3 f3f2 	udiv	r3, r3, r2
 8007114:	005a      	lsls	r2, r3, #1
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	085b      	lsrs	r3, r3, #1
 800711c:	441a      	add	r2, r3
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	fbb2 f3f3 	udiv	r3, r2, r3
 8007126:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	2b0f      	cmp	r3, #15
 800712c:	d916      	bls.n	800715c <UART_SetConfig+0x508>
 800712e:	6a3b      	ldr	r3, [r7, #32]
 8007130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007134:	d212      	bcs.n	800715c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007136:	6a3b      	ldr	r3, [r7, #32]
 8007138:	b29b      	uxth	r3, r3
 800713a:	f023 030f 	bic.w	r3, r3, #15
 800713e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007140:	6a3b      	ldr	r3, [r7, #32]
 8007142:	085b      	lsrs	r3, r3, #1
 8007144:	b29b      	uxth	r3, r3
 8007146:	f003 0307 	and.w	r3, r3, #7
 800714a:	b29a      	uxth	r2, r3
 800714c:	8bfb      	ldrh	r3, [r7, #30]
 800714e:	4313      	orrs	r3, r2
 8007150:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	8bfa      	ldrh	r2, [r7, #30]
 8007158:	60da      	str	r2, [r3, #12]
 800715a:	e062      	b.n	8007222 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007162:	e05e      	b.n	8007222 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007164:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007168:	2b08      	cmp	r3, #8
 800716a:	d828      	bhi.n	80071be <UART_SetConfig+0x56a>
 800716c:	a201      	add	r2, pc, #4	@ (adr r2, 8007174 <UART_SetConfig+0x520>)
 800716e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007172:	bf00      	nop
 8007174:	08007199 	.word	0x08007199
 8007178:	080071a1 	.word	0x080071a1
 800717c:	080071a9 	.word	0x080071a9
 8007180:	080071bf 	.word	0x080071bf
 8007184:	080071af 	.word	0x080071af
 8007188:	080071bf 	.word	0x080071bf
 800718c:	080071bf 	.word	0x080071bf
 8007190:	080071bf 	.word	0x080071bf
 8007194:	080071b7 	.word	0x080071b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007198:	f7fd fdb4 	bl	8004d04 <HAL_RCC_GetPCLK1Freq>
 800719c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800719e:	e014      	b.n	80071ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071a0:	f7fd fdc6 	bl	8004d30 <HAL_RCC_GetPCLK2Freq>
 80071a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071a6:	e010      	b.n	80071ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071a8:	4b1a      	ldr	r3, [pc, #104]	@ (8007214 <UART_SetConfig+0x5c0>)
 80071aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80071ac:	e00d      	b.n	80071ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071ae:	f7fd fd3b 	bl	8004c28 <HAL_RCC_GetSysClockFreq>
 80071b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071b4:	e009      	b.n	80071ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80071bc:	e005      	b.n	80071ca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80071be:	2300      	movs	r3, #0
 80071c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80071c8:	bf00      	nop
    }

    if (pclk != 0U)
 80071ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d028      	beq.n	8007222 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d4:	4a10      	ldr	r2, [pc, #64]	@ (8007218 <UART_SetConfig+0x5c4>)
 80071d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071da:	461a      	mov	r2, r3
 80071dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071de:	fbb3 f2f2 	udiv	r2, r3, r2
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	085b      	lsrs	r3, r3, #1
 80071e8:	441a      	add	r2, r3
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071f4:	6a3b      	ldr	r3, [r7, #32]
 80071f6:	2b0f      	cmp	r3, #15
 80071f8:	d910      	bls.n	800721c <UART_SetConfig+0x5c8>
 80071fa:	6a3b      	ldr	r3, [r7, #32]
 80071fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007200:	d20c      	bcs.n	800721c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007202:	6a3b      	ldr	r3, [r7, #32]
 8007204:	b29a      	uxth	r2, r3
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	60da      	str	r2, [r3, #12]
 800720c:	e009      	b.n	8007222 <UART_SetConfig+0x5ce>
 800720e:	bf00      	nop
 8007210:	40008000 	.word	0x40008000
 8007214:	00f42400 	.word	0x00f42400
 8007218:	08007984 	.word	0x08007984
      }
      else
      {
        ret = HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2201      	movs	r2, #1
 8007226:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	2201      	movs	r2, #1
 800722e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2200      	movs	r2, #0
 8007236:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	2200      	movs	r2, #0
 800723c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800723e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007242:	4618      	mov	r0, r3
 8007244:	3730      	adds	r7, #48	@ 0x30
 8007246:	46bd      	mov	sp, r7
 8007248:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800724c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007258:	f003 0308 	and.w	r3, r3, #8
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00a      	beq.n	8007276 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	430a      	orrs	r2, r1
 8007274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00a      	beq.n	8007298 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	430a      	orrs	r2, r1
 8007296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800729c:	f003 0302 	and.w	r3, r3, #2
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00a      	beq.n	80072ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	430a      	orrs	r2, r1
 80072b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072be:	f003 0304 	and.w	r3, r3, #4
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00a      	beq.n	80072dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	430a      	orrs	r2, r1
 80072da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e0:	f003 0310 	and.w	r3, r3, #16
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00a      	beq.n	80072fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	430a      	orrs	r2, r1
 80072fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007302:	f003 0320 	and.w	r3, r3, #32
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00a      	beq.n	8007320 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	430a      	orrs	r2, r1
 800731e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007328:	2b00      	cmp	r3, #0
 800732a:	d01a      	beq.n	8007362 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007346:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800734a:	d10a      	bne.n	8007362 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	430a      	orrs	r2, r1
 8007360:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00a      	beq.n	8007384 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	430a      	orrs	r2, r1
 8007382:	605a      	str	r2, [r3, #4]
  }
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b098      	sub	sp, #96	@ 0x60
 8007394:	af02      	add	r7, sp, #8
 8007396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073a0:	f7fa fbd2 	bl	8001b48 <HAL_GetTick>
 80073a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0308 	and.w	r3, r3, #8
 80073b0:	2b08      	cmp	r3, #8
 80073b2:	d12f      	bne.n	8007414 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073bc:	2200      	movs	r2, #0
 80073be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 f88e 	bl	80074e4 <UART_WaitOnFlagUntilTimeout>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d022      	beq.n	8007414 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d6:	e853 3f00 	ldrex	r3, [r3]
 80073da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80073dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	461a      	mov	r2, r3
 80073ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80073ee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073f4:	e841 2300 	strex	r3, r2, [r1]
 80073f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1e6      	bne.n	80073ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2220      	movs	r2, #32
 8007404:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e063      	b.n	80074dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0304 	and.w	r3, r3, #4
 800741e:	2b04      	cmp	r3, #4
 8007420:	d149      	bne.n	80074b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007422:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800742a:	2200      	movs	r2, #0
 800742c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f857 	bl	80074e4 <UART_WaitOnFlagUntilTimeout>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d03c      	beq.n	80074b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007444:	e853 3f00 	ldrex	r3, [r3]
 8007448:	623b      	str	r3, [r7, #32]
   return(result);
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007450:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	461a      	mov	r2, r3
 8007458:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800745a:	633b      	str	r3, [r7, #48]	@ 0x30
 800745c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007460:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007462:	e841 2300 	strex	r3, r2, [r1]
 8007466:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1e6      	bne.n	800743c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3308      	adds	r3, #8
 8007474:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	e853 3f00 	ldrex	r3, [r3]
 800747c:	60fb      	str	r3, [r7, #12]
   return(result);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f023 0301 	bic.w	r3, r3, #1
 8007484:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	3308      	adds	r3, #8
 800748c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800748e:	61fa      	str	r2, [r7, #28]
 8007490:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007492:	69b9      	ldr	r1, [r7, #24]
 8007494:	69fa      	ldr	r2, [r7, #28]
 8007496:	e841 2300 	strex	r3, r2, [r1]
 800749a:	617b      	str	r3, [r7, #20]
   return(result);
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1e5      	bne.n	800746e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2220      	movs	r2, #32
 80074a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e012      	b.n	80074dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2220      	movs	r2, #32
 80074ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2220      	movs	r2, #32
 80074c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3758      	adds	r7, #88	@ 0x58
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	603b      	str	r3, [r7, #0]
 80074f0:	4613      	mov	r3, r2
 80074f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074f4:	e04f      	b.n	8007596 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fc:	d04b      	beq.n	8007596 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074fe:	f7fa fb23 	bl	8001b48 <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	69ba      	ldr	r2, [r7, #24]
 800750a:	429a      	cmp	r2, r3
 800750c:	d302      	bcc.n	8007514 <UART_WaitOnFlagUntilTimeout+0x30>
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d101      	bne.n	8007518 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	e04e      	b.n	80075b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0304 	and.w	r3, r3, #4
 8007522:	2b00      	cmp	r3, #0
 8007524:	d037      	beq.n	8007596 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	2b80      	cmp	r3, #128	@ 0x80
 800752a:	d034      	beq.n	8007596 <UART_WaitOnFlagUntilTimeout+0xb2>
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2b40      	cmp	r3, #64	@ 0x40
 8007530:	d031      	beq.n	8007596 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	69db      	ldr	r3, [r3, #28]
 8007538:	f003 0308 	and.w	r3, r3, #8
 800753c:	2b08      	cmp	r3, #8
 800753e:	d110      	bne.n	8007562 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2208      	movs	r2, #8
 8007546:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 f838 	bl	80075be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2208      	movs	r2, #8
 8007552:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e029      	b.n	80075b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	69db      	ldr	r3, [r3, #28]
 8007568:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800756c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007570:	d111      	bne.n	8007596 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800757a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f000 f81e 	bl	80075be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2220      	movs	r2, #32
 8007586:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e00f      	b.n	80075b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	69da      	ldr	r2, [r3, #28]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	4013      	ands	r3, r2
 80075a0:	68ba      	ldr	r2, [r7, #8]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	bf0c      	ite	eq
 80075a6:	2301      	moveq	r3, #1
 80075a8:	2300      	movne	r3, #0
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	461a      	mov	r2, r3
 80075ae:	79fb      	ldrb	r3, [r7, #7]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d0a0      	beq.n	80074f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075be:	b480      	push	{r7}
 80075c0:	b095      	sub	sp, #84	@ 0x54
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ce:	e853 3f00 	ldrex	r3, [r3]
 80075d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	461a      	mov	r2, r3
 80075e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80075e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075ec:	e841 2300 	strex	r3, r2, [r1]
 80075f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1e6      	bne.n	80075c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3308      	adds	r3, #8
 80075fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007600:	6a3b      	ldr	r3, [r7, #32]
 8007602:	e853 3f00 	ldrex	r3, [r3]
 8007606:	61fb      	str	r3, [r7, #28]
   return(result);
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800760e:	f023 0301 	bic.w	r3, r3, #1
 8007612:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	3308      	adds	r3, #8
 800761a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800761c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800761e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007620:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007622:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007624:	e841 2300 	strex	r3, r2, [r1]
 8007628:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800762a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1e3      	bne.n	80075f8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007634:	2b01      	cmp	r3, #1
 8007636:	d118      	bne.n	800766a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	e853 3f00 	ldrex	r3, [r3]
 8007644:	60bb      	str	r3, [r7, #8]
   return(result);
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	f023 0310 	bic.w	r3, r3, #16
 800764c:	647b      	str	r3, [r7, #68]	@ 0x44
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	461a      	mov	r2, r3
 8007654:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007656:	61bb      	str	r3, [r7, #24]
 8007658:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765a:	6979      	ldr	r1, [r7, #20]
 800765c:	69ba      	ldr	r2, [r7, #24]
 800765e:	e841 2300 	strex	r3, r2, [r1]
 8007662:	613b      	str	r3, [r7, #16]
   return(result);
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1e6      	bne.n	8007638 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2220      	movs	r2, #32
 800766e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800767e:	bf00      	nop
 8007680:	3754      	adds	r7, #84	@ 0x54
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800768a:	b480      	push	{r7}
 800768c:	b085      	sub	sp, #20
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007698:	2b01      	cmp	r3, #1
 800769a:	d101      	bne.n	80076a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800769c:	2302      	movs	r3, #2
 800769e:	e027      	b.n	80076f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2224      	movs	r2, #36	@ 0x24
 80076ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f022 0201 	bic.w	r2, r2, #1
 80076c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80076ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2220      	movs	r2, #32
 80076e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3714      	adds	r7, #20
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800770c:	2b01      	cmp	r3, #1
 800770e:	d101      	bne.n	8007714 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007710:	2302      	movs	r3, #2
 8007712:	e02d      	b.n	8007770 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2224      	movs	r2, #36	@ 0x24
 8007720:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f022 0201 	bic.w	r2, r2, #1
 800773a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	430a      	orrs	r2, r1
 800774e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f84f 	bl	80077f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2220      	movs	r2, #32
 8007762:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007788:	2b01      	cmp	r3, #1
 800778a:	d101      	bne.n	8007790 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800778c:	2302      	movs	r3, #2
 800778e:	e02d      	b.n	80077ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2224      	movs	r2, #36	@ 0x24
 800779c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f022 0201 	bic.w	r2, r2, #1
 80077b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	683a      	ldr	r2, [r7, #0]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f811 	bl	80077f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2220      	movs	r2, #32
 80077de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007800:	2b00      	cmp	r3, #0
 8007802:	d108      	bne.n	8007816 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007814:	e031      	b.n	800787a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007816:	2308      	movs	r3, #8
 8007818:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800781a:	2308      	movs	r3, #8
 800781c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	0e5b      	lsrs	r3, r3, #25
 8007826:	b2db      	uxtb	r3, r3
 8007828:	f003 0307 	and.w	r3, r3, #7
 800782c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	0f5b      	lsrs	r3, r3, #29
 8007836:	b2db      	uxtb	r3, r3
 8007838:	f003 0307 	and.w	r3, r3, #7
 800783c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800783e:	7bbb      	ldrb	r3, [r7, #14]
 8007840:	7b3a      	ldrb	r2, [r7, #12]
 8007842:	4911      	ldr	r1, [pc, #68]	@ (8007888 <UARTEx_SetNbDataToProcess+0x94>)
 8007844:	5c8a      	ldrb	r2, [r1, r2]
 8007846:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800784a:	7b3a      	ldrb	r2, [r7, #12]
 800784c:	490f      	ldr	r1, [pc, #60]	@ (800788c <UARTEx_SetNbDataToProcess+0x98>)
 800784e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007850:	fb93 f3f2 	sdiv	r3, r3, r2
 8007854:	b29a      	uxth	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800785c:	7bfb      	ldrb	r3, [r7, #15]
 800785e:	7b7a      	ldrb	r2, [r7, #13]
 8007860:	4909      	ldr	r1, [pc, #36]	@ (8007888 <UARTEx_SetNbDataToProcess+0x94>)
 8007862:	5c8a      	ldrb	r2, [r1, r2]
 8007864:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007868:	7b7a      	ldrb	r2, [r7, #13]
 800786a:	4908      	ldr	r1, [pc, #32]	@ (800788c <UARTEx_SetNbDataToProcess+0x98>)
 800786c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800786e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007872:	b29a      	uxth	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800787a:	bf00      	nop
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	0800799c 	.word	0x0800799c
 800788c:	080079a4 	.word	0x080079a4

08007890 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	ed93 7a06 	vldr	s14, [r3, #24]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	edd3 7a07 	vldr	s15, [r3, #28]
 80078a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	edd3 7a08 	vldr	s15, [r3, #32]
 80078b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	edd3 7a06 	vldr	s15, [r3, #24]
 80078c0:	eeb1 7a67 	vneg.f32	s14, s15
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	edd3 7a08 	vldr	s15, [r3, #32]
 80078ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80078ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a1a      	ldr	r2, [r3, #32]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d006      	beq.n	80078f4 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	330c      	adds	r3, #12
 80078ea:	220c      	movs	r2, #12
 80078ec:	2100      	movs	r1, #0
 80078ee:	4618      	mov	r0, r3
 80078f0:	f000 f804 	bl	80078fc <memset>
  }

}
 80078f4:	bf00      	nop
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <memset>:
 80078fc:	4402      	add	r2, r0
 80078fe:	4603      	mov	r3, r0
 8007900:	4293      	cmp	r3, r2
 8007902:	d100      	bne.n	8007906 <memset+0xa>
 8007904:	4770      	bx	lr
 8007906:	f803 1b01 	strb.w	r1, [r3], #1
 800790a:	e7f9      	b.n	8007900 <memset+0x4>

0800790c <__libc_init_array>:
 800790c:	b570      	push	{r4, r5, r6, lr}
 800790e:	4d0d      	ldr	r5, [pc, #52]	@ (8007944 <__libc_init_array+0x38>)
 8007910:	4c0d      	ldr	r4, [pc, #52]	@ (8007948 <__libc_init_array+0x3c>)
 8007912:	1b64      	subs	r4, r4, r5
 8007914:	10a4      	asrs	r4, r4, #2
 8007916:	2600      	movs	r6, #0
 8007918:	42a6      	cmp	r6, r4
 800791a:	d109      	bne.n	8007930 <__libc_init_array+0x24>
 800791c:	4d0b      	ldr	r5, [pc, #44]	@ (800794c <__libc_init_array+0x40>)
 800791e:	4c0c      	ldr	r4, [pc, #48]	@ (8007950 <__libc_init_array+0x44>)
 8007920:	f000 f818 	bl	8007954 <_init>
 8007924:	1b64      	subs	r4, r4, r5
 8007926:	10a4      	asrs	r4, r4, #2
 8007928:	2600      	movs	r6, #0
 800792a:	42a6      	cmp	r6, r4
 800792c:	d105      	bne.n	800793a <__libc_init_array+0x2e>
 800792e:	bd70      	pop	{r4, r5, r6, pc}
 8007930:	f855 3b04 	ldr.w	r3, [r5], #4
 8007934:	4798      	blx	r3
 8007936:	3601      	adds	r6, #1
 8007938:	e7ee      	b.n	8007918 <__libc_init_array+0xc>
 800793a:	f855 3b04 	ldr.w	r3, [r5], #4
 800793e:	4798      	blx	r3
 8007940:	3601      	adds	r6, #1
 8007942:	e7f2      	b.n	800792a <__libc_init_array+0x1e>
 8007944:	080079b4 	.word	0x080079b4
 8007948:	080079b4 	.word	0x080079b4
 800794c:	080079b4 	.word	0x080079b4
 8007950:	080079b8 	.word	0x080079b8

08007954 <_init>:
 8007954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007956:	bf00      	nop
 8007958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800795a:	bc08      	pop	{r3}
 800795c:	469e      	mov	lr, r3
 800795e:	4770      	bx	lr

08007960 <_fini>:
 8007960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007962:	bf00      	nop
 8007964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007966:	bc08      	pop	{r3}
 8007968:	469e      	mov	lr, r3
 800796a:	4770      	bx	lr
