
Elec Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093d0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080095a8  080095a8  0000a5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095e8  080095e8  0000b010  2**0
                  CONTENTS
  4 .ARM          00000008  080095e8  080095e8  0000a5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095f0  080095f0  0000b010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095f0  080095f0  0000a5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095f4  080095f4  0000a5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080095f8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000010  08009608  0000b010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08009608  0000b36c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000189ae  00000000  00000000  0000b040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc5  00000000  00000000  000239ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  000266b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001084  00000000  00000000  00027bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028fae  00000000  00000000  00028c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b48  00000000  00000000  00051c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011479f  00000000  00000000  0006a752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017eef1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b94  00000000  00000000  0017ef34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00184ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009590 	.word	0x08009590

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08009590 	.word	0x08009590

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f001 faae 	bl	8001a6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f9ef 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 fd6b 	bl	8000ff0 <MX_GPIO_Init>
  MX_DMA_Init();
 800051a:	f000 fd3f 	bl	8000f9c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800051e:	f000 fabf 	bl	8000aa0 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000522:	f000 fa33 	bl	800098c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000526:	f000 fc0f 	bl	8000d48 <MX_TIM3_Init>
  MX_TIM4_Init();
 800052a:	f000 fc5b 	bl	8000de4 <MX_TIM4_Init>
  MX_TIM5_Init();
 800052e:	f000 fcdf 	bl	8000ef0 <MX_TIM5_Init>
  MX_TIM2_Init();
 8000532:	f000 fbbb 	bl	8000cac <MX_TIM2_Init>
  MX_TIM1_Init();
 8000536:	f000 fafd 	bl	8000b34 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 2);
 800053a:	2202      	movs	r2, #2
 800053c:	49ae      	ldr	r1, [pc, #696]	@ (80007f8 <main+0x2f0>)
 800053e:	48af      	ldr	r0, [pc, #700]	@ (80007fc <main+0x2f4>)
 8000540:	f001 ff02 	bl	8002348 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000544:	48ae      	ldr	r0, [pc, #696]	@ (8000800 <main+0x2f8>)
 8000546:	f004 ffa1 	bl	800548c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 800054a:	48ae      	ldr	r0, [pc, #696]	@ (8000804 <main+0x2fc>)
 800054c:	f004 ff9e 	bl	800548c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000550:	48ad      	ldr	r0, [pc, #692]	@ (8000808 <main+0x300>)
 8000552:	f005 f80b 	bl	800556c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000556:	48aa      	ldr	r0, [pc, #680]	@ (8000800 <main+0x2f8>)
 8000558:	f005 f808 	bl	800556c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800055c:	2100      	movs	r1, #0
 800055e:	48ab      	ldr	r0, [pc, #684]	@ (800080c <main+0x304>)
 8000560:	f005 f8de 	bl	8005720 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000564:	2100      	movs	r1, #0
 8000566:	48a7      	ldr	r0, [pc, #668]	@ (8000804 <main+0x2fc>)
 8000568:	f005 f8da 	bl	8005720 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800056c:	2104      	movs	r1, #4
 800056e:	48a7      	ldr	r0, [pc, #668]	@ (800080c <main+0x304>)
 8000570:	f005 f8d6 	bl	8005720 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000574:	2104      	movs	r1, #4
 8000576:	48a3      	ldr	r0, [pc, #652]	@ (8000804 <main+0x2fc>)
 8000578:	f005 f8d2 	bl	8005720 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 800057c:	213c      	movs	r1, #60	@ 0x3c
 800057e:	48a4      	ldr	r0, [pc, #656]	@ (8000810 <main+0x308>)
 8000580:	f005 fa86 	bl	8005a90 <HAL_TIM_Encoder_Start>



  PID.Kp =2;
 8000584:	4ba3      	ldr	r3, [pc, #652]	@ (8000814 <main+0x30c>)
 8000586:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800058a:	619a      	str	r2, [r3, #24]
  PID.Ki =0;
 800058c:	4ba1      	ldr	r3, [pc, #644]	@ (8000814 <main+0x30c>)
 800058e:	f04f 0200 	mov.w	r2, #0
 8000592:	61da      	str	r2, [r3, #28]
  PID.Kd = 0;
 8000594:	4b9f      	ldr	r3, [pc, #636]	@ (8000814 <main+0x30c>)
 8000596:	f04f 0200 	mov.w	r2, #0
 800059a:	621a      	str	r2, [r3, #32]
  set_pos = 0;
 800059c:	4b9e      	ldr	r3, [pc, #632]	@ (8000818 <main+0x310>)
 800059e:	f04f 0200 	mov.w	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
  z = 0;
 80005a4:	4b9d      	ldr	r3, [pc, #628]	@ (800081c <main+0x314>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	801a      	strh	r2, [r3, #0]
  arm_pid_init_f32(&PID, 0);
 80005aa:	2100      	movs	r1, #0
 80005ac:	4899      	ldr	r0, [pc, #612]	@ (8000814 <main+0x30c>)
 80005ae:	f008 ff8d 	bl	80094cc <arm_pid_init_f32>
//		  x += ADC_RawRead[(i*2)];
//		  y += ADC_RawRead[(i*2)+1];
//	  }
//
//
	  setADC = ADC_RawRead[1];
 80005b2:	4b91      	ldr	r3, [pc, #580]	@ (80007f8 <main+0x2f0>)
 80005b4:	885b      	ldrh	r3, [r3, #2]
 80005b6:	b21a      	sxth	r2, r3
 80005b8:	4b99      	ldr	r3, [pc, #612]	@ (8000820 <main+0x318>)
 80005ba:	801a      	strh	r2, [r3, #0]
//	  }

	 // prev_pos = posADC;


	  if(mode == 0){
 80005bc:	4b99      	ldr	r3, [pc, #612]	@ (8000824 <main+0x31c>)
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d177      	bne.n	80006b4 <main+0x1ac>
		  pos = x*360/4096;
 80005c4:	4b98      	ldr	r3, [pc, #608]	@ (8000828 <main+0x320>)
 80005c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005ca:	461a      	mov	r2, r3
 80005cc:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80005d0:	fb02 f303 	mul.w	r3, r2, r3
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	da01      	bge.n	80005dc <main+0xd4>
 80005d8:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80005dc:	131b      	asrs	r3, r3, #12
 80005de:	ee07 3a90 	vmov	s15, r3
 80005e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005e6:	4b91      	ldr	r3, [pc, #580]	@ (800082c <main+0x324>)
 80005e8:	edc3 7a00 	vstr	s15, [r3]
		  set_pos = setADC*360/4096;
 80005ec:	4b8c      	ldr	r3, [pc, #560]	@ (8000820 <main+0x318>)
 80005ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005f2:	461a      	mov	r2, r3
 80005f4:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80005f8:	fb02 f303 	mul.w	r3, r2, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	da01      	bge.n	8000604 <main+0xfc>
 8000600:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000604:	131b      	asrs	r3, r3, #12
 8000606:	ee07 3a90 	vmov	s15, r3
 800060a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800060e:	4b82      	ldr	r3, [pc, #520]	@ (8000818 <main+0x310>)
 8000610:	edc3 7a00 	vstr	s15, [r3]
		  PID.Kp = 2;
 8000614:	4b7f      	ldr	r3, [pc, #508]	@ (8000814 <main+0x30c>)
 8000616:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800061a:	619a      	str	r2, [r3, #24]
		  Vfeedback = (arm_pid_f32(&PID, set_pos - pos))*32676/360;
 800061c:	4b7e      	ldr	r3, [pc, #504]	@ (8000818 <main+0x310>)
 800061e:	ed93 7a00 	vldr	s14, [r3]
 8000622:	4b82      	ldr	r3, [pc, #520]	@ (800082c <main+0x324>)
 8000624:	edd3 7a00 	vldr	s15, [r3]
 8000628:	ee77 7a67 	vsub.f32	s15, s14, s15
 800062c:	4b79      	ldr	r3, [pc, #484]	@ (8000814 <main+0x30c>)
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	ed93 7a00 	vldr	s14, [r3]
 800063a:	edd7 7a04 	vldr	s15, [r7, #16]
 800063e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	edd3 6a01 	vldr	s13, [r3, #4]
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	edd3 7a03 	vldr	s15, [r3, #12]
 800064e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000652:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	edd3 6a02 	vldr	s13, [r3, #8]
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000662:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000666:	ee37 7a27 	vadd.f32	s14, s14, s15
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000674:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	68da      	ldr	r2, [r3, #12]
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	693a      	ldr	r2, [r7, #16]
 8000684:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	68fa      	ldr	r2, [r7, #12]
 800068a:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800068c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000690:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8000830 <main+0x328>
 8000694:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000698:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8000834 <main+0x32c>
 800069c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006a0:	4b65      	ldr	r3, [pc, #404]	@ (8000838 <main+0x330>)
 80006a2:	edc3 7a00 	vstr	s15, [r3]
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	2120      	movs	r1, #32
 80006aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ae:	f003 fe35 	bl	800431c <HAL_GPIO_WritePin>
 80006b2:	e093      	b.n	80007dc <main+0x2d4>
	  }
	  else if(mode == 1){
 80006b4:	4b5b      	ldr	r3, [pc, #364]	@ (8000824 <main+0x31c>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d176      	bne.n	80007aa <main+0x2a2>
		  pos = posQEI*360/3072;
 80006bc:	4b5f      	ldr	r3, [pc, #380]	@ (800083c <main+0x334>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80006c4:	fb02 f303 	mul.w	r3, r2, r3
 80006c8:	4a5d      	ldr	r2, [pc, #372]	@ (8000840 <main+0x338>)
 80006ca:	fb82 1203 	smull	r1, r2, r2, r3
 80006ce:	1252      	asrs	r2, r2, #9
 80006d0:	17db      	asrs	r3, r3, #31
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	ee07 3a90 	vmov	s15, r3
 80006d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006dc:	4b53      	ldr	r3, [pc, #332]	@ (800082c <main+0x324>)
 80006de:	edc3 7a00 	vstr	s15, [r3]
		  set_pos = setADC*360/4096;
 80006e2:	4b4f      	ldr	r3, [pc, #316]	@ (8000820 <main+0x318>)
 80006e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006e8:	461a      	mov	r2, r3
 80006ea:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80006ee:	fb02 f303 	mul.w	r3, r2, r3
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	da01      	bge.n	80006fa <main+0x1f2>
 80006f6:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80006fa:	131b      	asrs	r3, r3, #12
 80006fc:	ee07 3a90 	vmov	s15, r3
 8000700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000704:	4b44      	ldr	r3, [pc, #272]	@ (8000818 <main+0x310>)
 8000706:	edc3 7a00 	vstr	s15, [r3]
		  PID.Kp = 2;
 800070a:	4b42      	ldr	r3, [pc, #264]	@ (8000814 <main+0x30c>)
 800070c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000710:	619a      	str	r2, [r3, #24]
		  Vfeedback = (arm_pid_f32(&PID, set_pos - pos))*32676/360;
 8000712:	4b41      	ldr	r3, [pc, #260]	@ (8000818 <main+0x310>)
 8000714:	ed93 7a00 	vldr	s14, [r3]
 8000718:	4b44      	ldr	r3, [pc, #272]	@ (800082c <main+0x324>)
 800071a:	edd3 7a00 	vldr	s15, [r3]
 800071e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000722:	4b3c      	ldr	r3, [pc, #240]	@ (8000814 <main+0x30c>)
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	edc7 7a01 	vstr	s15, [r7, #4]
    out = (S->A0 * in) +
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	ed93 7a00 	vldr	s14, [r3]
 8000730:	edd7 7a01 	vldr	s15, [r7, #4]
 8000734:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	edd3 6a01 	vldr	s13, [r3, #4]
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	edd3 7a03 	vldr	s15, [r3, #12]
 8000744:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000748:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	edd3 6a02 	vldr	s13, [r3, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	edd3 7a04 	vldr	s15, [r3, #16]
 8000758:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800075c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800076a:	edc7 7a00 	vstr	s15, [r7]
    S->state[1] = S->state[0];
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	68da      	ldr	r2, [r3, #12]
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	615a      	str	r2, [r3, #20]
    return (out);
 8000782:	edd7 7a00 	vldr	s15, [r7]
 8000786:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8000830 <main+0x328>
 800078a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800078e:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8000834 <main+0x32c>
 8000792:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000796:	4b28      	ldr	r3, [pc, #160]	@ (8000838 <main+0x330>)
 8000798:	edc3 7a00 	vstr	s15, [r3]
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2120      	movs	r1, #32
 80007a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a4:	f003 fdba 	bl	800431c <HAL_GPIO_WritePin>
 80007a8:	e018      	b.n	80007dc <main+0x2d4>
	  }
	  else if(mode == 2){
 80007aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000824 <main+0x31c>)
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d114      	bne.n	80007dc <main+0x2d4>
		  Vfeedback = (rxBuffer[1]*32676/12)*(rxBuffer[2]-2);
 80007b2:	4b24      	ldr	r3, [pc, #144]	@ (8000844 <main+0x33c>)
 80007b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <main+0x33c>)
 80007bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80007c0:	3b02      	subs	r3, #2
 80007c2:	fb02 f303 	mul.w	r3, r2, r3
 80007c6:	f640 22a3 	movw	r2, #2723	@ 0xaa3
 80007ca:	fb02 f303 	mul.w	r3, r2, r3
 80007ce:	ee07 3a90 	vmov	s15, r3
 80007d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007d6:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <main+0x330>)
 80007d8:	edc3 7a00 	vstr	s15, [r3]
//		  }
	  }

////////////// SPEED LIMIT //////////////////////////////////////////////////
	  //ensure smooth speed , maximum speed
	  if(Vfeedback > 32676/5){
 80007dc:	4b16      	ldr	r3, [pc, #88]	@ (8000838 <main+0x330>)
 80007de:	edd3 7a00 	vldr	s15, [r3]
 80007e2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000848 <main+0x340>
 80007e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ee:	dd2f      	ble.n	8000850 <main+0x348>
		  Vfeedback = 32676/5;
 80007f0:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <main+0x330>)
 80007f2:	4a16      	ldr	r2, [pc, #88]	@ (800084c <main+0x344>)
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	e038      	b.n	800086a <main+0x362>
 80007f8:	20000324 	.word	0x20000324
 80007fc:	2000002c 	.word	0x2000002c
 8000800:	20000224 	.word	0x20000224
 8000804:	20000270 	.word	0x20000270
 8000808:	200001d8 	.word	0x200001d8
 800080c:	2000018c 	.word	0x2000018c
 8000810:	200002bc 	.word	0x200002bc
 8000814:	20000328 	.word	0x20000328
 8000818:	20000310 	.word	0x20000310
 800081c:	2000030a 	.word	0x2000030a
 8000820:	2000034e 	.word	0x2000034e
 8000824:	20000000 	.word	0x20000000
 8000828:	20000308 	.word	0x20000308
 800082c:	2000030c 	.word	0x2000030c
 8000830:	46ff4800 	.word	0x46ff4800
 8000834:	43b40000 	.word	0x43b40000
 8000838:	20000354 	.word	0x20000354
 800083c:	20000314 	.word	0x20000314
 8000840:	2aaaaaab 	.word	0x2aaaaaab
 8000844:	20000358 	.word	0x20000358
 8000848:	45cc3800 	.word	0x45cc3800
 800084c:	45cc3800 	.word	0x45cc3800
	  }
	  else if(Vfeedback < -32676/5){
 8000850:	4b22      	ldr	r3, [pc, #136]	@ (80008dc <main+0x3d4>)
 8000852:	edd3 7a00 	vldr	s15, [r3]
 8000856:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80008e0 <main+0x3d8>
 800085a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800085e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000862:	d502      	bpl.n	800086a <main+0x362>
		  Vfeedback = -32676/5;
 8000864:	4b1d      	ldr	r3, [pc, #116]	@ (80008dc <main+0x3d4>)
 8000866:	4a1f      	ldr	r2, [pc, #124]	@ (80008e4 <main+0x3dc>)
 8000868:	601a      	str	r2, [r3, #0]
	  }
////////////// PWM //////////////////////////////////////////////////////////
	  if(Vfeedback > 0){
 800086a:	4b1c      	ldr	r3, [pc, #112]	@ (80008dc <main+0x3d4>)
 800086c:	edd3 7a00 	vldr	s15, [r3]
 8000870:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000878:	dd08      	ble.n	800088c <main+0x384>
		  PWM1 = Vfeedback;
 800087a:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <main+0x3d4>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a1a      	ldr	r2, [pc, #104]	@ (80008e8 <main+0x3e0>)
 8000880:	6013      	str	r3, [r2, #0]
		  PWM2 = 0;
 8000882:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <main+0x3e4>)
 8000884:	f04f 0200 	mov.w	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	e01c      	b.n	80008c6 <main+0x3be>
	  }
	  else if(Vfeedback < 0){
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <main+0x3d4>)
 800088e:	edd3 7a00 	vldr	s15, [r3]
 8000892:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800089a:	d50c      	bpl.n	80008b6 <main+0x3ae>
		  PWM1 = 0;
 800089c:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <main+0x3e0>)
 800089e:	f04f 0200 	mov.w	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
		  PWM2 = Vfeedback * -1;
 80008a4:	4b0d      	ldr	r3, [pc, #52]	@ (80008dc <main+0x3d4>)
 80008a6:	edd3 7a00 	vldr	s15, [r3]
 80008aa:	eef1 7a67 	vneg.f32	s15, s15
 80008ae:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <main+0x3e4>)
 80008b0:	edc3 7a00 	vstr	s15, [r3]
 80008b4:	e007      	b.n	80008c6 <main+0x3be>
	  }
	  else{
		  PWM1 = 0;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <main+0x3e0>)
 80008b8:	f04f 0200 	mov.w	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
		  PWM2 = 0;
 80008be:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <main+0x3e4>)
 80008c0:	f04f 0200 	mov.w	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
	  }
////////////// MOTOR1 or MOTOR2 /////////////////////////////////////////////
	  if(mode == 1){
 80008c6:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <main+0x3e8>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d102      	bne.n	80008d4 <main+0x3cc>
		  DriveF();
 80008ce:	f000 fd79 	bl	80013c4 <DriveF>
 80008d2:	e66e      	b.n	80005b2 <main+0xaa>
	  }
	  else{
		  DriveC();
 80008d4:	f000 fda2 	bl	800141c <DriveC>
	  setADC = ADC_RawRead[1];
 80008d8:	e66b      	b.n	80005b2 <main+0xaa>
 80008da:	bf00      	nop
 80008dc:	20000354 	.word	0x20000354
 80008e0:	c5cc3800 	.word	0xc5cc3800
 80008e4:	c5cc3800 	.word	0xc5cc3800
 80008e8:	20000318 	.word	0x20000318
 80008ec:	2000031c 	.word	0x2000031c
 80008f0:	20000000 	.word	0x20000000

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b094      	sub	sp, #80	@ 0x50
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0318 	add.w	r3, r7, #24
 80008fe:	2238      	movs	r2, #56	@ 0x38
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f008 fe18 	bl	8009538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000916:	2000      	movs	r0, #0
 8000918:	f003 fd30 	bl	800437c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800091c:	2302      	movs	r3, #2
 800091e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000920:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000926:	2340      	movs	r3, #64	@ 0x40
 8000928:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092a:	2302      	movs	r3, #2
 800092c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800092e:	2302      	movs	r3, #2
 8000930:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000932:	2304      	movs	r3, #4
 8000934:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000936:	2355      	movs	r3, #85	@ 0x55
 8000938:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800093a:	2302      	movs	r3, #2
 800093c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800093e:	2302      	movs	r3, #2
 8000940:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000942:	2302      	movs	r3, #2
 8000944:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000946:	f107 0318 	add.w	r3, r7, #24
 800094a:	4618      	mov	r0, r3
 800094c:	f003 fdca 	bl	80044e4 <HAL_RCC_OscConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000956:	f000 fd8d 	bl	8001474 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095a:	230f      	movs	r3, #15
 800095c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095e:	2303      	movs	r3, #3
 8000960:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2104      	movs	r1, #4
 8000972:	4618      	mov	r0, r3
 8000974:	f004 f8c8 	bl	8004b08 <HAL_RCC_ClockConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800097e:	f000 fd79 	bl	8001474 <Error_Handler>
  }
}
 8000982:	bf00      	nop
 8000984:	3750      	adds	r7, #80	@ 0x50
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08c      	sub	sp, #48	@ 0x30
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000992:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2220      	movs	r2, #32
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f008 fdc7 	bl	8009538 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009aa:	4b3a      	ldr	r3, [pc, #232]	@ (8000a94 <MX_ADC1_Init+0x108>)
 80009ac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80009b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009b2:	4b38      	ldr	r3, [pc, #224]	@ (8000a94 <MX_ADC1_Init+0x108>)
 80009b4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80009b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009ba:	4b36      	ldr	r3, [pc, #216]	@ (8000a94 <MX_ADC1_Init+0x108>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009c0:	4b34      	ldr	r3, [pc, #208]	@ (8000a94 <MX_ADC1_Init+0x108>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80009c6:	4b33      	ldr	r3, [pc, #204]	@ (8000a94 <MX_ADC1_Init+0x108>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009cc:	4b31      	ldr	r3, [pc, #196]	@ (8000a94 <MX_ADC1_Init+0x108>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009d2:	4b30      	ldr	r3, [pc, #192]	@ (8000a94 <MX_ADC1_Init+0x108>)
 80009d4:	2204      	movs	r2, #4
 80009d6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000a94 <MX_ADC1_Init+0x108>)
 80009da:	2200      	movs	r2, #0
 80009dc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009de:	4b2d      	ldr	r3, [pc, #180]	@ (8000a94 <MX_ADC1_Init+0x108>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80009e4:	4b2b      	ldr	r3, [pc, #172]	@ (8000a94 <MX_ADC1_Init+0x108>)
 80009e6:	2202      	movs	r2, #2
 80009e8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000a94 <MX_ADC1_Init+0x108>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80009f2:	4b28      	ldr	r3, [pc, #160]	@ (8000a94 <MX_ADC1_Init+0x108>)
 80009f4:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 80009f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80009fa:	4b26      	ldr	r3, [pc, #152]	@ (8000a94 <MX_ADC1_Init+0x108>)
 80009fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a00:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a02:	4b24      	ldr	r3, [pc, #144]	@ (8000a94 <MX_ADC1_Init+0x108>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a0a:	4b22      	ldr	r3, [pc, #136]	@ (8000a94 <MX_ADC1_Init+0x108>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000a10:	4b20      	ldr	r3, [pc, #128]	@ (8000a94 <MX_ADC1_Init+0x108>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a18:	481e      	ldr	r0, [pc, #120]	@ (8000a94 <MX_ADC1_Init+0x108>)
 8000a1a:	f001 fad9 	bl	8001fd0 <HAL_ADC_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000a24:	f000 fd26 	bl	8001474 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a30:	4619      	mov	r1, r3
 8000a32:	4818      	ldr	r0, [pc, #96]	@ (8000a94 <MX_ADC1_Init+0x108>)
 8000a34:	f002 fda6 	bl	8003584 <HAL_ADCEx_MultiModeConfigChannel>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000a3e:	f000 fd19 	bl	8001474 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a42:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <MX_ADC1_Init+0x10c>)
 8000a44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a46:	2306      	movs	r3, #6
 8000a48:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000a4a:	2307      	movs	r3, #7
 8000a4c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a4e:	237f      	movs	r3, #127	@ 0x7f
 8000a50:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a52:	2304      	movs	r3, #4
 8000a54:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480d      	ldr	r0, [pc, #52]	@ (8000a94 <MX_ADC1_Init+0x108>)
 8000a60:	f001 ffce 	bl	8002a00 <HAL_ADC_ConfigChannel>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000a6a:	f000 fd03 	bl	8001474 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a9c <MX_ADC1_Init+0x110>)
 8000a70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a72:	230c      	movs	r3, #12
 8000a74:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4806      	ldr	r0, [pc, #24]	@ (8000a94 <MX_ADC1_Init+0x108>)
 8000a7c:	f001 ffc0 	bl	8002a00 <HAL_ADC_ConfigChannel>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000a86:	f000 fcf5 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	3730      	adds	r7, #48	@ 0x30
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	2000002c 	.word	0x2000002c
 8000a98:	04300002 	.word	0x04300002
 8000a9c:	14f00020 	.word	0x14f00020

08000aa0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000aa4:	4b21      	ldr	r3, [pc, #132]	@ (8000b2c <MX_LPUART1_UART_Init+0x8c>)
 8000aa6:	4a22      	ldr	r2, [pc, #136]	@ (8000b30 <MX_LPUART1_UART_Init+0x90>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000aaa:	4b20      	ldr	r3, [pc, #128]	@ (8000b2c <MX_LPUART1_UART_Init+0x8c>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ab0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b2c <MX_LPUART1_UART_Init+0x8c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <MX_LPUART1_UART_Init+0x8c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <MX_LPUART1_UART_Init+0x8c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b19      	ldr	r3, [pc, #100]	@ (8000b2c <MX_LPUART1_UART_Init+0x8c>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <MX_LPUART1_UART_Init+0x8c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ad0:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <MX_LPUART1_UART_Init+0x8c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <MX_LPUART1_UART_Init+0x8c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000adc:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <MX_LPUART1_UART_Init+0x8c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ae2:	4812      	ldr	r0, [pc, #72]	@ (8000b2c <MX_LPUART1_UART_Init+0x8c>)
 8000ae4:	f006 fa14 	bl	8006f10 <HAL_UART_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000aee:	f000 fcc1 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af2:	2100      	movs	r1, #0
 8000af4:	480d      	ldr	r0, [pc, #52]	@ (8000b2c <MX_LPUART1_UART_Init+0x8c>)
 8000af6:	f008 fc1e 	bl	8009336 <HAL_UARTEx_SetTxFifoThreshold>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000b00:	f000 fcb8 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b04:	2100      	movs	r1, #0
 8000b06:	4809      	ldr	r0, [pc, #36]	@ (8000b2c <MX_LPUART1_UART_Init+0x8c>)
 8000b08:	f008 fc53 	bl	80093b2 <HAL_UARTEx_SetRxFifoThreshold>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000b12:	f000 fcaf 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b16:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <MX_LPUART1_UART_Init+0x8c>)
 8000b18:	f008 fbd4 	bl	80092c4 <HAL_UARTEx_DisableFifoMode>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000b22:	f000 fca7 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200000f8 	.word	0x200000f8
 8000b30:	40008000 	.word	0x40008000

08000b34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b09c      	sub	sp, #112	@ 0x70
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b48:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b54:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
 8000b64:	615a      	str	r2, [r3, #20]
 8000b66:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	2234      	movs	r2, #52	@ 0x34
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f008 fce2 	bl	8009538 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b74:	4b4b      	ldr	r3, [pc, #300]	@ (8000ca4 <MX_TIM1_Init+0x170>)
 8000b76:	4a4c      	ldr	r2, [pc, #304]	@ (8000ca8 <MX_TIM1_Init+0x174>)
 8000b78:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8000b7a:	4b4a      	ldr	r3, [pc, #296]	@ (8000ca4 <MX_TIM1_Init+0x170>)
 8000b7c:	22a9      	movs	r2, #169	@ 0xa9
 8000b7e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b80:	4b48      	ldr	r3, [pc, #288]	@ (8000ca4 <MX_TIM1_Init+0x170>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 32675;
 8000b86:	4b47      	ldr	r3, [pc, #284]	@ (8000ca4 <MX_TIM1_Init+0x170>)
 8000b88:	f647 72a3 	movw	r2, #32675	@ 0x7fa3
 8000b8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8e:	4b45      	ldr	r3, [pc, #276]	@ (8000ca4 <MX_TIM1_Init+0x170>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b94:	4b43      	ldr	r3, [pc, #268]	@ (8000ca4 <MX_TIM1_Init+0x170>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9a:	4b42      	ldr	r3, [pc, #264]	@ (8000ca4 <MX_TIM1_Init+0x170>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ba0:	4840      	ldr	r0, [pc, #256]	@ (8000ca4 <MX_TIM1_Init+0x170>)
 8000ba2:	f004 fc1b 	bl	80053dc <HAL_TIM_Base_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000bac:	f000 fc62 	bl	8001474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bb4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bb6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4839      	ldr	r0, [pc, #228]	@ (8000ca4 <MX_TIM1_Init+0x170>)
 8000bbe:	f005 fa59 	bl	8006074 <HAL_TIM_ConfigClockSource>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000bc8:	f000 fc54 	bl	8001474 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bcc:	4835      	ldr	r0, [pc, #212]	@ (8000ca4 <MX_TIM1_Init+0x170>)
 8000bce:	f004 fd45 	bl	800565c <HAL_TIM_PWM_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000bd8:	f000 fc4c 	bl	8001474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000be0:	2300      	movs	r3, #0
 8000be2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000be8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000bec:	4619      	mov	r1, r3
 8000bee:	482d      	ldr	r0, [pc, #180]	@ (8000ca4 <MX_TIM1_Init+0x170>)
 8000bf0:	f006 f81e 	bl	8006c30 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000bfa:	f000 fc3b 	bl	8001474 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bfe:	2360      	movs	r3, #96	@ 0x60
 8000c00:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c06:	2300      	movs	r3, #0
 8000c08:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c12:	2300      	movs	r3, #0
 8000c14:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c16:	2300      	movs	r3, #0
 8000c18:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c1a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c1e:	2200      	movs	r2, #0
 8000c20:	4619      	mov	r1, r3
 8000c22:	4820      	ldr	r0, [pc, #128]	@ (8000ca4 <MX_TIM1_Init+0x170>)
 8000c24:	f005 f912 	bl	8005e4c <HAL_TIM_PWM_ConfigChannel>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000c2e:	f000 fc21 	bl	8001474 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c32:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c36:	2204      	movs	r2, #4
 8000c38:	4619      	mov	r1, r3
 8000c3a:	481a      	ldr	r0, [pc, #104]	@ (8000ca4 <MX_TIM1_Init+0x170>)
 8000c3c:	f005 f906 	bl	8005e4c <HAL_TIM_PWM_ConfigChannel>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000c46:	f000 fc15 	bl	8001474 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c62:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c74:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	4619      	mov	r1, r3
 8000c86:	4807      	ldr	r0, [pc, #28]	@ (8000ca4 <MX_TIM1_Init+0x170>)
 8000c88:	f006 f868 	bl	8006d5c <HAL_TIMEx_ConfigBreakDeadTime>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8000c92:	f000 fbef 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c96:	4803      	ldr	r0, [pc, #12]	@ (8000ca4 <MX_TIM1_Init+0x170>)
 8000c98:	f000 fde6 	bl	8001868 <HAL_TIM_MspPostInit>

}
 8000c9c:	bf00      	nop
 8000c9e:	3770      	adds	r7, #112	@ 0x70
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2000018c 	.word	0x2000018c
 8000ca8:	40012c00 	.word	0x40012c00

08000cac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b088      	sub	sp, #32
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cb2:	f107 0310 	add.w	r3, r7, #16
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cca:	4b1e      	ldr	r3, [pc, #120]	@ (8000d44 <MX_TIM2_Init+0x98>)
 8000ccc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cd0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d44 <MX_TIM2_Init+0x98>)
 8000cd4:	22a9      	movs	r2, #169	@ 0xa9
 8000cd6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d44 <MX_TIM2_Init+0x98>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000cde:	4b19      	ldr	r3, [pc, #100]	@ (8000d44 <MX_TIM2_Init+0x98>)
 8000ce0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ce4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce6:	4b17      	ldr	r3, [pc, #92]	@ (8000d44 <MX_TIM2_Init+0x98>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cec:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <MX_TIM2_Init+0x98>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cf2:	4814      	ldr	r0, [pc, #80]	@ (8000d44 <MX_TIM2_Init+0x98>)
 8000cf4:	f004 fb72 	bl	80053dc <HAL_TIM_Base_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000cfe:	f000 fbb9 	bl	8001474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480d      	ldr	r0, [pc, #52]	@ (8000d44 <MX_TIM2_Init+0x98>)
 8000d10:	f005 f9b0 	bl	8006074 <HAL_TIM_ConfigClockSource>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d1a:	f000 fbab 	bl	8001474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d1e:	2320      	movs	r3, #32
 8000d20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4806      	ldr	r0, [pc, #24]	@ (8000d44 <MX_TIM2_Init+0x98>)
 8000d2c:	f005 ff80 	bl	8006c30 <HAL_TIMEx_MasterConfigSynchronization>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d36:	f000 fb9d 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	3720      	adds	r7, #32
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200001d8 	.word	0x200001d8

08000d48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4e:	f107 0310 	add.w	r3, r7, #16
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d66:	4b1d      	ldr	r3, [pc, #116]	@ (8000ddc <MX_TIM3_Init+0x94>)
 8000d68:	4a1d      	ldr	r2, [pc, #116]	@ (8000de0 <MX_TIM3_Init+0x98>)
 8000d6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ddc <MX_TIM3_Init+0x94>)
 8000d6e:	22a9      	movs	r2, #169	@ 0xa9
 8000d70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d72:	4b1a      	ldr	r3, [pc, #104]	@ (8000ddc <MX_TIM3_Init+0x94>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000d78:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <MX_TIM3_Init+0x94>)
 8000d7a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d80:	4b16      	ldr	r3, [pc, #88]	@ (8000ddc <MX_TIM3_Init+0x94>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d86:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <MX_TIM3_Init+0x94>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d8c:	4813      	ldr	r0, [pc, #76]	@ (8000ddc <MX_TIM3_Init+0x94>)
 8000d8e:	f004 fb25 	bl	80053dc <HAL_TIM_Base_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000d98:	f000 fb6c 	bl	8001474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000da0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	4619      	mov	r1, r3
 8000da8:	480c      	ldr	r0, [pc, #48]	@ (8000ddc <MX_TIM3_Init+0x94>)
 8000daa:	f005 f963 	bl	8006074 <HAL_TIM_ConfigClockSource>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000db4:	f000 fb5e 	bl	8001474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000db8:	2320      	movs	r3, #32
 8000dba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4805      	ldr	r0, [pc, #20]	@ (8000ddc <MX_TIM3_Init+0x94>)
 8000dc6:	f005 ff33 	bl	8006c30 <HAL_TIMEx_MasterConfigSynchronization>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000dd0:	f000 fb50 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000224 	.word	0x20000224
 8000de0:	40000400 	.word	0x40000400

08000de4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08e      	sub	sp, #56	@ 0x38
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e04:	463b      	mov	r3, r7
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	611a      	str	r2, [r3, #16]
 8000e12:	615a      	str	r2, [r3, #20]
 8000e14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e16:	4b34      	ldr	r3, [pc, #208]	@ (8000ee8 <MX_TIM4_Init+0x104>)
 8000e18:	4a34      	ldr	r2, [pc, #208]	@ (8000eec <MX_TIM4_Init+0x108>)
 8000e1a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8000e1c:	4b32      	ldr	r3, [pc, #200]	@ (8000ee8 <MX_TIM4_Init+0x104>)
 8000e1e:	22a9      	movs	r2, #169	@ 0xa9
 8000e20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e22:	4b31      	ldr	r3, [pc, #196]	@ (8000ee8 <MX_TIM4_Init+0x104>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 32675;
 8000e28:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee8 <MX_TIM4_Init+0x104>)
 8000e2a:	f647 72a3 	movw	r2, #32675	@ 0x7fa3
 8000e2e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e30:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee8 <MX_TIM4_Init+0x104>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e36:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee8 <MX_TIM4_Init+0x104>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e3c:	482a      	ldr	r0, [pc, #168]	@ (8000ee8 <MX_TIM4_Init+0x104>)
 8000e3e:	f004 facd 	bl	80053dc <HAL_TIM_Base_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000e48:	f000 fb14 	bl	8001474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e50:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e56:	4619      	mov	r1, r3
 8000e58:	4823      	ldr	r0, [pc, #140]	@ (8000ee8 <MX_TIM4_Init+0x104>)
 8000e5a:	f005 f90b 	bl	8006074 <HAL_TIM_ConfigClockSource>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000e64:	f000 fb06 	bl	8001474 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e68:	481f      	ldr	r0, [pc, #124]	@ (8000ee8 <MX_TIM4_Init+0x104>)
 8000e6a:	f004 fbf7 	bl	800565c <HAL_TIM_PWM_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000e74:	f000 fafe 	bl	8001474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4619      	mov	r1, r3
 8000e86:	4818      	ldr	r0, [pc, #96]	@ (8000ee8 <MX_TIM4_Init+0x104>)
 8000e88:	f005 fed2 	bl	8006c30 <HAL_TIMEx_MasterConfigSynchronization>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000e92:	f000 faef 	bl	8001474 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e96:	2360      	movs	r3, #96	@ 0x60
 8000e98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8000e9a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e9e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	2200      	movs	r2, #0
 8000eac:	4619      	mov	r1, r3
 8000eae:	480e      	ldr	r0, [pc, #56]	@ (8000ee8 <MX_TIM4_Init+0x104>)
 8000eb0:	f004 ffcc 	bl	8005e4c <HAL_TIM_PWM_ConfigChannel>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000eba:	f000 fadb 	bl	8001474 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	2204      	movs	r2, #4
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4807      	ldr	r0, [pc, #28]	@ (8000ee8 <MX_TIM4_Init+0x104>)
 8000eca:	f004 ffbf 	bl	8005e4c <HAL_TIM_PWM_ConfigChannel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8000ed4:	f000 face 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ed8:	4803      	ldr	r0, [pc, #12]	@ (8000ee8 <MX_TIM4_Init+0x104>)
 8000eda:	f000 fcc5 	bl	8001868 <HAL_TIM_MspPostInit>

}
 8000ede:	bf00      	nop
 8000ee0:	3738      	adds	r7, #56	@ 0x38
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000270 	.word	0x20000270
 8000eec:	40000800 	.word	0x40000800

08000ef0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	@ 0x30
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	2224      	movs	r2, #36	@ 0x24
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f008 fb1a 	bl	8009538 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f04:	463b      	mov	r3, r7
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f0e:	4b21      	ldr	r3, [pc, #132]	@ (8000f94 <MX_TIM5_Init+0xa4>)
 8000f10:	4a21      	ldr	r2, [pc, #132]	@ (8000f98 <MX_TIM5_Init+0xa8>)
 8000f12:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f14:	4b1f      	ldr	r3, [pc, #124]	@ (8000f94 <MX_TIM5_Init+0xa4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f94 <MX_TIM5_Init+0xa4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000f20:	4b1c      	ldr	r3, [pc, #112]	@ (8000f94 <MX_TIM5_Init+0xa4>)
 8000f22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f26:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f28:	4b1a      	ldr	r3, [pc, #104]	@ (8000f94 <MX_TIM5_Init+0xa4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2e:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <MX_TIM5_Init+0xa4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f34:	2303      	movs	r3, #3
 8000f36:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480d      	ldr	r0, [pc, #52]	@ (8000f94 <MX_TIM5_Init+0xa4>)
 8000f60:	f004 fcf0 	bl	8005944 <HAL_TIM_Encoder_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000f6a:	f000 fa83 	bl	8001474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f76:	463b      	mov	r3, r7
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4806      	ldr	r0, [pc, #24]	@ (8000f94 <MX_TIM5_Init+0xa4>)
 8000f7c:	f005 fe58 	bl	8006c30 <HAL_TIMEx_MasterConfigSynchronization>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000f86:	f000 fa75 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	3730      	adds	r7, #48	@ 0x30
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200002bc 	.word	0x200002bc
 8000f98:	40000c00 	.word	0x40000c00

08000f9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000fa2:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <MX_DMA_Init+0x50>)
 8000fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fa6:	4a11      	ldr	r2, [pc, #68]	@ (8000fec <MX_DMA_Init+0x50>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fae:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <MX_DMA_Init+0x50>)
 8000fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fba:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <MX_DMA_Init+0x50>)
 8000fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fbe:	4a0b      	ldr	r2, [pc, #44]	@ (8000fec <MX_DMA_Init+0x50>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fc6:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <MX_DMA_Init+0x50>)
 8000fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	200b      	movs	r0, #11
 8000fd8:	f002 fcb7 	bl	800394a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fdc:	200b      	movs	r0, #11
 8000fde:	f002 fcce 	bl	800397e <HAL_NVIC_EnableIRQ>

}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000

08000ff0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	@ 0x28
 8000ff4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001006:	4b39      	ldr	r3, [pc, #228]	@ (80010ec <MX_GPIO_Init+0xfc>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	4a38      	ldr	r2, [pc, #224]	@ (80010ec <MX_GPIO_Init+0xfc>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001012:	4b36      	ldr	r3, [pc, #216]	@ (80010ec <MX_GPIO_Init+0xfc>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800101e:	4b33      	ldr	r3, [pc, #204]	@ (80010ec <MX_GPIO_Init+0xfc>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001022:	4a32      	ldr	r2, [pc, #200]	@ (80010ec <MX_GPIO_Init+0xfc>)
 8001024:	f043 0320 	orr.w	r3, r3, #32
 8001028:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800102a:	4b30      	ldr	r3, [pc, #192]	@ (80010ec <MX_GPIO_Init+0xfc>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102e:	f003 0320 	and.w	r3, r3, #32
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	4b2d      	ldr	r3, [pc, #180]	@ (80010ec <MX_GPIO_Init+0xfc>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103a:	4a2c      	ldr	r2, [pc, #176]	@ (80010ec <MX_GPIO_Init+0xfc>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001042:	4b2a      	ldr	r3, [pc, #168]	@ (80010ec <MX_GPIO_Init+0xfc>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	4b27      	ldr	r3, [pc, #156]	@ (80010ec <MX_GPIO_Init+0xfc>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001052:	4a26      	ldr	r2, [pc, #152]	@ (80010ec <MX_GPIO_Init+0xfc>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105a:	4b24      	ldr	r3, [pc, #144]	@ (80010ec <MX_GPIO_Init+0xfc>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	2130      	movs	r1, #48	@ 0x30
 800106a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800106e:	f003 f955 	bl	800431c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	2101      	movs	r1, #1
 8001076:	481e      	ldr	r0, [pc, #120]	@ (80010f0 <MX_GPIO_Init+0x100>)
 8001078:	f003 f950 	bl	800431c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800107c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001082:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	4818      	ldr	r0, [pc, #96]	@ (80010f4 <MX_GPIO_Init+0x104>)
 8001094:	f002 ffc0 	bl	8004018 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8001098:	2330      	movs	r3, #48	@ 0x30
 800109a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4619      	mov	r1, r3
 80010ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010b2:	f002 ffb1 	bl	8004018 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010b6:	2301      	movs	r3, #1
 80010b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	4808      	ldr	r0, [pc, #32]	@ (80010f0 <MX_GPIO_Init+0x100>)
 80010ce:	f002 ffa3 	bl	8004018 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	2028      	movs	r0, #40	@ 0x28
 80010d8:	f002 fc37 	bl	800394a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010dc:	2028      	movs	r0, #40	@ 0x28
 80010de:	f002 fc4e 	bl	800397e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010e2:	bf00      	nop
 80010e4:	3728      	adds	r7, #40	@ 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000
 80010f0:	48000400 	.word	0x48000400
 80010f4:	48000800 	.word	0x48000800

080010f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{ //B1 button
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13) {
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001108:	d112      	bne.n	8001130 <HAL_GPIO_EXTI_Callback+0x38>
        // Blue button interrupt occurred
        // Your code here
    	mode = mode + 1;
 800110a:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <HAL_GPIO_EXTI_Callback+0x44>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	3301      	adds	r3, #1
 8001110:	b29a      	uxth	r2, r3
 8001112:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <HAL_GPIO_EXTI_Callback+0x44>)
 8001114:	801a      	strh	r2, [r3, #0]
    	mode = mode % 3;
 8001116:	4b09      	ldr	r3, [pc, #36]	@ (800113c <HAL_GPIO_EXTI_Callback+0x44>)
 8001118:	881a      	ldrh	r2, [r3, #0]
 800111a:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <HAL_GPIO_EXTI_Callback+0x48>)
 800111c:	fba3 1302 	umull	r1, r3, r3, r2
 8001120:	0859      	lsrs	r1, r3, #1
 8001122:	460b      	mov	r3, r1
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	440b      	add	r3, r1
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	b29a      	uxth	r2, r3
 800112c:	4b03      	ldr	r3, [pc, #12]	@ (800113c <HAL_GPIO_EXTI_Callback+0x44>)
 800112e:	801a      	strh	r2, [r3, #0]
    }
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	20000000 	.word	0x20000000
 8001140:	aaaaaaab 	.word	0xaaaaaaab

08001144 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // Input reading
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if (htim == &htim2 )
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a8a      	ldr	r2, [pc, #552]	@ (8001378 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001150:	4293      	cmp	r3, r2
 8001152:	f040 810d 	bne.w	8001370 <HAL_TIM_PeriodElapsedCallback+0x22c>
  {
	  a +=1;
 8001156:	4b89      	ldr	r3, [pc, #548]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	3301      	adds	r3, #1
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4b87      	ldr	r3, [pc, #540]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001160:	701a      	strb	r2, [r3, #0]
	  a = a%5;
 8001162:	4b86      	ldr	r3, [pc, #536]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001164:	781a      	ldrb	r2, [r3, #0]
 8001166:	4b86      	ldr	r3, [pc, #536]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001168:	fba3 1302 	umull	r1, r3, r3, r2
 800116c:	0899      	lsrs	r1, r3, #2
 800116e:	460b      	mov	r3, r1
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	440b      	add	r3, r1
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	b2da      	uxtb	r2, r3
 8001178:	4b80      	ldr	r3, [pc, #512]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x238>)
 800117a:	701a      	strb	r2, [r3, #0]
	  if (mode ==2 && a == 0)
 800117c:	4b81      	ldr	r3, [pc, #516]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d12b      	bne.n	80011dc <HAL_TIM_PeriodElapsedCallback+0x98>
 8001184:	4b7d      	ldr	r3, [pc, #500]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d127      	bne.n	80011dc <HAL_TIM_PeriodElapsedCallback+0x98>
	  {
		  ADCst = (uint8_t)(32768 + x & 0xFF);
 800118c:	4b7e      	ldr	r3, [pc, #504]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800118e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	4b7d      	ldr	r3, [pc, #500]	@ (800138c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001196:	701a      	strb	r2, [r3, #0]
		  ADCnd = (uint8_t)((32768 + x >> 8) & 0xFF);
 8001198:	4b7b      	ldr	r3, [pc, #492]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800119a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80011a2:	121b      	asrs	r3, r3, #8
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4b7a      	ldr	r3, [pc, #488]	@ (8001390 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80011a8:	701a      	strb	r2, [r3, #0]

		  txBuffer[0] = 69;
 80011aa:	4b7a      	ldr	r3, [pc, #488]	@ (8001394 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80011ac:	2245      	movs	r2, #69	@ 0x45
 80011ae:	701a      	strb	r2, [r3, #0]
		  txBuffer[1] = ADCst;
 80011b0:	4b76      	ldr	r3, [pc, #472]	@ (800138c <HAL_TIM_PeriodElapsedCallback+0x248>)
 80011b2:	781a      	ldrb	r2, [r3, #0]
 80011b4:	4b77      	ldr	r3, [pc, #476]	@ (8001394 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80011b6:	705a      	strb	r2, [r3, #1]
		  txBuffer[2] = ADCnd;
 80011b8:	4b75      	ldr	r3, [pc, #468]	@ (8001390 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	4b75      	ldr	r3, [pc, #468]	@ (8001394 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80011be:	709a      	strb	r2, [r3, #2]
		  txBuffer[3] = '\n';
 80011c0:	4b74      	ldr	r3, [pc, #464]	@ (8001394 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80011c2:	220a      	movs	r2, #10
 80011c4:	70da      	strb	r2, [r3, #3]
		  HAL_UART_Transmit_IT(&hlpuart1, txBuffer , 5);
 80011c6:	2205      	movs	r2, #5
 80011c8:	4972      	ldr	r1, [pc, #456]	@ (8001394 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80011ca:	4873      	ldr	r0, [pc, #460]	@ (8001398 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80011cc:	f005 fef0 	bl	8006fb0 <HAL_UART_Transmit_IT>
		  HAL_UART_Receive_IT(&hlpuart1, rxBuffer, 5);
 80011d0:	2205      	movs	r2, #5
 80011d2:	4972      	ldr	r1, [pc, #456]	@ (800139c <HAL_TIM_PeriodElapsedCallback+0x258>)
 80011d4:	4870      	ldr	r0, [pc, #448]	@ (8001398 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80011d6:	f005 ff7f 	bl	80070d8 <HAL_UART_Receive_IT>
  }
//////////////////////////////UART//////////////////////////
  if(htim == &htim3)
  {
  }
}
 80011da:	e0c9      	b.n	8001370 <HAL_TIM_PeriodElapsedCallback+0x22c>
	  else if(mode == 1)
 80011dc:	4b69      	ldr	r3, [pc, #420]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d145      	bne.n	8001270 <HAL_TIM_PeriodElapsedCallback+0x12c>
		  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim5);
 80011e4:	4b6e      	ldr	r3, [pc, #440]	@ (80013a0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ea:	ee07 3a90 	vmov	s15, r3
 80011ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f2:	4b6c      	ldr	r3, [pc, #432]	@ (80013a4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80011f4:	edc3 7a00 	vstr	s15, [r3]
		  if(QEIReadRaw > 32678)
 80011f8:	4b6a      	ldr	r3, [pc, #424]	@ (80013a4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80011fa:	edd3 7a00 	vldr	s15, [r3]
 80011fe:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 80013a8 <HAL_TIM_PeriodElapsedCallback+0x264>
 8001202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120a:	dd18      	ble.n	800123e <HAL_TIM_PeriodElapsedCallback+0xfa>
			  posQEI -= (65536-QEIReadRaw);
 800120c:	4b67      	ldr	r3, [pc, #412]	@ (80013ac <HAL_TIM_PeriodElapsedCallback+0x268>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	ee07 3a90 	vmov	s15, r3
 8001214:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001218:	4b62      	ldr	r3, [pc, #392]	@ (80013a4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800121a:	edd3 7a00 	vldr	s15, [r3]
 800121e:	eddf 6a64 	vldr	s13, [pc, #400]	@ 80013b0 <HAL_TIM_PeriodElapsedCallback+0x26c>
 8001222:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800122e:	ee17 2a90 	vmov	r2, s15
 8001232:	4b5e      	ldr	r3, [pc, #376]	@ (80013ac <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001234:	601a      	str	r2, [r3, #0]
			  z = 1;
 8001236:	4b5f      	ldr	r3, [pc, #380]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001238:	2201      	movs	r2, #1
 800123a:	801a      	strh	r2, [r3, #0]
 800123c:	e013      	b.n	8001266 <HAL_TIM_PeriodElapsedCallback+0x122>
			  posQEI += QEIReadRaw;
 800123e:	4b5b      	ldr	r3, [pc, #364]	@ (80013ac <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	ee07 3a90 	vmov	s15, r3
 8001246:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800124a:	4b56      	ldr	r3, [pc, #344]	@ (80013a4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800124c:	edd3 7a00 	vldr	s15, [r3]
 8001250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001254:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001258:	ee17 2a90 	vmov	r2, s15
 800125c:	4b53      	ldr	r3, [pc, #332]	@ (80013ac <HAL_TIM_PeriodElapsedCallback+0x268>)
 800125e:	601a      	str	r2, [r3, #0]
			  z = 2;
 8001260:	4b54      	ldr	r3, [pc, #336]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001262:	2202      	movs	r2, #2
 8001264:	801a      	strh	r2, [r3, #0]
		  __HAL_TIM_SET_COUNTER(&htim5, 0);
 8001266:	4b4e      	ldr	r3, [pc, #312]	@ (80013a0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2200      	movs	r2, #0
 800126c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800126e:	e07f      	b.n	8001370 <HAL_TIM_PeriodElapsedCallback+0x22c>
	  else if(mode == 0 || mode == 2)
 8001270:	4b44      	ldr	r3, [pc, #272]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_TIM_PeriodElapsedCallback+0x13c>
 8001278:	4b42      	ldr	r3, [pc, #264]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d177      	bne.n	8001370 <HAL_TIM_PeriodElapsedCallback+0x22c>
		  posADC = ADC_RawRead[0];
 8001280:	4b4d      	ldr	r3, [pc, #308]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	b21a      	sxth	r2, r3
 8001286:	4b4d      	ldr	r3, [pc, #308]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001288:	801a      	strh	r2, [r3, #0]
		  if(posADC-prev_pos < -2048)
 800128a:	4b4c      	ldr	r3, [pc, #304]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x278>)
 800128c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001290:	461a      	mov	r2, r3
 8001292:	4b4b      	ldr	r3, [pc, #300]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001294:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 800129e:	da1d      	bge.n	80012dc <HAL_TIM_PeriodElapsedCallback+0x198>
			  x += (4096+(posADC-prev_pos))*360/4096 ;
 80012a0:	4b46      	ldr	r3, [pc, #280]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x278>)
 80012a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b45      	ldr	r3, [pc, #276]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80012aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012b4:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80012b8:	fb02 f303 	mul.w	r3, r2, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	da01      	bge.n	80012c4 <HAL_TIM_PeriodElapsedCallback+0x180>
 80012c0:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80012c4:	131b      	asrs	r3, r3, #12
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80012ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	4413      	add	r3, r2
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	b21a      	sxth	r2, r3
 80012d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80012d8:	801a      	strh	r2, [r3, #0]
 80012da:	e044      	b.n	8001366 <HAL_TIM_PeriodElapsedCallback+0x222>
		  else if(posADC-prev_pos > 2048){ //reverse callback
 80012dc:	4b37      	ldr	r3, [pc, #220]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x278>)
 80012de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b36      	ldr	r3, [pc, #216]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80012e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80012f0:	dd1e      	ble.n	8001330 <HAL_TIM_PeriodElapsedCallback+0x1ec>
			  x -= (4096-(posADC-prev_pos))*360/4096;
 80012f2:	4b32      	ldr	r3, [pc, #200]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x278>)
 80012f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b31      	ldr	r3, [pc, #196]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80012fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8001306:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800130a:	fb02 f303 	mul.w	r3, r2, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	da01      	bge.n	8001316 <HAL_TIM_PeriodElapsedCallback+0x1d2>
 8001312:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001316:	131b      	asrs	r3, r3, #12
 8001318:	425b      	negs	r3, r3
 800131a:	b29a      	uxth	r2, r3
 800131c:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800131e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001322:	b29b      	uxth	r3, r3
 8001324:	4413      	add	r3, r2
 8001326:	b29b      	uxth	r3, r3
 8001328:	b21a      	sxth	r2, r3
 800132a:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800132c:	801a      	strh	r2, [r3, #0]
 800132e:	e01a      	b.n	8001366 <HAL_TIM_PeriodElapsedCallback+0x222>
			  x += (posADC-prev_pos)*360/4096;
 8001330:	4b22      	ldr	r3, [pc, #136]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001336:	461a      	mov	r2, r3
 8001338:	4b21      	ldr	r3, [pc, #132]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800133a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001344:	fb02 f303 	mul.w	r3, r2, r3
 8001348:	2b00      	cmp	r3, #0
 800134a:	da01      	bge.n	8001350 <HAL_TIM_PeriodElapsedCallback+0x20c>
 800134c:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001350:	131b      	asrs	r3, r3, #12
 8001352:	b29a      	uxth	r2, r3
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001356:	f9b3 3000 	ldrsh.w	r3, [r3]
 800135a:	b29b      	uxth	r3, r3
 800135c:	4413      	add	r3, r2
 800135e:	b29b      	uxth	r3, r3
 8001360:	b21a      	sxth	r2, r3
 8001362:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001364:	801a      	strh	r2, [r3, #0]
		  prev_pos = posADC;
 8001366:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001368:	f9b3 2000 	ldrsh.w	r2, [r3]
 800136c:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800136e:	801a      	strh	r2, [r3, #0]
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200001d8 	.word	0x200001d8
 800137c:	20000360 	.word	0x20000360
 8001380:	cccccccd 	.word	0xcccccccd
 8001384:	20000000 	.word	0x20000000
 8001388:	20000308 	.word	0x20000308
 800138c:	20000361 	.word	0x20000361
 8001390:	20000362 	.word	0x20000362
 8001394:	20000364 	.word	0x20000364
 8001398:	200000f8 	.word	0x200000f8
 800139c:	20000358 	.word	0x20000358
 80013a0:	200002bc 	.word	0x200002bc
 80013a4:	20000320 	.word	0x20000320
 80013a8:	46ff4c00 	.word	0x46ff4c00
 80013ac:	20000314 	.word	0x20000314
 80013b0:	47800000 	.word	0x47800000
 80013b4:	2000030a 	.word	0x2000030a
 80013b8:	20000324 	.word	0x20000324
 80013bc:	2000034c 	.word	0x2000034c
 80013c0:	20000350 	.word	0x20000350

080013c4 <DriveF>:

void DriveF(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 80013c8:	4b10      	ldr	r3, [pc, #64]	@ (800140c <DriveF+0x48>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2200      	movs	r2, #0
 80013ce:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80013d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001410 <DriveF+0x4c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2200      	movs	r2, #0
 80013d6:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM1);
 80013d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <DriveF+0x50>)
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <DriveF+0x48>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013e6:	ee17 2a90 	vmov	r2, s15
 80013ea:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM2);
 80013ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001418 <DriveF+0x54>)
 80013ee:	edd3 7a00 	vldr	s15, [r3]
 80013f2:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <DriveF+0x4c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013fa:	ee17 2a90 	vmov	r2, s15
 80013fe:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000270 	.word	0x20000270
 8001410:	2000018c 	.word	0x2000018c
 8001414:	20000318 	.word	0x20000318
 8001418:	2000031c 	.word	0x2000031c

0800141c <DriveC>:
void DriveC(void){
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001420:	4b10      	ldr	r3, [pc, #64]	@ (8001464 <DriveC+0x48>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2200      	movs	r2, #0
 8001426:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001428:	4b0f      	ldr	r3, [pc, #60]	@ (8001468 <DriveC+0x4c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2200      	movs	r2, #0
 800142e:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, PWM1);
 8001430:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <DriveC+0x50>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <DriveC+0x48>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800143e:	ee17 2a90 	vmov	r2, s15
 8001442:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM2);
 8001444:	4b0a      	ldr	r3, [pc, #40]	@ (8001470 <DriveC+0x54>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <DriveC+0x4c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001452:	ee17 2a90 	vmov	r2, s15
 8001456:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000270 	.word	0x20000270
 8001468:	2000018c 	.word	0x2000018c
 800146c:	20000318 	.word	0x20000318
 8001470:	2000031c 	.word	0x2000031c

08001474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001478:	b672      	cpsid	i
}
 800147a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <Error_Handler+0x8>

08001480 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <HAL_MspInit+0x44>)
 8001488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800148a:	4a0e      	ldr	r2, [pc, #56]	@ (80014c4 <HAL_MspInit+0x44>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6613      	str	r3, [r2, #96]	@ 0x60
 8001492:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <HAL_MspInit+0x44>)
 8001494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <HAL_MspInit+0x44>)
 80014a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a2:	4a08      	ldr	r2, [pc, #32]	@ (80014c4 <HAL_MspInit+0x44>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_MspInit+0x44>)
 80014ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80014b6:	f003 f805 	bl	80044c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40021000 	.word	0x40021000

080014c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b0a0      	sub	sp, #128	@ 0x80
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014e0:	f107 0318 	add.w	r3, r7, #24
 80014e4:	2254      	movs	r2, #84	@ 0x54
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f008 f825 	bl	8009538 <memset>
  if(hadc->Instance==ADC1)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014f6:	f040 8081 	bne.w	80015fc <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80014fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001500:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001504:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001506:	f107 0318 	add.w	r3, r7, #24
 800150a:	4618      	mov	r0, r3
 800150c:	f003 fd18 	bl	8004f40 <HAL_RCCEx_PeriphCLKConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001516:	f7ff ffad 	bl	8001474 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800151a:	4b3a      	ldr	r3, [pc, #232]	@ (8001604 <HAL_ADC_MspInit+0x13c>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151e:	4a39      	ldr	r2, [pc, #228]	@ (8001604 <HAL_ADC_MspInit+0x13c>)
 8001520:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001524:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001526:	4b37      	ldr	r3, [pc, #220]	@ (8001604 <HAL_ADC_MspInit+0x13c>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	4b34      	ldr	r3, [pc, #208]	@ (8001604 <HAL_ADC_MspInit+0x13c>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001536:	4a33      	ldr	r2, [pc, #204]	@ (8001604 <HAL_ADC_MspInit+0x13c>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153e:	4b31      	ldr	r3, [pc, #196]	@ (8001604 <HAL_ADC_MspInit+0x13c>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	4b2e      	ldr	r3, [pc, #184]	@ (8001604 <HAL_ADC_MspInit+0x13c>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154e:	4a2d      	ldr	r2, [pc, #180]	@ (8001604 <HAL_ADC_MspInit+0x13c>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001556:	4b2b      	ldr	r3, [pc, #172]	@ (8001604 <HAL_ADC_MspInit+0x13c>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001562:	2301      	movs	r3, #1
 8001564:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001566:	2303      	movs	r3, #3
 8001568:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001572:	4619      	mov	r1, r3
 8001574:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001578:	f002 fd4e 	bl	8004018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800157c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001580:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001582:	2303      	movs	r3, #3
 8001584:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800158e:	4619      	mov	r1, r3
 8001590:	481d      	ldr	r0, [pc, #116]	@ (8001608 <HAL_ADC_MspInit+0x140>)
 8001592:	f002 fd41 	bl	8004018 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001596:	4b1d      	ldr	r3, [pc, #116]	@ (800160c <HAL_ADC_MspInit+0x144>)
 8001598:	4a1d      	ldr	r2, [pc, #116]	@ (8001610 <HAL_ADC_MspInit+0x148>)
 800159a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800159c:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <HAL_ADC_MspInit+0x144>)
 800159e:	2205      	movs	r2, #5
 80015a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015a2:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <HAL_ADC_MspInit+0x144>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a8:	4b18      	ldr	r3, [pc, #96]	@ (800160c <HAL_ADC_MspInit+0x144>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015ae:	4b17      	ldr	r3, [pc, #92]	@ (800160c <HAL_ADC_MspInit+0x144>)
 80015b0:	2280      	movs	r2, #128	@ 0x80
 80015b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015b4:	4b15      	ldr	r3, [pc, #84]	@ (800160c <HAL_ADC_MspInit+0x144>)
 80015b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015bc:	4b13      	ldr	r3, [pc, #76]	@ (800160c <HAL_ADC_MspInit+0x144>)
 80015be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015c4:	4b11      	ldr	r3, [pc, #68]	@ (800160c <HAL_ADC_MspInit+0x144>)
 80015c6:	2220      	movs	r2, #32
 80015c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015ca:	4b10      	ldr	r3, [pc, #64]	@ (800160c <HAL_ADC_MspInit+0x144>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015d0:	480e      	ldr	r0, [pc, #56]	@ (800160c <HAL_ADC_MspInit+0x144>)
 80015d2:	f002 f9ef 	bl	80039b4 <HAL_DMA_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_ADC_MspInit+0x118>
    {
      Error_Handler();
 80015dc:	f7ff ff4a 	bl	8001474 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a0a      	ldr	r2, [pc, #40]	@ (800160c <HAL_ADC_MspInit+0x144>)
 80015e4:	655a      	str	r2, [r3, #84]	@ 0x54
 80015e6:	4a09      	ldr	r2, [pc, #36]	@ (800160c <HAL_ADC_MspInit+0x144>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2100      	movs	r1, #0
 80015f0:	2012      	movs	r0, #18
 80015f2:	f002 f9aa 	bl	800394a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80015f6:	2012      	movs	r0, #18
 80015f8:	f002 f9c1 	bl	800397e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015fc:	bf00      	nop
 80015fe:	3780      	adds	r7, #128	@ 0x80
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40021000 	.word	0x40021000
 8001608:	48000400 	.word	0x48000400
 800160c:	20000098 	.word	0x20000098
 8001610:	40020008 	.word	0x40020008

08001614 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b09e      	sub	sp, #120	@ 0x78
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800162c:	f107 0310 	add.w	r3, r7, #16
 8001630:	2254      	movs	r2, #84	@ 0x54
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f007 ff7f 	bl	8009538 <memset>
  if(huart->Instance==LPUART1)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a23      	ldr	r2, [pc, #140]	@ (80016cc <HAL_UART_MspInit+0xb8>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d13e      	bne.n	80016c2 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001644:	2320      	movs	r3, #32
 8001646:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001648:	2300      	movs	r3, #0
 800164a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800164c:	f107 0310 	add.w	r3, r7, #16
 8001650:	4618      	mov	r0, r3
 8001652:	f003 fc75 	bl	8004f40 <HAL_RCCEx_PeriphCLKConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800165c:	f7ff ff0a 	bl	8001474 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001660:	4b1b      	ldr	r3, [pc, #108]	@ (80016d0 <HAL_UART_MspInit+0xbc>)
 8001662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001664:	4a1a      	ldr	r2, [pc, #104]	@ (80016d0 <HAL_UART_MspInit+0xbc>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800166c:	4b18      	ldr	r3, [pc, #96]	@ (80016d0 <HAL_UART_MspInit+0xbc>)
 800166e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001678:	4b15      	ldr	r3, [pc, #84]	@ (80016d0 <HAL_UART_MspInit+0xbc>)
 800167a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167c:	4a14      	ldr	r2, [pc, #80]	@ (80016d0 <HAL_UART_MspInit+0xbc>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001684:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <HAL_UART_MspInit+0xbc>)
 8001686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001690:	230c      	movs	r3, #12
 8001692:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80016a0:	230c      	movs	r3, #12
 80016a2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80016a8:	4619      	mov	r1, r3
 80016aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ae:	f002 fcb3 	bl	8004018 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	205b      	movs	r0, #91	@ 0x5b
 80016b8:	f002 f947 	bl	800394a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80016bc:	205b      	movs	r0, #91	@ 0x5b
 80016be:	f002 f95e 	bl	800397e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80016c2:	bf00      	nop
 80016c4:	3778      	adds	r7, #120	@ 0x78
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40008000 	.word	0x40008000
 80016d0:	40021000 	.word	0x40021000

080016d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a2c      	ldr	r2, [pc, #176]	@ (8001794 <HAL_TIM_Base_MspInit+0xc0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d10c      	bne.n	8001700 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001798 <HAL_TIM_Base_MspInit+0xc4>)
 80016e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ea:	4a2b      	ldr	r2, [pc, #172]	@ (8001798 <HAL_TIM_Base_MspInit+0xc4>)
 80016ec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80016f2:	4b29      	ldr	r3, [pc, #164]	@ (8001798 <HAL_TIM_Base_MspInit+0xc4>)
 80016f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80016fe:	e044      	b.n	800178a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001708:	d114      	bne.n	8001734 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800170a:	4b23      	ldr	r3, [pc, #140]	@ (8001798 <HAL_TIM_Base_MspInit+0xc4>)
 800170c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170e:	4a22      	ldr	r2, [pc, #136]	@ (8001798 <HAL_TIM_Base_MspInit+0xc4>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6593      	str	r3, [r2, #88]	@ 0x58
 8001716:	4b20      	ldr	r3, [pc, #128]	@ (8001798 <HAL_TIM_Base_MspInit+0xc4>)
 8001718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	2100      	movs	r1, #0
 8001726:	201c      	movs	r0, #28
 8001728:	f002 f90f 	bl	800394a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800172c:	201c      	movs	r0, #28
 800172e:	f002 f926 	bl	800397e <HAL_NVIC_EnableIRQ>
}
 8001732:	e02a      	b.n	800178a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a18      	ldr	r2, [pc, #96]	@ (800179c <HAL_TIM_Base_MspInit+0xc8>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d114      	bne.n	8001768 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800173e:	4b16      	ldr	r3, [pc, #88]	@ (8001798 <HAL_TIM_Base_MspInit+0xc4>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001742:	4a15      	ldr	r2, [pc, #84]	@ (8001798 <HAL_TIM_Base_MspInit+0xc4>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	6593      	str	r3, [r2, #88]	@ 0x58
 800174a:	4b13      	ldr	r3, [pc, #76]	@ (8001798 <HAL_TIM_Base_MspInit+0xc4>)
 800174c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2100      	movs	r1, #0
 800175a:	201d      	movs	r0, #29
 800175c:	f002 f8f5 	bl	800394a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001760:	201d      	movs	r0, #29
 8001762:	f002 f90c 	bl	800397e <HAL_NVIC_EnableIRQ>
}
 8001766:	e010      	b.n	800178a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0c      	ldr	r2, [pc, #48]	@ (80017a0 <HAL_TIM_Base_MspInit+0xcc>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d10b      	bne.n	800178a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001772:	4b09      	ldr	r3, [pc, #36]	@ (8001798 <HAL_TIM_Base_MspInit+0xc4>)
 8001774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001776:	4a08      	ldr	r2, [pc, #32]	@ (8001798 <HAL_TIM_Base_MspInit+0xc4>)
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	6593      	str	r3, [r2, #88]	@ 0x58
 800177e:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <HAL_TIM_Base_MspInit+0xc4>)
 8001780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40012c00 	.word	0x40012c00
 8001798:	40021000 	.word	0x40021000
 800179c:	40000400 	.word	0x40000400
 80017a0:	40000800 	.word	0x40000800

080017a4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	@ 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a25      	ldr	r2, [pc, #148]	@ (8001858 <HAL_TIM_Encoder_MspInit+0xb4>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d144      	bne.n	8001850 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80017c6:	4b25      	ldr	r3, [pc, #148]	@ (800185c <HAL_TIM_Encoder_MspInit+0xb8>)
 80017c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ca:	4a24      	ldr	r2, [pc, #144]	@ (800185c <HAL_TIM_Encoder_MspInit+0xb8>)
 80017cc:	f043 0308 	orr.w	r3, r3, #8
 80017d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80017d2:	4b22      	ldr	r3, [pc, #136]	@ (800185c <HAL_TIM_Encoder_MspInit+0xb8>)
 80017d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017de:	4b1f      	ldr	r3, [pc, #124]	@ (800185c <HAL_TIM_Encoder_MspInit+0xb8>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e2:	4a1e      	ldr	r2, [pc, #120]	@ (800185c <HAL_TIM_Encoder_MspInit+0xb8>)
 80017e4:	f043 0302 	orr.w	r3, r3, #2
 80017e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ea:	4b1c      	ldr	r3, [pc, #112]	@ (800185c <HAL_TIM_Encoder_MspInit+0xb8>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f6:	4b19      	ldr	r3, [pc, #100]	@ (800185c <HAL_TIM_Encoder_MspInit+0xb8>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fa:	4a18      	ldr	r2, [pc, #96]	@ (800185c <HAL_TIM_Encoder_MspInit+0xb8>)
 80017fc:	f043 0304 	orr.w	r3, r3, #4
 8001800:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001802:	4b16      	ldr	r3, [pc, #88]	@ (800185c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PB2     ------> TIM5_CH1
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800180e:	2304      	movs	r3, #4
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800181e:	2302      	movs	r3, #2
 8001820:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	480d      	ldr	r0, [pc, #52]	@ (8001860 <HAL_TIM_Encoder_MspInit+0xbc>)
 800182a:	f002 fbf5 	bl	8004018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800182e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183c:	2300      	movs	r3, #0
 800183e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8001840:	2301      	movs	r3, #1
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	4619      	mov	r1, r3
 800184a:	4806      	ldr	r0, [pc, #24]	@ (8001864 <HAL_TIM_Encoder_MspInit+0xc0>)
 800184c:	f002 fbe4 	bl	8004018 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001850:	bf00      	nop
 8001852:	3728      	adds	r7, #40	@ 0x28
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40000c00 	.word	0x40000c00
 800185c:	40021000 	.word	0x40021000
 8001860:	48000400 	.word	0x48000400
 8001864:	48000800 	.word	0x48000800

08001868 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	@ 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a23      	ldr	r2, [pc, #140]	@ (8001914 <HAL_TIM_MspPostInit+0xac>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d11c      	bne.n	80018c4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800188a:	4b23      	ldr	r3, [pc, #140]	@ (8001918 <HAL_TIM_MspPostInit+0xb0>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188e:	4a22      	ldr	r2, [pc, #136]	@ (8001918 <HAL_TIM_MspPostInit+0xb0>)
 8001890:	f043 0304 	orr.w	r3, r3, #4
 8001894:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001896:	4b20      	ldr	r3, [pc, #128]	@ (8001918 <HAL_TIM_MspPostInit+0xb0>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018a2:	2303      	movs	r3, #3
 80018a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80018b2:	2302      	movs	r3, #2
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4619      	mov	r1, r3
 80018bc:	4817      	ldr	r0, [pc, #92]	@ (800191c <HAL_TIM_MspPostInit+0xb4>)
 80018be:	f002 fbab 	bl	8004018 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80018c2:	e022      	b.n	800190a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a15      	ldr	r2, [pc, #84]	@ (8001920 <HAL_TIM_MspPostInit+0xb8>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d11d      	bne.n	800190a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	4b12      	ldr	r3, [pc, #72]	@ (8001918 <HAL_TIM_MspPostInit+0xb0>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d2:	4a11      	ldr	r2, [pc, #68]	@ (8001918 <HAL_TIM_MspPostInit+0xb0>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018da:	4b0f      	ldr	r3, [pc, #60]	@ (8001918 <HAL_TIM_MspPostInit+0xb0>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80018e6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80018ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2300      	movs	r3, #0
 80018f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80018f8:	230a      	movs	r3, #10
 80018fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	4619      	mov	r1, r3
 8001902:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001906:	f002 fb87 	bl	8004018 <HAL_GPIO_Init>
}
 800190a:	bf00      	nop
 800190c:	3728      	adds	r7, #40	@ 0x28
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40012c00 	.word	0x40012c00
 8001918:	40021000 	.word	0x40021000
 800191c:	48000800 	.word	0x48000800
 8001920:	40000800 	.word	0x40000800

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <NMI_Handler+0x4>

0800192c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <HardFault_Handler+0x4>

08001934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <MemManage_Handler+0x4>

0800193c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <BusFault_Handler+0x4>

08001944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <UsageFault_Handler+0x4>

0800194c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800197a:	f000 f8cb 	bl	8001b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001988:	4802      	ldr	r0, [pc, #8]	@ (8001994 <DMA1_Channel1_IRQHandler+0x10>)
 800198a:	f002 f9f6 	bl	8003d7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000098 	.word	0x20000098

08001998 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800199c:	4802      	ldr	r0, [pc, #8]	@ (80019a8 <ADC1_2_IRQHandler+0x10>)
 800199e:	f000 fda7 	bl	80024f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	2000002c 	.word	0x2000002c

080019ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019b0:	4802      	ldr	r0, [pc, #8]	@ (80019bc <TIM2_IRQHandler+0x10>)
 80019b2:	f004 f8fb 	bl	8005bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200001d8 	.word	0x200001d8

080019c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019c4:	4802      	ldr	r0, [pc, #8]	@ (80019d0 <TIM3_IRQHandler+0x10>)
 80019c6:	f004 f8f1 	bl	8005bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000224 	.word	0x20000224

080019d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80019d8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80019dc:	f002 fcb6 	bl	800434c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80019e8:	4802      	ldr	r0, [pc, #8]	@ (80019f4 <LPUART1_IRQHandler+0x10>)
 80019ea:	f005 fbc1 	bl	8007170 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200000f8 	.word	0x200000f8

080019f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019fc:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <SystemInit+0x20>)
 80019fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a02:	4a05      	ldr	r2, [pc, #20]	@ (8001a18 <SystemInit+0x20>)
 8001a04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a1c:	480d      	ldr	r0, [pc, #52]	@ (8001a54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a1e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a20:	f7ff ffea 	bl	80019f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a24:	480c      	ldr	r0, [pc, #48]	@ (8001a58 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a26:	490d      	ldr	r1, [pc, #52]	@ (8001a5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a28:	4a0d      	ldr	r2, [pc, #52]	@ (8001a60 <LoopForever+0xe>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a2c:	e002      	b.n	8001a34 <LoopCopyDataInit>

08001a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a32:	3304      	adds	r3, #4

08001a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a38:	d3f9      	bcc.n	8001a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a3c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a68 <LoopForever+0x16>)
  movs r3, #0
 8001a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a40:	e001      	b.n	8001a46 <LoopFillZerobss>

08001a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a44:	3204      	adds	r2, #4

08001a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a48:	d3fb      	bcc.n	8001a42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a4a:	f007 fd7d 	bl	8009548 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a4e:	f7fe fd5b 	bl	8000508 <main>

08001a52 <LoopForever>:

LoopForever:
    b LoopForever
 8001a52:	e7fe      	b.n	8001a52 <LoopForever>
  ldr   r0, =_estack
 8001a54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a5c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001a60:	080095f8 	.word	0x080095f8
  ldr r2, =_sbss
 8001a64:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001a68:	2000036c 	.word	0x2000036c

08001a6c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a6c:	e7fe      	b.n	8001a6c <ADC3_IRQHandler>

08001a6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a78:	2003      	movs	r0, #3
 8001a7a:	f001 ff5b 	bl	8003934 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f000 f80e 	bl	8001aa0 <HAL_InitTick>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d002      	beq.n	8001a90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	71fb      	strb	r3, [r7, #7]
 8001a8e:	e001      	b.n	8001a94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a90:	f7ff fcf6 	bl	8001480 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a94:	79fb      	ldrb	r3, [r7, #7]

}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001aac:	4b16      	ldr	r3, [pc, #88]	@ (8001b08 <HAL_InitTick+0x68>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d022      	beq.n	8001afa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ab4:	4b15      	ldr	r3, [pc, #84]	@ (8001b0c <HAL_InitTick+0x6c>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b13      	ldr	r3, [pc, #76]	@ (8001b08 <HAL_InitTick+0x68>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ac0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f001 ff66 	bl	800399a <HAL_SYSTICK_Config>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10f      	bne.n	8001af4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b0f      	cmp	r3, #15
 8001ad8:	d809      	bhi.n	8001aee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ada:	2200      	movs	r2, #0
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae2:	f001 ff32 	bl	800394a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b10 <HAL_InitTick+0x70>)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	e007      	b.n	8001afe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	73fb      	strb	r3, [r7, #15]
 8001af2:	e004      	b.n	8001afe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
 8001af8:	e001      	b.n	8001afe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	2000000c 	.word	0x2000000c
 8001b0c:	20000004 	.word	0x20000004
 8001b10:	20000008 	.word	0x20000008

08001b14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b18:	4b05      	ldr	r3, [pc, #20]	@ (8001b30 <HAL_IncTick+0x1c>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <HAL_IncTick+0x20>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4413      	add	r3, r2
 8001b22:	4a03      	ldr	r2, [pc, #12]	@ (8001b30 <HAL_IncTick+0x1c>)
 8001b24:	6013      	str	r3, [r2, #0]
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	20000368 	.word	0x20000368
 8001b34:	2000000c 	.word	0x2000000c

08001b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	@ (8001b4c <HAL_GetTick+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000368 	.word	0x20000368

08001b50 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	431a      	orrs	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	609a      	str	r2, [r3, #8]
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	3360      	adds	r3, #96	@ 0x60
 8001bca:	461a      	mov	r2, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <LL_ADC_SetOffset+0x44>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	4313      	orrs	r3, r2
 8001be8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001bf0:	bf00      	nop
 8001bf2:	371c      	adds	r7, #28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	03fff000 	.word	0x03fff000

08001c00 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3360      	adds	r3, #96	@ 0x60
 8001c0e:	461a      	mov	r2, r3
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b087      	sub	sp, #28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	3360      	adds	r3, #96	@ 0x60
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	431a      	orrs	r2, r3
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c56:	bf00      	nop
 8001c58:	371c      	adds	r7, #28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b087      	sub	sp, #28
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	3360      	adds	r3, #96	@ 0x60
 8001c72:	461a      	mov	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001c8c:	bf00      	nop
 8001c8e:	371c      	adds	r7, #28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b087      	sub	sp, #28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	3360      	adds	r3, #96	@ 0x60
 8001ca8:	461a      	mov	r2, r3
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001cc2:	bf00      	nop
 8001cc4:	371c      	adds	r7, #28
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	615a      	str	r2, [r3, #20]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b087      	sub	sp, #28
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	60f8      	str	r0, [r7, #12]
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	3330      	adds	r3, #48	@ 0x30
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	0a1b      	lsrs	r3, r3, #8
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	4413      	add	r3, r2
 8001d38:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	f003 031f 	and.w	r3, r3, #31
 8001d44:	211f      	movs	r1, #31
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	401a      	ands	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	0e9b      	lsrs	r3, r3, #26
 8001d52:	f003 011f 	and.w	r1, r3, #31
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d60:	431a      	orrs	r2, r3
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d66:	bf00      	nop
 8001d68:	371c      	adds	r7, #28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3314      	adds	r3, #20
 8001da8:	461a      	mov	r2, r3
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	0e5b      	lsrs	r3, r3, #25
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	4413      	add	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	0d1b      	lsrs	r3, r3, #20
 8001dc0:	f003 031f 	and.w	r3, r3, #31
 8001dc4:	2107      	movs	r1, #7
 8001dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	401a      	ands	r2, r3
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	0d1b      	lsrs	r3, r3, #20
 8001dd2:	f003 031f 	and.w	r3, r3, #31
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001de2:	bf00      	nop
 8001de4:	371c      	adds	r7, #28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f003 0318 	and.w	r3, r3, #24
 8001e12:	4908      	ldr	r1, [pc, #32]	@ (8001e34 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e14:	40d9      	lsrs	r1, r3
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	400b      	ands	r3, r1
 8001e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e26:	bf00      	nop
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	0007ffff 	.word	0x0007ffff

08001e38 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 031f 	and.w	r3, r3, #31
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6093      	str	r3, [r2, #8]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ea4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ea8:	d101      	bne.n	8001eae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ecc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ed0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ef8:	d101      	bne.n	8001efe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f20:	f043 0201 	orr.w	r2, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <LL_ADC_IsEnabled+0x18>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <LL_ADC_IsEnabled+0x1a>
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f6a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f6e:	f043 0204 	orr.w	r2, r3, #4
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d101      	bne.n	8001f9a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d101      	bne.n	8001fc0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fd0:	b590      	push	{r4, r7, lr}
 8001fd2:	b089      	sub	sp, #36	@ 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e1a9      	b.n	800233e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d109      	bne.n	800200c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff fa65 	bl	80014c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff3f 	bl	8001e94 <LL_ADC_IsDeepPowerDownEnabled>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d004      	beq.n	8002026 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff25 	bl	8001e70 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff ff5a 	bl	8001ee4 <LL_ADC_IsInternalRegulatorEnabled>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d115      	bne.n	8002062 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff3e 	bl	8001ebc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002040:	4b9c      	ldr	r3, [pc, #624]	@ (80022b4 <HAL_ADC_Init+0x2e4>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	099b      	lsrs	r3, r3, #6
 8002046:	4a9c      	ldr	r2, [pc, #624]	@ (80022b8 <HAL_ADC_Init+0x2e8>)
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	099b      	lsrs	r3, r3, #6
 800204e:	3301      	adds	r3, #1
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002054:	e002      	b.n	800205c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	3b01      	subs	r3, #1
 800205a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f9      	bne.n	8002056 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff3c 	bl	8001ee4 <LL_ADC_IsInternalRegulatorEnabled>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10d      	bne.n	800208e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002076:	f043 0210 	orr.w	r2, r3, #16
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002082:	f043 0201 	orr.w	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff ff75 	bl	8001f82 <LL_ADC_REG_IsConversionOngoing>
 8002098:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 8142 	bne.w	800232c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f040 813e 	bne.w	800232c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80020b8:	f043 0202 	orr.w	r2, r3, #2
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff35 	bl	8001f34 <LL_ADC_IsEnabled>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d141      	bne.n	8002154 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020d8:	d004      	beq.n	80020e4 <HAL_ADC_Init+0x114>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a77      	ldr	r2, [pc, #476]	@ (80022bc <HAL_ADC_Init+0x2ec>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d10f      	bne.n	8002104 <HAL_ADC_Init+0x134>
 80020e4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80020e8:	f7ff ff24 	bl	8001f34 <LL_ADC_IsEnabled>
 80020ec:	4604      	mov	r4, r0
 80020ee:	4873      	ldr	r0, [pc, #460]	@ (80022bc <HAL_ADC_Init+0x2ec>)
 80020f0:	f7ff ff20 	bl	8001f34 <LL_ADC_IsEnabled>
 80020f4:	4603      	mov	r3, r0
 80020f6:	4323      	orrs	r3, r4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	bf0c      	ite	eq
 80020fc:	2301      	moveq	r3, #1
 80020fe:	2300      	movne	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	e012      	b.n	800212a <HAL_ADC_Init+0x15a>
 8002104:	486e      	ldr	r0, [pc, #440]	@ (80022c0 <HAL_ADC_Init+0x2f0>)
 8002106:	f7ff ff15 	bl	8001f34 <LL_ADC_IsEnabled>
 800210a:	4604      	mov	r4, r0
 800210c:	486d      	ldr	r0, [pc, #436]	@ (80022c4 <HAL_ADC_Init+0x2f4>)
 800210e:	f7ff ff11 	bl	8001f34 <LL_ADC_IsEnabled>
 8002112:	4603      	mov	r3, r0
 8002114:	431c      	orrs	r4, r3
 8002116:	486c      	ldr	r0, [pc, #432]	@ (80022c8 <HAL_ADC_Init+0x2f8>)
 8002118:	f7ff ff0c 	bl	8001f34 <LL_ADC_IsEnabled>
 800211c:	4603      	mov	r3, r0
 800211e:	4323      	orrs	r3, r4
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf0c      	ite	eq
 8002124:	2301      	moveq	r3, #1
 8002126:	2300      	movne	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d012      	beq.n	8002154 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002136:	d004      	beq.n	8002142 <HAL_ADC_Init+0x172>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a5f      	ldr	r2, [pc, #380]	@ (80022bc <HAL_ADC_Init+0x2ec>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d101      	bne.n	8002146 <HAL_ADC_Init+0x176>
 8002142:	4a62      	ldr	r2, [pc, #392]	@ (80022cc <HAL_ADC_Init+0x2fc>)
 8002144:	e000      	b.n	8002148 <HAL_ADC_Init+0x178>
 8002146:	4a62      	ldr	r2, [pc, #392]	@ (80022d0 <HAL_ADC_Init+0x300>)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4619      	mov	r1, r3
 800214e:	4610      	mov	r0, r2
 8002150:	f7ff fcfe 	bl	8001b50 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	7f5b      	ldrb	r3, [r3, #29]
 8002158:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800215e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002164:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800216a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002172:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800217e:	2b01      	cmp	r3, #1
 8002180:	d106      	bne.n	8002190 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002186:	3b01      	subs	r3, #1
 8002188:	045b      	lsls	r3, r3, #17
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002194:	2b00      	cmp	r3, #0
 8002196:	d009      	beq.n	80021ac <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	4b48      	ldr	r3, [pc, #288]	@ (80022d4 <HAL_ADC_Init+0x304>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	69b9      	ldr	r1, [r7, #24]
 80021bc:	430b      	orrs	r3, r1
 80021be:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fee4 	bl	8001fa8 <LL_ADC_INJ_IsConversionOngoing>
 80021e0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d17f      	bne.n	80022e8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d17c      	bne.n	80022e8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021f2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80021fa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800220a:	f023 0302 	bic.w	r3, r3, #2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	69b9      	ldr	r1, [r7, #24]
 8002214:	430b      	orrs	r3, r1
 8002216:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d017      	beq.n	8002250 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691a      	ldr	r2, [r3, #16]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800222e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002238:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800223c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6911      	ldr	r1, [r2, #16]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	430b      	orrs	r3, r1
 800224a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800224e:	e013      	b.n	8002278 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691a      	ldr	r2, [r3, #16]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800225e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002270:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002274:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800227e:	2b01      	cmp	r3, #1
 8002280:	d12a      	bne.n	80022d8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800228c:	f023 0304 	bic.w	r3, r3, #4
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002298:	4311      	orrs	r1, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800229e:	4311      	orrs	r1, r2
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80022a4:	430a      	orrs	r2, r1
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0201 	orr.w	r2, r2, #1
 80022b0:	611a      	str	r2, [r3, #16]
 80022b2:	e019      	b.n	80022e8 <HAL_ADC_Init+0x318>
 80022b4:	20000004 	.word	0x20000004
 80022b8:	053e2d63 	.word	0x053e2d63
 80022bc:	50000100 	.word	0x50000100
 80022c0:	50000400 	.word	0x50000400
 80022c4:	50000500 	.word	0x50000500
 80022c8:	50000600 	.word	0x50000600
 80022cc:	50000300 	.word	0x50000300
 80022d0:	50000700 	.word	0x50000700
 80022d4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0201 	bic.w	r2, r2, #1
 80022e6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d10c      	bne.n	800230a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f6:	f023 010f 	bic.w	r1, r3, #15
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	1e5a      	subs	r2, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	631a      	str	r2, [r3, #48]	@ 0x30
 8002308:	e007      	b.n	800231a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 020f 	bic.w	r2, r2, #15
 8002318:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800231e:	f023 0303 	bic.w	r3, r3, #3
 8002322:	f043 0201 	orr.w	r2, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	65da      	str	r2, [r3, #92]	@ 0x5c
 800232a:	e007      	b.n	800233c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002330:	f043 0210 	orr.w	r2, r3, #16
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800233c:	7ffb      	ldrb	r3, [r7, #31]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3724      	adds	r7, #36	@ 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd90      	pop	{r4, r7, pc}
 8002346:	bf00      	nop

08002348 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800235c:	d004      	beq.n	8002368 <HAL_ADC_Start_DMA+0x20>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a5a      	ldr	r2, [pc, #360]	@ (80024cc <HAL_ADC_Start_DMA+0x184>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d101      	bne.n	800236c <HAL_ADC_Start_DMA+0x24>
 8002368:	4b59      	ldr	r3, [pc, #356]	@ (80024d0 <HAL_ADC_Start_DMA+0x188>)
 800236a:	e000      	b.n	800236e <HAL_ADC_Start_DMA+0x26>
 800236c:	4b59      	ldr	r3, [pc, #356]	@ (80024d4 <HAL_ADC_Start_DMA+0x18c>)
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fd62 	bl	8001e38 <LL_ADC_GetMultimode>
 8002374:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fe01 	bl	8001f82 <LL_ADC_REG_IsConversionOngoing>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	f040 809b 	bne.w	80024be <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800238e:	2b01      	cmp	r3, #1
 8002390:	d101      	bne.n	8002396 <HAL_ADC_Start_DMA+0x4e>
 8002392:	2302      	movs	r3, #2
 8002394:	e096      	b.n	80024c4 <HAL_ADC_Start_DMA+0x17c>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a4d      	ldr	r2, [pc, #308]	@ (80024d8 <HAL_ADC_Start_DMA+0x190>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d008      	beq.n	80023ba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	2b05      	cmp	r3, #5
 80023b2:	d002      	beq.n	80023ba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	2b09      	cmp	r3, #9
 80023b8:	d17a      	bne.n	80024b0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 ff60 	bl	8003280 <ADC_Enable>
 80023c0:	4603      	mov	r3, r0
 80023c2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80023c4:	7dfb      	ldrb	r3, [r7, #23]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d16d      	bne.n	80024a6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ce:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a3a      	ldr	r2, [pc, #232]	@ (80024cc <HAL_ADC_Start_DMA+0x184>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d009      	beq.n	80023fc <HAL_ADC_Start_DMA+0xb4>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a3b      	ldr	r2, [pc, #236]	@ (80024dc <HAL_ADC_Start_DMA+0x194>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d002      	beq.n	80023f8 <HAL_ADC_Start_DMA+0xb0>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	e003      	b.n	8002400 <HAL_ADC_Start_DMA+0xb8>
 80023f8:	4b39      	ldr	r3, [pc, #228]	@ (80024e0 <HAL_ADC_Start_DMA+0x198>)
 80023fa:	e001      	b.n	8002400 <HAL_ADC_Start_DMA+0xb8>
 80023fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	4293      	cmp	r3, r2
 8002406:	d002      	beq.n	800240e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d105      	bne.n	800241a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002412:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800241e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d006      	beq.n	8002434 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800242a:	f023 0206 	bic.w	r2, r3, #6
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	661a      	str	r2, [r3, #96]	@ 0x60
 8002432:	e002      	b.n	800243a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243e:	4a29      	ldr	r2, [pc, #164]	@ (80024e4 <HAL_ADC_Start_DMA+0x19c>)
 8002440:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002446:	4a28      	ldr	r2, [pc, #160]	@ (80024e8 <HAL_ADC_Start_DMA+0x1a0>)
 8002448:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800244e:	4a27      	ldr	r2, [pc, #156]	@ (80024ec <HAL_ADC_Start_DMA+0x1a4>)
 8002450:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	221c      	movs	r2, #28
 8002458:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f042 0210 	orr.w	r2, r2, #16
 8002470:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 0201 	orr.w	r2, r2, #1
 8002480:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	3340      	adds	r3, #64	@ 0x40
 800248c:	4619      	mov	r1, r3
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f001 fb37 	bl	8003b04 <HAL_DMA_Start_IT>
 8002496:	4603      	mov	r3, r0
 8002498:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fd5b 	bl	8001f5a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80024a4:	e00d      	b.n	80024c2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80024ae:	e008      	b.n	80024c2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80024bc:	e001      	b.n	80024c2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024be:	2302      	movs	r3, #2
 80024c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80024c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	50000100 	.word	0x50000100
 80024d0:	50000300 	.word	0x50000300
 80024d4:	50000700 	.word	0x50000700
 80024d8:	50000600 	.word	0x50000600
 80024dc:	50000500 	.word	0x50000500
 80024e0:	50000400 	.word	0x50000400
 80024e4:	080033ad 	.word	0x080033ad
 80024e8:	08003485 	.word	0x08003485
 80024ec:	080034a1 	.word	0x080034a1

080024f0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08a      	sub	sp, #40	@ 0x28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80024f8:	2300      	movs	r3, #0
 80024fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002514:	d004      	beq.n	8002520 <HAL_ADC_IRQHandler+0x30>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a8e      	ldr	r2, [pc, #568]	@ (8002754 <HAL_ADC_IRQHandler+0x264>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d101      	bne.n	8002524 <HAL_ADC_IRQHandler+0x34>
 8002520:	4b8d      	ldr	r3, [pc, #564]	@ (8002758 <HAL_ADC_IRQHandler+0x268>)
 8002522:	e000      	b.n	8002526 <HAL_ADC_IRQHandler+0x36>
 8002524:	4b8d      	ldr	r3, [pc, #564]	@ (800275c <HAL_ADC_IRQHandler+0x26c>)
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff fc86 	bl	8001e38 <LL_ADC_GetMultimode>
 800252c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d017      	beq.n	8002568 <HAL_ADC_IRQHandler+0x78>
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d012      	beq.n	8002568 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	2b00      	cmp	r3, #0
 800254c:	d105      	bne.n	800255a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002552:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f001 f808 	bl	8003570 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2202      	movs	r2, #2
 8002566:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b00      	cmp	r3, #0
 8002570:	d004      	beq.n	800257c <HAL_ADC_IRQHandler+0x8c>
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10b      	bne.n	8002594 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 8094 	beq.w	80026b0 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 808e 	beq.w	80026b0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002598:	f003 0310 	and.w	r3, r3, #16
 800259c:	2b00      	cmp	r3, #0
 800259e:	d105      	bne.n	80025ac <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fb9f 	bl	8001cf4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d072      	beq.n	80026a2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a64      	ldr	r2, [pc, #400]	@ (8002754 <HAL_ADC_IRQHandler+0x264>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d009      	beq.n	80025da <HAL_ADC_IRQHandler+0xea>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a65      	ldr	r2, [pc, #404]	@ (8002760 <HAL_ADC_IRQHandler+0x270>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d002      	beq.n	80025d6 <HAL_ADC_IRQHandler+0xe6>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	e003      	b.n	80025de <HAL_ADC_IRQHandler+0xee>
 80025d6:	4b63      	ldr	r3, [pc, #396]	@ (8002764 <HAL_ADC_IRQHandler+0x274>)
 80025d8:	e001      	b.n	80025de <HAL_ADC_IRQHandler+0xee>
 80025da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d008      	beq.n	80025f8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	2b05      	cmp	r3, #5
 80025f0:	d002      	beq.n	80025f8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2b09      	cmp	r3, #9
 80025f6:	d104      	bne.n	8002602 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	623b      	str	r3, [r7, #32]
 8002600:	e014      	b.n	800262c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a53      	ldr	r2, [pc, #332]	@ (8002754 <HAL_ADC_IRQHandler+0x264>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d009      	beq.n	8002620 <HAL_ADC_IRQHandler+0x130>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a53      	ldr	r2, [pc, #332]	@ (8002760 <HAL_ADC_IRQHandler+0x270>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d002      	beq.n	800261c <HAL_ADC_IRQHandler+0x12c>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	e003      	b.n	8002624 <HAL_ADC_IRQHandler+0x134>
 800261c:	4b51      	ldr	r3, [pc, #324]	@ (8002764 <HAL_ADC_IRQHandler+0x274>)
 800261e:	e001      	b.n	8002624 <HAL_ADC_IRQHandler+0x134>
 8002620:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002624:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d135      	bne.n	80026a2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b08      	cmp	r3, #8
 8002642:	d12e      	bne.n	80026a2 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fc9a 	bl	8001f82 <LL_ADC_REG_IsConversionOngoing>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d11a      	bne.n	800268a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 020c 	bic.w	r2, r2, #12
 8002662:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002668:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002674:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d112      	bne.n	80026a2 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002680:	f043 0201 	orr.w	r2, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002688:	e00b      	b.n	80026a2 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800268e:	f043 0210 	orr.w	r2, r3, #16
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800269a:	f043 0201 	orr.w	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f984 	bl	80029b0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	220c      	movs	r2, #12
 80026ae:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f003 0320 	and.w	r3, r3, #32
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d004      	beq.n	80026c4 <HAL_ADC_IRQHandler+0x1d4>
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10b      	bne.n	80026dc <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 80b3 	beq.w	8002836 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 80ad 	beq.w	8002836 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e0:	f003 0310 	and.w	r3, r3, #16
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d105      	bne.n	80026f4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ec:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fb3a 	bl	8001d72 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80026fe:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff faf5 	bl	8001cf4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800270a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a10      	ldr	r2, [pc, #64]	@ (8002754 <HAL_ADC_IRQHandler+0x264>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d009      	beq.n	800272a <HAL_ADC_IRQHandler+0x23a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a11      	ldr	r2, [pc, #68]	@ (8002760 <HAL_ADC_IRQHandler+0x270>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d002      	beq.n	8002726 <HAL_ADC_IRQHandler+0x236>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	e003      	b.n	800272e <HAL_ADC_IRQHandler+0x23e>
 8002726:	4b0f      	ldr	r3, [pc, #60]	@ (8002764 <HAL_ADC_IRQHandler+0x274>)
 8002728:	e001      	b.n	800272e <HAL_ADC_IRQHandler+0x23e>
 800272a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6812      	ldr	r2, [r2, #0]
 8002732:	4293      	cmp	r3, r2
 8002734:	d008      	beq.n	8002748 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	2b06      	cmp	r3, #6
 8002740:	d002      	beq.n	8002748 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2b07      	cmp	r3, #7
 8002746:	d10f      	bne.n	8002768 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	623b      	str	r3, [r7, #32]
 8002750:	e01f      	b.n	8002792 <HAL_ADC_IRQHandler+0x2a2>
 8002752:	bf00      	nop
 8002754:	50000100 	.word	0x50000100
 8002758:	50000300 	.word	0x50000300
 800275c:	50000700 	.word	0x50000700
 8002760:	50000500 	.word	0x50000500
 8002764:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a8b      	ldr	r2, [pc, #556]	@ (800299c <HAL_ADC_IRQHandler+0x4ac>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d009      	beq.n	8002786 <HAL_ADC_IRQHandler+0x296>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a8a      	ldr	r2, [pc, #552]	@ (80029a0 <HAL_ADC_IRQHandler+0x4b0>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d002      	beq.n	8002782 <HAL_ADC_IRQHandler+0x292>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	e003      	b.n	800278a <HAL_ADC_IRQHandler+0x29a>
 8002782:	4b88      	ldr	r3, [pc, #544]	@ (80029a4 <HAL_ADC_IRQHandler+0x4b4>)
 8002784:	e001      	b.n	800278a <HAL_ADC_IRQHandler+0x29a>
 8002786:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800278a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d047      	beq.n	8002828 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <HAL_ADC_IRQHandler+0x2c2>
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d03f      	beq.n	8002828 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d13a      	bne.n	8002828 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027bc:	2b40      	cmp	r3, #64	@ 0x40
 80027be:	d133      	bne.n	8002828 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d12e      	bne.n	8002828 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fbea 	bl	8001fa8 <LL_ADC_INJ_IsConversionOngoing>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d11a      	bne.n	8002810 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80027e8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d112      	bne.n	8002828 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002806:	f043 0201 	orr.w	r2, r3, #1
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800280e:	e00b      	b.n	8002828 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002814:	f043 0210 	orr.w	r2, r3, #16
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002820:	f043 0201 	orr.w	r2, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 fe79 	bl	8003520 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2260      	movs	r2, #96	@ 0x60
 8002834:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800283c:	2b00      	cmp	r3, #0
 800283e:	d011      	beq.n	8002864 <HAL_ADC_IRQHandler+0x374>
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00c      	beq.n	8002864 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f8be 	bl	80029d8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2280      	movs	r2, #128	@ 0x80
 8002862:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800286a:	2b00      	cmp	r3, #0
 800286c:	d012      	beq.n	8002894 <HAL_ADC_IRQHandler+0x3a4>
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00d      	beq.n	8002894 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 fe5f 	bl	8003548 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002892:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800289a:	2b00      	cmp	r3, #0
 800289c:	d012      	beq.n	80028c4 <HAL_ADC_IRQHandler+0x3d4>
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00d      	beq.n	80028c4 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 fe51 	bl	800355c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f003 0310 	and.w	r3, r3, #16
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d043      	beq.n	8002956 <HAL_ADC_IRQHandler+0x466>
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d03e      	beq.n	8002956 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80028e0:	2301      	movs	r3, #1
 80028e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80028e4:	e021      	b.n	800292a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d015      	beq.n	8002918 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028f4:	d004      	beq.n	8002900 <HAL_ADC_IRQHandler+0x410>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a28      	ldr	r2, [pc, #160]	@ (800299c <HAL_ADC_IRQHandler+0x4ac>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d101      	bne.n	8002904 <HAL_ADC_IRQHandler+0x414>
 8002900:	4b29      	ldr	r3, [pc, #164]	@ (80029a8 <HAL_ADC_IRQHandler+0x4b8>)
 8002902:	e000      	b.n	8002906 <HAL_ADC_IRQHandler+0x416>
 8002904:	4b29      	ldr	r3, [pc, #164]	@ (80029ac <HAL_ADC_IRQHandler+0x4bc>)
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff faa4 	bl	8001e54 <LL_ADC_GetMultiDMATransfer>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00b      	beq.n	800292a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002912:	2301      	movs	r3, #1
 8002914:	627b      	str	r3, [r7, #36]	@ 0x24
 8002916:	e008      	b.n	800292a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002926:	2301      	movs	r3, #1
 8002928:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800292a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292c:	2b01      	cmp	r3, #1
 800292e:	d10e      	bne.n	800294e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002934:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002940:	f043 0202 	orr.w	r2, r3, #2
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f84f 	bl	80029ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2210      	movs	r2, #16
 8002954:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800295c:	2b00      	cmp	r3, #0
 800295e:	d018      	beq.n	8002992 <HAL_ADC_IRQHandler+0x4a2>
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002966:	2b00      	cmp	r3, #0
 8002968:	d013      	beq.n	8002992 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800297a:	f043 0208 	orr.w	r2, r3, #8
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800298a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 fdd1 	bl	8003534 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002992:	bf00      	nop
 8002994:	3728      	adds	r7, #40	@ 0x28
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	50000100 	.word	0x50000100
 80029a0:	50000500 	.word	0x50000500
 80029a4:	50000400 	.word	0x50000400
 80029a8:	50000300 	.word	0x50000300
 80029ac:	50000700 	.word	0x50000700

080029b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b0b6      	sub	sp, #216	@ 0xd8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d102      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x24>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	f000 bc13 	b.w	800324a <HAL_ADC_ConfigChannel+0x84a>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff faa6 	bl	8001f82 <LL_ADC_REG_IsConversionOngoing>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f040 83f3 	bne.w	8003224 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6859      	ldr	r1, [r3, #4]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	f7ff f965 	bl	8001d1a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff fa94 	bl	8001f82 <LL_ADC_REG_IsConversionOngoing>
 8002a5a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff faa0 	bl	8001fa8 <LL_ADC_INJ_IsConversionOngoing>
 8002a68:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f040 81d9 	bne.w	8002e28 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f040 81d4 	bne.w	8002e28 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a88:	d10f      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2200      	movs	r2, #0
 8002a94:	4619      	mov	r1, r3
 8002a96:	f7ff f97f 	bl	8001d98 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff f913 	bl	8001cce <LL_ADC_SetSamplingTimeCommonConfig>
 8002aa8:	e00e      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	6819      	ldr	r1, [r3, #0]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	f7ff f96e 	bl	8001d98 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff f903 	bl	8001cce <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	695a      	ldr	r2, [r3, #20]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	08db      	lsrs	r3, r3, #3
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d022      	beq.n	8002b30 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6818      	ldr	r0, [r3, #0]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	6919      	ldr	r1, [r3, #16]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002afa:	f7ff f85d 	bl	8001bb8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	6919      	ldr	r1, [r3, #16]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f7ff f8a9 	bl	8001c62 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d102      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x126>
 8002b20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b24:	e000      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x128>
 8002b26:	2300      	movs	r3, #0
 8002b28:	461a      	mov	r2, r3
 8002b2a:	f7ff f8b5 	bl	8001c98 <LL_ADC_SetOffsetSaturation>
 8002b2e:	e17b      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2100      	movs	r1, #0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff f862 	bl	8001c00 <LL_ADC_GetOffsetChannel>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10a      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x15c>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff f857 	bl	8001c00 <LL_ADC_GetOffsetChannel>
 8002b52:	4603      	mov	r3, r0
 8002b54:	0e9b      	lsrs	r3, r3, #26
 8002b56:	f003 021f 	and.w	r2, r3, #31
 8002b5a:	e01e      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x19a>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2100      	movs	r1, #0
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff f84c 	bl	8001c00 <LL_ADC_GetOffsetChannel>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b72:	fa93 f3a3 	rbit	r3, r3
 8002b76:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b7e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002b8a:	2320      	movs	r3, #32
 8002b8c:	e004      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002b8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b92:	fab3 f383 	clz	r3, r3
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d105      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x1b2>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	0e9b      	lsrs	r3, r3, #26
 8002bac:	f003 031f 	and.w	r3, r3, #31
 8002bb0:	e018      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x1e4>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bbe:	fa93 f3a3 	rbit	r3, r3
 8002bc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002bc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002bce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002bd6:	2320      	movs	r3, #32
 8002bd8:	e004      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002bda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002bde:	fab3 f383 	clz	r3, r3
 8002be2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d106      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2200      	movs	r2, #0
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff f81b 	bl	8001c2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fe ffff 	bl	8001c00 <LL_ADC_GetOffsetChannel>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10a      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x222>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2101      	movs	r1, #1
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe fff4 	bl	8001c00 <LL_ADC_GetOffsetChannel>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	0e9b      	lsrs	r3, r3, #26
 8002c1c:	f003 021f 	and.w	r2, r3, #31
 8002c20:	e01e      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x260>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2101      	movs	r1, #1
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fe ffe9 	bl	8001c00 <LL_ADC_GetOffsetChannel>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c38:	fa93 f3a3 	rbit	r3, r3
 8002c3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002c40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002c48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002c50:	2320      	movs	r3, #32
 8002c52:	e004      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002c54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c58:	fab3 f383 	clz	r3, r3
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d105      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x278>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	0e9b      	lsrs	r3, r3, #26
 8002c72:	f003 031f 	and.w	r3, r3, #31
 8002c76:	e018      	b.n	8002caa <HAL_ADC_ConfigChannel+0x2aa>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c84:	fa93 f3a3 	rbit	r3, r3
 8002c88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002c8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002c94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002c9c:	2320      	movs	r3, #32
 8002c9e:	e004      	b.n	8002caa <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002ca0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ca4:	fab3 f383 	clz	r3, r3
 8002ca8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d106      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fe ffb8 	bl	8001c2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2102      	movs	r1, #2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe ff9c 	bl	8001c00 <LL_ADC_GetOffsetChannel>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10a      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x2e8>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2102      	movs	r1, #2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fe ff91 	bl	8001c00 <LL_ADC_GetOffsetChannel>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	0e9b      	lsrs	r3, r3, #26
 8002ce2:	f003 021f 	and.w	r2, r3, #31
 8002ce6:	e01e      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x326>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2102      	movs	r1, #2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe ff86 	bl	8001c00 <LL_ADC_GetOffsetChannel>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cfe:	fa93 f3a3 	rbit	r3, r3
 8002d02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002d06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002d0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002d16:	2320      	movs	r3, #32
 8002d18:	e004      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002d1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d1e:	fab3 f383 	clz	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d105      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x33e>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	0e9b      	lsrs	r3, r3, #26
 8002d38:	f003 031f 	and.w	r3, r3, #31
 8002d3c:	e016      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x36c>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002d50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002d56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002d5e:	2320      	movs	r3, #32
 8002d60:	e004      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002d62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d66:	fab3 f383 	clz	r3, r3
 8002d6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d106      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2200      	movs	r2, #0
 8002d76:	2102      	movs	r1, #2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fe ff57 	bl	8001c2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2103      	movs	r1, #3
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fe ff3b 	bl	8001c00 <LL_ADC_GetOffsetChannel>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10a      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x3aa>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2103      	movs	r1, #3
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fe ff30 	bl	8001c00 <LL_ADC_GetOffsetChannel>
 8002da0:	4603      	mov	r3, r0
 8002da2:	0e9b      	lsrs	r3, r3, #26
 8002da4:	f003 021f 	and.w	r2, r3, #31
 8002da8:	e017      	b.n	8002dda <HAL_ADC_ConfigChannel+0x3da>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2103      	movs	r1, #3
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fe ff25 	bl	8001c00 <LL_ADC_GetOffsetChannel>
 8002db6:	4603      	mov	r3, r0
 8002db8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dbc:	fa93 f3a3 	rbit	r3, r3
 8002dc0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002dc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002dc4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002dc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002dcc:	2320      	movs	r3, #32
 8002dce:	e003      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002dd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dd2:	fab3 f383 	clz	r3, r3
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d105      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x3f2>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	0e9b      	lsrs	r3, r3, #26
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	e011      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x416>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002e00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e02:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002e04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002e0a:	2320      	movs	r3, #32
 8002e0c:	e003      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002e0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e10:	fab3 f383 	clz	r3, r3
 8002e14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d106      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2103      	movs	r1, #3
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fe ff02 	bl	8001c2c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff f881 	bl	8001f34 <LL_ADC_IsEnabled>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f040 813d 	bne.w	80030b4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6818      	ldr	r0, [r3, #0]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	6819      	ldr	r1, [r3, #0]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	461a      	mov	r2, r3
 8002e48:	f7fe ffd2 	bl	8001df0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	4aa2      	ldr	r2, [pc, #648]	@ (80030dc <HAL_ADC_ConfigChannel+0x6dc>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	f040 812e 	bne.w	80030b4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10b      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x480>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	0e9b      	lsrs	r3, r3, #26
 8002e6e:	3301      	adds	r3, #1
 8002e70:	f003 031f 	and.w	r3, r3, #31
 8002e74:	2b09      	cmp	r3, #9
 8002e76:	bf94      	ite	ls
 8002e78:	2301      	movls	r3, #1
 8002e7a:	2300      	movhi	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	e019      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x4b4>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e88:	fa93 f3a3 	rbit	r3, r3
 8002e8c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002e8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e90:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002e92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002e98:	2320      	movs	r3, #32
 8002e9a:	e003      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002e9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e9e:	fab3 f383 	clz	r3, r3
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	f003 031f 	and.w	r3, r3, #31
 8002eaa:	2b09      	cmp	r3, #9
 8002eac:	bf94      	ite	ls
 8002eae:	2301      	movls	r3, #1
 8002eb0:	2300      	movhi	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d079      	beq.n	8002fac <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d107      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x4d4>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	0e9b      	lsrs	r3, r3, #26
 8002eca:	3301      	adds	r3, #1
 8002ecc:	069b      	lsls	r3, r3, #26
 8002ece:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ed2:	e015      	b.n	8002f00 <HAL_ADC_ConfigChannel+0x500>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002edc:	fa93 f3a3 	rbit	r3, r3
 8002ee0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002ee2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ee4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002ee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002eec:	2320      	movs	r3, #32
 8002eee:	e003      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002ef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ef2:	fab3 f383 	clz	r3, r3
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	3301      	adds	r3, #1
 8002efa:	069b      	lsls	r3, r3, #26
 8002efc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d109      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x520>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	0e9b      	lsrs	r3, r3, #26
 8002f12:	3301      	adds	r3, #1
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	2101      	movs	r1, #1
 8002f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1e:	e017      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x550>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f28:	fa93 f3a3 	rbit	r3, r3
 8002f2c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002f2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f30:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002f32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002f38:	2320      	movs	r3, #32
 8002f3a:	e003      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002f3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f3e:	fab3 f383 	clz	r3, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	3301      	adds	r3, #1
 8002f46:	f003 031f 	and.w	r3, r3, #31
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f50:	ea42 0103 	orr.w	r1, r2, r3
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10a      	bne.n	8002f76 <HAL_ADC_ConfigChannel+0x576>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	0e9b      	lsrs	r3, r3, #26
 8002f66:	3301      	adds	r3, #1
 8002f68:	f003 021f 	and.w	r2, r3, #31
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	4413      	add	r3, r2
 8002f72:	051b      	lsls	r3, r3, #20
 8002f74:	e018      	b.n	8002fa8 <HAL_ADC_ConfigChannel+0x5a8>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f7e:	fa93 f3a3 	rbit	r3, r3
 8002f82:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002f88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002f8e:	2320      	movs	r3, #32
 8002f90:	e003      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f94:	fab3 f383 	clz	r3, r3
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	f003 021f 	and.w	r2, r3, #31
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	4413      	add	r3, r2
 8002fa6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	e07e      	b.n	80030aa <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d107      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x5c8>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	0e9b      	lsrs	r3, r3, #26
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	069b      	lsls	r3, r3, #26
 8002fc2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fc6:	e015      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x5f4>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fd0:	fa93 f3a3 	rbit	r3, r3
 8002fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002fe0:	2320      	movs	r3, #32
 8002fe2:	e003      	b.n	8002fec <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe6:	fab3 f383 	clz	r3, r3
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	3301      	adds	r3, #1
 8002fee:	069b      	lsls	r3, r3, #26
 8002ff0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d109      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x614>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	0e9b      	lsrs	r3, r3, #26
 8003006:	3301      	adds	r3, #1
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	2101      	movs	r1, #1
 800300e:	fa01 f303 	lsl.w	r3, r1, r3
 8003012:	e017      	b.n	8003044 <HAL_ADC_ConfigChannel+0x644>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	fa93 f3a3 	rbit	r3, r3
 8003020:	61fb      	str	r3, [r7, #28]
  return result;
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800302c:	2320      	movs	r3, #32
 800302e:	e003      	b.n	8003038 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003032:	fab3 f383 	clz	r3, r3
 8003036:	b2db      	uxtb	r3, r3
 8003038:	3301      	adds	r3, #1
 800303a:	f003 031f 	and.w	r3, r3, #31
 800303e:	2101      	movs	r1, #1
 8003040:	fa01 f303 	lsl.w	r3, r1, r3
 8003044:	ea42 0103 	orr.w	r1, r2, r3
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10d      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x670>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	0e9b      	lsrs	r3, r3, #26
 800305a:	3301      	adds	r3, #1
 800305c:	f003 021f 	and.w	r2, r3, #31
 8003060:	4613      	mov	r3, r2
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	4413      	add	r3, r2
 8003066:	3b1e      	subs	r3, #30
 8003068:	051b      	lsls	r3, r3, #20
 800306a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800306e:	e01b      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x6a8>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	fa93 f3a3 	rbit	r3, r3
 800307c:	613b      	str	r3, [r7, #16]
  return result;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003088:	2320      	movs	r3, #32
 800308a:	e003      	b.n	8003094 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	fab3 f383 	clz	r3, r3
 8003092:	b2db      	uxtb	r3, r3
 8003094:	3301      	adds	r3, #1
 8003096:	f003 021f 	and.w	r2, r3, #31
 800309a:	4613      	mov	r3, r2
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	4413      	add	r3, r2
 80030a0:	3b1e      	subs	r3, #30
 80030a2:	051b      	lsls	r3, r3, #20
 80030a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030a8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030ae:	4619      	mov	r1, r3
 80030b0:	f7fe fe72 	bl	8001d98 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	4b09      	ldr	r3, [pc, #36]	@ (80030e0 <HAL_ADC_ConfigChannel+0x6e0>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 80be 	beq.w	800323e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030ca:	d004      	beq.n	80030d6 <HAL_ADC_ConfigChannel+0x6d6>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a04      	ldr	r2, [pc, #16]	@ (80030e4 <HAL_ADC_ConfigChannel+0x6e4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d10a      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x6ec>
 80030d6:	4b04      	ldr	r3, [pc, #16]	@ (80030e8 <HAL_ADC_ConfigChannel+0x6e8>)
 80030d8:	e009      	b.n	80030ee <HAL_ADC_ConfigChannel+0x6ee>
 80030da:	bf00      	nop
 80030dc:	407f0000 	.word	0x407f0000
 80030e0:	80080000 	.word	0x80080000
 80030e4:	50000100 	.word	0x50000100
 80030e8:	50000300 	.word	0x50000300
 80030ec:	4b59      	ldr	r3, [pc, #356]	@ (8003254 <HAL_ADC_ConfigChannel+0x854>)
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe fd54 	bl	8001b9c <LL_ADC_GetCommonPathInternalCh>
 80030f4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a56      	ldr	r2, [pc, #344]	@ (8003258 <HAL_ADC_ConfigChannel+0x858>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d004      	beq.n	800310c <HAL_ADC_ConfigChannel+0x70c>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a55      	ldr	r2, [pc, #340]	@ (800325c <HAL_ADC_ConfigChannel+0x85c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d13a      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800310c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003110:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d134      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003120:	d005      	beq.n	800312e <HAL_ADC_ConfigChannel+0x72e>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a4e      	ldr	r2, [pc, #312]	@ (8003260 <HAL_ADC_ConfigChannel+0x860>)
 8003128:	4293      	cmp	r3, r2
 800312a:	f040 8085 	bne.w	8003238 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003136:	d004      	beq.n	8003142 <HAL_ADC_ConfigChannel+0x742>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a49      	ldr	r2, [pc, #292]	@ (8003264 <HAL_ADC_ConfigChannel+0x864>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d101      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x746>
 8003142:	4a49      	ldr	r2, [pc, #292]	@ (8003268 <HAL_ADC_ConfigChannel+0x868>)
 8003144:	e000      	b.n	8003148 <HAL_ADC_ConfigChannel+0x748>
 8003146:	4a43      	ldr	r2, [pc, #268]	@ (8003254 <HAL_ADC_ConfigChannel+0x854>)
 8003148:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800314c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003150:	4619      	mov	r1, r3
 8003152:	4610      	mov	r0, r2
 8003154:	f7fe fd0f 	bl	8001b76 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003158:	4b44      	ldr	r3, [pc, #272]	@ (800326c <HAL_ADC_ConfigChannel+0x86c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	099b      	lsrs	r3, r3, #6
 800315e:	4a44      	ldr	r2, [pc, #272]	@ (8003270 <HAL_ADC_ConfigChannel+0x870>)
 8003160:	fba2 2303 	umull	r2, r3, r2, r3
 8003164:	099b      	lsrs	r3, r3, #6
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	4613      	mov	r3, r2
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003172:	e002      	b.n	800317a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	3b01      	subs	r3, #1
 8003178:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1f9      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003180:	e05a      	b.n	8003238 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a3b      	ldr	r2, [pc, #236]	@ (8003274 <HAL_ADC_ConfigChannel+0x874>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d125      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800318c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003190:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d11f      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a31      	ldr	r2, [pc, #196]	@ (8003264 <HAL_ADC_ConfigChannel+0x864>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d104      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x7ac>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a34      	ldr	r2, [pc, #208]	@ (8003278 <HAL_ADC_ConfigChannel+0x878>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d047      	beq.n	800323c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031b4:	d004      	beq.n	80031c0 <HAL_ADC_ConfigChannel+0x7c0>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a2a      	ldr	r2, [pc, #168]	@ (8003264 <HAL_ADC_ConfigChannel+0x864>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d101      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x7c4>
 80031c0:	4a29      	ldr	r2, [pc, #164]	@ (8003268 <HAL_ADC_ConfigChannel+0x868>)
 80031c2:	e000      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x7c6>
 80031c4:	4a23      	ldr	r2, [pc, #140]	@ (8003254 <HAL_ADC_ConfigChannel+0x854>)
 80031c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031ce:	4619      	mov	r1, r3
 80031d0:	4610      	mov	r0, r2
 80031d2:	f7fe fcd0 	bl	8001b76 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031d6:	e031      	b.n	800323c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a27      	ldr	r2, [pc, #156]	@ (800327c <HAL_ADC_ConfigChannel+0x87c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d12d      	bne.n	800323e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d127      	bne.n	800323e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003264 <HAL_ADC_ConfigChannel+0x864>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d022      	beq.n	800323e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003200:	d004      	beq.n	800320c <HAL_ADC_ConfigChannel+0x80c>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a17      	ldr	r2, [pc, #92]	@ (8003264 <HAL_ADC_ConfigChannel+0x864>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d101      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x810>
 800320c:	4a16      	ldr	r2, [pc, #88]	@ (8003268 <HAL_ADC_ConfigChannel+0x868>)
 800320e:	e000      	b.n	8003212 <HAL_ADC_ConfigChannel+0x812>
 8003210:	4a10      	ldr	r2, [pc, #64]	@ (8003254 <HAL_ADC_ConfigChannel+0x854>)
 8003212:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003216:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800321a:	4619      	mov	r1, r3
 800321c:	4610      	mov	r0, r2
 800321e:	f7fe fcaa 	bl	8001b76 <LL_ADC_SetCommonPathInternalCh>
 8003222:	e00c      	b.n	800323e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003228:	f043 0220 	orr.w	r2, r3, #32
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003236:	e002      	b.n	800323e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003238:	bf00      	nop
 800323a:	e000      	b.n	800323e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800323c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003246:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800324a:	4618      	mov	r0, r3
 800324c:	37d8      	adds	r7, #216	@ 0xd8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	50000700 	.word	0x50000700
 8003258:	c3210000 	.word	0xc3210000
 800325c:	90c00010 	.word	0x90c00010
 8003260:	50000600 	.word	0x50000600
 8003264:	50000100 	.word	0x50000100
 8003268:	50000300 	.word	0x50000300
 800326c:	20000004 	.word	0x20000004
 8003270:	053e2d63 	.word	0x053e2d63
 8003274:	c7520000 	.word	0xc7520000
 8003278:	50000500 	.word	0x50000500
 800327c:	cb840000 	.word	0xcb840000

08003280 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003288:	2300      	movs	r3, #0
 800328a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f7fe fe4f 	bl	8001f34 <LL_ADC_IsEnabled>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d176      	bne.n	800338a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	4b3c      	ldr	r3, [pc, #240]	@ (8003394 <ADC_Enable+0x114>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00d      	beq.n	80032c6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ae:	f043 0210 	orr.w	r2, r3, #16
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ba:	f043 0201 	orr.w	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e062      	b.n	800338c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fe fe1e 	bl	8001f0c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032d8:	d004      	beq.n	80032e4 <ADC_Enable+0x64>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a2e      	ldr	r2, [pc, #184]	@ (8003398 <ADC_Enable+0x118>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d101      	bne.n	80032e8 <ADC_Enable+0x68>
 80032e4:	4b2d      	ldr	r3, [pc, #180]	@ (800339c <ADC_Enable+0x11c>)
 80032e6:	e000      	b.n	80032ea <ADC_Enable+0x6a>
 80032e8:	4b2d      	ldr	r3, [pc, #180]	@ (80033a0 <ADC_Enable+0x120>)
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fe fc56 	bl	8001b9c <LL_ADC_GetCommonPathInternalCh>
 80032f0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80032f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d013      	beq.n	8003322 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032fa:	4b2a      	ldr	r3, [pc, #168]	@ (80033a4 <ADC_Enable+0x124>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	099b      	lsrs	r3, r3, #6
 8003300:	4a29      	ldr	r2, [pc, #164]	@ (80033a8 <ADC_Enable+0x128>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	099b      	lsrs	r3, r3, #6
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	4613      	mov	r3, r2
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003314:	e002      	b.n	800331c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	3b01      	subs	r3, #1
 800331a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f9      	bne.n	8003316 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003322:	f7fe fc09 	bl	8001b38 <HAL_GetTick>
 8003326:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003328:	e028      	b.n	800337c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7fe fe00 	bl	8001f34 <LL_ADC_IsEnabled>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d104      	bne.n	8003344 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7fe fde4 	bl	8001f0c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003344:	f7fe fbf8 	bl	8001b38 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d914      	bls.n	800337c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b01      	cmp	r3, #1
 800335e:	d00d      	beq.n	800337c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003364:	f043 0210 	orr.w	r2, r3, #16
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003370:	f043 0201 	orr.w	r2, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e007      	b.n	800338c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b01      	cmp	r3, #1
 8003388:	d1cf      	bne.n	800332a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	8000003f 	.word	0x8000003f
 8003398:	50000100 	.word	0x50000100
 800339c:	50000300 	.word	0x50000300
 80033a0:	50000700 	.word	0x50000700
 80033a4:	20000004 	.word	0x20000004
 80033a8:	053e2d63 	.word	0x053e2d63

080033ac <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033be:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d14b      	bne.n	800345e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ca:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0308 	and.w	r3, r3, #8
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d021      	beq.n	8003424 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fe fc85 	bl	8001cf4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d032      	beq.n	8003456 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d12b      	bne.n	8003456 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003402:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d11f      	bne.n	8003456 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341a:	f043 0201 	orr.w	r2, r3, #1
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003422:	e018      	b.n	8003456 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d111      	bne.n	8003456 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003436:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003442:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d105      	bne.n	8003456 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344e:	f043 0201 	orr.w	r2, r3, #1
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7ff faaa 	bl	80029b0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800345c:	e00e      	b.n	800347c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003462:	f003 0310 	and.w	r3, r3, #16
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f7ff fabe 	bl	80029ec <HAL_ADC_ErrorCallback>
}
 8003470:	e004      	b.n	800347c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	4798      	blx	r3
}
 800347c:	bf00      	nop
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003490:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f7ff fa96 	bl	80029c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003498:	bf00      	nop
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ac:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034be:	f043 0204 	orr.w	r2, r3, #4
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f7ff fa90 	bl	80029ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034cc:	bf00      	nop
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <LL_ADC_IsEnabled>:
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d101      	bne.n	80034ec <LL_ADC_IsEnabled+0x18>
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <LL_ADC_IsEnabled+0x1a>
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <LL_ADC_REG_IsConversionOngoing>:
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	2b04      	cmp	r3, #4
 800350c:	d101      	bne.n	8003512 <LL_ADC_REG_IsConversionOngoing+0x18>
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003584:	b590      	push	{r4, r7, lr}
 8003586:	b0a1      	sub	sp, #132	@ 0x84
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800359e:	2302      	movs	r3, #2
 80035a0:	e0e7      	b.n	8003772 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80035aa:	2300      	movs	r3, #0
 80035ac:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80035ae:	2300      	movs	r3, #0
 80035b0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035ba:	d102      	bne.n	80035c2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80035bc:	4b6f      	ldr	r3, [pc, #444]	@ (800377c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035be:	60bb      	str	r3, [r7, #8]
 80035c0:	e009      	b.n	80035d6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a6e      	ldr	r2, [pc, #440]	@ (8003780 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d102      	bne.n	80035d2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80035cc:	4b6d      	ldr	r3, [pc, #436]	@ (8003784 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80035ce:	60bb      	str	r3, [r7, #8]
 80035d0:	e001      	b.n	80035d6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80035d2:	2300      	movs	r3, #0
 80035d4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10b      	bne.n	80035f4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e0:	f043 0220 	orr.w	r2, r3, #32
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0be      	b.n	8003772 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff ff7f 	bl	80034fa <LL_ADC_REG_IsConversionOngoing>
 80035fc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff ff79 	bl	80034fa <LL_ADC_REG_IsConversionOngoing>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	f040 80a0 	bne.w	8003750 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003610:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003612:	2b00      	cmp	r3, #0
 8003614:	f040 809c 	bne.w	8003750 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003620:	d004      	beq.n	800362c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a55      	ldr	r2, [pc, #340]	@ (800377c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d101      	bne.n	8003630 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800362c:	4b56      	ldr	r3, [pc, #344]	@ (8003788 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800362e:	e000      	b.n	8003632 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003630:	4b56      	ldr	r3, [pc, #344]	@ (800378c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003632:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d04b      	beq.n	80036d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800363c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	6859      	ldr	r1, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800364e:	035b      	lsls	r3, r3, #13
 8003650:	430b      	orrs	r3, r1
 8003652:	431a      	orrs	r2, r3
 8003654:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003656:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003660:	d004      	beq.n	800366c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a45      	ldr	r2, [pc, #276]	@ (800377c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d10f      	bne.n	800368c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800366c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003670:	f7ff ff30 	bl	80034d4 <LL_ADC_IsEnabled>
 8003674:	4604      	mov	r4, r0
 8003676:	4841      	ldr	r0, [pc, #260]	@ (800377c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003678:	f7ff ff2c 	bl	80034d4 <LL_ADC_IsEnabled>
 800367c:	4603      	mov	r3, r0
 800367e:	4323      	orrs	r3, r4
 8003680:	2b00      	cmp	r3, #0
 8003682:	bf0c      	ite	eq
 8003684:	2301      	moveq	r3, #1
 8003686:	2300      	movne	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	e012      	b.n	80036b2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800368c:	483c      	ldr	r0, [pc, #240]	@ (8003780 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800368e:	f7ff ff21 	bl	80034d4 <LL_ADC_IsEnabled>
 8003692:	4604      	mov	r4, r0
 8003694:	483b      	ldr	r0, [pc, #236]	@ (8003784 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003696:	f7ff ff1d 	bl	80034d4 <LL_ADC_IsEnabled>
 800369a:	4603      	mov	r3, r0
 800369c:	431c      	orrs	r4, r3
 800369e:	483c      	ldr	r0, [pc, #240]	@ (8003790 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80036a0:	f7ff ff18 	bl	80034d4 <LL_ADC_IsEnabled>
 80036a4:	4603      	mov	r3, r0
 80036a6:	4323      	orrs	r3, r4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	bf0c      	ite	eq
 80036ac:	2301      	moveq	r3, #1
 80036ae:	2300      	movne	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d056      	beq.n	8003764 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80036b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80036be:	f023 030f 	bic.w	r3, r3, #15
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	6811      	ldr	r1, [r2, #0]
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	6892      	ldr	r2, [r2, #8]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	431a      	orrs	r2, r3
 80036ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036d0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036d2:	e047      	b.n	8003764 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80036d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036de:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036e8:	d004      	beq.n	80036f4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a23      	ldr	r2, [pc, #140]	@ (800377c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d10f      	bne.n	8003714 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80036f4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80036f8:	f7ff feec 	bl	80034d4 <LL_ADC_IsEnabled>
 80036fc:	4604      	mov	r4, r0
 80036fe:	481f      	ldr	r0, [pc, #124]	@ (800377c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003700:	f7ff fee8 	bl	80034d4 <LL_ADC_IsEnabled>
 8003704:	4603      	mov	r3, r0
 8003706:	4323      	orrs	r3, r4
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	e012      	b.n	800373a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003714:	481a      	ldr	r0, [pc, #104]	@ (8003780 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003716:	f7ff fedd 	bl	80034d4 <LL_ADC_IsEnabled>
 800371a:	4604      	mov	r4, r0
 800371c:	4819      	ldr	r0, [pc, #100]	@ (8003784 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800371e:	f7ff fed9 	bl	80034d4 <LL_ADC_IsEnabled>
 8003722:	4603      	mov	r3, r0
 8003724:	431c      	orrs	r4, r3
 8003726:	481a      	ldr	r0, [pc, #104]	@ (8003790 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003728:	f7ff fed4 	bl	80034d4 <LL_ADC_IsEnabled>
 800372c:	4603      	mov	r3, r0
 800372e:	4323      	orrs	r3, r4
 8003730:	2b00      	cmp	r3, #0
 8003732:	bf0c      	ite	eq
 8003734:	2301      	moveq	r3, #1
 8003736:	2300      	movne	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d012      	beq.n	8003764 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800373e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003746:	f023 030f 	bic.w	r3, r3, #15
 800374a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800374c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800374e:	e009      	b.n	8003764 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003754:	f043 0220 	orr.w	r2, r3, #32
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003762:	e000      	b.n	8003766 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003764:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800376e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003772:	4618      	mov	r0, r3
 8003774:	3784      	adds	r7, #132	@ 0x84
 8003776:	46bd      	mov	sp, r7
 8003778:	bd90      	pop	{r4, r7, pc}
 800377a:	bf00      	nop
 800377c:	50000100 	.word	0x50000100
 8003780:	50000400 	.word	0x50000400
 8003784:	50000500 	.word	0x50000500
 8003788:	50000300 	.word	0x50000300
 800378c:	50000700 	.word	0x50000700
 8003790:	50000600 	.word	0x50000600

08003794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037a4:	4b0c      	ldr	r3, [pc, #48]	@ (80037d8 <__NVIC_SetPriorityGrouping+0x44>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037b0:	4013      	ands	r3, r2
 80037b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037c6:	4a04      	ldr	r2, [pc, #16]	@ (80037d8 <__NVIC_SetPriorityGrouping+0x44>)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	60d3      	str	r3, [r2, #12]
}
 80037cc:	bf00      	nop
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037e0:	4b04      	ldr	r3, [pc, #16]	@ (80037f4 <__NVIC_GetPriorityGrouping+0x18>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	0a1b      	lsrs	r3, r3, #8
 80037e6:	f003 0307 	and.w	r3, r3, #7
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	e000ed00 	.word	0xe000ed00

080037f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003806:	2b00      	cmp	r3, #0
 8003808:	db0b      	blt.n	8003822 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800380a:	79fb      	ldrb	r3, [r7, #7]
 800380c:	f003 021f 	and.w	r2, r3, #31
 8003810:	4907      	ldr	r1, [pc, #28]	@ (8003830 <__NVIC_EnableIRQ+0x38>)
 8003812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	2001      	movs	r0, #1
 800381a:	fa00 f202 	lsl.w	r2, r0, r2
 800381e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	e000e100 	.word	0xe000e100

08003834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	6039      	str	r1, [r7, #0]
 800383e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003844:	2b00      	cmp	r3, #0
 8003846:	db0a      	blt.n	800385e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	b2da      	uxtb	r2, r3
 800384c:	490c      	ldr	r1, [pc, #48]	@ (8003880 <__NVIC_SetPriority+0x4c>)
 800384e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003852:	0112      	lsls	r2, r2, #4
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	440b      	add	r3, r1
 8003858:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800385c:	e00a      	b.n	8003874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	b2da      	uxtb	r2, r3
 8003862:	4908      	ldr	r1, [pc, #32]	@ (8003884 <__NVIC_SetPriority+0x50>)
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	3b04      	subs	r3, #4
 800386c:	0112      	lsls	r2, r2, #4
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	440b      	add	r3, r1
 8003872:	761a      	strb	r2, [r3, #24]
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	e000e100 	.word	0xe000e100
 8003884:	e000ed00 	.word	0xe000ed00

08003888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003888:	b480      	push	{r7}
 800388a:	b089      	sub	sp, #36	@ 0x24
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	f1c3 0307 	rsb	r3, r3, #7
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	bf28      	it	cs
 80038a6:	2304      	movcs	r3, #4
 80038a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	3304      	adds	r3, #4
 80038ae:	2b06      	cmp	r3, #6
 80038b0:	d902      	bls.n	80038b8 <NVIC_EncodePriority+0x30>
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	3b03      	subs	r3, #3
 80038b6:	e000      	b.n	80038ba <NVIC_EncodePriority+0x32>
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038bc:	f04f 32ff 	mov.w	r2, #4294967295
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	43da      	mvns	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	401a      	ands	r2, r3
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038d0:	f04f 31ff 	mov.w	r1, #4294967295
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	fa01 f303 	lsl.w	r3, r1, r3
 80038da:	43d9      	mvns	r1, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e0:	4313      	orrs	r3, r2
         );
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3724      	adds	r7, #36	@ 0x24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
	...

080038f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003900:	d301      	bcc.n	8003906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003902:	2301      	movs	r3, #1
 8003904:	e00f      	b.n	8003926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003906:	4a0a      	ldr	r2, [pc, #40]	@ (8003930 <SysTick_Config+0x40>)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3b01      	subs	r3, #1
 800390c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800390e:	210f      	movs	r1, #15
 8003910:	f04f 30ff 	mov.w	r0, #4294967295
 8003914:	f7ff ff8e 	bl	8003834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003918:	4b05      	ldr	r3, [pc, #20]	@ (8003930 <SysTick_Config+0x40>)
 800391a:	2200      	movs	r2, #0
 800391c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800391e:	4b04      	ldr	r3, [pc, #16]	@ (8003930 <SysTick_Config+0x40>)
 8003920:	2207      	movs	r2, #7
 8003922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	e000e010 	.word	0xe000e010

08003934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff ff29 	bl	8003794 <__NVIC_SetPriorityGrouping>
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b086      	sub	sp, #24
 800394e:	af00      	add	r7, sp, #0
 8003950:	4603      	mov	r3, r0
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
 8003956:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003958:	f7ff ff40 	bl	80037dc <__NVIC_GetPriorityGrouping>
 800395c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68b9      	ldr	r1, [r7, #8]
 8003962:	6978      	ldr	r0, [r7, #20]
 8003964:	f7ff ff90 	bl	8003888 <NVIC_EncodePriority>
 8003968:	4602      	mov	r2, r0
 800396a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800396e:	4611      	mov	r1, r2
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff ff5f 	bl	8003834 <__NVIC_SetPriority>
}
 8003976:	bf00      	nop
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	4603      	mov	r3, r0
 8003986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff ff33 	bl	80037f8 <__NVIC_EnableIRQ>
}
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b082      	sub	sp, #8
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff ffa4 	bl	80038f0 <SysTick_Config>
 80039a8:	4603      	mov	r3, r0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e08d      	b.n	8003ae2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	4b47      	ldr	r3, [pc, #284]	@ (8003aec <HAL_DMA_Init+0x138>)
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d80f      	bhi.n	80039f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	4b45      	ldr	r3, [pc, #276]	@ (8003af0 <HAL_DMA_Init+0x13c>)
 80039da:	4413      	add	r3, r2
 80039dc:	4a45      	ldr	r2, [pc, #276]	@ (8003af4 <HAL_DMA_Init+0x140>)
 80039de:	fba2 2303 	umull	r2, r3, r2, r3
 80039e2:	091b      	lsrs	r3, r3, #4
 80039e4:	009a      	lsls	r2, r3, #2
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a42      	ldr	r2, [pc, #264]	@ (8003af8 <HAL_DMA_Init+0x144>)
 80039ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80039f0:	e00e      	b.n	8003a10 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	4b40      	ldr	r3, [pc, #256]	@ (8003afc <HAL_DMA_Init+0x148>)
 80039fa:	4413      	add	r3, r2
 80039fc:	4a3d      	ldr	r2, [pc, #244]	@ (8003af4 <HAL_DMA_Init+0x140>)
 80039fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003a02:	091b      	lsrs	r3, r3, #4
 8003a04:	009a      	lsls	r2, r3, #2
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a3c      	ldr	r2, [pc, #240]	@ (8003b00 <HAL_DMA_Init+0x14c>)
 8003a0e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fa76 	bl	8003f54 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a70:	d102      	bne.n	8003a78 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a8c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d010      	beq.n	8003ab8 <HAL_DMA_Init+0x104>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d80c      	bhi.n	8003ab8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fa96 	bl	8003fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ab4:	605a      	str	r2, [r3, #4]
 8003ab6:	e008      	b.n	8003aca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40020407 	.word	0x40020407
 8003af0:	bffdfff8 	.word	0xbffdfff8
 8003af4:	cccccccd 	.word	0xcccccccd
 8003af8:	40020000 	.word	0x40020000
 8003afc:	bffdfbf8 	.word	0xbffdfbf8
 8003b00:	40020400 	.word	0x40020400

08003b04 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_DMA_Start_IT+0x20>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e066      	b.n	8003bf2 <HAL_DMA_Start_IT+0xee>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d155      	bne.n	8003be4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0201 	bic.w	r2, r2, #1
 8003b54:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	68b9      	ldr	r1, [r7, #8]
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 f9bb 	bl	8003ed8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d008      	beq.n	8003b7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f042 020e 	orr.w	r2, r2, #14
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	e00f      	b.n	8003b9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0204 	bic.w	r2, r2, #4
 8003b8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 020a 	orr.w	r2, r2, #10
 8003b9a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d007      	beq.n	8003bba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bb8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d007      	beq.n	8003bd2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bd0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 0201 	orr.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	e005      	b.n	8003bf0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003bec:	2302      	movs	r3, #2
 8003bee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b085      	sub	sp, #20
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c02:	2300      	movs	r3, #0
 8003c04:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d005      	beq.n	8003c1e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2204      	movs	r2, #4
 8003c16:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	73fb      	strb	r3, [r7, #15]
 8003c1c:	e037      	b.n	8003c8e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 020e 	bic.w	r2, r2, #14
 8003c2c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c3c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0201 	bic.w	r2, r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c52:	f003 021f 	and.w	r2, r3, #31
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c60:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c6a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00c      	beq.n	8003c8e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c7e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c82:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c8c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d00d      	beq.n	8003ce0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2204      	movs	r2, #4
 8003cc8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	73fb      	strb	r3, [r7, #15]
 8003cde:	e047      	b.n	8003d70 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 020e 	bic.w	r2, r2, #14
 8003cee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0201 	bic.w	r2, r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d0a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d14:	f003 021f 	and.w	r2, r3, #31
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d22:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d2c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00c      	beq.n	8003d50 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d44:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d4e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	4798      	blx	r3
    }
  }
  return status;
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b084      	sub	sp, #16
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d96:	f003 031f 	and.w	r3, r3, #31
 8003d9a:	2204      	movs	r2, #4
 8003d9c:	409a      	lsls	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4013      	ands	r3, r2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d026      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x7a>
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d021      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d107      	bne.n	8003dce <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0204 	bic.w	r2, r2, #4
 8003dcc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd2:	f003 021f 	and.w	r2, r3, #31
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dda:	2104      	movs	r1, #4
 8003ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8003de0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d071      	beq.n	8003ece <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003df2:	e06c      	b.n	8003ece <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df8:	f003 031f 	and.w	r3, r3, #31
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d02e      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d029      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10b      	bne.n	8003e38 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 020a 	bic.w	r2, r2, #10
 8003e2e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3c:	f003 021f 	and.w	r2, r3, #31
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e44:	2102      	movs	r1, #2
 8003e46:	fa01 f202 	lsl.w	r2, r1, r2
 8003e4a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d038      	beq.n	8003ece <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e64:	e033      	b.n	8003ece <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e6a:	f003 031f 	and.w	r3, r3, #31
 8003e6e:	2208      	movs	r2, #8
 8003e70:	409a      	lsls	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4013      	ands	r3, r2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d02a      	beq.n	8003ed0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	f003 0308 	and.w	r3, r3, #8
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d025      	beq.n	8003ed0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 020e 	bic.w	r2, r2, #14
 8003e92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e98:	f003 021f 	and.w	r2, r3, #31
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ea6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d004      	beq.n	8003ed0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ece:	bf00      	nop
 8003ed0:	bf00      	nop
}
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
 8003ee4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003eee:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d004      	beq.n	8003f02 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f00:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f06:	f003 021f 	and.w	r2, r3, #31
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	2101      	movs	r1, #1
 8003f10:	fa01 f202 	lsl.w	r2, r1, r2
 8003f14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	2b10      	cmp	r3, #16
 8003f24:	d108      	bne.n	8003f38 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f36:	e007      	b.n	8003f48 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	60da      	str	r2, [r3, #12]
}
 8003f48:	bf00      	nop
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	461a      	mov	r2, r3
 8003f62:	4b16      	ldr	r3, [pc, #88]	@ (8003fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d802      	bhi.n	8003f6e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003f68:	4b15      	ldr	r3, [pc, #84]	@ (8003fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	e001      	b.n	8003f72 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003f6e:	4b15      	ldr	r3, [pc, #84]	@ (8003fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003f70:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	3b08      	subs	r3, #8
 8003f7e:	4a12      	ldr	r2, [pc, #72]	@ (8003fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003f80:	fba2 2303 	umull	r2, r3, r2, r3
 8003f84:	091b      	lsrs	r3, r3, #4
 8003f86:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f8c:	089b      	lsrs	r3, r3, #2
 8003f8e:	009a      	lsls	r2, r3, #2
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	4413      	add	r3, r2
 8003f94:	461a      	mov	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8003fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003f9e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f003 031f 	and.w	r3, r3, #31
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	409a      	lsls	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003fae:	bf00      	nop
 8003fb0:	371c      	adds	r7, #28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40020407 	.word	0x40020407
 8003fc0:	40020800 	.word	0x40020800
 8003fc4:	40020820 	.word	0x40020820
 8003fc8:	cccccccd 	.word	0xcccccccd
 8003fcc:	40020880 	.word	0x40020880

08003fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8004010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	461a      	mov	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a08      	ldr	r2, [pc, #32]	@ (8004014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003ff2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	f003 031f 	and.w	r3, r3, #31
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	409a      	lsls	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004004:	bf00      	nop
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	1000823f 	.word	0x1000823f
 8004014:	40020940 	.word	0x40020940

08004018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004026:	e15a      	b.n	80042de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	2101      	movs	r1, #1
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	fa01 f303 	lsl.w	r3, r1, r3
 8004034:	4013      	ands	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 814c 	beq.w	80042d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f003 0303 	and.w	r3, r3, #3
 8004048:	2b01      	cmp	r3, #1
 800404a:	d005      	beq.n	8004058 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004054:	2b02      	cmp	r3, #2
 8004056:	d130      	bne.n	80040ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	2203      	movs	r2, #3
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	43db      	mvns	r3, r3
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4013      	ands	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	68da      	ldr	r2, [r3, #12]
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800408e:	2201      	movs	r2, #1
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	43db      	mvns	r3, r3
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4013      	ands	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	091b      	lsrs	r3, r3, #4
 80040a4:	f003 0201 	and.w	r2, r3, #1
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f003 0303 	and.w	r3, r3, #3
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d017      	beq.n	80040f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	2203      	movs	r2, #3
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	43db      	mvns	r3, r3
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4013      	ands	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d123      	bne.n	800414a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	08da      	lsrs	r2, r3, #3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	3208      	adds	r2, #8
 800410a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800410e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	220f      	movs	r2, #15
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	43db      	mvns	r3, r3
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4013      	ands	r3, r2
 8004124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	691a      	ldr	r2, [r3, #16]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	08da      	lsrs	r2, r3, #3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3208      	adds	r2, #8
 8004144:	6939      	ldr	r1, [r7, #16]
 8004146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	2203      	movs	r2, #3
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	43db      	mvns	r3, r3
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4013      	ands	r3, r2
 8004160:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f003 0203 	and.w	r2, r3, #3
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 80a6 	beq.w	80042d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800418c:	4b5b      	ldr	r3, [pc, #364]	@ (80042fc <HAL_GPIO_Init+0x2e4>)
 800418e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004190:	4a5a      	ldr	r2, [pc, #360]	@ (80042fc <HAL_GPIO_Init+0x2e4>)
 8004192:	f043 0301 	orr.w	r3, r3, #1
 8004196:	6613      	str	r3, [r2, #96]	@ 0x60
 8004198:	4b58      	ldr	r3, [pc, #352]	@ (80042fc <HAL_GPIO_Init+0x2e4>)
 800419a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	60bb      	str	r3, [r7, #8]
 80041a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041a4:	4a56      	ldr	r2, [pc, #344]	@ (8004300 <HAL_GPIO_Init+0x2e8>)
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	089b      	lsrs	r3, r3, #2
 80041aa:	3302      	adds	r3, #2
 80041ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f003 0303 	and.w	r3, r3, #3
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	220f      	movs	r2, #15
 80041bc:	fa02 f303 	lsl.w	r3, r2, r3
 80041c0:	43db      	mvns	r3, r3
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4013      	ands	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80041ce:	d01f      	beq.n	8004210 <HAL_GPIO_Init+0x1f8>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a4c      	ldr	r2, [pc, #304]	@ (8004304 <HAL_GPIO_Init+0x2ec>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d019      	beq.n	800420c <HAL_GPIO_Init+0x1f4>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a4b      	ldr	r2, [pc, #300]	@ (8004308 <HAL_GPIO_Init+0x2f0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d013      	beq.n	8004208 <HAL_GPIO_Init+0x1f0>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a4a      	ldr	r2, [pc, #296]	@ (800430c <HAL_GPIO_Init+0x2f4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00d      	beq.n	8004204 <HAL_GPIO_Init+0x1ec>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a49      	ldr	r2, [pc, #292]	@ (8004310 <HAL_GPIO_Init+0x2f8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d007      	beq.n	8004200 <HAL_GPIO_Init+0x1e8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a48      	ldr	r2, [pc, #288]	@ (8004314 <HAL_GPIO_Init+0x2fc>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d101      	bne.n	80041fc <HAL_GPIO_Init+0x1e4>
 80041f8:	2305      	movs	r3, #5
 80041fa:	e00a      	b.n	8004212 <HAL_GPIO_Init+0x1fa>
 80041fc:	2306      	movs	r3, #6
 80041fe:	e008      	b.n	8004212 <HAL_GPIO_Init+0x1fa>
 8004200:	2304      	movs	r3, #4
 8004202:	e006      	b.n	8004212 <HAL_GPIO_Init+0x1fa>
 8004204:	2303      	movs	r3, #3
 8004206:	e004      	b.n	8004212 <HAL_GPIO_Init+0x1fa>
 8004208:	2302      	movs	r3, #2
 800420a:	e002      	b.n	8004212 <HAL_GPIO_Init+0x1fa>
 800420c:	2301      	movs	r3, #1
 800420e:	e000      	b.n	8004212 <HAL_GPIO_Init+0x1fa>
 8004210:	2300      	movs	r3, #0
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	f002 0203 	and.w	r2, r2, #3
 8004218:	0092      	lsls	r2, r2, #2
 800421a:	4093      	lsls	r3, r2
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	4313      	orrs	r3, r2
 8004220:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004222:	4937      	ldr	r1, [pc, #220]	@ (8004300 <HAL_GPIO_Init+0x2e8>)
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	089b      	lsrs	r3, r3, #2
 8004228:	3302      	adds	r3, #2
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004230:	4b39      	ldr	r3, [pc, #228]	@ (8004318 <HAL_GPIO_Init+0x300>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	43db      	mvns	r3, r3
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4013      	ands	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004254:	4a30      	ldr	r2, [pc, #192]	@ (8004318 <HAL_GPIO_Init+0x300>)
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800425a:	4b2f      	ldr	r3, [pc, #188]	@ (8004318 <HAL_GPIO_Init+0x300>)
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	43db      	mvns	r3, r3
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4013      	ands	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800427e:	4a26      	ldr	r2, [pc, #152]	@ (8004318 <HAL_GPIO_Init+0x300>)
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004284:	4b24      	ldr	r3, [pc, #144]	@ (8004318 <HAL_GPIO_Init+0x300>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	43db      	mvns	r3, r3
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4013      	ands	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80042a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004318 <HAL_GPIO_Init+0x300>)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80042ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004318 <HAL_GPIO_Init+0x300>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	43db      	mvns	r3, r3
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4013      	ands	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80042d2:	4a11      	ldr	r2, [pc, #68]	@ (8004318 <HAL_GPIO_Init+0x300>)
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	3301      	adds	r3, #1
 80042dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f47f ae9d 	bne.w	8004028 <HAL_GPIO_Init+0x10>
  }
}
 80042ee:	bf00      	nop
 80042f0:	bf00      	nop
 80042f2:	371c      	adds	r7, #28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	40021000 	.word	0x40021000
 8004300:	40010000 	.word	0x40010000
 8004304:	48000400 	.word	0x48000400
 8004308:	48000800 	.word	0x48000800
 800430c:	48000c00 	.word	0x48000c00
 8004310:	48001000 	.word	0x48001000
 8004314:	48001400 	.word	0x48001400
 8004318:	40010400 	.word	0x40010400

0800431c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	460b      	mov	r3, r1
 8004326:	807b      	strh	r3, [r7, #2]
 8004328:	4613      	mov	r3, r2
 800432a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800432c:	787b      	ldrb	r3, [r7, #1]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004332:	887a      	ldrh	r2, [r7, #2]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004338:	e002      	b.n	8004340 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800433a:	887a      	ldrh	r2, [r7, #2]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	4603      	mov	r3, r0
 8004354:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004356:	4b08      	ldr	r3, [pc, #32]	@ (8004378 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004358:	695a      	ldr	r2, [r3, #20]
 800435a:	88fb      	ldrh	r3, [r7, #6]
 800435c:	4013      	ands	r3, r2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d006      	beq.n	8004370 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004362:	4a05      	ldr	r2, [pc, #20]	@ (8004378 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004364:	88fb      	ldrh	r3, [r7, #6]
 8004366:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004368:	88fb      	ldrh	r3, [r7, #6]
 800436a:	4618      	mov	r0, r3
 800436c:	f7fc fec4 	bl	80010f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004370:	bf00      	nop
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40010400 	.word	0x40010400

0800437c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d141      	bne.n	800440e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800438a:	4b4b      	ldr	r3, [pc, #300]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004396:	d131      	bne.n	80043fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004398:	4b47      	ldr	r3, [pc, #284]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800439a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800439e:	4a46      	ldr	r2, [pc, #280]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043a8:	4b43      	ldr	r3, [pc, #268]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043b0:	4a41      	ldr	r2, [pc, #260]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043b8:	4b40      	ldr	r3, [pc, #256]	@ (80044bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2232      	movs	r2, #50	@ 0x32
 80043be:	fb02 f303 	mul.w	r3, r2, r3
 80043c2:	4a3f      	ldr	r2, [pc, #252]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043c4:	fba2 2303 	umull	r2, r3, r2, r3
 80043c8:	0c9b      	lsrs	r3, r3, #18
 80043ca:	3301      	adds	r3, #1
 80043cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043ce:	e002      	b.n	80043d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043d6:	4b38      	ldr	r3, [pc, #224]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043e2:	d102      	bne.n	80043ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f2      	bne.n	80043d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043ea:	4b33      	ldr	r3, [pc, #204]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043f6:	d158      	bne.n	80044aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e057      	b.n	80044ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043fc:	4b2e      	ldr	r3, [pc, #184]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004402:	4a2d      	ldr	r2, [pc, #180]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004404:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004408:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800440c:	e04d      	b.n	80044aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004414:	d141      	bne.n	800449a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004416:	4b28      	ldr	r3, [pc, #160]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800441e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004422:	d131      	bne.n	8004488 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004424:	4b24      	ldr	r3, [pc, #144]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004426:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800442a:	4a23      	ldr	r2, [pc, #140]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800442c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004430:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004434:	4b20      	ldr	r3, [pc, #128]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800443c:	4a1e      	ldr	r2, [pc, #120]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800443e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004442:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004444:	4b1d      	ldr	r3, [pc, #116]	@ (80044bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2232      	movs	r2, #50	@ 0x32
 800444a:	fb02 f303 	mul.w	r3, r2, r3
 800444e:	4a1c      	ldr	r2, [pc, #112]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004450:	fba2 2303 	umull	r2, r3, r2, r3
 8004454:	0c9b      	lsrs	r3, r3, #18
 8004456:	3301      	adds	r3, #1
 8004458:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800445a:	e002      	b.n	8004462 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	3b01      	subs	r3, #1
 8004460:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004462:	4b15      	ldr	r3, [pc, #84]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800446a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800446e:	d102      	bne.n	8004476 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f2      	bne.n	800445c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004476:	4b10      	ldr	r3, [pc, #64]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800447e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004482:	d112      	bne.n	80044aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e011      	b.n	80044ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004488:	4b0b      	ldr	r3, [pc, #44]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800448a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800448e:	4a0a      	ldr	r2, [pc, #40]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004494:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004498:	e007      	b.n	80044aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800449a:	4b07      	ldr	r3, [pc, #28]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044a2:	4a05      	ldr	r2, [pc, #20]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	40007000 	.word	0x40007000
 80044bc:	20000004 	.word	0x20000004
 80044c0:	431bde83 	.word	0x431bde83

080044c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80044c8:	4b05      	ldr	r3, [pc, #20]	@ (80044e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	4a04      	ldr	r2, [pc, #16]	@ (80044e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80044ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044d2:	6093      	str	r3, [r2, #8]
}
 80044d4:	bf00      	nop
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40007000 	.word	0x40007000

080044e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e2fe      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d075      	beq.n	80045ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004502:	4b97      	ldr	r3, [pc, #604]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
 800450a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800450c:	4b94      	ldr	r3, [pc, #592]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0303 	and.w	r3, r3, #3
 8004514:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	2b0c      	cmp	r3, #12
 800451a:	d102      	bne.n	8004522 <HAL_RCC_OscConfig+0x3e>
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	2b03      	cmp	r3, #3
 8004520:	d002      	beq.n	8004528 <HAL_RCC_OscConfig+0x44>
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	2b08      	cmp	r3, #8
 8004526:	d10b      	bne.n	8004540 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004528:	4b8d      	ldr	r3, [pc, #564]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d05b      	beq.n	80045ec <HAL_RCC_OscConfig+0x108>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d157      	bne.n	80045ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e2d9      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004548:	d106      	bne.n	8004558 <HAL_RCC_OscConfig+0x74>
 800454a:	4b85      	ldr	r3, [pc, #532]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a84      	ldr	r2, [pc, #528]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	e01d      	b.n	8004594 <HAL_RCC_OscConfig+0xb0>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004560:	d10c      	bne.n	800457c <HAL_RCC_OscConfig+0x98>
 8004562:	4b7f      	ldr	r3, [pc, #508]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a7e      	ldr	r2, [pc, #504]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004568:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	4b7c      	ldr	r3, [pc, #496]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a7b      	ldr	r2, [pc, #492]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	e00b      	b.n	8004594 <HAL_RCC_OscConfig+0xb0>
 800457c:	4b78      	ldr	r3, [pc, #480]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a77      	ldr	r2, [pc, #476]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004582:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	4b75      	ldr	r3, [pc, #468]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a74      	ldr	r2, [pc, #464]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 800458e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d013      	beq.n	80045c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fd facc 	bl	8001b38 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a4:	f7fd fac8 	bl	8001b38 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b64      	cmp	r3, #100	@ 0x64
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e29e      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045b6:	4b6a      	ldr	r3, [pc, #424]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCC_OscConfig+0xc0>
 80045c2:	e014      	b.n	80045ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fd fab8 	bl	8001b38 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045cc:	f7fd fab4 	bl	8001b38 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b64      	cmp	r3, #100	@ 0x64
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e28a      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045de:	4b60      	ldr	r3, [pc, #384]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0xe8>
 80045ea:	e000      	b.n	80045ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d075      	beq.n	80046e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045fa:	4b59      	ldr	r3, [pc, #356]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 030c 	and.w	r3, r3, #12
 8004602:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004604:	4b56      	ldr	r3, [pc, #344]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f003 0303 	and.w	r3, r3, #3
 800460c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	2b0c      	cmp	r3, #12
 8004612:	d102      	bne.n	800461a <HAL_RCC_OscConfig+0x136>
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	2b02      	cmp	r3, #2
 8004618:	d002      	beq.n	8004620 <HAL_RCC_OscConfig+0x13c>
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	2b04      	cmp	r3, #4
 800461e:	d11f      	bne.n	8004660 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004620:	4b4f      	ldr	r3, [pc, #316]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <HAL_RCC_OscConfig+0x154>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e25d      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004638:	4b49      	ldr	r3, [pc, #292]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	061b      	lsls	r3, r3, #24
 8004646:	4946      	ldr	r1, [pc, #280]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004648:	4313      	orrs	r3, r2
 800464a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800464c:	4b45      	ldr	r3, [pc, #276]	@ (8004764 <HAL_RCC_OscConfig+0x280>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4618      	mov	r0, r3
 8004652:	f7fd fa25 	bl	8001aa0 <HAL_InitTick>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d043      	beq.n	80046e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e249      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d023      	beq.n	80046b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004668:	4b3d      	ldr	r3, [pc, #244]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a3c      	ldr	r2, [pc, #240]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 800466e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004674:	f7fd fa60 	bl	8001b38 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800467c:	f7fd fa5c 	bl	8001b38 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e232      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800468e:	4b34      	ldr	r3, [pc, #208]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0f0      	beq.n	800467c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800469a:	4b31      	ldr	r3, [pc, #196]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	061b      	lsls	r3, r3, #24
 80046a8:	492d      	ldr	r1, [pc, #180]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	604b      	str	r3, [r1, #4]
 80046ae:	e01a      	b.n	80046e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a2a      	ldr	r2, [pc, #168]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 80046b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046bc:	f7fd fa3c 	bl	8001b38 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046c4:	f7fd fa38 	bl	8001b38 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e20e      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046d6:	4b22      	ldr	r3, [pc, #136]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1f0      	bne.n	80046c4 <HAL_RCC_OscConfig+0x1e0>
 80046e2:	e000      	b.n	80046e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d041      	beq.n	8004776 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d01c      	beq.n	8004734 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046fa:	4b19      	ldr	r3, [pc, #100]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 80046fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004700:	4a17      	ldr	r2, [pc, #92]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004702:	f043 0301 	orr.w	r3, r3, #1
 8004706:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470a:	f7fd fa15 	bl	8001b38 <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004712:	f7fd fa11 	bl	8001b38 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e1e7      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004724:	4b0e      	ldr	r3, [pc, #56]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004726:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0ef      	beq.n	8004712 <HAL_RCC_OscConfig+0x22e>
 8004732:	e020      	b.n	8004776 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004734:	4b0a      	ldr	r3, [pc, #40]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800473a:	4a09      	ldr	r2, [pc, #36]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 800473c:	f023 0301 	bic.w	r3, r3, #1
 8004740:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004744:	f7fd f9f8 	bl	8001b38 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800474a:	e00d      	b.n	8004768 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800474c:	f7fd f9f4 	bl	8001b38 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d906      	bls.n	8004768 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e1ca      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
 800475e:	bf00      	nop
 8004760:	40021000 	.word	0x40021000
 8004764:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004768:	4b8c      	ldr	r3, [pc, #560]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 800476a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1ea      	bne.n	800474c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 80a6 	beq.w	80048d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004784:	2300      	movs	r3, #0
 8004786:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004788:	4b84      	ldr	r3, [pc, #528]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 800478a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800478c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_RCC_OscConfig+0x2b4>
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <HAL_RCC_OscConfig+0x2b6>
 8004798:	2300      	movs	r3, #0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00d      	beq.n	80047ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800479e:	4b7f      	ldr	r3, [pc, #508]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 80047a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a2:	4a7e      	ldr	r2, [pc, #504]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 80047a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80047aa:	4b7c      	ldr	r3, [pc, #496]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 80047ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80047b6:	2301      	movs	r3, #1
 80047b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ba:	4b79      	ldr	r3, [pc, #484]	@ (80049a0 <HAL_RCC_OscConfig+0x4bc>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d118      	bne.n	80047f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047c6:	4b76      	ldr	r3, [pc, #472]	@ (80049a0 <HAL_RCC_OscConfig+0x4bc>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a75      	ldr	r2, [pc, #468]	@ (80049a0 <HAL_RCC_OscConfig+0x4bc>)
 80047cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047d2:	f7fd f9b1 	bl	8001b38 <HAL_GetTick>
 80047d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047d8:	e008      	b.n	80047ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047da:	f7fd f9ad 	bl	8001b38 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e183      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ec:	4b6c      	ldr	r3, [pc, #432]	@ (80049a0 <HAL_RCC_OscConfig+0x4bc>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0f0      	beq.n	80047da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d108      	bne.n	8004812 <HAL_RCC_OscConfig+0x32e>
 8004800:	4b66      	ldr	r3, [pc, #408]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 8004802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004806:	4a65      	ldr	r2, [pc, #404]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 8004808:	f043 0301 	orr.w	r3, r3, #1
 800480c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004810:	e024      	b.n	800485c <HAL_RCC_OscConfig+0x378>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b05      	cmp	r3, #5
 8004818:	d110      	bne.n	800483c <HAL_RCC_OscConfig+0x358>
 800481a:	4b60      	ldr	r3, [pc, #384]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 800481c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004820:	4a5e      	ldr	r2, [pc, #376]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 8004822:	f043 0304 	orr.w	r3, r3, #4
 8004826:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800482a:	4b5c      	ldr	r3, [pc, #368]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 800482c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004830:	4a5a      	ldr	r2, [pc, #360]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 8004832:	f043 0301 	orr.w	r3, r3, #1
 8004836:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800483a:	e00f      	b.n	800485c <HAL_RCC_OscConfig+0x378>
 800483c:	4b57      	ldr	r3, [pc, #348]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 800483e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004842:	4a56      	ldr	r2, [pc, #344]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 8004844:	f023 0301 	bic.w	r3, r3, #1
 8004848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800484c:	4b53      	ldr	r3, [pc, #332]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004852:	4a52      	ldr	r2, [pc, #328]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 8004854:	f023 0304 	bic.w	r3, r3, #4
 8004858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d016      	beq.n	8004892 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004864:	f7fd f968 	bl	8001b38 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800486a:	e00a      	b.n	8004882 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486c:	f7fd f964 	bl	8001b38 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e138      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004882:	4b46      	ldr	r3, [pc, #280]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0ed      	beq.n	800486c <HAL_RCC_OscConfig+0x388>
 8004890:	e015      	b.n	80048be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004892:	f7fd f951 	bl	8001b38 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004898:	e00a      	b.n	80048b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489a:	f7fd f94d 	bl	8001b38 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e121      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048b0:	4b3a      	ldr	r3, [pc, #232]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 80048b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1ed      	bne.n	800489a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048be:	7ffb      	ldrb	r3, [r7, #31]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d105      	bne.n	80048d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c4:	4b35      	ldr	r3, [pc, #212]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 80048c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c8:	4a34      	ldr	r2, [pc, #208]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 80048ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048ce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d03c      	beq.n	8004956 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d01c      	beq.n	800491e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048e4:	4b2d      	ldr	r3, [pc, #180]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 80048e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048ea:	4a2c      	ldr	r2, [pc, #176]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f4:	f7fd f920 	bl	8001b38 <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048fc:	f7fd f91c 	bl	8001b38 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e0f2      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800490e:	4b23      	ldr	r3, [pc, #140]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 8004910:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0ef      	beq.n	80048fc <HAL_RCC_OscConfig+0x418>
 800491c:	e01b      	b.n	8004956 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800491e:	4b1f      	ldr	r3, [pc, #124]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 8004920:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004924:	4a1d      	ldr	r2, [pc, #116]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 8004926:	f023 0301 	bic.w	r3, r3, #1
 800492a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492e:	f7fd f903 	bl	8001b38 <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004936:	f7fd f8ff 	bl	8001b38 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e0d5      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004948:	4b14      	ldr	r3, [pc, #80]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 800494a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1ef      	bne.n	8004936 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 80c9 	beq.w	8004af2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004960:	4b0e      	ldr	r3, [pc, #56]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f003 030c 	and.w	r3, r3, #12
 8004968:	2b0c      	cmp	r3, #12
 800496a:	f000 8083 	beq.w	8004a74 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	2b02      	cmp	r3, #2
 8004974:	d15e      	bne.n	8004a34 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004976:	4b09      	ldr	r3, [pc, #36]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a08      	ldr	r2, [pc, #32]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 800497c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004982:	f7fd f8d9 	bl	8001b38 <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004988:	e00c      	b.n	80049a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800498a:	f7fd f8d5 	bl	8001b38 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d905      	bls.n	80049a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e0ab      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
 800499c:	40021000 	.word	0x40021000
 80049a0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049a4:	4b55      	ldr	r3, [pc, #340]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1ec      	bne.n	800498a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049b0:	4b52      	ldr	r3, [pc, #328]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 80049b2:	68da      	ldr	r2, [r3, #12]
 80049b4:	4b52      	ldr	r3, [pc, #328]	@ (8004b00 <HAL_RCC_OscConfig+0x61c>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6a11      	ldr	r1, [r2, #32]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049c0:	3a01      	subs	r2, #1
 80049c2:	0112      	lsls	r2, r2, #4
 80049c4:	4311      	orrs	r1, r2
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80049ca:	0212      	lsls	r2, r2, #8
 80049cc:	4311      	orrs	r1, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80049d2:	0852      	lsrs	r2, r2, #1
 80049d4:	3a01      	subs	r2, #1
 80049d6:	0552      	lsls	r2, r2, #21
 80049d8:	4311      	orrs	r1, r2
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80049de:	0852      	lsrs	r2, r2, #1
 80049e0:	3a01      	subs	r2, #1
 80049e2:	0652      	lsls	r2, r2, #25
 80049e4:	4311      	orrs	r1, r2
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80049ea:	06d2      	lsls	r2, r2, #27
 80049ec:	430a      	orrs	r2, r1
 80049ee:	4943      	ldr	r1, [pc, #268]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049f4:	4b41      	ldr	r3, [pc, #260]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a40      	ldr	r2, [pc, #256]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 80049fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a00:	4b3e      	ldr	r3, [pc, #248]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	4a3d      	ldr	r2, [pc, #244]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 8004a06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a0a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0c:	f7fd f894 	bl	8001b38 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a14:	f7fd f890 	bl	8001b38 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e066      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a26:	4b35      	ldr	r3, [pc, #212]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0f0      	beq.n	8004a14 <HAL_RCC_OscConfig+0x530>
 8004a32:	e05e      	b.n	8004af2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a34:	4b31      	ldr	r3, [pc, #196]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a30      	ldr	r2, [pc, #192]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 8004a3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a40:	f7fd f87a 	bl	8001b38 <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a48:	f7fd f876 	bl	8001b38 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e04c      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a5a:	4b28      	ldr	r3, [pc, #160]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1f0      	bne.n	8004a48 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004a66:	4b25      	ldr	r3, [pc, #148]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	4924      	ldr	r1, [pc, #144]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 8004a6c:	4b25      	ldr	r3, [pc, #148]	@ (8004b04 <HAL_RCC_OscConfig+0x620>)
 8004a6e:	4013      	ands	r3, r2
 8004a70:	60cb      	str	r3, [r1, #12]
 8004a72:	e03e      	b.n	8004af2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d101      	bne.n	8004a80 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e039      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004a80:	4b1e      	ldr	r3, [pc, #120]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f003 0203 	and.w	r2, r3, #3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d12c      	bne.n	8004aee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d123      	bne.n	8004aee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d11b      	bne.n	8004aee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d113      	bne.n	8004aee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad0:	085b      	lsrs	r3, r3, #1
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d109      	bne.n	8004aee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae4:	085b      	lsrs	r3, r3, #1
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d001      	beq.n	8004af2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3720      	adds	r7, #32
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40021000 	.word	0x40021000
 8004b00:	019f800c 	.word	0x019f800c
 8004b04:	feeefffc 	.word	0xfeeefffc

08004b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b12:	2300      	movs	r3, #0
 8004b14:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e11e      	b.n	8004d5e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b20:	4b91      	ldr	r3, [pc, #580]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 030f 	and.w	r3, r3, #15
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d910      	bls.n	8004b50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2e:	4b8e      	ldr	r3, [pc, #568]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f023 020f 	bic.w	r2, r3, #15
 8004b36:	498c      	ldr	r1, [pc, #560]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3e:	4b8a      	ldr	r3, [pc, #552]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d001      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e106      	b.n	8004d5e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d073      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b03      	cmp	r3, #3
 8004b62:	d129      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b64:	4b81      	ldr	r3, [pc, #516]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e0f4      	b.n	8004d5e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004b74:	f000 f99e 	bl	8004eb4 <RCC_GetSysClockFreqFromPLLSource>
 8004b78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	4a7c      	ldr	r2, [pc, #496]	@ (8004d70 <HAL_RCC_ClockConfig+0x268>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d93f      	bls.n	8004c02 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b82:	4b7a      	ldr	r3, [pc, #488]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d009      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d033      	beq.n	8004c02 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d12f      	bne.n	8004c02 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ba2:	4b72      	ldr	r3, [pc, #456]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004baa:	4a70      	ldr	r2, [pc, #448]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004bac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bb0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004bb2:	2380      	movs	r3, #128	@ 0x80
 8004bb4:	617b      	str	r3, [r7, #20]
 8004bb6:	e024      	b.n	8004c02 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d107      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bc0:	4b6a      	ldr	r3, [pc, #424]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d109      	bne.n	8004be0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0c6      	b.n	8004d5e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bd0:	4b66      	ldr	r3, [pc, #408]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0be      	b.n	8004d5e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004be0:	f000 f8ce 	bl	8004d80 <HAL_RCC_GetSysClockFreq>
 8004be4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	4a61      	ldr	r2, [pc, #388]	@ (8004d70 <HAL_RCC_ClockConfig+0x268>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d909      	bls.n	8004c02 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004bee:	4b5f      	ldr	r3, [pc, #380]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bf6:	4a5d      	ldr	r2, [pc, #372]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bfc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004bfe:	2380      	movs	r3, #128	@ 0x80
 8004c00:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c02:	4b5a      	ldr	r3, [pc, #360]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f023 0203 	bic.w	r2, r3, #3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	4957      	ldr	r1, [pc, #348]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c14:	f7fc ff90 	bl	8001b38 <HAL_GetTick>
 8004c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c1a:	e00a      	b.n	8004c32 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c1c:	f7fc ff8c 	bl	8001b38 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e095      	b.n	8004d5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c32:	4b4e      	ldr	r3, [pc, #312]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 020c 	and.w	r2, r3, #12
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d1eb      	bne.n	8004c1c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d023      	beq.n	8004c98 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c5c:	4b43      	ldr	r3, [pc, #268]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	4a42      	ldr	r2, [pc, #264]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004c62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c66:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d007      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004c74:	4b3d      	ldr	r3, [pc, #244]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004c7c:	4a3b      	ldr	r2, [pc, #236]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004c7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c84:	4b39      	ldr	r3, [pc, #228]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	4936      	ldr	r1, [pc, #216]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
 8004c96:	e008      	b.n	8004caa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2b80      	cmp	r3, #128	@ 0x80
 8004c9c:	d105      	bne.n	8004caa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c9e:	4b33      	ldr	r3, [pc, #204]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	4a32      	ldr	r2, [pc, #200]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004ca4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ca8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004caa:	4b2f      	ldr	r3, [pc, #188]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d21d      	bcs.n	8004cf4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f023 020f 	bic.w	r2, r3, #15
 8004cc0:	4929      	ldr	r1, [pc, #164]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004cc8:	f7fc ff36 	bl	8001b38 <HAL_GetTick>
 8004ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cce:	e00a      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cd0:	f7fc ff32 	bl	8001b38 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e03b      	b.n	8004d5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce6:	4b20      	ldr	r3, [pc, #128]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d1ed      	bne.n	8004cd0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d008      	beq.n	8004d12 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d00:	4b1a      	ldr	r3, [pc, #104]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	4917      	ldr	r1, [pc, #92]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0308 	and.w	r3, r3, #8
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d009      	beq.n	8004d32 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d1e:	4b13      	ldr	r3, [pc, #76]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	490f      	ldr	r1, [pc, #60]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d32:	f000 f825 	bl	8004d80 <HAL_RCC_GetSysClockFreq>
 8004d36:	4602      	mov	r2, r0
 8004d38:	4b0c      	ldr	r3, [pc, #48]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	091b      	lsrs	r3, r3, #4
 8004d3e:	f003 030f 	and.w	r3, r3, #15
 8004d42:	490c      	ldr	r1, [pc, #48]	@ (8004d74 <HAL_RCC_ClockConfig+0x26c>)
 8004d44:	5ccb      	ldrb	r3, [r1, r3]
 8004d46:	f003 031f 	and.w	r3, r3, #31
 8004d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8004d78 <HAL_RCC_ClockConfig+0x270>)
 8004d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004d52:	4b0a      	ldr	r3, [pc, #40]	@ (8004d7c <HAL_RCC_ClockConfig+0x274>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fc fea2 	bl	8001aa0 <HAL_InitTick>
 8004d5c:	4603      	mov	r3, r0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40022000 	.word	0x40022000
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	04c4b400 	.word	0x04c4b400
 8004d74:	080095a8 	.word	0x080095a8
 8004d78:	20000004 	.word	0x20000004
 8004d7c:	20000008 	.word	0x20000008

08004d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004d86:	4b2c      	ldr	r3, [pc, #176]	@ (8004e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d102      	bne.n	8004d98 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d92:	4b2a      	ldr	r3, [pc, #168]	@ (8004e3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d94:	613b      	str	r3, [r7, #16]
 8004d96:	e047      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004d98:	4b27      	ldr	r3, [pc, #156]	@ (8004e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f003 030c 	and.w	r3, r3, #12
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d102      	bne.n	8004daa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004da4:	4b26      	ldr	r3, [pc, #152]	@ (8004e40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004da6:	613b      	str	r3, [r7, #16]
 8004da8:	e03e      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004daa:	4b23      	ldr	r3, [pc, #140]	@ (8004e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 030c 	and.w	r3, r3, #12
 8004db2:	2b0c      	cmp	r3, #12
 8004db4:	d136      	bne.n	8004e24 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004db6:	4b20      	ldr	r3, [pc, #128]	@ (8004e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8004e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	091b      	lsrs	r3, r3, #4
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	3301      	adds	r3, #1
 8004dcc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b03      	cmp	r3, #3
 8004dd2:	d10c      	bne.n	8004dee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dd4:	4a1a      	ldr	r2, [pc, #104]	@ (8004e40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ddc:	4a16      	ldr	r2, [pc, #88]	@ (8004e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dde:	68d2      	ldr	r2, [r2, #12]
 8004de0:	0a12      	lsrs	r2, r2, #8
 8004de2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004de6:	fb02 f303 	mul.w	r3, r2, r3
 8004dea:	617b      	str	r3, [r7, #20]
      break;
 8004dec:	e00c      	b.n	8004e08 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dee:	4a13      	ldr	r2, [pc, #76]	@ (8004e3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df6:	4a10      	ldr	r2, [pc, #64]	@ (8004e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004df8:	68d2      	ldr	r2, [r2, #12]
 8004dfa:	0a12      	lsrs	r2, r2, #8
 8004dfc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e00:	fb02 f303 	mul.w	r3, r2, r3
 8004e04:	617b      	str	r3, [r7, #20]
      break;
 8004e06:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e08:	4b0b      	ldr	r3, [pc, #44]	@ (8004e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	0e5b      	lsrs	r3, r3, #25
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	3301      	adds	r3, #1
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e20:	613b      	str	r3, [r7, #16]
 8004e22:	e001      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004e28:	693b      	ldr	r3, [r7, #16]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	371c      	adds	r7, #28
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	00f42400 	.word	0x00f42400
 8004e40:	016e3600 	.word	0x016e3600

08004e44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e48:	4b03      	ldr	r3, [pc, #12]	@ (8004e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	20000004 	.word	0x20000004

08004e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e60:	f7ff fff0 	bl	8004e44 <HAL_RCC_GetHCLKFreq>
 8004e64:	4602      	mov	r2, r0
 8004e66:	4b06      	ldr	r3, [pc, #24]	@ (8004e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	0a1b      	lsrs	r3, r3, #8
 8004e6c:	f003 0307 	and.w	r3, r3, #7
 8004e70:	4904      	ldr	r1, [pc, #16]	@ (8004e84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e72:	5ccb      	ldrb	r3, [r1, r3]
 8004e74:	f003 031f 	and.w	r3, r3, #31
 8004e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40021000 	.word	0x40021000
 8004e84:	080095b8 	.word	0x080095b8

08004e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e8c:	f7ff ffda 	bl	8004e44 <HAL_RCC_GetHCLKFreq>
 8004e90:	4602      	mov	r2, r0
 8004e92:	4b06      	ldr	r3, [pc, #24]	@ (8004eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	0adb      	lsrs	r3, r3, #11
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	4904      	ldr	r1, [pc, #16]	@ (8004eb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ea0:	f003 031f 	and.w	r3, r3, #31
 8004ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40021000 	.word	0x40021000
 8004eb0:	080095b8 	.word	0x080095b8

08004eb4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b087      	sub	sp, #28
 8004eb8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004eba:	4b1e      	ldr	r3, [pc, #120]	@ (8004f34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	091b      	lsrs	r3, r3, #4
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	3301      	adds	r3, #1
 8004ed0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d10c      	bne.n	8004ef2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ed8:	4a17      	ldr	r2, [pc, #92]	@ (8004f38 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee0:	4a14      	ldr	r2, [pc, #80]	@ (8004f34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ee2:	68d2      	ldr	r2, [r2, #12]
 8004ee4:	0a12      	lsrs	r2, r2, #8
 8004ee6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004eea:	fb02 f303 	mul.w	r3, r2, r3
 8004eee:	617b      	str	r3, [r7, #20]
    break;
 8004ef0:	e00c      	b.n	8004f0c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ef2:	4a12      	ldr	r2, [pc, #72]	@ (8004f3c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efa:	4a0e      	ldr	r2, [pc, #56]	@ (8004f34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004efc:	68d2      	ldr	r2, [r2, #12]
 8004efe:	0a12      	lsrs	r2, r2, #8
 8004f00:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f04:	fb02 f303 	mul.w	r3, r2, r3
 8004f08:	617b      	str	r3, [r7, #20]
    break;
 8004f0a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f0c:	4b09      	ldr	r3, [pc, #36]	@ (8004f34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	0e5b      	lsrs	r3, r3, #25
 8004f12:	f003 0303 	and.w	r3, r3, #3
 8004f16:	3301      	adds	r3, #1
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f24:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004f26:	687b      	ldr	r3, [r7, #4]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	371c      	adds	r7, #28
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	40021000 	.word	0x40021000
 8004f38:	016e3600 	.word	0x016e3600
 8004f3c:	00f42400 	.word	0x00f42400

08004f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f48:	2300      	movs	r3, #0
 8004f4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 8098 	beq.w	800508e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f62:	4b43      	ldr	r3, [pc, #268]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10d      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f6e:	4b40      	ldr	r3, [pc, #256]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f72:	4a3f      	ldr	r2, [pc, #252]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f78:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f7a:	4b3d      	ldr	r3, [pc, #244]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f82:	60bb      	str	r3, [r7, #8]
 8004f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f86:	2301      	movs	r3, #1
 8004f88:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f8a:	4b3a      	ldr	r3, [pc, #232]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a39      	ldr	r2, [pc, #228]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f96:	f7fc fdcf 	bl	8001b38 <HAL_GetTick>
 8004f9a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f9c:	e009      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f9e:	f7fc fdcb 	bl	8001b38 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d902      	bls.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	74fb      	strb	r3, [r7, #19]
        break;
 8004fb0:	e005      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fb2:	4b30      	ldr	r3, [pc, #192]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0ef      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004fbe:	7cfb      	ldrb	r3, [r7, #19]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d159      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fc4:	4b2a      	ldr	r3, [pc, #168]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d01e      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d019      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004fe0:	4b23      	ldr	r3, [pc, #140]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fe6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fec:	4b20      	ldr	r3, [pc, #128]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff2:	4a1f      	ldr	r2, [pc, #124]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ff8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005002:	4a1b      	ldr	r2, [pc, #108]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005004:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005008:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800500c:	4a18      	ldr	r2, [pc, #96]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d016      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501e:	f7fc fd8b 	bl	8001b38 <HAL_GetTick>
 8005022:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005024:	e00b      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005026:	f7fc fd87 	bl	8001b38 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005034:	4293      	cmp	r3, r2
 8005036:	d902      	bls.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	74fb      	strb	r3, [r7, #19]
            break;
 800503c:	e006      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800503e:	4b0c      	ldr	r3, [pc, #48]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0ec      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800504c:	7cfb      	ldrb	r3, [r7, #19]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10b      	bne.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005052:	4b07      	ldr	r3, [pc, #28]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005058:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005060:	4903      	ldr	r1, [pc, #12]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005062:	4313      	orrs	r3, r2
 8005064:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005068:	e008      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800506a:	7cfb      	ldrb	r3, [r7, #19]
 800506c:	74bb      	strb	r3, [r7, #18]
 800506e:	e005      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005070:	40021000 	.word	0x40021000
 8005074:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005078:	7cfb      	ldrb	r3, [r7, #19]
 800507a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800507c:	7c7b      	ldrb	r3, [r7, #17]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d105      	bne.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005082:	4ba7      	ldr	r3, [pc, #668]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005086:	4aa6      	ldr	r2, [pc, #664]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005088:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800508c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800509a:	4ba1      	ldr	r3, [pc, #644]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800509c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a0:	f023 0203 	bic.w	r2, r3, #3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	499d      	ldr	r1, [pc, #628]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050bc:	4b98      	ldr	r3, [pc, #608]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c2:	f023 020c 	bic.w	r2, r3, #12
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	4995      	ldr	r1, [pc, #596]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0304 	and.w	r3, r3, #4
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050de:	4b90      	ldr	r3, [pc, #576]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	498c      	ldr	r1, [pc, #560]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0308 	and.w	r3, r3, #8
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00a      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005100:	4b87      	ldr	r3, [pc, #540]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005106:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	4984      	ldr	r1, [pc, #528]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005110:	4313      	orrs	r3, r2
 8005112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0310 	and.w	r3, r3, #16
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005122:	4b7f      	ldr	r3, [pc, #508]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005128:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	497b      	ldr	r1, [pc, #492]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005132:	4313      	orrs	r3, r2
 8005134:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0320 	and.w	r3, r3, #32
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00a      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005144:	4b76      	ldr	r3, [pc, #472]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800514a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	4973      	ldr	r1, [pc, #460]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005154:	4313      	orrs	r3, r2
 8005156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005166:	4b6e      	ldr	r3, [pc, #440]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800516c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	69db      	ldr	r3, [r3, #28]
 8005174:	496a      	ldr	r1, [pc, #424]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005176:	4313      	orrs	r3, r2
 8005178:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005188:	4b65      	ldr	r3, [pc, #404]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800518a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800518e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	4962      	ldr	r1, [pc, #392]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005198:	4313      	orrs	r3, r2
 800519a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051aa:	4b5d      	ldr	r3, [pc, #372]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b8:	4959      	ldr	r1, [pc, #356]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051cc:	4b54      	ldr	r3, [pc, #336]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051d2:	f023 0203 	bic.w	r2, r3, #3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051da:	4951      	ldr	r1, [pc, #324]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051ee:	4b4c      	ldr	r3, [pc, #304]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fc:	4948      	ldr	r1, [pc, #288]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800520c:	2b00      	cmp	r3, #0
 800520e:	d015      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005210:	4b43      	ldr	r3, [pc, #268]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005216:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800521e:	4940      	ldr	r1, [pc, #256]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800522a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800522e:	d105      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005230:	4b3b      	ldr	r3, [pc, #236]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	4a3a      	ldr	r2, [pc, #232]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005236:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800523a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005244:	2b00      	cmp	r3, #0
 8005246:	d015      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005248:	4b35      	ldr	r3, [pc, #212]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005256:	4932      	ldr	r1, [pc, #200]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005262:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005266:	d105      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005268:	4b2d      	ldr	r3, [pc, #180]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	4a2c      	ldr	r2, [pc, #176]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800526e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005272:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d015      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005280:	4b27      	ldr	r3, [pc, #156]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005286:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800528e:	4924      	ldr	r1, [pc, #144]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005290:	4313      	orrs	r3, r2
 8005292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800529a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800529e:	d105      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052a0:	4b1f      	ldr	r3, [pc, #124]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4a1e      	ldr	r2, [pc, #120]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d015      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052b8:	4b19      	ldr	r3, [pc, #100]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052c6:	4916      	ldr	r1, [pc, #88]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052d6:	d105      	bne.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052d8:	4b11      	ldr	r3, [pc, #68]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	4a10      	ldr	r2, [pc, #64]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d019      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fe:	4908      	ldr	r1, [pc, #32]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005300:	4313      	orrs	r3, r2
 8005302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800530e:	d109      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005310:	4b03      	ldr	r3, [pc, #12]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	4a02      	ldr	r2, [pc, #8]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005316:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800531a:	60d3      	str	r3, [r2, #12]
 800531c:	e002      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800531e:	bf00      	nop
 8005320:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d015      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005330:	4b29      	ldr	r3, [pc, #164]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005336:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800533e:	4926      	ldr	r1, [pc, #152]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005340:	4313      	orrs	r3, r2
 8005342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800534a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800534e:	d105      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005350:	4b21      	ldr	r3, [pc, #132]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	4a20      	ldr	r2, [pc, #128]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005356:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800535a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d015      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005368:	4b1b      	ldr	r3, [pc, #108]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800536a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800536e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005376:	4918      	ldr	r1, [pc, #96]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005378:	4313      	orrs	r3, r2
 800537a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005386:	d105      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005388:	4b13      	ldr	r3, [pc, #76]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	4a12      	ldr	r2, [pc, #72]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800538e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005392:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d015      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80053a0:	4b0d      	ldr	r3, [pc, #52]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053ae:	490a      	ldr	r1, [pc, #40]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053be:	d105      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053c0:	4b05      	ldr	r3, [pc, #20]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	4a04      	ldr	r2, [pc, #16]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80053cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	40021000 	.word	0x40021000

080053dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e049      	b.n	8005482 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d106      	bne.n	8005408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7fc f966 	bl	80016d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3304      	adds	r3, #4
 8005418:	4619      	mov	r1, r3
 800541a:	4610      	mov	r0, r2
 800541c:	f000 ff68 	bl	80062f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
	...

0800548c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b01      	cmp	r3, #1
 800549e:	d001      	beq.n	80054a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e04c      	b.n	800553e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a26      	ldr	r2, [pc, #152]	@ (800554c <HAL_TIM_Base_Start+0xc0>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d022      	beq.n	80054fc <HAL_TIM_Base_Start+0x70>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054be:	d01d      	beq.n	80054fc <HAL_TIM_Base_Start+0x70>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a22      	ldr	r2, [pc, #136]	@ (8005550 <HAL_TIM_Base_Start+0xc4>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d018      	beq.n	80054fc <HAL_TIM_Base_Start+0x70>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a21      	ldr	r2, [pc, #132]	@ (8005554 <HAL_TIM_Base_Start+0xc8>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d013      	beq.n	80054fc <HAL_TIM_Base_Start+0x70>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a1f      	ldr	r2, [pc, #124]	@ (8005558 <HAL_TIM_Base_Start+0xcc>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00e      	beq.n	80054fc <HAL_TIM_Base_Start+0x70>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a1e      	ldr	r2, [pc, #120]	@ (800555c <HAL_TIM_Base_Start+0xd0>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d009      	beq.n	80054fc <HAL_TIM_Base_Start+0x70>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a1c      	ldr	r2, [pc, #112]	@ (8005560 <HAL_TIM_Base_Start+0xd4>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d004      	beq.n	80054fc <HAL_TIM_Base_Start+0x70>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005564 <HAL_TIM_Base_Start+0xd8>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d115      	bne.n	8005528 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689a      	ldr	r2, [r3, #8]
 8005502:	4b19      	ldr	r3, [pc, #100]	@ (8005568 <HAL_TIM_Base_Start+0xdc>)
 8005504:	4013      	ands	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b06      	cmp	r3, #6
 800550c:	d015      	beq.n	800553a <HAL_TIM_Base_Start+0xae>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005514:	d011      	beq.n	800553a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f042 0201 	orr.w	r2, r2, #1
 8005524:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005526:	e008      	b.n	800553a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0201 	orr.w	r2, r2, #1
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	e000      	b.n	800553c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800553a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	40012c00 	.word	0x40012c00
 8005550:	40000400 	.word	0x40000400
 8005554:	40000800 	.word	0x40000800
 8005558:	40000c00 	.word	0x40000c00
 800555c:	40013400 	.word	0x40013400
 8005560:	40014000 	.word	0x40014000
 8005564:	40015000 	.word	0x40015000
 8005568:	00010007 	.word	0x00010007

0800556c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b01      	cmp	r3, #1
 800557e:	d001      	beq.n	8005584 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e054      	b.n	800562e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68da      	ldr	r2, [r3, #12]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0201 	orr.w	r2, r2, #1
 800559a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a26      	ldr	r2, [pc, #152]	@ (800563c <HAL_TIM_Base_Start_IT+0xd0>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d022      	beq.n	80055ec <HAL_TIM_Base_Start_IT+0x80>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055ae:	d01d      	beq.n	80055ec <HAL_TIM_Base_Start_IT+0x80>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a22      	ldr	r2, [pc, #136]	@ (8005640 <HAL_TIM_Base_Start_IT+0xd4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d018      	beq.n	80055ec <HAL_TIM_Base_Start_IT+0x80>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a21      	ldr	r2, [pc, #132]	@ (8005644 <HAL_TIM_Base_Start_IT+0xd8>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d013      	beq.n	80055ec <HAL_TIM_Base_Start_IT+0x80>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a1f      	ldr	r2, [pc, #124]	@ (8005648 <HAL_TIM_Base_Start_IT+0xdc>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00e      	beq.n	80055ec <HAL_TIM_Base_Start_IT+0x80>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a1e      	ldr	r2, [pc, #120]	@ (800564c <HAL_TIM_Base_Start_IT+0xe0>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d009      	beq.n	80055ec <HAL_TIM_Base_Start_IT+0x80>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a1c      	ldr	r2, [pc, #112]	@ (8005650 <HAL_TIM_Base_Start_IT+0xe4>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d004      	beq.n	80055ec <HAL_TIM_Base_Start_IT+0x80>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a1b      	ldr	r2, [pc, #108]	@ (8005654 <HAL_TIM_Base_Start_IT+0xe8>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d115      	bne.n	8005618 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	4b19      	ldr	r3, [pc, #100]	@ (8005658 <HAL_TIM_Base_Start_IT+0xec>)
 80055f4:	4013      	ands	r3, r2
 80055f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2b06      	cmp	r3, #6
 80055fc:	d015      	beq.n	800562a <HAL_TIM_Base_Start_IT+0xbe>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005604:	d011      	beq.n	800562a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f042 0201 	orr.w	r2, r2, #1
 8005614:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005616:	e008      	b.n	800562a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0201 	orr.w	r2, r2, #1
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	e000      	b.n	800562c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800562a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	40012c00 	.word	0x40012c00
 8005640:	40000400 	.word	0x40000400
 8005644:	40000800 	.word	0x40000800
 8005648:	40000c00 	.word	0x40000c00
 800564c:	40013400 	.word	0x40013400
 8005650:	40014000 	.word	0x40014000
 8005654:	40015000 	.word	0x40015000
 8005658:	00010007 	.word	0x00010007

0800565c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e049      	b.n	8005702 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d106      	bne.n	8005688 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f841 	bl	800570a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	3304      	adds	r3, #4
 8005698:	4619      	mov	r1, r3
 800569a:	4610      	mov	r0, r2
 800569c:	f000 fe28 	bl	80062f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
	...

08005720 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d109      	bne.n	8005744 <HAL_TIM_PWM_Start+0x24>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b01      	cmp	r3, #1
 800573a:	bf14      	ite	ne
 800573c:	2301      	movne	r3, #1
 800573e:	2300      	moveq	r3, #0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	e03c      	b.n	80057be <HAL_TIM_PWM_Start+0x9e>
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	2b04      	cmp	r3, #4
 8005748:	d109      	bne.n	800575e <HAL_TIM_PWM_Start+0x3e>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b01      	cmp	r3, #1
 8005754:	bf14      	ite	ne
 8005756:	2301      	movne	r3, #1
 8005758:	2300      	moveq	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	e02f      	b.n	80057be <HAL_TIM_PWM_Start+0x9e>
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b08      	cmp	r3, #8
 8005762:	d109      	bne.n	8005778 <HAL_TIM_PWM_Start+0x58>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b01      	cmp	r3, #1
 800576e:	bf14      	ite	ne
 8005770:	2301      	movne	r3, #1
 8005772:	2300      	moveq	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	e022      	b.n	80057be <HAL_TIM_PWM_Start+0x9e>
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2b0c      	cmp	r3, #12
 800577c:	d109      	bne.n	8005792 <HAL_TIM_PWM_Start+0x72>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b01      	cmp	r3, #1
 8005788:	bf14      	ite	ne
 800578a:	2301      	movne	r3, #1
 800578c:	2300      	moveq	r3, #0
 800578e:	b2db      	uxtb	r3, r3
 8005790:	e015      	b.n	80057be <HAL_TIM_PWM_Start+0x9e>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b10      	cmp	r3, #16
 8005796:	d109      	bne.n	80057ac <HAL_TIM_PWM_Start+0x8c>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	bf14      	ite	ne
 80057a4:	2301      	movne	r3, #1
 80057a6:	2300      	moveq	r3, #0
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	e008      	b.n	80057be <HAL_TIM_PWM_Start+0x9e>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	bf14      	ite	ne
 80057b8:	2301      	movne	r3, #1
 80057ba:	2300      	moveq	r3, #0
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d001      	beq.n	80057c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e0a6      	b.n	8005914 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d104      	bne.n	80057d6 <HAL_TIM_PWM_Start+0xb6>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057d4:	e023      	b.n	800581e <HAL_TIM_PWM_Start+0xfe>
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b04      	cmp	r3, #4
 80057da:	d104      	bne.n	80057e6 <HAL_TIM_PWM_Start+0xc6>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057e4:	e01b      	b.n	800581e <HAL_TIM_PWM_Start+0xfe>
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	d104      	bne.n	80057f6 <HAL_TIM_PWM_Start+0xd6>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057f4:	e013      	b.n	800581e <HAL_TIM_PWM_Start+0xfe>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b0c      	cmp	r3, #12
 80057fa:	d104      	bne.n	8005806 <HAL_TIM_PWM_Start+0xe6>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005804:	e00b      	b.n	800581e <HAL_TIM_PWM_Start+0xfe>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b10      	cmp	r3, #16
 800580a:	d104      	bne.n	8005816 <HAL_TIM_PWM_Start+0xf6>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2202      	movs	r2, #2
 8005810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005814:	e003      	b.n	800581e <HAL_TIM_PWM_Start+0xfe>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2202      	movs	r2, #2
 800581a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2201      	movs	r2, #1
 8005824:	6839      	ldr	r1, [r7, #0]
 8005826:	4618      	mov	r0, r3
 8005828:	f001 f9dc 	bl	8006be4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a3a      	ldr	r2, [pc, #232]	@ (800591c <HAL_TIM_PWM_Start+0x1fc>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d018      	beq.n	8005868 <HAL_TIM_PWM_Start+0x148>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a39      	ldr	r2, [pc, #228]	@ (8005920 <HAL_TIM_PWM_Start+0x200>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d013      	beq.n	8005868 <HAL_TIM_PWM_Start+0x148>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a37      	ldr	r2, [pc, #220]	@ (8005924 <HAL_TIM_PWM_Start+0x204>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d00e      	beq.n	8005868 <HAL_TIM_PWM_Start+0x148>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a36      	ldr	r2, [pc, #216]	@ (8005928 <HAL_TIM_PWM_Start+0x208>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d009      	beq.n	8005868 <HAL_TIM_PWM_Start+0x148>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a34      	ldr	r2, [pc, #208]	@ (800592c <HAL_TIM_PWM_Start+0x20c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d004      	beq.n	8005868 <HAL_TIM_PWM_Start+0x148>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a33      	ldr	r2, [pc, #204]	@ (8005930 <HAL_TIM_PWM_Start+0x210>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d101      	bne.n	800586c <HAL_TIM_PWM_Start+0x14c>
 8005868:	2301      	movs	r3, #1
 800586a:	e000      	b.n	800586e <HAL_TIM_PWM_Start+0x14e>
 800586c:	2300      	movs	r3, #0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d007      	beq.n	8005882 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005880:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a25      	ldr	r2, [pc, #148]	@ (800591c <HAL_TIM_PWM_Start+0x1fc>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d022      	beq.n	80058d2 <HAL_TIM_PWM_Start+0x1b2>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005894:	d01d      	beq.n	80058d2 <HAL_TIM_PWM_Start+0x1b2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a26      	ldr	r2, [pc, #152]	@ (8005934 <HAL_TIM_PWM_Start+0x214>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d018      	beq.n	80058d2 <HAL_TIM_PWM_Start+0x1b2>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a24      	ldr	r2, [pc, #144]	@ (8005938 <HAL_TIM_PWM_Start+0x218>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d013      	beq.n	80058d2 <HAL_TIM_PWM_Start+0x1b2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a23      	ldr	r2, [pc, #140]	@ (800593c <HAL_TIM_PWM_Start+0x21c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d00e      	beq.n	80058d2 <HAL_TIM_PWM_Start+0x1b2>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a19      	ldr	r2, [pc, #100]	@ (8005920 <HAL_TIM_PWM_Start+0x200>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d009      	beq.n	80058d2 <HAL_TIM_PWM_Start+0x1b2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a18      	ldr	r2, [pc, #96]	@ (8005924 <HAL_TIM_PWM_Start+0x204>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d004      	beq.n	80058d2 <HAL_TIM_PWM_Start+0x1b2>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a18      	ldr	r2, [pc, #96]	@ (8005930 <HAL_TIM_PWM_Start+0x210>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d115      	bne.n	80058fe <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	4b19      	ldr	r3, [pc, #100]	@ (8005940 <HAL_TIM_PWM_Start+0x220>)
 80058da:	4013      	ands	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2b06      	cmp	r3, #6
 80058e2:	d015      	beq.n	8005910 <HAL_TIM_PWM_Start+0x1f0>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058ea:	d011      	beq.n	8005910 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0201 	orr.w	r2, r2, #1
 80058fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058fc:	e008      	b.n	8005910 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f042 0201 	orr.w	r2, r2, #1
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	e000      	b.n	8005912 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005910:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	40012c00 	.word	0x40012c00
 8005920:	40013400 	.word	0x40013400
 8005924:	40014000 	.word	0x40014000
 8005928:	40014400 	.word	0x40014400
 800592c:	40014800 	.word	0x40014800
 8005930:	40015000 	.word	0x40015000
 8005934:	40000400 	.word	0x40000400
 8005938:	40000800 	.word	0x40000800
 800593c:	40000c00 	.word	0x40000c00
 8005940:	00010007 	.word	0x00010007

08005944 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e097      	b.n	8005a88 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	d106      	bne.n	8005972 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7fb ff19 	bl	80017a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2202      	movs	r2, #2
 8005976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6812      	ldr	r2, [r2, #0]
 8005984:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005988:	f023 0307 	bic.w	r3, r3, #7
 800598c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	3304      	adds	r3, #4
 8005996:	4619      	mov	r1, r3
 8005998:	4610      	mov	r0, r2
 800599a:	f000 fca9 	bl	80062f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	4313      	orrs	r3, r2
 80059be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059c6:	f023 0303 	bic.w	r3, r3, #3
 80059ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	021b      	lsls	r3, r3, #8
 80059d6:	4313      	orrs	r3, r2
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	4313      	orrs	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80059e4:	f023 030c 	bic.w	r3, r3, #12
 80059e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80059f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	021b      	lsls	r3, r3, #8
 8005a00:	4313      	orrs	r3, r2
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	011a      	lsls	r2, r3, #4
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	031b      	lsls	r3, r3, #12
 8005a14:	4313      	orrs	r3, r2
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005a22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005a2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	011b      	lsls	r3, r3, #4
 8005a36:	4313      	orrs	r3, r2
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3718      	adds	r7, #24
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005aa0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005aa8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ab0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ab8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d110      	bne.n	8005ae2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d102      	bne.n	8005acc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ac6:	7b7b      	ldrb	r3, [r7, #13]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d001      	beq.n	8005ad0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e069      	b.n	8005ba4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ae0:	e031      	b.n	8005b46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	d110      	bne.n	8005b0a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ae8:	7bbb      	ldrb	r3, [r7, #14]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d102      	bne.n	8005af4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005aee:	7b3b      	ldrb	r3, [r7, #12]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d001      	beq.n	8005af8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e055      	b.n	8005ba4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b08:	e01d      	b.n	8005b46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b0a:	7bfb      	ldrb	r3, [r7, #15]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d108      	bne.n	8005b22 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b10:	7bbb      	ldrb	r3, [r7, #14]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d105      	bne.n	8005b22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b16:	7b7b      	ldrb	r3, [r7, #13]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d102      	bne.n	8005b22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b1c:	7b3b      	ldrb	r3, [r7, #12]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d001      	beq.n	8005b26 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e03e      	b.n	8005ba4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2202      	movs	r2, #2
 8005b32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2202      	movs	r2, #2
 8005b3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2202      	movs	r2, #2
 8005b42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <HAL_TIM_Encoder_Start+0xc4>
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d008      	beq.n	8005b64 <HAL_TIM_Encoder_Start+0xd4>
 8005b52:	e00f      	b.n	8005b74 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f001 f841 	bl	8006be4 <TIM_CCxChannelCmd>
      break;
 8005b62:	e016      	b.n	8005b92 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	2104      	movs	r1, #4
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f001 f839 	bl	8006be4 <TIM_CCxChannelCmd>
      break;
 8005b72:	e00e      	b.n	8005b92 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f001 f831 	bl	8006be4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2201      	movs	r2, #1
 8005b88:	2104      	movs	r1, #4
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f001 f82a 	bl	8006be4 <TIM_CCxChannelCmd>
      break;
 8005b90:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f042 0201 	orr.w	r2, r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d020      	beq.n	8005c10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f003 0302 	and.w	r3, r3, #2
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d01b      	beq.n	8005c10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f06f 0202 	mvn.w	r2, #2
 8005be0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fb5c 	bl	80062b4 <HAL_TIM_IC_CaptureCallback>
 8005bfc:	e005      	b.n	8005c0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fb4e 	bl	80062a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fb5f 	bl	80062c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d020      	beq.n	8005c5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f003 0304 	and.w	r3, r3, #4
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d01b      	beq.n	8005c5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f06f 0204 	mvn.w	r2, #4
 8005c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2202      	movs	r2, #2
 8005c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fb36 	bl	80062b4 <HAL_TIM_IC_CaptureCallback>
 8005c48:	e005      	b.n	8005c56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fb28 	bl	80062a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 fb39 	bl	80062c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f003 0308 	and.w	r3, r3, #8
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d020      	beq.n	8005ca8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f003 0308 	and.w	r3, r3, #8
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d01b      	beq.n	8005ca8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f06f 0208 	mvn.w	r2, #8
 8005c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2204      	movs	r2, #4
 8005c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	f003 0303 	and.w	r3, r3, #3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fb10 	bl	80062b4 <HAL_TIM_IC_CaptureCallback>
 8005c94:	e005      	b.n	8005ca2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fb02 	bl	80062a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fb13 	bl	80062c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f003 0310 	and.w	r3, r3, #16
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d020      	beq.n	8005cf4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f003 0310 	and.w	r3, r3, #16
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01b      	beq.n	8005cf4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f06f 0210 	mvn.w	r2, #16
 8005cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2208      	movs	r2, #8
 8005cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 faea 	bl	80062b4 <HAL_TIM_IC_CaptureCallback>
 8005ce0:	e005      	b.n	8005cee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fadc 	bl	80062a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 faed 	bl	80062c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00c      	beq.n	8005d18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d007      	beq.n	8005d18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f06f 0201 	mvn.w	r2, #1
 8005d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7fb fa16 	bl	8001144 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d104      	bne.n	8005d2c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00c      	beq.n	8005d46 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d007      	beq.n	8005d46 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f001 f8a9 	bl	8006e98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00c      	beq.n	8005d6a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d007      	beq.n	8005d6a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f001 f8a1 	bl	8006eac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00c      	beq.n	8005d8e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d007      	beq.n	8005d8e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 faa7 	bl	80062dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	f003 0320 	and.w	r3, r3, #32
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00c      	beq.n	8005db2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d007      	beq.n	8005db2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f06f 0220 	mvn.w	r2, #32
 8005daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f001 f869 	bl	8006e84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00c      	beq.n	8005dd6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d007      	beq.n	8005dd6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f001 f875 	bl	8006ec0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00c      	beq.n	8005dfa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d007      	beq.n	8005dfa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f001 f86d 	bl	8006ed4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00c      	beq.n	8005e1e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d007      	beq.n	8005e1e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f001 f865 	bl	8006ee8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00c      	beq.n	8005e42 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d007      	beq.n	8005e42 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f001 f85d 	bl	8006efc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e42:	bf00      	nop
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
	...

08005e4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d101      	bne.n	8005e6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e66:	2302      	movs	r3, #2
 8005e68:	e0ff      	b.n	800606a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b14      	cmp	r3, #20
 8005e76:	f200 80f0 	bhi.w	800605a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e80:	08005ed5 	.word	0x08005ed5
 8005e84:	0800605b 	.word	0x0800605b
 8005e88:	0800605b 	.word	0x0800605b
 8005e8c:	0800605b 	.word	0x0800605b
 8005e90:	08005f15 	.word	0x08005f15
 8005e94:	0800605b 	.word	0x0800605b
 8005e98:	0800605b 	.word	0x0800605b
 8005e9c:	0800605b 	.word	0x0800605b
 8005ea0:	08005f57 	.word	0x08005f57
 8005ea4:	0800605b 	.word	0x0800605b
 8005ea8:	0800605b 	.word	0x0800605b
 8005eac:	0800605b 	.word	0x0800605b
 8005eb0:	08005f97 	.word	0x08005f97
 8005eb4:	0800605b 	.word	0x0800605b
 8005eb8:	0800605b 	.word	0x0800605b
 8005ebc:	0800605b 	.word	0x0800605b
 8005ec0:	08005fd9 	.word	0x08005fd9
 8005ec4:	0800605b 	.word	0x0800605b
 8005ec8:	0800605b 	.word	0x0800605b
 8005ecc:	0800605b 	.word	0x0800605b
 8005ed0:	08006019 	.word	0x08006019
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68b9      	ldr	r1, [r7, #8]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 fabc 	bl	8006458 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	699a      	ldr	r2, [r3, #24]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0208 	orr.w	r2, r2, #8
 8005eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	699a      	ldr	r2, [r3, #24]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0204 	bic.w	r2, r2, #4
 8005efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6999      	ldr	r1, [r3, #24]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	691a      	ldr	r2, [r3, #16]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	619a      	str	r2, [r3, #24]
      break;
 8005f12:	e0a5      	b.n	8006060 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68b9      	ldr	r1, [r7, #8]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 fb36 	bl	800658c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	699a      	ldr	r2, [r3, #24]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699a      	ldr	r2, [r3, #24]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6999      	ldr	r1, [r3, #24]
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	021a      	lsls	r2, r3, #8
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	619a      	str	r2, [r3, #24]
      break;
 8005f54:	e084      	b.n	8006060 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68b9      	ldr	r1, [r7, #8]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 fba9 	bl	80066b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	69da      	ldr	r2, [r3, #28]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f042 0208 	orr.w	r2, r2, #8
 8005f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69da      	ldr	r2, [r3, #28]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 0204 	bic.w	r2, r2, #4
 8005f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69d9      	ldr	r1, [r3, #28]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	691a      	ldr	r2, [r3, #16]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	61da      	str	r2, [r3, #28]
      break;
 8005f94:	e064      	b.n	8006060 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68b9      	ldr	r1, [r7, #8]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f000 fc1b 	bl	80067d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69da      	ldr	r2, [r3, #28]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	69da      	ldr	r2, [r3, #28]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69d9      	ldr	r1, [r3, #28]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	021a      	lsls	r2, r3, #8
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	61da      	str	r2, [r3, #28]
      break;
 8005fd6:	e043      	b.n	8006060 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68b9      	ldr	r1, [r7, #8]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f000 fc8e 	bl	8006900 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f042 0208 	orr.w	r2, r2, #8
 8005ff2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 0204 	bic.w	r2, r2, #4
 8006002:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	691a      	ldr	r2, [r3, #16]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006016:	e023      	b.n	8006060 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68b9      	ldr	r1, [r7, #8]
 800601e:	4618      	mov	r0, r3
 8006020:	f000 fcd8 	bl	80069d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006032:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006042:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	021a      	lsls	r2, r3, #8
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	430a      	orrs	r2, r1
 8006056:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006058:	e002      	b.n	8006060 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	75fb      	strb	r3, [r7, #23]
      break;
 800605e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006068:	7dfb      	ldrb	r3, [r7, #23]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3718      	adds	r7, #24
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop

08006074 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006088:	2b01      	cmp	r3, #1
 800608a:	d101      	bne.n	8006090 <HAL_TIM_ConfigClockSource+0x1c>
 800608c:	2302      	movs	r3, #2
 800608e:	e0f6      	b.n	800627e <HAL_TIM_ConfigClockSource+0x20a>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80060ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80060b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a6f      	ldr	r2, [pc, #444]	@ (8006288 <HAL_TIM_ConfigClockSource+0x214>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	f000 80c1 	beq.w	8006252 <HAL_TIM_ConfigClockSource+0x1de>
 80060d0:	4a6d      	ldr	r2, [pc, #436]	@ (8006288 <HAL_TIM_ConfigClockSource+0x214>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	f200 80c6 	bhi.w	8006264 <HAL_TIM_ConfigClockSource+0x1f0>
 80060d8:	4a6c      	ldr	r2, [pc, #432]	@ (800628c <HAL_TIM_ConfigClockSource+0x218>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	f000 80b9 	beq.w	8006252 <HAL_TIM_ConfigClockSource+0x1de>
 80060e0:	4a6a      	ldr	r2, [pc, #424]	@ (800628c <HAL_TIM_ConfigClockSource+0x218>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	f200 80be 	bhi.w	8006264 <HAL_TIM_ConfigClockSource+0x1f0>
 80060e8:	4a69      	ldr	r2, [pc, #420]	@ (8006290 <HAL_TIM_ConfigClockSource+0x21c>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	f000 80b1 	beq.w	8006252 <HAL_TIM_ConfigClockSource+0x1de>
 80060f0:	4a67      	ldr	r2, [pc, #412]	@ (8006290 <HAL_TIM_ConfigClockSource+0x21c>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	f200 80b6 	bhi.w	8006264 <HAL_TIM_ConfigClockSource+0x1f0>
 80060f8:	4a66      	ldr	r2, [pc, #408]	@ (8006294 <HAL_TIM_ConfigClockSource+0x220>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	f000 80a9 	beq.w	8006252 <HAL_TIM_ConfigClockSource+0x1de>
 8006100:	4a64      	ldr	r2, [pc, #400]	@ (8006294 <HAL_TIM_ConfigClockSource+0x220>)
 8006102:	4293      	cmp	r3, r2
 8006104:	f200 80ae 	bhi.w	8006264 <HAL_TIM_ConfigClockSource+0x1f0>
 8006108:	4a63      	ldr	r2, [pc, #396]	@ (8006298 <HAL_TIM_ConfigClockSource+0x224>)
 800610a:	4293      	cmp	r3, r2
 800610c:	f000 80a1 	beq.w	8006252 <HAL_TIM_ConfigClockSource+0x1de>
 8006110:	4a61      	ldr	r2, [pc, #388]	@ (8006298 <HAL_TIM_ConfigClockSource+0x224>)
 8006112:	4293      	cmp	r3, r2
 8006114:	f200 80a6 	bhi.w	8006264 <HAL_TIM_ConfigClockSource+0x1f0>
 8006118:	4a60      	ldr	r2, [pc, #384]	@ (800629c <HAL_TIM_ConfigClockSource+0x228>)
 800611a:	4293      	cmp	r3, r2
 800611c:	f000 8099 	beq.w	8006252 <HAL_TIM_ConfigClockSource+0x1de>
 8006120:	4a5e      	ldr	r2, [pc, #376]	@ (800629c <HAL_TIM_ConfigClockSource+0x228>)
 8006122:	4293      	cmp	r3, r2
 8006124:	f200 809e 	bhi.w	8006264 <HAL_TIM_ConfigClockSource+0x1f0>
 8006128:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800612c:	f000 8091 	beq.w	8006252 <HAL_TIM_ConfigClockSource+0x1de>
 8006130:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006134:	f200 8096 	bhi.w	8006264 <HAL_TIM_ConfigClockSource+0x1f0>
 8006138:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800613c:	f000 8089 	beq.w	8006252 <HAL_TIM_ConfigClockSource+0x1de>
 8006140:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006144:	f200 808e 	bhi.w	8006264 <HAL_TIM_ConfigClockSource+0x1f0>
 8006148:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800614c:	d03e      	beq.n	80061cc <HAL_TIM_ConfigClockSource+0x158>
 800614e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006152:	f200 8087 	bhi.w	8006264 <HAL_TIM_ConfigClockSource+0x1f0>
 8006156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800615a:	f000 8086 	beq.w	800626a <HAL_TIM_ConfigClockSource+0x1f6>
 800615e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006162:	d87f      	bhi.n	8006264 <HAL_TIM_ConfigClockSource+0x1f0>
 8006164:	2b70      	cmp	r3, #112	@ 0x70
 8006166:	d01a      	beq.n	800619e <HAL_TIM_ConfigClockSource+0x12a>
 8006168:	2b70      	cmp	r3, #112	@ 0x70
 800616a:	d87b      	bhi.n	8006264 <HAL_TIM_ConfigClockSource+0x1f0>
 800616c:	2b60      	cmp	r3, #96	@ 0x60
 800616e:	d050      	beq.n	8006212 <HAL_TIM_ConfigClockSource+0x19e>
 8006170:	2b60      	cmp	r3, #96	@ 0x60
 8006172:	d877      	bhi.n	8006264 <HAL_TIM_ConfigClockSource+0x1f0>
 8006174:	2b50      	cmp	r3, #80	@ 0x50
 8006176:	d03c      	beq.n	80061f2 <HAL_TIM_ConfigClockSource+0x17e>
 8006178:	2b50      	cmp	r3, #80	@ 0x50
 800617a:	d873      	bhi.n	8006264 <HAL_TIM_ConfigClockSource+0x1f0>
 800617c:	2b40      	cmp	r3, #64	@ 0x40
 800617e:	d058      	beq.n	8006232 <HAL_TIM_ConfigClockSource+0x1be>
 8006180:	2b40      	cmp	r3, #64	@ 0x40
 8006182:	d86f      	bhi.n	8006264 <HAL_TIM_ConfigClockSource+0x1f0>
 8006184:	2b30      	cmp	r3, #48	@ 0x30
 8006186:	d064      	beq.n	8006252 <HAL_TIM_ConfigClockSource+0x1de>
 8006188:	2b30      	cmp	r3, #48	@ 0x30
 800618a:	d86b      	bhi.n	8006264 <HAL_TIM_ConfigClockSource+0x1f0>
 800618c:	2b20      	cmp	r3, #32
 800618e:	d060      	beq.n	8006252 <HAL_TIM_ConfigClockSource+0x1de>
 8006190:	2b20      	cmp	r3, #32
 8006192:	d867      	bhi.n	8006264 <HAL_TIM_ConfigClockSource+0x1f0>
 8006194:	2b00      	cmp	r3, #0
 8006196:	d05c      	beq.n	8006252 <HAL_TIM_ConfigClockSource+0x1de>
 8006198:	2b10      	cmp	r3, #16
 800619a:	d05a      	beq.n	8006252 <HAL_TIM_ConfigClockSource+0x1de>
 800619c:	e062      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061ae:	f000 fcf9 	bl	8006ba4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80061c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	609a      	str	r2, [r3, #8]
      break;
 80061ca:	e04f      	b.n	800626c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061dc:	f000 fce2 	bl	8006ba4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689a      	ldr	r2, [r3, #8]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061ee:	609a      	str	r2, [r3, #8]
      break;
 80061f0:	e03c      	b.n	800626c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061fe:	461a      	mov	r2, r3
 8006200:	f000 fc54 	bl	8006aac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2150      	movs	r1, #80	@ 0x50
 800620a:	4618      	mov	r0, r3
 800620c:	f000 fcad 	bl	8006b6a <TIM_ITRx_SetConfig>
      break;
 8006210:	e02c      	b.n	800626c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800621e:	461a      	mov	r2, r3
 8006220:	f000 fc73 	bl	8006b0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2160      	movs	r1, #96	@ 0x60
 800622a:	4618      	mov	r0, r3
 800622c:	f000 fc9d 	bl	8006b6a <TIM_ITRx_SetConfig>
      break;
 8006230:	e01c      	b.n	800626c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800623e:	461a      	mov	r2, r3
 8006240:	f000 fc34 	bl	8006aac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2140      	movs	r1, #64	@ 0x40
 800624a:	4618      	mov	r0, r3
 800624c:	f000 fc8d 	bl	8006b6a <TIM_ITRx_SetConfig>
      break;
 8006250:	e00c      	b.n	800626c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4619      	mov	r1, r3
 800625c:	4610      	mov	r0, r2
 800625e:	f000 fc84 	bl	8006b6a <TIM_ITRx_SetConfig>
      break;
 8006262:	e003      	b.n	800626c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	73fb      	strb	r3, [r7, #15]
      break;
 8006268:	e000      	b.n	800626c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800626a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800627c:	7bfb      	ldrb	r3, [r7, #15]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	00100070 	.word	0x00100070
 800628c:	00100060 	.word	0x00100060
 8006290:	00100050 	.word	0x00100050
 8006294:	00100040 	.word	0x00100040
 8006298:	00100030 	.word	0x00100030
 800629c:	00100020 	.word	0x00100020

080062a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a4c      	ldr	r2, [pc, #304]	@ (8006434 <TIM_Base_SetConfig+0x144>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d017      	beq.n	8006338 <TIM_Base_SetConfig+0x48>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800630e:	d013      	beq.n	8006338 <TIM_Base_SetConfig+0x48>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a49      	ldr	r2, [pc, #292]	@ (8006438 <TIM_Base_SetConfig+0x148>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d00f      	beq.n	8006338 <TIM_Base_SetConfig+0x48>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a48      	ldr	r2, [pc, #288]	@ (800643c <TIM_Base_SetConfig+0x14c>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d00b      	beq.n	8006338 <TIM_Base_SetConfig+0x48>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a47      	ldr	r2, [pc, #284]	@ (8006440 <TIM_Base_SetConfig+0x150>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d007      	beq.n	8006338 <TIM_Base_SetConfig+0x48>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a46      	ldr	r2, [pc, #280]	@ (8006444 <TIM_Base_SetConfig+0x154>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d003      	beq.n	8006338 <TIM_Base_SetConfig+0x48>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a45      	ldr	r2, [pc, #276]	@ (8006448 <TIM_Base_SetConfig+0x158>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d108      	bne.n	800634a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800633e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	4313      	orrs	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a39      	ldr	r2, [pc, #228]	@ (8006434 <TIM_Base_SetConfig+0x144>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d023      	beq.n	800639a <TIM_Base_SetConfig+0xaa>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006358:	d01f      	beq.n	800639a <TIM_Base_SetConfig+0xaa>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a36      	ldr	r2, [pc, #216]	@ (8006438 <TIM_Base_SetConfig+0x148>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d01b      	beq.n	800639a <TIM_Base_SetConfig+0xaa>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a35      	ldr	r2, [pc, #212]	@ (800643c <TIM_Base_SetConfig+0x14c>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d017      	beq.n	800639a <TIM_Base_SetConfig+0xaa>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a34      	ldr	r2, [pc, #208]	@ (8006440 <TIM_Base_SetConfig+0x150>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d013      	beq.n	800639a <TIM_Base_SetConfig+0xaa>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a33      	ldr	r2, [pc, #204]	@ (8006444 <TIM_Base_SetConfig+0x154>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d00f      	beq.n	800639a <TIM_Base_SetConfig+0xaa>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a33      	ldr	r2, [pc, #204]	@ (800644c <TIM_Base_SetConfig+0x15c>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d00b      	beq.n	800639a <TIM_Base_SetConfig+0xaa>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a32      	ldr	r2, [pc, #200]	@ (8006450 <TIM_Base_SetConfig+0x160>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d007      	beq.n	800639a <TIM_Base_SetConfig+0xaa>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a31      	ldr	r2, [pc, #196]	@ (8006454 <TIM_Base_SetConfig+0x164>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d003      	beq.n	800639a <TIM_Base_SetConfig+0xaa>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a2c      	ldr	r2, [pc, #176]	@ (8006448 <TIM_Base_SetConfig+0x158>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d108      	bne.n	80063ac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	689a      	ldr	r2, [r3, #8]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a18      	ldr	r2, [pc, #96]	@ (8006434 <TIM_Base_SetConfig+0x144>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d013      	beq.n	8006400 <TIM_Base_SetConfig+0x110>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a1a      	ldr	r2, [pc, #104]	@ (8006444 <TIM_Base_SetConfig+0x154>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d00f      	beq.n	8006400 <TIM_Base_SetConfig+0x110>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a1a      	ldr	r2, [pc, #104]	@ (800644c <TIM_Base_SetConfig+0x15c>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d00b      	beq.n	8006400 <TIM_Base_SetConfig+0x110>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a19      	ldr	r2, [pc, #100]	@ (8006450 <TIM_Base_SetConfig+0x160>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d007      	beq.n	8006400 <TIM_Base_SetConfig+0x110>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a18      	ldr	r2, [pc, #96]	@ (8006454 <TIM_Base_SetConfig+0x164>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d003      	beq.n	8006400 <TIM_Base_SetConfig+0x110>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a13      	ldr	r2, [pc, #76]	@ (8006448 <TIM_Base_SetConfig+0x158>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d103      	bne.n	8006408 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	691a      	ldr	r2, [r3, #16]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b01      	cmp	r3, #1
 8006418:	d105      	bne.n	8006426 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	f023 0201 	bic.w	r2, r3, #1
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	611a      	str	r2, [r3, #16]
  }
}
 8006426:	bf00      	nop
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	40012c00 	.word	0x40012c00
 8006438:	40000400 	.word	0x40000400
 800643c:	40000800 	.word	0x40000800
 8006440:	40000c00 	.word	0x40000c00
 8006444:	40013400 	.word	0x40013400
 8006448:	40015000 	.word	0x40015000
 800644c:	40014000 	.word	0x40014000
 8006450:	40014400 	.word	0x40014400
 8006454:	40014800 	.word	0x40014800

08006458 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	f023 0201 	bic.w	r2, r3, #1
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800648a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f023 0303 	bic.w	r3, r3, #3
 8006492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	4313      	orrs	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f023 0302 	bic.w	r3, r3, #2
 80064a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a30      	ldr	r2, [pc, #192]	@ (8006574 <TIM_OC1_SetConfig+0x11c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d013      	beq.n	80064e0 <TIM_OC1_SetConfig+0x88>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a2f      	ldr	r2, [pc, #188]	@ (8006578 <TIM_OC1_SetConfig+0x120>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d00f      	beq.n	80064e0 <TIM_OC1_SetConfig+0x88>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a2e      	ldr	r2, [pc, #184]	@ (800657c <TIM_OC1_SetConfig+0x124>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d00b      	beq.n	80064e0 <TIM_OC1_SetConfig+0x88>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a2d      	ldr	r2, [pc, #180]	@ (8006580 <TIM_OC1_SetConfig+0x128>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d007      	beq.n	80064e0 <TIM_OC1_SetConfig+0x88>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a2c      	ldr	r2, [pc, #176]	@ (8006584 <TIM_OC1_SetConfig+0x12c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d003      	beq.n	80064e0 <TIM_OC1_SetConfig+0x88>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a2b      	ldr	r2, [pc, #172]	@ (8006588 <TIM_OC1_SetConfig+0x130>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d10c      	bne.n	80064fa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f023 0308 	bic.w	r3, r3, #8
 80064e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f023 0304 	bic.w	r3, r3, #4
 80064f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006574 <TIM_OC1_SetConfig+0x11c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d013      	beq.n	800652a <TIM_OC1_SetConfig+0xd2>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a1c      	ldr	r2, [pc, #112]	@ (8006578 <TIM_OC1_SetConfig+0x120>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d00f      	beq.n	800652a <TIM_OC1_SetConfig+0xd2>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a1b      	ldr	r2, [pc, #108]	@ (800657c <TIM_OC1_SetConfig+0x124>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00b      	beq.n	800652a <TIM_OC1_SetConfig+0xd2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a1a      	ldr	r2, [pc, #104]	@ (8006580 <TIM_OC1_SetConfig+0x128>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d007      	beq.n	800652a <TIM_OC1_SetConfig+0xd2>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a19      	ldr	r2, [pc, #100]	@ (8006584 <TIM_OC1_SetConfig+0x12c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d003      	beq.n	800652a <TIM_OC1_SetConfig+0xd2>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a18      	ldr	r2, [pc, #96]	@ (8006588 <TIM_OC1_SetConfig+0x130>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d111      	bne.n	800654e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006530:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006538:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	4313      	orrs	r3, r2
 8006542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	4313      	orrs	r3, r2
 800654c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	621a      	str	r2, [r3, #32]
}
 8006568:	bf00      	nop
 800656a:	371c      	adds	r7, #28
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	40012c00 	.word	0x40012c00
 8006578:	40013400 	.word	0x40013400
 800657c:	40014000 	.word	0x40014000
 8006580:	40014400 	.word	0x40014400
 8006584:	40014800 	.word	0x40014800
 8006588:	40015000 	.word	0x40015000

0800658c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800658c:	b480      	push	{r7}
 800658e:	b087      	sub	sp, #28
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a1b      	ldr	r3, [r3, #32]
 80065a0:	f023 0210 	bic.w	r2, r3, #16
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	021b      	lsls	r3, r3, #8
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f023 0320 	bic.w	r3, r3, #32
 80065da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	011b      	lsls	r3, r3, #4
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a2c      	ldr	r2, [pc, #176]	@ (800669c <TIM_OC2_SetConfig+0x110>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d007      	beq.n	8006600 <TIM_OC2_SetConfig+0x74>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a2b      	ldr	r2, [pc, #172]	@ (80066a0 <TIM_OC2_SetConfig+0x114>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d003      	beq.n	8006600 <TIM_OC2_SetConfig+0x74>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a2a      	ldr	r2, [pc, #168]	@ (80066a4 <TIM_OC2_SetConfig+0x118>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d10d      	bne.n	800661c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	011b      	lsls	r3, r3, #4
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	4313      	orrs	r3, r2
 8006612:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800661a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a1f      	ldr	r2, [pc, #124]	@ (800669c <TIM_OC2_SetConfig+0x110>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d013      	beq.n	800664c <TIM_OC2_SetConfig+0xc0>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a1e      	ldr	r2, [pc, #120]	@ (80066a0 <TIM_OC2_SetConfig+0x114>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d00f      	beq.n	800664c <TIM_OC2_SetConfig+0xc0>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a1e      	ldr	r2, [pc, #120]	@ (80066a8 <TIM_OC2_SetConfig+0x11c>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d00b      	beq.n	800664c <TIM_OC2_SetConfig+0xc0>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a1d      	ldr	r2, [pc, #116]	@ (80066ac <TIM_OC2_SetConfig+0x120>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d007      	beq.n	800664c <TIM_OC2_SetConfig+0xc0>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a1c      	ldr	r2, [pc, #112]	@ (80066b0 <TIM_OC2_SetConfig+0x124>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d003      	beq.n	800664c <TIM_OC2_SetConfig+0xc0>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a17      	ldr	r2, [pc, #92]	@ (80066a4 <TIM_OC2_SetConfig+0x118>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d113      	bne.n	8006674 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006652:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800665a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	4313      	orrs	r3, r2
 8006666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	4313      	orrs	r3, r2
 8006672:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	621a      	str	r2, [r3, #32]
}
 800668e:	bf00      	nop
 8006690:	371c      	adds	r7, #28
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	40012c00 	.word	0x40012c00
 80066a0:	40013400 	.word	0x40013400
 80066a4:	40015000 	.word	0x40015000
 80066a8:	40014000 	.word	0x40014000
 80066ac:	40014400 	.word	0x40014400
 80066b0:	40014800 	.word	0x40014800

080066b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b087      	sub	sp, #28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a1b      	ldr	r3, [r3, #32]
 80066c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f023 0303 	bic.w	r3, r3, #3
 80066ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	021b      	lsls	r3, r3, #8
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	4313      	orrs	r3, r2
 800670c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a2b      	ldr	r2, [pc, #172]	@ (80067c0 <TIM_OC3_SetConfig+0x10c>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d007      	beq.n	8006726 <TIM_OC3_SetConfig+0x72>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a2a      	ldr	r2, [pc, #168]	@ (80067c4 <TIM_OC3_SetConfig+0x110>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d003      	beq.n	8006726 <TIM_OC3_SetConfig+0x72>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a29      	ldr	r2, [pc, #164]	@ (80067c8 <TIM_OC3_SetConfig+0x114>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d10d      	bne.n	8006742 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800672c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	021b      	lsls	r3, r3, #8
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	4313      	orrs	r3, r2
 8006738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a1e      	ldr	r2, [pc, #120]	@ (80067c0 <TIM_OC3_SetConfig+0x10c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d013      	beq.n	8006772 <TIM_OC3_SetConfig+0xbe>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a1d      	ldr	r2, [pc, #116]	@ (80067c4 <TIM_OC3_SetConfig+0x110>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d00f      	beq.n	8006772 <TIM_OC3_SetConfig+0xbe>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a1d      	ldr	r2, [pc, #116]	@ (80067cc <TIM_OC3_SetConfig+0x118>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d00b      	beq.n	8006772 <TIM_OC3_SetConfig+0xbe>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a1c      	ldr	r2, [pc, #112]	@ (80067d0 <TIM_OC3_SetConfig+0x11c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d007      	beq.n	8006772 <TIM_OC3_SetConfig+0xbe>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a1b      	ldr	r2, [pc, #108]	@ (80067d4 <TIM_OC3_SetConfig+0x120>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d003      	beq.n	8006772 <TIM_OC3_SetConfig+0xbe>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a16      	ldr	r2, [pc, #88]	@ (80067c8 <TIM_OC3_SetConfig+0x114>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d113      	bne.n	800679a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	011b      	lsls	r3, r3, #4
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	4313      	orrs	r3, r2
 800678c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	011b      	lsls	r3, r3, #4
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	4313      	orrs	r3, r2
 8006798:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	621a      	str	r2, [r3, #32]
}
 80067b4:	bf00      	nop
 80067b6:	371c      	adds	r7, #28
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr
 80067c0:	40012c00 	.word	0x40012c00
 80067c4:	40013400 	.word	0x40013400
 80067c8:	40015000 	.word	0x40015000
 80067cc:	40014000 	.word	0x40014000
 80067d0:	40014400 	.word	0x40014400
 80067d4:	40014800 	.word	0x40014800

080067d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067d8:	b480      	push	{r7}
 80067da:	b087      	sub	sp, #28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006806:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800680a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006812:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	021b      	lsls	r3, r3, #8
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	4313      	orrs	r3, r2
 800681e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006826:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	031b      	lsls	r3, r3, #12
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	4313      	orrs	r3, r2
 8006832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a2c      	ldr	r2, [pc, #176]	@ (80068e8 <TIM_OC4_SetConfig+0x110>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d007      	beq.n	800684c <TIM_OC4_SetConfig+0x74>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a2b      	ldr	r2, [pc, #172]	@ (80068ec <TIM_OC4_SetConfig+0x114>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d003      	beq.n	800684c <TIM_OC4_SetConfig+0x74>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a2a      	ldr	r2, [pc, #168]	@ (80068f0 <TIM_OC4_SetConfig+0x118>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d10d      	bne.n	8006868 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	031b      	lsls	r3, r3, #12
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	4313      	orrs	r3, r2
 800685e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006866:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a1f      	ldr	r2, [pc, #124]	@ (80068e8 <TIM_OC4_SetConfig+0x110>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d013      	beq.n	8006898 <TIM_OC4_SetConfig+0xc0>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a1e      	ldr	r2, [pc, #120]	@ (80068ec <TIM_OC4_SetConfig+0x114>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d00f      	beq.n	8006898 <TIM_OC4_SetConfig+0xc0>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a1e      	ldr	r2, [pc, #120]	@ (80068f4 <TIM_OC4_SetConfig+0x11c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d00b      	beq.n	8006898 <TIM_OC4_SetConfig+0xc0>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a1d      	ldr	r2, [pc, #116]	@ (80068f8 <TIM_OC4_SetConfig+0x120>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d007      	beq.n	8006898 <TIM_OC4_SetConfig+0xc0>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a1c      	ldr	r2, [pc, #112]	@ (80068fc <TIM_OC4_SetConfig+0x124>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d003      	beq.n	8006898 <TIM_OC4_SetConfig+0xc0>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a17      	ldr	r2, [pc, #92]	@ (80068f0 <TIM_OC4_SetConfig+0x118>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d113      	bne.n	80068c0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800689e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068a6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	019b      	lsls	r3, r3, #6
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	019b      	lsls	r3, r3, #6
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	4313      	orrs	r3, r2
 80068be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	685a      	ldr	r2, [r3, #4]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	621a      	str	r2, [r3, #32]
}
 80068da:	bf00      	nop
 80068dc:	371c      	adds	r7, #28
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	40012c00 	.word	0x40012c00
 80068ec:	40013400 	.word	0x40013400
 80068f0:	40015000 	.word	0x40015000
 80068f4:	40014000 	.word	0x40014000
 80068f8:	40014400 	.word	0x40014400
 80068fc:	40014800 	.word	0x40014800

08006900 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800692e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006944:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	041b      	lsls	r3, r3, #16
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	4313      	orrs	r3, r2
 8006950:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a19      	ldr	r2, [pc, #100]	@ (80069bc <TIM_OC5_SetConfig+0xbc>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d013      	beq.n	8006982 <TIM_OC5_SetConfig+0x82>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a18      	ldr	r2, [pc, #96]	@ (80069c0 <TIM_OC5_SetConfig+0xc0>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00f      	beq.n	8006982 <TIM_OC5_SetConfig+0x82>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a17      	ldr	r2, [pc, #92]	@ (80069c4 <TIM_OC5_SetConfig+0xc4>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00b      	beq.n	8006982 <TIM_OC5_SetConfig+0x82>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a16      	ldr	r2, [pc, #88]	@ (80069c8 <TIM_OC5_SetConfig+0xc8>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d007      	beq.n	8006982 <TIM_OC5_SetConfig+0x82>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a15      	ldr	r2, [pc, #84]	@ (80069cc <TIM_OC5_SetConfig+0xcc>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d003      	beq.n	8006982 <TIM_OC5_SetConfig+0x82>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a14      	ldr	r2, [pc, #80]	@ (80069d0 <TIM_OC5_SetConfig+0xd0>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d109      	bne.n	8006996 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006988:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	021b      	lsls	r3, r3, #8
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	4313      	orrs	r3, r2
 8006994:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	621a      	str	r2, [r3, #32]
}
 80069b0:	bf00      	nop
 80069b2:	371c      	adds	r7, #28
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	40012c00 	.word	0x40012c00
 80069c0:	40013400 	.word	0x40013400
 80069c4:	40014000 	.word	0x40014000
 80069c8:	40014400 	.word	0x40014400
 80069cc:	40014800 	.word	0x40014800
 80069d0:	40015000 	.word	0x40015000

080069d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b087      	sub	sp, #28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	021b      	lsls	r3, r3, #8
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	051b      	lsls	r3, r3, #20
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a1a      	ldr	r2, [pc, #104]	@ (8006a94 <TIM_OC6_SetConfig+0xc0>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d013      	beq.n	8006a58 <TIM_OC6_SetConfig+0x84>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a19      	ldr	r2, [pc, #100]	@ (8006a98 <TIM_OC6_SetConfig+0xc4>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d00f      	beq.n	8006a58 <TIM_OC6_SetConfig+0x84>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a18      	ldr	r2, [pc, #96]	@ (8006a9c <TIM_OC6_SetConfig+0xc8>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d00b      	beq.n	8006a58 <TIM_OC6_SetConfig+0x84>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a17      	ldr	r2, [pc, #92]	@ (8006aa0 <TIM_OC6_SetConfig+0xcc>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d007      	beq.n	8006a58 <TIM_OC6_SetConfig+0x84>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a16      	ldr	r2, [pc, #88]	@ (8006aa4 <TIM_OC6_SetConfig+0xd0>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d003      	beq.n	8006a58 <TIM_OC6_SetConfig+0x84>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a15      	ldr	r2, [pc, #84]	@ (8006aa8 <TIM_OC6_SetConfig+0xd4>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d109      	bne.n	8006a6c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	029b      	lsls	r3, r3, #10
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	621a      	str	r2, [r3, #32]
}
 8006a86:	bf00      	nop
 8006a88:	371c      	adds	r7, #28
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	40012c00 	.word	0x40012c00
 8006a98:	40013400 	.word	0x40013400
 8006a9c:	40014000 	.word	0x40014000
 8006aa0:	40014400 	.word	0x40014400
 8006aa4:	40014800 	.word	0x40014800
 8006aa8:	40015000 	.word	0x40015000

08006aac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b087      	sub	sp, #28
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	f023 0201 	bic.w	r2, r3, #1
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ad6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	011b      	lsls	r3, r3, #4
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f023 030a 	bic.w	r3, r3, #10
 8006ae8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	621a      	str	r2, [r3, #32]
}
 8006afe:	bf00      	nop
 8006b00:	371c      	adds	r7, #28
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b087      	sub	sp, #28
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	60f8      	str	r0, [r7, #12]
 8006b12:	60b9      	str	r1, [r7, #8]
 8006b14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6a1b      	ldr	r3, [r3, #32]
 8006b20:	f023 0210 	bic.w	r2, r3, #16
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	031b      	lsls	r3, r3, #12
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	011b      	lsls	r3, r3, #4
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	621a      	str	r2, [r3, #32]
}
 8006b5e:	bf00      	nop
 8006b60:	371c      	adds	r7, #28
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b085      	sub	sp, #20
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006b80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	f043 0307 	orr.w	r3, r3, #7
 8006b90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	609a      	str	r2, [r3, #8]
}
 8006b98:	bf00      	nop
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
 8006bb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006bbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	021a      	lsls	r2, r3, #8
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	609a      	str	r2, [r3, #8]
}
 8006bd8:	bf00      	nop
 8006bda:	371c      	adds	r7, #28
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	f003 031f 	and.w	r3, r3, #31
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6a1a      	ldr	r2, [r3, #32]
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	43db      	mvns	r3, r3
 8006c06:	401a      	ands	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6a1a      	ldr	r2, [r3, #32]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	f003 031f 	and.w	r3, r3, #31
 8006c16:	6879      	ldr	r1, [r7, #4]
 8006c18:	fa01 f303 	lsl.w	r3, r1, r3
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	621a      	str	r2, [r3, #32]
}
 8006c22:	bf00      	nop
 8006c24:	371c      	adds	r7, #28
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
	...

08006c30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d101      	bne.n	8006c48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c44:	2302      	movs	r3, #2
 8006c46:	e074      	b.n	8006d32 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2202      	movs	r2, #2
 8006c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a34      	ldr	r2, [pc, #208]	@ (8006d40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d009      	beq.n	8006c86 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a33      	ldr	r2, [pc, #204]	@ (8006d44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d004      	beq.n	8006c86 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a31      	ldr	r2, [pc, #196]	@ (8006d48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d108      	bne.n	8006c98 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006c8c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ca2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a21      	ldr	r2, [pc, #132]	@ (8006d40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d022      	beq.n	8006d06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cc8:	d01d      	beq.n	8006d06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a1f      	ldr	r2, [pc, #124]	@ (8006d4c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d018      	beq.n	8006d06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8006d50 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d013      	beq.n	8006d06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8006d54 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d00e      	beq.n	8006d06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a15      	ldr	r2, [pc, #84]	@ (8006d44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d009      	beq.n	8006d06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a18      	ldr	r2, [pc, #96]	@ (8006d58 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d004      	beq.n	8006d06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a11      	ldr	r2, [pc, #68]	@ (8006d48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d10c      	bne.n	8006d20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3714      	adds	r7, #20
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	40012c00 	.word	0x40012c00
 8006d44:	40013400 	.word	0x40013400
 8006d48:	40015000 	.word	0x40015000
 8006d4c:	40000400 	.word	0x40000400
 8006d50:	40000800 	.word	0x40000800
 8006d54:	40000c00 	.word	0x40000c00
 8006d58:	40014000 	.word	0x40014000

08006d5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d101      	bne.n	8006d78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d74:	2302      	movs	r3, #2
 8006d76:	e078      	b.n	8006e6a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	041b      	lsls	r3, r3, #16
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a1c      	ldr	r2, [pc, #112]	@ (8006e78 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d009      	beq.n	8006e1e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8006e7c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d004      	beq.n	8006e1e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a19      	ldr	r2, [pc, #100]	@ (8006e80 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d11c      	bne.n	8006e58 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e28:	051b      	lsls	r3, r3, #20
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	6a1b      	ldr	r3, [r3, #32]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e46:	4313      	orrs	r3, r2
 8006e48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e54:	4313      	orrs	r3, r2
 8006e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	40012c00 	.word	0x40012c00
 8006e7c:	40013400 	.word	0x40013400
 8006e80:	40015000 	.word	0x40015000

08006e84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e042      	b.n	8006fa8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d106      	bne.n	8006f3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7fa fb6d 	bl	8001614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2224      	movs	r2, #36	@ 0x24
 8006f3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f022 0201 	bic.w	r2, r2, #1
 8006f50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d002      	beq.n	8006f60 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 ff52 	bl	8007e04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fc53 	bl	800780c <UART_SetConfig>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d101      	bne.n	8006f70 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e01b      	b.n	8006fa8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689a      	ldr	r2, [r3, #8]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0201 	orr.w	r2, r2, #1
 8006f9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 ffd1 	bl	8007f48 <UART_CheckIdleState>
 8006fa6:	4603      	mov	r3, r0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b091      	sub	sp, #68	@ 0x44
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fc4:	2b20      	cmp	r3, #32
 8006fc6:	d178      	bne.n	80070ba <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d002      	beq.n	8006fd4 <HAL_UART_Transmit_IT+0x24>
 8006fce:	88fb      	ldrh	r3, [r7, #6]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e071      	b.n	80070bc <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	88fa      	ldrh	r2, [r7, #6]
 8006fe2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	88fa      	ldrh	r2, [r7, #6]
 8006fea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2221      	movs	r2, #33	@ 0x21
 8007000:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007008:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800700c:	d12a      	bne.n	8007064 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007016:	d107      	bne.n	8007028 <HAL_UART_Transmit_IT+0x78>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d103      	bne.n	8007028 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4a29      	ldr	r2, [pc, #164]	@ (80070c8 <HAL_UART_Transmit_IT+0x118>)
 8007024:	679a      	str	r2, [r3, #120]	@ 0x78
 8007026:	e002      	b.n	800702e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	4a28      	ldr	r2, [pc, #160]	@ (80070cc <HAL_UART_Transmit_IT+0x11c>)
 800702c:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3308      	adds	r3, #8
 8007034:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007038:	e853 3f00 	ldrex	r3, [r3]
 800703c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800703e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007040:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007044:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3308      	adds	r3, #8
 800704c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800704e:	637a      	str	r2, [r7, #52]	@ 0x34
 8007050:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007052:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007054:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007056:	e841 2300 	strex	r3, r2, [r1]
 800705a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800705c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1e5      	bne.n	800702e <HAL_UART_Transmit_IT+0x7e>
 8007062:	e028      	b.n	80070b6 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800706c:	d107      	bne.n	800707e <HAL_UART_Transmit_IT+0xce>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d103      	bne.n	800707e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	4a15      	ldr	r2, [pc, #84]	@ (80070d0 <HAL_UART_Transmit_IT+0x120>)
 800707a:	679a      	str	r2, [r3, #120]	@ 0x78
 800707c:	e002      	b.n	8007084 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	4a14      	ldr	r2, [pc, #80]	@ (80070d4 <HAL_UART_Transmit_IT+0x124>)
 8007082:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	e853 3f00 	ldrex	r3, [r3]
 8007090:	613b      	str	r3, [r7, #16]
   return(result);
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007098:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	461a      	mov	r2, r3
 80070a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070a2:	623b      	str	r3, [r7, #32]
 80070a4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a6:	69f9      	ldr	r1, [r7, #28]
 80070a8:	6a3a      	ldr	r2, [r7, #32]
 80070aa:	e841 2300 	strex	r3, r2, [r1]
 80070ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1e6      	bne.n	8007084 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80070b6:	2300      	movs	r3, #0
 80070b8:	e000      	b.n	80070bc <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80070ba:	2302      	movs	r3, #2
  }
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3744      	adds	r7, #68	@ 0x44
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr
 80070c8:	0800870f 	.word	0x0800870f
 80070cc:	0800862f 	.word	0x0800862f
 80070d0:	0800856d 	.word	0x0800856d
 80070d4:	080084b5 	.word	0x080084b5

080070d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b08a      	sub	sp, #40	@ 0x28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	4613      	mov	r3, r2
 80070e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070ec:	2b20      	cmp	r3, #32
 80070ee:	d137      	bne.n	8007160 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d002      	beq.n	80070fc <HAL_UART_Receive_IT+0x24>
 80070f6:	88fb      	ldrh	r3, [r7, #6]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d101      	bne.n	8007100 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e030      	b.n	8007162 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a18      	ldr	r2, [pc, #96]	@ (800716c <HAL_UART_Receive_IT+0x94>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d01f      	beq.n	8007150 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d018      	beq.n	8007150 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	e853 3f00 	ldrex	r3, [r3]
 800712a:	613b      	str	r3, [r7, #16]
   return(result);
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007132:	627b      	str	r3, [r7, #36]	@ 0x24
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	461a      	mov	r2, r3
 800713a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713c:	623b      	str	r3, [r7, #32]
 800713e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007140:	69f9      	ldr	r1, [r7, #28]
 8007142:	6a3a      	ldr	r2, [r7, #32]
 8007144:	e841 2300 	strex	r3, r2, [r1]
 8007148:	61bb      	str	r3, [r7, #24]
   return(result);
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1e6      	bne.n	800711e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007150:	88fb      	ldrh	r3, [r7, #6]
 8007152:	461a      	mov	r2, r3
 8007154:	68b9      	ldr	r1, [r7, #8]
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f001 f80e 	bl	8008178 <UART_Start_Receive_IT>
 800715c:	4603      	mov	r3, r0
 800715e:	e000      	b.n	8007162 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007160:	2302      	movs	r3, #2
  }
}
 8007162:	4618      	mov	r0, r3
 8007164:	3728      	adds	r7, #40	@ 0x28
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	40008000 	.word	0x40008000

08007170 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b0ba      	sub	sp, #232	@ 0xe8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007196:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800719a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800719e:	4013      	ands	r3, r2
 80071a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80071a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d11b      	bne.n	80071e4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80071ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071b0:	f003 0320 	and.w	r3, r3, #32
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d015      	beq.n	80071e4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80071b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071bc:	f003 0320 	and.w	r3, r3, #32
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d105      	bne.n	80071d0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80071c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d009      	beq.n	80071e4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 82e3 	beq.w	80077a0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	4798      	blx	r3
      }
      return;
 80071e2:	e2dd      	b.n	80077a0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80071e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 8123 	beq.w	8007434 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80071ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80071f2:	4b8d      	ldr	r3, [pc, #564]	@ (8007428 <HAL_UART_IRQHandler+0x2b8>)
 80071f4:	4013      	ands	r3, r2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d106      	bne.n	8007208 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80071fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80071fe:	4b8b      	ldr	r3, [pc, #556]	@ (800742c <HAL_UART_IRQHandler+0x2bc>)
 8007200:	4013      	ands	r3, r2
 8007202:	2b00      	cmp	r3, #0
 8007204:	f000 8116 	beq.w	8007434 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b00      	cmp	r3, #0
 8007212:	d011      	beq.n	8007238 <HAL_UART_IRQHandler+0xc8>
 8007214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00b      	beq.n	8007238 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2201      	movs	r2, #1
 8007226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800722e:	f043 0201 	orr.w	r2, r3, #1
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800723c:	f003 0302 	and.w	r3, r3, #2
 8007240:	2b00      	cmp	r3, #0
 8007242:	d011      	beq.n	8007268 <HAL_UART_IRQHandler+0xf8>
 8007244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007248:	f003 0301 	and.w	r3, r3, #1
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00b      	beq.n	8007268 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2202      	movs	r2, #2
 8007256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800725e:	f043 0204 	orr.w	r2, r3, #4
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800726c:	f003 0304 	and.w	r3, r3, #4
 8007270:	2b00      	cmp	r3, #0
 8007272:	d011      	beq.n	8007298 <HAL_UART_IRQHandler+0x128>
 8007274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00b      	beq.n	8007298 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2204      	movs	r2, #4
 8007286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800728e:	f043 0202 	orr.w	r2, r3, #2
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800729c:	f003 0308 	and.w	r3, r3, #8
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d017      	beq.n	80072d4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80072a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072a8:	f003 0320 	and.w	r3, r3, #32
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d105      	bne.n	80072bc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80072b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80072b4:	4b5c      	ldr	r3, [pc, #368]	@ (8007428 <HAL_UART_IRQHandler+0x2b8>)
 80072b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00b      	beq.n	80072d4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2208      	movs	r2, #8
 80072c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ca:	f043 0208 	orr.w	r2, r3, #8
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80072d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d012      	beq.n	8007306 <HAL_UART_IRQHandler+0x196>
 80072e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00c      	beq.n	8007306 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80072f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072fc:	f043 0220 	orr.w	r2, r3, #32
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800730c:	2b00      	cmp	r3, #0
 800730e:	f000 8249 	beq.w	80077a4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007316:	f003 0320 	and.w	r3, r3, #32
 800731a:	2b00      	cmp	r3, #0
 800731c:	d013      	beq.n	8007346 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800731e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007322:	f003 0320 	and.w	r3, r3, #32
 8007326:	2b00      	cmp	r3, #0
 8007328:	d105      	bne.n	8007336 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800732a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800732e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d007      	beq.n	8007346 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800733a:	2b00      	cmp	r3, #0
 800733c:	d003      	beq.n	8007346 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800734c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800735a:	2b40      	cmp	r3, #64	@ 0x40
 800735c:	d005      	beq.n	800736a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800735e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007362:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007366:	2b00      	cmp	r3, #0
 8007368:	d054      	beq.n	8007414 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f001 f826 	bl	80083bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800737a:	2b40      	cmp	r3, #64	@ 0x40
 800737c:	d146      	bne.n	800740c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	3308      	adds	r3, #8
 8007384:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007388:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800738c:	e853 3f00 	ldrex	r3, [r3]
 8007390:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007394:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007398:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800739c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	3308      	adds	r3, #8
 80073a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80073aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80073ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80073b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80073c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1d9      	bne.n	800737e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d017      	beq.n	8007404 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073da:	4a15      	ldr	r2, [pc, #84]	@ (8007430 <HAL_UART_IRQHandler+0x2c0>)
 80073dc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fc fc61 	bl	8003cac <HAL_DMA_Abort_IT>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d019      	beq.n	8007424 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80073fe:	4610      	mov	r0, r2
 8007400:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007402:	e00f      	b.n	8007424 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 f9eb 	bl	80077e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800740a:	e00b      	b.n	8007424 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f9e7 	bl	80077e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007412:	e007      	b.n	8007424 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f9e3 	bl	80077e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007422:	e1bf      	b.n	80077a4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007424:	bf00      	nop
    return;
 8007426:	e1bd      	b.n	80077a4 <HAL_UART_IRQHandler+0x634>
 8007428:	10000001 	.word	0x10000001
 800742c:	04000120 	.word	0x04000120
 8007430:	08008489 	.word	0x08008489

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007438:	2b01      	cmp	r3, #1
 800743a:	f040 8153 	bne.w	80076e4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800743e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007442:	f003 0310 	and.w	r3, r3, #16
 8007446:	2b00      	cmp	r3, #0
 8007448:	f000 814c 	beq.w	80076e4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800744c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007450:	f003 0310 	and.w	r3, r3, #16
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 8145 	beq.w	80076e4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2210      	movs	r2, #16
 8007460:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800746c:	2b40      	cmp	r3, #64	@ 0x40
 800746e:	f040 80bb 	bne.w	80075e8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007480:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 818f 	beq.w	80077a8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007490:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007494:	429a      	cmp	r2, r3
 8007496:	f080 8187 	bcs.w	80077a8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80074a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 0320 	and.w	r3, r3, #32
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f040 8087 	bne.w	80075c6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80074cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80074d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	461a      	mov	r2, r3
 80074de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80074e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80074e6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80074ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80074f2:	e841 2300 	strex	r3, r2, [r1]
 80074f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80074fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1da      	bne.n	80074b8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	3308      	adds	r3, #8
 8007508:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800750c:	e853 3f00 	ldrex	r3, [r3]
 8007510:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007512:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007514:	f023 0301 	bic.w	r3, r3, #1
 8007518:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3308      	adds	r3, #8
 8007522:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007526:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800752a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800752e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007538:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e1      	bne.n	8007502 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	3308      	adds	r3, #8
 8007544:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007546:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007548:	e853 3f00 	ldrex	r3, [r3]
 800754c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800754e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007550:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007554:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3308      	adds	r3, #8
 800755e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007562:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007564:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007566:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007568:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800756a:	e841 2300 	strex	r3, r2, [r1]
 800756e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007570:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1e3      	bne.n	800753e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2220      	movs	r2, #32
 800757a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800758c:	e853 3f00 	ldrex	r3, [r3]
 8007590:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007592:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007594:	f023 0310 	bic.w	r3, r3, #16
 8007598:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	461a      	mov	r2, r3
 80075a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80075ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80075ae:	e841 2300 	strex	r3, r2, [r1]
 80075b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80075b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1e4      	bne.n	8007584 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7fc fb1a 	bl	8003bfa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2202      	movs	r2, #2
 80075ca:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075d8:	b29b      	uxth	r3, r3
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	b29b      	uxth	r3, r3
 80075de:	4619      	mov	r1, r3
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f907 	bl	80077f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075e6:	e0df      	b.n	80077a8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007602:	b29b      	uxth	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 80d1 	beq.w	80077ac <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800760a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800760e:	2b00      	cmp	r3, #0
 8007610:	f000 80cc 	beq.w	80077ac <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800761c:	e853 3f00 	ldrex	r3, [r3]
 8007620:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007624:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007628:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	461a      	mov	r2, r3
 8007632:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007636:	647b      	str	r3, [r7, #68]	@ 0x44
 8007638:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800763c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800763e:	e841 2300 	strex	r3, r2, [r1]
 8007642:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1e4      	bne.n	8007614 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	3308      	adds	r3, #8
 8007650:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007654:	e853 3f00 	ldrex	r3, [r3]
 8007658:	623b      	str	r3, [r7, #32]
   return(result);
 800765a:	6a3b      	ldr	r3, [r7, #32]
 800765c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007660:	f023 0301 	bic.w	r3, r3, #1
 8007664:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	3308      	adds	r3, #8
 800766e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007672:	633a      	str	r2, [r7, #48]	@ 0x30
 8007674:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007676:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007678:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800767a:	e841 2300 	strex	r3, r2, [r1]
 800767e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1e1      	bne.n	800764a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2220      	movs	r2, #32
 800768a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	e853 3f00 	ldrex	r3, [r3]
 80076a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f023 0310 	bic.w	r3, r3, #16
 80076ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	461a      	mov	r2, r3
 80076b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80076bc:	61fb      	str	r3, [r7, #28]
 80076be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c0:	69b9      	ldr	r1, [r7, #24]
 80076c2:	69fa      	ldr	r2, [r7, #28]
 80076c4:	e841 2300 	strex	r3, r2, [r1]
 80076c8:	617b      	str	r3, [r7, #20]
   return(result);
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1e4      	bne.n	800769a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2202      	movs	r2, #2
 80076d4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80076da:	4619      	mov	r1, r3
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f889 	bl	80077f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076e2:	e063      	b.n	80077ac <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80076e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00e      	beq.n	800770e <HAL_UART_IRQHandler+0x59e>
 80076f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d008      	beq.n	800770e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007704:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f001 fdbe 	bl	8009288 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800770c:	e051      	b.n	80077b2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800770e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007716:	2b00      	cmp	r3, #0
 8007718:	d014      	beq.n	8007744 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800771a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800771e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007722:	2b00      	cmp	r3, #0
 8007724:	d105      	bne.n	8007732 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800772a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d008      	beq.n	8007744 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007736:	2b00      	cmp	r3, #0
 8007738:	d03a      	beq.n	80077b0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	4798      	blx	r3
    }
    return;
 8007742:	e035      	b.n	80077b0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800774c:	2b00      	cmp	r3, #0
 800774e:	d009      	beq.n	8007764 <HAL_UART_IRQHandler+0x5f4>
 8007750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007758:	2b00      	cmp	r3, #0
 800775a:	d003      	beq.n	8007764 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f001 f84b 	bl	80087f8 <UART_EndTransmit_IT>
    return;
 8007762:	e026      	b.n	80077b2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007768:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d009      	beq.n	8007784 <HAL_UART_IRQHandler+0x614>
 8007770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007774:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d003      	beq.n	8007784 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f001 fd97 	bl	80092b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007782:	e016      	b.n	80077b2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007788:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d010      	beq.n	80077b2 <HAL_UART_IRQHandler+0x642>
 8007790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007794:	2b00      	cmp	r3, #0
 8007796:	da0c      	bge.n	80077b2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f001 fd7f 	bl	800929c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800779e:	e008      	b.n	80077b2 <HAL_UART_IRQHandler+0x642>
      return;
 80077a0:	bf00      	nop
 80077a2:	e006      	b.n	80077b2 <HAL_UART_IRQHandler+0x642>
    return;
 80077a4:	bf00      	nop
 80077a6:	e004      	b.n	80077b2 <HAL_UART_IRQHandler+0x642>
      return;
 80077a8:	bf00      	nop
 80077aa:	e002      	b.n	80077b2 <HAL_UART_IRQHandler+0x642>
      return;
 80077ac:	bf00      	nop
 80077ae:	e000      	b.n	80077b2 <HAL_UART_IRQHandler+0x642>
    return;
 80077b0:	bf00      	nop
  }
}
 80077b2:	37e8      	adds	r7, #232	@ 0xe8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	460b      	mov	r3, r1
 80077fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800780c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007810:	b08c      	sub	sp, #48	@ 0x30
 8007812:	af00      	add	r7, sp, #0
 8007814:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007816:	2300      	movs	r3, #0
 8007818:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	689a      	ldr	r2, [r3, #8]
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	431a      	orrs	r2, r3
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	431a      	orrs	r2, r3
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	69db      	ldr	r3, [r3, #28]
 8007830:	4313      	orrs	r3, r2
 8007832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	4baa      	ldr	r3, [pc, #680]	@ (8007ae4 <UART_SetConfig+0x2d8>)
 800783c:	4013      	ands	r3, r2
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	6812      	ldr	r2, [r2, #0]
 8007842:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007844:	430b      	orrs	r3, r1
 8007846:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	68da      	ldr	r2, [r3, #12]
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	430a      	orrs	r2, r1
 800785c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a9f      	ldr	r2, [pc, #636]	@ (8007ae8 <UART_SetConfig+0x2dc>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d004      	beq.n	8007878 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	6a1b      	ldr	r3, [r3, #32]
 8007872:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007874:	4313      	orrs	r3, r2
 8007876:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007882:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	6812      	ldr	r2, [r2, #0]
 800788a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800788c:	430b      	orrs	r3, r1
 800788e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007896:	f023 010f 	bic.w	r1, r3, #15
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	430a      	orrs	r2, r1
 80078a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a90      	ldr	r2, [pc, #576]	@ (8007aec <UART_SetConfig+0x2e0>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d125      	bne.n	80078fc <UART_SetConfig+0xf0>
 80078b0:	4b8f      	ldr	r3, [pc, #572]	@ (8007af0 <UART_SetConfig+0x2e4>)
 80078b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078b6:	f003 0303 	and.w	r3, r3, #3
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	d81a      	bhi.n	80078f4 <UART_SetConfig+0xe8>
 80078be:	a201      	add	r2, pc, #4	@ (adr r2, 80078c4 <UART_SetConfig+0xb8>)
 80078c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c4:	080078d5 	.word	0x080078d5
 80078c8:	080078e5 	.word	0x080078e5
 80078cc:	080078dd 	.word	0x080078dd
 80078d0:	080078ed 	.word	0x080078ed
 80078d4:	2301      	movs	r3, #1
 80078d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078da:	e116      	b.n	8007b0a <UART_SetConfig+0x2fe>
 80078dc:	2302      	movs	r3, #2
 80078de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078e2:	e112      	b.n	8007b0a <UART_SetConfig+0x2fe>
 80078e4:	2304      	movs	r3, #4
 80078e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078ea:	e10e      	b.n	8007b0a <UART_SetConfig+0x2fe>
 80078ec:	2308      	movs	r3, #8
 80078ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078f2:	e10a      	b.n	8007b0a <UART_SetConfig+0x2fe>
 80078f4:	2310      	movs	r3, #16
 80078f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078fa:	e106      	b.n	8007b0a <UART_SetConfig+0x2fe>
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a7c      	ldr	r2, [pc, #496]	@ (8007af4 <UART_SetConfig+0x2e8>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d138      	bne.n	8007978 <UART_SetConfig+0x16c>
 8007906:	4b7a      	ldr	r3, [pc, #488]	@ (8007af0 <UART_SetConfig+0x2e4>)
 8007908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800790c:	f003 030c 	and.w	r3, r3, #12
 8007910:	2b0c      	cmp	r3, #12
 8007912:	d82d      	bhi.n	8007970 <UART_SetConfig+0x164>
 8007914:	a201      	add	r2, pc, #4	@ (adr r2, 800791c <UART_SetConfig+0x110>)
 8007916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791a:	bf00      	nop
 800791c:	08007951 	.word	0x08007951
 8007920:	08007971 	.word	0x08007971
 8007924:	08007971 	.word	0x08007971
 8007928:	08007971 	.word	0x08007971
 800792c:	08007961 	.word	0x08007961
 8007930:	08007971 	.word	0x08007971
 8007934:	08007971 	.word	0x08007971
 8007938:	08007971 	.word	0x08007971
 800793c:	08007959 	.word	0x08007959
 8007940:	08007971 	.word	0x08007971
 8007944:	08007971 	.word	0x08007971
 8007948:	08007971 	.word	0x08007971
 800794c:	08007969 	.word	0x08007969
 8007950:	2300      	movs	r3, #0
 8007952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007956:	e0d8      	b.n	8007b0a <UART_SetConfig+0x2fe>
 8007958:	2302      	movs	r3, #2
 800795a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800795e:	e0d4      	b.n	8007b0a <UART_SetConfig+0x2fe>
 8007960:	2304      	movs	r3, #4
 8007962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007966:	e0d0      	b.n	8007b0a <UART_SetConfig+0x2fe>
 8007968:	2308      	movs	r3, #8
 800796a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800796e:	e0cc      	b.n	8007b0a <UART_SetConfig+0x2fe>
 8007970:	2310      	movs	r3, #16
 8007972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007976:	e0c8      	b.n	8007b0a <UART_SetConfig+0x2fe>
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a5e      	ldr	r2, [pc, #376]	@ (8007af8 <UART_SetConfig+0x2ec>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d125      	bne.n	80079ce <UART_SetConfig+0x1c2>
 8007982:	4b5b      	ldr	r3, [pc, #364]	@ (8007af0 <UART_SetConfig+0x2e4>)
 8007984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007988:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800798c:	2b30      	cmp	r3, #48	@ 0x30
 800798e:	d016      	beq.n	80079be <UART_SetConfig+0x1b2>
 8007990:	2b30      	cmp	r3, #48	@ 0x30
 8007992:	d818      	bhi.n	80079c6 <UART_SetConfig+0x1ba>
 8007994:	2b20      	cmp	r3, #32
 8007996:	d00a      	beq.n	80079ae <UART_SetConfig+0x1a2>
 8007998:	2b20      	cmp	r3, #32
 800799a:	d814      	bhi.n	80079c6 <UART_SetConfig+0x1ba>
 800799c:	2b00      	cmp	r3, #0
 800799e:	d002      	beq.n	80079a6 <UART_SetConfig+0x19a>
 80079a0:	2b10      	cmp	r3, #16
 80079a2:	d008      	beq.n	80079b6 <UART_SetConfig+0x1aa>
 80079a4:	e00f      	b.n	80079c6 <UART_SetConfig+0x1ba>
 80079a6:	2300      	movs	r3, #0
 80079a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079ac:	e0ad      	b.n	8007b0a <UART_SetConfig+0x2fe>
 80079ae:	2302      	movs	r3, #2
 80079b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079b4:	e0a9      	b.n	8007b0a <UART_SetConfig+0x2fe>
 80079b6:	2304      	movs	r3, #4
 80079b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079bc:	e0a5      	b.n	8007b0a <UART_SetConfig+0x2fe>
 80079be:	2308      	movs	r3, #8
 80079c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079c4:	e0a1      	b.n	8007b0a <UART_SetConfig+0x2fe>
 80079c6:	2310      	movs	r3, #16
 80079c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079cc:	e09d      	b.n	8007b0a <UART_SetConfig+0x2fe>
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a4a      	ldr	r2, [pc, #296]	@ (8007afc <UART_SetConfig+0x2f0>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d125      	bne.n	8007a24 <UART_SetConfig+0x218>
 80079d8:	4b45      	ldr	r3, [pc, #276]	@ (8007af0 <UART_SetConfig+0x2e4>)
 80079da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80079e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80079e4:	d016      	beq.n	8007a14 <UART_SetConfig+0x208>
 80079e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80079e8:	d818      	bhi.n	8007a1c <UART_SetConfig+0x210>
 80079ea:	2b80      	cmp	r3, #128	@ 0x80
 80079ec:	d00a      	beq.n	8007a04 <UART_SetConfig+0x1f8>
 80079ee:	2b80      	cmp	r3, #128	@ 0x80
 80079f0:	d814      	bhi.n	8007a1c <UART_SetConfig+0x210>
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d002      	beq.n	80079fc <UART_SetConfig+0x1f0>
 80079f6:	2b40      	cmp	r3, #64	@ 0x40
 80079f8:	d008      	beq.n	8007a0c <UART_SetConfig+0x200>
 80079fa:	e00f      	b.n	8007a1c <UART_SetConfig+0x210>
 80079fc:	2300      	movs	r3, #0
 80079fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a02:	e082      	b.n	8007b0a <UART_SetConfig+0x2fe>
 8007a04:	2302      	movs	r3, #2
 8007a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a0a:	e07e      	b.n	8007b0a <UART_SetConfig+0x2fe>
 8007a0c:	2304      	movs	r3, #4
 8007a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a12:	e07a      	b.n	8007b0a <UART_SetConfig+0x2fe>
 8007a14:	2308      	movs	r3, #8
 8007a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a1a:	e076      	b.n	8007b0a <UART_SetConfig+0x2fe>
 8007a1c:	2310      	movs	r3, #16
 8007a1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a22:	e072      	b.n	8007b0a <UART_SetConfig+0x2fe>
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a35      	ldr	r2, [pc, #212]	@ (8007b00 <UART_SetConfig+0x2f4>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d12a      	bne.n	8007a84 <UART_SetConfig+0x278>
 8007a2e:	4b30      	ldr	r3, [pc, #192]	@ (8007af0 <UART_SetConfig+0x2e4>)
 8007a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a3c:	d01a      	beq.n	8007a74 <UART_SetConfig+0x268>
 8007a3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a42:	d81b      	bhi.n	8007a7c <UART_SetConfig+0x270>
 8007a44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a48:	d00c      	beq.n	8007a64 <UART_SetConfig+0x258>
 8007a4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a4e:	d815      	bhi.n	8007a7c <UART_SetConfig+0x270>
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d003      	beq.n	8007a5c <UART_SetConfig+0x250>
 8007a54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a58:	d008      	beq.n	8007a6c <UART_SetConfig+0x260>
 8007a5a:	e00f      	b.n	8007a7c <UART_SetConfig+0x270>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a62:	e052      	b.n	8007b0a <UART_SetConfig+0x2fe>
 8007a64:	2302      	movs	r3, #2
 8007a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a6a:	e04e      	b.n	8007b0a <UART_SetConfig+0x2fe>
 8007a6c:	2304      	movs	r3, #4
 8007a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a72:	e04a      	b.n	8007b0a <UART_SetConfig+0x2fe>
 8007a74:	2308      	movs	r3, #8
 8007a76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a7a:	e046      	b.n	8007b0a <UART_SetConfig+0x2fe>
 8007a7c:	2310      	movs	r3, #16
 8007a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a82:	e042      	b.n	8007b0a <UART_SetConfig+0x2fe>
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a17      	ldr	r2, [pc, #92]	@ (8007ae8 <UART_SetConfig+0x2dc>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d13a      	bne.n	8007b04 <UART_SetConfig+0x2f8>
 8007a8e:	4b18      	ldr	r3, [pc, #96]	@ (8007af0 <UART_SetConfig+0x2e4>)
 8007a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007a98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a9c:	d01a      	beq.n	8007ad4 <UART_SetConfig+0x2c8>
 8007a9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007aa2:	d81b      	bhi.n	8007adc <UART_SetConfig+0x2d0>
 8007aa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007aa8:	d00c      	beq.n	8007ac4 <UART_SetConfig+0x2b8>
 8007aaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007aae:	d815      	bhi.n	8007adc <UART_SetConfig+0x2d0>
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d003      	beq.n	8007abc <UART_SetConfig+0x2b0>
 8007ab4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ab8:	d008      	beq.n	8007acc <UART_SetConfig+0x2c0>
 8007aba:	e00f      	b.n	8007adc <UART_SetConfig+0x2d0>
 8007abc:	2300      	movs	r3, #0
 8007abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ac2:	e022      	b.n	8007b0a <UART_SetConfig+0x2fe>
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aca:	e01e      	b.n	8007b0a <UART_SetConfig+0x2fe>
 8007acc:	2304      	movs	r3, #4
 8007ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ad2:	e01a      	b.n	8007b0a <UART_SetConfig+0x2fe>
 8007ad4:	2308      	movs	r3, #8
 8007ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ada:	e016      	b.n	8007b0a <UART_SetConfig+0x2fe>
 8007adc:	2310      	movs	r3, #16
 8007ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ae2:	e012      	b.n	8007b0a <UART_SetConfig+0x2fe>
 8007ae4:	cfff69f3 	.word	0xcfff69f3
 8007ae8:	40008000 	.word	0x40008000
 8007aec:	40013800 	.word	0x40013800
 8007af0:	40021000 	.word	0x40021000
 8007af4:	40004400 	.word	0x40004400
 8007af8:	40004800 	.word	0x40004800
 8007afc:	40004c00 	.word	0x40004c00
 8007b00:	40005000 	.word	0x40005000
 8007b04:	2310      	movs	r3, #16
 8007b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4aae      	ldr	r2, [pc, #696]	@ (8007dc8 <UART_SetConfig+0x5bc>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	f040 8097 	bne.w	8007c44 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007b1a:	2b08      	cmp	r3, #8
 8007b1c:	d823      	bhi.n	8007b66 <UART_SetConfig+0x35a>
 8007b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b24 <UART_SetConfig+0x318>)
 8007b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b24:	08007b49 	.word	0x08007b49
 8007b28:	08007b67 	.word	0x08007b67
 8007b2c:	08007b51 	.word	0x08007b51
 8007b30:	08007b67 	.word	0x08007b67
 8007b34:	08007b57 	.word	0x08007b57
 8007b38:	08007b67 	.word	0x08007b67
 8007b3c:	08007b67 	.word	0x08007b67
 8007b40:	08007b67 	.word	0x08007b67
 8007b44:	08007b5f 	.word	0x08007b5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b48:	f7fd f988 	bl	8004e5c <HAL_RCC_GetPCLK1Freq>
 8007b4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b4e:	e010      	b.n	8007b72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b50:	4b9e      	ldr	r3, [pc, #632]	@ (8007dcc <UART_SetConfig+0x5c0>)
 8007b52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b54:	e00d      	b.n	8007b72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b56:	f7fd f913 	bl	8004d80 <HAL_RCC_GetSysClockFreq>
 8007b5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b5c:	e009      	b.n	8007b72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b64:	e005      	b.n	8007b72 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007b66:	2300      	movs	r3, #0
 8007b68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007b70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 8130 	beq.w	8007dda <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b7e:	4a94      	ldr	r2, [pc, #592]	@ (8007dd0 <UART_SetConfig+0x5c4>)
 8007b80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b84:	461a      	mov	r2, r3
 8007b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b88:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b8c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	685a      	ldr	r2, [r3, #4]
 8007b92:	4613      	mov	r3, r2
 8007b94:	005b      	lsls	r3, r3, #1
 8007b96:	4413      	add	r3, r2
 8007b98:	69ba      	ldr	r2, [r7, #24]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d305      	bcc.n	8007baa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ba4:	69ba      	ldr	r2, [r7, #24]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d903      	bls.n	8007bb2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007bb0:	e113      	b.n	8007dda <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	60bb      	str	r3, [r7, #8]
 8007bb8:	60fa      	str	r2, [r7, #12]
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bbe:	4a84      	ldr	r2, [pc, #528]	@ (8007dd0 <UART_SetConfig+0x5c4>)
 8007bc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	603b      	str	r3, [r7, #0]
 8007bca:	607a      	str	r2, [r7, #4]
 8007bcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007bd4:	f7f8 fb20 	bl	8000218 <__aeabi_uldivmod>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	460b      	mov	r3, r1
 8007bdc:	4610      	mov	r0, r2
 8007bde:	4619      	mov	r1, r3
 8007be0:	f04f 0200 	mov.w	r2, #0
 8007be4:	f04f 0300 	mov.w	r3, #0
 8007be8:	020b      	lsls	r3, r1, #8
 8007bea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007bee:	0202      	lsls	r2, r0, #8
 8007bf0:	6979      	ldr	r1, [r7, #20]
 8007bf2:	6849      	ldr	r1, [r1, #4]
 8007bf4:	0849      	lsrs	r1, r1, #1
 8007bf6:	2000      	movs	r0, #0
 8007bf8:	460c      	mov	r4, r1
 8007bfa:	4605      	mov	r5, r0
 8007bfc:	eb12 0804 	adds.w	r8, r2, r4
 8007c00:	eb43 0905 	adc.w	r9, r3, r5
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	469a      	mov	sl, r3
 8007c0c:	4693      	mov	fp, r2
 8007c0e:	4652      	mov	r2, sl
 8007c10:	465b      	mov	r3, fp
 8007c12:	4640      	mov	r0, r8
 8007c14:	4649      	mov	r1, r9
 8007c16:	f7f8 faff 	bl	8000218 <__aeabi_uldivmod>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	4613      	mov	r3, r2
 8007c20:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c28:	d308      	bcc.n	8007c3c <UART_SetConfig+0x430>
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c30:	d204      	bcs.n	8007c3c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6a3a      	ldr	r2, [r7, #32]
 8007c38:	60da      	str	r2, [r3, #12]
 8007c3a:	e0ce      	b.n	8007dda <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007c42:	e0ca      	b.n	8007dda <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	69db      	ldr	r3, [r3, #28]
 8007c48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c4c:	d166      	bne.n	8007d1c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007c4e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c52:	2b08      	cmp	r3, #8
 8007c54:	d827      	bhi.n	8007ca6 <UART_SetConfig+0x49a>
 8007c56:	a201      	add	r2, pc, #4	@ (adr r2, 8007c5c <UART_SetConfig+0x450>)
 8007c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5c:	08007c81 	.word	0x08007c81
 8007c60:	08007c89 	.word	0x08007c89
 8007c64:	08007c91 	.word	0x08007c91
 8007c68:	08007ca7 	.word	0x08007ca7
 8007c6c:	08007c97 	.word	0x08007c97
 8007c70:	08007ca7 	.word	0x08007ca7
 8007c74:	08007ca7 	.word	0x08007ca7
 8007c78:	08007ca7 	.word	0x08007ca7
 8007c7c:	08007c9f 	.word	0x08007c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c80:	f7fd f8ec 	bl	8004e5c <HAL_RCC_GetPCLK1Freq>
 8007c84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c86:	e014      	b.n	8007cb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c88:	f7fd f8fe 	bl	8004e88 <HAL_RCC_GetPCLK2Freq>
 8007c8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c8e:	e010      	b.n	8007cb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c90:	4b4e      	ldr	r3, [pc, #312]	@ (8007dcc <UART_SetConfig+0x5c0>)
 8007c92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c94:	e00d      	b.n	8007cb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c96:	f7fd f873 	bl	8004d80 <HAL_RCC_GetSysClockFreq>
 8007c9a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c9c:	e009      	b.n	8007cb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ca2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ca4:	e005      	b.n	8007cb2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007cb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 8090 	beq.w	8007dda <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cbe:	4a44      	ldr	r2, [pc, #272]	@ (8007dd0 <UART_SetConfig+0x5c4>)
 8007cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ccc:	005a      	lsls	r2, r3, #1
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	085b      	lsrs	r3, r3, #1
 8007cd4:	441a      	add	r2, r3
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cde:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	2b0f      	cmp	r3, #15
 8007ce4:	d916      	bls.n	8007d14 <UART_SetConfig+0x508>
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cec:	d212      	bcs.n	8007d14 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cee:	6a3b      	ldr	r3, [r7, #32]
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	f023 030f 	bic.w	r3, r3, #15
 8007cf6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cf8:	6a3b      	ldr	r3, [r7, #32]
 8007cfa:	085b      	lsrs	r3, r3, #1
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	f003 0307 	and.w	r3, r3, #7
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	8bfb      	ldrh	r3, [r7, #30]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	8bfa      	ldrh	r2, [r7, #30]
 8007d10:	60da      	str	r2, [r3, #12]
 8007d12:	e062      	b.n	8007dda <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007d1a:	e05e      	b.n	8007dda <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d1c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007d20:	2b08      	cmp	r3, #8
 8007d22:	d828      	bhi.n	8007d76 <UART_SetConfig+0x56a>
 8007d24:	a201      	add	r2, pc, #4	@ (adr r2, 8007d2c <UART_SetConfig+0x520>)
 8007d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2a:	bf00      	nop
 8007d2c:	08007d51 	.word	0x08007d51
 8007d30:	08007d59 	.word	0x08007d59
 8007d34:	08007d61 	.word	0x08007d61
 8007d38:	08007d77 	.word	0x08007d77
 8007d3c:	08007d67 	.word	0x08007d67
 8007d40:	08007d77 	.word	0x08007d77
 8007d44:	08007d77 	.word	0x08007d77
 8007d48:	08007d77 	.word	0x08007d77
 8007d4c:	08007d6f 	.word	0x08007d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d50:	f7fd f884 	bl	8004e5c <HAL_RCC_GetPCLK1Freq>
 8007d54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d56:	e014      	b.n	8007d82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d58:	f7fd f896 	bl	8004e88 <HAL_RCC_GetPCLK2Freq>
 8007d5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d5e:	e010      	b.n	8007d82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d60:	4b1a      	ldr	r3, [pc, #104]	@ (8007dcc <UART_SetConfig+0x5c0>)
 8007d62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d64:	e00d      	b.n	8007d82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d66:	f7fd f80b 	bl	8004d80 <HAL_RCC_GetSysClockFreq>
 8007d6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d6c:	e009      	b.n	8007d82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d74:	e005      	b.n	8007d82 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007d80:	bf00      	nop
    }

    if (pclk != 0U)
 8007d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d028      	beq.n	8007dda <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d8c:	4a10      	ldr	r2, [pc, #64]	@ (8007dd0 <UART_SetConfig+0x5c4>)
 8007d8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d92:	461a      	mov	r2, r3
 8007d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d96:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	085b      	lsrs	r3, r3, #1
 8007da0:	441a      	add	r2, r3
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007daa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dac:	6a3b      	ldr	r3, [r7, #32]
 8007dae:	2b0f      	cmp	r3, #15
 8007db0:	d910      	bls.n	8007dd4 <UART_SetConfig+0x5c8>
 8007db2:	6a3b      	ldr	r3, [r7, #32]
 8007db4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007db8:	d20c      	bcs.n	8007dd4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007dba:	6a3b      	ldr	r3, [r7, #32]
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	60da      	str	r2, [r3, #12]
 8007dc4:	e009      	b.n	8007dda <UART_SetConfig+0x5ce>
 8007dc6:	bf00      	nop
 8007dc8:	40008000 	.word	0x40008000
 8007dcc:	00f42400 	.word	0x00f42400
 8007dd0:	080095c0 	.word	0x080095c0
      }
      else
      {
        ret = HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	2200      	movs	r2, #0
 8007dee:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	2200      	movs	r2, #0
 8007df4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007df6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3730      	adds	r7, #48	@ 0x30
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007e04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e10:	f003 0308 	and.w	r3, r3, #8
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00a      	beq.n	8007e2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e32:	f003 0301 	and.w	r3, r3, #1
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e54:	f003 0302 	and.w	r3, r3, #2
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00a      	beq.n	8007e72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e76:	f003 0304 	and.w	r3, r3, #4
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00a      	beq.n	8007e94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	430a      	orrs	r2, r1
 8007e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e98:	f003 0310 	and.w	r3, r3, #16
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00a      	beq.n	8007eb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eba:	f003 0320 	and.w	r3, r3, #32
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00a      	beq.n	8007ed8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	430a      	orrs	r2, r1
 8007ed6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d01a      	beq.n	8007f1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	430a      	orrs	r2, r1
 8007ef8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007efe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f02:	d10a      	bne.n	8007f1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	430a      	orrs	r2, r1
 8007f18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00a      	beq.n	8007f3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	430a      	orrs	r2, r1
 8007f3a:	605a      	str	r2, [r3, #4]
  }
}
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b098      	sub	sp, #96	@ 0x60
 8007f4c:	af02      	add	r7, sp, #8
 8007f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f58:	f7f9 fdee 	bl	8001b38 <HAL_GetTick>
 8007f5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 0308 	and.w	r3, r3, #8
 8007f68:	2b08      	cmp	r3, #8
 8007f6a:	d12f      	bne.n	8007fcc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f74:	2200      	movs	r2, #0
 8007f76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f88e 	bl	800809c <UART_WaitOnFlagUntilTimeout>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d022      	beq.n	8007fcc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8e:	e853 3f00 	ldrex	r3, [r3]
 8007f92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fa6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007faa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fac:	e841 2300 	strex	r3, r2, [r1]
 8007fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1e6      	bne.n	8007f86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2220      	movs	r2, #32
 8007fbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e063      	b.n	8008094 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 0304 	and.w	r3, r3, #4
 8007fd6:	2b04      	cmp	r3, #4
 8007fd8:	d149      	bne.n	800806e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fda:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007fde:	9300      	str	r3, [sp, #0]
 8007fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f857 	bl	800809c <UART_WaitOnFlagUntilTimeout>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d03c      	beq.n	800806e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffc:	e853 3f00 	ldrex	r3, [r3]
 8008000:	623b      	str	r3, [r7, #32]
   return(result);
 8008002:	6a3b      	ldr	r3, [r7, #32]
 8008004:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008008:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	461a      	mov	r2, r3
 8008010:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008012:	633b      	str	r3, [r7, #48]	@ 0x30
 8008014:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008016:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800801a:	e841 2300 	strex	r3, r2, [r1]
 800801e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1e6      	bne.n	8007ff4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	3308      	adds	r3, #8
 800802c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	e853 3f00 	ldrex	r3, [r3]
 8008034:	60fb      	str	r3, [r7, #12]
   return(result);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f023 0301 	bic.w	r3, r3, #1
 800803c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	3308      	adds	r3, #8
 8008044:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008046:	61fa      	str	r2, [r7, #28]
 8008048:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804a:	69b9      	ldr	r1, [r7, #24]
 800804c:	69fa      	ldr	r2, [r7, #28]
 800804e:	e841 2300 	strex	r3, r2, [r1]
 8008052:	617b      	str	r3, [r7, #20]
   return(result);
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1e5      	bne.n	8008026 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2220      	movs	r2, #32
 800805e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	e012      	b.n	8008094 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2220      	movs	r2, #32
 8008072:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2220      	movs	r2, #32
 800807a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3758      	adds	r7, #88	@ 0x58
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	603b      	str	r3, [r7, #0]
 80080a8:	4613      	mov	r3, r2
 80080aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080ac:	e04f      	b.n	800814e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b4:	d04b      	beq.n	800814e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080b6:	f7f9 fd3f 	bl	8001b38 <HAL_GetTick>
 80080ba:	4602      	mov	r2, r0
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	69ba      	ldr	r2, [r7, #24]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d302      	bcc.n	80080cc <UART_WaitOnFlagUntilTimeout+0x30>
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d101      	bne.n	80080d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e04e      	b.n	800816e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0304 	and.w	r3, r3, #4
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d037      	beq.n	800814e <UART_WaitOnFlagUntilTimeout+0xb2>
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	2b80      	cmp	r3, #128	@ 0x80
 80080e2:	d034      	beq.n	800814e <UART_WaitOnFlagUntilTimeout+0xb2>
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2b40      	cmp	r3, #64	@ 0x40
 80080e8:	d031      	beq.n	800814e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	69db      	ldr	r3, [r3, #28]
 80080f0:	f003 0308 	and.w	r3, r3, #8
 80080f4:	2b08      	cmp	r3, #8
 80080f6:	d110      	bne.n	800811a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2208      	movs	r2, #8
 80080fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f000 f95b 	bl	80083bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2208      	movs	r2, #8
 800810a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e029      	b.n	800816e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	69db      	ldr	r3, [r3, #28]
 8008120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008124:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008128:	d111      	bne.n	800814e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008132:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f000 f941 	bl	80083bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2220      	movs	r2, #32
 800813e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800814a:	2303      	movs	r3, #3
 800814c:	e00f      	b.n	800816e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	69da      	ldr	r2, [r3, #28]
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	4013      	ands	r3, r2
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	429a      	cmp	r2, r3
 800815c:	bf0c      	ite	eq
 800815e:	2301      	moveq	r3, #1
 8008160:	2300      	movne	r3, #0
 8008162:	b2db      	uxtb	r3, r3
 8008164:	461a      	mov	r2, r3
 8008166:	79fb      	ldrb	r3, [r7, #7]
 8008168:	429a      	cmp	r2, r3
 800816a:	d0a0      	beq.n	80080ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
	...

08008178 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008178:	b480      	push	{r7}
 800817a:	b0a3      	sub	sp, #140	@ 0x8c
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	4613      	mov	r3, r2
 8008184:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	68ba      	ldr	r2, [r7, #8]
 800818a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	88fa      	ldrh	r2, [r7, #6]
 8008190:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	88fa      	ldrh	r2, [r7, #6]
 8008198:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2200      	movs	r2, #0
 80081a0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081aa:	d10e      	bne.n	80081ca <UART_Start_Receive_IT+0x52>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d105      	bne.n	80081c0 <UART_Start_Receive_IT+0x48>
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80081ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80081be:	e02d      	b.n	800821c <UART_Start_Receive_IT+0xa4>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	22ff      	movs	r2, #255	@ 0xff
 80081c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80081c8:	e028      	b.n	800821c <UART_Start_Receive_IT+0xa4>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10d      	bne.n	80081ee <UART_Start_Receive_IT+0x76>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d104      	bne.n	80081e4 <UART_Start_Receive_IT+0x6c>
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	22ff      	movs	r2, #255	@ 0xff
 80081de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80081e2:	e01b      	b.n	800821c <UART_Start_Receive_IT+0xa4>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	227f      	movs	r2, #127	@ 0x7f
 80081e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80081ec:	e016      	b.n	800821c <UART_Start_Receive_IT+0xa4>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081f6:	d10d      	bne.n	8008214 <UART_Start_Receive_IT+0x9c>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d104      	bne.n	800820a <UART_Start_Receive_IT+0x92>
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	227f      	movs	r2, #127	@ 0x7f
 8008204:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008208:	e008      	b.n	800821c <UART_Start_Receive_IT+0xa4>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	223f      	movs	r2, #63	@ 0x3f
 800820e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008212:	e003      	b.n	800821c <UART_Start_Receive_IT+0xa4>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2222      	movs	r2, #34	@ 0x22
 8008228:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	3308      	adds	r3, #8
 8008232:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008234:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008236:	e853 3f00 	ldrex	r3, [r3]
 800823a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800823c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800823e:	f043 0301 	orr.w	r3, r3, #1
 8008242:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	3308      	adds	r3, #8
 800824c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008250:	673a      	str	r2, [r7, #112]	@ 0x70
 8008252:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008254:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008256:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008258:	e841 2300 	strex	r3, r2, [r1]
 800825c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800825e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1e3      	bne.n	800822c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008268:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800826c:	d14f      	bne.n	800830e <UART_Start_Receive_IT+0x196>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008274:	88fa      	ldrh	r2, [r7, #6]
 8008276:	429a      	cmp	r2, r3
 8008278:	d349      	bcc.n	800830e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008282:	d107      	bne.n	8008294 <UART_Start_Receive_IT+0x11c>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d103      	bne.n	8008294 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	4a47      	ldr	r2, [pc, #284]	@ (80083ac <UART_Start_Receive_IT+0x234>)
 8008290:	675a      	str	r2, [r3, #116]	@ 0x74
 8008292:	e002      	b.n	800829a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	4a46      	ldr	r2, [pc, #280]	@ (80083b0 <UART_Start_Receive_IT+0x238>)
 8008298:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d01a      	beq.n	80082d8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082aa:	e853 3f00 	ldrex	r3, [r3]
 80082ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80082b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	461a      	mov	r2, r3
 80082c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80082c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80082c6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80082ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80082cc:	e841 2300 	strex	r3, r2, [r1]
 80082d0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80082d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1e4      	bne.n	80082a2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	3308      	adds	r3, #8
 80082de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082e2:	e853 3f00 	ldrex	r3, [r3]
 80082e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80082e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	3308      	adds	r3, #8
 80082f6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80082f8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80082fa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80082fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008300:	e841 2300 	strex	r3, r2, [r1]
 8008304:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008306:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1e5      	bne.n	80082d8 <UART_Start_Receive_IT+0x160>
 800830c:	e046      	b.n	800839c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008316:	d107      	bne.n	8008328 <UART_Start_Receive_IT+0x1b0>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d103      	bne.n	8008328 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	4a24      	ldr	r2, [pc, #144]	@ (80083b4 <UART_Start_Receive_IT+0x23c>)
 8008324:	675a      	str	r2, [r3, #116]	@ 0x74
 8008326:	e002      	b.n	800832e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	4a23      	ldr	r2, [pc, #140]	@ (80083b8 <UART_Start_Receive_IT+0x240>)
 800832c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d019      	beq.n	800836a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800833e:	e853 3f00 	ldrex	r3, [r3]
 8008342:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008346:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800834a:	677b      	str	r3, [r7, #116]	@ 0x74
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	461a      	mov	r2, r3
 8008352:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008354:	637b      	str	r3, [r7, #52]	@ 0x34
 8008356:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008358:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800835a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800835c:	e841 2300 	strex	r3, r2, [r1]
 8008360:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1e6      	bne.n	8008336 <UART_Start_Receive_IT+0x1be>
 8008368:	e018      	b.n	800839c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	e853 3f00 	ldrex	r3, [r3]
 8008376:	613b      	str	r3, [r7, #16]
   return(result);
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	f043 0320 	orr.w	r3, r3, #32
 800837e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	461a      	mov	r2, r3
 8008386:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008388:	623b      	str	r3, [r7, #32]
 800838a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838c:	69f9      	ldr	r1, [r7, #28]
 800838e:	6a3a      	ldr	r2, [r7, #32]
 8008390:	e841 2300 	strex	r3, r2, [r1]
 8008394:	61bb      	str	r3, [r7, #24]
   return(result);
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1e6      	bne.n	800836a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	378c      	adds	r7, #140	@ 0x8c
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	08008f21 	.word	0x08008f21
 80083b0:	08008bc1 	.word	0x08008bc1
 80083b4:	08008a09 	.word	0x08008a09
 80083b8:	08008851 	.word	0x08008851

080083bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083bc:	b480      	push	{r7}
 80083be:	b095      	sub	sp, #84	@ 0x54
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083cc:	e853 3f00 	ldrex	r3, [r3]
 80083d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80083d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80083e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80083e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80083ea:	e841 2300 	strex	r3, r2, [r1]
 80083ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1e6      	bne.n	80083c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	3308      	adds	r3, #8
 80083fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fe:	6a3b      	ldr	r3, [r7, #32]
 8008400:	e853 3f00 	ldrex	r3, [r3]
 8008404:	61fb      	str	r3, [r7, #28]
   return(result);
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800840c:	f023 0301 	bic.w	r3, r3, #1
 8008410:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3308      	adds	r3, #8
 8008418:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800841a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800841c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008420:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008422:	e841 2300 	strex	r3, r2, [r1]
 8008426:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1e3      	bne.n	80083f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008432:	2b01      	cmp	r3, #1
 8008434:	d118      	bne.n	8008468 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	e853 3f00 	ldrex	r3, [r3]
 8008442:	60bb      	str	r3, [r7, #8]
   return(result);
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	f023 0310 	bic.w	r3, r3, #16
 800844a:	647b      	str	r3, [r7, #68]	@ 0x44
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	461a      	mov	r2, r3
 8008452:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008454:	61bb      	str	r3, [r7, #24]
 8008456:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008458:	6979      	ldr	r1, [r7, #20]
 800845a:	69ba      	ldr	r2, [r7, #24]
 800845c:	e841 2300 	strex	r3, r2, [r1]
 8008460:	613b      	str	r3, [r7, #16]
   return(result);
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1e6      	bne.n	8008436 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2220      	movs	r2, #32
 800846c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800847c:	bf00      	nop
 800847e:	3754      	adds	r7, #84	@ 0x54
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008494:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f7ff f99a 	bl	80077e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084ac:	bf00      	nop
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b08f      	sub	sp, #60	@ 0x3c
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084c2:	2b21      	cmp	r3, #33	@ 0x21
 80084c4:	d14c      	bne.n	8008560 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d132      	bne.n	8008538 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d8:	6a3b      	ldr	r3, [r7, #32]
 80084da:	e853 3f00 	ldrex	r3, [r3]
 80084de:	61fb      	str	r3, [r7, #28]
   return(result);
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	461a      	mov	r2, r3
 80084ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084f2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084f8:	e841 2300 	strex	r3, r2, [r1]
 80084fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1e6      	bne.n	80084d2 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	e853 3f00 	ldrex	r3, [r3]
 8008510:	60bb      	str	r3, [r7, #8]
   return(result);
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008518:	633b      	str	r3, [r7, #48]	@ 0x30
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	461a      	mov	r2, r3
 8008520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008522:	61bb      	str	r3, [r7, #24]
 8008524:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008526:	6979      	ldr	r1, [r7, #20]
 8008528:	69ba      	ldr	r2, [r7, #24]
 800852a:	e841 2300 	strex	r3, r2, [r1]
 800852e:	613b      	str	r3, [r7, #16]
   return(result);
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1e6      	bne.n	8008504 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008536:	e013      	b.n	8008560 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800853c:	781a      	ldrb	r2, [r3, #0]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008548:	1c5a      	adds	r2, r3, #1
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008554:	b29b      	uxth	r3, r3
 8008556:	3b01      	subs	r3, #1
 8008558:	b29a      	uxth	r2, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8008560:	bf00      	nop
 8008562:	373c      	adds	r7, #60	@ 0x3c
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800856c:	b480      	push	{r7}
 800856e:	b091      	sub	sp, #68	@ 0x44
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800857a:	2b21      	cmp	r3, #33	@ 0x21
 800857c:	d151      	bne.n	8008622 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008584:	b29b      	uxth	r3, r3
 8008586:	2b00      	cmp	r3, #0
 8008588:	d132      	bne.n	80085f0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008592:	e853 3f00 	ldrex	r3, [r3]
 8008596:	623b      	str	r3, [r7, #32]
   return(result);
 8008598:	6a3b      	ldr	r3, [r7, #32]
 800859a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800859e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	461a      	mov	r2, r3
 80085a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80085aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085b0:	e841 2300 	strex	r3, r2, [r1]
 80085b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1e6      	bne.n	800858a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	e853 3f00 	ldrex	r3, [r3]
 80085c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	461a      	mov	r2, r3
 80085d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085da:	61fb      	str	r3, [r7, #28]
 80085dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085de:	69b9      	ldr	r1, [r7, #24]
 80085e0:	69fa      	ldr	r2, [r7, #28]
 80085e2:	e841 2300 	strex	r3, r2, [r1]
 80085e6:	617b      	str	r3, [r7, #20]
   return(result);
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1e6      	bne.n	80085bc <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80085ee:	e018      	b.n	8008622 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80085f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085f8:	881b      	ldrh	r3, [r3, #0]
 80085fa:	461a      	mov	r2, r3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008604:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800860a:	1c9a      	adds	r2, r3, #2
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008616:	b29b      	uxth	r3, r3
 8008618:	3b01      	subs	r3, #1
 800861a:	b29a      	uxth	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8008622:	bf00      	nop
 8008624:	3744      	adds	r7, #68	@ 0x44
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800862e:	b480      	push	{r7}
 8008630:	b091      	sub	sp, #68	@ 0x44
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800863c:	2b21      	cmp	r3, #33	@ 0x21
 800863e:	d160      	bne.n	8008702 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008646:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008648:	e057      	b.n	80086fa <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008650:	b29b      	uxth	r3, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	d133      	bne.n	80086be <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	3308      	adds	r3, #8
 800865c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008660:	e853 3f00 	ldrex	r3, [r3]
 8008664:	623b      	str	r3, [r7, #32]
   return(result);
 8008666:	6a3b      	ldr	r3, [r7, #32]
 8008668:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800866c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3308      	adds	r3, #8
 8008674:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008676:	633a      	str	r2, [r7, #48]	@ 0x30
 8008678:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800867c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800867e:	e841 2300 	strex	r3, r2, [r1]
 8008682:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1e5      	bne.n	8008656 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	e853 3f00 	ldrex	r3, [r3]
 8008696:	60fb      	str	r3, [r7, #12]
   return(result);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800869e:	637b      	str	r3, [r7, #52]	@ 0x34
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	461a      	mov	r2, r3
 80086a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a8:	61fb      	str	r3, [r7, #28]
 80086aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ac:	69b9      	ldr	r1, [r7, #24]
 80086ae:	69fa      	ldr	r2, [r7, #28]
 80086b0:	e841 2300 	strex	r3, r2, [r1]
 80086b4:	617b      	str	r3, [r7, #20]
   return(result);
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1e6      	bne.n	800868a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80086bc:	e021      	b.n	8008702 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	69db      	ldr	r3, [r3, #28]
 80086c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d013      	beq.n	80086f4 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086d0:	781a      	ldrb	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086dc:	1c5a      	adds	r2, r3, #1
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	3b01      	subs	r3, #1
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80086f4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80086f6:	3b01      	subs	r3, #1
 80086f8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80086fa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1a4      	bne.n	800864a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008700:	e7ff      	b.n	8008702 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8008702:	bf00      	nop
 8008704:	3744      	adds	r7, #68	@ 0x44
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr

0800870e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800870e:	b480      	push	{r7}
 8008710:	b091      	sub	sp, #68	@ 0x44
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800871c:	2b21      	cmp	r3, #33	@ 0x21
 800871e:	d165      	bne.n	80087ec <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008726:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008728:	e05c      	b.n	80087e4 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008730:	b29b      	uxth	r3, r3
 8008732:	2b00      	cmp	r3, #0
 8008734:	d133      	bne.n	800879e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	3308      	adds	r3, #8
 800873c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873e:	6a3b      	ldr	r3, [r7, #32]
 8008740:	e853 3f00 	ldrex	r3, [r3]
 8008744:	61fb      	str	r3, [r7, #28]
   return(result);
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800874c:	637b      	str	r3, [r7, #52]	@ 0x34
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	3308      	adds	r3, #8
 8008754:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008756:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008758:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800875c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800875e:	e841 2300 	strex	r3, r2, [r1]
 8008762:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1e5      	bne.n	8008736 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	e853 3f00 	ldrex	r3, [r3]
 8008776:	60bb      	str	r3, [r7, #8]
   return(result);
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800877e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	461a      	mov	r2, r3
 8008786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008788:	61bb      	str	r3, [r7, #24]
 800878a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878c:	6979      	ldr	r1, [r7, #20]
 800878e:	69ba      	ldr	r2, [r7, #24]
 8008790:	e841 2300 	strex	r3, r2, [r1]
 8008794:	613b      	str	r3, [r7, #16]
   return(result);
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1e6      	bne.n	800876a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800879c:	e026      	b.n	80087ec <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	69db      	ldr	r3, [r3, #28]
 80087a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d018      	beq.n	80087de <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087b0:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80087b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b4:	881b      	ldrh	r3, [r3, #0]
 80087b6:	461a      	mov	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087c0:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087c6:	1c9a      	adds	r2, r3, #2
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	3b01      	subs	r3, #1
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80087de:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80087e0:	3b01      	subs	r3, #1
 80087e2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80087e4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d19f      	bne.n	800872a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80087ea:	e7ff      	b.n	80087ec <UART_TxISR_16BIT_FIFOEN+0xde>
 80087ec:	bf00      	nop
 80087ee:	3744      	adds	r7, #68	@ 0x44
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b088      	sub	sp, #32
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	e853 3f00 	ldrex	r3, [r3]
 800880c:	60bb      	str	r3, [r7, #8]
   return(result);
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008814:	61fb      	str	r3, [r7, #28]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	61bb      	str	r3, [r7, #24]
 8008820:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008822:	6979      	ldr	r1, [r7, #20]
 8008824:	69ba      	ldr	r2, [r7, #24]
 8008826:	e841 2300 	strex	r3, r2, [r1]
 800882a:	613b      	str	r3, [r7, #16]
   return(result);
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1e6      	bne.n	8008800 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2220      	movs	r2, #32
 8008836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7fe ffb9 	bl	80077b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008846:	bf00      	nop
 8008848:	3720      	adds	r7, #32
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
	...

08008850 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b09c      	sub	sp, #112	@ 0x70
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800885e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008868:	2b22      	cmp	r3, #34	@ 0x22
 800886a:	f040 80be 	bne.w	80089ea <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008874:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008878:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800887c:	b2d9      	uxtb	r1, r3
 800887e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008882:	b2da      	uxtb	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008888:	400a      	ands	r2, r1
 800888a:	b2d2      	uxtb	r2, r2
 800888c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008892:	1c5a      	adds	r2, r3, #1
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800889e:	b29b      	uxth	r3, r3
 80088a0:	3b01      	subs	r3, #1
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f040 80a1 	bne.w	80089fa <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088c0:	e853 3f00 	ldrex	r3, [r3]
 80088c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80088c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	461a      	mov	r2, r3
 80088d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80088d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80088dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80088de:	e841 2300 	strex	r3, r2, [r1]
 80088e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80088e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1e6      	bne.n	80088b8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	3308      	adds	r3, #8
 80088f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f4:	e853 3f00 	ldrex	r3, [r3]
 80088f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088fc:	f023 0301 	bic.w	r3, r3, #1
 8008900:	667b      	str	r3, [r7, #100]	@ 0x64
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	3308      	adds	r3, #8
 8008908:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800890a:	647a      	str	r2, [r7, #68]	@ 0x44
 800890c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008910:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008912:	e841 2300 	strex	r3, r2, [r1]
 8008916:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1e5      	bne.n	80088ea <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2220      	movs	r2, #32
 8008922:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a33      	ldr	r2, [pc, #204]	@ (8008a04 <UART_RxISR_8BIT+0x1b4>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d01f      	beq.n	800897c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d018      	beq.n	800897c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008952:	e853 3f00 	ldrex	r3, [r3]
 8008956:	623b      	str	r3, [r7, #32]
   return(result);
 8008958:	6a3b      	ldr	r3, [r7, #32]
 800895a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800895e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	461a      	mov	r2, r3
 8008966:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008968:	633b      	str	r3, [r7, #48]	@ 0x30
 800896a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800896e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008970:	e841 2300 	strex	r3, r2, [r1]
 8008974:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1e6      	bne.n	800894a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008980:	2b01      	cmp	r3, #1
 8008982:	d12e      	bne.n	80089e2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	e853 3f00 	ldrex	r3, [r3]
 8008996:	60fb      	str	r3, [r7, #12]
   return(result);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f023 0310 	bic.w	r3, r3, #16
 800899e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	461a      	mov	r2, r3
 80089a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089a8:	61fb      	str	r3, [r7, #28]
 80089aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ac:	69b9      	ldr	r1, [r7, #24]
 80089ae:	69fa      	ldr	r2, [r7, #28]
 80089b0:	e841 2300 	strex	r3, r2, [r1]
 80089b4:	617b      	str	r3, [r7, #20]
   return(result);
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1e6      	bne.n	800898a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	69db      	ldr	r3, [r3, #28]
 80089c2:	f003 0310 	and.w	r3, r3, #16
 80089c6:	2b10      	cmp	r3, #16
 80089c8:	d103      	bne.n	80089d2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2210      	movs	r2, #16
 80089d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80089d8:	4619      	mov	r1, r3
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f7fe ff0a 	bl	80077f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089e0:	e00b      	b.n	80089fa <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f7fe fef2 	bl	80077cc <HAL_UART_RxCpltCallback>
}
 80089e8:	e007      	b.n	80089fa <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	699a      	ldr	r2, [r3, #24]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f042 0208 	orr.w	r2, r2, #8
 80089f8:	619a      	str	r2, [r3, #24]
}
 80089fa:	bf00      	nop
 80089fc:	3770      	adds	r7, #112	@ 0x70
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	40008000 	.word	0x40008000

08008a08 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b09c      	sub	sp, #112	@ 0x70
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008a16:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a20:	2b22      	cmp	r3, #34	@ 0x22
 8008a22:	f040 80be 	bne.w	8008ba2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a2c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a34:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008a36:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008a3a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008a3e:	4013      	ands	r3, r2
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a44:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a4a:	1c9a      	adds	r2, r3, #2
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	b29a      	uxth	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f040 80a1 	bne.w	8008bb2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a78:	e853 3f00 	ldrex	r3, [r3]
 8008a7c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008a7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a84:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a90:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a92:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a96:	e841 2300 	strex	r3, r2, [r1]
 8008a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008a9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1e6      	bne.n	8008a70 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	3308      	adds	r3, #8
 8008aa8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aac:	e853 3f00 	ldrex	r3, [r3]
 8008ab0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab4:	f023 0301 	bic.w	r3, r3, #1
 8008ab8:	663b      	str	r3, [r7, #96]	@ 0x60
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	3308      	adds	r3, #8
 8008ac0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008ac2:	643a      	str	r2, [r7, #64]	@ 0x40
 8008ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ac8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008aca:	e841 2300 	strex	r3, r2, [r1]
 8008ace:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d1e5      	bne.n	8008aa2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2220      	movs	r2, #32
 8008ada:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a33      	ldr	r2, [pc, #204]	@ (8008bbc <UART_RxISR_16BIT+0x1b4>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d01f      	beq.n	8008b34 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d018      	beq.n	8008b34 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b08:	6a3b      	ldr	r3, [r7, #32]
 8008b0a:	e853 3f00 	ldrex	r3, [r3]
 8008b0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b22:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b28:	e841 2300 	strex	r3, r2, [r1]
 8008b2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1e6      	bne.n	8008b02 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d12e      	bne.n	8008b9a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	e853 3f00 	ldrex	r3, [r3]
 8008b4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	f023 0310 	bic.w	r3, r3, #16
 8008b56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b60:	61bb      	str	r3, [r7, #24]
 8008b62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b64:	6979      	ldr	r1, [r7, #20]
 8008b66:	69ba      	ldr	r2, [r7, #24]
 8008b68:	e841 2300 	strex	r3, r2, [r1]
 8008b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1e6      	bne.n	8008b42 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	69db      	ldr	r3, [r3, #28]
 8008b7a:	f003 0310 	and.w	r3, r3, #16
 8008b7e:	2b10      	cmp	r3, #16
 8008b80:	d103      	bne.n	8008b8a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2210      	movs	r2, #16
 8008b88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008b90:	4619      	mov	r1, r3
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7fe fe2e 	bl	80077f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b98:	e00b      	b.n	8008bb2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7fe fe16 	bl	80077cc <HAL_UART_RxCpltCallback>
}
 8008ba0:	e007      	b.n	8008bb2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	699a      	ldr	r2, [r3, #24]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f042 0208 	orr.w	r2, r2, #8
 8008bb0:	619a      	str	r2, [r3, #24]
}
 8008bb2:	bf00      	nop
 8008bb4:	3770      	adds	r7, #112	@ 0x70
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	40008000 	.word	0x40008000

08008bc0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b0ac      	sub	sp, #176	@ 0xb0
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008bce:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	69db      	ldr	r3, [r3, #28]
 8008bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bf6:	2b22      	cmp	r3, #34	@ 0x22
 8008bf8:	f040 8182 	bne.w	8008f00 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008c02:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c06:	e125      	b.n	8008e54 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c0e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c12:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008c16:	b2d9      	uxtb	r1, r3
 8008c18:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008c1c:	b2da      	uxtb	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c22:	400a      	ands	r2, r1
 8008c24:	b2d2      	uxtb	r2, r2
 8008c26:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c2c:	1c5a      	adds	r2, r3, #1
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	69db      	ldr	r3, [r3, #28]
 8008c4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c52:	f003 0307 	and.w	r3, r3, #7
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d053      	beq.n	8008d02 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d011      	beq.n	8008c8a <UART_RxISR_8BIT_FIFOEN+0xca>
 8008c66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00b      	beq.n	8008c8a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2201      	movs	r2, #1
 8008c78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c80:	f043 0201 	orr.w	r2, r3, #1
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c8e:	f003 0302 	and.w	r3, r3, #2
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d011      	beq.n	8008cba <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008c96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00b      	beq.n	8008cba <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cb0:	f043 0204 	orr.w	r2, r3, #4
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cbe:	f003 0304 	and.w	r3, r3, #4
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d011      	beq.n	8008cea <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008cc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00b      	beq.n	8008cea <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2204      	movs	r2, #4
 8008cd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ce0:	f043 0202 	orr.w	r2, r3, #2
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d006      	beq.n	8008d02 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7fe fd73 	bl	80077e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f040 80a2 	bne.w	8008e54 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d18:	e853 3f00 	ldrex	r3, [r3]
 8008d1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008d1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008d32:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d34:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d36:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008d38:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008d3a:	e841 2300 	strex	r3, r2, [r1]
 8008d3e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008d40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1e4      	bne.n	8008d10 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	3308      	adds	r3, #8
 8008d4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d50:	e853 3f00 	ldrex	r3, [r3]
 8008d54:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008d56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d5c:	f023 0301 	bic.w	r3, r3, #1
 8008d60:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	3308      	adds	r3, #8
 8008d6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d6e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008d70:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d72:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008d74:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008d76:	e841 2300 	strex	r3, r2, [r1]
 8008d7a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008d7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1e1      	bne.n	8008d46 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2220      	movs	r2, #32
 8008d86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a5f      	ldr	r2, [pc, #380]	@ (8008f18 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d021      	beq.n	8008de4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d01a      	beq.n	8008de4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008db6:	e853 3f00 	ldrex	r3, [r3]
 8008dba:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008dbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008dbe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008dc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008dd0:	657b      	str	r3, [r7, #84]	@ 0x54
 8008dd2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008dd6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008dd8:	e841 2300 	strex	r3, r2, [r1]
 8008ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008dde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1e4      	bne.n	8008dae <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d130      	bne.n	8008e4e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dfa:	e853 3f00 	ldrex	r3, [r3]
 8008dfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e02:	f023 0310 	bic.w	r3, r3, #16
 8008e06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e14:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e16:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e1c:	e841 2300 	strex	r3, r2, [r1]
 8008e20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1e4      	bne.n	8008df2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	69db      	ldr	r3, [r3, #28]
 8008e2e:	f003 0310 	and.w	r3, r3, #16
 8008e32:	2b10      	cmp	r3, #16
 8008e34:	d103      	bne.n	8008e3e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2210      	movs	r2, #16
 8008e3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e44:	4619      	mov	r1, r3
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7fe fcd4 	bl	80077f4 <HAL_UARTEx_RxEventCallback>
 8008e4c:	e002      	b.n	8008e54 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f7fe fcbc 	bl	80077cc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e54:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d006      	beq.n	8008e6a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008e5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e60:	f003 0320 	and.w	r3, r3, #32
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f47f aecf 	bne.w	8008c08 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e70:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008e74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d049      	beq.n	8008f10 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008e82:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d242      	bcs.n	8008f10 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	3308      	adds	r3, #8
 8008e90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e92:	6a3b      	ldr	r3, [r7, #32]
 8008e94:	e853 3f00 	ldrex	r3, [r3]
 8008e98:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ea0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	3308      	adds	r3, #8
 8008eaa:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008eae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008eb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008eb6:	e841 2300 	strex	r3, r2, [r1]
 8008eba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1e3      	bne.n	8008e8a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a15      	ldr	r2, [pc, #84]	@ (8008f1c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008ec6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	e853 3f00 	ldrex	r3, [r3]
 8008ed4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	f043 0320 	orr.w	r3, r3, #32
 8008edc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008eea:	61bb      	str	r3, [r7, #24]
 8008eec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eee:	6979      	ldr	r1, [r7, #20]
 8008ef0:	69ba      	ldr	r2, [r7, #24]
 8008ef2:	e841 2300 	strex	r3, r2, [r1]
 8008ef6:	613b      	str	r3, [r7, #16]
   return(result);
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1e4      	bne.n	8008ec8 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008efe:	e007      	b.n	8008f10 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	699a      	ldr	r2, [r3, #24]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f042 0208 	orr.w	r2, r2, #8
 8008f0e:	619a      	str	r2, [r3, #24]
}
 8008f10:	bf00      	nop
 8008f12:	37b0      	adds	r7, #176	@ 0xb0
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	40008000 	.word	0x40008000
 8008f1c:	08008851 	.word	0x08008851

08008f20 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b0ae      	sub	sp, #184	@ 0xb8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f2e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	69db      	ldr	r3, [r3, #28]
 8008f38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f56:	2b22      	cmp	r3, #34	@ 0x22
 8008f58:	f040 8186 	bne.w	8009268 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008f62:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f66:	e129      	b.n	80091bc <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f6e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008f7a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008f7e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008f82:	4013      	ands	r3, r2
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f8a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f90:	1c9a      	adds	r2, r3, #2
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	69db      	ldr	r3, [r3, #28]
 8008fae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008fb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fb6:	f003 0307 	and.w	r3, r3, #7
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d053      	beq.n	8009066 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008fbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fc2:	f003 0301 	and.w	r3, r3, #1
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d011      	beq.n	8008fee <UART_RxISR_16BIT_FIFOEN+0xce>
 8008fca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00b      	beq.n	8008fee <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fe4:	f043 0201 	orr.w	r2, r3, #1
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ff2:	f003 0302 	and.w	r3, r3, #2
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d011      	beq.n	800901e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008ffa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00b      	beq.n	800901e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2202      	movs	r2, #2
 800900c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009014:	f043 0204 	orr.w	r2, r3, #4
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800901e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009022:	f003 0304 	and.w	r3, r3, #4
 8009026:	2b00      	cmp	r3, #0
 8009028:	d011      	beq.n	800904e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800902a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800902e:	f003 0301 	and.w	r3, r3, #1
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00b      	beq.n	800904e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2204      	movs	r2, #4
 800903c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009044:	f043 0202 	orr.w	r2, r3, #2
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009054:	2b00      	cmp	r3, #0
 8009056:	d006      	beq.n	8009066 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f7fe fbc1 	bl	80077e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800906c:	b29b      	uxth	r3, r3
 800906e:	2b00      	cmp	r3, #0
 8009070:	f040 80a4 	bne.w	80091bc <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800907c:	e853 3f00 	ldrex	r3, [r3]
 8009080:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009082:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009084:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009088:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	461a      	mov	r2, r3
 8009092:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009096:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800909a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800909e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80090a2:	e841 2300 	strex	r3, r2, [r1]
 80090a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80090a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1e2      	bne.n	8009074 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	3308      	adds	r3, #8
 80090b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80090b8:	e853 3f00 	ldrex	r3, [r3]
 80090bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80090be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090c4:	f023 0301 	bic.w	r3, r3, #1
 80090c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3308      	adds	r3, #8
 80090d2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80090d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80090d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80090dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80090de:	e841 2300 	strex	r3, r2, [r1]
 80090e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80090e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1e1      	bne.n	80090ae <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2220      	movs	r2, #32
 80090ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a5f      	ldr	r2, [pc, #380]	@ (8009280 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d021      	beq.n	800914c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009112:	2b00      	cmp	r3, #0
 8009114:	d01a      	beq.n	800914c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800911e:	e853 3f00 	ldrex	r3, [r3]
 8009122:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009124:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009126:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800912a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	461a      	mov	r2, r3
 8009134:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009138:	65bb      	str	r3, [r7, #88]	@ 0x58
 800913a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800913e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009140:	e841 2300 	strex	r3, r2, [r1]
 8009144:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009148:	2b00      	cmp	r3, #0
 800914a:	d1e4      	bne.n	8009116 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009150:	2b01      	cmp	r3, #1
 8009152:	d130      	bne.n	80091b6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009162:	e853 3f00 	ldrex	r3, [r3]
 8009166:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800916a:	f023 0310 	bic.w	r3, r3, #16
 800916e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	461a      	mov	r2, r3
 8009178:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800917c:	647b      	str	r3, [r7, #68]	@ 0x44
 800917e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009180:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009182:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009184:	e841 2300 	strex	r3, r2, [r1]
 8009188:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800918a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1e4      	bne.n	800915a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	f003 0310 	and.w	r3, r3, #16
 800919a:	2b10      	cmp	r3, #16
 800919c:	d103      	bne.n	80091a6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2210      	movs	r2, #16
 80091a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80091ac:	4619      	mov	r1, r3
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f7fe fb20 	bl	80077f4 <HAL_UARTEx_RxEventCallback>
 80091b4:	e002      	b.n	80091bc <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f7fe fb08 	bl	80077cc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091bc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d006      	beq.n	80091d2 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80091c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091c8:	f003 0320 	and.w	r3, r3, #32
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f47f aecb 	bne.w	8008f68 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091d8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80091dc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d049      	beq.n	8009278 <UART_RxISR_16BIT_FIFOEN+0x358>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80091ea:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d242      	bcs.n	8009278 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	3308      	adds	r3, #8
 80091f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091fc:	e853 3f00 	ldrex	r3, [r3]
 8009200:	623b      	str	r3, [r7, #32]
   return(result);
 8009202:	6a3b      	ldr	r3, [r7, #32]
 8009204:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009208:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	3308      	adds	r3, #8
 8009212:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009216:	633a      	str	r2, [r7, #48]	@ 0x30
 8009218:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800921c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800921e:	e841 2300 	strex	r3, r2, [r1]
 8009222:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1e3      	bne.n	80091f2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a15      	ldr	r2, [pc, #84]	@ (8009284 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800922e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	e853 3f00 	ldrex	r3, [r3]
 800923c:	60fb      	str	r3, [r7, #12]
   return(result);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f043 0320 	orr.w	r3, r3, #32
 8009244:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	461a      	mov	r2, r3
 800924e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009252:	61fb      	str	r3, [r7, #28]
 8009254:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009256:	69b9      	ldr	r1, [r7, #24]
 8009258:	69fa      	ldr	r2, [r7, #28]
 800925a:	e841 2300 	strex	r3, r2, [r1]
 800925e:	617b      	str	r3, [r7, #20]
   return(result);
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1e4      	bne.n	8009230 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009266:	e007      	b.n	8009278 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	699a      	ldr	r2, [r3, #24]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f042 0208 	orr.w	r2, r2, #8
 8009276:	619a      	str	r2, [r3, #24]
}
 8009278:	bf00      	nop
 800927a:	37b8      	adds	r7, #184	@ 0xb8
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	40008000 	.word	0x40008000
 8009284:	08008a09 	.word	0x08008a09

08009288 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009290:	bf00      	nop
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80092a4:	bf00      	nop
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80092b8:	bf00      	nop
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d101      	bne.n	80092da <HAL_UARTEx_DisableFifoMode+0x16>
 80092d6:	2302      	movs	r3, #2
 80092d8:	e027      	b.n	800932a <HAL_UARTEx_DisableFifoMode+0x66>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2224      	movs	r2, #36	@ 0x24
 80092e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f022 0201 	bic.w	r2, r2, #1
 8009300:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009308:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2220      	movs	r2, #32
 800931c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3714      	adds	r7, #20
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr

08009336 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b084      	sub	sp, #16
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009346:	2b01      	cmp	r3, #1
 8009348:	d101      	bne.n	800934e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800934a:	2302      	movs	r3, #2
 800934c:	e02d      	b.n	80093aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2201      	movs	r2, #1
 8009352:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2224      	movs	r2, #36	@ 0x24
 800935a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f022 0201 	bic.w	r2, r2, #1
 8009374:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	683a      	ldr	r2, [r7, #0]
 8009386:	430a      	orrs	r2, r1
 8009388:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f850 	bl	8009430 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2220      	movs	r2, #32
 800939c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b084      	sub	sp, #16
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d101      	bne.n	80093ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80093c6:	2302      	movs	r3, #2
 80093c8:	e02d      	b.n	8009426 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2201      	movs	r2, #1
 80093ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2224      	movs	r2, #36	@ 0x24
 80093d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f022 0201 	bic.w	r2, r2, #1
 80093f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	683a      	ldr	r2, [r7, #0]
 8009402:	430a      	orrs	r2, r1
 8009404:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f812 	bl	8009430 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2220      	movs	r2, #32
 8009418:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
	...

08009430 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009430:	b480      	push	{r7}
 8009432:	b085      	sub	sp, #20
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800943c:	2b00      	cmp	r3, #0
 800943e:	d108      	bne.n	8009452 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009450:	e031      	b.n	80094b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009452:	2308      	movs	r3, #8
 8009454:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009456:	2308      	movs	r3, #8
 8009458:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	0e5b      	lsrs	r3, r3, #25
 8009462:	b2db      	uxtb	r3, r3
 8009464:	f003 0307 	and.w	r3, r3, #7
 8009468:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	0f5b      	lsrs	r3, r3, #29
 8009472:	b2db      	uxtb	r3, r3
 8009474:	f003 0307 	and.w	r3, r3, #7
 8009478:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800947a:	7bbb      	ldrb	r3, [r7, #14]
 800947c:	7b3a      	ldrb	r2, [r7, #12]
 800947e:	4911      	ldr	r1, [pc, #68]	@ (80094c4 <UARTEx_SetNbDataToProcess+0x94>)
 8009480:	5c8a      	ldrb	r2, [r1, r2]
 8009482:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009486:	7b3a      	ldrb	r2, [r7, #12]
 8009488:	490f      	ldr	r1, [pc, #60]	@ (80094c8 <UARTEx_SetNbDataToProcess+0x98>)
 800948a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800948c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009490:	b29a      	uxth	r2, r3
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009498:	7bfb      	ldrb	r3, [r7, #15]
 800949a:	7b7a      	ldrb	r2, [r7, #13]
 800949c:	4909      	ldr	r1, [pc, #36]	@ (80094c4 <UARTEx_SetNbDataToProcess+0x94>)
 800949e:	5c8a      	ldrb	r2, [r1, r2]
 80094a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80094a4:	7b7a      	ldrb	r2, [r7, #13]
 80094a6:	4908      	ldr	r1, [pc, #32]	@ (80094c8 <UARTEx_SetNbDataToProcess+0x98>)
 80094a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80094b6:	bf00      	nop
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	080095d8 	.word	0x080095d8
 80094c8:	080095e0 	.word	0x080095e0

080094cc <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	ed93 7a06 	vldr	s14, [r3, #24]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	edd3 7a07 	vldr	s15, [r3, #28]
 80094e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	edd3 7a08 	vldr	s15, [r3, #32]
 80094ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	edd3 7a06 	vldr	s15, [r3, #24]
 80094fc:	eeb1 7a67 	vneg.f32	s14, s15
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	edd3 7a08 	vldr	s15, [r3, #32]
 8009506:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800950a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6a1a      	ldr	r2, [r3, #32]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d006      	beq.n	8009530 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	330c      	adds	r3, #12
 8009526:	220c      	movs	r2, #12
 8009528:	2100      	movs	r1, #0
 800952a:	4618      	mov	r0, r3
 800952c:	f000 f804 	bl	8009538 <memset>
  }

}
 8009530:	bf00      	nop
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <memset>:
 8009538:	4402      	add	r2, r0
 800953a:	4603      	mov	r3, r0
 800953c:	4293      	cmp	r3, r2
 800953e:	d100      	bne.n	8009542 <memset+0xa>
 8009540:	4770      	bx	lr
 8009542:	f803 1b01 	strb.w	r1, [r3], #1
 8009546:	e7f9      	b.n	800953c <memset+0x4>

08009548 <__libc_init_array>:
 8009548:	b570      	push	{r4, r5, r6, lr}
 800954a:	4d0d      	ldr	r5, [pc, #52]	@ (8009580 <__libc_init_array+0x38>)
 800954c:	4c0d      	ldr	r4, [pc, #52]	@ (8009584 <__libc_init_array+0x3c>)
 800954e:	1b64      	subs	r4, r4, r5
 8009550:	10a4      	asrs	r4, r4, #2
 8009552:	2600      	movs	r6, #0
 8009554:	42a6      	cmp	r6, r4
 8009556:	d109      	bne.n	800956c <__libc_init_array+0x24>
 8009558:	4d0b      	ldr	r5, [pc, #44]	@ (8009588 <__libc_init_array+0x40>)
 800955a:	4c0c      	ldr	r4, [pc, #48]	@ (800958c <__libc_init_array+0x44>)
 800955c:	f000 f818 	bl	8009590 <_init>
 8009560:	1b64      	subs	r4, r4, r5
 8009562:	10a4      	asrs	r4, r4, #2
 8009564:	2600      	movs	r6, #0
 8009566:	42a6      	cmp	r6, r4
 8009568:	d105      	bne.n	8009576 <__libc_init_array+0x2e>
 800956a:	bd70      	pop	{r4, r5, r6, pc}
 800956c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009570:	4798      	blx	r3
 8009572:	3601      	adds	r6, #1
 8009574:	e7ee      	b.n	8009554 <__libc_init_array+0xc>
 8009576:	f855 3b04 	ldr.w	r3, [r5], #4
 800957a:	4798      	blx	r3
 800957c:	3601      	adds	r6, #1
 800957e:	e7f2      	b.n	8009566 <__libc_init_array+0x1e>
 8009580:	080095f0 	.word	0x080095f0
 8009584:	080095f0 	.word	0x080095f0
 8009588:	080095f0 	.word	0x080095f0
 800958c:	080095f4 	.word	0x080095f4

08009590 <_init>:
 8009590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009592:	bf00      	nop
 8009594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009596:	bc08      	pop	{r3}
 8009598:	469e      	mov	lr, r3
 800959a:	4770      	bx	lr

0800959c <_fini>:
 800959c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959e:	bf00      	nop
 80095a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095a2:	bc08      	pop	{r3}
 80095a4:	469e      	mov	lr, r3
 80095a6:	4770      	bx	lr
