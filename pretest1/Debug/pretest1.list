
pretest1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8ac  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800ba84  0800ba84  0000ca84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bac4  0800bac4  0000d00c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bac4  0800bac4  0000cac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bacc  0800bacc  0000d00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bacc  0800bacc  0000cacc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bad0  0800bad0  0000cad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800bad4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  2000000c  0800bae0  0000d00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  0800bae0  0000d620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023e5c  00000000  00000000  0000d03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b21  00000000  00000000  00030e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e78  00000000  00000000  000349c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017cc  00000000  00000000  00036838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002df18  00000000  00000000  00038004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022e31  00000000  00000000  00065f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001485b3  00000000  00000000  00088d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d1300  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008690  00000000  00000000  001d1344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001d99d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ba6c 	.word	0x0800ba6c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800ba6c 	.word	0x0800ba6c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000510:	4b08      	ldr	r3, [pc, #32]	@ (8000534 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000512:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000514:	4907      	ldr	r1, [pc, #28]	@ (8000534 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4313      	orrs	r3, r2
 800051a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800051c:	4b05      	ldr	r3, [pc, #20]	@ (8000534 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800051e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	4013      	ands	r3, r2
 8000524:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000526:	68fb      	ldr	r3, [r7, #12]
}
 8000528:	bf00      	nop
 800052a:	3714      	adds	r7, #20
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	40021000 	.word	0x40021000

08000538 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000540:	4b08      	ldr	r3, [pc, #32]	@ (8000564 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000542:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000544:	4907      	ldr	r1, [pc, #28]	@ (8000564 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4313      	orrs	r3, r2
 800054a:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800054c:	4b05      	ldr	r3, [pc, #20]	@ (8000564 <LL_APB1_GRP2_EnableClock+0x2c>)
 800054e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4013      	ands	r3, r2
 8000554:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000556:	68fb      	ldr	r3, [r7, #12]
}
 8000558:	bf00      	nop
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	40021000 	.word	0x40021000

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f001 f997 	bl	800189e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f824 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 fce2 	bl	8000f3c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000578:	f000 f86e 	bl	8000658 <MX_ADC1_Init>
  MX_COMP2_Init();
 800057c:	f000 f8e4 	bl	8000748 <MX_COMP2_Init>
  MX_COMP3_Init();
 8000580:	f000 f908 	bl	8000794 <MX_COMP3_Init>
  MX_COMP4_Init();
 8000584:	f000 f92c 	bl	80007e0 <MX_COMP4_Init>
  MX_COMP6_Init();
 8000588:	f000 f950 	bl	800082c <MX_COMP6_Init>
  MX_DAC1_Init();
 800058c:	f000 f974 	bl	8000878 <MX_DAC1_Init>
  MX_DAC2_Init();
 8000590:	f000 f9ac 	bl	80008ec <MX_DAC2_Init>
  MX_DAC3_Init();
 8000594:	f000 f9e4 	bl	8000960 <MX_DAC3_Init>
  MX_HRTIM1_Init();
 8000598:	f000 fa26 	bl	80009e8 <MX_HRTIM1_Init>
  MX_UCPD1_Init();
 800059c:	f000 fc2c 	bl	8000df8 <MX_UCPD1_Init>
  MX_USART3_UART_Init();
 80005a0:	f000 fc58 	bl	8000e54 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 80005a4:	f000 fca2 	bl	8000eec <MX_USB_PCD_Init>
  MX_TIM3_Init();
 80005a8:	f000 fbd6 	bl	8000d58 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80005ac:	4802      	ldr	r0, [pc, #8]	@ (80005b8 <main+0x50>)
 80005ae:	f007 fc97 	bl	8007ee0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b2:	bf00      	nop
 80005b4:	e7fd      	b.n	80005b2 <main+0x4a>
 80005b6:	bf00      	nop
 80005b8:	2000025c 	.word	0x2000025c

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	@ 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0318 	add.w	r3, r7, #24
 80005c6:	2238      	movs	r2, #56	@ 0x38
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f00b fa21 	bl	800ba12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005de:	2000      	movs	r0, #0
 80005e0:	f006 fc06 	bl	8006df0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80005e4:	2322      	movs	r3, #34	@ 0x22
 80005e6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ee:	2340      	movs	r3, #64	@ 0x40
 80005f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005f2:	2301      	movs	r3, #1
 80005f4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fa:	2302      	movs	r3, #2
 80005fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005fe:	2304      	movs	r3, #4
 8000600:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000602:	2355      	movs	r3, #85	@ 0x55
 8000604:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000606:	2308      	movs	r3, #8
 8000608:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 800060a:	2308      	movs	r3, #8
 800060c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800060e:	2302      	movs	r3, #2
 8000610:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000612:	f107 0318 	add.w	r3, r7, #24
 8000616:	4618      	mov	r0, r3
 8000618:	f006 fc8e 	bl	8006f38 <HAL_RCC_OscConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000622:	f000 fd7d 	bl	8001120 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000626:	230f      	movs	r3, #15
 8000628:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2303      	movs	r3, #3
 800062c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2104      	movs	r1, #4
 800063e:	4618      	mov	r0, r3
 8000640:	f006 ff8c 	bl	800755c <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800064a:	f000 fd69 	bl	8001120 <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	3750      	adds	r7, #80	@ 0x50
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08c      	sub	sp, #48	@ 0x30
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800065e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2220      	movs	r2, #32
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f00b f9ce 	bl	800ba12 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000676:	4b32      	ldr	r3, [pc, #200]	@ (8000740 <MX_ADC1_Init+0xe8>)
 8000678:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800067c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800067e:	4b30      	ldr	r3, [pc, #192]	@ (8000740 <MX_ADC1_Init+0xe8>)
 8000680:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000684:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000686:	4b2e      	ldr	r3, [pc, #184]	@ (8000740 <MX_ADC1_Init+0xe8>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800068c:	4b2c      	ldr	r3, [pc, #176]	@ (8000740 <MX_ADC1_Init+0xe8>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000692:	4b2b      	ldr	r3, [pc, #172]	@ (8000740 <MX_ADC1_Init+0xe8>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000698:	4b29      	ldr	r3, [pc, #164]	@ (8000740 <MX_ADC1_Init+0xe8>)
 800069a:	2200      	movs	r2, #0
 800069c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069e:	4b28      	ldr	r3, [pc, #160]	@ (8000740 <MX_ADC1_Init+0xe8>)
 80006a0:	2204      	movs	r2, #4
 80006a2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006a4:	4b26      	ldr	r3, [pc, #152]	@ (8000740 <MX_ADC1_Init+0xe8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006aa:	4b25      	ldr	r3, [pc, #148]	@ (8000740 <MX_ADC1_Init+0xe8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80006b0:	4b23      	ldr	r3, [pc, #140]	@ (8000740 <MX_ADC1_Init+0xe8>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006b6:	4b22      	ldr	r3, [pc, #136]	@ (8000740 <MX_ADC1_Init+0xe8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006be:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <MX_ADC1_Init+0xe8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000740 <MX_ADC1_Init+0xe8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000740 <MX_ADC1_Init+0xe8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <MX_ADC1_Init+0xe8>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006d8:	4b19      	ldr	r3, [pc, #100]	@ (8000740 <MX_ADC1_Init+0xe8>)
 80006da:	2200      	movs	r2, #0
 80006dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e0:	4817      	ldr	r0, [pc, #92]	@ (8000740 <MX_ADC1_Init+0xe8>)
 80006e2:	f001 fb65 	bl	8001db0 <HAL_ADC_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80006ec:	f000 fd18 	bl	8001120 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006f0:	2300      	movs	r3, #0
 80006f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f8:	4619      	mov	r1, r3
 80006fa:	4811      	ldr	r0, [pc, #68]	@ (8000740 <MX_ADC1_Init+0xe8>)
 80006fc:	f002 fc2a 	bl	8002f54 <HAL_ADCEx_MultiModeConfigChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000706:	f000 fd0b 	bl	8001120 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <MX_ADC1_Init+0xec>)
 800070c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800070e:	2306      	movs	r3, #6
 8000710:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000716:	237f      	movs	r3, #127	@ 0x7f
 8000718:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800071a:	2304      	movs	r3, #4
 800071c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	4619      	mov	r1, r3
 8000726:	4806      	ldr	r0, [pc, #24]	@ (8000740 <MX_ADC1_Init+0xe8>)
 8000728:	f001 ff7c 	bl	8002624 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000732:	f000 fcf5 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	3730      	adds	r7, #48	@ 0x30
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000028 	.word	0x20000028
 8000744:	21800100 	.word	0x21800100

08000748 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 800074c:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <MX_COMP2_Init+0x44>)
 800074e:	4a10      	ldr	r2, [pc, #64]	@ (8000790 <MX_COMP2_Init+0x48>)
 8000750:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000752:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <MX_COMP2_Init+0x44>)
 8000754:	2200      	movs	r2, #0
 8000756:	605a      	str	r2, [r3, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8000758:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <MX_COMP2_Init+0x44>)
 800075a:	2240      	movs	r2, #64	@ 0x40
 800075c:	609a      	str	r2, [r3, #8]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800075e:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <MX_COMP2_Init+0x44>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_COMP2_Init+0x44>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800076a:	4b08      	ldr	r3, [pc, #32]	@ (800078c <MX_COMP2_Init+0x44>)
 800076c:	2200      	movs	r2, #0
 800076e:	615a      	str	r2, [r3, #20]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <MX_COMP2_Init+0x44>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_COMP2_Init+0x44>)
 8000778:	f002 fe44 	bl	8003404 <HAL_COMP_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_COMP2_Init+0x3e>
  {
    Error_Handler();
 8000782:	f000 fccd 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000094 	.word	0x20000094
 8000790:	40010204 	.word	0x40010204

08000794 <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <MX_COMP3_Init+0x44>)
 800079a:	4a10      	ldr	r2, [pc, #64]	@ (80007dc <MX_COMP3_Init+0x48>)
 800079c:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_COMP3_Init+0x44>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
  hcomp3.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <MX_COMP3_Init+0x44>)
 80007a6:	2240      	movs	r2, #64	@ 0x40
 80007a8:	609a      	str	r2, [r3, #8]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <MX_COMP3_Init+0x44>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <MX_COMP3_Init+0x44>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <MX_COMP3_Init+0x44>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	615a      	str	r2, [r3, #20]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80007bc:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <MX_COMP3_Init+0x44>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <MX_COMP3_Init+0x44>)
 80007c4:	f002 fe1e 	bl	8003404 <HAL_COMP_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_COMP3_Init+0x3e>
  {
    Error_Handler();
 80007ce:	f000 fca7 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000b8 	.word	0x200000b8
 80007dc:	40010208 	.word	0x40010208

080007e0 <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <MX_COMP4_Init+0x44>)
 80007e6:	4a10      	ldr	r2, [pc, #64]	@ (8000828 <MX_COMP4_Init+0x48>)
 80007e8:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_COMP4_Init+0x44>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	605a      	str	r2, [r3, #4]
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <MX_COMP4_Init+0x44>)
 80007f2:	2250      	movs	r2, #80	@ 0x50
 80007f4:	609a      	str	r2, [r3, #8]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <MX_COMP4_Init+0x44>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80007fc:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <MX_COMP4_Init+0x44>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000802:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <MX_COMP4_Init+0x44>)
 8000804:	2200      	movs	r2, #0
 8000806:	615a      	str	r2, [r3, #20]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000808:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <MX_COMP4_Init+0x44>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	@ (8000824 <MX_COMP4_Init+0x44>)
 8000810:	f002 fdf8 	bl	8003404 <HAL_COMP_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_COMP4_Init+0x3e>
  {
    Error_Handler();
 800081a:	f000 fc81 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200000dc 	.word	0x200000dc
 8000828:	4001020c 	.word	0x4001020c

0800082c <MX_COMP6_Init>:
  * @brief COMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP6_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP6_Init 0 */

  /* USER CODE BEGIN COMP6_Init 1 */

  /* USER CODE END COMP6_Init 1 */
  hcomp6.Instance = COMP6;
 8000830:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <MX_COMP6_Init+0x44>)
 8000832:	4a10      	ldr	r2, [pc, #64]	@ (8000874 <MX_COMP6_Init+0x48>)
 8000834:	601a      	str	r2, [r3, #0]
  hcomp6.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <MX_COMP6_Init+0x44>)
 8000838:	2200      	movs	r2, #0
 800083a:	605a      	str	r2, [r3, #4]
  hcomp6.Init.InputMinus = COMP_INPUT_MINUS_DAC2_CH1;
 800083c:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <MX_COMP6_Init+0x44>)
 800083e:	2250      	movs	r2, #80	@ 0x50
 8000840:	609a      	str	r2, [r3, #8]
  hcomp6.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000842:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <MX_COMP6_Init+0x44>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  hcomp6.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000848:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <MX_COMP6_Init+0x44>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  hcomp6.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800084e:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <MX_COMP6_Init+0x44>)
 8000850:	2200      	movs	r2, #0
 8000852:	615a      	str	r2, [r3, #20]
  hcomp6.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <MX_COMP6_Init+0x44>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp6) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	@ (8000870 <MX_COMP6_Init+0x44>)
 800085c:	f002 fdd2 	bl	8003404 <HAL_COMP_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_COMP6_Init+0x3e>
  {
    Error_Handler();
 8000866:	f000 fc5b 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN COMP6_Init 2 */

  /* USER CODE END COMP6_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000100 	.word	0x20000100
 8000874:	40010214 	.word	0x40010214

08000878 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08c      	sub	sp, #48	@ 0x30
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800087e:	463b      	mov	r3, r7
 8000880:	2230      	movs	r2, #48	@ 0x30
 8000882:	2100      	movs	r1, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f00b f8c4 	bl	800ba12 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800088a:	4b16      	ldr	r3, [pc, #88]	@ (80008e4 <MX_DAC1_Init+0x6c>)
 800088c:	4a16      	ldr	r2, [pc, #88]	@ (80008e8 <MX_DAC1_Init+0x70>)
 800088e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000890:	4814      	ldr	r0, [pc, #80]	@ (80008e4 <MX_DAC1_Init+0x6c>)
 8000892:	f003 f860 	bl	8003956 <HAL_DAC_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800089c:	f000 fc40 	bl	8001120 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80008a0:	2302      	movs	r3, #2
 80008a2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80008b8:	2302      	movs	r3, #2
 80008ba:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80008bc:	2302      	movs	r3, #2
 80008be:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008c4:	463b      	mov	r3, r7
 80008c6:	2200      	movs	r2, #0
 80008c8:	4619      	mov	r1, r3
 80008ca:	4806      	ldr	r0, [pc, #24]	@ (80008e4 <MX_DAC1_Init+0x6c>)
 80008cc:	f003 f866 	bl	800399c <HAL_DAC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80008d6:	f000 fc23 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	3730      	adds	r7, #48	@ 0x30
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000124 	.word	0x20000124
 80008e8:	50000800 	.word	0x50000800

080008ec <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	@ 0x30
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008f2:	463b      	mov	r3, r7
 80008f4:	2230      	movs	r2, #48	@ 0x30
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f00b f88a 	bl	800ba12 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 80008fe:	4b16      	ldr	r3, [pc, #88]	@ (8000958 <MX_DAC2_Init+0x6c>)
 8000900:	4a16      	ldr	r2, [pc, #88]	@ (800095c <MX_DAC2_Init+0x70>)
 8000902:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000904:	4814      	ldr	r0, [pc, #80]	@ (8000958 <MX_DAC2_Init+0x6c>)
 8000906:	f003 f826 	bl	8003956 <HAL_DAC_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000910:	f000 fc06 	bl	8001120 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000914:	2302      	movs	r3, #2
 8000916:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800092c:	2302      	movs	r3, #2
 800092e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000930:	2302      	movs	r3, #2
 8000932:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000938:	463b      	mov	r3, r7
 800093a:	2200      	movs	r2, #0
 800093c:	4619      	mov	r1, r3
 800093e:	4806      	ldr	r0, [pc, #24]	@ (8000958 <MX_DAC2_Init+0x6c>)
 8000940:	f003 f82c 	bl	800399c <HAL_DAC_ConfigChannel>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 800094a:	f000 fbe9 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	3730      	adds	r7, #48	@ 0x30
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000138 	.word	0x20000138
 800095c:	50000c00 	.word	0x50000c00

08000960 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08c      	sub	sp, #48	@ 0x30
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000966:	463b      	mov	r3, r7
 8000968:	2230      	movs	r2, #48	@ 0x30
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f00b f850 	bl	800ba12 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8000972:	4b1b      	ldr	r3, [pc, #108]	@ (80009e0 <MX_DAC3_Init+0x80>)
 8000974:	4a1b      	ldr	r2, [pc, #108]	@ (80009e4 <MX_DAC3_Init+0x84>)
 8000976:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000978:	4819      	ldr	r0, [pc, #100]	@ (80009e0 <MX_DAC3_Init+0x80>)
 800097a:	f002 ffec 	bl	8003956 <HAL_DAC_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8000984:	f000 fbcc 	bl	8001120 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000988:	2302      	movs	r3, #2
 800098a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800098c:	2300      	movs	r3, #0
 800098e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000990:	2300      	movs	r3, #0
 8000992:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800099c:	2300      	movs	r3, #0
 800099e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80009a0:	2302      	movs	r3, #2
 80009a2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009ac:	463b      	mov	r3, r7
 80009ae:	2200      	movs	r2, #0
 80009b0:	4619      	mov	r1, r3
 80009b2:	480b      	ldr	r0, [pc, #44]	@ (80009e0 <MX_DAC3_Init+0x80>)
 80009b4:	f002 fff2 	bl	800399c <HAL_DAC_ConfigChannel>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 80009be:	f000 fbaf 	bl	8001120 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80009c2:	463b      	mov	r3, r7
 80009c4:	2210      	movs	r2, #16
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <MX_DAC3_Init+0x80>)
 80009ca:	f002 ffe7 	bl	800399c <HAL_DAC_ConfigChannel>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 80009d4:	f000 fba4 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	3730      	adds	r7, #48	@ 0x30
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000014c 	.word	0x2000014c
 80009e4:	50001000 	.word	0x50001000

080009e8 <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b0ac      	sub	sp, #176	@ 0xb0
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80009ee:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 80009fc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
 8000a0c:	615a      	str	r2, [r3, #20]
 8000a0e:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000a10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a14:	2260      	movs	r2, #96	@ 0x60
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f00a fffa 	bl	800ba12 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2220      	movs	r2, #32
 8000a22:	2100      	movs	r1, #0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f00a fff4 	bl	800ba12 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8000a2a:	4bc3      	ldr	r3, [pc, #780]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000a2c:	4ac3      	ldr	r2, [pc, #780]	@ (8000d3c <MX_HRTIM1_Init+0x354>)
 8000a2e:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000a30:	4bc1      	ldr	r3, [pc, #772]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000a36:	4bc0      	ldr	r3, [pc, #768]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8000a3c:	48be      	ldr	r0, [pc, #760]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000a3e:	f003 fbfd 	bl	800423c <HAL_HRTIM_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_HRTIM1_Init+0x64>
  {
    Error_Handler();
 8000a48:	f000 fb6a 	bl	8001120 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8000a4c:	210c      	movs	r1, #12
 8000a4e:	48ba      	ldr	r0, [pc, #744]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000a50:	f003 fcc4 	bl	80043dc <HAL_HRTIM_DLLCalibrationStart>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_HRTIM1_Init+0x76>
  {
    Error_Handler();
 8000a5a:	f000 fb61 	bl	8001120 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8000a5e:	210a      	movs	r1, #10
 8000a60:	48b5      	ldr	r0, [pc, #724]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000a62:	f003 fd13 	bl	800448c <HAL_HRTIM_PollForDLLCalibration>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 8000a6c:	f000 fb58 	bl	8001120 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFDF;
 8000a70:	f64f 73df 	movw	r3, #65503	@ 0xffdf
 8000a74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000a84:	2308      	movs	r3, #8
 8000a86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000a8a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000a8e:	461a      	mov	r2, r3
 8000a90:	2100      	movs	r1, #0
 8000a92:	48a9      	ldr	r0, [pc, #676]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000a94:	f003 fd2e 	bl	80044f4 <HAL_HRTIM_TimeBaseConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_HRTIM1_Init+0xba>
  {
    Error_Handler();
 8000a9e:	f000 fb3f 	bl	8001120 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 8000aae:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	48a0      	ldr	r0, [pc, #640]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000ab8:	f003 fdd1 	bl	800465e <HAL_HRTIM_WaveformTimerControl>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_HRTIM1_Init+0xde>
  {
    Error_Handler();
 8000ac2:	f000 fb2d 	bl	8001120 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pTimerCfg.DMASrcAddress = 0x0000;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.DMADstAddress = 0x0000;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMASize = 0x1;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8000ada:	2300      	movs	r3, #0
 8000adc:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8000aee:	2300      	movs	r3, #0
 8000af0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000af6:	2300      	movs	r3, #0
 8000af8:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8000afa:	2300      	movs	r3, #0
 8000afc:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8000afe:	2300      	movs	r3, #0
 8000b00:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8000b24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b28:	461a      	mov	r2, r3
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4882      	ldr	r0, [pc, #520]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000b2e:	f003 fd09 	bl	8004544 <HAL_HRTIM_WaveformTimerConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_HRTIM1_Init+0x154>
  {
    Error_Handler();
 8000b38:	f000 faf2 	bl	8001120 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8000b3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b40:	461a      	mov	r2, r3
 8000b42:	2102      	movs	r1, #2
 8000b44:	487c      	ldr	r0, [pc, #496]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000b46:	f003 fcfd 	bl	8004544 <HAL_HRTIM_WaveformTimerConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_HRTIM1_Init+0x16c>
  {
    Error_Handler();
 8000b50:	f000 fae6 	bl	8001120 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8000b54:	2300      	movs	r3, #0
 8000b56:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 8000b58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	2103      	movs	r1, #3
 8000b60:	4875      	ldr	r0, [pc, #468]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000b62:	f003 fcef 	bl	8004544 <HAL_HRTIM_WaveformTimerConfig>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_HRTIM1_Init+0x188>
  {
    Error_Handler();
 8000b6c:	f000 fad8 	bl	8001120 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8000b70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b74:	461a      	mov	r2, r3
 8000b76:	2104      	movs	r1, #4
 8000b78:	486f      	ldr	r0, [pc, #444]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000b7a:	f003 fce3 	bl	8004544 <HAL_HRTIM_WaveformTimerConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_HRTIM1_Init+0x1a0>
  {
    Error_Handler();
 8000b84:	f000 facc 	bl	8001120 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_F_DELAYEDPROTECTION_DISABLED;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCfg) != HAL_OK)
 8000b8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b90:	461a      	mov	r2, r3
 8000b92:	2105      	movs	r1, #5
 8000b94:	4868      	ldr	r0, [pc, #416]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000b96:	f003 fcd5 	bl	8004544 <HAL_HRTIM_WaveformTimerConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_HRTIM1_Init+0x1bc>
  {
    Error_Handler();
 8000ba0:	f000 fabe 	bl	8001120 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2100      	movs	r1, #0
 8000bca:	485b      	ldr	r0, [pc, #364]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000bcc:	f003 fd7a 	bl	80046c4 <HAL_HRTIM_WaveformOutputConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_HRTIM1_Init+0x1f2>
  {
    Error_Handler();
 8000bd6:	f000 faa3 	bl	8001120 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2210      	movs	r2, #16
 8000bde:	2102      	movs	r1, #2
 8000be0:	4855      	ldr	r0, [pc, #340]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000be2:	f003 fd6f 	bl	80046c4 <HAL_HRTIM_WaveformOutputConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_HRTIM1_Init+0x208>
  {
    Error_Handler();
 8000bec:	f000 fa98 	bl	8001120 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2240      	movs	r2, #64	@ 0x40
 8000bf4:	2103      	movs	r1, #3
 8000bf6:	4850      	ldr	r0, [pc, #320]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000bf8:	f003 fd64 	bl	80046c4 <HAL_HRTIM_WaveformOutputConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_HRTIM1_Init+0x21e>
  {
    Error_Handler();
 8000c02:	f000 fa8d 	bl	8001120 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c0c:	2104      	movs	r1, #4
 8000c0e:	484a      	ldr	r0, [pc, #296]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000c10:	f003 fd58 	bl	80046c4 <HAL_HRTIM_WaveformOutputConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_HRTIM1_Init+0x236>
  {
    Error_Handler();
 8000c1a:	f000 fa81 	bl	8001120 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF1, &pOutputCfg) != HAL_OK)
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c24:	2105      	movs	r1, #5
 8000c26:	4844      	ldr	r0, [pc, #272]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000c28:	f003 fd4c 	bl	80046c4 <HAL_HRTIM_WaveformOutputConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_HRTIM1_Init+0x24e>
  {
    Error_Handler();
 8000c32:	f000 fa75 	bl	8001120 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8000c36:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	483e      	ldr	r0, [pc, #248]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000c40:	f003 fc58 	bl	80044f4 <HAL_HRTIM_TimeBaseConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_HRTIM1_Init+0x266>
  {
    Error_Handler();
 8000c4a:	f000 fa69 	bl	8001120 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCtl) != HAL_OK)
 8000c4e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c52:	461a      	mov	r2, r3
 8000c54:	2102      	movs	r1, #2
 8000c56:	4838      	ldr	r0, [pc, #224]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000c58:	f003 fd01 	bl	800465e <HAL_HRTIM_WaveformTimerControl>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_HRTIM1_Init+0x27e>
  {
    Error_Handler();
 8000c62:	f000 fa5d 	bl	8001120 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2220      	movs	r2, #32
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	4832      	ldr	r0, [pc, #200]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000c6e:	f003 fd29 	bl	80046c4 <HAL_HRTIM_WaveformOutputConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_HRTIM1_Init+0x294>
  {
    Error_Handler();
 8000c78:	f000 fa52 	bl	8001120 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2280      	movs	r2, #128	@ 0x80
 8000c80:	2103      	movs	r1, #3
 8000c82:	482d      	ldr	r0, [pc, #180]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000c84:	f003 fd1e 	bl	80046c4 <HAL_HRTIM_WaveformOutputConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_HRTIM1_Init+0x2aa>
  {
    Error_Handler();
 8000c8e:	f000 fa47 	bl	8001120 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF2, &pOutputCfg) != HAL_OK)
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c98:	2105      	movs	r1, #5
 8000c9a:	4827      	ldr	r0, [pc, #156]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000c9c:	f003 fd12 	bl	80046c4 <HAL_HRTIM_WaveformOutputConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_HRTIM1_Init+0x2c2>
  {
    Error_Handler();
 8000ca6:	f000 fa3b 	bl	8001120 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8000caa:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000cae:	461a      	mov	r2, r3
 8000cb0:	2103      	movs	r1, #3
 8000cb2:	4821      	ldr	r0, [pc, #132]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000cb4:	f003 fc1e 	bl	80044f4 <HAL_HRTIM_TimeBaseConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_HRTIM1_Init+0x2da>
  {
    Error_Handler();
 8000cbe:	f000 fa2f 	bl	8001120 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCtl) != HAL_OK)
 8000cc2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	2103      	movs	r1, #3
 8000cca:	481b      	ldr	r0, [pc, #108]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000ccc:	f003 fcc7 	bl	800465e <HAL_HRTIM_WaveformTimerControl>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_HRTIM1_Init+0x2f2>
  {
    Error_Handler();
 8000cd6:	f000 fa23 	bl	8001120 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8000cda:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000cde:	461a      	mov	r2, r3
 8000ce0:	2104      	movs	r1, #4
 8000ce2:	4815      	ldr	r0, [pc, #84]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000ce4:	f003 fc06 	bl	80044f4 <HAL_HRTIM_TimeBaseConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_HRTIM1_Init+0x30a>
  {
    Error_Handler();
 8000cee:	f000 fa17 	bl	8001120 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCtl) != HAL_OK)
 8000cf2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	2104      	movs	r1, #4
 8000cfa:	480f      	ldr	r0, [pc, #60]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000cfc:	f003 fcaf 	bl	800465e <HAL_HRTIM_WaveformTimerControl>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_HRTIM1_Init+0x322>
  {
    Error_Handler();
 8000d06:	f000 fa0b 	bl	8001120 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimeBaseCfg) != HAL_OK)
 8000d0a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000d0e:	461a      	mov	r2, r3
 8000d10:	2105      	movs	r1, #5
 8000d12:	4809      	ldr	r0, [pc, #36]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000d14:	f003 fbee 	bl	80044f4 <HAL_HRTIM_TimeBaseConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_HRTIM1_Init+0x33a>
  {
    Error_Handler();
 8000d1e:	f000 f9ff 	bl	8001120 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCtl) != HAL_OK)
 8000d22:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000d26:	461a      	mov	r2, r3
 8000d28:	2105      	movs	r1, #5
 8000d2a:	4803      	ldr	r0, [pc, #12]	@ (8000d38 <MX_HRTIM1_Init+0x350>)
 8000d2c:	f003 fc97 	bl	800465e <HAL_HRTIM_WaveformTimerControl>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d006      	beq.n	8000d44 <MX_HRTIM1_Init+0x35c>
 8000d36:	e003      	b.n	8000d40 <MX_HRTIM1_Init+0x358>
 8000d38:	20000160 	.word	0x20000160
 8000d3c:	40016800 	.word	0x40016800
  {
    Error_Handler();
 8000d40:	f000 f9ee 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8000d44:	4803      	ldr	r0, [pc, #12]	@ (8000d54 <MX_HRTIM1_Init+0x36c>)
 8000d46:	f000 fb97 	bl	8001478 <HAL_HRTIM_MspPostInit>

}
 8000d4a:	bf00      	nop
 8000d4c:	37b0      	adds	r7, #176	@ 0xb0
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000160 	.word	0x20000160

08000d58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d5e:	f107 0310 	add.w	r3, r7, #16
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d76:	4b1e      	ldr	r3, [pc, #120]	@ (8000df0 <MX_TIM3_Init+0x98>)
 8000d78:	4a1e      	ldr	r2, [pc, #120]	@ (8000df4 <MX_TIM3_Init+0x9c>)
 8000d7a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16999;
 8000d7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000df0 <MX_TIM3_Init+0x98>)
 8000d7e:	f244 2267 	movw	r2, #16999	@ 0x4267
 8000d82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d84:	4b1a      	ldr	r3, [pc, #104]	@ (8000df0 <MX_TIM3_Init+0x98>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8000d8a:	4b19      	ldr	r3, [pc, #100]	@ (8000df0 <MX_TIM3_Init+0x98>)
 8000d8c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000d90:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d92:	4b17      	ldr	r3, [pc, #92]	@ (8000df0 <MX_TIM3_Init+0x98>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d98:	4b15      	ldr	r3, [pc, #84]	@ (8000df0 <MX_TIM3_Init+0x98>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d9e:	4814      	ldr	r0, [pc, #80]	@ (8000df0 <MX_TIM3_Init+0x98>)
 8000da0:	f007 f846 	bl	8007e30 <HAL_TIM_Base_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000daa:	f000 f9b9 	bl	8001120 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000db2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	4619      	mov	r1, r3
 8000dba:	480d      	ldr	r0, [pc, #52]	@ (8000df0 <MX_TIM3_Init+0x98>)
 8000dbc:	f007 fa58 	bl	8008270 <HAL_TIM_ConfigClockSource>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000dc6:	f000 f9ab 	bl	8001120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4806      	ldr	r0, [pc, #24]	@ (8000df0 <MX_TIM3_Init+0x98>)
 8000dd8:	f007 fcd8 	bl	800878c <HAL_TIMEx_MasterConfigSynchronization>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000de2:	f000 f99d 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	3720      	adds	r7, #32
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	2000025c 	.word	0x2000025c
 8000df4:	40000400 	.word	0x40000400

08000df8 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfe:	463b      	mov	r3, r7
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
 8000e0c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000e0e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000e12:	f7ff fb91 	bl	8000538 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000e16:	2002      	movs	r0, #2
 8000e18:	f7ff fb76 	bl	8000508 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000e1c:	2310      	movs	r3, #16
 8000e1e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000e20:	2303      	movs	r3, #3
 8000e22:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e24:	2300      	movs	r3, #0
 8000e26:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e28:	463b      	mov	r3, r7
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4808      	ldr	r0, [pc, #32]	@ (8000e50 <MX_UCPD1_Init+0x58>)
 8000e2e:	f009 f8e6 	bl	8009ffe <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000e32:	2340      	movs	r3, #64	@ 0x40
 8000e34:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000e36:	2303      	movs	r3, #3
 8000e38:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3e:	463b      	mov	r3, r7
 8000e40:	4619      	mov	r1, r3
 8000e42:	4803      	ldr	r0, [pc, #12]	@ (8000e50 <MX_UCPD1_Init+0x58>)
 8000e44:	f009 f8db 	bl	8009ffe <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000e48:	bf00      	nop
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	48000400 	.word	0x48000400

08000e54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e58:	4b22      	ldr	r3, [pc, #136]	@ (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000e5a:	4a23      	ldr	r2, [pc, #140]	@ (8000ee8 <MX_USART3_UART_Init+0x94>)
 8000e5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000e60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e66:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e84:	4b17      	ldr	r3, [pc, #92]	@ (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV4;
 8000e90:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000e92:	2202      	movs	r2, #2
 8000e94:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e96:	4b13      	ldr	r3, [pc, #76]	@ (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e9c:	4811      	ldr	r0, [pc, #68]	@ (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000e9e:	f007 fd51 	bl	8008944 <HAL_UART_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ea8:	f000 f93a 	bl	8001120 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eac:	2100      	movs	r1, #0
 8000eae:	480d      	ldr	r0, [pc, #52]	@ (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000eb0:	f008 fe8f 	bl	8009bd2 <HAL_UARTEx_SetTxFifoThreshold>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000eba:	f000 f931 	bl	8001120 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4808      	ldr	r0, [pc, #32]	@ (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000ec2:	f008 fec4 	bl	8009c4e <HAL_UARTEx_SetRxFifoThreshold>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ecc:	f000 f928 	bl	8001120 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ed0:	4804      	ldr	r0, [pc, #16]	@ (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000ed2:	f008 fe45 	bl	8009b60 <HAL_UARTEx_DisableFifoMode>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000edc:	f000 f920 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200002a8 	.word	0x200002a8
 8000ee8:	40004800 	.word	0x40004800

08000eec <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000ef0:	4b10      	ldr	r3, [pc, #64]	@ (8000f34 <MX_USB_PCD_Init+0x48>)
 8000ef2:	4a11      	ldr	r2, [pc, #68]	@ (8000f38 <MX_USB_PCD_Init+0x4c>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f34 <MX_USB_PCD_Init+0x48>)
 8000ef8:	2208      	movs	r2, #8
 8000efa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000efc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f34 <MX_USB_PCD_Init+0x48>)
 8000efe:	2202      	movs	r2, #2
 8000f00:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f02:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <MX_USB_PCD_Init+0x48>)
 8000f04:	2202      	movs	r2, #2
 8000f06:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000f08:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <MX_USB_PCD_Init+0x48>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000f0e:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <MX_USB_PCD_Init+0x48>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000f14:	4b07      	ldr	r3, [pc, #28]	@ (8000f34 <MX_USB_PCD_Init+0x48>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000f1a:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <MX_USB_PCD_Init+0x48>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000f20:	4804      	ldr	r0, [pc, #16]	@ (8000f34 <MX_USB_PCD_Init+0x48>)
 8000f22:	f004 fc0b 	bl	800573c <HAL_PCD_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000f2c:	f000 f8f8 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	2000033c 	.word	0x2000033c
 8000f38:	40005c00 	.word	0x40005c00

08000f3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	@ 0x28
 8000f40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f52:	4b61      	ldr	r3, [pc, #388]	@ (80010d8 <MX_GPIO_Init+0x19c>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f56:	4a60      	ldr	r2, [pc, #384]	@ (80010d8 <MX_GPIO_Init+0x19c>)
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f5e:	4b5e      	ldr	r3, [pc, #376]	@ (80010d8 <MX_GPIO_Init+0x19c>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f62:	f003 0304 	and.w	r3, r3, #4
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	4b5b      	ldr	r3, [pc, #364]	@ (80010d8 <MX_GPIO_Init+0x19c>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6e:	4a5a      	ldr	r2, [pc, #360]	@ (80010d8 <MX_GPIO_Init+0x19c>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f76:	4b58      	ldr	r3, [pc, #352]	@ (80010d8 <MX_GPIO_Init+0x19c>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	4b55      	ldr	r3, [pc, #340]	@ (80010d8 <MX_GPIO_Init+0x19c>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f86:	4a54      	ldr	r2, [pc, #336]	@ (80010d8 <MX_GPIO_Init+0x19c>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f8e:	4b52      	ldr	r3, [pc, #328]	@ (80010d8 <MX_GPIO_Init+0x19c>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9a:	4b4f      	ldr	r3, [pc, #316]	@ (80010d8 <MX_GPIO_Init+0x19c>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9e:	4a4e      	ldr	r2, [pc, #312]	@ (80010d8 <MX_GPIO_Init+0x19c>)
 8000fa0:	f043 0308 	orr.w	r3, r3, #8
 8000fa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa6:	4b4c      	ldr	r3, [pc, #304]	@ (80010d8 <MX_GPIO_Init+0x19c>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUCKBOOST_LOAD_1_Pin|BUCKBOOST_LOAD_2_Pin|BUCKBOOST_USBPD_EN_Pin|USBPD_1A_PROTECT_Pin, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f24d 0108 	movw	r1, #53256	@ 0xd008
 8000fb8:	4848      	ldr	r0, [pc, #288]	@ (80010dc <MX_GPIO_Init+0x1a0>)
 8000fba:	f003 f8e9 	bl	8004190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD5_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	21a2      	movs	r1, #162	@ 0xa2
 8000fc2:	4847      	ldr	r0, [pc, #284]	@ (80010e0 <MX_GPIO_Init+0x1a4>)
 8000fc4:	f003 f8e4 	bl	8004190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fd2:	f003 f8dd 	bl	8004190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USBPD_550mA_PROTECT_GPIO_Port, USBPD_550mA_PROTECT_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2104      	movs	r1, #4
 8000fda:	4842      	ldr	r0, [pc, #264]	@ (80010e4 <MX_GPIO_Init+0x1a8>)
 8000fdc:	f003 f8d8 	bl	8004190 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOYSTICK_SEL_Pin JOYSTICK_LEFT_Pin JOYSTICK_DOWN_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_SEL_Pin|JOYSTICK_LEFT_Pin|JOYSTICK_DOWN_Pin;
 8000fe0:	f242 0330 	movw	r3, #8240	@ 0x2030
 8000fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4839      	ldr	r0, [pc, #228]	@ (80010dc <MX_GPIO_Init+0x1a0>)
 8000ff8:	f002 ff48 	bl	8003e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUCKBOOST_LOAD_1_Pin BUCKBOOST_LOAD_2_Pin BUCKBOOST_USBPD_EN_Pin USBPD_1A_PROTECT_Pin */
  GPIO_InitStruct.Pin = BUCKBOOST_LOAD_1_Pin|BUCKBOOST_LOAD_2_Pin|BUCKBOOST_USBPD_EN_Pin|USBPD_1A_PROTECT_Pin;
 8000ffc:	f24d 0308 	movw	r3, #53256	@ 0xd008
 8001000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	4831      	ldr	r0, [pc, #196]	@ (80010dc <MX_GPIO_Init+0x1a0>)
 8001016:	f002 ff39 	bl	8003e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD5_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|LD4_Pin;
 800101a:	23a2      	movs	r3, #162	@ 0xa2
 800101c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101e:	2301      	movs	r3, #1
 8001020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	482b      	ldr	r0, [pc, #172]	@ (80010e0 <MX_GPIO_Init+0x1a4>)
 8001032:	f002 ff2b 	bl	8003e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : JOYSTICK_RIGHT_Pin JOYSTICK_UP_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_RIGHT_Pin|JOYSTICK_UP_Pin;
 8001036:	f240 4304 	movw	r3, #1028	@ 0x404
 800103a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800103c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001040:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001042:	2301      	movs	r3, #1
 8001044:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	4619      	mov	r1, r3
 800104c:	4824      	ldr	r0, [pc, #144]	@ (80010e0 <MX_GPIO_Init+0x1a4>)
 800104e:	f002 ff1d 	bl	8003e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001058:	2301      	movs	r3, #1
 800105a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4619      	mov	r1, r3
 800106a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800106e:	f002 ff0d 	bl	8003e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USBPD_550mA_PROTECT_Pin */
  GPIO_InitStruct.Pin = USBPD_550mA_PROTECT_Pin;
 8001072:	2304      	movs	r3, #4
 8001074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001076:	2301      	movs	r3, #1
 8001078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USBPD_550mA_PROTECT_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	4816      	ldr	r0, [pc, #88]	@ (80010e4 <MX_GPIO_Init+0x1a8>)
 800108a:	f002 feff 	bl	8003e8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	2008      	movs	r0, #8
 8001094:	f002 fc2b 	bl	80038ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001098:	2008      	movs	r0, #8
 800109a:	f002 fc42 	bl	8003922 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	200a      	movs	r0, #10
 80010a4:	f002 fc23 	bl	80038ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80010a8:	200a      	movs	r0, #10
 80010aa:	f002 fc3a 	bl	8003922 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	2017      	movs	r0, #23
 80010b4:	f002 fc1b 	bl	80038ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010b8:	2017      	movs	r0, #23
 80010ba:	f002 fc32 	bl	8003922 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	2028      	movs	r0, #40	@ 0x28
 80010c4:	f002 fc13 	bl	80038ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010c8:	2028      	movs	r0, #40	@ 0x28
 80010ca:	f002 fc2a 	bl	8003922 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010ce:	bf00      	nop
 80010d0:	3728      	adds	r7, #40	@ 0x28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000
 80010dc:	48000800 	.word	0x48000800
 80010e0:	48000400 	.word	0x48000400
 80010e4:	48000c00 	.word	0x48000c00

080010e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a08      	ldr	r2, [pc, #32]	@ (8001114 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d109      	bne.n	800110c <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80010f8:	2102      	movs	r1, #2
 80010fa:	4807      	ldr	r0, [pc, #28]	@ (8001118 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80010fc:	f003 f860 	bl	80041c0 <HAL_GPIO_TogglePin>
		a += 1;
 8001100:	4b06      	ldr	r3, [pc, #24]	@ (800111c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	3301      	adds	r3, #1
 8001106:	b29a      	uxth	r2, r3
 8001108:	4b04      	ldr	r3, [pc, #16]	@ (800111c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800110a:	801a      	strh	r2, [r3, #0]
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2000025c 	.word	0x2000025c
 8001118:	48000400 	.word	0x48000400
 800111c:	20000618 	.word	0x20000618

08001120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001124:	b672      	cpsid	i
}
 8001126:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <Error_Handler+0x8>

0800112c <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001132:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <HAL_MspInit+0x44>)
 8001134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001136:	4a0e      	ldr	r2, [pc, #56]	@ (8001170 <HAL_MspInit+0x44>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6613      	str	r3, [r2, #96]	@ 0x60
 800113e:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <HAL_MspInit+0x44>)
 8001140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <HAL_MspInit+0x44>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800114e:	4a08      	ldr	r2, [pc, #32]	@ (8001170 <HAL_MspInit+0x44>)
 8001150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001154:	6593      	str	r3, [r2, #88]	@ 0x58
 8001156:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <HAL_MspInit+0x44>)
 8001158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000

08001174 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b0a0      	sub	sp, #128	@ 0x80
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800118c:	f107 0318 	add.w	r3, r7, #24
 8001190:	2254      	movs	r2, #84	@ 0x54
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f00a fc3c 	bl	800ba12 <memset>
  if(hadc->Instance==ADC1)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011a2:	d154      	bne.n	800124e <HAL_ADC_MspInit+0xda>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011aa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80011ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b0:	f107 0318 	add.w	r3, r7, #24
 80011b4:	4618      	mov	r0, r3
 80011b6:	f006 fbed 	bl	8007994 <HAL_RCCEx_PeriphCLKConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80011c0:	f7ff ffae 	bl	8001120 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011c4:	4b24      	ldr	r3, [pc, #144]	@ (8001258 <HAL_ADC_MspInit+0xe4>)
 80011c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c8:	4a23      	ldr	r2, [pc, #140]	@ (8001258 <HAL_ADC_MspInit+0xe4>)
 80011ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d0:	4b21      	ldr	r3, [pc, #132]	@ (8001258 <HAL_ADC_MspInit+0xe4>)
 80011d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001258 <HAL_ADC_MspInit+0xe4>)
 80011de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001258 <HAL_ADC_MspInit+0xe4>)
 80011e2:	f043 0304 	orr.w	r3, r3, #4
 80011e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001258 <HAL_ADC_MspInit+0xe4>)
 80011ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <HAL_ADC_MspInit+0xe4>)
 80011f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f8:	4a17      	ldr	r2, [pc, #92]	@ (8001258 <HAL_ADC_MspInit+0xe4>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001200:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <HAL_ADC_MspInit+0xe4>)
 8001202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = USBPD_VIN_Pin;
 800120c:	2304      	movs	r3, #4
 800120e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001210:	2303      	movs	r3, #3
 8001212:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USBPD_VIN_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800121c:	4619      	mov	r1, r3
 800121e:	480f      	ldr	r0, [pc, #60]	@ (800125c <HAL_ADC_MspInit+0xe8>)
 8001220:	f002 fe34 	bl	8003e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCKBOOST_VIN_Pin|BUCKBOOST_I_IN_AVG_Pin|BUCKBOOST_VOUT_Pin;
 8001224:	230e      	movs	r3, #14
 8001226:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001228:	2303      	movs	r3, #3
 800122a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001230:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001234:	4619      	mov	r1, r3
 8001236:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800123a:	f002 fe27 	bl	8003e8c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	2012      	movs	r0, #18
 8001244:	f002 fb53 	bl	80038ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001248:	2012      	movs	r0, #18
 800124a:	f002 fb6a 	bl	8003922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	3780      	adds	r7, #128	@ 0x80
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000
 800125c:	48000800 	.word	0x48000800

08001260 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08c      	sub	sp, #48	@ 0x30
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a3d      	ldr	r2, [pc, #244]	@ (8001374 <HAL_COMP_MspInit+0x114>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d119      	bne.n	80012b6 <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	4b3d      	ldr	r3, [pc, #244]	@ (8001378 <HAL_COMP_MspInit+0x118>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001286:	4a3c      	ldr	r2, [pc, #240]	@ (8001378 <HAL_COMP_MspInit+0x118>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128e:	4b3a      	ldr	r3, [pc, #232]	@ (8001378 <HAL_COMP_MspInit+0x118>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	61bb      	str	r3, [r7, #24]
 8001298:	69bb      	ldr	r3, [r7, #24]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = BUCK_RED_SENSE_Pin;
 800129a:	2380      	movs	r3, #128	@ 0x80
 800129c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129e:	2303      	movs	r3, #3
 80012a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_RED_SENSE_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012b0:	f002 fdec 	bl	8003e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP6_MspInit 1 */

  /* USER CODE END COMP6_MspInit 1 */
  }

}
 80012b4:	e05a      	b.n	800136c <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP3)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a30      	ldr	r2, [pc, #192]	@ (800137c <HAL_COMP_MspInit+0x11c>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d119      	bne.n	80012f4 <HAL_COMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001378 <HAL_COMP_MspInit+0x118>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c4:	4a2c      	ldr	r2, [pc, #176]	@ (8001378 <HAL_COMP_MspInit+0x118>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001378 <HAL_COMP_MspInit+0x118>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BUCK_GREEN_SENSE_Pin;
 80012d8:	2301      	movs	r3, #1
 80012da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012dc:	2303      	movs	r3, #3
 80012de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_GREEN_SENSE_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ee:	f002 fdcd 	bl	8003e8c <HAL_GPIO_Init>
}
 80012f2:	e03b      	b.n	800136c <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP4)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a21      	ldr	r2, [pc, #132]	@ (8001380 <HAL_COMP_MspInit+0x120>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d118      	bne.n	8001330 <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001378 <HAL_COMP_MspInit+0x118>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001302:	4a1d      	ldr	r2, [pc, #116]	@ (8001378 <HAL_COMP_MspInit+0x118>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800130a:	4b1b      	ldr	r3, [pc, #108]	@ (8001378 <HAL_COMP_MspInit+0x118>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BUCK_BLUE_SENSE_Pin;
 8001316:	2301      	movs	r3, #1
 8001318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131a:	2303      	movs	r3, #3
 800131c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_BLUE_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	4816      	ldr	r0, [pc, #88]	@ (8001384 <HAL_COMP_MspInit+0x124>)
 800132a:	f002 fdaf 	bl	8003e8c <HAL_GPIO_Init>
}
 800132e:	e01d      	b.n	800136c <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP6)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a14      	ldr	r2, [pc, #80]	@ (8001388 <HAL_COMP_MspInit+0x128>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d118      	bne.n	800136c <HAL_COMP_MspInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	4b0f      	ldr	r3, [pc, #60]	@ (8001378 <HAL_COMP_MspInit+0x118>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	4a0e      	ldr	r2, [pc, #56]	@ (8001378 <HAL_COMP_MspInit+0x118>)
 8001340:	f043 0302 	orr.w	r3, r3, #2
 8001344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001346:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <HAL_COMP_MspInit+0x118>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUCKBOOST_I_IN_SENSE_Pin;
 8001352:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001358:	2303      	movs	r3, #3
 800135a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCKBOOST_I_IN_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	4619      	mov	r1, r3
 8001366:	4807      	ldr	r0, [pc, #28]	@ (8001384 <HAL_COMP_MspInit+0x124>)
 8001368:	f002 fd90 	bl	8003e8c <HAL_GPIO_Init>
}
 800136c:	bf00      	nop
 800136e:	3730      	adds	r7, #48	@ 0x30
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40010204 	.word	0x40010204
 8001378:	40021000 	.word	0x40021000
 800137c:	40010208 	.word	0x40010208
 8001380:	4001020c 	.word	0x4001020c
 8001384:	48000400 	.word	0x48000400
 8001388:	40010214 	.word	0x40010214

0800138c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a1c      	ldr	r2, [pc, #112]	@ (800140c <HAL_DAC_MspInit+0x80>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d10c      	bne.n	80013b8 <HAL_DAC_MspInit+0x2c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800139e:	4b1c      	ldr	r3, [pc, #112]	@ (8001410 <HAL_DAC_MspInit+0x84>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001410 <HAL_DAC_MspInit+0x84>)
 80013a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013aa:	4b19      	ldr	r3, [pc, #100]	@ (8001410 <HAL_DAC_MspInit+0x84>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 80013b6:	e022      	b.n	80013fe <HAL_DAC_MspInit+0x72>
  else if(hdac->Instance==DAC2)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a15      	ldr	r2, [pc, #84]	@ (8001414 <HAL_DAC_MspInit+0x88>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d10c      	bne.n	80013dc <HAL_DAC_MspInit+0x50>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80013c2:	4b13      	ldr	r3, [pc, #76]	@ (8001410 <HAL_DAC_MspInit+0x84>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c6:	4a12      	ldr	r2, [pc, #72]	@ (8001410 <HAL_DAC_MspInit+0x84>)
 80013c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ce:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <HAL_DAC_MspInit+0x84>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
}
 80013da:	e010      	b.n	80013fe <HAL_DAC_MspInit+0x72>
  else if(hdac->Instance==DAC3)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001418 <HAL_DAC_MspInit+0x8c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d10b      	bne.n	80013fe <HAL_DAC_MspInit+0x72>
    __HAL_RCC_DAC3_CLK_ENABLE();
 80013e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001410 <HAL_DAC_MspInit+0x84>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	4a09      	ldr	r2, [pc, #36]	@ (8001410 <HAL_DAC_MspInit+0x84>)
 80013ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f2:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <HAL_DAC_MspInit+0x84>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
}
 80013fe:	bf00      	nop
 8001400:	371c      	adds	r7, #28
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	50000800 	.word	0x50000800
 8001410:	40021000 	.word	0x40021000
 8001414:	50000c00 	.word	0x50000c00
 8001418:	50001000 	.word	0x50001000

0800141c <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a11      	ldr	r2, [pc, #68]	@ (8001470 <HAL_HRTIM_MspInit+0x54>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d11b      	bne.n	8001466 <HAL_HRTIM_MspInit+0x4a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 800142e:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <HAL_HRTIM_MspInit+0x58>)
 8001430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001432:	4a10      	ldr	r2, [pc, #64]	@ (8001474 <HAL_HRTIM_MspInit+0x58>)
 8001434:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001438:	6613      	str	r3, [r2, #96]	@ 0x60
 800143a:	4b0e      	ldr	r3, [pc, #56]	@ (8001474 <HAL_HRTIM_MspInit+0x58>)
 800143c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800143e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_Master_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	2043      	movs	r0, #67	@ 0x43
 800144c:	f002 fa4f 	bl	80038ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_Master_IRQn);
 8001450:	2043      	movs	r0, #67	@ 0x43
 8001452:	f002 fa66 	bl	8003922 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIMF_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	204a      	movs	r0, #74	@ 0x4a
 800145c:	f002 fa47 	bl	80038ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMF_IRQn);
 8001460:	204a      	movs	r0, #74	@ 0x4a
 8001462:	f002 fa5e 	bl	8003922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40016800 	.word	0x40016800
 8001474:	40021000 	.word	0x40021000

08001478 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	@ 0x28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a37      	ldr	r2, [pc, #220]	@ (8001574 <HAL_HRTIM_MspPostInit+0xfc>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d167      	bne.n	800156a <HAL_HRTIM_MspPostInit+0xf2>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	4b37      	ldr	r3, [pc, #220]	@ (8001578 <HAL_HRTIM_MspPostInit+0x100>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	4a36      	ldr	r2, [pc, #216]	@ (8001578 <HAL_HRTIM_MspPostInit+0x100>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a6:	4b34      	ldr	r3, [pc, #208]	@ (8001578 <HAL_HRTIM_MspPostInit+0x100>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	4b31      	ldr	r3, [pc, #196]	@ (8001578 <HAL_HRTIM_MspPostInit+0x100>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b6:	4a30      	ldr	r2, [pc, #192]	@ (8001578 <HAL_HRTIM_MspPostInit+0x100>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014be:	4b2e      	ldr	r3, [pc, #184]	@ (8001578 <HAL_HRTIM_MspPostInit+0x100>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001578 <HAL_HRTIM_MspPostInit+0x100>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ce:	4a2a      	ldr	r2, [pc, #168]	@ (8001578 <HAL_HRTIM_MspPostInit+0x100>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014d6:	4b28      	ldr	r3, [pc, #160]	@ (8001578 <HAL_HRTIM_MspPostInit+0x100>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> HRTIM1_CHF1
    PC7     ------> HRTIM1_CHF2
    PC8     ------> HRTIM1_CHE1
    PA8     ------> HRTIM1_CHA1
    */
    GPIO_InitStruct.Pin = BUCKBOOST_P1_DRIVE_Pin|BUCKBOOST_N1_DRIVE_Pin|BUCKBOOST_N2_DRIVE_Pin|BUCKBOOST_P2_DRIVE_Pin;
 80014e2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80014e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80014f4:	230d      	movs	r3, #13
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	481f      	ldr	r0, [pc, #124]	@ (800157c <HAL_HRTIM_MspPostInit+0x104>)
 8001500:	f002 fcc4 	bl	8003e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_RED_DRIVE_Pin|RC_TP4_Pin;
 8001504:	23c0      	movs	r3, #192	@ 0xc0
 8001506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001510:	2303      	movs	r3, #3
 8001512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8001514:	230d      	movs	r3, #13
 8001516:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	4818      	ldr	r0, [pc, #96]	@ (8001580 <HAL_HRTIM_MspPostInit+0x108>)
 8001520:	f002 fcb4 	bl	8003e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_GREEN_DRIVE_Pin;
 8001524:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001532:	2303      	movs	r3, #3
 8001534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_HRTIM1;
 8001536:	2303      	movs	r3, #3
 8001538:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_GREEN_DRIVE_GPIO_Port, &GPIO_InitStruct);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	4619      	mov	r1, r3
 8001540:	480f      	ldr	r0, [pc, #60]	@ (8001580 <HAL_HRTIM_MspPostInit+0x108>)
 8001542:	f002 fca3 	bl	8003e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_BLUE_DRIVE_Pin;
 8001546:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800154a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001554:	2303      	movs	r3, #3
 8001556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8001558:	230d      	movs	r3, #13
 800155a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_BLUE_DRIVE_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	4619      	mov	r1, r3
 8001562:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001566:	f002 fc91 	bl	8003e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 800156a:	bf00      	nop
 800156c:	3728      	adds	r7, #40	@ 0x28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40016800 	.word	0x40016800
 8001578:	40021000 	.word	0x40021000
 800157c:	48000400 	.word	0x48000400
 8001580:	48000800 	.word	0x48000800

08001584 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0d      	ldr	r2, [pc, #52]	@ (80015c8 <HAL_TIM_Base_MspInit+0x44>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d113      	bne.n	80015be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001596:	4b0d      	ldr	r3, [pc, #52]	@ (80015cc <HAL_TIM_Base_MspInit+0x48>)
 8001598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800159a:	4a0c      	ldr	r2, [pc, #48]	@ (80015cc <HAL_TIM_Base_MspInit+0x48>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80015a2:	4b0a      	ldr	r3, [pc, #40]	@ (80015cc <HAL_TIM_Base_MspInit+0x48>)
 80015a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2100      	movs	r1, #0
 80015b2:	201d      	movs	r0, #29
 80015b4:	f002 f99b 	bl	80038ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015b8:	201d      	movs	r0, #29
 80015ba:	f002 f9b2 	bl	8003922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015be:	bf00      	nop
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40000400 	.word	0x40000400
 80015cc:	40021000 	.word	0x40021000

080015d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b09e      	sub	sp, #120	@ 0x78
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	2254      	movs	r2, #84	@ 0x54
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f00a fa0e 	bl	800ba12 <memset>
  if(huart->Instance==USART3)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a23      	ldr	r2, [pc, #140]	@ (8001688 <HAL_UART_MspInit+0xb8>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d13e      	bne.n	800167e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001600:	2304      	movs	r3, #4
 8001602:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001608:	f107 0310 	add.w	r3, r7, #16
 800160c:	4618      	mov	r0, r3
 800160e:	f006 f9c1 	bl	8007994 <HAL_RCCEx_PeriphCLKConfig>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001618:	f7ff fd82 	bl	8001120 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800161c:	4b1b      	ldr	r3, [pc, #108]	@ (800168c <HAL_UART_MspInit+0xbc>)
 800161e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001620:	4a1a      	ldr	r2, [pc, #104]	@ (800168c <HAL_UART_MspInit+0xbc>)
 8001622:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001626:	6593      	str	r3, [r2, #88]	@ 0x58
 8001628:	4b18      	ldr	r3, [pc, #96]	@ (800168c <HAL_UART_MspInit+0xbc>)
 800162a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800162c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001634:	4b15      	ldr	r3, [pc, #84]	@ (800168c <HAL_UART_MspInit+0xbc>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001638:	4a14      	ldr	r2, [pc, #80]	@ (800168c <HAL_UART_MspInit+0xbc>)
 800163a:	f043 0304 	orr.w	r3, r3, #4
 800163e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001640:	4b12      	ldr	r3, [pc, #72]	@ (800168c <HAL_UART_MspInit+0xbc>)
 8001642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 800164c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001650:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800165a:	2301      	movs	r3, #1
 800165c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800165e:	2307      	movs	r3, #7
 8001660:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001662:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001666:	4619      	mov	r1, r3
 8001668:	4809      	ldr	r0, [pc, #36]	@ (8001690 <HAL_UART_MspInit+0xc0>)
 800166a:	f002 fc0f 	bl	8003e8c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	2027      	movs	r0, #39	@ 0x27
 8001674:	f002 f93b 	bl	80038ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001678:	2027      	movs	r0, #39	@ 0x27
 800167a:	f002 f952 	bl	8003922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800167e:	bf00      	nop
 8001680:	3778      	adds	r7, #120	@ 0x78
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40004800 	.word	0x40004800
 800168c:	40021000 	.word	0x40021000
 8001690:	48000800 	.word	0x48000800

08001694 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b098      	sub	sp, #96	@ 0x60
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	2254      	movs	r2, #84	@ 0x54
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f00a f9b4 	bl	800ba12 <memset>
  if(hpcd->Instance==USB)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a15      	ldr	r2, [pc, #84]	@ (8001704 <HAL_PCD_MspInit+0x70>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d122      	bne.n	80016fa <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80016b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016b8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80016ba:	2300      	movs	r3, #0
 80016bc:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	4618      	mov	r0, r3
 80016c4:	f006 f966 	bl	8007994 <HAL_RCCEx_PeriphCLKConfig>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80016ce:	f7ff fd27 	bl	8001120 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80016d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001708 <HAL_PCD_MspInit+0x74>)
 80016d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001708 <HAL_PCD_MspInit+0x74>)
 80016d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80016de:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <HAL_PCD_MspInit+0x74>)
 80016e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	2013      	movs	r0, #19
 80016f0:	f002 f8fd 	bl	80038ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 80016f4:	2013      	movs	r0, #19
 80016f6:	f002 f914 	bl	8003922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80016fa:	bf00      	nop
 80016fc:	3760      	adds	r7, #96	@ 0x60
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40005c00 	.word	0x40005c00
 8001708:	40021000 	.word	0x40021000

0800170c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <NMI_Handler+0x4>

08001714 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <HardFault_Handler+0x4>

0800171c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <MemManage_Handler+0x4>

08001724 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <UsageFault_Handler+0x4>

08001734 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001762:	f000 f8ef 	bl	8001944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}

0800176a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_RIGHT_Pin);
 800176e:	2004      	movs	r0, #4
 8001770:	f002 fd40 	bl	80041f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}

08001778 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_LEFT_Pin);
 800177c:	2010      	movs	r0, #16
 800177e:	f002 fd39 	bl	80041f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800178c:	4802      	ldr	r0, [pc, #8]	@ (8001798 <ADC1_2_IRQHandler+0x10>)
 800178e:	f000 fccb 	bl	8002128 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000028 	.word	0x20000028

0800179c <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80017a0:	4802      	ldr	r0, [pc, #8]	@ (80017ac <USB_HP_IRQHandler+0x10>)
 80017a2:	f004 f899 	bl	80058d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000033c 	.word	0x2000033c

080017b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_DOWN_Pin);
 80017b4:	2020      	movs	r0, #32
 80017b6:	f002 fd1d 	bl	80041f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017c4:	4802      	ldr	r0, [pc, #8]	@ (80017d0 <TIM3_IRQHandler+0x10>)
 80017c6:	f006 fc03 	bl	8007fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	2000025c 	.word	0x2000025c

080017d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017d8:	4802      	ldr	r0, [pc, #8]	@ (80017e4 <USART3_IRQHandler+0x10>)
 80017da:	f007 f903 	bl	80089e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200002a8 	.word	0x200002a8

080017e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_UP_Pin);
 80017ec:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80017f0:	f002 fd00 	bl	80041f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_SEL_Pin);
 80017f4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80017f8:	f002 fcfc 	bl	80041f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}

08001800 <HRTIM1_Master_IRQHandler>:

/**
  * @brief This function handles HRTIM master timer global interrupt.
  */
void HRTIM1_Master_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_Master_IRQn 0 */

  /* USER CODE END HRTIM1_Master_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_MASTER);
 8001804:	2106      	movs	r1, #6
 8001806:	4802      	ldr	r0, [pc, #8]	@ (8001810 <HRTIM1_Master_IRQHandler+0x10>)
 8001808:	f002 ff8d 	bl	8004726 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_Master_IRQn 1 */

  /* USER CODE END HRTIM1_Master_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000160 	.word	0x20000160

08001814 <HRTIM1_TIMF_IRQHandler>:

/**
  * @brief This function handles HRTIM timer F global interrupt.
  */
void HRTIM1_TIMF_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMF_IRQn 0 */

  /* USER CODE END HRTIM1_TIMF_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_TIMER_F);
 8001818:	2105      	movs	r1, #5
 800181a:	4802      	ldr	r0, [pc, #8]	@ (8001824 <HRTIM1_TIMF_IRQHandler+0x10>)
 800181c:	f002 ff83 	bl	8004726 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMF_IRQn 1 */

  /* USER CODE END HRTIM1_TIMF_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000160 	.word	0x20000160

08001828 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800182c:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <SystemInit+0x20>)
 800182e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001832:	4a05      	ldr	r2, [pc, #20]	@ (8001848 <SystemInit+0x20>)
 8001834:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001838:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800184c:	480d      	ldr	r0, [pc, #52]	@ (8001884 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800184e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001850:	f7ff ffea 	bl	8001828 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001854:	480c      	ldr	r0, [pc, #48]	@ (8001888 <LoopForever+0x6>)
  ldr r1, =_edata
 8001856:	490d      	ldr	r1, [pc, #52]	@ (800188c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001858:	4a0d      	ldr	r2, [pc, #52]	@ (8001890 <LoopForever+0xe>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800185c:	e002      	b.n	8001864 <LoopCopyDataInit>

0800185e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001862:	3304      	adds	r3, #4

08001864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001868:	d3f9      	bcc.n	800185e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186a:	4a0a      	ldr	r2, [pc, #40]	@ (8001894 <LoopForever+0x12>)
  ldr r4, =_ebss
 800186c:	4c0a      	ldr	r4, [pc, #40]	@ (8001898 <LoopForever+0x16>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001870:	e001      	b.n	8001876 <LoopFillZerobss>

08001872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001874:	3204      	adds	r2, #4

08001876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001878:	d3fb      	bcc.n	8001872 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800187a:	f00a f8d3 	bl	800ba24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800187e:	f7fe fe73 	bl	8000568 <main>

08001882 <LoopForever>:

LoopForever:
    b LoopForever
 8001882:	e7fe      	b.n	8001882 <LoopForever>
  ldr   r0, =_estack
 8001884:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800188c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001890:	0800bad4 	.word	0x0800bad4
  ldr r2, =_sbss
 8001894:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001898:	20000620 	.word	0x20000620

0800189c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800189c:	e7fe      	b.n	800189c <ADC3_IRQHandler>

0800189e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a8:	2003      	movs	r0, #3
 80018aa:	f002 f815 	bl	80038d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ae:	2000      	movs	r0, #0
 80018b0:	f000 f80e 	bl	80018d0 <HAL_InitTick>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	71fb      	strb	r3, [r7, #7]
 80018be:	e001      	b.n	80018c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018c0:	f7ff fc34 	bl	800112c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018c4:	79fb      	ldrb	r3, [r7, #7]

}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80018dc:	4b16      	ldr	r3, [pc, #88]	@ (8001938 <HAL_InitTick+0x68>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d022      	beq.n	800192a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80018e4:	4b15      	ldr	r3, [pc, #84]	@ (800193c <HAL_InitTick+0x6c>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <HAL_InitTick+0x68>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80018f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80018f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f8:	4618      	mov	r0, r3
 80018fa:	f002 f820 	bl	800393e <HAL_SYSTICK_Config>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10f      	bne.n	8001924 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b0f      	cmp	r3, #15
 8001908:	d809      	bhi.n	800191e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800190a:	2200      	movs	r2, #0
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	f04f 30ff 	mov.w	r0, #4294967295
 8001912:	f001 ffec 	bl	80038ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001916:	4a0a      	ldr	r2, [pc, #40]	@ (8001940 <HAL_InitTick+0x70>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	e007      	b.n	800192e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	73fb      	strb	r3, [r7, #15]
 8001922:	e004      	b.n	800192e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
 8001928:	e001      	b.n	800192e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800192e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000008 	.word	0x20000008
 800193c:	20000000 	.word	0x20000000
 8001940:	20000004 	.word	0x20000004

08001944 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001948:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <HAL_IncTick+0x1c>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <HAL_IncTick+0x20>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4413      	add	r3, r2
 8001952:	4a03      	ldr	r2, [pc, #12]	@ (8001960 <HAL_IncTick+0x1c>)
 8001954:	6013      	str	r3, [r2, #0]
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	2000061c 	.word	0x2000061c
 8001964:	20000008 	.word	0x20000008

08001968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return uwTick;
 800196c:	4b03      	ldr	r3, [pc, #12]	@ (800197c <HAL_GetTick+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	2000061c 	.word	0x2000061c

08001980 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	431a      	orrs	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	609a      	str	r2, [r3, #8]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	609a      	str	r2, [r3, #8]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
 80019f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	3360      	adds	r3, #96	@ 0x60
 80019fa:	461a      	mov	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b08      	ldr	r3, [pc, #32]	@ (8001a2c <LL_ADC_SetOffset+0x44>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	4313      	orrs	r3, r2
 8001a18:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a20:	bf00      	nop
 8001a22:	371c      	adds	r7, #28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	03fff000 	.word	0x03fff000

08001a30 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3360      	adds	r3, #96	@ 0x60
 8001a3e:	461a      	mov	r2, r3
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	3360      	adds	r3, #96	@ 0x60
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	431a      	orrs	r2, r3
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a86:	bf00      	nop
 8001a88:	371c      	adds	r7, #28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b087      	sub	sp, #28
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	3360      	adds	r3, #96	@ 0x60
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001abc:	bf00      	nop
 8001abe:	371c      	adds	r7, #28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b087      	sub	sp, #28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	3360      	adds	r3, #96	@ 0x60
 8001ad8:	461a      	mov	r2, r3
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	431a      	orrs	r2, r3
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001af2:	bf00      	nop
 8001af4:	371c      	adds	r7, #28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	615a      	str	r2, [r3, #20]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b087      	sub	sp, #28
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	3330      	adds	r3, #48	@ 0x30
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	0a1b      	lsrs	r3, r3, #8
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	f003 030c 	and.w	r3, r3, #12
 8001b66:	4413      	add	r3, r2
 8001b68:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	f003 031f 	and.w	r3, r3, #31
 8001b74:	211f      	movs	r1, #31
 8001b76:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	401a      	ands	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	0e9b      	lsrs	r3, r3, #26
 8001b82:	f003 011f 	and.w	r1, r3, #31
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	f003 031f 	and.w	r3, r3, #31
 8001b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b90:	431a      	orrs	r2, r3
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b96:	bf00      	nop
 8001b98:	371c      	adds	r7, #28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bae:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b087      	sub	sp, #28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	3314      	adds	r3, #20
 8001bd8:	461a      	mov	r2, r3
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	0e5b      	lsrs	r3, r3, #25
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	4413      	add	r3, r2
 8001be6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	0d1b      	lsrs	r3, r3, #20
 8001bf0:	f003 031f 	and.w	r3, r3, #31
 8001bf4:	2107      	movs	r1, #7
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	401a      	ands	r2, r3
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	0d1b      	lsrs	r3, r3, #20
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c12:	bf00      	nop
 8001c14:	371c      	adds	r7, #28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
	...

08001c20 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f003 0318 	and.w	r3, r3, #24
 8001c42:	4908      	ldr	r1, [pc, #32]	@ (8001c64 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c44:	40d9      	lsrs	r1, r3
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	400b      	ands	r3, r1
 8001c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c56:	bf00      	nop
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	0007ffff 	.word	0x0007ffff

08001c68 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 031f 	and.w	r3, r3, #31
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001cb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6093      	str	r3, [r2, #8]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001cd8:	d101      	bne.n	8001cde <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001cfc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d00:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d28:	d101      	bne.n	8001d2e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d101      	bne.n	8001d54 <LL_ADC_IsEnabled+0x18>
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <LL_ADC_IsEnabled+0x1a>
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d101      	bne.n	8001d7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d101      	bne.n	8001da0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b089      	sub	sp, #36	@ 0x24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e1a9      	b.n	800211e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d109      	bne.n	8001dec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff f9cb 	bl	8001174 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff67 	bl	8001cc4 <LL_ADC_IsDeepPowerDownEnabled>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d004      	beq.n	8001e06 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff4d 	bl	8001ca0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff ff82 	bl	8001d14 <LL_ADC_IsInternalRegulatorEnabled>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d115      	bne.n	8001e42 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ff66 	bl	8001cec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e20:	4b9c      	ldr	r3, [pc, #624]	@ (8002094 <HAL_ADC_Init+0x2e4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	099b      	lsrs	r3, r3, #6
 8001e26:	4a9c      	ldr	r2, [pc, #624]	@ (8002098 <HAL_ADC_Init+0x2e8>)
 8001e28:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2c:	099b      	lsrs	r3, r3, #6
 8001e2e:	3301      	adds	r3, #1
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e34:	e002      	b.n	8001e3c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f9      	bne.n	8001e36 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ff64 	bl	8001d14 <LL_ADC_IsInternalRegulatorEnabled>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10d      	bne.n	8001e6e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e56:	f043 0210 	orr.w	r2, r3, #16
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e62:	f043 0201 	orr.w	r2, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff75 	bl	8001d62 <LL_ADC_REG_IsConversionOngoing>
 8001e78:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f040 8142 	bne.w	800210c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f040 813e 	bne.w	800210c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e94:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e98:	f043 0202 	orr.w	r2, r3, #2
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff49 	bl	8001d3c <LL_ADC_IsEnabled>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d141      	bne.n	8001f34 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001eb8:	d004      	beq.n	8001ec4 <HAL_ADC_Init+0x114>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a77      	ldr	r2, [pc, #476]	@ (800209c <HAL_ADC_Init+0x2ec>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d10f      	bne.n	8001ee4 <HAL_ADC_Init+0x134>
 8001ec4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001ec8:	f7ff ff38 	bl	8001d3c <LL_ADC_IsEnabled>
 8001ecc:	4604      	mov	r4, r0
 8001ece:	4873      	ldr	r0, [pc, #460]	@ (800209c <HAL_ADC_Init+0x2ec>)
 8001ed0:	f7ff ff34 	bl	8001d3c <LL_ADC_IsEnabled>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	4323      	orrs	r3, r4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	bf0c      	ite	eq
 8001edc:	2301      	moveq	r3, #1
 8001ede:	2300      	movne	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	e012      	b.n	8001f0a <HAL_ADC_Init+0x15a>
 8001ee4:	486e      	ldr	r0, [pc, #440]	@ (80020a0 <HAL_ADC_Init+0x2f0>)
 8001ee6:	f7ff ff29 	bl	8001d3c <LL_ADC_IsEnabled>
 8001eea:	4604      	mov	r4, r0
 8001eec:	486d      	ldr	r0, [pc, #436]	@ (80020a4 <HAL_ADC_Init+0x2f4>)
 8001eee:	f7ff ff25 	bl	8001d3c <LL_ADC_IsEnabled>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	431c      	orrs	r4, r3
 8001ef6:	486c      	ldr	r0, [pc, #432]	@ (80020a8 <HAL_ADC_Init+0x2f8>)
 8001ef8:	f7ff ff20 	bl	8001d3c <LL_ADC_IsEnabled>
 8001efc:	4603      	mov	r3, r0
 8001efe:	4323      	orrs	r3, r4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf0c      	ite	eq
 8001f04:	2301      	moveq	r3, #1
 8001f06:	2300      	movne	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d012      	beq.n	8001f34 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f16:	d004      	beq.n	8001f22 <HAL_ADC_Init+0x172>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a5f      	ldr	r2, [pc, #380]	@ (800209c <HAL_ADC_Init+0x2ec>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d101      	bne.n	8001f26 <HAL_ADC_Init+0x176>
 8001f22:	4a62      	ldr	r2, [pc, #392]	@ (80020ac <HAL_ADC_Init+0x2fc>)
 8001f24:	e000      	b.n	8001f28 <HAL_ADC_Init+0x178>
 8001f26:	4a62      	ldr	r2, [pc, #392]	@ (80020b0 <HAL_ADC_Init+0x300>)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4610      	mov	r0, r2
 8001f30:	f7ff fd26 	bl	8001980 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	7f5b      	ldrb	r3, [r3, #29]
 8001f38:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f3e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f44:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f4a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f52:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d106      	bne.n	8001f70 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f66:	3b01      	subs	r3, #1
 8001f68:	045b      	lsls	r3, r3, #17
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d009      	beq.n	8001f8c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f84:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	4b48      	ldr	r3, [pc, #288]	@ (80020b4 <HAL_ADC_Init+0x304>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6812      	ldr	r2, [r2, #0]
 8001f9a:	69b9      	ldr	r1, [r7, #24]
 8001f9c:	430b      	orrs	r3, r1
 8001f9e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fee4 	bl	8001d88 <LL_ADC_INJ_IsConversionOngoing>
 8001fc0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d17f      	bne.n	80020c8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d17c      	bne.n	80020c8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fd2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001fda:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001fea:	f023 0302 	bic.w	r3, r3, #2
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6812      	ldr	r2, [r2, #0]
 8001ff2:	69b9      	ldr	r1, [r7, #24]
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d017      	beq.n	8002030 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691a      	ldr	r2, [r3, #16]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800200e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002018:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800201c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6911      	ldr	r1, [r2, #16]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6812      	ldr	r2, [r2, #0]
 8002028:	430b      	orrs	r3, r1
 800202a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800202e:	e013      	b.n	8002058 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691a      	ldr	r2, [r3, #16]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800203e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002050:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002054:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800205e:	2b01      	cmp	r3, #1
 8002060:	d12a      	bne.n	80020b8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800206c:	f023 0304 	bic.w	r3, r3, #4
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002078:	4311      	orrs	r1, r2
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800207e:	4311      	orrs	r1, r2
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002084:	430a      	orrs	r2, r1
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 0201 	orr.w	r2, r2, #1
 8002090:	611a      	str	r2, [r3, #16]
 8002092:	e019      	b.n	80020c8 <HAL_ADC_Init+0x318>
 8002094:	20000000 	.word	0x20000000
 8002098:	053e2d63 	.word	0x053e2d63
 800209c:	50000100 	.word	0x50000100
 80020a0:	50000400 	.word	0x50000400
 80020a4:	50000500 	.word	0x50000500
 80020a8:	50000600 	.word	0x50000600
 80020ac:	50000300 	.word	0x50000300
 80020b0:	50000700 	.word	0x50000700
 80020b4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691a      	ldr	r2, [r3, #16]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0201 	bic.w	r2, r2, #1
 80020c6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d10c      	bne.n	80020ea <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	f023 010f 	bic.w	r1, r3, #15
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	1e5a      	subs	r2, r3, #1
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80020e8:	e007      	b.n	80020fa <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 020f 	bic.w	r2, r2, #15
 80020f8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fe:	f023 0303 	bic.w	r3, r3, #3
 8002102:	f043 0201 	orr.w	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	65da      	str	r2, [r3, #92]	@ 0x5c
 800210a:	e007      	b.n	800211c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002110:	f043 0210 	orr.w	r2, r3, #16
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800211c:	7ffb      	ldrb	r3, [r7, #31]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3724      	adds	r7, #36	@ 0x24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd90      	pop	{r4, r7, pc}
 8002126:	bf00      	nop

08002128 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	@ 0x28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002130:	2300      	movs	r3, #0
 8002132:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800214c:	d004      	beq.n	8002158 <HAL_ADC_IRQHandler+0x30>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a8e      	ldr	r2, [pc, #568]	@ (800238c <HAL_ADC_IRQHandler+0x264>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d101      	bne.n	800215c <HAL_ADC_IRQHandler+0x34>
 8002158:	4b8d      	ldr	r3, [pc, #564]	@ (8002390 <HAL_ADC_IRQHandler+0x268>)
 800215a:	e000      	b.n	800215e <HAL_ADC_IRQHandler+0x36>
 800215c:	4b8d      	ldr	r3, [pc, #564]	@ (8002394 <HAL_ADC_IRQHandler+0x26c>)
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fd82 	bl	8001c68 <LL_ADC_GetMultimode>
 8002164:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d017      	beq.n	80021a0 <HAL_ADC_IRQHandler+0x78>
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d012      	beq.n	80021a0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	2b00      	cmp	r3, #0
 8002184:	d105      	bne.n	8002192 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800218a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 fed4 	bl	8002f40 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2202      	movs	r2, #2
 800219e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d004      	beq.n	80021b4 <HAL_ADC_IRQHandler+0x8c>
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10b      	bne.n	80021cc <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 8094 	beq.w	80022e8 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 808e 	beq.w	80022e8 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d105      	bne.n	80021e4 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021dc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fc9b 	bl	8001b24 <LL_ADC_REG_IsTriggerSourceSWStart>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d072      	beq.n	80022da <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a64      	ldr	r2, [pc, #400]	@ (800238c <HAL_ADC_IRQHandler+0x264>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d009      	beq.n	8002212 <HAL_ADC_IRQHandler+0xea>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a65      	ldr	r2, [pc, #404]	@ (8002398 <HAL_ADC_IRQHandler+0x270>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d002      	beq.n	800220e <HAL_ADC_IRQHandler+0xe6>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	e003      	b.n	8002216 <HAL_ADC_IRQHandler+0xee>
 800220e:	4b63      	ldr	r3, [pc, #396]	@ (800239c <HAL_ADC_IRQHandler+0x274>)
 8002210:	e001      	b.n	8002216 <HAL_ADC_IRQHandler+0xee>
 8002212:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	4293      	cmp	r3, r2
 800221c:	d008      	beq.n	8002230 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	2b05      	cmp	r3, #5
 8002228:	d002      	beq.n	8002230 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2b09      	cmp	r3, #9
 800222e:	d104      	bne.n	800223a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	623b      	str	r3, [r7, #32]
 8002238:	e014      	b.n	8002264 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a53      	ldr	r2, [pc, #332]	@ (800238c <HAL_ADC_IRQHandler+0x264>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d009      	beq.n	8002258 <HAL_ADC_IRQHandler+0x130>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a53      	ldr	r2, [pc, #332]	@ (8002398 <HAL_ADC_IRQHandler+0x270>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d002      	beq.n	8002254 <HAL_ADC_IRQHandler+0x12c>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	e003      	b.n	800225c <HAL_ADC_IRQHandler+0x134>
 8002254:	4b51      	ldr	r3, [pc, #324]	@ (800239c <HAL_ADC_IRQHandler+0x274>)
 8002256:	e001      	b.n	800225c <HAL_ADC_IRQHandler+0x134>
 8002258:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800225c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d135      	bne.n	80022da <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b08      	cmp	r3, #8
 800227a:	d12e      	bne.n	80022da <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fd6e 	bl	8001d62 <LL_ADC_REG_IsConversionOngoing>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d11a      	bne.n	80022c2 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 020c 	bic.w	r2, r2, #12
 800229a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d112      	bne.n	80022da <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b8:	f043 0201 	orr.w	r2, r3, #1
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022c0:	e00b      	b.n	80022da <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c6:	f043 0210 	orr.w	r2, r3, #16
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022d2:	f043 0201 	orr.w	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f984 	bl	80025e8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	220c      	movs	r2, #12
 80022e6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f003 0320 	and.w	r3, r3, #32
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d004      	beq.n	80022fc <HAL_ADC_IRQHandler+0x1d4>
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10b      	bne.n	8002314 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 80b3 	beq.w	800246e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 80ad 	beq.w	800246e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002318:	f003 0310 	and.w	r3, r3, #16
 800231c:	2b00      	cmp	r3, #0
 800231e:	d105      	bne.n	800232c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002324:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fc36 	bl	8001ba2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002336:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fbf1 	bl	8001b24 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002342:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a10      	ldr	r2, [pc, #64]	@ (800238c <HAL_ADC_IRQHandler+0x264>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d009      	beq.n	8002362 <HAL_ADC_IRQHandler+0x23a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a11      	ldr	r2, [pc, #68]	@ (8002398 <HAL_ADC_IRQHandler+0x270>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d002      	beq.n	800235e <HAL_ADC_IRQHandler+0x236>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	e003      	b.n	8002366 <HAL_ADC_IRQHandler+0x23e>
 800235e:	4b0f      	ldr	r3, [pc, #60]	@ (800239c <HAL_ADC_IRQHandler+0x274>)
 8002360:	e001      	b.n	8002366 <HAL_ADC_IRQHandler+0x23e>
 8002362:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6812      	ldr	r2, [r2, #0]
 800236a:	4293      	cmp	r3, r2
 800236c:	d008      	beq.n	8002380 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2b06      	cmp	r3, #6
 8002378:	d002      	beq.n	8002380 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	2b07      	cmp	r3, #7
 800237e:	d10f      	bne.n	80023a0 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	623b      	str	r3, [r7, #32]
 8002388:	e01f      	b.n	80023ca <HAL_ADC_IRQHandler+0x2a2>
 800238a:	bf00      	nop
 800238c:	50000100 	.word	0x50000100
 8002390:	50000300 	.word	0x50000300
 8002394:	50000700 	.word	0x50000700
 8002398:	50000500 	.word	0x50000500
 800239c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a8b      	ldr	r2, [pc, #556]	@ (80025d4 <HAL_ADC_IRQHandler+0x4ac>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d009      	beq.n	80023be <HAL_ADC_IRQHandler+0x296>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a8a      	ldr	r2, [pc, #552]	@ (80025d8 <HAL_ADC_IRQHandler+0x4b0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d002      	beq.n	80023ba <HAL_ADC_IRQHandler+0x292>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	e003      	b.n	80023c2 <HAL_ADC_IRQHandler+0x29a>
 80023ba:	4b88      	ldr	r3, [pc, #544]	@ (80025dc <HAL_ADC_IRQHandler+0x4b4>)
 80023bc:	e001      	b.n	80023c2 <HAL_ADC_IRQHandler+0x29a>
 80023be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80023c2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d047      	beq.n	8002460 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d007      	beq.n	80023ea <HAL_ADC_IRQHandler+0x2c2>
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d03f      	beq.n	8002460 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d13a      	bne.n	8002460 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023f4:	2b40      	cmp	r3, #64	@ 0x40
 80023f6:	d133      	bne.n	8002460 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d12e      	bne.n	8002460 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fcbe 	bl	8001d88 <LL_ADC_INJ_IsConversionOngoing>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d11a      	bne.n	8002448 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002420:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002426:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002436:	2b00      	cmp	r3, #0
 8002438:	d112      	bne.n	8002460 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800243e:	f043 0201 	orr.w	r2, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002446:	e00b      	b.n	8002460 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244c:	f043 0210 	orr.w	r2, r3, #16
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002458:	f043 0201 	orr.w	r2, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fd45 	bl	8002ef0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2260      	movs	r2, #96	@ 0x60
 800246c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002474:	2b00      	cmp	r3, #0
 8002476:	d011      	beq.n	800249c <HAL_ADC_IRQHandler+0x374>
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00c      	beq.n	800249c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002486:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f8b4 	bl	80025fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2280      	movs	r2, #128	@ 0x80
 800249a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d012      	beq.n	80024cc <HAL_ADC_IRQHandler+0x3a4>
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00d      	beq.n	80024cc <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 fd2b 	bl	8002f18 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d012      	beq.n	80024fc <HAL_ADC_IRQHandler+0x3d4>
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00d      	beq.n	80024fc <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 fd1d 	bl	8002f2c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024fa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	2b00      	cmp	r3, #0
 8002504:	d043      	beq.n	800258e <HAL_ADC_IRQHandler+0x466>
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	2b00      	cmp	r3, #0
 800250e:	d03e      	beq.n	800258e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002514:	2b00      	cmp	r3, #0
 8002516:	d102      	bne.n	800251e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002518:	2301      	movs	r3, #1
 800251a:	627b      	str	r3, [r7, #36]	@ 0x24
 800251c:	e021      	b.n	8002562 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d015      	beq.n	8002550 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800252c:	d004      	beq.n	8002538 <HAL_ADC_IRQHandler+0x410>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a28      	ldr	r2, [pc, #160]	@ (80025d4 <HAL_ADC_IRQHandler+0x4ac>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d101      	bne.n	800253c <HAL_ADC_IRQHandler+0x414>
 8002538:	4b29      	ldr	r3, [pc, #164]	@ (80025e0 <HAL_ADC_IRQHandler+0x4b8>)
 800253a:	e000      	b.n	800253e <HAL_ADC_IRQHandler+0x416>
 800253c:	4b29      	ldr	r3, [pc, #164]	@ (80025e4 <HAL_ADC_IRQHandler+0x4bc>)
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fba0 	bl	8001c84 <LL_ADC_GetMultiDMATransfer>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00b      	beq.n	8002562 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800254a:	2301      	movs	r3, #1
 800254c:	627b      	str	r3, [r7, #36]	@ 0x24
 800254e:	e008      	b.n	8002562 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800255e:	2301      	movs	r3, #1
 8002560:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002564:	2b01      	cmp	r3, #1
 8002566:	d10e      	bne.n	8002586 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800256c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002578:	f043 0202 	orr.w	r2, r3, #2
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f845 	bl	8002610 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2210      	movs	r2, #16
 800258c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002594:	2b00      	cmp	r3, #0
 8002596:	d018      	beq.n	80025ca <HAL_ADC_IRQHandler+0x4a2>
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d013      	beq.n	80025ca <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025b2:	f043 0208 	orr.w	r2, r3, #8
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025c2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 fc9d 	bl	8002f04 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80025ca:	bf00      	nop
 80025cc:	3728      	adds	r7, #40	@ 0x28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	50000100 	.word	0x50000100
 80025d8:	50000500 	.word	0x50000500
 80025dc:	50000400 	.word	0x50000400
 80025e0:	50000300 	.word	0x50000300
 80025e4:	50000700 	.word	0x50000700

080025e8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b0b6      	sub	sp, #216	@ 0xd8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002634:	2300      	movs	r3, #0
 8002636:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800263e:	2b01      	cmp	r3, #1
 8002640:	d102      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x24>
 8002642:	2302      	movs	r3, #2
 8002644:	f000 bc13 	b.w	8002e6e <HAL_ADC_ConfigChannel+0x84a>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fb84 	bl	8001d62 <LL_ADC_REG_IsConversionOngoing>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	f040 83f3 	bne.w	8002e48 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	6859      	ldr	r1, [r3, #4]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	f7ff fa6b 	bl	8001b4a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fb72 	bl	8001d62 <LL_ADC_REG_IsConversionOngoing>
 800267e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fb7e 	bl	8001d88 <LL_ADC_INJ_IsConversionOngoing>
 800268c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002690:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002694:	2b00      	cmp	r3, #0
 8002696:	f040 81d9 	bne.w	8002a4c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800269a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f040 81d4 	bne.w	8002a4c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026ac:	d10f      	bne.n	80026ce <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2200      	movs	r2, #0
 80026b8:	4619      	mov	r1, r3
 80026ba:	f7ff fa85 	bl	8001bc8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fa19 	bl	8001afe <LL_ADC_SetSamplingTimeCommonConfig>
 80026cc:	e00e      	b.n	80026ec <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6818      	ldr	r0, [r3, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	6819      	ldr	r1, [r3, #0]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	461a      	mov	r2, r3
 80026dc:	f7ff fa74 	bl	8001bc8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff fa09 	bl	8001afe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	695a      	ldr	r2, [r3, #20]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	08db      	lsrs	r3, r3, #3
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b04      	cmp	r3, #4
 800270c:	d022      	beq.n	8002754 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6919      	ldr	r1, [r3, #16]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800271e:	f7ff f963 	bl	80019e8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	6919      	ldr	r1, [r3, #16]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	461a      	mov	r2, r3
 8002730:	f7ff f9af 	bl	8001a92 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6818      	ldr	r0, [r3, #0]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002740:	2b01      	cmp	r3, #1
 8002742:	d102      	bne.n	800274a <HAL_ADC_ConfigChannel+0x126>
 8002744:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002748:	e000      	b.n	800274c <HAL_ADC_ConfigChannel+0x128>
 800274a:	2300      	movs	r3, #0
 800274c:	461a      	mov	r2, r3
 800274e:	f7ff f9bb 	bl	8001ac8 <LL_ADC_SetOffsetSaturation>
 8002752:	e17b      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2100      	movs	r1, #0
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff f968 	bl	8001a30 <LL_ADC_GetOffsetChannel>
 8002760:	4603      	mov	r3, r0
 8002762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10a      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x15c>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2100      	movs	r1, #0
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff f95d 	bl	8001a30 <LL_ADC_GetOffsetChannel>
 8002776:	4603      	mov	r3, r0
 8002778:	0e9b      	lsrs	r3, r3, #26
 800277a:	f003 021f 	and.w	r2, r3, #31
 800277e:	e01e      	b.n	80027be <HAL_ADC_ConfigChannel+0x19a>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2100      	movs	r1, #0
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff f952 	bl	8001a30 <LL_ADC_GetOffsetChannel>
 800278c:	4603      	mov	r3, r0
 800278e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002792:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800279e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80027ae:	2320      	movs	r3, #32
 80027b0:	e004      	b.n	80027bc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80027b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027b6:	fab3 f383 	clz	r3, r3
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d105      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x1b2>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	0e9b      	lsrs	r3, r3, #26
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	e018      	b.n	8002808 <HAL_ADC_ConfigChannel+0x1e4>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80027e2:	fa93 f3a3 	rbit	r3, r3
 80027e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80027ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80027f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80027fa:	2320      	movs	r3, #32
 80027fc:	e004      	b.n	8002808 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80027fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002802:	fab3 f383 	clz	r3, r3
 8002806:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002808:	429a      	cmp	r2, r3
 800280a:	d106      	bne.n	800281a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2200      	movs	r2, #0
 8002812:	2100      	movs	r1, #0
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff f921 	bl	8001a5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2101      	movs	r1, #1
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff f905 	bl	8001a30 <LL_ADC_GetOffsetChannel>
 8002826:	4603      	mov	r3, r0
 8002828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10a      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x222>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2101      	movs	r1, #1
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff f8fa 	bl	8001a30 <LL_ADC_GetOffsetChannel>
 800283c:	4603      	mov	r3, r0
 800283e:	0e9b      	lsrs	r3, r3, #26
 8002840:	f003 021f 	and.w	r2, r3, #31
 8002844:	e01e      	b.n	8002884 <HAL_ADC_ConfigChannel+0x260>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2101      	movs	r1, #1
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff f8ef 	bl	8001a30 <LL_ADC_GetOffsetChannel>
 8002852:	4603      	mov	r3, r0
 8002854:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800285c:	fa93 f3a3 	rbit	r3, r3
 8002860:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002864:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002868:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800286c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002874:	2320      	movs	r3, #32
 8002876:	e004      	b.n	8002882 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002878:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800287c:	fab3 f383 	clz	r3, r3
 8002880:	b2db      	uxtb	r3, r3
 8002882:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800288c:	2b00      	cmp	r3, #0
 800288e:	d105      	bne.n	800289c <HAL_ADC_ConfigChannel+0x278>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	0e9b      	lsrs	r3, r3, #26
 8002896:	f003 031f 	and.w	r3, r3, #31
 800289a:	e018      	b.n	80028ce <HAL_ADC_ConfigChannel+0x2aa>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028a8:	fa93 f3a3 	rbit	r3, r3
 80028ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80028b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80028b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80028b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80028c0:	2320      	movs	r3, #32
 80028c2:	e004      	b.n	80028ce <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80028c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028c8:	fab3 f383 	clz	r3, r3
 80028cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d106      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2200      	movs	r2, #0
 80028d8:	2101      	movs	r1, #1
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff f8be 	bl	8001a5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2102      	movs	r1, #2
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff f8a2 	bl	8001a30 <LL_ADC_GetOffsetChannel>
 80028ec:	4603      	mov	r3, r0
 80028ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10a      	bne.n	800290c <HAL_ADC_ConfigChannel+0x2e8>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2102      	movs	r1, #2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff f897 	bl	8001a30 <LL_ADC_GetOffsetChannel>
 8002902:	4603      	mov	r3, r0
 8002904:	0e9b      	lsrs	r3, r3, #26
 8002906:	f003 021f 	and.w	r2, r3, #31
 800290a:	e01e      	b.n	800294a <HAL_ADC_ConfigChannel+0x326>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2102      	movs	r1, #2
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff f88c 	bl	8001a30 <LL_ADC_GetOffsetChannel>
 8002918:	4603      	mov	r3, r0
 800291a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002922:	fa93 f3a3 	rbit	r3, r3
 8002926:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800292a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800292e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002932:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800293a:	2320      	movs	r3, #32
 800293c:	e004      	b.n	8002948 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800293e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002942:	fab3 f383 	clz	r3, r3
 8002946:	b2db      	uxtb	r3, r3
 8002948:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002952:	2b00      	cmp	r3, #0
 8002954:	d105      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x33e>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	0e9b      	lsrs	r3, r3, #26
 800295c:	f003 031f 	and.w	r3, r3, #31
 8002960:	e016      	b.n	8002990 <HAL_ADC_ConfigChannel+0x36c>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800296e:	fa93 f3a3 	rbit	r3, r3
 8002972:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002974:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002976:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800297a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002982:	2320      	movs	r3, #32
 8002984:	e004      	b.n	8002990 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002986:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800298a:	fab3 f383 	clz	r3, r3
 800298e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002990:	429a      	cmp	r2, r3
 8002992:	d106      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2200      	movs	r2, #0
 800299a:	2102      	movs	r1, #2
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff f85d 	bl	8001a5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2103      	movs	r1, #3
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff f841 	bl	8001a30 <LL_ADC_GetOffsetChannel>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10a      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x3aa>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2103      	movs	r1, #3
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff f836 	bl	8001a30 <LL_ADC_GetOffsetChannel>
 80029c4:	4603      	mov	r3, r0
 80029c6:	0e9b      	lsrs	r3, r3, #26
 80029c8:	f003 021f 	and.w	r2, r3, #31
 80029cc:	e017      	b.n	80029fe <HAL_ADC_ConfigChannel+0x3da>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2103      	movs	r1, #3
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff f82b 	bl	8001a30 <LL_ADC_GetOffsetChannel>
 80029da:	4603      	mov	r3, r0
 80029dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029e0:	fa93 f3a3 	rbit	r3, r3
 80029e4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80029e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029e8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80029ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80029f0:	2320      	movs	r3, #32
 80029f2:	e003      	b.n	80029fc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80029f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029f6:	fab3 f383 	clz	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d105      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x3f2>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	0e9b      	lsrs	r3, r3, #26
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	e011      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x416>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002a24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a26:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002a28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002a2e:	2320      	movs	r3, #32
 8002a30:	e003      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002a32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d106      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2200      	movs	r2, #0
 8002a44:	2103      	movs	r1, #3
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff f808 	bl	8001a5c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff f973 	bl	8001d3c <LL_ADC_IsEnabled>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f040 813d 	bne.w	8002cd8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6818      	ldr	r0, [r3, #0]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	6819      	ldr	r1, [r3, #0]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f7ff f8d8 	bl	8001c20 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4aa2      	ldr	r2, [pc, #648]	@ (8002d00 <HAL_ADC_ConfigChannel+0x6dc>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	f040 812e 	bne.w	8002cd8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10b      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x480>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	0e9b      	lsrs	r3, r3, #26
 8002a92:	3301      	adds	r3, #1
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	2b09      	cmp	r3, #9
 8002a9a:	bf94      	ite	ls
 8002a9c:	2301      	movls	r3, #1
 8002a9e:	2300      	movhi	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	e019      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x4b4>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aac:	fa93 f3a3 	rbit	r3, r3
 8002ab0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002ab2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ab4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002ab6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002abc:	2320      	movs	r3, #32
 8002abe:	e003      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002ac0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ac2:	fab3 f383 	clz	r3, r3
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	3301      	adds	r3, #1
 8002aca:	f003 031f 	and.w	r3, r3, #31
 8002ace:	2b09      	cmp	r3, #9
 8002ad0:	bf94      	ite	ls
 8002ad2:	2301      	movls	r3, #1
 8002ad4:	2300      	movhi	r3, #0
 8002ad6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d079      	beq.n	8002bd0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d107      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x4d4>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	0e9b      	lsrs	r3, r3, #26
 8002aee:	3301      	adds	r3, #1
 8002af0:	069b      	lsls	r3, r3, #26
 8002af2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002af6:	e015      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x500>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b00:	fa93 f3a3 	rbit	r3, r3
 8002b04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b08:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002b10:	2320      	movs	r3, #32
 8002b12:	e003      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002b14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b16:	fab3 f383 	clz	r3, r3
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	069b      	lsls	r3, r3, #26
 8002b20:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d109      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x520>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	0e9b      	lsrs	r3, r3, #26
 8002b36:	3301      	adds	r3, #1
 8002b38:	f003 031f 	and.w	r3, r3, #31
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b42:	e017      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x550>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b4c:	fa93 f3a3 	rbit	r3, r3
 8002b50:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002b52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b54:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002b56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002b5c:	2320      	movs	r3, #32
 8002b5e:	e003      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002b60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b62:	fab3 f383 	clz	r3, r3
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	3301      	adds	r3, #1
 8002b6a:	f003 031f 	and.w	r3, r3, #31
 8002b6e:	2101      	movs	r1, #1
 8002b70:	fa01 f303 	lsl.w	r3, r1, r3
 8002b74:	ea42 0103 	orr.w	r1, r2, r3
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10a      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x576>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	0e9b      	lsrs	r3, r3, #26
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	f003 021f 	and.w	r2, r3, #31
 8002b90:	4613      	mov	r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	4413      	add	r3, r2
 8002b96:	051b      	lsls	r3, r3, #20
 8002b98:	e018      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x5a8>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ba2:	fa93 f3a3 	rbit	r3, r3
 8002ba6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002bb2:	2320      	movs	r3, #32
 8002bb4:	e003      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bb8:	fab3 f383 	clz	r3, r3
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	f003 021f 	and.w	r2, r3, #31
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	4413      	add	r3, r2
 8002bca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	e07e      	b.n	8002cce <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d107      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x5c8>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	0e9b      	lsrs	r3, r3, #26
 8002be2:	3301      	adds	r3, #1
 8002be4:	069b      	lsls	r3, r3, #26
 8002be6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bea:	e015      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x5f4>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf4:	fa93 f3a3 	rbit	r3, r3
 8002bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bfc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002c04:	2320      	movs	r3, #32
 8002c06:	e003      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	3301      	adds	r3, #1
 8002c12:	069b      	lsls	r3, r3, #26
 8002c14:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d109      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x614>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	0e9b      	lsrs	r3, r3, #26
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	f003 031f 	and.w	r3, r3, #31
 8002c30:	2101      	movs	r1, #1
 8002c32:	fa01 f303 	lsl.w	r3, r1, r3
 8002c36:	e017      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x644>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	fa93 f3a3 	rbit	r3, r3
 8002c44:	61fb      	str	r3, [r7, #28]
  return result;
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002c50:	2320      	movs	r3, #32
 8002c52:	e003      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c56:	fab3 f383 	clz	r3, r3
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	f003 031f 	and.w	r3, r3, #31
 8002c62:	2101      	movs	r1, #1
 8002c64:	fa01 f303 	lsl.w	r3, r1, r3
 8002c68:	ea42 0103 	orr.w	r1, r2, r3
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10d      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x670>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	0e9b      	lsrs	r3, r3, #26
 8002c7e:	3301      	adds	r3, #1
 8002c80:	f003 021f 	and.w	r2, r3, #31
 8002c84:	4613      	mov	r3, r2
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	4413      	add	r3, r2
 8002c8a:	3b1e      	subs	r3, #30
 8002c8c:	051b      	lsls	r3, r3, #20
 8002c8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c92:	e01b      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x6a8>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	fa93 f3a3 	rbit	r3, r3
 8002ca0:	613b      	str	r3, [r7, #16]
  return result;
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002cac:	2320      	movs	r3, #32
 8002cae:	e003      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	fab3 f383 	clz	r3, r3
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	3301      	adds	r3, #1
 8002cba:	f003 021f 	and.w	r2, r3, #31
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3b1e      	subs	r3, #30
 8002cc6:	051b      	lsls	r3, r3, #20
 8002cc8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ccc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	f7fe ff78 	bl	8001bc8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4b09      	ldr	r3, [pc, #36]	@ (8002d04 <HAL_ADC_ConfigChannel+0x6e0>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 80be 	beq.w	8002e62 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cee:	d004      	beq.n	8002cfa <HAL_ADC_ConfigChannel+0x6d6>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a04      	ldr	r2, [pc, #16]	@ (8002d08 <HAL_ADC_ConfigChannel+0x6e4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d10a      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x6ec>
 8002cfa:	4b04      	ldr	r3, [pc, #16]	@ (8002d0c <HAL_ADC_ConfigChannel+0x6e8>)
 8002cfc:	e009      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x6ee>
 8002cfe:	bf00      	nop
 8002d00:	407f0000 	.word	0x407f0000
 8002d04:	80080000 	.word	0x80080000
 8002d08:	50000100 	.word	0x50000100
 8002d0c:	50000300 	.word	0x50000300
 8002d10:	4b59      	ldr	r3, [pc, #356]	@ (8002e78 <HAL_ADC_ConfigChannel+0x854>)
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe fe5a 	bl	80019cc <LL_ADC_GetCommonPathInternalCh>
 8002d18:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a56      	ldr	r2, [pc, #344]	@ (8002e7c <HAL_ADC_ConfigChannel+0x858>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d004      	beq.n	8002d30 <HAL_ADC_ConfigChannel+0x70c>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a55      	ldr	r2, [pc, #340]	@ (8002e80 <HAL_ADC_ConfigChannel+0x85c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d13a      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d134      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d44:	d005      	beq.n	8002d52 <HAL_ADC_ConfigChannel+0x72e>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a4e      	ldr	r2, [pc, #312]	@ (8002e84 <HAL_ADC_ConfigChannel+0x860>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	f040 8085 	bne.w	8002e5c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d5a:	d004      	beq.n	8002d66 <HAL_ADC_ConfigChannel+0x742>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a49      	ldr	r2, [pc, #292]	@ (8002e88 <HAL_ADC_ConfigChannel+0x864>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d101      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x746>
 8002d66:	4a49      	ldr	r2, [pc, #292]	@ (8002e8c <HAL_ADC_ConfigChannel+0x868>)
 8002d68:	e000      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x748>
 8002d6a:	4a43      	ldr	r2, [pc, #268]	@ (8002e78 <HAL_ADC_ConfigChannel+0x854>)
 8002d6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d70:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d74:	4619      	mov	r1, r3
 8002d76:	4610      	mov	r0, r2
 8002d78:	f7fe fe15 	bl	80019a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d7c:	4b44      	ldr	r3, [pc, #272]	@ (8002e90 <HAL_ADC_ConfigChannel+0x86c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	099b      	lsrs	r3, r3, #6
 8002d82:	4a44      	ldr	r2, [pc, #272]	@ (8002e94 <HAL_ADC_ConfigChannel+0x870>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	099b      	lsrs	r3, r3, #6
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d96:	e002      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f9      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002da4:	e05a      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a3b      	ldr	r2, [pc, #236]	@ (8002e98 <HAL_ADC_ConfigChannel+0x874>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d125      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002db0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002db4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d11f      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a31      	ldr	r2, [pc, #196]	@ (8002e88 <HAL_ADC_ConfigChannel+0x864>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d104      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x7ac>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a34      	ldr	r2, [pc, #208]	@ (8002e9c <HAL_ADC_ConfigChannel+0x878>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d047      	beq.n	8002e60 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dd8:	d004      	beq.n	8002de4 <HAL_ADC_ConfigChannel+0x7c0>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a2a      	ldr	r2, [pc, #168]	@ (8002e88 <HAL_ADC_ConfigChannel+0x864>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d101      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x7c4>
 8002de4:	4a29      	ldr	r2, [pc, #164]	@ (8002e8c <HAL_ADC_ConfigChannel+0x868>)
 8002de6:	e000      	b.n	8002dea <HAL_ADC_ConfigChannel+0x7c6>
 8002de8:	4a23      	ldr	r2, [pc, #140]	@ (8002e78 <HAL_ADC_ConfigChannel+0x854>)
 8002dea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002df2:	4619      	mov	r1, r3
 8002df4:	4610      	mov	r0, r2
 8002df6:	f7fe fdd6 	bl	80019a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dfa:	e031      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a27      	ldr	r2, [pc, #156]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x87c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d12d      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d127      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a1c      	ldr	r2, [pc, #112]	@ (8002e88 <HAL_ADC_ConfigChannel+0x864>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d022      	beq.n	8002e62 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e24:	d004      	beq.n	8002e30 <HAL_ADC_ConfigChannel+0x80c>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a17      	ldr	r2, [pc, #92]	@ (8002e88 <HAL_ADC_ConfigChannel+0x864>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d101      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x810>
 8002e30:	4a16      	ldr	r2, [pc, #88]	@ (8002e8c <HAL_ADC_ConfigChannel+0x868>)
 8002e32:	e000      	b.n	8002e36 <HAL_ADC_ConfigChannel+0x812>
 8002e34:	4a10      	ldr	r2, [pc, #64]	@ (8002e78 <HAL_ADC_ConfigChannel+0x854>)
 8002e36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e3a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4610      	mov	r0, r2
 8002e42:	f7fe fdb0 	bl	80019a6 <LL_ADC_SetCommonPathInternalCh>
 8002e46:	e00c      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e4c:	f043 0220 	orr.w	r2, r3, #32
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002e5a:	e002      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e5c:	bf00      	nop
 8002e5e:	e000      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e60:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e6a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	37d8      	adds	r7, #216	@ 0xd8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	50000700 	.word	0x50000700
 8002e7c:	c3210000 	.word	0xc3210000
 8002e80:	90c00010 	.word	0x90c00010
 8002e84:	50000600 	.word	0x50000600
 8002e88:	50000100 	.word	0x50000100
 8002e8c:	50000300 	.word	0x50000300
 8002e90:	20000000 	.word	0x20000000
 8002e94:	053e2d63 	.word	0x053e2d63
 8002e98:	c7520000 	.word	0xc7520000
 8002e9c:	50000500 	.word	0x50000500
 8002ea0:	cb840000 	.word	0xcb840000

08002ea4 <LL_ADC_IsEnabled>:
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <LL_ADC_IsEnabled+0x18>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <LL_ADC_IsEnabled+0x1a>
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <LL_ADC_REG_IsConversionOngoing>:
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d101      	bne.n	8002ee2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002f54:	b590      	push	{r4, r7, lr}
 8002f56:	b0a1      	sub	sp, #132	@ 0x84
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e0e7      	b.n	8003142 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002f7e:	2300      	movs	r3, #0
 8002f80:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f8a:	d102      	bne.n	8002f92 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f8c:	4b6f      	ldr	r3, [pc, #444]	@ (800314c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	e009      	b.n	8002fa6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a6e      	ldr	r2, [pc, #440]	@ (8003150 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d102      	bne.n	8002fa2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002f9c:	4b6d      	ldr	r3, [pc, #436]	@ (8003154 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	e001      	b.n	8002fa6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10b      	bne.n	8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb0:	f043 0220 	orr.w	r2, r3, #32
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0be      	b.n	8003142 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff ff7f 	bl	8002eca <LL_ADC_REG_IsConversionOngoing>
 8002fcc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff ff79 	bl	8002eca <LL_ADC_REG_IsConversionOngoing>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f040 80a0 	bne.w	8003120 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002fe0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f040 809c 	bne.w	8003120 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ff0:	d004      	beq.n	8002ffc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a55      	ldr	r2, [pc, #340]	@ (800314c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d101      	bne.n	8003000 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002ffc:	4b56      	ldr	r3, [pc, #344]	@ (8003158 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002ffe:	e000      	b.n	8003002 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003000:	4b56      	ldr	r3, [pc, #344]	@ (800315c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003002:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d04b      	beq.n	80030a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800300c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	6859      	ldr	r1, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800301e:	035b      	lsls	r3, r3, #13
 8003020:	430b      	orrs	r3, r1
 8003022:	431a      	orrs	r2, r3
 8003024:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003026:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003030:	d004      	beq.n	800303c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a45      	ldr	r2, [pc, #276]	@ (800314c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d10f      	bne.n	800305c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800303c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003040:	f7ff ff30 	bl	8002ea4 <LL_ADC_IsEnabled>
 8003044:	4604      	mov	r4, r0
 8003046:	4841      	ldr	r0, [pc, #260]	@ (800314c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003048:	f7ff ff2c 	bl	8002ea4 <LL_ADC_IsEnabled>
 800304c:	4603      	mov	r3, r0
 800304e:	4323      	orrs	r3, r4
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf0c      	ite	eq
 8003054:	2301      	moveq	r3, #1
 8003056:	2300      	movne	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	e012      	b.n	8003082 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800305c:	483c      	ldr	r0, [pc, #240]	@ (8003150 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800305e:	f7ff ff21 	bl	8002ea4 <LL_ADC_IsEnabled>
 8003062:	4604      	mov	r4, r0
 8003064:	483b      	ldr	r0, [pc, #236]	@ (8003154 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003066:	f7ff ff1d 	bl	8002ea4 <LL_ADC_IsEnabled>
 800306a:	4603      	mov	r3, r0
 800306c:	431c      	orrs	r4, r3
 800306e:	483c      	ldr	r0, [pc, #240]	@ (8003160 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003070:	f7ff ff18 	bl	8002ea4 <LL_ADC_IsEnabled>
 8003074:	4603      	mov	r3, r0
 8003076:	4323      	orrs	r3, r4
 8003078:	2b00      	cmp	r3, #0
 800307a:	bf0c      	ite	eq
 800307c:	2301      	moveq	r3, #1
 800307e:	2300      	movne	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d056      	beq.n	8003134 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003086:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800308e:	f023 030f 	bic.w	r3, r3, #15
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	6811      	ldr	r1, [r2, #0]
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	6892      	ldr	r2, [r2, #8]
 800309a:	430a      	orrs	r2, r1
 800309c:	431a      	orrs	r2, r3
 800309e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030a0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030a2:	e047      	b.n	8003134 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80030a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030ae:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030b8:	d004      	beq.n	80030c4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a23      	ldr	r2, [pc, #140]	@ (800314c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d10f      	bne.n	80030e4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80030c4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80030c8:	f7ff feec 	bl	8002ea4 <LL_ADC_IsEnabled>
 80030cc:	4604      	mov	r4, r0
 80030ce:	481f      	ldr	r0, [pc, #124]	@ (800314c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80030d0:	f7ff fee8 	bl	8002ea4 <LL_ADC_IsEnabled>
 80030d4:	4603      	mov	r3, r0
 80030d6:	4323      	orrs	r3, r4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	bf0c      	ite	eq
 80030dc:	2301      	moveq	r3, #1
 80030de:	2300      	movne	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	e012      	b.n	800310a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80030e4:	481a      	ldr	r0, [pc, #104]	@ (8003150 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80030e6:	f7ff fedd 	bl	8002ea4 <LL_ADC_IsEnabled>
 80030ea:	4604      	mov	r4, r0
 80030ec:	4819      	ldr	r0, [pc, #100]	@ (8003154 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80030ee:	f7ff fed9 	bl	8002ea4 <LL_ADC_IsEnabled>
 80030f2:	4603      	mov	r3, r0
 80030f4:	431c      	orrs	r4, r3
 80030f6:	481a      	ldr	r0, [pc, #104]	@ (8003160 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80030f8:	f7ff fed4 	bl	8002ea4 <LL_ADC_IsEnabled>
 80030fc:	4603      	mov	r3, r0
 80030fe:	4323      	orrs	r3, r4
 8003100:	2b00      	cmp	r3, #0
 8003102:	bf0c      	ite	eq
 8003104:	2301      	moveq	r3, #1
 8003106:	2300      	movne	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d012      	beq.n	8003134 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800310e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003116:	f023 030f 	bic.w	r3, r3, #15
 800311a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800311c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800311e:	e009      	b.n	8003134 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003124:	f043 0220 	orr.w	r2, r3, #32
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003132:	e000      	b.n	8003136 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003134:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800313e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003142:	4618      	mov	r0, r3
 8003144:	3784      	adds	r7, #132	@ 0x84
 8003146:	46bd      	mov	sp, r7
 8003148:	bd90      	pop	{r4, r7, pc}
 800314a:	bf00      	nop
 800314c:	50000100 	.word	0x50000100
 8003150:	50000400 	.word	0x50000400
 8003154:	50000500 	.word	0x50000500
 8003158:	50000300 	.word	0x50000300
 800315c:	50000700 	.word	0x50000700
 8003160:	50000600 	.word	0x50000600

08003164 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800316c:	4b05      	ldr	r3, [pc, #20]	@ (8003184 <LL_EXTI_EnableIT_0_31+0x20>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4904      	ldr	r1, [pc, #16]	@ (8003184 <LL_EXTI_EnableIT_0_31+0x20>)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4313      	orrs	r3, r2
 8003176:	600b      	str	r3, [r1, #0]
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	40010400 	.word	0x40010400

08003188 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003190:	4b05      	ldr	r3, [pc, #20]	@ (80031a8 <LL_EXTI_EnableIT_32_63+0x20>)
 8003192:	6a1a      	ldr	r2, [r3, #32]
 8003194:	4904      	ldr	r1, [pc, #16]	@ (80031a8 <LL_EXTI_EnableIT_32_63+0x20>)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4313      	orrs	r3, r2
 800319a:	620b      	str	r3, [r1, #32]
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	40010400 	.word	0x40010400

080031ac <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80031b4:	4b06      	ldr	r3, [pc, #24]	@ (80031d0 <LL_EXTI_DisableIT_0_31+0x24>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	43db      	mvns	r3, r3
 80031bc:	4904      	ldr	r1, [pc, #16]	@ (80031d0 <LL_EXTI_DisableIT_0_31+0x24>)
 80031be:	4013      	ands	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40010400 	.word	0x40010400

080031d4 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80031dc:	4b06      	ldr	r3, [pc, #24]	@ (80031f8 <LL_EXTI_DisableIT_32_63+0x24>)
 80031de:	6a1a      	ldr	r2, [r3, #32]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	43db      	mvns	r3, r3
 80031e4:	4904      	ldr	r1, [pc, #16]	@ (80031f8 <LL_EXTI_DisableIT_32_63+0x24>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	620b      	str	r3, [r1, #32]
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40010400 	.word	0x40010400

080031fc <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003204:	4b05      	ldr	r3, [pc, #20]	@ (800321c <LL_EXTI_EnableEvent_0_31+0x20>)
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	4904      	ldr	r1, [pc, #16]	@ (800321c <LL_EXTI_EnableEvent_0_31+0x20>)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4313      	orrs	r3, r2
 800320e:	604b      	str	r3, [r1, #4]

}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	40010400 	.word	0x40010400

08003220 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8003228:	4b05      	ldr	r3, [pc, #20]	@ (8003240 <LL_EXTI_EnableEvent_32_63+0x20>)
 800322a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800322c:	4904      	ldr	r1, [pc, #16]	@ (8003240 <LL_EXTI_EnableEvent_32_63+0x20>)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4313      	orrs	r3, r2
 8003232:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	40010400 	.word	0x40010400

08003244 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800324c:	4b06      	ldr	r3, [pc, #24]	@ (8003268 <LL_EXTI_DisableEvent_0_31+0x24>)
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	43db      	mvns	r3, r3
 8003254:	4904      	ldr	r1, [pc, #16]	@ (8003268 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003256:	4013      	ands	r3, r2
 8003258:	604b      	str	r3, [r1, #4]
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40010400 	.word	0x40010400

0800326c <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8003274:	4b06      	ldr	r3, [pc, #24]	@ (8003290 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003276:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	43db      	mvns	r3, r3
 800327c:	4904      	ldr	r1, [pc, #16]	@ (8003290 <LL_EXTI_DisableEvent_32_63+0x24>)
 800327e:	4013      	ands	r3, r2
 8003280:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40010400 	.word	0x40010400

08003294 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800329c:	4b05      	ldr	r3, [pc, #20]	@ (80032b4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	4904      	ldr	r1, [pc, #16]	@ (80032b4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	608b      	str	r3, [r1, #8]

}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	40010400 	.word	0x40010400

080032b8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80032c0:	4b05      	ldr	r3, [pc, #20]	@ (80032d8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80032c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032c4:	4904      	ldr	r1, [pc, #16]	@ (80032d8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	40010400 	.word	0x40010400

080032dc <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80032e4:	4b06      	ldr	r3, [pc, #24]	@ (8003300 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	43db      	mvns	r3, r3
 80032ec:	4904      	ldr	r1, [pc, #16]	@ (8003300 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80032ee:	4013      	ands	r3, r2
 80032f0:	608b      	str	r3, [r1, #8]

}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40010400 	.word	0x40010400

08003304 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800330c:	4b06      	ldr	r3, [pc, #24]	@ (8003328 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800330e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	43db      	mvns	r3, r3
 8003314:	4904      	ldr	r1, [pc, #16]	@ (8003328 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003316:	4013      	ands	r3, r2
 8003318:	628b      	str	r3, [r1, #40]	@ 0x28
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40010400 	.word	0x40010400

0800332c <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003334:	4b05      	ldr	r3, [pc, #20]	@ (800334c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	4904      	ldr	r1, [pc, #16]	@ (800334c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4313      	orrs	r3, r2
 800333e:	60cb      	str	r3, [r1, #12]
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	40010400 	.word	0x40010400

08003350 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003358:	4b05      	ldr	r3, [pc, #20]	@ (8003370 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800335a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800335c:	4904      	ldr	r1, [pc, #16]	@ (8003370 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4313      	orrs	r3, r2
 8003362:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	40010400 	.word	0x40010400

08003374 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800337c:	4b06      	ldr	r3, [pc, #24]	@ (8003398 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	43db      	mvns	r3, r3
 8003384:	4904      	ldr	r1, [pc, #16]	@ (8003398 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003386:	4013      	ands	r3, r2
 8003388:	60cb      	str	r3, [r1, #12]
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40010400 	.word	0x40010400

0800339c <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80033a4:	4b06      	ldr	r3, [pc, #24]	@ (80033c0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80033a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	43db      	mvns	r3, r3
 80033ac:	4904      	ldr	r1, [pc, #16]	@ (80033c0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40010400 	.word	0x40010400

080033c4 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80033cc:	4a04      	ldr	r2, [pc, #16]	@ (80033e0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6153      	str	r3, [r2, #20]
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40010400 	.word	0x40010400

080033e4 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80033ec:	4a04      	ldr	r2, [pc, #16]	@ (8003400 <LL_EXTI_ClearFlag_32_63+0x1c>)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40010400 	.word	0x40010400

08003404 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d102      	bne.n	8003420 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	77fb      	strb	r3, [r7, #31]
 800341e:	e181      	b.n	8003724 <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800342a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800342e:	d102      	bne.n	8003436 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	77fb      	strb	r3, [r7, #31]
 8003434:	e176      	b.n	8003724 <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	7f5b      	ldrb	r3, [r3, #29]
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d108      	bne.n	8003452 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7fd ff07 	bl	8001260 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800345c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	4b90      	ldr	r3, [pc, #576]	@ (80036c4 <HAL_COMP_Init+0x2c0>)
 8003484:	4013      	ands	r3, r2
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6812      	ldr	r2, [r2, #0]
 800348a:	6979      	ldr	r1, [r7, #20]
 800348c:	430b      	orrs	r3, r1
 800348e:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d016      	beq.n	80034cc <HAL_COMP_Init+0xc8>
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d113      	bne.n	80034cc <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034a4:	4b88      	ldr	r3, [pc, #544]	@ (80036c8 <HAL_COMP_Init+0x2c4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	099b      	lsrs	r3, r3, #6
 80034aa:	4a88      	ldr	r2, [pc, #544]	@ (80036cc <HAL_COMP_Init+0x2c8>)
 80034ac:	fba2 2303 	umull	r2, r3, r2, r3
 80034b0:	099b      	lsrs	r3, r3, #6
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80034be:	e002      	b.n	80034c6 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1f9      	bne.n	80034c0 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a7f      	ldr	r2, [pc, #508]	@ (80036d0 <HAL_COMP_Init+0x2cc>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d028      	beq.n	8003528 <HAL_COMP_Init+0x124>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a7e      	ldr	r2, [pc, #504]	@ (80036d4 <HAL_COMP_Init+0x2d0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d020      	beq.n	8003522 <HAL_COMP_Init+0x11e>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a7c      	ldr	r2, [pc, #496]	@ (80036d8 <HAL_COMP_Init+0x2d4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d018      	beq.n	800351c <HAL_COMP_Init+0x118>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a7b      	ldr	r2, [pc, #492]	@ (80036dc <HAL_COMP_Init+0x2d8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d010      	beq.n	8003516 <HAL_COMP_Init+0x112>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a79      	ldr	r2, [pc, #484]	@ (80036e0 <HAL_COMP_Init+0x2dc>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d008      	beq.n	8003510 <HAL_COMP_Init+0x10c>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a78      	ldr	r2, [pc, #480]	@ (80036e4 <HAL_COMP_Init+0x2e0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d101      	bne.n	800350c <HAL_COMP_Init+0x108>
 8003508:	2301      	movs	r3, #1
 800350a:	e00f      	b.n	800352c <HAL_COMP_Init+0x128>
 800350c:	2302      	movs	r3, #2
 800350e:	e00d      	b.n	800352c <HAL_COMP_Init+0x128>
 8003510:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003514:	e00a      	b.n	800352c <HAL_COMP_Init+0x128>
 8003516:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800351a:	e007      	b.n	800352c <HAL_COMP_Init+0x128>
 800351c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003520:	e004      	b.n	800352c <HAL_COMP_Init+0x128>
 8003522:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003526:	e001      	b.n	800352c <HAL_COMP_Init+0x128>
 8003528:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800352c:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 80b6 	beq.w	80036a8 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2b00      	cmp	r3, #0
 8003546:	d011      	beq.n	800356c <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a65      	ldr	r2, [pc, #404]	@ (80036e4 <HAL_COMP_Init+0x2e0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d004      	beq.n	800355c <HAL_COMP_Init+0x158>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a64      	ldr	r2, [pc, #400]	@ (80036e8 <HAL_COMP_Init+0x2e4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d103      	bne.n	8003564 <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800355c:	6938      	ldr	r0, [r7, #16]
 800355e:	f7ff feab 	bl	80032b8 <LL_EXTI_EnableRisingTrig_32_63>
 8003562:	e014      	b.n	800358e <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003564:	6938      	ldr	r0, [r7, #16]
 8003566:	f7ff fe95 	bl	8003294 <LL_EXTI_EnableRisingTrig_0_31>
 800356a:	e010      	b.n	800358e <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a5c      	ldr	r2, [pc, #368]	@ (80036e4 <HAL_COMP_Init+0x2e0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d004      	beq.n	8003580 <HAL_COMP_Init+0x17c>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a5b      	ldr	r2, [pc, #364]	@ (80036e8 <HAL_COMP_Init+0x2e4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d103      	bne.n	8003588 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8003580:	6938      	ldr	r0, [r7, #16]
 8003582:	f7ff febf 	bl	8003304 <LL_EXTI_DisableRisingTrig_32_63>
 8003586:	e002      	b.n	800358e <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003588:	6938      	ldr	r0, [r7, #16]
 800358a:	f7ff fea7 	bl	80032dc <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	f003 0320 	and.w	r3, r3, #32
 8003596:	2b00      	cmp	r3, #0
 8003598:	d011      	beq.n	80035be <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a51      	ldr	r2, [pc, #324]	@ (80036e4 <HAL_COMP_Init+0x2e0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d004      	beq.n	80035ae <HAL_COMP_Init+0x1aa>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a4f      	ldr	r2, [pc, #316]	@ (80036e8 <HAL_COMP_Init+0x2e4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d103      	bne.n	80035b6 <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80035ae:	6938      	ldr	r0, [r7, #16]
 80035b0:	f7ff fece 	bl	8003350 <LL_EXTI_EnableFallingTrig_32_63>
 80035b4:	e014      	b.n	80035e0 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80035b6:	6938      	ldr	r0, [r7, #16]
 80035b8:	f7ff feb8 	bl	800332c <LL_EXTI_EnableFallingTrig_0_31>
 80035bc:	e010      	b.n	80035e0 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a48      	ldr	r2, [pc, #288]	@ (80036e4 <HAL_COMP_Init+0x2e0>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d004      	beq.n	80035d2 <HAL_COMP_Init+0x1ce>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a46      	ldr	r2, [pc, #280]	@ (80036e8 <HAL_COMP_Init+0x2e4>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d103      	bne.n	80035da <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80035d2:	6938      	ldr	r0, [r7, #16]
 80035d4:	f7ff fee2 	bl	800339c <LL_EXTI_DisableFallingTrig_32_63>
 80035d8:	e002      	b.n	80035e0 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80035da:	6938      	ldr	r0, [r7, #16]
 80035dc:	f7ff feca 	bl	8003374 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a3f      	ldr	r2, [pc, #252]	@ (80036e4 <HAL_COMP_Init+0x2e0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d004      	beq.n	80035f4 <HAL_COMP_Init+0x1f0>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a3e      	ldr	r2, [pc, #248]	@ (80036e8 <HAL_COMP_Init+0x2e4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d103      	bne.n	80035fc <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80035f4:	6938      	ldr	r0, [r7, #16]
 80035f6:	f7ff fef5 	bl	80033e4 <LL_EXTI_ClearFlag_32_63>
 80035fa:	e002      	b.n	8003602 <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80035fc:	6938      	ldr	r0, [r7, #16]
 80035fe:	f7ff fee1 	bl	80033c4 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d011      	beq.n	8003632 <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a34      	ldr	r2, [pc, #208]	@ (80036e4 <HAL_COMP_Init+0x2e0>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d004      	beq.n	8003622 <HAL_COMP_Init+0x21e>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a32      	ldr	r2, [pc, #200]	@ (80036e8 <HAL_COMP_Init+0x2e4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d103      	bne.n	800362a <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8003622:	6938      	ldr	r0, [r7, #16]
 8003624:	f7ff fdfc 	bl	8003220 <LL_EXTI_EnableEvent_32_63>
 8003628:	e014      	b.n	8003654 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800362a:	6938      	ldr	r0, [r7, #16]
 800362c:	f7ff fde6 	bl	80031fc <LL_EXTI_EnableEvent_0_31>
 8003630:	e010      	b.n	8003654 <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a2b      	ldr	r2, [pc, #172]	@ (80036e4 <HAL_COMP_Init+0x2e0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d004      	beq.n	8003646 <HAL_COMP_Init+0x242>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a29      	ldr	r2, [pc, #164]	@ (80036e8 <HAL_COMP_Init+0x2e4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d103      	bne.n	800364e <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8003646:	6938      	ldr	r0, [r7, #16]
 8003648:	f7ff fe10 	bl	800326c <LL_EXTI_DisableEvent_32_63>
 800364c:	e002      	b.n	8003654 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 800364e:	6938      	ldr	r0, [r7, #16]
 8003650:	f7ff fdf8 	bl	8003244 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d011      	beq.n	8003684 <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a1f      	ldr	r2, [pc, #124]	@ (80036e4 <HAL_COMP_Init+0x2e0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d004      	beq.n	8003674 <HAL_COMP_Init+0x270>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a1e      	ldr	r2, [pc, #120]	@ (80036e8 <HAL_COMP_Init+0x2e4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d103      	bne.n	800367c <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8003674:	6938      	ldr	r0, [r7, #16]
 8003676:	f7ff fd87 	bl	8003188 <LL_EXTI_EnableIT_32_63>
 800367a:	e04b      	b.n	8003714 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800367c:	6938      	ldr	r0, [r7, #16]
 800367e:	f7ff fd71 	bl	8003164 <LL_EXTI_EnableIT_0_31>
 8003682:	e047      	b.n	8003714 <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a16      	ldr	r2, [pc, #88]	@ (80036e4 <HAL_COMP_Init+0x2e0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d004      	beq.n	8003698 <HAL_COMP_Init+0x294>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a15      	ldr	r2, [pc, #84]	@ (80036e8 <HAL_COMP_Init+0x2e4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d103      	bne.n	80036a0 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8003698:	6938      	ldr	r0, [r7, #16]
 800369a:	f7ff fd9b 	bl	80031d4 <LL_EXTI_DisableIT_32_63>
 800369e:	e039      	b.n	8003714 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 80036a0:	6938      	ldr	r0, [r7, #16]
 80036a2:	f7ff fd83 	bl	80031ac <LL_EXTI_DisableIT_0_31>
 80036a6:	e035      	b.n	8003714 <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a0d      	ldr	r2, [pc, #52]	@ (80036e4 <HAL_COMP_Init+0x2e0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d004      	beq.n	80036bc <HAL_COMP_Init+0x2b8>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a0c      	ldr	r2, [pc, #48]	@ (80036e8 <HAL_COMP_Init+0x2e4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d117      	bne.n	80036ec <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 80036bc:	6938      	ldr	r0, [r7, #16]
 80036be:	f7ff fdd5 	bl	800326c <LL_EXTI_DisableEvent_32_63>
 80036c2:	e016      	b.n	80036f2 <HAL_COMP_Init+0x2ee>
 80036c4:	ff007e0f 	.word	0xff007e0f
 80036c8:	20000000 	.word	0x20000000
 80036cc:	053e2d63 	.word	0x053e2d63
 80036d0:	40010200 	.word	0x40010200
 80036d4:	40010204 	.word	0x40010204
 80036d8:	40010208 	.word	0x40010208
 80036dc:	4001020c 	.word	0x4001020c
 80036e0:	40010210 	.word	0x40010210
 80036e4:	40010214 	.word	0x40010214
 80036e8:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80036ec:	6938      	ldr	r0, [r7, #16]
 80036ee:	f7ff fda9 	bl	8003244 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a0e      	ldr	r2, [pc, #56]	@ (8003730 <HAL_COMP_Init+0x32c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d004      	beq.n	8003706 <HAL_COMP_Init+0x302>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a0c      	ldr	r2, [pc, #48]	@ (8003734 <HAL_COMP_Init+0x330>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d103      	bne.n	800370e <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8003706:	6938      	ldr	r0, [r7, #16]
 8003708:	f7ff fd64 	bl	80031d4 <LL_EXTI_DisableIT_32_63>
 800370c:	e002      	b.n	8003714 <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800370e:	6938      	ldr	r0, [r7, #16]
 8003710:	f7ff fd4c 	bl	80031ac <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	7f5b      	ldrb	r3, [r3, #29]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d102      	bne.n	8003724 <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8003724:	7ffb      	ldrb	r3, [r7, #31]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3720      	adds	r7, #32
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40010214 	.word	0x40010214
 8003734:	40010218 	.word	0x40010218

08003738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003748:	4b0c      	ldr	r3, [pc, #48]	@ (800377c <__NVIC_SetPriorityGrouping+0x44>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003754:	4013      	ands	r3, r2
 8003756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003760:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003764:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800376a:	4a04      	ldr	r2, [pc, #16]	@ (800377c <__NVIC_SetPriorityGrouping+0x44>)
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	60d3      	str	r3, [r2, #12]
}
 8003770:	bf00      	nop
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003784:	4b04      	ldr	r3, [pc, #16]	@ (8003798 <__NVIC_GetPriorityGrouping+0x18>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	0a1b      	lsrs	r3, r3, #8
 800378a:	f003 0307 	and.w	r3, r3, #7
}
 800378e:	4618      	mov	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	e000ed00 	.word	0xe000ed00

0800379c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	4603      	mov	r3, r0
 80037a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	db0b      	blt.n	80037c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	f003 021f 	and.w	r2, r3, #31
 80037b4:	4907      	ldr	r1, [pc, #28]	@ (80037d4 <__NVIC_EnableIRQ+0x38>)
 80037b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ba:	095b      	lsrs	r3, r3, #5
 80037bc:	2001      	movs	r0, #1
 80037be:	fa00 f202 	lsl.w	r2, r0, r2
 80037c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	e000e100 	.word	0xe000e100

080037d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	6039      	str	r1, [r7, #0]
 80037e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	db0a      	blt.n	8003802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	490c      	ldr	r1, [pc, #48]	@ (8003824 <__NVIC_SetPriority+0x4c>)
 80037f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f6:	0112      	lsls	r2, r2, #4
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	440b      	add	r3, r1
 80037fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003800:	e00a      	b.n	8003818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	b2da      	uxtb	r2, r3
 8003806:	4908      	ldr	r1, [pc, #32]	@ (8003828 <__NVIC_SetPriority+0x50>)
 8003808:	79fb      	ldrb	r3, [r7, #7]
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	3b04      	subs	r3, #4
 8003810:	0112      	lsls	r2, r2, #4
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	440b      	add	r3, r1
 8003816:	761a      	strb	r2, [r3, #24]
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	e000e100 	.word	0xe000e100
 8003828:	e000ed00 	.word	0xe000ed00

0800382c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800382c:	b480      	push	{r7}
 800382e:	b089      	sub	sp, #36	@ 0x24
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f1c3 0307 	rsb	r3, r3, #7
 8003846:	2b04      	cmp	r3, #4
 8003848:	bf28      	it	cs
 800384a:	2304      	movcs	r3, #4
 800384c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	3304      	adds	r3, #4
 8003852:	2b06      	cmp	r3, #6
 8003854:	d902      	bls.n	800385c <NVIC_EncodePriority+0x30>
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	3b03      	subs	r3, #3
 800385a:	e000      	b.n	800385e <NVIC_EncodePriority+0x32>
 800385c:	2300      	movs	r3, #0
 800385e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003860:	f04f 32ff 	mov.w	r2, #4294967295
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	43da      	mvns	r2, r3
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	401a      	ands	r2, r3
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003874:	f04f 31ff 	mov.w	r1, #4294967295
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	fa01 f303 	lsl.w	r3, r1, r3
 800387e:	43d9      	mvns	r1, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003884:	4313      	orrs	r3, r2
         );
}
 8003886:	4618      	mov	r0, r3
 8003888:	3724      	adds	r7, #36	@ 0x24
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
	...

08003894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3b01      	subs	r3, #1
 80038a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038a4:	d301      	bcc.n	80038aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038a6:	2301      	movs	r3, #1
 80038a8:	e00f      	b.n	80038ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038aa:	4a0a      	ldr	r2, [pc, #40]	@ (80038d4 <SysTick_Config+0x40>)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038b2:	210f      	movs	r1, #15
 80038b4:	f04f 30ff 	mov.w	r0, #4294967295
 80038b8:	f7ff ff8e 	bl	80037d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038bc:	4b05      	ldr	r3, [pc, #20]	@ (80038d4 <SysTick_Config+0x40>)
 80038be:	2200      	movs	r2, #0
 80038c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038c2:	4b04      	ldr	r3, [pc, #16]	@ (80038d4 <SysTick_Config+0x40>)
 80038c4:	2207      	movs	r2, #7
 80038c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	e000e010 	.word	0xe000e010

080038d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff ff29 	bl	8003738 <__NVIC_SetPriorityGrouping>
}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b086      	sub	sp, #24
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	4603      	mov	r3, r0
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	607a      	str	r2, [r7, #4]
 80038fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038fc:	f7ff ff40 	bl	8003780 <__NVIC_GetPriorityGrouping>
 8003900:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	68b9      	ldr	r1, [r7, #8]
 8003906:	6978      	ldr	r0, [r7, #20]
 8003908:	f7ff ff90 	bl	800382c <NVIC_EncodePriority>
 800390c:	4602      	mov	r2, r0
 800390e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003912:	4611      	mov	r1, r2
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff ff5f 	bl	80037d8 <__NVIC_SetPriority>
}
 800391a:	bf00      	nop
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
 8003928:	4603      	mov	r3, r0
 800392a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800392c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff ff33 	bl	800379c <__NVIC_EnableIRQ>
}
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff ffa4 	bl	8003894 <SysTick_Config>
 800394c:	4603      	mov	r3, r0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b082      	sub	sp, #8
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e014      	b.n	8003992 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	791b      	ldrb	r3, [r3, #4]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d105      	bne.n	800397e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7fd fd07 	bl	800138c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2202      	movs	r2, #2
 8003982:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08a      	sub	sp, #40	@ 0x28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <HAL_DAC_ConfigChannel+0x1c>
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e19e      	b.n	8003cfa <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	795b      	ldrb	r3, [r3, #5]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_DAC_ConfigChannel+0x2c>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e198      	b.n	8003cfa <HAL_DAC_ConfigChannel+0x35e>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2201      	movs	r2, #1
 80039cc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2202      	movs	r2, #2
 80039d2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d17a      	bne.n	8003ad2 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80039dc:	f7fd ffc4 	bl	8001968 <HAL_GetTick>
 80039e0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d13d      	bne.n	8003a64 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80039e8:	e018      	b.n	8003a1c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80039ea:	f7fd ffbd 	bl	8001968 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d911      	bls.n	8003a1c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f043 0208 	orr.w	r2, r3, #8
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2203      	movs	r2, #3
 8003a16:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e16e      	b.n	8003cfa <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1df      	bne.n	80039ea <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a32:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a34:	e020      	b.n	8003a78 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003a36:	f7fd ff97 	bl	8001968 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d90f      	bls.n	8003a64 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	da0a      	bge.n	8003a64 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	f043 0208 	orr.w	r2, r3, #8
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e14a      	b.n	8003cfa <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	dbe3      	blt.n	8003a36 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a76:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f003 0310 	and.w	r3, r3, #16
 8003a84:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003a88:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	ea02 0103 	and.w	r1, r2, r3
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f003 0310 	and.w	r3, r3, #16
 8003a9c:	409a      	lsls	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f003 0310 	and.w	r3, r3, #16
 8003ab2:	21ff      	movs	r1, #255	@ 0xff
 8003ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	ea02 0103 	and.w	r1, r2, r3
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d11d      	bne.n	8003b16 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f003 0310 	and.w	r3, r3, #16
 8003ae8:	221f      	movs	r2, #31
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	43db      	mvns	r3, r3
 8003af0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003af2:	4013      	ands	r3, r2
 8003af4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f003 0310 	and.w	r3, r3, #16
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b14:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f003 0310 	and.w	r3, r3, #16
 8003b24:	2207      	movs	r2, #7
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b2e:	4013      	ands	r3, r2
 8003b30:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d102      	bne.n	8003b40 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	623b      	str	r3, [r7, #32]
 8003b3e:	e00f      	b.n	8003b60 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d102      	bne.n	8003b4e <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	623b      	str	r3, [r7, #32]
 8003b4c:	e008      	b.n	8003b60 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d102      	bne.n	8003b5c <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003b56:	2301      	movs	r3, #1
 8003b58:	623b      	str	r3, [r7, #32]
 8003b5a:	e001      	b.n	8003b60 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	6a3a      	ldr	r2, [r7, #32]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f003 0310 	and.w	r3, r3, #16
 8003b76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b82:	4013      	ands	r3, r2
 8003b84:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	791b      	ldrb	r3, [r3, #4]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d102      	bne.n	8003b94 <HAL_DAC_ConfigChannel+0x1f8>
 8003b8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b92:	e000      	b.n	8003b96 <HAL_DAC_ConfigChannel+0x1fa>
 8003b94:	2300      	movs	r3, #0
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	43db      	mvns	r3, r3
 8003bac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bae:	4013      	ands	r3, r2
 8003bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	795b      	ldrb	r3, [r3, #5]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d102      	bne.n	8003bc0 <HAL_DAC_ConfigChannel+0x224>
 8003bba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003bbe:	e000      	b.n	8003bc2 <HAL_DAC_ConfigChannel+0x226>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bca:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003bce:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d114      	bne.n	8003c02 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003bd8:	f003 fe5e 	bl	8007898 <HAL_RCC_GetHCLKFreq>
 8003bdc:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	4a48      	ldr	r2, [pc, #288]	@ (8003d04 <HAL_DAC_ConfigChannel+0x368>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d904      	bls.n	8003bf0 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bee:	e00f      	b.n	8003c10 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4a45      	ldr	r2, [pc, #276]	@ (8003d08 <HAL_DAC_ConfigChannel+0x36c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d90a      	bls.n	8003c0e <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c00:	e006      	b.n	8003c10 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c0c:	e000      	b.n	8003c10 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003c0e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f003 0310 	and.w	r3, r3, #16
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6819      	ldr	r1, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43da      	mvns	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	400a      	ands	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f003 0310 	and.w	r3, r3, #16
 8003c56:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c62:	4013      	ands	r3, r2
 8003c64:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f003 0310 	and.w	r3, r3, #16
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c84:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6819      	ldr	r1, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f003 0310 	and.w	r3, r3, #16
 8003c92:	22c0      	movs	r2, #192	@ 0xc0
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	43da      	mvns	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	400a      	ands	r2, r1
 8003ca0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	089b      	lsrs	r3, r3, #2
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	089b      	lsrs	r3, r3, #2
 8003cb4:	021b      	lsls	r3, r3, #8
 8003cb6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8003cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	ea02 0103 	and.w	r1, r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003cf8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3728      	adds	r7, #40	@ 0x28
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	09896800 	.word	0x09896800
 8003d08:	04c4b400 	.word	0x04c4b400

08003d0c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d005      	beq.n	8003d30 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2204      	movs	r2, #4
 8003d28:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	73fb      	strb	r3, [r7, #15]
 8003d2e:	e037      	b.n	8003da0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 020e 	bic.w	r2, r2, #14
 8003d3e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d4e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0201 	bic.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d64:	f003 021f 	and.w	r2, r3, #31
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d72:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d7c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00c      	beq.n	8003da0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d94:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d9e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d00d      	beq.n	8003df2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2204      	movs	r2, #4
 8003dda:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	73fb      	strb	r3, [r7, #15]
 8003df0:	e047      	b.n	8003e82 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 020e 	bic.w	r2, r2, #14
 8003e00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0201 	bic.w	r2, r2, #1
 8003e10:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e26:	f003 021f 	and.w	r2, r3, #31
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2e:	2101      	movs	r1, #1
 8003e30:	fa01 f202 	lsl.w	r2, r1, r2
 8003e34:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e3e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00c      	beq.n	8003e62 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e56:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e60:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	4798      	blx	r3
    }
  }
  return status;
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e9a:	e15a      	b.n	8004152 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 814c 	beq.w	800414c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 0303 	and.w	r3, r3, #3
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d005      	beq.n	8003ecc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d130      	bne.n	8003f2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	2203      	movs	r2, #3
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	43db      	mvns	r3, r3
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f02:	2201      	movs	r2, #1
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	091b      	lsrs	r3, r3, #4
 8003f18:	f003 0201 	and.w	r2, r3, #1
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	2b03      	cmp	r3, #3
 8003f38:	d017      	beq.n	8003f6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	2203      	movs	r2, #3
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d123      	bne.n	8003fbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	08da      	lsrs	r2, r3, #3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3208      	adds	r2, #8
 8003f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	220f      	movs	r2, #15
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	43db      	mvns	r3, r3
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	4013      	ands	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	08da      	lsrs	r2, r3, #3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3208      	adds	r2, #8
 8003fb8:	6939      	ldr	r1, [r7, #16]
 8003fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	2203      	movs	r2, #3
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f003 0203 	and.w	r2, r3, #3
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 80a6 	beq.w	800414c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004000:	4b5b      	ldr	r3, [pc, #364]	@ (8004170 <HAL_GPIO_Init+0x2e4>)
 8004002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004004:	4a5a      	ldr	r2, [pc, #360]	@ (8004170 <HAL_GPIO_Init+0x2e4>)
 8004006:	f043 0301 	orr.w	r3, r3, #1
 800400a:	6613      	str	r3, [r2, #96]	@ 0x60
 800400c:	4b58      	ldr	r3, [pc, #352]	@ (8004170 <HAL_GPIO_Init+0x2e4>)
 800400e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	60bb      	str	r3, [r7, #8]
 8004016:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004018:	4a56      	ldr	r2, [pc, #344]	@ (8004174 <HAL_GPIO_Init+0x2e8>)
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	089b      	lsrs	r3, r3, #2
 800401e:	3302      	adds	r3, #2
 8004020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004024:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f003 0303 	and.w	r3, r3, #3
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	220f      	movs	r2, #15
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	43db      	mvns	r3, r3
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	4013      	ands	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004042:	d01f      	beq.n	8004084 <HAL_GPIO_Init+0x1f8>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a4c      	ldr	r2, [pc, #304]	@ (8004178 <HAL_GPIO_Init+0x2ec>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d019      	beq.n	8004080 <HAL_GPIO_Init+0x1f4>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a4b      	ldr	r2, [pc, #300]	@ (800417c <HAL_GPIO_Init+0x2f0>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d013      	beq.n	800407c <HAL_GPIO_Init+0x1f0>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a4a      	ldr	r2, [pc, #296]	@ (8004180 <HAL_GPIO_Init+0x2f4>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d00d      	beq.n	8004078 <HAL_GPIO_Init+0x1ec>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a49      	ldr	r2, [pc, #292]	@ (8004184 <HAL_GPIO_Init+0x2f8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d007      	beq.n	8004074 <HAL_GPIO_Init+0x1e8>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a48      	ldr	r2, [pc, #288]	@ (8004188 <HAL_GPIO_Init+0x2fc>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d101      	bne.n	8004070 <HAL_GPIO_Init+0x1e4>
 800406c:	2305      	movs	r3, #5
 800406e:	e00a      	b.n	8004086 <HAL_GPIO_Init+0x1fa>
 8004070:	2306      	movs	r3, #6
 8004072:	e008      	b.n	8004086 <HAL_GPIO_Init+0x1fa>
 8004074:	2304      	movs	r3, #4
 8004076:	e006      	b.n	8004086 <HAL_GPIO_Init+0x1fa>
 8004078:	2303      	movs	r3, #3
 800407a:	e004      	b.n	8004086 <HAL_GPIO_Init+0x1fa>
 800407c:	2302      	movs	r3, #2
 800407e:	e002      	b.n	8004086 <HAL_GPIO_Init+0x1fa>
 8004080:	2301      	movs	r3, #1
 8004082:	e000      	b.n	8004086 <HAL_GPIO_Init+0x1fa>
 8004084:	2300      	movs	r3, #0
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	f002 0203 	and.w	r2, r2, #3
 800408c:	0092      	lsls	r2, r2, #2
 800408e:	4093      	lsls	r3, r2
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4313      	orrs	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004096:	4937      	ldr	r1, [pc, #220]	@ (8004174 <HAL_GPIO_Init+0x2e8>)
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	089b      	lsrs	r3, r3, #2
 800409c:	3302      	adds	r3, #2
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040a4:	4b39      	ldr	r3, [pc, #228]	@ (800418c <HAL_GPIO_Init+0x300>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	43db      	mvns	r3, r3
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4013      	ands	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040c8:	4a30      	ldr	r2, [pc, #192]	@ (800418c <HAL_GPIO_Init+0x300>)
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040ce:	4b2f      	ldr	r3, [pc, #188]	@ (800418c <HAL_GPIO_Init+0x300>)
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	43db      	mvns	r3, r3
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4013      	ands	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040f2:	4a26      	ldr	r2, [pc, #152]	@ (800418c <HAL_GPIO_Init+0x300>)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80040f8:	4b24      	ldr	r3, [pc, #144]	@ (800418c <HAL_GPIO_Init+0x300>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	43db      	mvns	r3, r3
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4013      	ands	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800411c:	4a1b      	ldr	r2, [pc, #108]	@ (800418c <HAL_GPIO_Init+0x300>)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004122:	4b1a      	ldr	r3, [pc, #104]	@ (800418c <HAL_GPIO_Init+0x300>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	43db      	mvns	r3, r3
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	4013      	ands	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004146:	4a11      	ldr	r2, [pc, #68]	@ (800418c <HAL_GPIO_Init+0x300>)
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	3301      	adds	r3, #1
 8004150:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	fa22 f303 	lsr.w	r3, r2, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	f47f ae9d 	bne.w	8003e9c <HAL_GPIO_Init+0x10>
  }
}
 8004162:	bf00      	nop
 8004164:	bf00      	nop
 8004166:	371c      	adds	r7, #28
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	40021000 	.word	0x40021000
 8004174:	40010000 	.word	0x40010000
 8004178:	48000400 	.word	0x48000400
 800417c:	48000800 	.word	0x48000800
 8004180:	48000c00 	.word	0x48000c00
 8004184:	48001000 	.word	0x48001000
 8004188:	48001400 	.word	0x48001400
 800418c:	40010400 	.word	0x40010400

08004190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	807b      	strh	r3, [r7, #2]
 800419c:	4613      	mov	r3, r2
 800419e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041a0:	787b      	ldrb	r3, [r7, #1]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041a6:	887a      	ldrh	r2, [r7, #2]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041ac:	e002      	b.n	80041b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041ae:	887a      	ldrh	r2, [r7, #2]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041d2:	887a      	ldrh	r2, [r7, #2]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4013      	ands	r3, r2
 80041d8:	041a      	lsls	r2, r3, #16
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	43d9      	mvns	r1, r3
 80041de:	887b      	ldrh	r3, [r7, #2]
 80041e0:	400b      	ands	r3, r1
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	619a      	str	r2, [r3, #24]
}
 80041e8:	bf00      	nop
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	4603      	mov	r3, r0
 80041fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80041fe:	4b08      	ldr	r3, [pc, #32]	@ (8004220 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004200:	695a      	ldr	r2, [r3, #20]
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	4013      	ands	r3, r2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d006      	beq.n	8004218 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800420a:	4a05      	ldr	r2, [pc, #20]	@ (8004220 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800420c:	88fb      	ldrh	r3, [r7, #6]
 800420e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004210:	88fb      	ldrh	r3, [r7, #6]
 8004212:	4618      	mov	r0, r3
 8004214:	f000 f806 	bl	8004224 <HAL_GPIO_EXTI_Callback>
  }
}
 8004218:	bf00      	nop
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40010400 	.word	0x40010400

08004224 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	4603      	mov	r3, r0
 800422c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
	...

0800423c <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e0be      	b.n	80043cc <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2202      	movs	r2, #2
 8004252:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d02e      	beq.n	80042f8 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a4d      	ldr	r2, [pc, #308]	@ (80043d4 <HAL_HRTIM_Init+0x198>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d10b      	bne.n	80042bc <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80042a4:	4b4c      	ldr	r3, [pc, #304]	@ (80043d8 <HAL_HRTIM_Init+0x19c>)
 80042a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042a8:	4a4b      	ldr	r2, [pc, #300]	@ (80043d8 <HAL_HRTIM_Init+0x19c>)
 80042aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80042b0:	4b49      	ldr	r3, [pc, #292]	@ (80043d8 <HAL_HRTIM_Init+0x19c>)
 80042b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80042ca:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80042e0:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7fd f88f 	bl	800141c <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d012      	beq.n	8004330 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004318:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8004340:	2300      	movs	r3, #0
 8004342:	75fb      	strb	r3, [r7, #23]
 8004344:	e03e      	b.n	80043c4 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8004346:	7dfa      	ldrb	r2, [r7, #23]
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	1a9b      	subs	r3, r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	440b      	add	r3, r1
 8004354:	3318      	adds	r3, #24
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 800435a:	7dfa      	ldrb	r2, [r7, #23]
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	1a9b      	subs	r3, r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	440b      	add	r3, r1
 8004368:	331c      	adds	r3, #28
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 800436e:	7dfa      	ldrb	r2, [r7, #23]
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	440b      	add	r3, r1
 800437c:	3320      	adds	r3, #32
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8004382:	7dfa      	ldrb	r2, [r7, #23]
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	1a9b      	subs	r3, r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	440b      	add	r3, r1
 8004390:	3324      	adds	r3, #36	@ 0x24
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8004396:	7dfa      	ldrb	r2, [r7, #23]
 8004398:	6879      	ldr	r1, [r7, #4]
 800439a:	4613      	mov	r3, r2
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	1a9b      	subs	r3, r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	440b      	add	r3, r1
 80043a4:	3328      	adds	r3, #40	@ 0x28
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80043aa:	7dfa      	ldrb	r2, [r7, #23]
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	1a9b      	subs	r3, r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	440b      	add	r3, r1
 80043b8:	3330      	adds	r3, #48	@ 0x30
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80043be:	7dfb      	ldrb	r3, [r7, #23]
 80043c0:	3301      	adds	r3, #1
 80043c2:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 80043c4:	7dfb      	ldrb	r3, [r7, #23]
 80043c6:	2b06      	cmp	r3, #6
 80043c8:	d9bd      	bls.n	8004346 <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40016800 	.word	0x40016800
 80043d8:	40021000 	.word	0x40021000

080043dc <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <HAL_HRTIM_DLLCalibrationStart+0x18>
 80043f0:	2302      	movs	r3, #2
 80043f2:	e045      	b.n	8004480 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440a:	d114      	bne.n	8004436 <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0202 	bic.w	r2, r2, #2
 800441c:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f042 0201 	orr.w	r2, r2, #1
 8004430:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 8004434:	e01f      	b.n	8004476 <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0202 	orr.w	r2, r2, #2
 8004446:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8004452:	f023 010c 	bic.w	r1, r3, #12
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0201 	orr.w	r2, r2, #1
 8004472:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8004496:	f7fd fa67 	bl	8001968 <HAL_GetTick>
 800449a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 800449c:	e014      	b.n	80044c8 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a4:	d010      	beq.n	80044c8 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 80044a6:	f7fd fa5f 	bl	8001968 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d302      	bcc.n	80044bc <HAL_HRTIM_PollForDLLCalibration+0x30>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d105      	bne.n	80044c8 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2207      	movs	r2, #7
 80044c0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
        return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e011      	b.n	80044ec <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 80044d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044d8:	d1e1      	bne.n	800449e <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d101      	bne.n	8004510 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 800450c:	2302      	movs	r3, #2
 800450e:	e015      	b.n	800453c <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b06      	cmp	r3, #6
 800451c:	d104      	bne.n	8004528 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 fa19 	bl	8004958 <HRTIM_MasterBase_Config>
 8004526:	e004      	b.n	8004532 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	68b9      	ldr	r1, [r7, #8]
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f000 fa42 	bl	80049b6 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d101      	bne.n	8004560 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 800455c:	2302      	movs	r3, #2
 800455e:	e07a      	b.n	8004656 <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8004566:	2b01      	cmp	r3, #1
 8004568:	d101      	bne.n	800456e <HAL_HRTIM_WaveformTimerConfig+0x2a>
 800456a:	2302      	movs	r3, #2
 800456c:	e073      	b.n	8004656 <HAL_HRTIM_WaveformTimerConfig+0x112>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2202      	movs	r2, #2
 800457a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b06      	cmp	r3, #6
 8004582:	d104      	bne.n	800458e <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 fa55 	bl	8004a36 <HRTIM_MasterWaveform_Config>
 800458c:	e004      	b.n	8004598 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	68b9      	ldr	r1, [r7, #8]
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 faec 	bl	8004b70 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6819      	ldr	r1, [r3, #0]
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	4613      	mov	r3, r2
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	1a9b      	subs	r3, r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4403      	add	r3, r0
 80045aa:	3320      	adds	r3, #32
 80045ac:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6859      	ldr	r1, [r3, #4]
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	4613      	mov	r3, r2
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4403      	add	r3, r0
 80045c0:	3324      	adds	r3, #36	@ 0x24
 80045c2:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6899      	ldr	r1, [r3, #8]
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	4613      	mov	r3, r2
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	1a9b      	subs	r3, r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4403      	add	r3, r0
 80045d6:	3328      	adds	r3, #40	@ 0x28
 80045d8:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68d9      	ldr	r1, [r3, #12]
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	4613      	mov	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4403      	add	r3, r0
 80045ec:	332c      	adds	r3, #44	@ 0x2c
 80045ee:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6919      	ldr	r1, [r3, #16]
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	4613      	mov	r3, r2
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	1a9b      	subs	r3, r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4403      	add	r3, r0
 8004602:	3330      	adds	r3, #48	@ 0x30
 8004604:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8004606:	68b9      	ldr	r1, [r7, #8]
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 fd7f 	bl	800510c <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2b06      	cmp	r3, #6
 8004612:	d017      	beq.n	8004644 <HAL_HRTIM_WaveformTimerConfig+0x100>
   && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004618:	2b00      	cmp	r3, #0
 800461a:	d113      	bne.n	8004644 <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	3301      	adds	r3, #1
 8004624:	01db      	lsls	r3, r3, #7
 8004626:	4413      	add	r3, r2
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004632:	025b      	lsls	r3, r3, #9
 8004634:	68f9      	ldr	r1, [r7, #12]
 8004636:	6809      	ldr	r1, [r1, #0]
 8004638:	431a      	orrs	r2, r3
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	3301      	adds	r3, #1
 800463e:	01db      	lsls	r3, r3, #7
 8004640:	440b      	add	r3, r1
 8004642:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b084      	sub	sp, #16
 8004662:	af00      	add	r7, sp, #0
 8004664:	60f8      	str	r0, [r7, #12]
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	607a      	str	r2, [r7, #4]
    assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
    assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
    assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
    assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d101      	bne.n	800467a <HAL_HRTIM_WaveformTimerControl+0x1c>
    {
       return HAL_BUSY;
 8004676:	2302      	movs	r3, #2
 8004678:	e020      	b.n	80046bc <HAL_HRTIM_WaveformTimerControl+0x5e>
    }

    /* Process Locked */
    __HAL_LOCK(hhrtim);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8004680:	2b01      	cmp	r3, #1
 8004682:	d101      	bne.n	8004688 <HAL_HRTIM_WaveformTimerControl+0x2a>
 8004684:	2302      	movs	r3, #2
 8004686:	e019      	b.n	80046bc <HAL_HRTIM_WaveformTimerControl+0x5e>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 fbed 	bl	8004e7c <HRTIM_TimingUnitWaveform_Control>

    /* Force a software update */
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80046a2:	68b9      	ldr	r1, [r7, #8]
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 fd31 	bl	800510c <HRTIM_ForceRegistersUpdate>

    hhrtim->State = HAL_HRTIM_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    /* Process Unlocked */
    __HAL_UNLOCK(hhrtim);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
 80046d0:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d101      	bne.n	80046e2 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 80046de:	2302      	movs	r3, #2
 80046e0:	e01d      	b.n	800471e <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e016      	b.n	800471e <HAL_HRTIM_WaveformOutputConfig+0x5a>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	68b9      	ldr	r1, [r7, #8]
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 fc18 	bl	8004f3c <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b082      	sub	sp, #8
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
 800472e:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	2bff      	cmp	r3, #255	@ 0xff
 8004734:	d103      	bne.n	800473e <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fd56 	bl	80051e8 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 800473c:	e00a      	b.n	8004754 <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b06      	cmp	r3, #6
 8004742:	d103      	bne.n	800474c <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 fddf 	bl	8005308 <HRTIM_Master_ISR>
}
 800474a:	e003      	b.n	8004754 <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 800474c:	6839      	ldr	r1, [r7, #0]
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fe9f 	bl	8005492 <HRTIM_Timer_ISR>
}
 8004754:	bf00      	nop
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_HRTIM_Fault6Callback>:
  * @brief  Callback function invoked when a fault 6 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault6Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault6Callback could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_HRTIM_DLLCalibrationReadyCallback>:
  * @brief  Callback function invoked when the DLL calibration is completed
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_DLLCalibrationReadyCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_DLLCalibrationCallback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <HAL_HRTIM_RepetitionEventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RepetitionEventCallback could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 80048de:	bf00      	nop
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
 800494a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f023 0307 	bic.w	r3, r3, #7
 8004970:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	4313      	orrs	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 0318 	bic.w	r3, r3, #24
 8004982:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	4313      	orrs	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	6812      	ldr	r2, [r2, #0]
 800499e:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	6852      	ldr	r2, [r2, #4]
 80049a8:	619a      	str	r2, [r3, #24]
}
 80049aa:	bf00      	nop
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b087      	sub	sp, #28
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	3301      	adds	r3, #1
 80049ca:	01db      	lsls	r3, r3, #7
 80049cc:	4413      	add	r3, r2
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f023 0307 	bic.w	r3, r3, #7
 80049d8:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f023 0318 	bic.w	r3, r3, #24
 80049ea:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	3301      	adds	r3, #1
 80049fe:	01db      	lsls	r3, r3, #7
 8004a00:	4413      	add	r3, r2
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6819      	ldr	r1, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	01db      	lsls	r3, r3, #7
 8004a12:	440b      	add	r3, r1
 8004a14:	3394      	adds	r3, #148	@ 0x94
 8004a16:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6819      	ldr	r1, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	01db      	lsls	r3, r3, #7
 8004a24:	440b      	add	r3, r1
 8004a26:	3398      	adds	r3, #152	@ 0x98
 8004a28:	601a      	str	r2, [r3, #0]
}
 8004a2a:	bf00      	nop
 8004a2c:	371c      	adds	r7, #28
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b085      	sub	sp, #20
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
 8004a3e:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8004a50:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f023 0320 	bic.w	r3, r3, #32
 8004a58:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004a6a:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	2b20      	cmp	r3, #32
 8004a72:	d003      	beq.n	8004a7c <HRTIM_MasterWaveform_Config+0x46>
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d108      	bne.n	8004a8e <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004a82:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f043 0320 	orr.w	r3, r3, #32
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	e021      	b.n	8004ad2 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	2b03      	cmp	r3, #3
 8004a94:	d108      	bne.n	8004aa8 <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a9c:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	e014      	b.n	8004ad2 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d108      	bne.n	8004ac2 <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ab6:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	e007      	b.n	8004ad2 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f023 0320 	bic.w	r3, r3, #32
 8004ac8:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004ad0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ad8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004aea:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004afc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8004b0e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004b20:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004b34:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b46:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8004b64:	bf00      	nop
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b08b      	sub	sp, #44	@ 0x2c
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	3301      	adds	r3, #1
 8004b84:	01db      	lsls	r3, r3, #7
 8004b86:	4413      	add	r3, r2
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	6811      	ldr	r1, [r2, #0]
 8004b8e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	3301      	adds	r3, #1
 8004b96:	01db      	lsls	r3, r3, #7
 8004b98:	440b      	add	r3, r1
 8004b9a:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	01db      	lsls	r3, r3, #7
 8004ba6:	4413      	add	r3, r2
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	01db      	lsls	r3, r3, #7
 8004bb4:	4413      	add	r3, r2
 8004bb6:	33e8      	adds	r3, #232	@ 0xe8
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	01db      	lsls	r3, r3, #7
 8004bc4:	4413      	add	r3, r2
 8004bc6:	33e4      	adds	r3, #228	@ 0xe4
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8004bd4:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd8:	f023 0320 	bic.w	r3, r3, #32
 8004bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004be4:	4313      	orrs	r3, r2
 8004be6:	627b      	str	r3, [r7, #36]	@ 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d003      	beq.n	8004bf8 <HRTIM_TimingUnitWaveform_Config+0x88>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d108      	bne.n	8004c0a <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfa:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8004bfe:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8004c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c02:	f043 0320 	orr.w	r3, r3, #32
 8004c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c08:	e021      	b.n	8004c4e <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d108      	bne.n	8004c24 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 8004c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c18:	627b      	str	r3, [r7, #36]	@ 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c22:	e014      	b.n	8004c4e <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d108      	bne.n	8004c3e <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c32:	627b      	str	r3, [r7, #36]	@ 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8004c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c3c:	e007      	b.n	8004c4e <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c40:	f023 0320 	bic.w	r3, r3, #32
 8004c44:	627b      	str	r3, [r7, #36]	@ 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8004c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c48:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8004c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c54:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8004c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c66:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8004c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c74:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004c78:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c80:	4313      	orrs	r3, r2
 8004c82:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8004c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c86:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8004c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c92:	4313      	orrs	r3, r2
 8004c94:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8004c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c98:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004caa:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004cae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cb8:	d103      	bne.n	8004cc2 <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8004cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cda:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce8:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8004cec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d02:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d18:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d2a:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d30:	6a3a      	ldr	r2, [r7, #32]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d3a:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8004d3e:	d004      	beq.n	8004d4a <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d44:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8004d48:	d103      	bne.n	8004d52 <HRTIM_TimingUnitWaveform_Config+0x1e2>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d4e:	2b40      	cmp	r3, #64	@ 0x40
 8004d50:	d108      	bne.n	8004d64 <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8004d58:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d5e:	6a3a      	ldr	r2, [r7, #32]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d6a:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d70:	6a3a      	ldr	r2, [r7, #32]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d7a:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2b05      	cmp	r3, #5
 8004d80:	d850      	bhi.n	8004e24 <HRTIM_TimingUnitWaveform_Config+0x2b4>
 8004d82:	a201      	add	r2, pc, #4	@ (adr r2, 8004d88 <HRTIM_TimingUnitWaveform_Config+0x218>)
 8004d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d88:	08004da1 	.word	0x08004da1
 8004d8c:	08004db7 	.word	0x08004db7
 8004d90:	08004dcd 	.word	0x08004dcd
 8004d94:	08004de3 	.word	0x08004de3
 8004d98:	08004df9 	.word	0x08004df9
 8004d9c:	08004e0f 	.word	0x08004e0f
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004da6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	69fa      	ldr	r2, [r7, #28]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	61fb      	str	r3, [r7, #28]
      break;
 8004db4:	e037      	b.n	8004e26 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dbc:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	69fa      	ldr	r2, [r7, #28]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	61fb      	str	r3, [r7, #28]
      break;
 8004dca:	e02c      	b.n	8004e26 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004dd2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	69fa      	ldr	r2, [r7, #28]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	61fb      	str	r3, [r7, #28]
      break;
 8004de0:	e021      	b.n	8004e26 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004de8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	69fa      	ldr	r2, [r7, #28]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	61fb      	str	r3, [r7, #28]
      break;
 8004df6:	e016      	b.n	8004e26 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004dfe:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e04:	015b      	lsls	r3, r3, #5
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	61fb      	str	r3, [r7, #28]
      break;
 8004e0c:	e00b      	b.n	8004e26 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004e14:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e1a:	019b      	lsls	r3, r3, #6
 8004e1c:	69fa      	ldr	r2, [r7, #28]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	61fb      	str	r3, [r7, #28]
      break;
 8004e22:	e000      	b.n	8004e26 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  default:
    break;
 8004e24:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	01db      	lsls	r3, r3, #7
 8004e30:	4413      	add	r3, r2
 8004e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e34:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	01db      	lsls	r3, r3, #7
 8004e3e:	4413      	add	r3, r2
 8004e40:	33e8      	adds	r3, #232	@ 0xe8
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	01db      	lsls	r3, r3, #7
 8004e4e:	4413      	add	r3, r2
 8004e50:	33e4      	adds	r3, #228	@ 0xe4
 8004e52:	6a3a      	ldr	r2, [r7, #32]
 8004e54:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	01db      	lsls	r3, r3, #7
 8004e5e:	4413      	add	r3, r2
 8004e60:	33d4      	adds	r3, #212	@ 0xd4
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8004e70:	bf00      	nop
 8004e72:	372c      	adds	r7, #44	@ 0x2c
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
   uint32_t hrtim_timcr2;

   /* Configure timing unit (Timer A to Timer F) */
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	01db      	lsls	r3, r3, #7
 8004e90:	4413      	add	r3, r2
 8004e92:	33ec      	adds	r3, #236	@ 0xec
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	617b      	str	r3, [r7, #20]

   /* Set the UpDown counting Mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f023 0310 	bic.w	r3, r3, #16
 8004e9e:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]

   /* Set the TrigHalf Mode : requires the counter to be disabled */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004eb2:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ec4:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004ed6:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]

   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d11a      	bne.n	8004f20 <HRTIM_TimingUnitWaveform_Control+0xa4>
   {
      /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f023 0304 	bic.w	r3, r3, #4
 8004ef0:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	617b      	str	r3, [r7, #20]

      /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f023 0302 	bic.w	r3, r3, #2
 8004f02:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]

      /* Enable the DualChannel DAC trigger */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f023 0301 	bic.w	r3, r3, #1
 8004f14:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]
   }
   /* Update the HRTIM registers */
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	01db      	lsls	r3, r3, #7
 8004f28:	4413      	add	r3, r2
 8004f2a:	33ec      	adds	r3, #236	@ 0xec
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	601a      	str	r2, [r3, #0]

}
 8004f30:	bf00      	nop
 8004f32:	371c      	adds	r7, #28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b089      	sub	sp, #36	@ 0x24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	01db      	lsls	r3, r3, #7
 8004f56:	4413      	add	r3, r2
 8004f58:	33e4      	adds	r3, #228	@ 0xe4
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	01db      	lsls	r3, r3, #7
 8004f66:	4413      	add	r3, r2
 8004f68:	33b8      	adds	r3, #184	@ 0xb8
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	617b      	str	r3, [r7, #20]

  switch (Output)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f74:	d05d      	beq.n	8005032 <HRTIM_OutputConfig+0xf6>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f7c:	d86e      	bhi.n	800505c <HRTIM_OutputConfig+0x120>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f84:	d042      	beq.n	800500c <HRTIM_OutputConfig+0xd0>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f8c:	d866      	bhi.n	800505c <HRTIM_OutputConfig+0x120>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f94:	d04d      	beq.n	8005032 <HRTIM_OutputConfig+0xf6>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f9c:	d85e      	bhi.n	800505c <HRTIM_OutputConfig+0x120>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fa4:	d032      	beq.n	800500c <HRTIM_OutputConfig+0xd0>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fac:	d856      	bhi.n	800505c <HRTIM_OutputConfig+0x120>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b80      	cmp	r3, #128	@ 0x80
 8004fb2:	d03e      	beq.n	8005032 <HRTIM_OutputConfig+0xf6>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b80      	cmp	r3, #128	@ 0x80
 8004fb8:	d850      	bhi.n	800505c <HRTIM_OutputConfig+0x120>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2b40      	cmp	r3, #64	@ 0x40
 8004fbe:	d025      	beq.n	800500c <HRTIM_OutputConfig+0xd0>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b40      	cmp	r3, #64	@ 0x40
 8004fc4:	d84a      	bhi.n	800505c <HRTIM_OutputConfig+0x120>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d01f      	beq.n	800500c <HRTIM_OutputConfig+0xd0>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d044      	beq.n	800505c <HRTIM_OutputConfig+0x120>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b20      	cmp	r3, #32
 8004fd6:	d841      	bhi.n	800505c <HRTIM_OutputConfig+0x120>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d33e      	bcc.n	800505c <HRTIM_OutputConfig+0x120>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3b02      	subs	r3, #2
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	409a      	lsls	r2, r3
 8004fe6:	4b48      	ldr	r3, [pc, #288]	@ (8005108 <HRTIM_OutputConfig+0x1cc>)
 8004fe8:	4013      	ands	r3, r2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	bf14      	ite	ne
 8004fee:	2301      	movne	r3, #1
 8004ff0:	2300      	moveq	r3, #0
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d11c      	bne.n	8005032 <HRTIM_OutputConfig+0xf6>
 8004ff8:	f244 0304 	movw	r3, #16388	@ 0x4004
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	bf14      	ite	ne
 8005002:	2301      	movne	r3, #1
 8005004:	2300      	moveq	r3, #0
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d027      	beq.n	800505c <HRTIM_OutputConfig+0x120>
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
  case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6819      	ldr	r1, [r3, #0]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	01db      	lsls	r3, r3, #7
 8005018:	440b      	add	r3, r1
 800501a:	33bc      	adds	r3, #188	@ 0xbc
 800501c:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6819      	ldr	r1, [r3, #0]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	01db      	lsls	r3, r3, #7
 800502a:	440b      	add	r3, r1
 800502c:	33c0      	adds	r3, #192	@ 0xc0
 800502e:	601a      	str	r2, [r3, #0]
      break;
 8005030:	e015      	b.n	800505e <HRTIM_OutputConfig+0x122>
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
  case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6819      	ldr	r1, [r3, #0]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	01db      	lsls	r3, r3, #7
 800503e:	440b      	add	r3, r1
 8005040:	33c4      	adds	r3, #196	@ 0xc4
 8005042:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6819      	ldr	r1, [r3, #0]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	01db      	lsls	r3, r3, #7
 8005050:	440b      	add	r3, r1
 8005052:	33c8      	adds	r3, #200	@ 0xc8
 8005054:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8005056:	2310      	movs	r3, #16
 8005058:	61bb      	str	r3, [r7, #24]
      break;
 800505a:	e000      	b.n	800505e <HRTIM_OutputConfig+0x122>
    }

  default:
    break;
 800505c:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 800505e:	22fe      	movs	r2, #254	@ 0xfe
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8005066:	43db      	mvns	r3, r3
 8005068:	69fa      	ldr	r2, [r7, #28]
 800506a:	4013      	ands	r3, r2
 800506c:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	fa02 f303 	lsl.w	r3, r2, r3
 8005078:	69fa      	ldr	r2, [r7, #28]
 800507a:	4313      	orrs	r3, r2
 800507c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	69fa      	ldr	r2, [r7, #28]
 800508a:	4313      	orrs	r3, r2
 800508c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	691a      	ldr	r2, [r3, #16]
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	fa02 f303 	lsl.w	r3, r2, r3
 8005098:	69fa      	ldr	r2, [r7, #28]
 800509a:	4313      	orrs	r3, r2
 800509c:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	695a      	ldr	r2, [r3, #20]
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	69fa      	ldr	r2, [r7, #28]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	699a      	ldr	r2, [r3, #24]
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	fa02 f303 	lsl.w	r3, r2, r3
 80050b8:	69fa      	ldr	r2, [r7, #28]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	2b08      	cmp	r3, #8
 80050c4:	d111      	bne.n	80050ea <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10c      	bne.n	80050ea <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d107      	bne.n	80050ea <HRTIM_OutputConfig+0x1ae>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	69da      	ldr	r2, [r3, #28]
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	69fa      	ldr	r2, [r7, #28]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	01db      	lsls	r3, r3, #7
 80050f2:	4413      	add	r3, r2
 80050f4:	33e4      	adds	r3, #228	@ 0xe4
 80050f6:	69fa      	ldr	r2, [r7, #28]
 80050f8:	601a      	str	r2, [r3, #0]
}
 80050fa:	bf00      	nop
 80050fc:	3724      	adds	r7, #36	@ 0x24
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40000041 	.word	0x40000041

0800510c <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b06      	cmp	r3, #6
 800511a:	d85e      	bhi.n	80051da <HRTIM_ForceRegistersUpdate+0xce>
 800511c:	a201      	add	r2, pc, #4	@ (adr r2, 8005124 <HRTIM_ForceRegistersUpdate+0x18>)
 800511e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005122:	bf00      	nop
 8005124:	08005157 	.word	0x08005157
 8005128:	0800516d 	.word	0x0800516d
 800512c:	08005183 	.word	0x08005183
 8005130:	08005199 	.word	0x08005199
 8005134:	080051af 	.word	0x080051af
 8005138:	080051c5 	.word	0x080051c5
 800513c:	08005141 	.word	0x08005141
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f042 0201 	orr.w	r2, r2, #1
 8005150:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005154:	e042      	b.n	80051dc <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0202 	orr.w	r2, r2, #2
 8005166:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800516a:	e037      	b.n	80051dc <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f042 0204 	orr.w	r2, r2, #4
 800517c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005180:	e02c      	b.n	80051dc <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0208 	orr.w	r2, r2, #8
 8005192:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005196:	e021      	b.n	80051dc <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0210 	orr.w	r2, r2, #16
 80051a8:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80051ac:	e016      	b.n	80051dc <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0220 	orr.w	r2, r2, #32
 80051be:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80051c2:	e00b      	b.n	80051dc <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051d4:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80051d8:	e000      	b.n	80051dc <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 80051da:	bf00      	nop
  }
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 80051f8:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 8005202:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00c      	beq.n	8005228 <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b00      	cmp	r3, #0
 8005216:	d007      	beq.n	8005228 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2201      	movs	r2, #1
 800521e:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7ff fa9a 	bl	800475c <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00c      	beq.n	800524c <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d007      	beq.n	800524c <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2202      	movs	r2, #2
 8005242:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7ff fa92 	bl	8004770 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00c      	beq.n	8005270 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b00      	cmp	r3, #0
 800525e:	d007      	beq.n	8005270 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2204      	movs	r2, #4
 8005266:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7ff fa8a 	bl	8004784 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f003 0308 	and.w	r3, r3, #8
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00c      	beq.n	8005294 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	f003 0308 	and.w	r3, r3, #8
 8005280:	2b00      	cmp	r3, #0
 8005282:	d007      	beq.n	8005294 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2208      	movs	r2, #8
 800528a:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7ff fa82 	bl	8004798 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f003 0310 	and.w	r3, r3, #16
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00c      	beq.n	80052b8 <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	f003 0310 	and.w	r3, r3, #16
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d007      	beq.n	80052b8 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2210      	movs	r2, #16
 80052ae:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7ff fa7a 	bl	80047ac <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 6 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT6) != (uint32_t)RESET)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00c      	beq.n	80052dc <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT6) != (uint32_t)RESET)
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d007      	beq.n	80052dc <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT6);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2240      	movs	r2, #64	@ 0x40
 80052d2:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 6 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault6Callback(hhrtim);
#else
      HAL_HRTIM_Fault6Callback(hhrtim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7ff fa72 	bl	80047c0 <HAL_HRTIM_Fault6Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f003 0320 	and.w	r3, r3, #32
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00c      	beq.n	8005300 <HRTIM_HRTIM_ISR+0x118>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	f003 0320 	and.w	r3, r3, #32
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d007      	beq.n	8005300 <HRTIM_HRTIM_ISR+0x118>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7ff fa6a 	bl	80047d4 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8005300:	bf00      	nop
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8005318:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 8005322:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	60bb      	str	r3, [r7, #8]

  /* DLL calibration ready event */
  if((uint32_t)(isrflags & HRTIM_FLAG_DLLRDY) != (uint32_t)RESET)
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d015      	beq.n	800536a <HRTIM_Master_ISR+0x62>
  {
    if((uint32_t)(ierits & HRTIM_IT_DLLRDY) != (uint32_t)RESET)
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d010      	beq.n	800536a <HRTIM_Master_ISR+0x62>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_DLLRDY);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005350:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Set HRTIM State */
      hhrtim->State = HAL_HRTIM_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process unlocked */
      __HAL_UNLOCK(hhrtim);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DLLCalibrationReadyCallback(hhrtim);
#else
      HAL_HRTIM_DLLCalibrationReadyCallback(hhrtim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff fa3f 	bl	80047e8 <HAL_HRTIM_DLLCalibrationReadyCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00d      	beq.n	8005390 <HRTIM_Master_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d008      	beq.n	8005390 <HRTIM_Master_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005386:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7ff fa36 	bl	80047fc <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00c      	beq.n	80053b4 <HRTIM_Master_ISR+0xac>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d007      	beq.n	80053b4 <HRTIM_Master_ISR+0xac>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2201      	movs	r2, #1
 80053aa:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80053ac:	2106      	movs	r1, #6
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7ff fa4e 	bl	8004850 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00c      	beq.n	80053d8 <HRTIM_Master_ISR+0xd0>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d007      	beq.n	80053d8 <HRTIM_Master_ISR+0xd0>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2202      	movs	r2, #2
 80053ce:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80053d0:	2106      	movs	r1, #6
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7ff fa47 	bl	8004866 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00c      	beq.n	80053fc <HRTIM_Master_ISR+0xf4>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d007      	beq.n	80053fc <HRTIM_Master_ISR+0xf4>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2204      	movs	r2, #4
 80053f2:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80053f4:	2106      	movs	r1, #6
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7ff fa40 	bl	800487c <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f003 0308 	and.w	r3, r3, #8
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00c      	beq.n	8005420 <HRTIM_Master_ISR+0x118>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f003 0308 	and.w	r3, r3, #8
 800540c:	2b00      	cmp	r3, #0
 800540e:	d007      	beq.n	8005420 <HRTIM_Master_ISR+0x118>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2208      	movs	r2, #8
 8005416:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8005418:	2106      	movs	r1, #6
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7ff fa39 	bl	8004892 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f003 0310 	and.w	r3, r3, #16
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00c      	beq.n	8005444 <HRTIM_Master_ISR+0x13c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	f003 0310 	and.w	r3, r3, #16
 8005430:	2b00      	cmp	r3, #0
 8005432:	d007      	beq.n	8005444 <HRTIM_Master_ISR+0x13c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2210      	movs	r2, #16
 800543a:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800543c:	2106      	movs	r1, #6
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7ff f9fb 	bl	800483a <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f003 0320 	and.w	r3, r3, #32
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00b      	beq.n	8005466 <HRTIM_Master_ISR+0x15e>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	f003 0320 	and.w	r3, r3, #32
 8005454:	2b00      	cmp	r3, #0
 8005456:	d006      	beq.n	8005466 <HRTIM_Master_ISR+0x15e>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2220      	movs	r2, #32
 800545e:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7ff f9d5 	bl	8004810 <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00c      	beq.n	800548a <HRTIM_Master_ISR+0x182>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005476:	2b00      	cmp	r3, #0
 8005478:	d007      	beq.n	800548a <HRTIM_Master_ISR+0x182>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2240      	movs	r2, #64	@ 0x40
 8005480:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8005482:	2106      	movs	r1, #6
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f7ff f9cd 	bl	8004824 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800548a:	bf00      	nop
 800548c:	3718      	adds	r7, #24
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b084      	sub	sp, #16
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
 800549a:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	3301      	adds	r3, #1
 80054a4:	01db      	lsls	r3, r3, #7
 80054a6:	4413      	add	r3, r2
 80054a8:	3304      	adds	r3, #4
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	01db      	lsls	r3, r3, #7
 80054b6:	4413      	add	r3, r2
 80054b8:	338c      	adds	r3, #140	@ 0x8c
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d010      	beq.n	80054ea <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00b      	beq.n	80054ea <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	01db      	lsls	r3, r3, #7
 80054da:	4413      	add	r3, r2
 80054dc:	3388      	adds	r3, #136	@ 0x88
 80054de:	2201      	movs	r2, #1
 80054e0:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 80054e2:	6839      	ldr	r1, [r7, #0]
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7ff f9b3 	bl	8004850 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d010      	beq.n	8005516 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00b      	beq.n	8005516 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	01db      	lsls	r3, r3, #7
 8005506:	4413      	add	r3, r2
 8005508:	3388      	adds	r3, #136	@ 0x88
 800550a:	2202      	movs	r2, #2
 800550c:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 800550e:	6839      	ldr	r1, [r7, #0]
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f7ff f9a8 	bl	8004866 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b00      	cmp	r3, #0
 800551e:	d010      	beq.n	8005542 <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f003 0304 	and.w	r3, r3, #4
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00b      	beq.n	8005542 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	01db      	lsls	r3, r3, #7
 8005532:	4413      	add	r3, r2
 8005534:	3388      	adds	r3, #136	@ 0x88
 8005536:	2204      	movs	r2, #4
 8005538:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 800553a:	6839      	ldr	r1, [r7, #0]
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7ff f99d 	bl	800487c <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f003 0308 	and.w	r3, r3, #8
 8005548:	2b00      	cmp	r3, #0
 800554a:	d010      	beq.n	800556e <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f003 0308 	and.w	r3, r3, #8
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00b      	beq.n	800556e <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	01db      	lsls	r3, r3, #7
 800555e:	4413      	add	r3, r2
 8005560:	3388      	adds	r3, #136	@ 0x88
 8005562:	2208      	movs	r2, #8
 8005564:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8005566:	6839      	ldr	r1, [r7, #0]
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7ff f992 	bl	8004892 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f003 0310 	and.w	r3, r3, #16
 8005574:	2b00      	cmp	r3, #0
 8005576:	d010      	beq.n	800559a <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f003 0310 	and.w	r3, r3, #16
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00b      	beq.n	800559a <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	01db      	lsls	r3, r3, #7
 800558a:	4413      	add	r3, r2
 800558c:	3388      	adds	r3, #136	@ 0x88
 800558e:	2210      	movs	r2, #16
 8005590:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8005592:	6839      	ldr	r1, [r7, #0]
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f7ff f950 	bl	800483a <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d010      	beq.n	80055c6 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00b      	beq.n	80055c6 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	01db      	lsls	r3, r3, #7
 80055b6:	4413      	add	r3, r2
 80055b8:	3388      	adds	r3, #136	@ 0x88
 80055ba:	2240      	movs	r2, #64	@ 0x40
 80055bc:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 80055be:	6839      	ldr	r1, [r7, #0]
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7ff f92f 	bl	8004824 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d010      	beq.n	80055f2 <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00b      	beq.n	80055f2 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	01db      	lsls	r3, r3, #7
 80055e2:	4413      	add	r3, r2
 80055e4:	3388      	adds	r3, #136	@ 0x88
 80055e6:	2280      	movs	r2, #128	@ 0x80
 80055e8:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 80055ea:	6839      	ldr	r1, [r7, #0]
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7ff f95b 	bl	80048a8 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d011      	beq.n	8005620 <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00c      	beq.n	8005620 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	01db      	lsls	r3, r3, #7
 800560e:	4413      	add	r3, r2
 8005610:	3388      	adds	r3, #136	@ 0x88
 8005612:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005616:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8005618:	6839      	ldr	r1, [r7, #0]
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7ff f94f 	bl	80048be <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005626:	2b00      	cmp	r3, #0
 8005628:	d011      	beq.n	800564e <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00c      	beq.n	800564e <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	01db      	lsls	r3, r3, #7
 800563c:	4413      	add	r3, r2
 800563e:	3388      	adds	r3, #136	@ 0x88
 8005640:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005644:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8005646:	6839      	ldr	r1, [r7, #0]
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7ff f959 	bl	8004900 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005654:	2b00      	cmp	r3, #0
 8005656:	d011      	beq.n	800567c <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00c      	beq.n	800567c <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	01db      	lsls	r3, r3, #7
 800566a:	4413      	add	r3, r2
 800566c:	3388      	adds	r3, #136	@ 0x88
 800566e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005672:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8005674:	6839      	ldr	r1, [r7, #0]
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7ff f94d 	bl	8004916 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005682:	2b00      	cmp	r3, #0
 8005684:	d011      	beq.n	80056aa <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00c      	beq.n	80056aa <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	01db      	lsls	r3, r3, #7
 8005698:	4413      	add	r3, r2
 800569a:	3388      	adds	r3, #136	@ 0x88
 800569c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056a0:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 80056a2:	6839      	ldr	r1, [r7, #0]
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7ff f941 	bl	800492c <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d011      	beq.n	80056d8 <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00c      	beq.n	80056d8 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	01db      	lsls	r3, r3, #7
 80056c6:	4413      	add	r3, r2
 80056c8:	3388      	adds	r3, #136	@ 0x88
 80056ca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80056ce:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 80056d0:	6839      	ldr	r1, [r7, #0]
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7ff f935 	bl	8004942 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d011      	beq.n	8005706 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00c      	beq.n	8005706 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	01db      	lsls	r3, r3, #7
 80056f4:	4413      	add	r3, r2
 80056f6:	3388      	adds	r3, #136	@ 0x88
 80056f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80056fc:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 80056fe:	6839      	ldr	r1, [r7, #0]
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7ff f8f2 	bl	80048ea <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d011      	beq.n	8005734 <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00c      	beq.n	8005734 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	01db      	lsls	r3, r3, #7
 8005722:	4413      	add	r3, r2
 8005724:	3388      	adds	r3, #136	@ 0x88
 8005726:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800572a:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 800572c:	6839      	ldr	r1, [r7, #0]
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff f8d0 	bl	80048d4 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8005734:	bf00      	nop
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e0c0      	b.n	80058d0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d106      	bne.n	8005768 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7fb ff96 	bl	8001694 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2203      	movs	r2, #3
 800576c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4618      	mov	r0, r3
 8005776:	f004 fcb0 	bl	800a0da <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800577a:	2300      	movs	r3, #0
 800577c:	73fb      	strb	r3, [r7, #15]
 800577e:	e03e      	b.n	80057fe <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005780:	7bfa      	ldrb	r2, [r7, #15]
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	4613      	mov	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	440b      	add	r3, r1
 800578e:	3311      	adds	r3, #17
 8005790:	2201      	movs	r2, #1
 8005792:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005794:	7bfa      	ldrb	r2, [r7, #15]
 8005796:	6879      	ldr	r1, [r7, #4]
 8005798:	4613      	mov	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	440b      	add	r3, r1
 80057a2:	3310      	adds	r3, #16
 80057a4:	7bfa      	ldrb	r2, [r7, #15]
 80057a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80057a8:	7bfa      	ldrb	r2, [r7, #15]
 80057aa:	6879      	ldr	r1, [r7, #4]
 80057ac:	4613      	mov	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	440b      	add	r3, r1
 80057b6:	3313      	adds	r3, #19
 80057b8:	2200      	movs	r2, #0
 80057ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80057bc:	7bfa      	ldrb	r2, [r7, #15]
 80057be:	6879      	ldr	r1, [r7, #4]
 80057c0:	4613      	mov	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	440b      	add	r3, r1
 80057ca:	3320      	adds	r3, #32
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80057d0:	7bfa      	ldrb	r2, [r7, #15]
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	4613      	mov	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	440b      	add	r3, r1
 80057de:	3324      	adds	r3, #36	@ 0x24
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
 80057e6:	6879      	ldr	r1, [r7, #4]
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	4613      	mov	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	00db      	lsls	r3, r3, #3
 80057f2:	440b      	add	r3, r1
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
 80057fa:	3301      	adds	r3, #1
 80057fc:	73fb      	strb	r3, [r7, #15]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	791b      	ldrb	r3, [r3, #4]
 8005802:	7bfa      	ldrb	r2, [r7, #15]
 8005804:	429a      	cmp	r2, r3
 8005806:	d3bb      	bcc.n	8005780 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005808:	2300      	movs	r3, #0
 800580a:	73fb      	strb	r3, [r7, #15]
 800580c:	e044      	b.n	8005898 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800580e:	7bfa      	ldrb	r2, [r7, #15]
 8005810:	6879      	ldr	r1, [r7, #4]
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	440b      	add	r3, r1
 800581c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8005820:	2200      	movs	r2, #0
 8005822:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005824:	7bfa      	ldrb	r2, [r7, #15]
 8005826:	6879      	ldr	r1, [r7, #4]
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	00db      	lsls	r3, r3, #3
 8005830:	440b      	add	r3, r1
 8005832:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005836:	7bfa      	ldrb	r2, [r7, #15]
 8005838:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800583a:	7bfa      	ldrb	r2, [r7, #15]
 800583c:	6879      	ldr	r1, [r7, #4]
 800583e:	4613      	mov	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4413      	add	r3, r2
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	440b      	add	r3, r1
 8005848:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800584c:	2200      	movs	r2, #0
 800584e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005850:	7bfa      	ldrb	r2, [r7, #15]
 8005852:	6879      	ldr	r1, [r7, #4]
 8005854:	4613      	mov	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	440b      	add	r3, r1
 800585e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8005862:	2200      	movs	r2, #0
 8005864:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005866:	7bfa      	ldrb	r2, [r7, #15]
 8005868:	6879      	ldr	r1, [r7, #4]
 800586a:	4613      	mov	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	440b      	add	r3, r1
 8005874:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005878:	2200      	movs	r2, #0
 800587a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800587c:	7bfa      	ldrb	r2, [r7, #15]
 800587e:	6879      	ldr	r1, [r7, #4]
 8005880:	4613      	mov	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	440b      	add	r3, r1
 800588a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005892:	7bfb      	ldrb	r3, [r7, #15]
 8005894:	3301      	adds	r3, #1
 8005896:	73fb      	strb	r3, [r7, #15]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	791b      	ldrb	r3, [r3, #4]
 800589c:	7bfa      	ldrb	r2, [r7, #15]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d3b5      	bcc.n	800580e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6818      	ldr	r0, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3304      	adds	r3, #4
 80058aa:	e893 0006 	ldmia.w	r3, {r1, r2}
 80058ae:	f004 fc2f 	bl	800a110 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	7a9b      	ldrb	r3, [r3, #10]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d102      	bne.n	80058ce <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f001 fa5a 	bl	8006d82 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f005 fff6 	bl	800b8d6 <USB_ReadInterrupts>
 80058ea:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f983 	bl	8005c02 <PCD_EP_ISR_Handler>

    return;
 80058fc:	e110      	b.n	8005b20 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005904:	2b00      	cmp	r3, #0
 8005906:	d013      	beq.n	8005930 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005910:	b29a      	uxth	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800591a:	b292      	uxth	r2, r2
 800591c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 f92c 	bl	8005b7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005926:	2100      	movs	r1, #0
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f946 	bl	8005bba <HAL_PCD_SetAddress>

    return;
 800592e:	e0f7      	b.n	8005b20 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00c      	beq.n	8005954 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005942:	b29a      	uxth	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800594c:	b292      	uxth	r2, r2
 800594e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005952:	e0e5      	b.n	8005b20 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00c      	beq.n	8005978 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005966:	b29a      	uxth	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005970:	b292      	uxth	r2, r2
 8005972:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005976:	e0d3      	b.n	8005b20 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d034      	beq.n	80059ec <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800598a:	b29a      	uxth	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0204 	bic.w	r2, r2, #4
 8005994:	b292      	uxth	r2, r2
 8005996:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0208 	bic.w	r2, r2, #8
 80059ac:	b292      	uxth	r2, r2
 80059ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d107      	bne.n	80059cc <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80059c4:	2100      	movs	r1, #0
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f001 fa05 	bl	8006dd6 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f8ea 	bl	8005ba6 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80059da:	b29a      	uxth	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80059e4:	b292      	uxth	r2, r2
 80059e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80059ea:	e099      	b.n	8005b20 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d027      	beq.n	8005a46 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f042 0208 	orr.w	r2, r2, #8
 8005a08:	b292      	uxth	r2, r2
 8005a0a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a20:	b292      	uxth	r2, r2
 8005a22:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f042 0204 	orr.w	r2, r2, #4
 8005a38:	b292      	uxth	r2, r2
 8005a3a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f8a7 	bl	8005b92 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005a44:	e06c      	b.n	8005b20 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d040      	beq.n	8005ad2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a62:	b292      	uxth	r2, r2
 8005a64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d12b      	bne.n	8005aca <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f042 0204 	orr.w	r2, r2, #4
 8005a84:	b292      	uxth	r2, r2
 8005a86:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f042 0208 	orr.w	r2, r2, #8
 8005a9c:	b292      	uxth	r2, r2
 8005a9e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	089b      	lsrs	r3, r3, #2
 8005ab6:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f001 f987 	bl	8006dd6 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005ac8:	e02a      	b.n	8005b20 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f861 	bl	8005b92 <HAL_PCD_SuspendCallback>
    return;
 8005ad0:	e026      	b.n	8005b20 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00f      	beq.n	8005afc <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005aee:	b292      	uxth	r2, r2
 8005af0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f838 	bl	8005b6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005afa:	e011      	b.n	8005b20 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00c      	beq.n	8005b20 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b18:	b292      	uxth	r2, r2
 8005b1a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005b1e:	bf00      	nop
  }
}
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b083      	sub	sp, #12
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	460b      	mov	r3, r1
 8005b30:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b083      	sub	sp, #12
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	460b      	mov	r3, r1
 8005b48:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8005b5e:	bf00      	nop
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b083      	sub	sp, #12
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8005b9a:	bf00      	nop
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b083      	sub	sp, #12
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8005bae:	bf00      	nop
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b082      	sub	sp, #8
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d101      	bne.n	8005bd4 <HAL_PCD_SetAddress+0x1a>
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	e012      	b.n	8005bfa <HAL_PCD_SetAddress+0x40>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	78fa      	ldrb	r2, [r7, #3]
 8005be0:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	78fa      	ldrb	r2, [r7, #3]
 8005be8:	4611      	mov	r1, r2
 8005bea:	4618      	mov	r0, r3
 8005bec:	f005 fe5f 	bl	800b8ae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b096      	sub	sp, #88	@ 0x58
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005c0a:	e3ad      	b.n	8006368 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c14:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005c18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	f003 030f 	and.w	r3, r3, #15
 8005c22:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8005c26:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f040 816f 	bne.w	8005f0e <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005c30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d14c      	bne.n	8005cd6 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	881b      	ldrh	r3, [r3, #0]
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005c48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c4c:	81fb      	strh	r3, [r7, #14]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	89fb      	ldrh	r3, [r7, #14]
 8005c54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3310      	adds	r3, #16
 8005c64:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	461a      	mov	r2, r3
 8005c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	4413      	add	r3, r2
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6812      	ldr	r2, [r2, #0]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c8c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c90:	695a      	ldr	r2, [r3, #20]
 8005c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	441a      	add	r2, r3
 8005c98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c9a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7ff ff4d 	bl	8005b3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	7b1b      	ldrb	r3, [r3, #12]
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 835c 	beq.w	8006368 <PCD_EP_ISR_Handler+0x766>
 8005cb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f040 8357 	bne.w	8006368 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	7b1b      	ldrb	r3, [r3, #12]
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	731a      	strb	r2, [r3, #12]
 8005cd4:	e348      	b.n	8006368 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005cdc:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005ce8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005cec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d032      	beq.n	8005d5a <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	461a      	mov	r2, r3
 8005d00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	00db      	lsls	r3, r3, #3
 8005d06:	4413      	add	r3, r2
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	6812      	ldr	r2, [r2, #0]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005d12:	881b      	ldrh	r3, [r3, #0]
 8005d14:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005d18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d1a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6818      	ldr	r0, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8005d26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d28:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d2c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	f005 fe23 	bl	800b97a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005d40:	4013      	ands	r3, r2
 8005d42:	823b      	strh	r3, [r7, #16]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	8a3a      	ldrh	r2, [r7, #16]
 8005d4a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d4e:	b292      	uxth	r2, r2
 8005d50:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7ff feff 	bl	8005b56 <HAL_PCD_SetupStageCallback>
 8005d58:	e306      	b.n	8006368 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005d5a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f280 8302 	bge.w	8006368 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005d70:	4013      	ands	r3, r2
 8005d72:	83fb      	strh	r3, [r7, #30]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	8bfa      	ldrh	r2, [r7, #30]
 8005d7a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d7e:	b292      	uxth	r2, r2
 8005d80:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	4413      	add	r3, r2
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6812      	ldr	r2, [r2, #0]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005da8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005daa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d019      	beq.n	8005de6 <PCD_EP_ISR_Handler+0x1e4>
 8005db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d015      	beq.n	8005de6 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6818      	ldr	r0, [r3, #0]
 8005dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dc0:	6959      	ldr	r1, [r3, #20]
 8005dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dc4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dc8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	f005 fdd5 	bl	800b97a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005dd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dd2:	695a      	ldr	r2, [r3, #20]
 8005dd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dd6:	69db      	ldr	r3, [r3, #28]
 8005dd8:	441a      	add	r2, r3
 8005dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ddc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005dde:	2100      	movs	r1, #0
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7ff fea0 	bl	8005b26 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005df0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005df4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f040 82b5 	bne.w	8006368 <PCD_EP_ISR_Handler+0x766>
 8005dfe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005e02:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005e06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e0a:	f000 82ad 	beq.w	8006368 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	61bb      	str	r3, [r7, #24]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	461a      	mov	r2, r3
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	4413      	add	r3, r2
 8005e24:	61bb      	str	r3, [r7, #24]
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005e2c:	617b      	str	r3, [r7, #20]
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	881b      	ldrh	r3, [r3, #0]
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	801a      	strh	r2, [r3, #0]
 8005e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e44:	d91d      	bls.n	8005e82 <PCD_EP_ISR_Handler+0x280>
 8005e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	095b      	lsrs	r3, r3, #5
 8005e4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f003 031f 	and.w	r3, r3, #31
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d102      	bne.n	8005e60 <PCD_EP_ISR_Handler+0x25e>
 8005e5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	029b      	lsls	r3, r3, #10
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	801a      	strh	r2, [r3, #0]
 8005e80:	e026      	b.n	8005ed0 <PCD_EP_ISR_Handler+0x2ce>
 8005e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10a      	bne.n	8005ea0 <PCD_EP_ISR_Handler+0x29e>
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	801a      	strh	r2, [r3, #0]
 8005e9e:	e017      	b.n	8005ed0 <PCD_EP_ISR_Handler+0x2ce>
 8005ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	085b      	lsrs	r3, r3, #1
 8005ea6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <PCD_EP_ISR_Handler+0x2b8>
 8005eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	029b      	lsls	r3, r3, #10
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005edc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ee0:	827b      	strh	r3, [r7, #18]
 8005ee2:	8a7b      	ldrh	r3, [r7, #18]
 8005ee4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005ee8:	827b      	strh	r3, [r7, #18]
 8005eea:	8a7b      	ldrh	r3, [r7, #18]
 8005eec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005ef0:	827b      	strh	r3, [r7, #18]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	8a7b      	ldrh	r3, [r7, #18]
 8005ef8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005efc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	8013      	strh	r3, [r2, #0]
 8005f0c:	e22c      	b.n	8006368 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	461a      	mov	r2, r3
 8005f14:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005f22:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f280 80f6 	bge.w	8006118 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	461a      	mov	r2, r3
 8005f32:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4413      	add	r3, r2
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005f42:	4013      	ands	r3, r2
 8005f44:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8005f5a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005f5e:	b292      	uxth	r2, r2
 8005f60:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005f62:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005f66:	4613      	mov	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	4413      	add	r3, r2
 8005f76:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005f78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f7a:	7b1b      	ldrb	r3, [r3, #12]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d123      	bne.n	8005fc8 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	4413      	add	r3, r2
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6812      	ldr	r2, [r2, #0]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fa4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8005fa8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 808e 	beq.w	80060ce <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6818      	ldr	r0, [r3, #0]
 8005fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fb8:	6959      	ldr	r1, [r3, #20]
 8005fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fbc:	88da      	ldrh	r2, [r3, #6]
 8005fbe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005fc2:	f005 fcda 	bl	800b97a <USB_ReadPMA>
 8005fc6:	e082      	b.n	80060ce <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005fc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fca:	78db      	ldrb	r3, [r3, #3]
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d10a      	bne.n	8005fe6 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005fd0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f9d3 	bl	8006384 <HAL_PCD_EP_DB_Receive>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8005fe4:	e073      	b.n	80060ce <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4413      	add	r3, r2
 8005ff4:	881b      	ldrh	r3, [r3, #0]
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ffc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006000:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	461a      	mov	r2, r3
 800600a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	441a      	add	r2, r3
 8006012:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8006016:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800601a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800601e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006022:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006026:	b29b      	uxth	r3, r3
 8006028:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	461a      	mov	r2, r3
 8006030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	b29b      	uxth	r3, r3
 800603c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d022      	beq.n	800608a <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800604c:	b29b      	uxth	r3, r3
 800604e:	461a      	mov	r2, r3
 8006050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	4413      	add	r3, r2
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	6812      	ldr	r2, [r2, #0]
 800605c:	4413      	add	r3, r2
 800605e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006068:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800606c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006070:	2b00      	cmp	r3, #0
 8006072:	d02c      	beq.n	80060ce <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6818      	ldr	r0, [r3, #0]
 8006078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800607a:	6959      	ldr	r1, [r3, #20]
 800607c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800607e:	891a      	ldrh	r2, [r3, #8]
 8006080:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006084:	f005 fc79 	bl	800b97a <USB_ReadPMA>
 8006088:	e021      	b.n	80060ce <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006092:	b29b      	uxth	r3, r3
 8006094:	461a      	mov	r2, r3
 8006096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	4413      	add	r3, r2
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	6812      	ldr	r2, [r2, #0]
 80060a2:	4413      	add	r3, r2
 80060a4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060ae:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80060b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d009      	beq.n	80060ce <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6818      	ldr	r0, [r3, #0]
 80060be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060c0:	6959      	ldr	r1, [r3, #20]
 80060c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060c4:	895a      	ldrh	r2, [r3, #10]
 80060c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80060ca:	f005 fc56 	bl	800b97a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80060ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060d0:	69da      	ldr	r2, [r3, #28]
 80060d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80060d6:	441a      	add	r2, r3
 80060d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060da:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80060dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060de:	695a      	ldr	r2, [r3, #20]
 80060e0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80060e4:	441a      	add	r2, r3
 80060e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060e8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80060ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d005      	beq.n	80060fe <PCD_EP_ISR_Handler+0x4fc>
 80060f2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80060f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d206      	bcs.n	800610c <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80060fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	4619      	mov	r1, r3
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f7ff fd0e 	bl	8005b26 <HAL_PCD_DataOutStageCallback>
 800610a:	e005      	b.n	8006118 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006112:	4618      	mov	r0, r3
 8006114:	f004 f81a 	bl	800a14c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006118:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800611c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006120:	2b00      	cmp	r3, #0
 8006122:	f000 8121 	beq.w	8006368 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8006126:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800612a:	4613      	mov	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	3310      	adds	r3, #16
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	4413      	add	r3, r2
 8006138:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4413      	add	r3, r2
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	b29b      	uxth	r3, r3
 800614c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006150:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006154:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	461a      	mov	r2, r3
 800615e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	441a      	add	r2, r3
 8006166:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800616a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800616e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006172:	b29b      	uxth	r3, r3
 8006174:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006178:	78db      	ldrb	r3, [r3, #3]
 800617a:	2b01      	cmp	r3, #1
 800617c:	f040 80a2 	bne.w	80062c4 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8006180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006182:	2200      	movs	r2, #0
 8006184:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006186:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006188:	7b1b      	ldrb	r3, [r3, #12]
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 8093 	beq.w	80062b6 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006190:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006198:	2b00      	cmp	r3, #0
 800619a:	d046      	beq.n	800622a <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800619c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800619e:	785b      	ldrb	r3, [r3, #1]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d126      	bne.n	80061f2 <PCD_EP_ISR_Handler+0x5f0>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	461a      	mov	r2, r3
 80061b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b8:	4413      	add	r3, r2
 80061ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80061bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	00da      	lsls	r2, r3, #3
 80061c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c4:	4413      	add	r3, r2
 80061c6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80061ca:	623b      	str	r3, [r7, #32]
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	801a      	strh	r2, [r3, #0]
 80061dc:	6a3b      	ldr	r3, [r7, #32]
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	801a      	strh	r2, [r3, #0]
 80061f0:	e061      	b.n	80062b6 <PCD_EP_ISR_Handler+0x6b4>
 80061f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061f4:	785b      	ldrb	r3, [r3, #1]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d15d      	bne.n	80062b6 <PCD_EP_ISR_Handler+0x6b4>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006208:	b29b      	uxth	r3, r3
 800620a:	461a      	mov	r2, r3
 800620c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620e:	4413      	add	r3, r2
 8006210:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	00da      	lsls	r2, r3, #3
 8006218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621a:	4413      	add	r3, r2
 800621c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006220:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006224:	2200      	movs	r2, #0
 8006226:	801a      	strh	r2, [r3, #0]
 8006228:	e045      	b.n	80062b6 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006232:	785b      	ldrb	r3, [r3, #1]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d126      	bne.n	8006286 <PCD_EP_ISR_Handler+0x684>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	637b      	str	r3, [r7, #52]	@ 0x34
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006246:	b29b      	uxth	r3, r3
 8006248:	461a      	mov	r2, r3
 800624a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800624c:	4413      	add	r3, r2
 800624e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	00da      	lsls	r2, r3, #3
 8006256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006258:	4413      	add	r3, r2
 800625a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800625e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	b29b      	uxth	r3, r3
 8006266:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800626a:	b29a      	uxth	r2, r3
 800626c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626e:	801a      	strh	r2, [r3, #0]
 8006270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006272:	881b      	ldrh	r3, [r3, #0]
 8006274:	b29b      	uxth	r3, r3
 8006276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800627a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800627e:	b29a      	uxth	r2, r3
 8006280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006282:	801a      	strh	r2, [r3, #0]
 8006284:	e017      	b.n	80062b6 <PCD_EP_ISR_Handler+0x6b4>
 8006286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006288:	785b      	ldrb	r3, [r3, #1]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d113      	bne.n	80062b6 <PCD_EP_ISR_Handler+0x6b4>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006296:	b29b      	uxth	r3, r3
 8006298:	461a      	mov	r2, r3
 800629a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800629c:	4413      	add	r3, r2
 800629e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	00da      	lsls	r2, r3, #3
 80062a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062a8:	4413      	add	r3, r2
 80062aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80062ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b2:	2200      	movs	r2, #0
 80062b4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80062b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	4619      	mov	r1, r3
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7ff fc3e 	bl	8005b3e <HAL_PCD_DataInStageCallback>
 80062c2:	e051      	b.n	8006368 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80062c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80062c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d144      	bne.n	800635a <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062d8:	b29b      	uxth	r3, r3
 80062da:	461a      	mov	r2, r3
 80062dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	4413      	add	r3, r2
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	6812      	ldr	r2, [r2, #0]
 80062e8:	4413      	add	r3, r2
 80062ea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062f4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80062f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062fa:	699a      	ldr	r2, [r3, #24]
 80062fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006300:	429a      	cmp	r2, r3
 8006302:	d907      	bls.n	8006314 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8006304:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006306:	699a      	ldr	r2, [r3, #24]
 8006308:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800630c:	1ad2      	subs	r2, r2, r3
 800630e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006310:	619a      	str	r2, [r3, #24]
 8006312:	e002      	b.n	800631a <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8006314:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006316:	2200      	movs	r2, #0
 8006318:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800631a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d106      	bne.n	8006330 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006322:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7ff fc08 	bl	8005b3e <HAL_PCD_DataInStageCallback>
 800632e:	e01b      	b.n	8006368 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006332:	695a      	ldr	r2, [r3, #20]
 8006334:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006338:	441a      	add	r2, r3
 800633a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800633c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800633e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006340:	69da      	ldr	r2, [r3, #28]
 8006342:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006346:	441a      	add	r2, r3
 8006348:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800634a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006352:	4618      	mov	r0, r3
 8006354:	f003 fefa 	bl	800a14c <USB_EPStartXfer>
 8006358:	e006      	b.n	8006368 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800635a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800635e:	461a      	mov	r2, r3
 8006360:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f917 	bl	8006596 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006370:	b29b      	uxth	r3, r3
 8006372:	b21b      	sxth	r3, r3
 8006374:	2b00      	cmp	r3, #0
 8006376:	f6ff ac49 	blt.w	8005c0c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3758      	adds	r7, #88	@ 0x58
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b088      	sub	sp, #32
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	4613      	mov	r3, r2
 8006390:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006392:	88fb      	ldrh	r3, [r7, #6]
 8006394:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d07c      	beq.n	8006496 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	461a      	mov	r2, r3
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	00db      	lsls	r3, r3, #3
 80063ae:	4413      	add	r3, r2
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	6812      	ldr	r2, [r2, #0]
 80063b4:	4413      	add	r3, r2
 80063b6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80063ba:	881b      	ldrh	r3, [r3, #0]
 80063bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063c0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	699a      	ldr	r2, [r3, #24]
 80063c6:	8b7b      	ldrh	r3, [r7, #26]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d306      	bcc.n	80063da <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	699a      	ldr	r2, [r3, #24]
 80063d0:	8b7b      	ldrh	r3, [r7, #26]
 80063d2:	1ad2      	subs	r2, r2, r3
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	619a      	str	r2, [r3, #24]
 80063d8:	e002      	b.n	80063e0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	2200      	movs	r2, #0
 80063de:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d123      	bne.n	8006430 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	461a      	mov	r2, r3
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4413      	add	r3, r2
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006402:	833b      	strh	r3, [r7, #24]
 8006404:	8b3b      	ldrh	r3, [r7, #24]
 8006406:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800640a:	833b      	strh	r3, [r7, #24]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	461a      	mov	r2, r3
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	441a      	add	r2, r3
 800641a:	8b3b      	ldrh	r3, [r7, #24]
 800641c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006420:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006424:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006428:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800642c:	b29b      	uxth	r3, r3
 800642e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006430:	88fb      	ldrh	r3, [r7, #6]
 8006432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006436:	2b00      	cmp	r3, #0
 8006438:	d01f      	beq.n	800647a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	b29b      	uxth	r3, r3
 800644c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006450:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006454:	82fb      	strh	r3, [r7, #22]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	461a      	mov	r2, r3
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	441a      	add	r2, r3
 8006464:	8afb      	ldrh	r3, [r7, #22]
 8006466:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800646a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800646e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006472:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006476:	b29b      	uxth	r3, r3
 8006478:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800647a:	8b7b      	ldrh	r3, [r7, #26]
 800647c:	2b00      	cmp	r3, #0
 800647e:	f000 8085 	beq.w	800658c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6818      	ldr	r0, [r3, #0]
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	6959      	ldr	r1, [r3, #20]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	891a      	ldrh	r2, [r3, #8]
 800648e:	8b7b      	ldrh	r3, [r7, #26]
 8006490:	f005 fa73 	bl	800b97a <USB_ReadPMA>
 8006494:	e07a      	b.n	800658c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800649e:	b29b      	uxth	r3, r3
 80064a0:	461a      	mov	r2, r3
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	00db      	lsls	r3, r3, #3
 80064a8:	4413      	add	r3, r2
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	6812      	ldr	r2, [r2, #0]
 80064ae:	4413      	add	r3, r2
 80064b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80064b4:	881b      	ldrh	r3, [r3, #0]
 80064b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064ba:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	699a      	ldr	r2, [r3, #24]
 80064c0:	8b7b      	ldrh	r3, [r7, #26]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d306      	bcc.n	80064d4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	699a      	ldr	r2, [r3, #24]
 80064ca:	8b7b      	ldrh	r3, [r7, #26]
 80064cc:	1ad2      	subs	r2, r2, r3
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	619a      	str	r2, [r3, #24]
 80064d2:	e002      	b.n	80064da <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2200      	movs	r2, #0
 80064d8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d123      	bne.n	800652a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064fc:	83fb      	strh	r3, [r7, #30]
 80064fe:	8bfb      	ldrh	r3, [r7, #30]
 8006500:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006504:	83fb      	strh	r3, [r7, #30]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	461a      	mov	r2, r3
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	441a      	add	r2, r3
 8006514:	8bfb      	ldrh	r3, [r7, #30]
 8006516:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800651a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800651e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006526:	b29b      	uxth	r3, r3
 8006528:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800652a:	88fb      	ldrh	r3, [r7, #6]
 800652c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006530:	2b00      	cmp	r3, #0
 8006532:	d11f      	bne.n	8006574 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	461a      	mov	r2, r3
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	b29b      	uxth	r3, r3
 8006546:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800654a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800654e:	83bb      	strh	r3, [r7, #28]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	461a      	mov	r2, r3
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	441a      	add	r2, r3
 800655e:	8bbb      	ldrh	r3, [r7, #28]
 8006560:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006564:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006568:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800656c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006570:	b29b      	uxth	r3, r3
 8006572:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006574:	8b7b      	ldrh	r3, [r7, #26]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d008      	beq.n	800658c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	6959      	ldr	r1, [r3, #20]
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	895a      	ldrh	r2, [r3, #10]
 8006586:	8b7b      	ldrh	r3, [r7, #26]
 8006588:	f005 f9f7 	bl	800b97a <USB_ReadPMA>
    }
  }

  return count;
 800658c:	8b7b      	ldrh	r3, [r7, #26]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3720      	adds	r7, #32
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b0a4      	sub	sp, #144	@ 0x90
 800659a:	af00      	add	r7, sp, #0
 800659c:	60f8      	str	r0, [r7, #12]
 800659e:	60b9      	str	r1, [r7, #8]
 80065a0:	4613      	mov	r3, r2
 80065a2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80065a4:	88fb      	ldrh	r3, [r7, #6]
 80065a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 81db 	beq.w	8006966 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	461a      	mov	r2, r3
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	00db      	lsls	r3, r3, #3
 80065c2:	4413      	add	r3, r2
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	6812      	ldr	r2, [r2, #0]
 80065c8:	4413      	add	r3, r2
 80065ca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065d4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	699a      	ldr	r2, [r3, #24]
 80065dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d907      	bls.n	80065f4 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	699a      	ldr	r2, [r3, #24]
 80065e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80065ec:	1ad2      	subs	r2, r2, r3
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	619a      	str	r2, [r3, #24]
 80065f2:	e002      	b.n	80065fa <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2200      	movs	r2, #0
 80065f8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f040 80b9 	bne.w	8006776 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	785b      	ldrb	r3, [r3, #1]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d126      	bne.n	800665a <HAL_PCD_EP_DB_Transmit+0xc4>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800661a:	b29b      	uxth	r3, r3
 800661c:	461a      	mov	r2, r3
 800661e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006620:	4413      	add	r3, r2
 8006622:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	00da      	lsls	r2, r3, #3
 800662a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800662c:	4413      	add	r3, r2
 800662e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006632:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	b29b      	uxth	r3, r3
 800663a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800663e:	b29a      	uxth	r2, r3
 8006640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006642:	801a      	strh	r2, [r3, #0]
 8006644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	b29b      	uxth	r3, r3
 800664a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800664e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006652:	b29a      	uxth	r2, r3
 8006654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006656:	801a      	strh	r2, [r3, #0]
 8006658:	e01a      	b.n	8006690 <HAL_PCD_EP_DB_Transmit+0xfa>
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	785b      	ldrb	r3, [r3, #1]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d116      	bne.n	8006690 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	637b      	str	r3, [r7, #52]	@ 0x34
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006670:	b29b      	uxth	r3, r3
 8006672:	461a      	mov	r2, r3
 8006674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006676:	4413      	add	r3, r2
 8006678:	637b      	str	r3, [r7, #52]	@ 0x34
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	00da      	lsls	r2, r3, #3
 8006680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006682:	4413      	add	r3, r2
 8006684:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006688:	633b      	str	r3, [r7, #48]	@ 0x30
 800668a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668c:	2200      	movs	r2, #0
 800668e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	627b      	str	r3, [r7, #36]	@ 0x24
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	785b      	ldrb	r3, [r3, #1]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d126      	bne.n	80066ec <HAL_PCD_EP_DB_Transmit+0x156>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	61fb      	str	r3, [r7, #28]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	461a      	mov	r2, r3
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	4413      	add	r3, r2
 80066b4:	61fb      	str	r3, [r7, #28]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	00da      	lsls	r2, r3, #3
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	4413      	add	r3, r2
 80066c0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80066c4:	61bb      	str	r3, [r7, #24]
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	801a      	strh	r2, [r3, #0]
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	b29b      	uxth	r3, r3
 80066dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	801a      	strh	r2, [r3, #0]
 80066ea:	e017      	b.n	800671c <HAL_PCD_EP_DB_Transmit+0x186>
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	785b      	ldrb	r3, [r3, #1]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d113      	bne.n	800671c <HAL_PCD_EP_DB_Transmit+0x186>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	461a      	mov	r2, r3
 8006700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006702:	4413      	add	r3, r2
 8006704:	627b      	str	r3, [r7, #36]	@ 0x24
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	00da      	lsls	r2, r3, #3
 800670c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670e:	4413      	add	r3, r2
 8006710:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006714:	623b      	str	r3, [r7, #32]
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	2200      	movs	r2, #0
 800671a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	4619      	mov	r1, r3
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f7ff fa0b 	bl	8005b3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006728:	88fb      	ldrh	r3, [r7, #6]
 800672a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 82fa 	beq.w	8006d28 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	461a      	mov	r2, r3
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	b29b      	uxth	r3, r3
 8006746:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800674a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800674e:	82fb      	strh	r3, [r7, #22]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	461a      	mov	r2, r3
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	441a      	add	r2, r3
 800675e:	8afb      	ldrh	r3, [r7, #22]
 8006760:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006764:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006768:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800676c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006770:	b29b      	uxth	r3, r3
 8006772:	8013      	strh	r3, [r2, #0]
 8006774:	e2d8      	b.n	8006d28 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006776:	88fb      	ldrh	r3, [r7, #6]
 8006778:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d021      	beq.n	80067c4 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	461a      	mov	r2, r3
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	b29b      	uxth	r3, r3
 8006792:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800679a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	461a      	mov	r2, r3
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	441a      	add	r2, r3
 80067ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80067b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80067bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	f040 82ac 	bne.w	8006d28 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	695a      	ldr	r2, [r3, #20]
 80067d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80067d8:	441a      	add	r2, r3
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	69da      	ldr	r2, [r3, #28]
 80067e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80067e6:	441a      	add	r2, r3
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	6a1a      	ldr	r2, [r3, #32]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d30b      	bcc.n	8006810 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	6a1a      	ldr	r2, [r3, #32]
 8006804:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006808:	1ad2      	subs	r2, r2, r3
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	621a      	str	r2, [r3, #32]
 800680e:	e017      	b.n	8006840 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d108      	bne.n	800682a <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8006818:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800681c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006828:	e00a      	b.n	8006840 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	2200      	movs	r2, #0
 800683e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	785b      	ldrb	r3, [r3, #1]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d165      	bne.n	8006914 <HAL_PCD_EP_DB_Transmit+0x37e>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006856:	b29b      	uxth	r3, r3
 8006858:	461a      	mov	r2, r3
 800685a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800685c:	4413      	add	r3, r2
 800685e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	00da      	lsls	r2, r3, #3
 8006866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006868:	4413      	add	r3, r2
 800686a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800686e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	b29b      	uxth	r3, r3
 8006876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800687a:	b29a      	uxth	r2, r3
 800687c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800687e:	801a      	strh	r2, [r3, #0]
 8006880:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006884:	2b3e      	cmp	r3, #62	@ 0x3e
 8006886:	d91d      	bls.n	80068c4 <HAL_PCD_EP_DB_Transmit+0x32e>
 8006888:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800688c:	095b      	lsrs	r3, r3, #5
 800688e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006890:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006894:	f003 031f 	and.w	r3, r3, #31
 8006898:	2b00      	cmp	r3, #0
 800689a:	d102      	bne.n	80068a2 <HAL_PCD_EP_DB_Transmit+0x30c>
 800689c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800689e:	3b01      	subs	r3, #1
 80068a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	029b      	lsls	r3, r3, #10
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	4313      	orrs	r3, r2
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068bc:	b29a      	uxth	r2, r3
 80068be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c0:	801a      	strh	r2, [r3, #0]
 80068c2:	e044      	b.n	800694e <HAL_PCD_EP_DB_Transmit+0x3b8>
 80068c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10a      	bne.n	80068e2 <HAL_PCD_EP_DB_Transmit+0x34c>
 80068cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ce:	881b      	ldrh	r3, [r3, #0]
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068da:	b29a      	uxth	r2, r3
 80068dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068de:	801a      	strh	r2, [r3, #0]
 80068e0:	e035      	b.n	800694e <HAL_PCD_EP_DB_Transmit+0x3b8>
 80068e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068e6:	085b      	lsrs	r3, r3, #1
 80068e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d002      	beq.n	80068fc <HAL_PCD_EP_DB_Transmit+0x366>
 80068f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068f8:	3301      	adds	r3, #1
 80068fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	b29a      	uxth	r2, r3
 8006902:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006904:	b29b      	uxth	r3, r3
 8006906:	029b      	lsls	r3, r3, #10
 8006908:	b29b      	uxth	r3, r3
 800690a:	4313      	orrs	r3, r2
 800690c:	b29a      	uxth	r2, r3
 800690e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006910:	801a      	strh	r2, [r3, #0]
 8006912:	e01c      	b.n	800694e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	785b      	ldrb	r3, [r3, #1]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d118      	bne.n	800694e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	647b      	str	r3, [r7, #68]	@ 0x44
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800692a:	b29b      	uxth	r3, r3
 800692c:	461a      	mov	r2, r3
 800692e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006930:	4413      	add	r3, r2
 8006932:	647b      	str	r3, [r7, #68]	@ 0x44
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	00da      	lsls	r2, r3, #3
 800693a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800693c:	4413      	add	r3, r2
 800693e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006942:	643b      	str	r3, [r7, #64]	@ 0x40
 8006944:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006948:	b29a      	uxth	r2, r3
 800694a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800694c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6818      	ldr	r0, [r3, #0]
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	6959      	ldr	r1, [r3, #20]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	891a      	ldrh	r2, [r3, #8]
 800695a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800695e:	b29b      	uxth	r3, r3
 8006960:	f004 ffc9 	bl	800b8f6 <USB_WritePMA>
 8006964:	e1e0      	b.n	8006d28 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800696e:	b29b      	uxth	r3, r3
 8006970:	461a      	mov	r2, r3
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	4413      	add	r3, r2
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	6812      	ldr	r2, [r2, #0]
 800697e:	4413      	add	r3, r2
 8006980:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006984:	881b      	ldrh	r3, [r3, #0]
 8006986:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800698a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	699a      	ldr	r2, [r3, #24]
 8006992:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006996:	429a      	cmp	r2, r3
 8006998:	d307      	bcc.n	80069aa <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	699a      	ldr	r2, [r3, #24]
 800699e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80069a2:	1ad2      	subs	r2, r2, r3
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	619a      	str	r2, [r3, #24]
 80069a8:	e002      	b.n	80069b0 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	2200      	movs	r2, #0
 80069ae:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f040 80c0 	bne.w	8006b3a <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	785b      	ldrb	r3, [r3, #1]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d126      	bne.n	8006a10 <HAL_PCD_EP_DB_Transmit+0x47a>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	461a      	mov	r2, r3
 80069d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80069d6:	4413      	add	r3, r2
 80069d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	00da      	lsls	r2, r3, #3
 80069e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80069e2:	4413      	add	r3, r2
 80069e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80069e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80069ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069ec:	881b      	ldrh	r3, [r3, #0]
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069f8:	801a      	strh	r2, [r3, #0]
 80069fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069fc:	881b      	ldrh	r3, [r3, #0]
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a0c:	801a      	strh	r2, [r3, #0]
 8006a0e:	e01a      	b.n	8006a46 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	785b      	ldrb	r3, [r3, #1]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d116      	bne.n	8006a46 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	461a      	mov	r2, r3
 8006a2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a2c:	4413      	add	r3, r2
 8006a2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	00da      	lsls	r2, r3, #3
 8006a36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a38:	4413      	add	r3, r2
 8006a3a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006a3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a42:	2200      	movs	r2, #0
 8006a44:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	677b      	str	r3, [r7, #116]	@ 0x74
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	785b      	ldrb	r3, [r3, #1]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d12b      	bne.n	8006aac <HAL_PCD_EP_DB_Transmit+0x516>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	461a      	mov	r2, r3
 8006a66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a68:	4413      	add	r3, r2
 8006a6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	00da      	lsls	r2, r3, #3
 8006a72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a74:	4413      	add	r3, r2
 8006a76:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a82:	881b      	ldrh	r3, [r3, #0]
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a90:	801a      	strh	r2, [r3, #0]
 8006a92:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a96:	881b      	ldrh	r3, [r3, #0]
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006aa8:	801a      	strh	r2, [r3, #0]
 8006aaa:	e017      	b.n	8006adc <HAL_PCD_EP_DB_Transmit+0x546>
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	785b      	ldrb	r3, [r3, #1]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d113      	bne.n	8006adc <HAL_PCD_EP_DB_Transmit+0x546>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	461a      	mov	r2, r3
 8006ac0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ac2:	4413      	add	r3, r2
 8006ac4:	677b      	str	r3, [r7, #116]	@ 0x74
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	00da      	lsls	r2, r3, #3
 8006acc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ace:	4413      	add	r3, r2
 8006ad0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006ad4:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ad6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ad8:	2200      	movs	r2, #0
 8006ada:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f7ff f82b 	bl	8005b3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006ae8:	88fb      	ldrh	r3, [r7, #6]
 8006aea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f040 811a 	bne.w	8006d28 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	461a      	mov	r2, r3
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	881b      	ldrh	r3, [r3, #0]
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b0e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	461a      	mov	r2, r3
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	441a      	add	r2, r3
 8006b20:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006b24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	8013      	strh	r3, [r2, #0]
 8006b38:	e0f6      	b.n	8006d28 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006b3a:	88fb      	ldrh	r3, [r7, #6]
 8006b3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d121      	bne.n	8006b88 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	461a      	mov	r2, r3
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b5e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	441a      	add	r2, r3
 8006b70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006b74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	f040 80ca 	bne.w	8006d28 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	695a      	ldr	r2, [r3, #20]
 8006b98:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006b9c:	441a      	add	r2, r3
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	69da      	ldr	r2, [r3, #28]
 8006ba6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006baa:	441a      	add	r2, r3
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	6a1a      	ldr	r2, [r3, #32]
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d30b      	bcc.n	8006bd4 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	6a1a      	ldr	r2, [r3, #32]
 8006bc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bcc:	1ad2      	subs	r2, r2, r3
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	621a      	str	r2, [r3, #32]
 8006bd2:	e017      	b.n	8006c04 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d108      	bne.n	8006bee <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8006bdc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006be0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006bec:	e00a      	b.n	8006c04 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	785b      	ldrb	r3, [r3, #1]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d165      	bne.n	8006cde <HAL_PCD_EP_DB_Transmit+0x748>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	461a      	mov	r2, r3
 8006c24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c26:	4413      	add	r3, r2
 8006c28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	00da      	lsls	r2, r3, #3
 8006c30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c32:	4413      	add	r3, r2
 8006c34:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006c38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c48:	801a      	strh	r2, [r3, #0]
 8006c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c4e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c50:	d91d      	bls.n	8006c8e <HAL_PCD_EP_DB_Transmit+0x6f8>
 8006c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c56:	095b      	lsrs	r3, r3, #5
 8006c58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c5e:	f003 031f 	and.w	r3, r3, #31
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d102      	bne.n	8006c6c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006c66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	029b      	lsls	r3, r3, #10
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c8a:	801a      	strh	r2, [r3, #0]
 8006c8c:	e041      	b.n	8006d12 <HAL_PCD_EP_DB_Transmit+0x77c>
 8006c8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10a      	bne.n	8006cac <HAL_PCD_EP_DB_Transmit+0x716>
 8006c96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ca8:	801a      	strh	r2, [r3, #0]
 8006caa:	e032      	b.n	8006d12 <HAL_PCD_EP_DB_Transmit+0x77c>
 8006cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cb0:	085b      	lsrs	r3, r3, #1
 8006cb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cb8:	f003 0301 	and.w	r3, r3, #1
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d002      	beq.n	8006cc6 <HAL_PCD_EP_DB_Transmit+0x730>
 8006cc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006cc8:	881b      	ldrh	r3, [r3, #0]
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	029b      	lsls	r3, r3, #10
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006cda:	801a      	strh	r2, [r3, #0]
 8006cdc:	e019      	b.n	8006d12 <HAL_PCD_EP_DB_Transmit+0x77c>
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	785b      	ldrb	r3, [r3, #1]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d115      	bne.n	8006d12 <HAL_PCD_EP_DB_Transmit+0x77c>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cf4:	4413      	add	r3, r2
 8006cf6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	00da      	lsls	r2, r3, #3
 8006cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d00:	4413      	add	r3, r2
 8006d02:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d06:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d10:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6818      	ldr	r0, [r3, #0]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	6959      	ldr	r1, [r3, #20]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	895a      	ldrh	r2, [r3, #10]
 8006d1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	f004 fde7 	bl	800b8f6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	881b      	ldrh	r3, [r3, #0]
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d42:	82bb      	strh	r3, [r7, #20]
 8006d44:	8abb      	ldrh	r3, [r7, #20]
 8006d46:	f083 0310 	eor.w	r3, r3, #16
 8006d4a:	82bb      	strh	r3, [r7, #20]
 8006d4c:	8abb      	ldrh	r3, [r7, #20]
 8006d4e:	f083 0320 	eor.w	r3, r3, #32
 8006d52:	82bb      	strh	r3, [r7, #20]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	461a      	mov	r2, r3
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	441a      	add	r2, r3
 8006d62:	8abb      	ldrh	r3, [r7, #20]
 8006d64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3790      	adds	r7, #144	@ 0x90
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b085      	sub	sp, #20
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	f043 0301 	orr.w	r3, r3, #1
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	f043 0302 	orr.w	r3, r3, #2
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b083      	sub	sp, #12
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	460b      	mov	r3, r1
 8006de0:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006de2:	bf00      	nop
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
	...

08006df0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d141      	bne.n	8006e82 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006dfe:	4b4b      	ldr	r3, [pc, #300]	@ (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006e06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e0a:	d131      	bne.n	8006e70 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e0c:	4b47      	ldr	r3, [pc, #284]	@ (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e12:	4a46      	ldr	r2, [pc, #280]	@ (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e1c:	4b43      	ldr	r3, [pc, #268]	@ (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006e24:	4a41      	ldr	r2, [pc, #260]	@ (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006e2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e2c:	4b40      	ldr	r3, [pc, #256]	@ (8006f30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2232      	movs	r2, #50	@ 0x32
 8006e32:	fb02 f303 	mul.w	r3, r2, r3
 8006e36:	4a3f      	ldr	r2, [pc, #252]	@ (8006f34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006e38:	fba2 2303 	umull	r2, r3, r2, r3
 8006e3c:	0c9b      	lsrs	r3, r3, #18
 8006e3e:	3301      	adds	r3, #1
 8006e40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e42:	e002      	b.n	8006e4a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	3b01      	subs	r3, #1
 8006e48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e4a:	4b38      	ldr	r3, [pc, #224]	@ (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e56:	d102      	bne.n	8006e5e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1f2      	bne.n	8006e44 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e5e:	4b33      	ldr	r3, [pc, #204]	@ (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e6a:	d158      	bne.n	8006f1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e057      	b.n	8006f20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e70:	4b2e      	ldr	r3, [pc, #184]	@ (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e76:	4a2d      	ldr	r2, [pc, #180]	@ (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006e80:	e04d      	b.n	8006f1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e88:	d141      	bne.n	8006f0e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e8a:	4b28      	ldr	r3, [pc, #160]	@ (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e96:	d131      	bne.n	8006efc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e98:	4b24      	ldr	r3, [pc, #144]	@ (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e9e:	4a23      	ldr	r2, [pc, #140]	@ (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ea0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ea4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ea8:	4b20      	ldr	r3, [pc, #128]	@ (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006eb0:	4a1e      	ldr	r2, [pc, #120]	@ (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006eb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8006f30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2232      	movs	r2, #50	@ 0x32
 8006ebe:	fb02 f303 	mul.w	r3, r2, r3
 8006ec2:	4a1c      	ldr	r2, [pc, #112]	@ (8006f34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec8:	0c9b      	lsrs	r3, r3, #18
 8006eca:	3301      	adds	r3, #1
 8006ecc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ece:	e002      	b.n	8006ed6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ed6:	4b15      	ldr	r3, [pc, #84]	@ (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ede:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ee2:	d102      	bne.n	8006eea <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1f2      	bne.n	8006ed0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006eea:	4b10      	ldr	r3, [pc, #64]	@ (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ef6:	d112      	bne.n	8006f1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e011      	b.n	8006f20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006efc:	4b0b      	ldr	r3, [pc, #44]	@ (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f02:	4a0a      	ldr	r2, [pc, #40]	@ (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006f0c:	e007      	b.n	8006f1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f0e:	4b07      	ldr	r3, [pc, #28]	@ (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006f16:	4a05      	ldr	r2, [pc, #20]	@ (8006f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f18:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006f1c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	40007000 	.word	0x40007000
 8006f30:	20000000 	.word	0x20000000
 8006f34:	431bde83 	.word	0x431bde83

08006f38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b088      	sub	sp, #32
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e2fe      	b.n	8007548 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d075      	beq.n	8007042 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f56:	4b97      	ldr	r3, [pc, #604]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f003 030c 	and.w	r3, r3, #12
 8006f5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f60:	4b94      	ldr	r3, [pc, #592]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	f003 0303 	and.w	r3, r3, #3
 8006f68:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	2b0c      	cmp	r3, #12
 8006f6e:	d102      	bne.n	8006f76 <HAL_RCC_OscConfig+0x3e>
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	d002      	beq.n	8006f7c <HAL_RCC_OscConfig+0x44>
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	2b08      	cmp	r3, #8
 8006f7a:	d10b      	bne.n	8006f94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f7c:	4b8d      	ldr	r3, [pc, #564]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d05b      	beq.n	8007040 <HAL_RCC_OscConfig+0x108>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d157      	bne.n	8007040 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e2d9      	b.n	8007548 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f9c:	d106      	bne.n	8006fac <HAL_RCC_OscConfig+0x74>
 8006f9e:	4b85      	ldr	r3, [pc, #532]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a84      	ldr	r2, [pc, #528]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 8006fa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fa8:	6013      	str	r3, [r2, #0]
 8006faa:	e01d      	b.n	8006fe8 <HAL_RCC_OscConfig+0xb0>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006fb4:	d10c      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x98>
 8006fb6:	4b7f      	ldr	r3, [pc, #508]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a7e      	ldr	r2, [pc, #504]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 8006fbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006fc0:	6013      	str	r3, [r2, #0]
 8006fc2:	4b7c      	ldr	r3, [pc, #496]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a7b      	ldr	r2, [pc, #492]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 8006fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	e00b      	b.n	8006fe8 <HAL_RCC_OscConfig+0xb0>
 8006fd0:	4b78      	ldr	r3, [pc, #480]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a77      	ldr	r2, [pc, #476]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 8006fd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fda:	6013      	str	r3, [r2, #0]
 8006fdc:	4b75      	ldr	r3, [pc, #468]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a74      	ldr	r2, [pc, #464]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 8006fe2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d013      	beq.n	8007018 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff0:	f7fa fcba 	bl	8001968 <HAL_GetTick>
 8006ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ff6:	e008      	b.n	800700a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ff8:	f7fa fcb6 	bl	8001968 <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	2b64      	cmp	r3, #100	@ 0x64
 8007004:	d901      	bls.n	800700a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e29e      	b.n	8007548 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800700a:	4b6a      	ldr	r3, [pc, #424]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d0f0      	beq.n	8006ff8 <HAL_RCC_OscConfig+0xc0>
 8007016:	e014      	b.n	8007042 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007018:	f7fa fca6 	bl	8001968 <HAL_GetTick>
 800701c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800701e:	e008      	b.n	8007032 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007020:	f7fa fca2 	bl	8001968 <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	2b64      	cmp	r3, #100	@ 0x64
 800702c:	d901      	bls.n	8007032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e28a      	b.n	8007548 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007032:	4b60      	ldr	r3, [pc, #384]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1f0      	bne.n	8007020 <HAL_RCC_OscConfig+0xe8>
 800703e:	e000      	b.n	8007042 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0302 	and.w	r3, r3, #2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d075      	beq.n	800713a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800704e:	4b59      	ldr	r3, [pc, #356]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f003 030c 	and.w	r3, r3, #12
 8007056:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007058:	4b56      	ldr	r3, [pc, #344]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	f003 0303 	and.w	r3, r3, #3
 8007060:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	2b0c      	cmp	r3, #12
 8007066:	d102      	bne.n	800706e <HAL_RCC_OscConfig+0x136>
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	2b02      	cmp	r3, #2
 800706c:	d002      	beq.n	8007074 <HAL_RCC_OscConfig+0x13c>
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	2b04      	cmp	r3, #4
 8007072:	d11f      	bne.n	80070b4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007074:	4b4f      	ldr	r3, [pc, #316]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800707c:	2b00      	cmp	r3, #0
 800707e:	d005      	beq.n	800708c <HAL_RCC_OscConfig+0x154>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d101      	bne.n	800708c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e25d      	b.n	8007548 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800708c:	4b49      	ldr	r3, [pc, #292]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	061b      	lsls	r3, r3, #24
 800709a:	4946      	ldr	r1, [pc, #280]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 800709c:	4313      	orrs	r3, r2
 800709e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80070a0:	4b45      	ldr	r3, [pc, #276]	@ (80071b8 <HAL_RCC_OscConfig+0x280>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7fa fc13 	bl	80018d0 <HAL_InitTick>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d043      	beq.n	8007138 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e249      	b.n	8007548 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d023      	beq.n	8007104 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070bc:	4b3d      	ldr	r3, [pc, #244]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a3c      	ldr	r2, [pc, #240]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 80070c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c8:	f7fa fc4e 	bl	8001968 <HAL_GetTick>
 80070cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070ce:	e008      	b.n	80070e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070d0:	f7fa fc4a 	bl	8001968 <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d901      	bls.n	80070e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e232      	b.n	8007548 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070e2:	4b34      	ldr	r3, [pc, #208]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d0f0      	beq.n	80070d0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070ee:	4b31      	ldr	r3, [pc, #196]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	061b      	lsls	r3, r3, #24
 80070fc:	492d      	ldr	r1, [pc, #180]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	604b      	str	r3, [r1, #4]
 8007102:	e01a      	b.n	800713a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007104:	4b2b      	ldr	r3, [pc, #172]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a2a      	ldr	r2, [pc, #168]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 800710a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800710e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007110:	f7fa fc2a 	bl	8001968 <HAL_GetTick>
 8007114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007116:	e008      	b.n	800712a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007118:	f7fa fc26 	bl	8001968 <HAL_GetTick>
 800711c:	4602      	mov	r2, r0
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	2b02      	cmp	r3, #2
 8007124:	d901      	bls.n	800712a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e20e      	b.n	8007548 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800712a:	4b22      	ldr	r3, [pc, #136]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1f0      	bne.n	8007118 <HAL_RCC_OscConfig+0x1e0>
 8007136:	e000      	b.n	800713a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007138:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0308 	and.w	r3, r3, #8
 8007142:	2b00      	cmp	r3, #0
 8007144:	d041      	beq.n	80071ca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d01c      	beq.n	8007188 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800714e:	4b19      	ldr	r3, [pc, #100]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 8007150:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007154:	4a17      	ldr	r2, [pc, #92]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 8007156:	f043 0301 	orr.w	r3, r3, #1
 800715a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800715e:	f7fa fc03 	bl	8001968 <HAL_GetTick>
 8007162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007164:	e008      	b.n	8007178 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007166:	f7fa fbff 	bl	8001968 <HAL_GetTick>
 800716a:	4602      	mov	r2, r0
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	2b02      	cmp	r3, #2
 8007172:	d901      	bls.n	8007178 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e1e7      	b.n	8007548 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007178:	4b0e      	ldr	r3, [pc, #56]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 800717a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800717e:	f003 0302 	and.w	r3, r3, #2
 8007182:	2b00      	cmp	r3, #0
 8007184:	d0ef      	beq.n	8007166 <HAL_RCC_OscConfig+0x22e>
 8007186:	e020      	b.n	80071ca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007188:	4b0a      	ldr	r3, [pc, #40]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 800718a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800718e:	4a09      	ldr	r2, [pc, #36]	@ (80071b4 <HAL_RCC_OscConfig+0x27c>)
 8007190:	f023 0301 	bic.w	r3, r3, #1
 8007194:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007198:	f7fa fbe6 	bl	8001968 <HAL_GetTick>
 800719c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800719e:	e00d      	b.n	80071bc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071a0:	f7fa fbe2 	bl	8001968 <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d906      	bls.n	80071bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e1ca      	b.n	8007548 <HAL_RCC_OscConfig+0x610>
 80071b2:	bf00      	nop
 80071b4:	40021000 	.word	0x40021000
 80071b8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071bc:	4b8c      	ldr	r3, [pc, #560]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 80071be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071c2:	f003 0302 	and.w	r3, r3, #2
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1ea      	bne.n	80071a0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0304 	and.w	r3, r3, #4
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f000 80a6 	beq.w	8007324 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071d8:	2300      	movs	r3, #0
 80071da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80071dc:	4b84      	ldr	r3, [pc, #528]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 80071de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <HAL_RCC_OscConfig+0x2b4>
 80071e8:	2301      	movs	r3, #1
 80071ea:	e000      	b.n	80071ee <HAL_RCC_OscConfig+0x2b6>
 80071ec:	2300      	movs	r3, #0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00d      	beq.n	800720e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071f2:	4b7f      	ldr	r3, [pc, #508]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 80071f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071f6:	4a7e      	ldr	r2, [pc, #504]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 80071f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80071fe:	4b7c      	ldr	r3, [pc, #496]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 8007200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007206:	60fb      	str	r3, [r7, #12]
 8007208:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800720a:	2301      	movs	r3, #1
 800720c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800720e:	4b79      	ldr	r3, [pc, #484]	@ (80073f4 <HAL_RCC_OscConfig+0x4bc>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007216:	2b00      	cmp	r3, #0
 8007218:	d118      	bne.n	800724c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800721a:	4b76      	ldr	r3, [pc, #472]	@ (80073f4 <HAL_RCC_OscConfig+0x4bc>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a75      	ldr	r2, [pc, #468]	@ (80073f4 <HAL_RCC_OscConfig+0x4bc>)
 8007220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007226:	f7fa fb9f 	bl	8001968 <HAL_GetTick>
 800722a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800722c:	e008      	b.n	8007240 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800722e:	f7fa fb9b 	bl	8001968 <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	2b02      	cmp	r3, #2
 800723a:	d901      	bls.n	8007240 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	e183      	b.n	8007548 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007240:	4b6c      	ldr	r3, [pc, #432]	@ (80073f4 <HAL_RCC_OscConfig+0x4bc>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007248:	2b00      	cmp	r3, #0
 800724a:	d0f0      	beq.n	800722e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d108      	bne.n	8007266 <HAL_RCC_OscConfig+0x32e>
 8007254:	4b66      	ldr	r3, [pc, #408]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 8007256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800725a:	4a65      	ldr	r2, [pc, #404]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 800725c:	f043 0301 	orr.w	r3, r3, #1
 8007260:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007264:	e024      	b.n	80072b0 <HAL_RCC_OscConfig+0x378>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	2b05      	cmp	r3, #5
 800726c:	d110      	bne.n	8007290 <HAL_RCC_OscConfig+0x358>
 800726e:	4b60      	ldr	r3, [pc, #384]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 8007270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007274:	4a5e      	ldr	r2, [pc, #376]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 8007276:	f043 0304 	orr.w	r3, r3, #4
 800727a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800727e:	4b5c      	ldr	r3, [pc, #368]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 8007280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007284:	4a5a      	ldr	r2, [pc, #360]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 8007286:	f043 0301 	orr.w	r3, r3, #1
 800728a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800728e:	e00f      	b.n	80072b0 <HAL_RCC_OscConfig+0x378>
 8007290:	4b57      	ldr	r3, [pc, #348]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 8007292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007296:	4a56      	ldr	r2, [pc, #344]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 8007298:	f023 0301 	bic.w	r3, r3, #1
 800729c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80072a0:	4b53      	ldr	r3, [pc, #332]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 80072a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072a6:	4a52      	ldr	r2, [pc, #328]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 80072a8:	f023 0304 	bic.w	r3, r3, #4
 80072ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d016      	beq.n	80072e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072b8:	f7fa fb56 	bl	8001968 <HAL_GetTick>
 80072bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072be:	e00a      	b.n	80072d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072c0:	f7fa fb52 	bl	8001968 <HAL_GetTick>
 80072c4:	4602      	mov	r2, r0
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d901      	bls.n	80072d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e138      	b.n	8007548 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072d6:	4b46      	ldr	r3, [pc, #280]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 80072d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072dc:	f003 0302 	and.w	r3, r3, #2
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d0ed      	beq.n	80072c0 <HAL_RCC_OscConfig+0x388>
 80072e4:	e015      	b.n	8007312 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072e6:	f7fa fb3f 	bl	8001968 <HAL_GetTick>
 80072ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80072ec:	e00a      	b.n	8007304 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ee:	f7fa fb3b 	bl	8001968 <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d901      	bls.n	8007304 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e121      	b.n	8007548 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007304:	4b3a      	ldr	r3, [pc, #232]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 8007306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1ed      	bne.n	80072ee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007312:	7ffb      	ldrb	r3, [r7, #31]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d105      	bne.n	8007324 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007318:	4b35      	ldr	r3, [pc, #212]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 800731a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800731c:	4a34      	ldr	r2, [pc, #208]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 800731e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007322:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 0320 	and.w	r3, r3, #32
 800732c:	2b00      	cmp	r3, #0
 800732e:	d03c      	beq.n	80073aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d01c      	beq.n	8007372 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007338:	4b2d      	ldr	r3, [pc, #180]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 800733a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800733e:	4a2c      	ldr	r2, [pc, #176]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 8007340:	f043 0301 	orr.w	r3, r3, #1
 8007344:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007348:	f7fa fb0e 	bl	8001968 <HAL_GetTick>
 800734c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800734e:	e008      	b.n	8007362 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007350:	f7fa fb0a 	bl	8001968 <HAL_GetTick>
 8007354:	4602      	mov	r2, r0
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	2b02      	cmp	r3, #2
 800735c:	d901      	bls.n	8007362 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e0f2      	b.n	8007548 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007362:	4b23      	ldr	r3, [pc, #140]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 8007364:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007368:	f003 0302 	and.w	r3, r3, #2
 800736c:	2b00      	cmp	r3, #0
 800736e:	d0ef      	beq.n	8007350 <HAL_RCC_OscConfig+0x418>
 8007370:	e01b      	b.n	80073aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007372:	4b1f      	ldr	r3, [pc, #124]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 8007374:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007378:	4a1d      	ldr	r2, [pc, #116]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 800737a:	f023 0301 	bic.w	r3, r3, #1
 800737e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007382:	f7fa faf1 	bl	8001968 <HAL_GetTick>
 8007386:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007388:	e008      	b.n	800739c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800738a:	f7fa faed 	bl	8001968 <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	2b02      	cmp	r3, #2
 8007396:	d901      	bls.n	800739c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e0d5      	b.n	8007548 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800739c:	4b14      	ldr	r3, [pc, #80]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 800739e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073a2:	f003 0302 	and.w	r3, r3, #2
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1ef      	bne.n	800738a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 80c9 	beq.w	8007546 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80073b4:	4b0e      	ldr	r3, [pc, #56]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f003 030c 	and.w	r3, r3, #12
 80073bc:	2b0c      	cmp	r3, #12
 80073be:	f000 8083 	beq.w	80074c8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d15e      	bne.n	8007488 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073ca:	4b09      	ldr	r3, [pc, #36]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a08      	ldr	r2, [pc, #32]	@ (80073f0 <HAL_RCC_OscConfig+0x4b8>)
 80073d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80073d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073d6:	f7fa fac7 	bl	8001968 <HAL_GetTick>
 80073da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073dc:	e00c      	b.n	80073f8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073de:	f7fa fac3 	bl	8001968 <HAL_GetTick>
 80073e2:	4602      	mov	r2, r0
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d905      	bls.n	80073f8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e0ab      	b.n	8007548 <HAL_RCC_OscConfig+0x610>
 80073f0:	40021000 	.word	0x40021000
 80073f4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073f8:	4b55      	ldr	r3, [pc, #340]	@ (8007550 <HAL_RCC_OscConfig+0x618>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1ec      	bne.n	80073de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007404:	4b52      	ldr	r3, [pc, #328]	@ (8007550 <HAL_RCC_OscConfig+0x618>)
 8007406:	68da      	ldr	r2, [r3, #12]
 8007408:	4b52      	ldr	r3, [pc, #328]	@ (8007554 <HAL_RCC_OscConfig+0x61c>)
 800740a:	4013      	ands	r3, r2
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	6a11      	ldr	r1, [r2, #32]
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007414:	3a01      	subs	r2, #1
 8007416:	0112      	lsls	r2, r2, #4
 8007418:	4311      	orrs	r1, r2
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800741e:	0212      	lsls	r2, r2, #8
 8007420:	4311      	orrs	r1, r2
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007426:	0852      	lsrs	r2, r2, #1
 8007428:	3a01      	subs	r2, #1
 800742a:	0552      	lsls	r2, r2, #21
 800742c:	4311      	orrs	r1, r2
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007432:	0852      	lsrs	r2, r2, #1
 8007434:	3a01      	subs	r2, #1
 8007436:	0652      	lsls	r2, r2, #25
 8007438:	4311      	orrs	r1, r2
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800743e:	06d2      	lsls	r2, r2, #27
 8007440:	430a      	orrs	r2, r1
 8007442:	4943      	ldr	r1, [pc, #268]	@ (8007550 <HAL_RCC_OscConfig+0x618>)
 8007444:	4313      	orrs	r3, r2
 8007446:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007448:	4b41      	ldr	r3, [pc, #260]	@ (8007550 <HAL_RCC_OscConfig+0x618>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a40      	ldr	r2, [pc, #256]	@ (8007550 <HAL_RCC_OscConfig+0x618>)
 800744e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007452:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007454:	4b3e      	ldr	r3, [pc, #248]	@ (8007550 <HAL_RCC_OscConfig+0x618>)
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	4a3d      	ldr	r2, [pc, #244]	@ (8007550 <HAL_RCC_OscConfig+0x618>)
 800745a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800745e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007460:	f7fa fa82 	bl	8001968 <HAL_GetTick>
 8007464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007466:	e008      	b.n	800747a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007468:	f7fa fa7e 	bl	8001968 <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	2b02      	cmp	r3, #2
 8007474:	d901      	bls.n	800747a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	e066      	b.n	8007548 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800747a:	4b35      	ldr	r3, [pc, #212]	@ (8007550 <HAL_RCC_OscConfig+0x618>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d0f0      	beq.n	8007468 <HAL_RCC_OscConfig+0x530>
 8007486:	e05e      	b.n	8007546 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007488:	4b31      	ldr	r3, [pc, #196]	@ (8007550 <HAL_RCC_OscConfig+0x618>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a30      	ldr	r2, [pc, #192]	@ (8007550 <HAL_RCC_OscConfig+0x618>)
 800748e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007494:	f7fa fa68 	bl	8001968 <HAL_GetTick>
 8007498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800749a:	e008      	b.n	80074ae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800749c:	f7fa fa64 	bl	8001968 <HAL_GetTick>
 80074a0:	4602      	mov	r2, r0
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d901      	bls.n	80074ae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e04c      	b.n	8007548 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074ae:	4b28      	ldr	r3, [pc, #160]	@ (8007550 <HAL_RCC_OscConfig+0x618>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1f0      	bne.n	800749c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80074ba:	4b25      	ldr	r3, [pc, #148]	@ (8007550 <HAL_RCC_OscConfig+0x618>)
 80074bc:	68da      	ldr	r2, [r3, #12]
 80074be:	4924      	ldr	r1, [pc, #144]	@ (8007550 <HAL_RCC_OscConfig+0x618>)
 80074c0:	4b25      	ldr	r3, [pc, #148]	@ (8007558 <HAL_RCC_OscConfig+0x620>)
 80074c2:	4013      	ands	r3, r2
 80074c4:	60cb      	str	r3, [r1, #12]
 80074c6:	e03e      	b.n	8007546 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	69db      	ldr	r3, [r3, #28]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d101      	bne.n	80074d4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e039      	b.n	8007548 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80074d4:	4b1e      	ldr	r3, [pc, #120]	@ (8007550 <HAL_RCC_OscConfig+0x618>)
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f003 0203 	and.w	r2, r3, #3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a1b      	ldr	r3, [r3, #32]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d12c      	bne.n	8007542 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f2:	3b01      	subs	r3, #1
 80074f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d123      	bne.n	8007542 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007504:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007506:	429a      	cmp	r2, r3
 8007508:	d11b      	bne.n	8007542 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007514:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007516:	429a      	cmp	r2, r3
 8007518:	d113      	bne.n	8007542 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007524:	085b      	lsrs	r3, r3, #1
 8007526:	3b01      	subs	r3, #1
 8007528:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800752a:	429a      	cmp	r2, r3
 800752c:	d109      	bne.n	8007542 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007538:	085b      	lsrs	r3, r3, #1
 800753a:	3b01      	subs	r3, #1
 800753c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800753e:	429a      	cmp	r2, r3
 8007540:	d001      	beq.n	8007546 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e000      	b.n	8007548 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3720      	adds	r7, #32
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	40021000 	.word	0x40021000
 8007554:	019f800c 	.word	0x019f800c
 8007558:	feeefffc 	.word	0xfeeefffc

0800755c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007566:	2300      	movs	r3, #0
 8007568:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d101      	bne.n	8007574 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e11e      	b.n	80077b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007574:	4b91      	ldr	r3, [pc, #580]	@ (80077bc <HAL_RCC_ClockConfig+0x260>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 030f 	and.w	r3, r3, #15
 800757c:	683a      	ldr	r2, [r7, #0]
 800757e:	429a      	cmp	r2, r3
 8007580:	d910      	bls.n	80075a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007582:	4b8e      	ldr	r3, [pc, #568]	@ (80077bc <HAL_RCC_ClockConfig+0x260>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f023 020f 	bic.w	r2, r3, #15
 800758a:	498c      	ldr	r1, [pc, #560]	@ (80077bc <HAL_RCC_ClockConfig+0x260>)
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	4313      	orrs	r3, r2
 8007590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007592:	4b8a      	ldr	r3, [pc, #552]	@ (80077bc <HAL_RCC_ClockConfig+0x260>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 030f 	and.w	r3, r3, #15
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	429a      	cmp	r2, r3
 800759e:	d001      	beq.n	80075a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e106      	b.n	80077b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0301 	and.w	r3, r3, #1
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d073      	beq.n	8007698 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	2b03      	cmp	r3, #3
 80075b6:	d129      	bne.n	800760c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075b8:	4b81      	ldr	r3, [pc, #516]	@ (80077c0 <HAL_RCC_ClockConfig+0x264>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d101      	bne.n	80075c8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e0f4      	b.n	80077b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80075c8:	f000 f99e 	bl	8007908 <RCC_GetSysClockFreqFromPLLSource>
 80075cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	4a7c      	ldr	r2, [pc, #496]	@ (80077c4 <HAL_RCC_ClockConfig+0x268>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d93f      	bls.n	8007656 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80075d6:	4b7a      	ldr	r3, [pc, #488]	@ (80077c0 <HAL_RCC_ClockConfig+0x264>)
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d009      	beq.n	80075f6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d033      	beq.n	8007656 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d12f      	bne.n	8007656 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80075f6:	4b72      	ldr	r3, [pc, #456]	@ (80077c0 <HAL_RCC_ClockConfig+0x264>)
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075fe:	4a70      	ldr	r2, [pc, #448]	@ (80077c0 <HAL_RCC_ClockConfig+0x264>)
 8007600:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007604:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007606:	2380      	movs	r3, #128	@ 0x80
 8007608:	617b      	str	r3, [r7, #20]
 800760a:	e024      	b.n	8007656 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	2b02      	cmp	r3, #2
 8007612:	d107      	bne.n	8007624 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007614:	4b6a      	ldr	r3, [pc, #424]	@ (80077c0 <HAL_RCC_ClockConfig+0x264>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d109      	bne.n	8007634 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e0c6      	b.n	80077b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007624:	4b66      	ldr	r3, [pc, #408]	@ (80077c0 <HAL_RCC_ClockConfig+0x264>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800762c:	2b00      	cmp	r3, #0
 800762e:	d101      	bne.n	8007634 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e0be      	b.n	80077b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007634:	f000 f8ce 	bl	80077d4 <HAL_RCC_GetSysClockFreq>
 8007638:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	4a61      	ldr	r2, [pc, #388]	@ (80077c4 <HAL_RCC_ClockConfig+0x268>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d909      	bls.n	8007656 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007642:	4b5f      	ldr	r3, [pc, #380]	@ (80077c0 <HAL_RCC_ClockConfig+0x264>)
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800764a:	4a5d      	ldr	r2, [pc, #372]	@ (80077c0 <HAL_RCC_ClockConfig+0x264>)
 800764c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007650:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007652:	2380      	movs	r3, #128	@ 0x80
 8007654:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007656:	4b5a      	ldr	r3, [pc, #360]	@ (80077c0 <HAL_RCC_ClockConfig+0x264>)
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f023 0203 	bic.w	r2, r3, #3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	4957      	ldr	r1, [pc, #348]	@ (80077c0 <HAL_RCC_ClockConfig+0x264>)
 8007664:	4313      	orrs	r3, r2
 8007666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007668:	f7fa f97e 	bl	8001968 <HAL_GetTick>
 800766c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800766e:	e00a      	b.n	8007686 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007670:	f7fa f97a 	bl	8001968 <HAL_GetTick>
 8007674:	4602      	mov	r2, r0
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800767e:	4293      	cmp	r3, r2
 8007680:	d901      	bls.n	8007686 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e095      	b.n	80077b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007686:	4b4e      	ldr	r3, [pc, #312]	@ (80077c0 <HAL_RCC_ClockConfig+0x264>)
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f003 020c 	and.w	r2, r3, #12
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	429a      	cmp	r2, r3
 8007696:	d1eb      	bne.n	8007670 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0302 	and.w	r3, r3, #2
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d023      	beq.n	80076ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0304 	and.w	r3, r3, #4
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d005      	beq.n	80076bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076b0:	4b43      	ldr	r3, [pc, #268]	@ (80077c0 <HAL_RCC_ClockConfig+0x264>)
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	4a42      	ldr	r2, [pc, #264]	@ (80077c0 <HAL_RCC_ClockConfig+0x264>)
 80076b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80076ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0308 	and.w	r3, r3, #8
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d007      	beq.n	80076d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80076c8:	4b3d      	ldr	r3, [pc, #244]	@ (80077c0 <HAL_RCC_ClockConfig+0x264>)
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80076d0:	4a3b      	ldr	r2, [pc, #236]	@ (80077c0 <HAL_RCC_ClockConfig+0x264>)
 80076d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80076d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076d8:	4b39      	ldr	r3, [pc, #228]	@ (80077c0 <HAL_RCC_ClockConfig+0x264>)
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	4936      	ldr	r1, [pc, #216]	@ (80077c0 <HAL_RCC_ClockConfig+0x264>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	608b      	str	r3, [r1, #8]
 80076ea:	e008      	b.n	80076fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	2b80      	cmp	r3, #128	@ 0x80
 80076f0:	d105      	bne.n	80076fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80076f2:	4b33      	ldr	r3, [pc, #204]	@ (80077c0 <HAL_RCC_ClockConfig+0x264>)
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	4a32      	ldr	r2, [pc, #200]	@ (80077c0 <HAL_RCC_ClockConfig+0x264>)
 80076f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80076fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076fe:	4b2f      	ldr	r3, [pc, #188]	@ (80077bc <HAL_RCC_ClockConfig+0x260>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 030f 	and.w	r3, r3, #15
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	429a      	cmp	r2, r3
 800770a:	d21d      	bcs.n	8007748 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800770c:	4b2b      	ldr	r3, [pc, #172]	@ (80077bc <HAL_RCC_ClockConfig+0x260>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f023 020f 	bic.w	r2, r3, #15
 8007714:	4929      	ldr	r1, [pc, #164]	@ (80077bc <HAL_RCC_ClockConfig+0x260>)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	4313      	orrs	r3, r2
 800771a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800771c:	f7fa f924 	bl	8001968 <HAL_GetTick>
 8007720:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007722:	e00a      	b.n	800773a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007724:	f7fa f920 	bl	8001968 <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007732:	4293      	cmp	r3, r2
 8007734:	d901      	bls.n	800773a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e03b      	b.n	80077b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800773a:	4b20      	ldr	r3, [pc, #128]	@ (80077bc <HAL_RCC_ClockConfig+0x260>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 030f 	and.w	r3, r3, #15
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	429a      	cmp	r2, r3
 8007746:	d1ed      	bne.n	8007724 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 0304 	and.w	r3, r3, #4
 8007750:	2b00      	cmp	r3, #0
 8007752:	d008      	beq.n	8007766 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007754:	4b1a      	ldr	r3, [pc, #104]	@ (80077c0 <HAL_RCC_ClockConfig+0x264>)
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	4917      	ldr	r1, [pc, #92]	@ (80077c0 <HAL_RCC_ClockConfig+0x264>)
 8007762:	4313      	orrs	r3, r2
 8007764:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0308 	and.w	r3, r3, #8
 800776e:	2b00      	cmp	r3, #0
 8007770:	d009      	beq.n	8007786 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007772:	4b13      	ldr	r3, [pc, #76]	@ (80077c0 <HAL_RCC_ClockConfig+0x264>)
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	490f      	ldr	r1, [pc, #60]	@ (80077c0 <HAL_RCC_ClockConfig+0x264>)
 8007782:	4313      	orrs	r3, r2
 8007784:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007786:	f000 f825 	bl	80077d4 <HAL_RCC_GetSysClockFreq>
 800778a:	4602      	mov	r2, r0
 800778c:	4b0c      	ldr	r3, [pc, #48]	@ (80077c0 <HAL_RCC_ClockConfig+0x264>)
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	091b      	lsrs	r3, r3, #4
 8007792:	f003 030f 	and.w	r3, r3, #15
 8007796:	490c      	ldr	r1, [pc, #48]	@ (80077c8 <HAL_RCC_ClockConfig+0x26c>)
 8007798:	5ccb      	ldrb	r3, [r1, r3]
 800779a:	f003 031f 	and.w	r3, r3, #31
 800779e:	fa22 f303 	lsr.w	r3, r2, r3
 80077a2:	4a0a      	ldr	r2, [pc, #40]	@ (80077cc <HAL_RCC_ClockConfig+0x270>)
 80077a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80077a6:	4b0a      	ldr	r3, [pc, #40]	@ (80077d0 <HAL_RCC_ClockConfig+0x274>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fa f890 	bl	80018d0 <HAL_InitTick>
 80077b0:	4603      	mov	r3, r0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3718      	adds	r7, #24
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	40022000 	.word	0x40022000
 80077c0:	40021000 	.word	0x40021000
 80077c4:	04c4b400 	.word	0x04c4b400
 80077c8:	0800ba84 	.word	0x0800ba84
 80077cc:	20000000 	.word	0x20000000
 80077d0:	20000004 	.word	0x20000004

080077d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b087      	sub	sp, #28
 80077d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80077da:	4b2c      	ldr	r3, [pc, #176]	@ (800788c <HAL_RCC_GetSysClockFreq+0xb8>)
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f003 030c 	and.w	r3, r3, #12
 80077e2:	2b04      	cmp	r3, #4
 80077e4:	d102      	bne.n	80077ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80077e6:	4b2a      	ldr	r3, [pc, #168]	@ (8007890 <HAL_RCC_GetSysClockFreq+0xbc>)
 80077e8:	613b      	str	r3, [r7, #16]
 80077ea:	e047      	b.n	800787c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80077ec:	4b27      	ldr	r3, [pc, #156]	@ (800788c <HAL_RCC_GetSysClockFreq+0xb8>)
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	f003 030c 	and.w	r3, r3, #12
 80077f4:	2b08      	cmp	r3, #8
 80077f6:	d102      	bne.n	80077fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80077f8:	4b26      	ldr	r3, [pc, #152]	@ (8007894 <HAL_RCC_GetSysClockFreq+0xc0>)
 80077fa:	613b      	str	r3, [r7, #16]
 80077fc:	e03e      	b.n	800787c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80077fe:	4b23      	ldr	r3, [pc, #140]	@ (800788c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f003 030c 	and.w	r3, r3, #12
 8007806:	2b0c      	cmp	r3, #12
 8007808:	d136      	bne.n	8007878 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800780a:	4b20      	ldr	r3, [pc, #128]	@ (800788c <HAL_RCC_GetSysClockFreq+0xb8>)
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	f003 0303 	and.w	r3, r3, #3
 8007812:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007814:	4b1d      	ldr	r3, [pc, #116]	@ (800788c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	091b      	lsrs	r3, r3, #4
 800781a:	f003 030f 	and.w	r3, r3, #15
 800781e:	3301      	adds	r3, #1
 8007820:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2b03      	cmp	r3, #3
 8007826:	d10c      	bne.n	8007842 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007828:	4a1a      	ldr	r2, [pc, #104]	@ (8007894 <HAL_RCC_GetSysClockFreq+0xc0>)
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007830:	4a16      	ldr	r2, [pc, #88]	@ (800788c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007832:	68d2      	ldr	r2, [r2, #12]
 8007834:	0a12      	lsrs	r2, r2, #8
 8007836:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800783a:	fb02 f303 	mul.w	r3, r2, r3
 800783e:	617b      	str	r3, [r7, #20]
      break;
 8007840:	e00c      	b.n	800785c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007842:	4a13      	ldr	r2, [pc, #76]	@ (8007890 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	fbb2 f3f3 	udiv	r3, r2, r3
 800784a:	4a10      	ldr	r2, [pc, #64]	@ (800788c <HAL_RCC_GetSysClockFreq+0xb8>)
 800784c:	68d2      	ldr	r2, [r2, #12]
 800784e:	0a12      	lsrs	r2, r2, #8
 8007850:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007854:	fb02 f303 	mul.w	r3, r2, r3
 8007858:	617b      	str	r3, [r7, #20]
      break;
 800785a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800785c:	4b0b      	ldr	r3, [pc, #44]	@ (800788c <HAL_RCC_GetSysClockFreq+0xb8>)
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	0e5b      	lsrs	r3, r3, #25
 8007862:	f003 0303 	and.w	r3, r3, #3
 8007866:	3301      	adds	r3, #1
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	fbb2 f3f3 	udiv	r3, r2, r3
 8007874:	613b      	str	r3, [r7, #16]
 8007876:	e001      	b.n	800787c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007878:	2300      	movs	r3, #0
 800787a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800787c:	693b      	ldr	r3, [r7, #16]
}
 800787e:	4618      	mov	r0, r3
 8007880:	371c      	adds	r7, #28
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	40021000 	.word	0x40021000
 8007890:	00f42400 	.word	0x00f42400
 8007894:	007a1200 	.word	0x007a1200

08007898 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007898:	b480      	push	{r7}
 800789a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800789c:	4b03      	ldr	r3, [pc, #12]	@ (80078ac <HAL_RCC_GetHCLKFreq+0x14>)
 800789e:	681b      	ldr	r3, [r3, #0]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	20000000 	.word	0x20000000

080078b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80078b4:	f7ff fff0 	bl	8007898 <HAL_RCC_GetHCLKFreq>
 80078b8:	4602      	mov	r2, r0
 80078ba:	4b06      	ldr	r3, [pc, #24]	@ (80078d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	0a1b      	lsrs	r3, r3, #8
 80078c0:	f003 0307 	and.w	r3, r3, #7
 80078c4:	4904      	ldr	r1, [pc, #16]	@ (80078d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80078c6:	5ccb      	ldrb	r3, [r1, r3]
 80078c8:	f003 031f 	and.w	r3, r3, #31
 80078cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	40021000 	.word	0x40021000
 80078d8:	0800ba94 	.word	0x0800ba94

080078dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80078e0:	f7ff ffda 	bl	8007898 <HAL_RCC_GetHCLKFreq>
 80078e4:	4602      	mov	r2, r0
 80078e6:	4b06      	ldr	r3, [pc, #24]	@ (8007900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	0adb      	lsrs	r3, r3, #11
 80078ec:	f003 0307 	and.w	r3, r3, #7
 80078f0:	4904      	ldr	r1, [pc, #16]	@ (8007904 <HAL_RCC_GetPCLK2Freq+0x28>)
 80078f2:	5ccb      	ldrb	r3, [r1, r3]
 80078f4:	f003 031f 	and.w	r3, r3, #31
 80078f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	40021000 	.word	0x40021000
 8007904:	0800ba94 	.word	0x0800ba94

08007908 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007908:	b480      	push	{r7}
 800790a:	b087      	sub	sp, #28
 800790c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800790e:	4b1e      	ldr	r3, [pc, #120]	@ (8007988 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	f003 0303 	and.w	r3, r3, #3
 8007916:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007918:	4b1b      	ldr	r3, [pc, #108]	@ (8007988 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	091b      	lsrs	r3, r3, #4
 800791e:	f003 030f 	and.w	r3, r3, #15
 8007922:	3301      	adds	r3, #1
 8007924:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	2b03      	cmp	r3, #3
 800792a:	d10c      	bne.n	8007946 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800792c:	4a17      	ldr	r2, [pc, #92]	@ (800798c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	fbb2 f3f3 	udiv	r3, r2, r3
 8007934:	4a14      	ldr	r2, [pc, #80]	@ (8007988 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007936:	68d2      	ldr	r2, [r2, #12]
 8007938:	0a12      	lsrs	r2, r2, #8
 800793a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800793e:	fb02 f303 	mul.w	r3, r2, r3
 8007942:	617b      	str	r3, [r7, #20]
    break;
 8007944:	e00c      	b.n	8007960 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007946:	4a12      	ldr	r2, [pc, #72]	@ (8007990 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	fbb2 f3f3 	udiv	r3, r2, r3
 800794e:	4a0e      	ldr	r2, [pc, #56]	@ (8007988 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007950:	68d2      	ldr	r2, [r2, #12]
 8007952:	0a12      	lsrs	r2, r2, #8
 8007954:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007958:	fb02 f303 	mul.w	r3, r2, r3
 800795c:	617b      	str	r3, [r7, #20]
    break;
 800795e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007960:	4b09      	ldr	r3, [pc, #36]	@ (8007988 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	0e5b      	lsrs	r3, r3, #25
 8007966:	f003 0303 	and.w	r3, r3, #3
 800796a:	3301      	adds	r3, #1
 800796c:	005b      	lsls	r3, r3, #1
 800796e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	fbb2 f3f3 	udiv	r3, r2, r3
 8007978:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800797a:	687b      	ldr	r3, [r7, #4]
}
 800797c:	4618      	mov	r0, r3
 800797e:	371c      	adds	r7, #28
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	40021000 	.word	0x40021000
 800798c:	007a1200 	.word	0x007a1200
 8007990:	00f42400 	.word	0x00f42400

08007994 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800799c:	2300      	movs	r3, #0
 800799e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80079a0:	2300      	movs	r3, #0
 80079a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 8098 	beq.w	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079b2:	2300      	movs	r3, #0
 80079b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079b6:	4b43      	ldr	r3, [pc, #268]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10d      	bne.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079c2:	4b40      	ldr	r3, [pc, #256]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079c6:	4a3f      	ldr	r2, [pc, #252]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80079ce:	4b3d      	ldr	r3, [pc, #244]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079d6:	60bb      	str	r3, [r7, #8]
 80079d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079da:	2301      	movs	r3, #1
 80079dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079de:	4b3a      	ldr	r3, [pc, #232]	@ (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a39      	ldr	r2, [pc, #228]	@ (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80079e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079ea:	f7f9 ffbd 	bl	8001968 <HAL_GetTick>
 80079ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079f0:	e009      	b.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079f2:	f7f9 ffb9 	bl	8001968 <HAL_GetTick>
 80079f6:	4602      	mov	r2, r0
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	1ad3      	subs	r3, r2, r3
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d902      	bls.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	74fb      	strb	r3, [r7, #19]
        break;
 8007a04:	e005      	b.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a06:	4b30      	ldr	r3, [pc, #192]	@ (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d0ef      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007a12:	7cfb      	ldrb	r3, [r7, #19]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d159      	bne.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a18:	4b2a      	ldr	r3, [pc, #168]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a22:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d01e      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d019      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a34:	4b23      	ldr	r3, [pc, #140]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a40:	4b20      	ldr	r3, [pc, #128]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a46:	4a1f      	ldr	r2, [pc, #124]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a50:	4b1c      	ldr	r3, [pc, #112]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a56:	4a1b      	ldr	r2, [pc, #108]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007a60:	4a18      	ldr	r2, [pc, #96]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d016      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a72:	f7f9 ff79 	bl	8001968 <HAL_GetTick>
 8007a76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a78:	e00b      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a7a:	f7f9 ff75 	bl	8001968 <HAL_GetTick>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d902      	bls.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	74fb      	strb	r3, [r7, #19]
            break;
 8007a90:	e006      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a92:	4b0c      	ldr	r3, [pc, #48]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a98:	f003 0302 	and.w	r3, r3, #2
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d0ec      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007aa0:	7cfb      	ldrb	r3, [r7, #19]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d10b      	bne.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007aa6:	4b07      	ldr	r3, [pc, #28]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ab4:	4903      	ldr	r1, [pc, #12]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007abc:	e008      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007abe:	7cfb      	ldrb	r3, [r7, #19]
 8007ac0:	74bb      	strb	r3, [r7, #18]
 8007ac2:	e005      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007ac4:	40021000 	.word	0x40021000
 8007ac8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007acc:	7cfb      	ldrb	r3, [r7, #19]
 8007ace:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ad0:	7c7b      	ldrb	r3, [r7, #17]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d105      	bne.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ad6:	4ba7      	ldr	r3, [pc, #668]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ada:	4aa6      	ldr	r2, [pc, #664]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007adc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ae0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00a      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007aee:	4ba1      	ldr	r3, [pc, #644]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007af4:	f023 0203 	bic.w	r2, r3, #3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	499d      	ldr	r1, [pc, #628]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007afe:	4313      	orrs	r3, r2
 8007b00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 0302 	and.w	r3, r3, #2
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00a      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b10:	4b98      	ldr	r3, [pc, #608]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b16:	f023 020c 	bic.w	r2, r3, #12
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	4995      	ldr	r1, [pc, #596]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b20:	4313      	orrs	r3, r2
 8007b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0304 	and.w	r3, r3, #4
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00a      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b32:	4b90      	ldr	r3, [pc, #576]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b38:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	498c      	ldr	r1, [pc, #560]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b42:	4313      	orrs	r3, r2
 8007b44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0308 	and.w	r3, r3, #8
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00a      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b54:	4b87      	ldr	r3, [pc, #540]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b5a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	4984      	ldr	r1, [pc, #528]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0310 	and.w	r3, r3, #16
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00a      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b76:	4b7f      	ldr	r3, [pc, #508]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	497b      	ldr	r1, [pc, #492]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0320 	and.w	r3, r3, #32
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00a      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b98:	4b76      	ldr	r3, [pc, #472]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b9e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	4973      	ldr	r1, [pc, #460]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00a      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007bba:	4b6e      	ldr	r3, [pc, #440]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bc0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	496a      	ldr	r1, [pc, #424]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00a      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007bdc:	4b65      	ldr	r3, [pc, #404]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007be2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a1b      	ldr	r3, [r3, #32]
 8007bea:	4962      	ldr	r1, [pc, #392]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bec:	4313      	orrs	r3, r2
 8007bee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00a      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007bfe:	4b5d      	ldr	r3, [pc, #372]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c04:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c0c:	4959      	ldr	r1, [pc, #356]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00a      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c20:	4b54      	ldr	r3, [pc, #336]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c26:	f023 0203 	bic.w	r2, r3, #3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2e:	4951      	ldr	r1, [pc, #324]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c30:	4313      	orrs	r3, r2
 8007c32:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00a      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c42:	4b4c      	ldr	r3, [pc, #304]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c48:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c50:	4948      	ldr	r1, [pc, #288]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d015      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c64:	4b43      	ldr	r3, [pc, #268]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c72:	4940      	ldr	r1, [pc, #256]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c74:	4313      	orrs	r3, r2
 8007c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c82:	d105      	bne.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c84:	4b3b      	ldr	r3, [pc, #236]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	4a3a      	ldr	r2, [pc, #232]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c8e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d015      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007c9c:	4b35      	ldr	r3, [pc, #212]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ca2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007caa:	4932      	ldr	r1, [pc, #200]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cac:	4313      	orrs	r3, r2
 8007cae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007cba:	d105      	bne.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	4a2c      	ldr	r2, [pc, #176]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cc6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d015      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007cd4:	4b27      	ldr	r3, [pc, #156]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cda:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ce2:	4924      	ldr	r1, [pc, #144]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007cf2:	d105      	bne.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	4a1e      	ldr	r2, [pc, #120]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cfe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d015      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d0c:	4b19      	ldr	r3, [pc, #100]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d1a:	4916      	ldr	r1, [pc, #88]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d2a:	d105      	bne.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d2c:	4b11      	ldr	r3, [pc, #68]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	4a10      	ldr	r2, [pc, #64]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d36:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d019      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d44:	4b0b      	ldr	r3, [pc, #44]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d52:	4908      	ldr	r1, [pc, #32]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d54:	4313      	orrs	r3, r2
 8007d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d62:	d109      	bne.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d64:	4b03      	ldr	r3, [pc, #12]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	4a02      	ldr	r2, [pc, #8]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d6e:	60d3      	str	r3, [r2, #12]
 8007d70:	e002      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007d72:	bf00      	nop
 8007d74:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d015      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007d84:	4b29      	ldr	r3, [pc, #164]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d8a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d92:	4926      	ldr	r1, [pc, #152]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d94:	4313      	orrs	r3, r2
 8007d96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007da2:	d105      	bne.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007da4:	4b21      	ldr	r3, [pc, #132]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	4a20      	ldr	r2, [pc, #128]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007daa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007dae:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d015      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dc2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dca:	4918      	ldr	r1, [pc, #96]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dda:	d105      	bne.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007ddc:	4b13      	ldr	r3, [pc, #76]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	4a12      	ldr	r2, [pc, #72]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007de2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007de6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d015      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007df4:	4b0d      	ldr	r3, [pc, #52]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007df6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007dfa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e02:	490a      	ldr	r1, [pc, #40]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e04:	4313      	orrs	r3, r2
 8007e06:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e12:	d105      	bne.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e14:	4b05      	ldr	r3, [pc, #20]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	4a04      	ldr	r2, [pc, #16]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e1e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007e20:	7cbb      	ldrb	r3, [r7, #18]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3718      	adds	r7, #24
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	40021000 	.word	0x40021000

08007e30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e049      	b.n	8007ed6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d106      	bne.n	8007e5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f7f9 fb94 	bl	8001584 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	3304      	adds	r3, #4
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	4610      	mov	r0, r2
 8007e70:	f000 fb3c 	bl	80084ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
	...

08007ee0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d001      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e054      	b.n	8007fa2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2202      	movs	r2, #2
 8007efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68da      	ldr	r2, [r3, #12]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f042 0201 	orr.w	r2, r2, #1
 8007f0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a26      	ldr	r2, [pc, #152]	@ (8007fb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d022      	beq.n	8007f60 <HAL_TIM_Base_Start_IT+0x80>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f22:	d01d      	beq.n	8007f60 <HAL_TIM_Base_Start_IT+0x80>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a22      	ldr	r2, [pc, #136]	@ (8007fb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d018      	beq.n	8007f60 <HAL_TIM_Base_Start_IT+0x80>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a21      	ldr	r2, [pc, #132]	@ (8007fb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d013      	beq.n	8007f60 <HAL_TIM_Base_Start_IT+0x80>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8007fbc <HAL_TIM_Base_Start_IT+0xdc>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d00e      	beq.n	8007f60 <HAL_TIM_Base_Start_IT+0x80>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a1e      	ldr	r2, [pc, #120]	@ (8007fc0 <HAL_TIM_Base_Start_IT+0xe0>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d009      	beq.n	8007f60 <HAL_TIM_Base_Start_IT+0x80>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a1c      	ldr	r2, [pc, #112]	@ (8007fc4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d004      	beq.n	8007f60 <HAL_TIM_Base_Start_IT+0x80>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a1b      	ldr	r2, [pc, #108]	@ (8007fc8 <HAL_TIM_Base_Start_IT+0xe8>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d115      	bne.n	8007f8c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689a      	ldr	r2, [r3, #8]
 8007f66:	4b19      	ldr	r3, [pc, #100]	@ (8007fcc <HAL_TIM_Base_Start_IT+0xec>)
 8007f68:	4013      	ands	r3, r2
 8007f6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2b06      	cmp	r3, #6
 8007f70:	d015      	beq.n	8007f9e <HAL_TIM_Base_Start_IT+0xbe>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f78:	d011      	beq.n	8007f9e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f042 0201 	orr.w	r2, r2, #1
 8007f88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f8a:	e008      	b.n	8007f9e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f042 0201 	orr.w	r2, r2, #1
 8007f9a:	601a      	str	r2, [r3, #0]
 8007f9c:	e000      	b.n	8007fa0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3714      	adds	r7, #20
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	40012c00 	.word	0x40012c00
 8007fb4:	40000400 	.word	0x40000400
 8007fb8:	40000800 	.word	0x40000800
 8007fbc:	40000c00 	.word	0x40000c00
 8007fc0:	40013400 	.word	0x40013400
 8007fc4:	40014000 	.word	0x40014000
 8007fc8:	40015000 	.word	0x40015000
 8007fcc:	00010007 	.word	0x00010007

08007fd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	f003 0302 	and.w	r3, r3, #2
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d020      	beq.n	8008034 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f003 0302 	and.w	r3, r3, #2
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d01b      	beq.n	8008034 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f06f 0202 	mvn.w	r2, #2
 8008004:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	699b      	ldr	r3, [r3, #24]
 8008012:	f003 0303 	and.w	r3, r3, #3
 8008016:	2b00      	cmp	r3, #0
 8008018:	d003      	beq.n	8008022 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fa48 	bl	80084b0 <HAL_TIM_IC_CaptureCallback>
 8008020:	e005      	b.n	800802e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fa3a 	bl	800849c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 fa4b 	bl	80084c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	f003 0304 	and.w	r3, r3, #4
 800803a:	2b00      	cmp	r3, #0
 800803c:	d020      	beq.n	8008080 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f003 0304 	and.w	r3, r3, #4
 8008044:	2b00      	cmp	r3, #0
 8008046:	d01b      	beq.n	8008080 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f06f 0204 	mvn.w	r2, #4
 8008050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2202      	movs	r2, #2
 8008056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008062:	2b00      	cmp	r3, #0
 8008064:	d003      	beq.n	800806e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fa22 	bl	80084b0 <HAL_TIM_IC_CaptureCallback>
 800806c:	e005      	b.n	800807a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 fa14 	bl	800849c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 fa25 	bl	80084c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	f003 0308 	and.w	r3, r3, #8
 8008086:	2b00      	cmp	r3, #0
 8008088:	d020      	beq.n	80080cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f003 0308 	and.w	r3, r3, #8
 8008090:	2b00      	cmp	r3, #0
 8008092:	d01b      	beq.n	80080cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f06f 0208 	mvn.w	r2, #8
 800809c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2204      	movs	r2, #4
 80080a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	f003 0303 	and.w	r3, r3, #3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f9fc 	bl	80084b0 <HAL_TIM_IC_CaptureCallback>
 80080b8:	e005      	b.n	80080c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f9ee 	bl	800849c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f9ff 	bl	80084c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	f003 0310 	and.w	r3, r3, #16
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d020      	beq.n	8008118 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f003 0310 	and.w	r3, r3, #16
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d01b      	beq.n	8008118 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f06f 0210 	mvn.w	r2, #16
 80080e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2208      	movs	r2, #8
 80080ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	69db      	ldr	r3, [r3, #28]
 80080f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f9d6 	bl	80084b0 <HAL_TIM_IC_CaptureCallback>
 8008104:	e005      	b.n	8008112 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f9c8 	bl	800849c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 f9d9 	bl	80084c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00c      	beq.n	800813c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	2b00      	cmp	r3, #0
 800812a:	d007      	beq.n	800813c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f06f 0201 	mvn.w	r2, #1
 8008134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7f8 ffd6 	bl	80010e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008142:	2b00      	cmp	r3, #0
 8008144:	d104      	bne.n	8008150 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00c      	beq.n	800816a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008156:	2b00      	cmp	r3, #0
 8008158:	d007      	beq.n	800816a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fbb1 	bl	80088cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00c      	beq.n	800818e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800817a:	2b00      	cmp	r3, #0
 800817c:	d007      	beq.n	800818e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fba9 	bl	80088e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00c      	beq.n	80081b2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d007      	beq.n	80081b2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80081aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f993 	bl	80084d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	f003 0320 	and.w	r3, r3, #32
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00c      	beq.n	80081d6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f003 0320 	and.w	r3, r3, #32
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d007      	beq.n	80081d6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f06f 0220 	mvn.w	r2, #32
 80081ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fb71 	bl	80088b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00c      	beq.n	80081fa <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d007      	beq.n	80081fa <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80081f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fb7d 	bl	80088f4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008200:	2b00      	cmp	r3, #0
 8008202:	d00c      	beq.n	800821e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800820a:	2b00      	cmp	r3, #0
 800820c:	d007      	beq.n	800821e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fb75 	bl	8008908 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00c      	beq.n	8008242 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800822e:	2b00      	cmp	r3, #0
 8008230:	d007      	beq.n	8008242 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800823a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fb6d 	bl	800891c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00c      	beq.n	8008266 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008252:	2b00      	cmp	r3, #0
 8008254:	d007      	beq.n	8008266 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800825e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fb65 	bl	8008930 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008266:	bf00      	nop
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
	...

08008270 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008284:	2b01      	cmp	r3, #1
 8008286:	d101      	bne.n	800828c <HAL_TIM_ConfigClockSource+0x1c>
 8008288:	2302      	movs	r3, #2
 800828a:	e0f6      	b.n	800847a <HAL_TIM_ConfigClockSource+0x20a>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2202      	movs	r2, #2
 8008298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80082aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80082ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80082b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a6f      	ldr	r2, [pc, #444]	@ (8008484 <HAL_TIM_ConfigClockSource+0x214>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	f000 80c1 	beq.w	800844e <HAL_TIM_ConfigClockSource+0x1de>
 80082cc:	4a6d      	ldr	r2, [pc, #436]	@ (8008484 <HAL_TIM_ConfigClockSource+0x214>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	f200 80c6 	bhi.w	8008460 <HAL_TIM_ConfigClockSource+0x1f0>
 80082d4:	4a6c      	ldr	r2, [pc, #432]	@ (8008488 <HAL_TIM_ConfigClockSource+0x218>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	f000 80b9 	beq.w	800844e <HAL_TIM_ConfigClockSource+0x1de>
 80082dc:	4a6a      	ldr	r2, [pc, #424]	@ (8008488 <HAL_TIM_ConfigClockSource+0x218>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	f200 80be 	bhi.w	8008460 <HAL_TIM_ConfigClockSource+0x1f0>
 80082e4:	4a69      	ldr	r2, [pc, #420]	@ (800848c <HAL_TIM_ConfigClockSource+0x21c>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	f000 80b1 	beq.w	800844e <HAL_TIM_ConfigClockSource+0x1de>
 80082ec:	4a67      	ldr	r2, [pc, #412]	@ (800848c <HAL_TIM_ConfigClockSource+0x21c>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	f200 80b6 	bhi.w	8008460 <HAL_TIM_ConfigClockSource+0x1f0>
 80082f4:	4a66      	ldr	r2, [pc, #408]	@ (8008490 <HAL_TIM_ConfigClockSource+0x220>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	f000 80a9 	beq.w	800844e <HAL_TIM_ConfigClockSource+0x1de>
 80082fc:	4a64      	ldr	r2, [pc, #400]	@ (8008490 <HAL_TIM_ConfigClockSource+0x220>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	f200 80ae 	bhi.w	8008460 <HAL_TIM_ConfigClockSource+0x1f0>
 8008304:	4a63      	ldr	r2, [pc, #396]	@ (8008494 <HAL_TIM_ConfigClockSource+0x224>)
 8008306:	4293      	cmp	r3, r2
 8008308:	f000 80a1 	beq.w	800844e <HAL_TIM_ConfigClockSource+0x1de>
 800830c:	4a61      	ldr	r2, [pc, #388]	@ (8008494 <HAL_TIM_ConfigClockSource+0x224>)
 800830e:	4293      	cmp	r3, r2
 8008310:	f200 80a6 	bhi.w	8008460 <HAL_TIM_ConfigClockSource+0x1f0>
 8008314:	4a60      	ldr	r2, [pc, #384]	@ (8008498 <HAL_TIM_ConfigClockSource+0x228>)
 8008316:	4293      	cmp	r3, r2
 8008318:	f000 8099 	beq.w	800844e <HAL_TIM_ConfigClockSource+0x1de>
 800831c:	4a5e      	ldr	r2, [pc, #376]	@ (8008498 <HAL_TIM_ConfigClockSource+0x228>)
 800831e:	4293      	cmp	r3, r2
 8008320:	f200 809e 	bhi.w	8008460 <HAL_TIM_ConfigClockSource+0x1f0>
 8008324:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008328:	f000 8091 	beq.w	800844e <HAL_TIM_ConfigClockSource+0x1de>
 800832c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008330:	f200 8096 	bhi.w	8008460 <HAL_TIM_ConfigClockSource+0x1f0>
 8008334:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008338:	f000 8089 	beq.w	800844e <HAL_TIM_ConfigClockSource+0x1de>
 800833c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008340:	f200 808e 	bhi.w	8008460 <HAL_TIM_ConfigClockSource+0x1f0>
 8008344:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008348:	d03e      	beq.n	80083c8 <HAL_TIM_ConfigClockSource+0x158>
 800834a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800834e:	f200 8087 	bhi.w	8008460 <HAL_TIM_ConfigClockSource+0x1f0>
 8008352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008356:	f000 8086 	beq.w	8008466 <HAL_TIM_ConfigClockSource+0x1f6>
 800835a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800835e:	d87f      	bhi.n	8008460 <HAL_TIM_ConfigClockSource+0x1f0>
 8008360:	2b70      	cmp	r3, #112	@ 0x70
 8008362:	d01a      	beq.n	800839a <HAL_TIM_ConfigClockSource+0x12a>
 8008364:	2b70      	cmp	r3, #112	@ 0x70
 8008366:	d87b      	bhi.n	8008460 <HAL_TIM_ConfigClockSource+0x1f0>
 8008368:	2b60      	cmp	r3, #96	@ 0x60
 800836a:	d050      	beq.n	800840e <HAL_TIM_ConfigClockSource+0x19e>
 800836c:	2b60      	cmp	r3, #96	@ 0x60
 800836e:	d877      	bhi.n	8008460 <HAL_TIM_ConfigClockSource+0x1f0>
 8008370:	2b50      	cmp	r3, #80	@ 0x50
 8008372:	d03c      	beq.n	80083ee <HAL_TIM_ConfigClockSource+0x17e>
 8008374:	2b50      	cmp	r3, #80	@ 0x50
 8008376:	d873      	bhi.n	8008460 <HAL_TIM_ConfigClockSource+0x1f0>
 8008378:	2b40      	cmp	r3, #64	@ 0x40
 800837a:	d058      	beq.n	800842e <HAL_TIM_ConfigClockSource+0x1be>
 800837c:	2b40      	cmp	r3, #64	@ 0x40
 800837e:	d86f      	bhi.n	8008460 <HAL_TIM_ConfigClockSource+0x1f0>
 8008380:	2b30      	cmp	r3, #48	@ 0x30
 8008382:	d064      	beq.n	800844e <HAL_TIM_ConfigClockSource+0x1de>
 8008384:	2b30      	cmp	r3, #48	@ 0x30
 8008386:	d86b      	bhi.n	8008460 <HAL_TIM_ConfigClockSource+0x1f0>
 8008388:	2b20      	cmp	r3, #32
 800838a:	d060      	beq.n	800844e <HAL_TIM_ConfigClockSource+0x1de>
 800838c:	2b20      	cmp	r3, #32
 800838e:	d867      	bhi.n	8008460 <HAL_TIM_ConfigClockSource+0x1f0>
 8008390:	2b00      	cmp	r3, #0
 8008392:	d05c      	beq.n	800844e <HAL_TIM_ConfigClockSource+0x1de>
 8008394:	2b10      	cmp	r3, #16
 8008396:	d05a      	beq.n	800844e <HAL_TIM_ConfigClockSource+0x1de>
 8008398:	e062      	b.n	8008460 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80083aa:	f000 f9cf 	bl	800874c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80083bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	609a      	str	r2, [r3, #8]
      break;
 80083c6:	e04f      	b.n	8008468 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80083d8:	f000 f9b8 	bl	800874c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	689a      	ldr	r2, [r3, #8]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80083ea:	609a      	str	r2, [r3, #8]
      break;
 80083ec:	e03c      	b.n	8008468 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083fa:	461a      	mov	r2, r3
 80083fc:	f000 f92a 	bl	8008654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2150      	movs	r1, #80	@ 0x50
 8008406:	4618      	mov	r0, r3
 8008408:	f000 f983 	bl	8008712 <TIM_ITRx_SetConfig>
      break;
 800840c:	e02c      	b.n	8008468 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800841a:	461a      	mov	r2, r3
 800841c:	f000 f949 	bl	80086b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2160      	movs	r1, #96	@ 0x60
 8008426:	4618      	mov	r0, r3
 8008428:	f000 f973 	bl	8008712 <TIM_ITRx_SetConfig>
      break;
 800842c:	e01c      	b.n	8008468 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800843a:	461a      	mov	r2, r3
 800843c:	f000 f90a 	bl	8008654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2140      	movs	r1, #64	@ 0x40
 8008446:	4618      	mov	r0, r3
 8008448:	f000 f963 	bl	8008712 <TIM_ITRx_SetConfig>
      break;
 800844c:	e00c      	b.n	8008468 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4619      	mov	r1, r3
 8008458:	4610      	mov	r0, r2
 800845a:	f000 f95a 	bl	8008712 <TIM_ITRx_SetConfig>
      break;
 800845e:	e003      	b.n	8008468 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	73fb      	strb	r3, [r7, #15]
      break;
 8008464:	e000      	b.n	8008468 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008466:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008478:	7bfb      	ldrb	r3, [r7, #15]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	00100070 	.word	0x00100070
 8008488:	00100060 	.word	0x00100060
 800848c:	00100050 	.word	0x00100050
 8008490:	00100040 	.word	0x00100040
 8008494:	00100030 	.word	0x00100030
 8008498:	00100020 	.word	0x00100020

0800849c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084a4:	bf00      	nop
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084b8:	bf00      	nop
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084cc:	bf00      	nop
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a4c      	ldr	r2, [pc, #304]	@ (8008630 <TIM_Base_SetConfig+0x144>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d017      	beq.n	8008534 <TIM_Base_SetConfig+0x48>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800850a:	d013      	beq.n	8008534 <TIM_Base_SetConfig+0x48>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a49      	ldr	r2, [pc, #292]	@ (8008634 <TIM_Base_SetConfig+0x148>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d00f      	beq.n	8008534 <TIM_Base_SetConfig+0x48>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a48      	ldr	r2, [pc, #288]	@ (8008638 <TIM_Base_SetConfig+0x14c>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d00b      	beq.n	8008534 <TIM_Base_SetConfig+0x48>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a47      	ldr	r2, [pc, #284]	@ (800863c <TIM_Base_SetConfig+0x150>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d007      	beq.n	8008534 <TIM_Base_SetConfig+0x48>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a46      	ldr	r2, [pc, #280]	@ (8008640 <TIM_Base_SetConfig+0x154>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d003      	beq.n	8008534 <TIM_Base_SetConfig+0x48>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a45      	ldr	r2, [pc, #276]	@ (8008644 <TIM_Base_SetConfig+0x158>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d108      	bne.n	8008546 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800853a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	4313      	orrs	r3, r2
 8008544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a39      	ldr	r2, [pc, #228]	@ (8008630 <TIM_Base_SetConfig+0x144>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d023      	beq.n	8008596 <TIM_Base_SetConfig+0xaa>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008554:	d01f      	beq.n	8008596 <TIM_Base_SetConfig+0xaa>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a36      	ldr	r2, [pc, #216]	@ (8008634 <TIM_Base_SetConfig+0x148>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d01b      	beq.n	8008596 <TIM_Base_SetConfig+0xaa>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a35      	ldr	r2, [pc, #212]	@ (8008638 <TIM_Base_SetConfig+0x14c>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d017      	beq.n	8008596 <TIM_Base_SetConfig+0xaa>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a34      	ldr	r2, [pc, #208]	@ (800863c <TIM_Base_SetConfig+0x150>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d013      	beq.n	8008596 <TIM_Base_SetConfig+0xaa>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a33      	ldr	r2, [pc, #204]	@ (8008640 <TIM_Base_SetConfig+0x154>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d00f      	beq.n	8008596 <TIM_Base_SetConfig+0xaa>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a33      	ldr	r2, [pc, #204]	@ (8008648 <TIM_Base_SetConfig+0x15c>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d00b      	beq.n	8008596 <TIM_Base_SetConfig+0xaa>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a32      	ldr	r2, [pc, #200]	@ (800864c <TIM_Base_SetConfig+0x160>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d007      	beq.n	8008596 <TIM_Base_SetConfig+0xaa>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a31      	ldr	r2, [pc, #196]	@ (8008650 <TIM_Base_SetConfig+0x164>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d003      	beq.n	8008596 <TIM_Base_SetConfig+0xaa>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a2c      	ldr	r2, [pc, #176]	@ (8008644 <TIM_Base_SetConfig+0x158>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d108      	bne.n	80085a8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800859c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	689a      	ldr	r2, [r3, #8]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a18      	ldr	r2, [pc, #96]	@ (8008630 <TIM_Base_SetConfig+0x144>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d013      	beq.n	80085fc <TIM_Base_SetConfig+0x110>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a1a      	ldr	r2, [pc, #104]	@ (8008640 <TIM_Base_SetConfig+0x154>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d00f      	beq.n	80085fc <TIM_Base_SetConfig+0x110>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a1a      	ldr	r2, [pc, #104]	@ (8008648 <TIM_Base_SetConfig+0x15c>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d00b      	beq.n	80085fc <TIM_Base_SetConfig+0x110>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a19      	ldr	r2, [pc, #100]	@ (800864c <TIM_Base_SetConfig+0x160>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d007      	beq.n	80085fc <TIM_Base_SetConfig+0x110>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a18      	ldr	r2, [pc, #96]	@ (8008650 <TIM_Base_SetConfig+0x164>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d003      	beq.n	80085fc <TIM_Base_SetConfig+0x110>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a13      	ldr	r2, [pc, #76]	@ (8008644 <TIM_Base_SetConfig+0x158>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d103      	bne.n	8008604 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	691a      	ldr	r2, [r3, #16]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	f003 0301 	and.w	r3, r3, #1
 8008612:	2b01      	cmp	r3, #1
 8008614:	d105      	bne.n	8008622 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	f023 0201 	bic.w	r2, r3, #1
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	611a      	str	r2, [r3, #16]
  }
}
 8008622:	bf00      	nop
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	40012c00 	.word	0x40012c00
 8008634:	40000400 	.word	0x40000400
 8008638:	40000800 	.word	0x40000800
 800863c:	40000c00 	.word	0x40000c00
 8008640:	40013400 	.word	0x40013400
 8008644:	40015000 	.word	0x40015000
 8008648:	40014000 	.word	0x40014000
 800864c:	40014400 	.word	0x40014400
 8008650:	40014800 	.word	0x40014800

08008654 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008654:	b480      	push	{r7}
 8008656:	b087      	sub	sp, #28
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6a1b      	ldr	r3, [r3, #32]
 8008664:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	f023 0201 	bic.w	r2, r3, #1
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800867e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	011b      	lsls	r3, r3, #4
 8008684:	693a      	ldr	r2, [r7, #16]
 8008686:	4313      	orrs	r3, r2
 8008688:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	f023 030a 	bic.w	r3, r3, #10
 8008690:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008692:	697a      	ldr	r2, [r7, #20]
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	4313      	orrs	r3, r2
 8008698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	621a      	str	r2, [r3, #32]
}
 80086a6:	bf00      	nop
 80086a8:	371c      	adds	r7, #28
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr

080086b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086b2:	b480      	push	{r7}
 80086b4:	b087      	sub	sp, #28
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	60f8      	str	r0, [r7, #12]
 80086ba:	60b9      	str	r1, [r7, #8]
 80086bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6a1b      	ldr	r3, [r3, #32]
 80086c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6a1b      	ldr	r3, [r3, #32]
 80086c8:	f023 0210 	bic.w	r2, r3, #16
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	699b      	ldr	r3, [r3, #24]
 80086d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80086dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	031b      	lsls	r3, r3, #12
 80086e2:	693a      	ldr	r2, [r7, #16]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80086ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	011b      	lsls	r3, r3, #4
 80086f4:	697a      	ldr	r2, [r7, #20]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	693a      	ldr	r2, [r7, #16]
 80086fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	621a      	str	r2, [r3, #32]
}
 8008706:	bf00      	nop
 8008708:	371c      	adds	r7, #28
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr

08008712 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008712:	b480      	push	{r7}
 8008714:	b085      	sub	sp, #20
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
 800871a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008728:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800872c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	4313      	orrs	r3, r2
 8008734:	f043 0307 	orr.w	r3, r3, #7
 8008738:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	609a      	str	r2, [r3, #8]
}
 8008740:	bf00      	nop
 8008742:	3714      	adds	r7, #20
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800874c:	b480      	push	{r7}
 800874e:	b087      	sub	sp, #28
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
 8008758:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008766:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	021a      	lsls	r2, r3, #8
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	431a      	orrs	r2, r3
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	4313      	orrs	r3, r2
 8008774:	697a      	ldr	r2, [r7, #20]
 8008776:	4313      	orrs	r3, r2
 8008778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	697a      	ldr	r2, [r7, #20]
 800877e:	609a      	str	r2, [r3, #8]
}
 8008780:	bf00      	nop
 8008782:	371c      	adds	r7, #28
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800879c:	2b01      	cmp	r3, #1
 800879e:	d101      	bne.n	80087a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087a0:	2302      	movs	r3, #2
 80087a2:	e074      	b.n	800888e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2202      	movs	r2, #2
 80087b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a34      	ldr	r2, [pc, #208]	@ (800889c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d009      	beq.n	80087e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a33      	ldr	r2, [pc, #204]	@ (80088a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d004      	beq.n	80087e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a31      	ldr	r2, [pc, #196]	@ (80088a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d108      	bne.n	80087f4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80087e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80087fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	4313      	orrs	r3, r2
 8008808:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a21      	ldr	r2, [pc, #132]	@ (800889c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d022      	beq.n	8008862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008824:	d01d      	beq.n	8008862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a1f      	ldr	r2, [pc, #124]	@ (80088a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d018      	beq.n	8008862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a1d      	ldr	r2, [pc, #116]	@ (80088ac <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d013      	beq.n	8008862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a1c      	ldr	r2, [pc, #112]	@ (80088b0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d00e      	beq.n	8008862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a15      	ldr	r2, [pc, #84]	@ (80088a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d009      	beq.n	8008862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a18      	ldr	r2, [pc, #96]	@ (80088b4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d004      	beq.n	8008862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a11      	ldr	r2, [pc, #68]	@ (80088a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d10c      	bne.n	800887c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008868:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	68ba      	ldr	r2, [r7, #8]
 8008870:	4313      	orrs	r3, r2
 8008872:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68ba      	ldr	r2, [r7, #8]
 800887a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3714      	adds	r7, #20
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	40012c00 	.word	0x40012c00
 80088a0:	40013400 	.word	0x40013400
 80088a4:	40015000 	.word	0x40015000
 80088a8:	40000400 	.word	0x40000400
 80088ac:	40000800 	.word	0x40000800
 80088b0:	40000c00 	.word	0x40000c00
 80088b4:	40014000 	.word	0x40014000

080088b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088d4:	bf00      	nop
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80088e8:	bf00      	nop
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80088fc:	bf00      	nop
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008924:	bf00      	nop
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d101      	bne.n	8008956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e042      	b.n	80089dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800895c:	2b00      	cmp	r3, #0
 800895e:	d106      	bne.n	800896e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f7f8 fe31 	bl	80015d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2224      	movs	r2, #36	@ 0x24
 8008972:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f022 0201 	bic.w	r2, r2, #1
 8008984:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800898a:	2b00      	cmp	r3, #0
 800898c:	d002      	beq.n	8008994 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fe68 	bl	8009664 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fb69 	bl	800906c <UART_SetConfig>
 800899a:	4603      	mov	r3, r0
 800899c:	2b01      	cmp	r3, #1
 800899e:	d101      	bne.n	80089a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	e01b      	b.n	80089dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	685a      	ldr	r2, [r3, #4]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80089b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	689a      	ldr	r2, [r3, #8]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80089c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f042 0201 	orr.w	r2, r2, #1
 80089d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 fee7 	bl	80097a8 <UART_CheckIdleState>
 80089da:	4603      	mov	r3, r0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b0ba      	sub	sp, #232	@ 0xe8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	69db      	ldr	r3, [r3, #28]
 80089f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008a0e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008a12:	4013      	ands	r3, r2
 8008a14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008a18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d11b      	bne.n	8008a58 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a24:	f003 0320 	and.w	r3, r3, #32
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d015      	beq.n	8008a58 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a30:	f003 0320 	and.w	r3, r3, #32
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d105      	bne.n	8008a44 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d009      	beq.n	8008a58 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f000 82e3 	beq.w	8009014 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	4798      	blx	r3
      }
      return;
 8008a56:	e2dd      	b.n	8009014 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008a58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f000 8123 	beq.w	8008ca8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008a62:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008a66:	4b8d      	ldr	r3, [pc, #564]	@ (8008c9c <HAL_UART_IRQHandler+0x2b8>)
 8008a68:	4013      	ands	r3, r2
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d106      	bne.n	8008a7c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008a6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008a72:	4b8b      	ldr	r3, [pc, #556]	@ (8008ca0 <HAL_UART_IRQHandler+0x2bc>)
 8008a74:	4013      	ands	r3, r2
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f000 8116 	beq.w	8008ca8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a80:	f003 0301 	and.w	r3, r3, #1
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d011      	beq.n	8008aac <HAL_UART_IRQHandler+0xc8>
 8008a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00b      	beq.n	8008aac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aa2:	f043 0201 	orr.w	r2, r3, #1
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ab0:	f003 0302 	and.w	r3, r3, #2
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d011      	beq.n	8008adc <HAL_UART_IRQHandler+0xf8>
 8008ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00b      	beq.n	8008adc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2202      	movs	r2, #2
 8008aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ad2:	f043 0204 	orr.w	r2, r3, #4
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ae0:	f003 0304 	and.w	r3, r3, #4
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d011      	beq.n	8008b0c <HAL_UART_IRQHandler+0x128>
 8008ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008aec:	f003 0301 	and.w	r3, r3, #1
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00b      	beq.n	8008b0c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2204      	movs	r2, #4
 8008afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b02:	f043 0202 	orr.w	r2, r3, #2
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b10:	f003 0308 	and.w	r3, r3, #8
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d017      	beq.n	8008b48 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b1c:	f003 0320 	and.w	r3, r3, #32
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d105      	bne.n	8008b30 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008b24:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008b28:	4b5c      	ldr	r3, [pc, #368]	@ (8008c9c <HAL_UART_IRQHandler+0x2b8>)
 8008b2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00b      	beq.n	8008b48 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2208      	movs	r2, #8
 8008b36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b3e:	f043 0208 	orr.w	r2, r3, #8
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d012      	beq.n	8008b7a <HAL_UART_IRQHandler+0x196>
 8008b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b58:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00c      	beq.n	8008b7a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b70:	f043 0220 	orr.w	r2, r3, #32
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 8249 	beq.w	8009018 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b8a:	f003 0320 	and.w	r3, r3, #32
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d013      	beq.n	8008bba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b96:	f003 0320 	and.w	r3, r3, #32
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d105      	bne.n	8008baa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d007      	beq.n	8008bba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d003      	beq.n	8008bba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bc0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bce:	2b40      	cmp	r3, #64	@ 0x40
 8008bd0:	d005      	beq.n	8008bde <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008bd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008bd6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d054      	beq.n	8008c88 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 fef9 	bl	80099d6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bee:	2b40      	cmp	r3, #64	@ 0x40
 8008bf0:	d146      	bne.n	8008c80 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	3308      	adds	r3, #8
 8008bf8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c00:	e853 3f00 	ldrex	r3, [r3]
 8008c04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	3308      	adds	r3, #8
 8008c1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008c1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008c22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008c2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008c2e:	e841 2300 	strex	r3, r2, [r1]
 8008c32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d1d9      	bne.n	8008bf2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d017      	beq.n	8008c78 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c4e:	4a15      	ldr	r2, [pc, #84]	@ (8008ca4 <HAL_UART_IRQHandler+0x2c0>)
 8008c50:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7fb f8b0 	bl	8003dbe <HAL_DMA_Abort_IT>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d019      	beq.n	8008c98 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008c72:	4610      	mov	r0, r2
 8008c74:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c76:	e00f      	b.n	8008c98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f9e1 	bl	8009040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c7e:	e00b      	b.n	8008c98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 f9dd 	bl	8009040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c86:	e007      	b.n	8008c98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 f9d9 	bl	8009040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008c96:	e1bf      	b.n	8009018 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c98:	bf00      	nop
    return;
 8008c9a:	e1bd      	b.n	8009018 <HAL_UART_IRQHandler+0x634>
 8008c9c:	10000001 	.word	0x10000001
 8008ca0:	04000120 	.word	0x04000120
 8008ca4:	08009aa3 	.word	0x08009aa3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	f040 8153 	bne.w	8008f58 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cb6:	f003 0310 	and.w	r3, r3, #16
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f000 814c 	beq.w	8008f58 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cc4:	f003 0310 	and.w	r3, r3, #16
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f000 8145 	beq.w	8008f58 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2210      	movs	r2, #16
 8008cd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ce0:	2b40      	cmp	r3, #64	@ 0x40
 8008ce2:	f040 80bb 	bne.w	8008e5c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008cf4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 818f 	beq.w	800901c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	f080 8187 	bcs.w	800901c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008d14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 0320 	and.w	r3, r3, #32
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	f040 8087 	bne.w	8008e3a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008d38:	e853 3f00 	ldrex	r3, [r3]
 8008d3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008d40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	461a      	mov	r2, r3
 8008d52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008d5a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008d62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d66:	e841 2300 	strex	r3, r2, [r1]
 8008d6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008d6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1da      	bne.n	8008d2c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	3308      	adds	r3, #8
 8008d7c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d80:	e853 3f00 	ldrex	r3, [r3]
 8008d84:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008d86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d88:	f023 0301 	bic.w	r3, r3, #1
 8008d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	3308      	adds	r3, #8
 8008d96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008d9a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008d9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008da2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008da6:	e841 2300 	strex	r3, r2, [r1]
 8008daa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008dac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1e1      	bne.n	8008d76 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	3308      	adds	r3, #8
 8008db8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008dbc:	e853 3f00 	ldrex	r3, [r3]
 8008dc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008dc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008dc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008dc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3308      	adds	r3, #8
 8008dd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008dd6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008dd8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dda:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008ddc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008dde:	e841 2300 	strex	r3, r2, [r1]
 8008de2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008de4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1e3      	bne.n	8008db2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2220      	movs	r2, #32
 8008dee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e00:	e853 3f00 	ldrex	r3, [r3]
 8008e04:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008e06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e08:	f023 0310 	bic.w	r3, r3, #16
 8008e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	461a      	mov	r2, r3
 8008e16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e1c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e22:	e841 2300 	strex	r3, r2, [r1]
 8008e26:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008e28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d1e4      	bne.n	8008df8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7fa ff69 	bl	8003d0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2202      	movs	r2, #2
 8008e3e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	1ad3      	subs	r3, r2, r3
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	4619      	mov	r1, r3
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f8fd 	bl	8009054 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008e5a:	e0df      	b.n	800901c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	1ad3      	subs	r3, r2, r3
 8008e6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f000 80d1 	beq.w	8009020 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8008e7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	f000 80cc 	beq.w	8009020 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e90:	e853 3f00 	ldrex	r3, [r3]
 8008e94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008eaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8008eac:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008eb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008eb2:	e841 2300 	strex	r3, r2, [r1]
 8008eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1e4      	bne.n	8008e88 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3308      	adds	r3, #8
 8008ec4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec8:	e853 3f00 	ldrex	r3, [r3]
 8008ecc:	623b      	str	r3, [r7, #32]
   return(result);
 8008ece:	6a3b      	ldr	r3, [r7, #32]
 8008ed0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ed4:	f023 0301 	bic.w	r3, r3, #1
 8008ed8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	3308      	adds	r3, #8
 8008ee2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008ee6:	633a      	str	r2, [r7, #48]	@ 0x30
 8008ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008eec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008eee:	e841 2300 	strex	r3, r2, [r1]
 8008ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1e1      	bne.n	8008ebe <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2220      	movs	r2, #32
 8008efe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	e853 3f00 	ldrex	r3, [r3]
 8008f1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f023 0310 	bic.w	r3, r3, #16
 8008f22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008f30:	61fb      	str	r3, [r7, #28]
 8008f32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f34:	69b9      	ldr	r1, [r7, #24]
 8008f36:	69fa      	ldr	r2, [r7, #28]
 8008f38:	e841 2300 	strex	r3, r2, [r1]
 8008f3c:	617b      	str	r3, [r7, #20]
   return(result);
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1e4      	bne.n	8008f0e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2202      	movs	r2, #2
 8008f48:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f87f 	bl	8009054 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f56:	e063      	b.n	8009020 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00e      	beq.n	8008f82 <HAL_UART_IRQHandler+0x59e>
 8008f64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d008      	beq.n	8008f82 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008f78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fdd2 	bl	8009b24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f80:	e051      	b.n	8009026 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d014      	beq.n	8008fb8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d105      	bne.n	8008fa6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d008      	beq.n	8008fb8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d03a      	beq.n	8009024 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	4798      	blx	r3
    }
    return;
 8008fb6:	e035      	b.n	8009024 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d009      	beq.n	8008fd8 <HAL_UART_IRQHandler+0x5f4>
 8008fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d003      	beq.n	8008fd8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 fd7c 	bl	8009ace <UART_EndTransmit_IT>
    return;
 8008fd6:	e026      	b.n	8009026 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d009      	beq.n	8008ff8 <HAL_UART_IRQHandler+0x614>
 8008fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fe8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d003      	beq.n	8008ff8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fdab 	bl	8009b4c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ff6:	e016      	b.n	8009026 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ffc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009000:	2b00      	cmp	r3, #0
 8009002:	d010      	beq.n	8009026 <HAL_UART_IRQHandler+0x642>
 8009004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009008:	2b00      	cmp	r3, #0
 800900a:	da0c      	bge.n	8009026 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 fd93 	bl	8009b38 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009012:	e008      	b.n	8009026 <HAL_UART_IRQHandler+0x642>
      return;
 8009014:	bf00      	nop
 8009016:	e006      	b.n	8009026 <HAL_UART_IRQHandler+0x642>
    return;
 8009018:	bf00      	nop
 800901a:	e004      	b.n	8009026 <HAL_UART_IRQHandler+0x642>
      return;
 800901c:	bf00      	nop
 800901e:	e002      	b.n	8009026 <HAL_UART_IRQHandler+0x642>
      return;
 8009020:	bf00      	nop
 8009022:	e000      	b.n	8009026 <HAL_UART_IRQHandler+0x642>
    return;
 8009024:	bf00      	nop
  }
}
 8009026:	37e8      	adds	r7, #232	@ 0xe8
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009034:	bf00      	nop
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009048:	bf00      	nop
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	460b      	mov	r3, r1
 800905e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800906c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009070:	b08c      	sub	sp, #48	@ 0x30
 8009072:	af00      	add	r7, sp, #0
 8009074:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009076:	2300      	movs	r3, #0
 8009078:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	689a      	ldr	r2, [r3, #8]
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	691b      	ldr	r3, [r3, #16]
 8009084:	431a      	orrs	r2, r3
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	695b      	ldr	r3, [r3, #20]
 800908a:	431a      	orrs	r2, r3
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	69db      	ldr	r3, [r3, #28]
 8009090:	4313      	orrs	r3, r2
 8009092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	4baa      	ldr	r3, [pc, #680]	@ (8009344 <UART_SetConfig+0x2d8>)
 800909c:	4013      	ands	r3, r2
 800909e:	697a      	ldr	r2, [r7, #20]
 80090a0:	6812      	ldr	r2, [r2, #0]
 80090a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090a4:	430b      	orrs	r3, r1
 80090a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	68da      	ldr	r2, [r3, #12]
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	430a      	orrs	r2, r1
 80090bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	699b      	ldr	r3, [r3, #24]
 80090c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a9f      	ldr	r2, [pc, #636]	@ (8009348 <UART_SetConfig+0x2dc>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d004      	beq.n	80090d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	6a1b      	ldr	r3, [r3, #32]
 80090d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090d4:	4313      	orrs	r3, r2
 80090d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80090e2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	6812      	ldr	r2, [r2, #0]
 80090ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090ec:	430b      	orrs	r3, r1
 80090ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f6:	f023 010f 	bic.w	r1, r3, #15
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	430a      	orrs	r2, r1
 8009104:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a90      	ldr	r2, [pc, #576]	@ (800934c <UART_SetConfig+0x2e0>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d125      	bne.n	800915c <UART_SetConfig+0xf0>
 8009110:	4b8f      	ldr	r3, [pc, #572]	@ (8009350 <UART_SetConfig+0x2e4>)
 8009112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009116:	f003 0303 	and.w	r3, r3, #3
 800911a:	2b03      	cmp	r3, #3
 800911c:	d81a      	bhi.n	8009154 <UART_SetConfig+0xe8>
 800911e:	a201      	add	r2, pc, #4	@ (adr r2, 8009124 <UART_SetConfig+0xb8>)
 8009120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009124:	08009135 	.word	0x08009135
 8009128:	08009145 	.word	0x08009145
 800912c:	0800913d 	.word	0x0800913d
 8009130:	0800914d 	.word	0x0800914d
 8009134:	2301      	movs	r3, #1
 8009136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800913a:	e116      	b.n	800936a <UART_SetConfig+0x2fe>
 800913c:	2302      	movs	r3, #2
 800913e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009142:	e112      	b.n	800936a <UART_SetConfig+0x2fe>
 8009144:	2304      	movs	r3, #4
 8009146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800914a:	e10e      	b.n	800936a <UART_SetConfig+0x2fe>
 800914c:	2308      	movs	r3, #8
 800914e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009152:	e10a      	b.n	800936a <UART_SetConfig+0x2fe>
 8009154:	2310      	movs	r3, #16
 8009156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800915a:	e106      	b.n	800936a <UART_SetConfig+0x2fe>
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a7c      	ldr	r2, [pc, #496]	@ (8009354 <UART_SetConfig+0x2e8>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d138      	bne.n	80091d8 <UART_SetConfig+0x16c>
 8009166:	4b7a      	ldr	r3, [pc, #488]	@ (8009350 <UART_SetConfig+0x2e4>)
 8009168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800916c:	f003 030c 	and.w	r3, r3, #12
 8009170:	2b0c      	cmp	r3, #12
 8009172:	d82d      	bhi.n	80091d0 <UART_SetConfig+0x164>
 8009174:	a201      	add	r2, pc, #4	@ (adr r2, 800917c <UART_SetConfig+0x110>)
 8009176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917a:	bf00      	nop
 800917c:	080091b1 	.word	0x080091b1
 8009180:	080091d1 	.word	0x080091d1
 8009184:	080091d1 	.word	0x080091d1
 8009188:	080091d1 	.word	0x080091d1
 800918c:	080091c1 	.word	0x080091c1
 8009190:	080091d1 	.word	0x080091d1
 8009194:	080091d1 	.word	0x080091d1
 8009198:	080091d1 	.word	0x080091d1
 800919c:	080091b9 	.word	0x080091b9
 80091a0:	080091d1 	.word	0x080091d1
 80091a4:	080091d1 	.word	0x080091d1
 80091a8:	080091d1 	.word	0x080091d1
 80091ac:	080091c9 	.word	0x080091c9
 80091b0:	2300      	movs	r3, #0
 80091b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091b6:	e0d8      	b.n	800936a <UART_SetConfig+0x2fe>
 80091b8:	2302      	movs	r3, #2
 80091ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091be:	e0d4      	b.n	800936a <UART_SetConfig+0x2fe>
 80091c0:	2304      	movs	r3, #4
 80091c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091c6:	e0d0      	b.n	800936a <UART_SetConfig+0x2fe>
 80091c8:	2308      	movs	r3, #8
 80091ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091ce:	e0cc      	b.n	800936a <UART_SetConfig+0x2fe>
 80091d0:	2310      	movs	r3, #16
 80091d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091d6:	e0c8      	b.n	800936a <UART_SetConfig+0x2fe>
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a5e      	ldr	r2, [pc, #376]	@ (8009358 <UART_SetConfig+0x2ec>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d125      	bne.n	800922e <UART_SetConfig+0x1c2>
 80091e2:	4b5b      	ldr	r3, [pc, #364]	@ (8009350 <UART_SetConfig+0x2e4>)
 80091e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80091ec:	2b30      	cmp	r3, #48	@ 0x30
 80091ee:	d016      	beq.n	800921e <UART_SetConfig+0x1b2>
 80091f0:	2b30      	cmp	r3, #48	@ 0x30
 80091f2:	d818      	bhi.n	8009226 <UART_SetConfig+0x1ba>
 80091f4:	2b20      	cmp	r3, #32
 80091f6:	d00a      	beq.n	800920e <UART_SetConfig+0x1a2>
 80091f8:	2b20      	cmp	r3, #32
 80091fa:	d814      	bhi.n	8009226 <UART_SetConfig+0x1ba>
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d002      	beq.n	8009206 <UART_SetConfig+0x19a>
 8009200:	2b10      	cmp	r3, #16
 8009202:	d008      	beq.n	8009216 <UART_SetConfig+0x1aa>
 8009204:	e00f      	b.n	8009226 <UART_SetConfig+0x1ba>
 8009206:	2300      	movs	r3, #0
 8009208:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800920c:	e0ad      	b.n	800936a <UART_SetConfig+0x2fe>
 800920e:	2302      	movs	r3, #2
 8009210:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009214:	e0a9      	b.n	800936a <UART_SetConfig+0x2fe>
 8009216:	2304      	movs	r3, #4
 8009218:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800921c:	e0a5      	b.n	800936a <UART_SetConfig+0x2fe>
 800921e:	2308      	movs	r3, #8
 8009220:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009224:	e0a1      	b.n	800936a <UART_SetConfig+0x2fe>
 8009226:	2310      	movs	r3, #16
 8009228:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800922c:	e09d      	b.n	800936a <UART_SetConfig+0x2fe>
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a4a      	ldr	r2, [pc, #296]	@ (800935c <UART_SetConfig+0x2f0>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d125      	bne.n	8009284 <UART_SetConfig+0x218>
 8009238:	4b45      	ldr	r3, [pc, #276]	@ (8009350 <UART_SetConfig+0x2e4>)
 800923a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800923e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009242:	2bc0      	cmp	r3, #192	@ 0xc0
 8009244:	d016      	beq.n	8009274 <UART_SetConfig+0x208>
 8009246:	2bc0      	cmp	r3, #192	@ 0xc0
 8009248:	d818      	bhi.n	800927c <UART_SetConfig+0x210>
 800924a:	2b80      	cmp	r3, #128	@ 0x80
 800924c:	d00a      	beq.n	8009264 <UART_SetConfig+0x1f8>
 800924e:	2b80      	cmp	r3, #128	@ 0x80
 8009250:	d814      	bhi.n	800927c <UART_SetConfig+0x210>
 8009252:	2b00      	cmp	r3, #0
 8009254:	d002      	beq.n	800925c <UART_SetConfig+0x1f0>
 8009256:	2b40      	cmp	r3, #64	@ 0x40
 8009258:	d008      	beq.n	800926c <UART_SetConfig+0x200>
 800925a:	e00f      	b.n	800927c <UART_SetConfig+0x210>
 800925c:	2300      	movs	r3, #0
 800925e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009262:	e082      	b.n	800936a <UART_SetConfig+0x2fe>
 8009264:	2302      	movs	r3, #2
 8009266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800926a:	e07e      	b.n	800936a <UART_SetConfig+0x2fe>
 800926c:	2304      	movs	r3, #4
 800926e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009272:	e07a      	b.n	800936a <UART_SetConfig+0x2fe>
 8009274:	2308      	movs	r3, #8
 8009276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800927a:	e076      	b.n	800936a <UART_SetConfig+0x2fe>
 800927c:	2310      	movs	r3, #16
 800927e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009282:	e072      	b.n	800936a <UART_SetConfig+0x2fe>
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a35      	ldr	r2, [pc, #212]	@ (8009360 <UART_SetConfig+0x2f4>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d12a      	bne.n	80092e4 <UART_SetConfig+0x278>
 800928e:	4b30      	ldr	r3, [pc, #192]	@ (8009350 <UART_SetConfig+0x2e4>)
 8009290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009294:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009298:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800929c:	d01a      	beq.n	80092d4 <UART_SetConfig+0x268>
 800929e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092a2:	d81b      	bhi.n	80092dc <UART_SetConfig+0x270>
 80092a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092a8:	d00c      	beq.n	80092c4 <UART_SetConfig+0x258>
 80092aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092ae:	d815      	bhi.n	80092dc <UART_SetConfig+0x270>
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d003      	beq.n	80092bc <UART_SetConfig+0x250>
 80092b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092b8:	d008      	beq.n	80092cc <UART_SetConfig+0x260>
 80092ba:	e00f      	b.n	80092dc <UART_SetConfig+0x270>
 80092bc:	2300      	movs	r3, #0
 80092be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092c2:	e052      	b.n	800936a <UART_SetConfig+0x2fe>
 80092c4:	2302      	movs	r3, #2
 80092c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092ca:	e04e      	b.n	800936a <UART_SetConfig+0x2fe>
 80092cc:	2304      	movs	r3, #4
 80092ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092d2:	e04a      	b.n	800936a <UART_SetConfig+0x2fe>
 80092d4:	2308      	movs	r3, #8
 80092d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092da:	e046      	b.n	800936a <UART_SetConfig+0x2fe>
 80092dc:	2310      	movs	r3, #16
 80092de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092e2:	e042      	b.n	800936a <UART_SetConfig+0x2fe>
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a17      	ldr	r2, [pc, #92]	@ (8009348 <UART_SetConfig+0x2dc>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d13a      	bne.n	8009364 <UART_SetConfig+0x2f8>
 80092ee:	4b18      	ldr	r3, [pc, #96]	@ (8009350 <UART_SetConfig+0x2e4>)
 80092f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80092f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80092fc:	d01a      	beq.n	8009334 <UART_SetConfig+0x2c8>
 80092fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009302:	d81b      	bhi.n	800933c <UART_SetConfig+0x2d0>
 8009304:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009308:	d00c      	beq.n	8009324 <UART_SetConfig+0x2b8>
 800930a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800930e:	d815      	bhi.n	800933c <UART_SetConfig+0x2d0>
 8009310:	2b00      	cmp	r3, #0
 8009312:	d003      	beq.n	800931c <UART_SetConfig+0x2b0>
 8009314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009318:	d008      	beq.n	800932c <UART_SetConfig+0x2c0>
 800931a:	e00f      	b.n	800933c <UART_SetConfig+0x2d0>
 800931c:	2300      	movs	r3, #0
 800931e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009322:	e022      	b.n	800936a <UART_SetConfig+0x2fe>
 8009324:	2302      	movs	r3, #2
 8009326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800932a:	e01e      	b.n	800936a <UART_SetConfig+0x2fe>
 800932c:	2304      	movs	r3, #4
 800932e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009332:	e01a      	b.n	800936a <UART_SetConfig+0x2fe>
 8009334:	2308      	movs	r3, #8
 8009336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800933a:	e016      	b.n	800936a <UART_SetConfig+0x2fe>
 800933c:	2310      	movs	r3, #16
 800933e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009342:	e012      	b.n	800936a <UART_SetConfig+0x2fe>
 8009344:	cfff69f3 	.word	0xcfff69f3
 8009348:	40008000 	.word	0x40008000
 800934c:	40013800 	.word	0x40013800
 8009350:	40021000 	.word	0x40021000
 8009354:	40004400 	.word	0x40004400
 8009358:	40004800 	.word	0x40004800
 800935c:	40004c00 	.word	0x40004c00
 8009360:	40005000 	.word	0x40005000
 8009364:	2310      	movs	r3, #16
 8009366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4aae      	ldr	r2, [pc, #696]	@ (8009628 <UART_SetConfig+0x5bc>)
 8009370:	4293      	cmp	r3, r2
 8009372:	f040 8097 	bne.w	80094a4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009376:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800937a:	2b08      	cmp	r3, #8
 800937c:	d823      	bhi.n	80093c6 <UART_SetConfig+0x35a>
 800937e:	a201      	add	r2, pc, #4	@ (adr r2, 8009384 <UART_SetConfig+0x318>)
 8009380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009384:	080093a9 	.word	0x080093a9
 8009388:	080093c7 	.word	0x080093c7
 800938c:	080093b1 	.word	0x080093b1
 8009390:	080093c7 	.word	0x080093c7
 8009394:	080093b7 	.word	0x080093b7
 8009398:	080093c7 	.word	0x080093c7
 800939c:	080093c7 	.word	0x080093c7
 80093a0:	080093c7 	.word	0x080093c7
 80093a4:	080093bf 	.word	0x080093bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093a8:	f7fe fa82 	bl	80078b0 <HAL_RCC_GetPCLK1Freq>
 80093ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093ae:	e010      	b.n	80093d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093b0:	4b9e      	ldr	r3, [pc, #632]	@ (800962c <UART_SetConfig+0x5c0>)
 80093b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80093b4:	e00d      	b.n	80093d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093b6:	f7fe fa0d 	bl	80077d4 <HAL_RCC_GetSysClockFreq>
 80093ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093bc:	e009      	b.n	80093d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80093c4:	e005      	b.n	80093d2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80093c6:	2300      	movs	r3, #0
 80093c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80093d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80093d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f000 8130 	beq.w	800963a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093de:	4a94      	ldr	r2, [pc, #592]	@ (8009630 <UART_SetConfig+0x5c4>)
 80093e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093e4:	461a      	mov	r2, r3
 80093e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80093ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	685a      	ldr	r2, [r3, #4]
 80093f2:	4613      	mov	r3, r2
 80093f4:	005b      	lsls	r3, r3, #1
 80093f6:	4413      	add	r3, r2
 80093f8:	69ba      	ldr	r2, [r7, #24]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d305      	bcc.n	800940a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009404:	69ba      	ldr	r2, [r7, #24]
 8009406:	429a      	cmp	r2, r3
 8009408:	d903      	bls.n	8009412 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009410:	e113      	b.n	800963a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009414:	2200      	movs	r2, #0
 8009416:	60bb      	str	r3, [r7, #8]
 8009418:	60fa      	str	r2, [r7, #12]
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800941e:	4a84      	ldr	r2, [pc, #528]	@ (8009630 <UART_SetConfig+0x5c4>)
 8009420:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009424:	b29b      	uxth	r3, r3
 8009426:	2200      	movs	r2, #0
 8009428:	603b      	str	r3, [r7, #0]
 800942a:	607a      	str	r2, [r7, #4]
 800942c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009430:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009434:	f7f6 fef0 	bl	8000218 <__aeabi_uldivmod>
 8009438:	4602      	mov	r2, r0
 800943a:	460b      	mov	r3, r1
 800943c:	4610      	mov	r0, r2
 800943e:	4619      	mov	r1, r3
 8009440:	f04f 0200 	mov.w	r2, #0
 8009444:	f04f 0300 	mov.w	r3, #0
 8009448:	020b      	lsls	r3, r1, #8
 800944a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800944e:	0202      	lsls	r2, r0, #8
 8009450:	6979      	ldr	r1, [r7, #20]
 8009452:	6849      	ldr	r1, [r1, #4]
 8009454:	0849      	lsrs	r1, r1, #1
 8009456:	2000      	movs	r0, #0
 8009458:	460c      	mov	r4, r1
 800945a:	4605      	mov	r5, r0
 800945c:	eb12 0804 	adds.w	r8, r2, r4
 8009460:	eb43 0905 	adc.w	r9, r3, r5
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	469a      	mov	sl, r3
 800946c:	4693      	mov	fp, r2
 800946e:	4652      	mov	r2, sl
 8009470:	465b      	mov	r3, fp
 8009472:	4640      	mov	r0, r8
 8009474:	4649      	mov	r1, r9
 8009476:	f7f6 fecf 	bl	8000218 <__aeabi_uldivmod>
 800947a:	4602      	mov	r2, r0
 800947c:	460b      	mov	r3, r1
 800947e:	4613      	mov	r3, r2
 8009480:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009482:	6a3b      	ldr	r3, [r7, #32]
 8009484:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009488:	d308      	bcc.n	800949c <UART_SetConfig+0x430>
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009490:	d204      	bcs.n	800949c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	6a3a      	ldr	r2, [r7, #32]
 8009498:	60da      	str	r2, [r3, #12]
 800949a:	e0ce      	b.n	800963a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80094a2:	e0ca      	b.n	800963a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	69db      	ldr	r3, [r3, #28]
 80094a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094ac:	d166      	bne.n	800957c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80094ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80094b2:	2b08      	cmp	r3, #8
 80094b4:	d827      	bhi.n	8009506 <UART_SetConfig+0x49a>
 80094b6:	a201      	add	r2, pc, #4	@ (adr r2, 80094bc <UART_SetConfig+0x450>)
 80094b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094bc:	080094e1 	.word	0x080094e1
 80094c0:	080094e9 	.word	0x080094e9
 80094c4:	080094f1 	.word	0x080094f1
 80094c8:	08009507 	.word	0x08009507
 80094cc:	080094f7 	.word	0x080094f7
 80094d0:	08009507 	.word	0x08009507
 80094d4:	08009507 	.word	0x08009507
 80094d8:	08009507 	.word	0x08009507
 80094dc:	080094ff 	.word	0x080094ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094e0:	f7fe f9e6 	bl	80078b0 <HAL_RCC_GetPCLK1Freq>
 80094e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80094e6:	e014      	b.n	8009512 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094e8:	f7fe f9f8 	bl	80078dc <HAL_RCC_GetPCLK2Freq>
 80094ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80094ee:	e010      	b.n	8009512 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80094f0:	4b4e      	ldr	r3, [pc, #312]	@ (800962c <UART_SetConfig+0x5c0>)
 80094f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80094f4:	e00d      	b.n	8009512 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094f6:	f7fe f96d 	bl	80077d4 <HAL_RCC_GetSysClockFreq>
 80094fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80094fc:	e009      	b.n	8009512 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009502:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009504:	e005      	b.n	8009512 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009506:	2300      	movs	r3, #0
 8009508:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009510:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 8090 	beq.w	800963a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800951e:	4a44      	ldr	r2, [pc, #272]	@ (8009630 <UART_SetConfig+0x5c4>)
 8009520:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009524:	461a      	mov	r2, r3
 8009526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009528:	fbb3 f3f2 	udiv	r3, r3, r2
 800952c:	005a      	lsls	r2, r3, #1
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	085b      	lsrs	r3, r3, #1
 8009534:	441a      	add	r2, r3
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	fbb2 f3f3 	udiv	r3, r2, r3
 800953e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009540:	6a3b      	ldr	r3, [r7, #32]
 8009542:	2b0f      	cmp	r3, #15
 8009544:	d916      	bls.n	8009574 <UART_SetConfig+0x508>
 8009546:	6a3b      	ldr	r3, [r7, #32]
 8009548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800954c:	d212      	bcs.n	8009574 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800954e:	6a3b      	ldr	r3, [r7, #32]
 8009550:	b29b      	uxth	r3, r3
 8009552:	f023 030f 	bic.w	r3, r3, #15
 8009556:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009558:	6a3b      	ldr	r3, [r7, #32]
 800955a:	085b      	lsrs	r3, r3, #1
 800955c:	b29b      	uxth	r3, r3
 800955e:	f003 0307 	and.w	r3, r3, #7
 8009562:	b29a      	uxth	r2, r3
 8009564:	8bfb      	ldrh	r3, [r7, #30]
 8009566:	4313      	orrs	r3, r2
 8009568:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	8bfa      	ldrh	r2, [r7, #30]
 8009570:	60da      	str	r2, [r3, #12]
 8009572:	e062      	b.n	800963a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800957a:	e05e      	b.n	800963a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800957c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009580:	2b08      	cmp	r3, #8
 8009582:	d828      	bhi.n	80095d6 <UART_SetConfig+0x56a>
 8009584:	a201      	add	r2, pc, #4	@ (adr r2, 800958c <UART_SetConfig+0x520>)
 8009586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800958a:	bf00      	nop
 800958c:	080095b1 	.word	0x080095b1
 8009590:	080095b9 	.word	0x080095b9
 8009594:	080095c1 	.word	0x080095c1
 8009598:	080095d7 	.word	0x080095d7
 800959c:	080095c7 	.word	0x080095c7
 80095a0:	080095d7 	.word	0x080095d7
 80095a4:	080095d7 	.word	0x080095d7
 80095a8:	080095d7 	.word	0x080095d7
 80095ac:	080095cf 	.word	0x080095cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095b0:	f7fe f97e 	bl	80078b0 <HAL_RCC_GetPCLK1Freq>
 80095b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80095b6:	e014      	b.n	80095e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095b8:	f7fe f990 	bl	80078dc <HAL_RCC_GetPCLK2Freq>
 80095bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80095be:	e010      	b.n	80095e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80095c0:	4b1a      	ldr	r3, [pc, #104]	@ (800962c <UART_SetConfig+0x5c0>)
 80095c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80095c4:	e00d      	b.n	80095e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80095c6:	f7fe f905 	bl	80077d4 <HAL_RCC_GetSysClockFreq>
 80095ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80095cc:	e009      	b.n	80095e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80095d4:	e005      	b.n	80095e2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80095d6:	2300      	movs	r3, #0
 80095d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80095e0:	bf00      	nop
    }

    if (pclk != 0U)
 80095e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d028      	beq.n	800963a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095ec:	4a10      	ldr	r2, [pc, #64]	@ (8009630 <UART_SetConfig+0x5c4>)
 80095ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095f2:	461a      	mov	r2, r3
 80095f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	085b      	lsrs	r3, r3, #1
 8009600:	441a      	add	r2, r3
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	fbb2 f3f3 	udiv	r3, r2, r3
 800960a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800960c:	6a3b      	ldr	r3, [r7, #32]
 800960e:	2b0f      	cmp	r3, #15
 8009610:	d910      	bls.n	8009634 <UART_SetConfig+0x5c8>
 8009612:	6a3b      	ldr	r3, [r7, #32]
 8009614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009618:	d20c      	bcs.n	8009634 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800961a:	6a3b      	ldr	r3, [r7, #32]
 800961c:	b29a      	uxth	r2, r3
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	60da      	str	r2, [r3, #12]
 8009624:	e009      	b.n	800963a <UART_SetConfig+0x5ce>
 8009626:	bf00      	nop
 8009628:	40008000 	.word	0x40008000
 800962c:	00f42400 	.word	0x00f42400
 8009630:	0800ba9c 	.word	0x0800ba9c
      }
      else
      {
        ret = HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	2201      	movs	r2, #1
 800963e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	2201      	movs	r2, #1
 8009646:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	2200      	movs	r2, #0
 800964e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	2200      	movs	r2, #0
 8009654:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009656:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800965a:	4618      	mov	r0, r3
 800965c:	3730      	adds	r7, #48	@ 0x30
 800965e:	46bd      	mov	sp, r7
 8009660:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009664 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009670:	f003 0308 	and.w	r3, r3, #8
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00a      	beq.n	800968e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	430a      	orrs	r2, r1
 800968c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009692:	f003 0301 	and.w	r3, r3, #1
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00a      	beq.n	80096b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	430a      	orrs	r2, r1
 80096ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096b4:	f003 0302 	and.w	r3, r3, #2
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00a      	beq.n	80096d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	430a      	orrs	r2, r1
 80096d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096d6:	f003 0304 	and.w	r3, r3, #4
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00a      	beq.n	80096f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	430a      	orrs	r2, r1
 80096f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096f8:	f003 0310 	and.w	r3, r3, #16
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d00a      	beq.n	8009716 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	430a      	orrs	r2, r1
 8009714:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800971a:	f003 0320 	and.w	r3, r3, #32
 800971e:	2b00      	cmp	r3, #0
 8009720:	d00a      	beq.n	8009738 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	430a      	orrs	r2, r1
 8009736:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800973c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009740:	2b00      	cmp	r3, #0
 8009742:	d01a      	beq.n	800977a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	430a      	orrs	r2, r1
 8009758:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800975e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009762:	d10a      	bne.n	800977a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	430a      	orrs	r2, r1
 8009778:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800977e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00a      	beq.n	800979c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	430a      	orrs	r2, r1
 800979a:	605a      	str	r2, [r3, #4]
  }
}
 800979c:	bf00      	nop
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b098      	sub	sp, #96	@ 0x60
 80097ac:	af02      	add	r7, sp, #8
 80097ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80097b8:	f7f8 f8d6 	bl	8001968 <HAL_GetTick>
 80097bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 0308 	and.w	r3, r3, #8
 80097c8:	2b08      	cmp	r3, #8
 80097ca:	d12f      	bne.n	800982c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80097d0:	9300      	str	r3, [sp, #0]
 80097d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097d4:	2200      	movs	r2, #0
 80097d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 f88e 	bl	80098fc <UART_WaitOnFlagUntilTimeout>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d022      	beq.n	800982c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ee:	e853 3f00 	ldrex	r3, [r3]
 80097f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80097f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	461a      	mov	r2, r3
 8009802:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009804:	647b      	str	r3, [r7, #68]	@ 0x44
 8009806:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009808:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800980a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800980c:	e841 2300 	strex	r3, r2, [r1]
 8009810:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009814:	2b00      	cmp	r3, #0
 8009816:	d1e6      	bne.n	80097e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2220      	movs	r2, #32
 800981c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009828:	2303      	movs	r3, #3
 800982a:	e063      	b.n	80098f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 0304 	and.w	r3, r3, #4
 8009836:	2b04      	cmp	r3, #4
 8009838:	d149      	bne.n	80098ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800983a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800983e:	9300      	str	r3, [sp, #0]
 8009840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009842:	2200      	movs	r2, #0
 8009844:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 f857 	bl	80098fc <UART_WaitOnFlagUntilTimeout>
 800984e:	4603      	mov	r3, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d03c      	beq.n	80098ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800985c:	e853 3f00 	ldrex	r3, [r3]
 8009860:	623b      	str	r3, [r7, #32]
   return(result);
 8009862:	6a3b      	ldr	r3, [r7, #32]
 8009864:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009868:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	461a      	mov	r2, r3
 8009870:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009872:	633b      	str	r3, [r7, #48]	@ 0x30
 8009874:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009876:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009878:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800987a:	e841 2300 	strex	r3, r2, [r1]
 800987e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1e6      	bne.n	8009854 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	3308      	adds	r3, #8
 800988c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	e853 3f00 	ldrex	r3, [r3]
 8009894:	60fb      	str	r3, [r7, #12]
   return(result);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f023 0301 	bic.w	r3, r3, #1
 800989c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	3308      	adds	r3, #8
 80098a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098a6:	61fa      	str	r2, [r7, #28]
 80098a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098aa:	69b9      	ldr	r1, [r7, #24]
 80098ac:	69fa      	ldr	r2, [r7, #28]
 80098ae:	e841 2300 	strex	r3, r2, [r1]
 80098b2:	617b      	str	r3, [r7, #20]
   return(result);
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1e5      	bne.n	8009886 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2220      	movs	r2, #32
 80098be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098ca:	2303      	movs	r3, #3
 80098cc:	e012      	b.n	80098f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2220      	movs	r2, #32
 80098d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2220      	movs	r2, #32
 80098da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3758      	adds	r7, #88	@ 0x58
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	603b      	str	r3, [r7, #0]
 8009908:	4613      	mov	r3, r2
 800990a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800990c:	e04f      	b.n	80099ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009914:	d04b      	beq.n	80099ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009916:	f7f8 f827 	bl	8001968 <HAL_GetTick>
 800991a:	4602      	mov	r2, r0
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	1ad3      	subs	r3, r2, r3
 8009920:	69ba      	ldr	r2, [r7, #24]
 8009922:	429a      	cmp	r2, r3
 8009924:	d302      	bcc.n	800992c <UART_WaitOnFlagUntilTimeout+0x30>
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d101      	bne.n	8009930 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800992c:	2303      	movs	r3, #3
 800992e:	e04e      	b.n	80099ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 0304 	and.w	r3, r3, #4
 800993a:	2b00      	cmp	r3, #0
 800993c:	d037      	beq.n	80099ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	2b80      	cmp	r3, #128	@ 0x80
 8009942:	d034      	beq.n	80099ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	2b40      	cmp	r3, #64	@ 0x40
 8009948:	d031      	beq.n	80099ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	69db      	ldr	r3, [r3, #28]
 8009950:	f003 0308 	and.w	r3, r3, #8
 8009954:	2b08      	cmp	r3, #8
 8009956:	d110      	bne.n	800997a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2208      	movs	r2, #8
 800995e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f000 f838 	bl	80099d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2208      	movs	r2, #8
 800996a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2200      	movs	r2, #0
 8009972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	e029      	b.n	80099ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	69db      	ldr	r3, [r3, #28]
 8009980:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009984:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009988:	d111      	bne.n	80099ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009992:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f000 f81e 	bl	80099d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2220      	movs	r2, #32
 800999e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2200      	movs	r2, #0
 80099a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80099aa:	2303      	movs	r3, #3
 80099ac:	e00f      	b.n	80099ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	69da      	ldr	r2, [r3, #28]
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	4013      	ands	r3, r2
 80099b8:	68ba      	ldr	r2, [r7, #8]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	bf0c      	ite	eq
 80099be:	2301      	moveq	r3, #1
 80099c0:	2300      	movne	r3, #0
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	461a      	mov	r2, r3
 80099c6:	79fb      	ldrb	r3, [r7, #7]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d0a0      	beq.n	800990e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099d6:	b480      	push	{r7}
 80099d8:	b095      	sub	sp, #84	@ 0x54
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099e6:	e853 3f00 	ldrex	r3, [r3]
 80099ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	461a      	mov	r2, r3
 80099fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80099fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a04:	e841 2300 	strex	r3, r2, [r1]
 8009a08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1e6      	bne.n	80099de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	3308      	adds	r3, #8
 8009a16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a18:	6a3b      	ldr	r3, [r7, #32]
 8009a1a:	e853 3f00 	ldrex	r3, [r3]
 8009a1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a26:	f023 0301 	bic.w	r3, r3, #1
 8009a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	3308      	adds	r3, #8
 8009a32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a3c:	e841 2300 	strex	r3, r2, [r1]
 8009a40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d1e3      	bne.n	8009a10 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d118      	bne.n	8009a82 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	e853 3f00 	ldrex	r3, [r3]
 8009a5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	f023 0310 	bic.w	r3, r3, #16
 8009a64:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a6e:	61bb      	str	r3, [r7, #24]
 8009a70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a72:	6979      	ldr	r1, [r7, #20]
 8009a74:	69ba      	ldr	r2, [r7, #24]
 8009a76:	e841 2300 	strex	r3, r2, [r1]
 8009a7a:	613b      	str	r3, [r7, #16]
   return(result);
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1e6      	bne.n	8009a50 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2220      	movs	r2, #32
 8009a86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009a96:	bf00      	nop
 8009a98:	3754      	adds	r7, #84	@ 0x54
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr

08009aa2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b084      	sub	sp, #16
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f7ff fabd 	bl	8009040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ac6:	bf00      	nop
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b088      	sub	sp, #32
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	e853 3f00 	ldrex	r3, [r3]
 8009ae2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009aea:	61fb      	str	r3, [r7, #28]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	461a      	mov	r2, r3
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	61bb      	str	r3, [r7, #24]
 8009af6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af8:	6979      	ldr	r1, [r7, #20]
 8009afa:	69ba      	ldr	r2, [r7, #24]
 8009afc:	e841 2300 	strex	r3, r2, [r1]
 8009b00:	613b      	str	r3, [r7, #16]
   return(result);
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1e6      	bne.n	8009ad6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2220      	movs	r2, #32
 8009b0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f7ff fa88 	bl	800902c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b1c:	bf00      	nop
 8009b1e:	3720      	adds	r7, #32
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009b40:	bf00      	nop
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d101      	bne.n	8009b76 <HAL_UARTEx_DisableFifoMode+0x16>
 8009b72:	2302      	movs	r3, #2
 8009b74:	e027      	b.n	8009bc6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2224      	movs	r2, #36	@ 0x24
 8009b82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f022 0201 	bic.w	r2, r2, #1
 8009b9c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009ba4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	68fa      	ldr	r2, [r7, #12]
 8009bb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2220      	movs	r2, #32
 8009bb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3714      	adds	r7, #20
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b084      	sub	sp, #16
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d101      	bne.n	8009bea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009be6:	2302      	movs	r3, #2
 8009be8:	e02d      	b.n	8009c46 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2201      	movs	r2, #1
 8009bee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2224      	movs	r2, #36	@ 0x24
 8009bf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f022 0201 	bic.w	r2, r2, #1
 8009c10:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	683a      	ldr	r2, [r7, #0]
 8009c22:	430a      	orrs	r2, r1
 8009c24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f850 	bl	8009ccc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2220      	movs	r2, #32
 8009c38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3710      	adds	r7, #16
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b084      	sub	sp, #16
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
 8009c56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d101      	bne.n	8009c66 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c62:	2302      	movs	r3, #2
 8009c64:	e02d      	b.n	8009cc2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2224      	movs	r2, #36	@ 0x24
 8009c72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f022 0201 	bic.w	r2, r2, #1
 8009c8c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	683a      	ldr	r2, [r7, #0]
 8009c9e:	430a      	orrs	r2, r1
 8009ca0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 f812 	bl	8009ccc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2220      	movs	r2, #32
 8009cb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
	...

08009ccc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b085      	sub	sp, #20
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d108      	bne.n	8009cee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009cec:	e031      	b.n	8009d52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009cee:	2308      	movs	r3, #8
 8009cf0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009cf2:	2308      	movs	r3, #8
 8009cf4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	0e5b      	lsrs	r3, r3, #25
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	f003 0307 	and.w	r3, r3, #7
 8009d04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	0f5b      	lsrs	r3, r3, #29
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	f003 0307 	and.w	r3, r3, #7
 8009d14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d16:	7bbb      	ldrb	r3, [r7, #14]
 8009d18:	7b3a      	ldrb	r2, [r7, #12]
 8009d1a:	4911      	ldr	r1, [pc, #68]	@ (8009d60 <UARTEx_SetNbDataToProcess+0x94>)
 8009d1c:	5c8a      	ldrb	r2, [r1, r2]
 8009d1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009d22:	7b3a      	ldrb	r2, [r7, #12]
 8009d24:	490f      	ldr	r1, [pc, #60]	@ (8009d64 <UARTEx_SetNbDataToProcess+0x98>)
 8009d26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d28:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d2c:	b29a      	uxth	r2, r3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d34:	7bfb      	ldrb	r3, [r7, #15]
 8009d36:	7b7a      	ldrb	r2, [r7, #13]
 8009d38:	4909      	ldr	r1, [pc, #36]	@ (8009d60 <UARTEx_SetNbDataToProcess+0x94>)
 8009d3a:	5c8a      	ldrb	r2, [r1, r2]
 8009d3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d40:	7b7a      	ldrb	r2, [r7, #13]
 8009d42:	4908      	ldr	r1, [pc, #32]	@ (8009d64 <UARTEx_SetNbDataToProcess+0x98>)
 8009d44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d46:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d4a:	b29a      	uxth	r2, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009d52:	bf00      	nop
 8009d54:	3714      	adds	r7, #20
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr
 8009d5e:	bf00      	nop
 8009d60:	0800bab4 	.word	0x0800bab4
 8009d64:	0800babc 	.word	0x0800babc

08009d68 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b08b      	sub	sp, #44	@ 0x2c
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	fa93 f3a3 	rbit	r3, r3
 8009d82:	613b      	str	r3, [r7, #16]
  return result;
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d101      	bne.n	8009d92 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8009d8e:	2320      	movs	r3, #32
 8009d90:	e003      	b.n	8009d9a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	fab3 f383 	clz	r3, r3
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	005b      	lsls	r3, r3, #1
 8009d9c:	2103      	movs	r1, #3
 8009d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8009da2:	43db      	mvns	r3, r3
 8009da4:	401a      	ands	r2, r3
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009daa:	6a3b      	ldr	r3, [r7, #32]
 8009dac:	fa93 f3a3 	rbit	r3, r3
 8009db0:	61fb      	str	r3, [r7, #28]
  return result;
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d101      	bne.n	8009dc0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8009dbc:	2320      	movs	r3, #32
 8009dbe:	e003      	b.n	8009dc8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8009dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc2:	fab3 f383 	clz	r3, r3
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	005b      	lsls	r3, r3, #1
 8009dca:	6879      	ldr	r1, [r7, #4]
 8009dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8009dd0:	431a      	orrs	r2, r3
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	601a      	str	r2, [r3, #0]
}
 8009dd6:	bf00      	nop
 8009dd8:	372c      	adds	r7, #44	@ 0x2c
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr

08009de2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8009de2:	b480      	push	{r7}
 8009de4:	b085      	sub	sp, #20
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	60f8      	str	r0, [r7, #12]
 8009dea:	60b9      	str	r1, [r7, #8]
 8009dec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	685a      	ldr	r2, [r3, #4]
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	43db      	mvns	r3, r3
 8009df6:	401a      	ands	r2, r3
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	6879      	ldr	r1, [r7, #4]
 8009dfc:	fb01 f303 	mul.w	r3, r1, r3
 8009e00:	431a      	orrs	r2, r3
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	605a      	str	r2, [r3, #4]
}
 8009e06:	bf00      	nop
 8009e08:	3714      	adds	r7, #20
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8009e12:	b480      	push	{r7}
 8009e14:	b08b      	sub	sp, #44	@ 0x2c
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	60f8      	str	r0, [r7, #12]
 8009e1a:	60b9      	str	r1, [r7, #8]
 8009e1c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	689a      	ldr	r2, [r3, #8]
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	fa93 f3a3 	rbit	r3, r3
 8009e2c:	613b      	str	r3, [r7, #16]
  return result;
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d101      	bne.n	8009e3c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009e38:	2320      	movs	r3, #32
 8009e3a:	e003      	b.n	8009e44 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	fab3 f383 	clz	r3, r3
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	005b      	lsls	r3, r3, #1
 8009e46:	2103      	movs	r1, #3
 8009e48:	fa01 f303 	lsl.w	r3, r1, r3
 8009e4c:	43db      	mvns	r3, r3
 8009e4e:	401a      	ands	r2, r3
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	fa93 f3a3 	rbit	r3, r3
 8009e5a:	61fb      	str	r3, [r7, #28]
  return result;
 8009e5c:	69fb      	ldr	r3, [r7, #28]
 8009e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d101      	bne.n	8009e6a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8009e66:	2320      	movs	r3, #32
 8009e68:	e003      	b.n	8009e72 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8009e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e6c:	fab3 f383 	clz	r3, r3
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	005b      	lsls	r3, r3, #1
 8009e74:	6879      	ldr	r1, [r7, #4]
 8009e76:	fa01 f303 	lsl.w	r3, r1, r3
 8009e7a:	431a      	orrs	r2, r3
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8009e80:	bf00      	nop
 8009e82:	372c      	adds	r7, #44	@ 0x2c
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b08b      	sub	sp, #44	@ 0x2c
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	68da      	ldr	r2, [r3, #12]
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	fa93 f3a3 	rbit	r3, r3
 8009ea6:	613b      	str	r3, [r7, #16]
  return result;
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009eac:	69bb      	ldr	r3, [r7, #24]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d101      	bne.n	8009eb6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8009eb2:	2320      	movs	r3, #32
 8009eb4:	e003      	b.n	8009ebe <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	fab3 f383 	clz	r3, r3
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	005b      	lsls	r3, r3, #1
 8009ec0:	2103      	movs	r1, #3
 8009ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ec6:	43db      	mvns	r3, r3
 8009ec8:	401a      	ands	r2, r3
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ece:	6a3b      	ldr	r3, [r7, #32]
 8009ed0:	fa93 f3a3 	rbit	r3, r3
 8009ed4:	61fb      	str	r3, [r7, #28]
  return result;
 8009ed6:	69fb      	ldr	r3, [r7, #28]
 8009ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d101      	bne.n	8009ee4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8009ee0:	2320      	movs	r3, #32
 8009ee2:	e003      	b.n	8009eec <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8009ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee6:	fab3 f383 	clz	r3, r3
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	005b      	lsls	r3, r3, #1
 8009eee:	6879      	ldr	r1, [r7, #4]
 8009ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ef4:	431a      	orrs	r2, r3
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	60da      	str	r2, [r3, #12]
}
 8009efa:	bf00      	nop
 8009efc:	372c      	adds	r7, #44	@ 0x2c
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr

08009f06 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009f06:	b480      	push	{r7}
 8009f08:	b08b      	sub	sp, #44	@ 0x2c
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	60f8      	str	r0, [r7, #12]
 8009f0e:	60b9      	str	r1, [r7, #8]
 8009f10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	6a1a      	ldr	r2, [r3, #32]
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	fa93 f3a3 	rbit	r3, r3
 8009f20:	613b      	str	r3, [r7, #16]
  return result;
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d101      	bne.n	8009f30 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009f2c:	2320      	movs	r3, #32
 8009f2e:	e003      	b.n	8009f38 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	fab3 f383 	clz	r3, r3
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	210f      	movs	r1, #15
 8009f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8009f40:	43db      	mvns	r3, r3
 8009f42:	401a      	ands	r2, r3
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f48:	6a3b      	ldr	r3, [r7, #32]
 8009f4a:	fa93 f3a3 	rbit	r3, r3
 8009f4e:	61fb      	str	r3, [r7, #28]
  return result;
 8009f50:	69fb      	ldr	r3, [r7, #28]
 8009f52:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d101      	bne.n	8009f5e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009f5a:	2320      	movs	r3, #32
 8009f5c:	e003      	b.n	8009f66 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8009f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f60:	fab3 f383 	clz	r3, r3
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	6879      	ldr	r1, [r7, #4]
 8009f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f6e:	431a      	orrs	r2, r3
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8009f74:	bf00      	nop
 8009f76:	372c      	adds	r7, #44	@ 0x2c
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b08b      	sub	sp, #44	@ 0x2c
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	0a1b      	lsrs	r3, r3, #8
 8009f94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	fa93 f3a3 	rbit	r3, r3
 8009f9c:	613b      	str	r3, [r7, #16]
  return result;
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d101      	bne.n	8009fac <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8009fa8:	2320      	movs	r3, #32
 8009faa:	e003      	b.n	8009fb4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	fab3 f383 	clz	r3, r3
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	210f      	movs	r1, #15
 8009fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8009fbc:	43db      	mvns	r3, r3
 8009fbe:	401a      	ands	r2, r3
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	0a1b      	lsrs	r3, r3, #8
 8009fc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fc6:	6a3b      	ldr	r3, [r7, #32]
 8009fc8:	fa93 f3a3 	rbit	r3, r3
 8009fcc:	61fb      	str	r3, [r7, #28]
  return result;
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d101      	bne.n	8009fdc <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8009fd8:	2320      	movs	r3, #32
 8009fda:	e003      	b.n	8009fe4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fde:	fab3 f383 	clz	r3, r3
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	6879      	ldr	r1, [r7, #4]
 8009fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8009fec:	431a      	orrs	r2, r3
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8009ff2:	bf00      	nop
 8009ff4:	372c      	adds	r7, #44	@ 0x2c
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr

08009ffe <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b088      	sub	sp, #32
 800a002:	af00      	add	r7, sp, #0
 800a004:	6078      	str	r0, [r7, #4]
 800a006:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	fa93 f3a3 	rbit	r3, r3
 800a014:	60fb      	str	r3, [r7, #12]
  return result;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d101      	bne.n	800a024 <LL_GPIO_Init+0x26>
    return 32U;
 800a020:	2320      	movs	r3, #32
 800a022:	e003      	b.n	800a02c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	fab3 f383 	clz	r3, r3
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a02e:	e048      	b.n	800a0c2 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	2101      	movs	r1, #1
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	fa01 f303 	lsl.w	r3, r1, r3
 800a03c:	4013      	ands	r3, r2
 800a03e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d03a      	beq.n	800a0bc <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d003      	beq.n	800a056 <LL_GPIO_Init+0x58>
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	2b02      	cmp	r3, #2
 800a054:	d10e      	bne.n	800a074 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	461a      	mov	r2, r3
 800a05c:	69b9      	ldr	r1, [r7, #24]
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f7ff fed7 	bl	8009e12 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	6819      	ldr	r1, [r3, #0]
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	461a      	mov	r2, r3
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f7ff feb7 	bl	8009de2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	461a      	mov	r2, r3
 800a07a:	69b9      	ldr	r1, [r7, #24]
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f7ff ff05 	bl	8009e8c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	2b02      	cmp	r3, #2
 800a088:	d111      	bne.n	800a0ae <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	2bff      	cmp	r3, #255	@ 0xff
 800a08e:	d807      	bhi.n	800a0a0 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	695b      	ldr	r3, [r3, #20]
 800a094:	461a      	mov	r2, r3
 800a096:	69b9      	ldr	r1, [r7, #24]
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f7ff ff34 	bl	8009f06 <LL_GPIO_SetAFPin_0_7>
 800a09e:	e006      	b.n	800a0ae <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	695b      	ldr	r3, [r3, #20]
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	69b9      	ldr	r1, [r7, #24]
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f7ff ff69 	bl	8009f80 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	69b9      	ldr	r1, [r7, #24]
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f7ff fe56 	bl	8009d68 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	69fb      	ldr	r3, [r7, #28]
 800a0c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d1af      	bne.n	800a030 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3720      	adds	r7, #32
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a0da:	b480      	push	{r7}
 800a0dc:	b085      	sub	sp, #20
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a0e2:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800a0e6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a0ee:	b29a      	uxth	r2, r3
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	43db      	mvns	r3, r3
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	b29a      	uxth	r2, r3
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a102:	2300      	movs	r3, #0
}
 800a104:	4618      	mov	r0, r3
 800a106:	3714      	adds	r7, #20
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a110:	b480      	push	{r7}
 800a112:	b085      	sub	sp, #20
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	1d3b      	adds	r3, r7, #4
 800a11a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2201      	movs	r2, #1
 800a122:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2200      	movs	r2, #0
 800a132:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800a13e:	2300      	movs	r3, #0
}
 800a140:	4618      	mov	r0, r3
 800a142:	3714      	adds	r7, #20
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b0c2      	sub	sp, #264	@ 0x108
 800a150:	af00      	add	r7, sp, #0
 800a152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a156:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a15a:	6018      	str	r0, [r3, #0]
 800a15c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a160:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a164:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a16a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	785b      	ldrb	r3, [r3, #1]
 800a172:	2b01      	cmp	r3, #1
 800a174:	f040 86b7 	bne.w	800aee6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a17c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	699a      	ldr	r2, [r3, #24]
 800a184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a188:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	429a      	cmp	r2, r3
 800a192:	d908      	bls.n	800a1a6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a1a4:	e007      	b.n	800a1b6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a1a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	699b      	ldr	r3, [r3, #24]
 800a1b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a1b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	7b1b      	ldrb	r3, [r3, #12]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d13a      	bne.n	800a23c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a1c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	6959      	ldr	r1, [r3, #20]
 800a1d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	88da      	ldrh	r2, [r3, #6]
 800a1de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a1e8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a1ec:	6800      	ldr	r0, [r0, #0]
 800a1ee:	f001 fb82 	bl	800b8f6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a1f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	613b      	str	r3, [r7, #16]
 800a1fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a202:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	461a      	mov	r2, r3
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	4413      	add	r3, r2
 800a214:	613b      	str	r3, [r7, #16]
 800a216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a21a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	00da      	lsls	r2, r3, #3
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	4413      	add	r3, r2
 800a228:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a22c:	60fb      	str	r3, [r7, #12]
 800a22e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a232:	b29a      	uxth	r2, r3
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	801a      	strh	r2, [r3, #0]
 800a238:	f000 be1f 	b.w	800ae7a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a23c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	78db      	ldrb	r3, [r3, #3]
 800a248:	2b02      	cmp	r3, #2
 800a24a:	f040 8462 	bne.w	800ab12 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a24e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a252:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	6a1a      	ldr	r2, [r3, #32]
 800a25a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a25e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	429a      	cmp	r2, r3
 800a268:	f240 83df 	bls.w	800aa2a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a26c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a270:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a27a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	4413      	add	r3, r2
 800a286:	881b      	ldrh	r3, [r3, #0]
 800a288:	b29b      	uxth	r3, r3
 800a28a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a28e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a292:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800a296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a29a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	441a      	add	r2, r3
 800a2b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a2b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2bc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a2c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a2c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	6a1a      	ldr	r2, [r3, #32]
 800a2d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2d8:	1ad2      	subs	r2, r2, r3
 800a2da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a2e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	4413      	add	r3, r2
 800a300:	881b      	ldrh	r3, [r3, #0]
 800a302:	b29b      	uxth	r3, r3
 800a304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f000 81c7 	beq.w	800a69c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a30e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a312:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	633b      	str	r3, [r7, #48]	@ 0x30
 800a31a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a31e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	785b      	ldrb	r3, [r3, #1]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d177      	bne.n	800a41a <USB_EPStartXfer+0x2ce>
 800a32a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a32e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a33a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a344:	b29b      	uxth	r3, r3
 800a346:	461a      	mov	r2, r3
 800a348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a34a:	4413      	add	r3, r2
 800a34c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a34e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a352:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	00da      	lsls	r2, r3, #3
 800a35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a35e:	4413      	add	r3, r2
 800a360:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a364:	627b      	str	r3, [r7, #36]	@ 0x24
 800a366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a368:	881b      	ldrh	r3, [r3, #0]
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a370:	b29a      	uxth	r2, r3
 800a372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a374:	801a      	strh	r2, [r3, #0]
 800a376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a37a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a37c:	d921      	bls.n	800a3c2 <USB_EPStartXfer+0x276>
 800a37e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a382:	095b      	lsrs	r3, r3, #5
 800a384:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a38c:	f003 031f 	and.w	r3, r3, #31
 800a390:	2b00      	cmp	r3, #0
 800a392:	d104      	bne.n	800a39e <USB_EPStartXfer+0x252>
 800a394:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a398:	3b01      	subs	r3, #1
 800a39a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a0:	881b      	ldrh	r3, [r3, #0]
 800a3a2:	b29a      	uxth	r2, r3
 800a3a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	029b      	lsls	r3, r3, #10
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3ba:	b29a      	uxth	r2, r3
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3be:	801a      	strh	r2, [r3, #0]
 800a3c0:	e050      	b.n	800a464 <USB_EPStartXfer+0x318>
 800a3c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d10a      	bne.n	800a3e0 <USB_EPStartXfer+0x294>
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3cc:	881b      	ldrh	r3, [r3, #0]
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3d8:	b29a      	uxth	r2, r3
 800a3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3dc:	801a      	strh	r2, [r3, #0]
 800a3de:	e041      	b.n	800a464 <USB_EPStartXfer+0x318>
 800a3e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3e4:	085b      	lsrs	r3, r3, #1
 800a3e6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a3ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3ee:	f003 0301 	and.w	r3, r3, #1
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d004      	beq.n	800a400 <USB_EPStartXfer+0x2b4>
 800a3f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a402:	881b      	ldrh	r3, [r3, #0]
 800a404:	b29a      	uxth	r2, r3
 800a406:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	029b      	lsls	r3, r3, #10
 800a40e:	b29b      	uxth	r3, r3
 800a410:	4313      	orrs	r3, r2
 800a412:	b29a      	uxth	r2, r3
 800a414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a416:	801a      	strh	r2, [r3, #0]
 800a418:	e024      	b.n	800a464 <USB_EPStartXfer+0x318>
 800a41a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a41e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	785b      	ldrb	r3, [r3, #1]
 800a426:	2b01      	cmp	r3, #1
 800a428:	d11c      	bne.n	800a464 <USB_EPStartXfer+0x318>
 800a42a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a42e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a438:	b29b      	uxth	r3, r3
 800a43a:	461a      	mov	r2, r3
 800a43c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a43e:	4413      	add	r3, r2
 800a440:	633b      	str	r3, [r7, #48]	@ 0x30
 800a442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	00da      	lsls	r2, r3, #3
 800a450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a452:	4413      	add	r3, r2
 800a454:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a458:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a45a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a45e:	b29a      	uxth	r2, r3
 800a460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a462:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	895b      	ldrh	r3, [r3, #10]
 800a470:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	6959      	ldr	r1, [r3, #20]
 800a480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a484:	b29b      	uxth	r3, r3
 800a486:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a48a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a48e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a492:	6800      	ldr	r0, [r0, #0]
 800a494:	f001 fa2f 	bl	800b8f6 <USB_WritePMA>
            ep->xfer_buff += len;
 800a498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a49c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	695a      	ldr	r2, [r3, #20]
 800a4a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4a8:	441a      	add	r2, r3
 800a4aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a4b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	6a1a      	ldr	r2, [r3, #32]
 800a4c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	691b      	ldr	r3, [r3, #16]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d90f      	bls.n	800a4f2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800a4d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	6a1a      	ldr	r2, [r3, #32]
 800a4de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4e2:	1ad2      	subs	r2, r2, r3
 800a4e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	621a      	str	r2, [r3, #32]
 800a4f0:	e00e      	b.n	800a510 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a4f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	6a1b      	ldr	r3, [r3, #32]
 800a4fe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800a502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a506:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2200      	movs	r2, #0
 800a50e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	785b      	ldrb	r3, [r3, #1]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d177      	bne.n	800a610 <USB_EPStartXfer+0x4c4>
 800a520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a524:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	61bb      	str	r3, [r7, #24]
 800a52c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a530:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	461a      	mov	r2, r3
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	4413      	add	r3, r2
 800a542:	61bb      	str	r3, [r7, #24]
 800a544:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a548:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	00da      	lsls	r2, r3, #3
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	4413      	add	r3, r2
 800a556:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a55a:	617b      	str	r3, [r7, #20]
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	881b      	ldrh	r3, [r3, #0]
 800a560:	b29b      	uxth	r3, r3
 800a562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a566:	b29a      	uxth	r2, r3
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	801a      	strh	r2, [r3, #0]
 800a56c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a570:	2b3e      	cmp	r3, #62	@ 0x3e
 800a572:	d921      	bls.n	800a5b8 <USB_EPStartXfer+0x46c>
 800a574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a578:	095b      	lsrs	r3, r3, #5
 800a57a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a57e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a582:	f003 031f 	and.w	r3, r3, #31
 800a586:	2b00      	cmp	r3, #0
 800a588:	d104      	bne.n	800a594 <USB_EPStartXfer+0x448>
 800a58a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a58e:	3b01      	subs	r3, #1
 800a590:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	881b      	ldrh	r3, [r3, #0]
 800a598:	b29a      	uxth	r2, r3
 800a59a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	029b      	lsls	r3, r3, #10
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5b0:	b29a      	uxth	r2, r3
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	801a      	strh	r2, [r3, #0]
 800a5b6:	e056      	b.n	800a666 <USB_EPStartXfer+0x51a>
 800a5b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d10a      	bne.n	800a5d6 <USB_EPStartXfer+0x48a>
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	881b      	ldrh	r3, [r3, #0]
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5ce:	b29a      	uxth	r2, r3
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	801a      	strh	r2, [r3, #0]
 800a5d4:	e047      	b.n	800a666 <USB_EPStartXfer+0x51a>
 800a5d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5da:	085b      	lsrs	r3, r3, #1
 800a5dc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a5e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5e4:	f003 0301 	and.w	r3, r3, #1
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d004      	beq.n	800a5f6 <USB_EPStartXfer+0x4aa>
 800a5ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	881b      	ldrh	r3, [r3, #0]
 800a5fa:	b29a      	uxth	r2, r3
 800a5fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a600:	b29b      	uxth	r3, r3
 800a602:	029b      	lsls	r3, r3, #10
 800a604:	b29b      	uxth	r3, r3
 800a606:	4313      	orrs	r3, r2
 800a608:	b29a      	uxth	r2, r3
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	801a      	strh	r2, [r3, #0]
 800a60e:	e02a      	b.n	800a666 <USB_EPStartXfer+0x51a>
 800a610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	785b      	ldrb	r3, [r3, #1]
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d122      	bne.n	800a666 <USB_EPStartXfer+0x51a>
 800a620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a624:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	623b      	str	r3, [r7, #32]
 800a62c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a630:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	461a      	mov	r2, r3
 800a63e:	6a3b      	ldr	r3, [r7, #32]
 800a640:	4413      	add	r3, r2
 800a642:	623b      	str	r3, [r7, #32]
 800a644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	00da      	lsls	r2, r3, #3
 800a652:	6a3b      	ldr	r3, [r7, #32]
 800a654:	4413      	add	r3, r2
 800a656:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a65a:	61fb      	str	r3, [r7, #28]
 800a65c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a660:	b29a      	uxth	r2, r3
 800a662:	69fb      	ldr	r3, [r7, #28]
 800a664:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a66a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	891b      	ldrh	r3, [r3, #8]
 800a672:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a67a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	6959      	ldr	r1, [r3, #20]
 800a682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a686:	b29b      	uxth	r3, r3
 800a688:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a68c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a690:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a694:	6800      	ldr	r0, [r0, #0]
 800a696:	f001 f92e 	bl	800b8f6 <USB_WritePMA>
 800a69a:	e3ee      	b.n	800ae7a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a69c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	785b      	ldrb	r3, [r3, #1]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d177      	bne.n	800a79c <USB_EPStartXfer+0x650>
 800a6ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6cc:	4413      	add	r3, r2
 800a6ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	00da      	lsls	r2, r3, #3
 800a6de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6e0:	4413      	add	r3, r2
 800a6e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a6e6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6ea:	881b      	ldrh	r3, [r3, #0]
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6f2:	b29a      	uxth	r2, r3
 800a6f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6f6:	801a      	strh	r2, [r3, #0]
 800a6f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6fc:	2b3e      	cmp	r3, #62	@ 0x3e
 800a6fe:	d921      	bls.n	800a744 <USB_EPStartXfer+0x5f8>
 800a700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a704:	095b      	lsrs	r3, r3, #5
 800a706:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a70a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a70e:	f003 031f 	and.w	r3, r3, #31
 800a712:	2b00      	cmp	r3, #0
 800a714:	d104      	bne.n	800a720 <USB_EPStartXfer+0x5d4>
 800a716:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a71a:	3b01      	subs	r3, #1
 800a71c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a722:	881b      	ldrh	r3, [r3, #0]
 800a724:	b29a      	uxth	r2, r3
 800a726:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	029b      	lsls	r3, r3, #10
 800a72e:	b29b      	uxth	r3, r3
 800a730:	4313      	orrs	r3, r2
 800a732:	b29b      	uxth	r3, r3
 800a734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a73c:	b29a      	uxth	r2, r3
 800a73e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a740:	801a      	strh	r2, [r3, #0]
 800a742:	e056      	b.n	800a7f2 <USB_EPStartXfer+0x6a6>
 800a744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d10a      	bne.n	800a762 <USB_EPStartXfer+0x616>
 800a74c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a74e:	881b      	ldrh	r3, [r3, #0]
 800a750:	b29b      	uxth	r3, r3
 800a752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a75a:	b29a      	uxth	r2, r3
 800a75c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a75e:	801a      	strh	r2, [r3, #0]
 800a760:	e047      	b.n	800a7f2 <USB_EPStartXfer+0x6a6>
 800a762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a766:	085b      	lsrs	r3, r3, #1
 800a768:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a76c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a770:	f003 0301 	and.w	r3, r3, #1
 800a774:	2b00      	cmp	r3, #0
 800a776:	d004      	beq.n	800a782 <USB_EPStartXfer+0x636>
 800a778:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a77c:	3301      	adds	r3, #1
 800a77e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a782:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a784:	881b      	ldrh	r3, [r3, #0]
 800a786:	b29a      	uxth	r2, r3
 800a788:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	029b      	lsls	r3, r3, #10
 800a790:	b29b      	uxth	r3, r3
 800a792:	4313      	orrs	r3, r2
 800a794:	b29a      	uxth	r2, r3
 800a796:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a798:	801a      	strh	r2, [r3, #0]
 800a79a:	e02a      	b.n	800a7f2 <USB_EPStartXfer+0x6a6>
 800a79c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	785b      	ldrb	r3, [r3, #1]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d122      	bne.n	800a7f2 <USB_EPStartXfer+0x6a6>
 800a7ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a7b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7cc:	4413      	add	r3, r2
 800a7ce:	653b      	str	r3, [r7, #80]	@ 0x50
 800a7d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	00da      	lsls	r2, r3, #3
 800a7de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7e0:	4413      	add	r3, r2
 800a7e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a7e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7ec:	b29a      	uxth	r2, r3
 800a7ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a7f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	891b      	ldrh	r3, [r3, #8]
 800a7fe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	6959      	ldr	r1, [r3, #20]
 800a80e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a812:	b29b      	uxth	r3, r3
 800a814:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a818:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a81c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a820:	6800      	ldr	r0, [r0, #0]
 800a822:	f001 f868 	bl	800b8f6 <USB_WritePMA>
            ep->xfer_buff += len;
 800a826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a82a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	695a      	ldr	r2, [r3, #20]
 800a832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a836:	441a      	add	r2, r3
 800a838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a83c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	6a1a      	ldr	r2, [r3, #32]
 800a850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a854:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	691b      	ldr	r3, [r3, #16]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d90f      	bls.n	800a880 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800a860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	6a1a      	ldr	r2, [r3, #32]
 800a86c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a870:	1ad2      	subs	r2, r2, r3
 800a872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	621a      	str	r2, [r3, #32]
 800a87e:	e00e      	b.n	800a89e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800a880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	6a1b      	ldr	r3, [r3, #32]
 800a88c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800a890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a894:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	2200      	movs	r2, #0
 800a89c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a89e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	785b      	ldrb	r3, [r3, #1]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d177      	bne.n	800a9aa <USB_EPStartXfer+0x85e>
 800a8ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a8c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8da:	4413      	add	r3, r2
 800a8dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a8de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	00da      	lsls	r2, r3, #3
 800a8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ee:	4413      	add	r3, r2
 800a8f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a8f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8f8:	881b      	ldrh	r3, [r3, #0]
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a900:	b29a      	uxth	r2, r3
 800a902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a904:	801a      	strh	r2, [r3, #0]
 800a906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a90a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a90c:	d921      	bls.n	800a952 <USB_EPStartXfer+0x806>
 800a90e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a912:	095b      	lsrs	r3, r3, #5
 800a914:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a91c:	f003 031f 	and.w	r3, r3, #31
 800a920:	2b00      	cmp	r3, #0
 800a922:	d104      	bne.n	800a92e <USB_EPStartXfer+0x7e2>
 800a924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a928:	3b01      	subs	r3, #1
 800a92a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a92e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a930:	881b      	ldrh	r3, [r3, #0]
 800a932:	b29a      	uxth	r2, r3
 800a934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a938:	b29b      	uxth	r3, r3
 800a93a:	029b      	lsls	r3, r3, #10
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	4313      	orrs	r3, r2
 800a940:	b29b      	uxth	r3, r3
 800a942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a94a:	b29a      	uxth	r2, r3
 800a94c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a94e:	801a      	strh	r2, [r3, #0]
 800a950:	e050      	b.n	800a9f4 <USB_EPStartXfer+0x8a8>
 800a952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a956:	2b00      	cmp	r3, #0
 800a958:	d10a      	bne.n	800a970 <USB_EPStartXfer+0x824>
 800a95a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a95c:	881b      	ldrh	r3, [r3, #0]
 800a95e:	b29b      	uxth	r3, r3
 800a960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a968:	b29a      	uxth	r2, r3
 800a96a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a96c:	801a      	strh	r2, [r3, #0]
 800a96e:	e041      	b.n	800a9f4 <USB_EPStartXfer+0x8a8>
 800a970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a974:	085b      	lsrs	r3, r3, #1
 800a976:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a97a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a97e:	f003 0301 	and.w	r3, r3, #1
 800a982:	2b00      	cmp	r3, #0
 800a984:	d004      	beq.n	800a990 <USB_EPStartXfer+0x844>
 800a986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a98a:	3301      	adds	r3, #1
 800a98c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a992:	881b      	ldrh	r3, [r3, #0]
 800a994:	b29a      	uxth	r2, r3
 800a996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	029b      	lsls	r3, r3, #10
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	b29a      	uxth	r2, r3
 800a9a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9a6:	801a      	strh	r2, [r3, #0]
 800a9a8:	e024      	b.n	800a9f4 <USB_EPStartXfer+0x8a8>
 800a9aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	785b      	ldrb	r3, [r3, #1]
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d11c      	bne.n	800a9f4 <USB_EPStartXfer+0x8a8>
 800a9ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9ce:	4413      	add	r3, r2
 800a9d0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a9d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	00da      	lsls	r2, r3, #3
 800a9e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9e2:	4413      	add	r3, r2
 800a9e4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a9e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9ee:	b29a      	uxth	r2, r3
 800a9f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a9f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	895b      	ldrh	r3, [r3, #10]
 800aa00:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	6959      	ldr	r1, [r3, #20]
 800aa10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800aa1a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800aa1e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800aa22:	6800      	ldr	r0, [r0, #0]
 800aa24:	f000 ff67 	bl	800b8f6 <USB_WritePMA>
 800aa28:	e227      	b.n	800ae7a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800aa2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	6a1b      	ldr	r3, [r3, #32]
 800aa36:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800aa3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	4413      	add	r3, r2
 800aa54:	881b      	ldrh	r3, [r3, #0]
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800aa5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa60:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800aa64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	441a      	add	r2, r3
 800aa7e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800aa82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800aa96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aaa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	461a      	mov	r2, r3
 800aab4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aab6:	4413      	add	r3, r2
 800aab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aaba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aabe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	00da      	lsls	r2, r3, #3
 800aac8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aaca:	4413      	add	r3, r2
 800aacc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aad0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aad6:	b29a      	uxth	r2, r3
 800aad8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aada:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800aadc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aae0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	891b      	ldrh	r3, [r3, #8]
 800aae8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aaec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	6959      	ldr	r1, [r3, #20]
 800aaf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ab02:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ab06:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ab0a:	6800      	ldr	r0, [r0, #0]
 800ab0c:	f000 fef3 	bl	800b8f6 <USB_WritePMA>
 800ab10:	e1b3      	b.n	800ae7a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ab12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	6a1a      	ldr	r2, [r3, #32]
 800ab1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab22:	1ad2      	subs	r2, r2, r3
 800ab24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ab30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	4413      	add	r3, r2
 800ab4a:	881b      	ldrh	r3, [r3, #0]
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	f000 80c6 	beq.w	800ace4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	673b      	str	r3, [r7, #112]	@ 0x70
 800ab64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	785b      	ldrb	r3, [r3, #1]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d177      	bne.n	800ac64 <USB_EPStartXfer+0xb18>
 800ab74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ab80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	461a      	mov	r2, r3
 800ab92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab94:	4413      	add	r3, r2
 800ab96:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ab98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	00da      	lsls	r2, r3, #3
 800aba6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aba8:	4413      	add	r3, r2
 800abaa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800abae:	667b      	str	r3, [r7, #100]	@ 0x64
 800abb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800abb2:	881b      	ldrh	r3, [r3, #0]
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abba:	b29a      	uxth	r2, r3
 800abbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800abbe:	801a      	strh	r2, [r3, #0]
 800abc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abc4:	2b3e      	cmp	r3, #62	@ 0x3e
 800abc6:	d921      	bls.n	800ac0c <USB_EPStartXfer+0xac0>
 800abc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abcc:	095b      	lsrs	r3, r3, #5
 800abce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800abd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abd6:	f003 031f 	and.w	r3, r3, #31
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d104      	bne.n	800abe8 <USB_EPStartXfer+0xa9c>
 800abde:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800abe2:	3b01      	subs	r3, #1
 800abe4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800abe8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800abea:	881b      	ldrh	r3, [r3, #0]
 800abec:	b29a      	uxth	r2, r3
 800abee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	029b      	lsls	r3, r3, #10
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	4313      	orrs	r3, r2
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac04:	b29a      	uxth	r2, r3
 800ac06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac08:	801a      	strh	r2, [r3, #0]
 800ac0a:	e050      	b.n	800acae <USB_EPStartXfer+0xb62>
 800ac0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d10a      	bne.n	800ac2a <USB_EPStartXfer+0xade>
 800ac14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac16:	881b      	ldrh	r3, [r3, #0]
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac22:	b29a      	uxth	r2, r3
 800ac24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac26:	801a      	strh	r2, [r3, #0]
 800ac28:	e041      	b.n	800acae <USB_EPStartXfer+0xb62>
 800ac2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac2e:	085b      	lsrs	r3, r3, #1
 800ac30:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ac34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac38:	f003 0301 	and.w	r3, r3, #1
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d004      	beq.n	800ac4a <USB_EPStartXfer+0xafe>
 800ac40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ac44:	3301      	adds	r3, #1
 800ac46:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ac4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac4c:	881b      	ldrh	r3, [r3, #0]
 800ac4e:	b29a      	uxth	r2, r3
 800ac50:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	029b      	lsls	r3, r3, #10
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	b29a      	uxth	r2, r3
 800ac5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac60:	801a      	strh	r2, [r3, #0]
 800ac62:	e024      	b.n	800acae <USB_EPStartXfer+0xb62>
 800ac64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	785b      	ldrb	r3, [r3, #1]
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d11c      	bne.n	800acae <USB_EPStartXfer+0xb62>
 800ac74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	461a      	mov	r2, r3
 800ac86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ac88:	4413      	add	r3, r2
 800ac8a:	673b      	str	r3, [r7, #112]	@ 0x70
 800ac8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	00da      	lsls	r2, r3, #3
 800ac9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ac9c:	4413      	add	r3, r2
 800ac9e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aca2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800acae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	895b      	ldrh	r3, [r3, #10]
 800acba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800acbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	6959      	ldr	r1, [r3, #20]
 800acca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acce:	b29b      	uxth	r3, r3
 800acd0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800acd4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800acd8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800acdc:	6800      	ldr	r0, [r0, #0]
 800acde:	f000 fe0a 	bl	800b8f6 <USB_WritePMA>
 800ace2:	e0ca      	b.n	800ae7a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ace4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ace8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	785b      	ldrb	r3, [r3, #1]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d177      	bne.n	800ade4 <USB_EPStartXfer+0xc98>
 800acf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ad00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	461a      	mov	r2, r3
 800ad12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ad14:	4413      	add	r3, r2
 800ad16:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ad18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	00da      	lsls	r2, r3, #3
 800ad26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ad28:	4413      	add	r3, r2
 800ad2a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ad2e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ad30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad32:	881b      	ldrh	r3, [r3, #0]
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad3a:	b29a      	uxth	r2, r3
 800ad3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad3e:	801a      	strh	r2, [r3, #0]
 800ad40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad44:	2b3e      	cmp	r3, #62	@ 0x3e
 800ad46:	d921      	bls.n	800ad8c <USB_EPStartXfer+0xc40>
 800ad48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad4c:	095b      	lsrs	r3, r3, #5
 800ad4e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ad52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad56:	f003 031f 	and.w	r3, r3, #31
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d104      	bne.n	800ad68 <USB_EPStartXfer+0xc1c>
 800ad5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ad62:	3b01      	subs	r3, #1
 800ad64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ad68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad6a:	881b      	ldrh	r3, [r3, #0]
 800ad6c:	b29a      	uxth	r2, r3
 800ad6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	029b      	lsls	r3, r3, #10
 800ad76:	b29b      	uxth	r3, r3
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad84:	b29a      	uxth	r2, r3
 800ad86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad88:	801a      	strh	r2, [r3, #0]
 800ad8a:	e05c      	b.n	800ae46 <USB_EPStartXfer+0xcfa>
 800ad8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d10a      	bne.n	800adaa <USB_EPStartXfer+0xc5e>
 800ad94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad96:	881b      	ldrh	r3, [r3, #0]
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ada2:	b29a      	uxth	r2, r3
 800ada4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ada6:	801a      	strh	r2, [r3, #0]
 800ada8:	e04d      	b.n	800ae46 <USB_EPStartXfer+0xcfa>
 800adaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adae:	085b      	lsrs	r3, r3, #1
 800adb0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800adb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adb8:	f003 0301 	and.w	r3, r3, #1
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d004      	beq.n	800adca <USB_EPStartXfer+0xc7e>
 800adc0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800adc4:	3301      	adds	r3, #1
 800adc6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800adca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800adcc:	881b      	ldrh	r3, [r3, #0]
 800adce:	b29a      	uxth	r2, r3
 800add0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800add4:	b29b      	uxth	r3, r3
 800add6:	029b      	lsls	r3, r3, #10
 800add8:	b29b      	uxth	r3, r3
 800adda:	4313      	orrs	r3, r2
 800addc:	b29a      	uxth	r2, r3
 800adde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ade0:	801a      	strh	r2, [r3, #0]
 800ade2:	e030      	b.n	800ae46 <USB_EPStartXfer+0xcfa>
 800ade4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ade8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	785b      	ldrb	r3, [r3, #1]
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d128      	bne.n	800ae46 <USB_EPStartXfer+0xcfa>
 800adf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ae02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	461a      	mov	r2, r3
 800ae14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ae18:	4413      	add	r3, r2
 800ae1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ae1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	00da      	lsls	r2, r3, #3
 800ae2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ae30:	4413      	add	r3, r2
 800ae32:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ae36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ae3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae3e:	b29a      	uxth	r2, r3
 800ae40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ae44:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ae46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	891b      	ldrh	r3, [r3, #8]
 800ae52:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	6959      	ldr	r1, [r3, #20]
 800ae62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ae6c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ae70:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ae74:	6800      	ldr	r0, [r0, #0]
 800ae76:	f000 fd3e 	bl	800b8f6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ae7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	4413      	add	r3, r2
 800ae94:	881b      	ldrh	r3, [r3, #0]
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aea0:	817b      	strh	r3, [r7, #10]
 800aea2:	897b      	ldrh	r3, [r7, #10]
 800aea4:	f083 0310 	eor.w	r3, r3, #16
 800aea8:	817b      	strh	r3, [r7, #10]
 800aeaa:	897b      	ldrh	r3, [r7, #10]
 800aeac:	f083 0320 	eor.w	r3, r3, #32
 800aeb0:	817b      	strh	r3, [r7, #10]
 800aeb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	441a      	add	r2, r3
 800aecc:	897b      	ldrh	r3, [r7, #10]
 800aece:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aed2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aeda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aede:	b29b      	uxth	r3, r3
 800aee0:	8013      	strh	r3, [r2, #0]
 800aee2:	f000 bcde 	b.w	800b8a2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800aee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	7b1b      	ldrb	r3, [r3, #12]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	f040 80bb 	bne.w	800b06e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800aef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aefc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	699a      	ldr	r2, [r3, #24]
 800af04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	691b      	ldr	r3, [r3, #16]
 800af10:	429a      	cmp	r2, r3
 800af12:	d917      	bls.n	800af44 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800af14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	691b      	ldr	r3, [r3, #16]
 800af20:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800af24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	699a      	ldr	r2, [r3, #24]
 800af30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af34:	1ad2      	subs	r2, r2, r3
 800af36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	619a      	str	r2, [r3, #24]
 800af42:	e00e      	b.n	800af62 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800af44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	699b      	ldr	r3, [r3, #24]
 800af50:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800af54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	2200      	movs	r2, #0
 800af60:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800af62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800af70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af7e:	b29b      	uxth	r3, r3
 800af80:	461a      	mov	r2, r3
 800af82:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800af86:	4413      	add	r3, r2
 800af88:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800af8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	781b      	ldrb	r3, [r3, #0]
 800af98:	00da      	lsls	r2, r3, #3
 800af9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800af9e:	4413      	add	r3, r2
 800afa0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800afa4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800afa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800afac:	881b      	ldrh	r3, [r3, #0]
 800afae:	b29b      	uxth	r3, r3
 800afb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800afb4:	b29a      	uxth	r2, r3
 800afb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800afba:	801a      	strh	r2, [r3, #0]
 800afbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afc0:	2b3e      	cmp	r3, #62	@ 0x3e
 800afc2:	d924      	bls.n	800b00e <USB_EPStartXfer+0xec2>
 800afc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afc8:	095b      	lsrs	r3, r3, #5
 800afca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800afce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afd2:	f003 031f 	and.w	r3, r3, #31
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d104      	bne.n	800afe4 <USB_EPStartXfer+0xe98>
 800afda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800afde:	3b01      	subs	r3, #1
 800afe0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800afe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800afe8:	881b      	ldrh	r3, [r3, #0]
 800afea:	b29a      	uxth	r2, r3
 800afec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	029b      	lsls	r3, r3, #10
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	4313      	orrs	r3, r2
 800aff8:	b29b      	uxth	r3, r3
 800affa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800affe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b002:	b29a      	uxth	r2, r3
 800b004:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b008:	801a      	strh	r2, [r3, #0]
 800b00a:	f000 bc10 	b.w	800b82e <USB_EPStartXfer+0x16e2>
 800b00e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b012:	2b00      	cmp	r3, #0
 800b014:	d10c      	bne.n	800b030 <USB_EPStartXfer+0xee4>
 800b016:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b01a:	881b      	ldrh	r3, [r3, #0]
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b022:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b026:	b29a      	uxth	r2, r3
 800b028:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b02c:	801a      	strh	r2, [r3, #0]
 800b02e:	e3fe      	b.n	800b82e <USB_EPStartXfer+0x16e2>
 800b030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b034:	085b      	lsrs	r3, r3, #1
 800b036:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b03a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b03e:	f003 0301 	and.w	r3, r3, #1
 800b042:	2b00      	cmp	r3, #0
 800b044:	d004      	beq.n	800b050 <USB_EPStartXfer+0xf04>
 800b046:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b04a:	3301      	adds	r3, #1
 800b04c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b050:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b054:	881b      	ldrh	r3, [r3, #0]
 800b056:	b29a      	uxth	r2, r3
 800b058:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	029b      	lsls	r3, r3, #10
 800b060:	b29b      	uxth	r3, r3
 800b062:	4313      	orrs	r3, r2
 800b064:	b29a      	uxth	r2, r3
 800b066:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b06a:	801a      	strh	r2, [r3, #0]
 800b06c:	e3df      	b.n	800b82e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b06e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	78db      	ldrb	r3, [r3, #3]
 800b07a:	2b02      	cmp	r3, #2
 800b07c:	f040 8218 	bne.w	800b4b0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	785b      	ldrb	r3, [r3, #1]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f040 809d 	bne.w	800b1cc <USB_EPStartXfer+0x1080>
 800b092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b096:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b0a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b0b6:	4413      	add	r3, r2
 800b0b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b0bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	00da      	lsls	r2, r3, #3
 800b0ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b0ce:	4413      	add	r3, r2
 800b0d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b0d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b0d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b0dc:	881b      	ldrh	r3, [r3, #0]
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b0e4:	b29a      	uxth	r2, r3
 800b0e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b0ea:	801a      	strh	r2, [r3, #0]
 800b0ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	691b      	ldr	r3, [r3, #16]
 800b0f8:	2b3e      	cmp	r3, #62	@ 0x3e
 800b0fa:	d92b      	bls.n	800b154 <USB_EPStartXfer+0x1008>
 800b0fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	095b      	lsrs	r3, r3, #5
 800b10a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b10e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b112:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	691b      	ldr	r3, [r3, #16]
 800b11a:	f003 031f 	and.w	r3, r3, #31
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d104      	bne.n	800b12c <USB_EPStartXfer+0xfe0>
 800b122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b126:	3b01      	subs	r3, #1
 800b128:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b12c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b130:	881b      	ldrh	r3, [r3, #0]
 800b132:	b29a      	uxth	r2, r3
 800b134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b138:	b29b      	uxth	r3, r3
 800b13a:	029b      	lsls	r3, r3, #10
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	4313      	orrs	r3, r2
 800b140:	b29b      	uxth	r3, r3
 800b142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b14a:	b29a      	uxth	r2, r3
 800b14c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b150:	801a      	strh	r2, [r3, #0]
 800b152:	e070      	b.n	800b236 <USB_EPStartXfer+0x10ea>
 800b154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	691b      	ldr	r3, [r3, #16]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d10c      	bne.n	800b17e <USB_EPStartXfer+0x1032>
 800b164:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b168:	881b      	ldrh	r3, [r3, #0]
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b174:	b29a      	uxth	r2, r3
 800b176:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b17a:	801a      	strh	r2, [r3, #0]
 800b17c:	e05b      	b.n	800b236 <USB_EPStartXfer+0x10ea>
 800b17e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	691b      	ldr	r3, [r3, #16]
 800b18a:	085b      	lsrs	r3, r3, #1
 800b18c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	691b      	ldr	r3, [r3, #16]
 800b19c:	f003 0301 	and.w	r3, r3, #1
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d004      	beq.n	800b1ae <USB_EPStartXfer+0x1062>
 800b1a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b1ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b1b2:	881b      	ldrh	r3, [r3, #0]
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	029b      	lsls	r3, r3, #10
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	b29a      	uxth	r2, r3
 800b1c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b1c8:	801a      	strh	r2, [r3, #0]
 800b1ca:	e034      	b.n	800b236 <USB_EPStartXfer+0x10ea>
 800b1cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	785b      	ldrb	r3, [r3, #1]
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d12c      	bne.n	800b236 <USB_EPStartXfer+0x10ea>
 800b1dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b1ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b200:	4413      	add	r3, r2
 800b202:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b20a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	00da      	lsls	r2, r3, #3
 800b214:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b218:	4413      	add	r3, r2
 800b21a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b21e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b226:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	691b      	ldr	r3, [r3, #16]
 800b22e:	b29a      	uxth	r2, r3
 800b230:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b234:	801a      	strh	r2, [r3, #0]
 800b236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b23a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b248:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	785b      	ldrb	r3, [r3, #1]
 800b250:	2b00      	cmp	r3, #0
 800b252:	f040 809d 	bne.w	800b390 <USB_EPStartXfer+0x1244>
 800b256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b25a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b268:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b272:	b29b      	uxth	r3, r3
 800b274:	461a      	mov	r2, r3
 800b276:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b27a:	4413      	add	r3, r2
 800b27c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b284:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	00da      	lsls	r2, r3, #3
 800b28e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b292:	4413      	add	r3, r2
 800b294:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b298:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b29c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b2a0:	881b      	ldrh	r3, [r3, #0]
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2a8:	b29a      	uxth	r2, r3
 800b2aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b2ae:	801a      	strh	r2, [r3, #0]
 800b2b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	691b      	ldr	r3, [r3, #16]
 800b2bc:	2b3e      	cmp	r3, #62	@ 0x3e
 800b2be:	d92b      	bls.n	800b318 <USB_EPStartXfer+0x11cc>
 800b2c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	691b      	ldr	r3, [r3, #16]
 800b2cc:	095b      	lsrs	r3, r3, #5
 800b2ce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b2d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	691b      	ldr	r3, [r3, #16]
 800b2de:	f003 031f 	and.w	r3, r3, #31
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d104      	bne.n	800b2f0 <USB_EPStartXfer+0x11a4>
 800b2e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b2f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b2f4:	881b      	ldrh	r3, [r3, #0]
 800b2f6:	b29a      	uxth	r2, r3
 800b2f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	029b      	lsls	r3, r3, #10
 800b300:	b29b      	uxth	r3, r3
 800b302:	4313      	orrs	r3, r2
 800b304:	b29b      	uxth	r3, r3
 800b306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b30a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b30e:	b29a      	uxth	r2, r3
 800b310:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b314:	801a      	strh	r2, [r3, #0]
 800b316:	e069      	b.n	800b3ec <USB_EPStartXfer+0x12a0>
 800b318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b31c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	691b      	ldr	r3, [r3, #16]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d10c      	bne.n	800b342 <USB_EPStartXfer+0x11f6>
 800b328:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b32c:	881b      	ldrh	r3, [r3, #0]
 800b32e:	b29b      	uxth	r3, r3
 800b330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b338:	b29a      	uxth	r2, r3
 800b33a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b33e:	801a      	strh	r2, [r3, #0]
 800b340:	e054      	b.n	800b3ec <USB_EPStartXfer+0x12a0>
 800b342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b346:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	691b      	ldr	r3, [r3, #16]
 800b34e:	085b      	lsrs	r3, r3, #1
 800b350:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	691b      	ldr	r3, [r3, #16]
 800b360:	f003 0301 	and.w	r3, r3, #1
 800b364:	2b00      	cmp	r3, #0
 800b366:	d004      	beq.n	800b372 <USB_EPStartXfer+0x1226>
 800b368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b36c:	3301      	adds	r3, #1
 800b36e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b372:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b376:	881b      	ldrh	r3, [r3, #0]
 800b378:	b29a      	uxth	r2, r3
 800b37a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b37e:	b29b      	uxth	r3, r3
 800b380:	029b      	lsls	r3, r3, #10
 800b382:	b29b      	uxth	r3, r3
 800b384:	4313      	orrs	r3, r2
 800b386:	b29a      	uxth	r2, r3
 800b388:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b38c:	801a      	strh	r2, [r3, #0]
 800b38e:	e02d      	b.n	800b3ec <USB_EPStartXfer+0x12a0>
 800b390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b394:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	785b      	ldrb	r3, [r3, #1]
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d125      	bne.n	800b3ec <USB_EPStartXfer+0x12a0>
 800b3a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b3b6:	4413      	add	r3, r2
 800b3b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b3bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	00da      	lsls	r2, r3, #3
 800b3ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b3ce:	4413      	add	r3, r2
 800b3d0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b3d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b3d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	691b      	ldr	r3, [r3, #16]
 800b3e4:	b29a      	uxth	r2, r3
 800b3e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b3ea:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b3ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	69db      	ldr	r3, [r3, #28]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f000 8218 	beq.w	800b82e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b3fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b402:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b40c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	4413      	add	r3, r2
 800b418:	881b      	ldrh	r3, [r3, #0]
 800b41a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b41e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b422:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b426:	2b00      	cmp	r3, #0
 800b428:	d005      	beq.n	800b436 <USB_EPStartXfer+0x12ea>
 800b42a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b42e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b432:	2b00      	cmp	r3, #0
 800b434:	d10d      	bne.n	800b452 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b436:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b43a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b43e:	2b00      	cmp	r3, #0
 800b440:	f040 81f5 	bne.w	800b82e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b444:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	f040 81ee 	bne.w	800b82e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b456:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	4413      	add	r3, r2
 800b46c:	881b      	ldrh	r3, [r3, #0]
 800b46e:	b29b      	uxth	r3, r3
 800b470:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b474:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b478:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b47c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b480:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b48a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	009b      	lsls	r3, r3, #2
 800b494:	441a      	add	r2, r3
 800b496:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b49a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b49e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b4a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4a6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	8013      	strh	r3, [r2, #0]
 800b4ae:	e1be      	b.n	800b82e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b4b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	78db      	ldrb	r3, [r3, #3]
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	f040 81b4 	bne.w	800b82a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b4c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	699a      	ldr	r2, [r3, #24]
 800b4ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	691b      	ldr	r3, [r3, #16]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d917      	bls.n	800b50e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800b4de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	691b      	ldr	r3, [r3, #16]
 800b4ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800b4ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	699a      	ldr	r2, [r3, #24]
 800b4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4fe:	1ad2      	subs	r2, r2, r3
 800b500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	619a      	str	r2, [r3, #24]
 800b50c:	e00e      	b.n	800b52c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800b50e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b512:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	699b      	ldr	r3, [r3, #24]
 800b51a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800b51e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b522:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	2200      	movs	r2, #0
 800b52a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b52c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	785b      	ldrb	r3, [r3, #1]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	f040 8085 	bne.w	800b648 <USB_EPStartXfer+0x14fc>
 800b53e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b542:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b54c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b550:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	461a      	mov	r2, r3
 800b55e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b562:	4413      	add	r3, r2
 800b564:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b56c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	00da      	lsls	r2, r3, #3
 800b576:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b57a:	4413      	add	r3, r2
 800b57c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b580:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b584:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b588:	881b      	ldrh	r3, [r3, #0]
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b590:	b29a      	uxth	r2, r3
 800b592:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b596:	801a      	strh	r2, [r3, #0]
 800b598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b59c:	2b3e      	cmp	r3, #62	@ 0x3e
 800b59e:	d923      	bls.n	800b5e8 <USB_EPStartXfer+0x149c>
 800b5a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5a4:	095b      	lsrs	r3, r3, #5
 800b5a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b5aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5ae:	f003 031f 	and.w	r3, r3, #31
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d104      	bne.n	800b5c0 <USB_EPStartXfer+0x1474>
 800b5b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b5ba:	3b01      	subs	r3, #1
 800b5bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b5c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b5c4:	881b      	ldrh	r3, [r3, #0]
 800b5c6:	b29a      	uxth	r2, r3
 800b5c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b5cc:	b29b      	uxth	r3, r3
 800b5ce:	029b      	lsls	r3, r3, #10
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	b29b      	uxth	r3, r3
 800b5d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5de:	b29a      	uxth	r2, r3
 800b5e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b5e4:	801a      	strh	r2, [r3, #0]
 800b5e6:	e060      	b.n	800b6aa <USB_EPStartXfer+0x155e>
 800b5e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d10c      	bne.n	800b60a <USB_EPStartXfer+0x14be>
 800b5f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b5f4:	881b      	ldrh	r3, [r3, #0]
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b600:	b29a      	uxth	r2, r3
 800b602:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b606:	801a      	strh	r2, [r3, #0]
 800b608:	e04f      	b.n	800b6aa <USB_EPStartXfer+0x155e>
 800b60a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b60e:	085b      	lsrs	r3, r3, #1
 800b610:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b618:	f003 0301 	and.w	r3, r3, #1
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d004      	beq.n	800b62a <USB_EPStartXfer+0x14de>
 800b620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b624:	3301      	adds	r3, #1
 800b626:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b62a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b62e:	881b      	ldrh	r3, [r3, #0]
 800b630:	b29a      	uxth	r2, r3
 800b632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b636:	b29b      	uxth	r3, r3
 800b638:	029b      	lsls	r3, r3, #10
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	4313      	orrs	r3, r2
 800b63e:	b29a      	uxth	r2, r3
 800b640:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b644:	801a      	strh	r2, [r3, #0]
 800b646:	e030      	b.n	800b6aa <USB_EPStartXfer+0x155e>
 800b648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b64c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	785b      	ldrb	r3, [r3, #1]
 800b654:	2b01      	cmp	r3, #1
 800b656:	d128      	bne.n	800b6aa <USB_EPStartXfer+0x155e>
 800b658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b65c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b66a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b674:	b29b      	uxth	r3, r3
 800b676:	461a      	mov	r2, r3
 800b678:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b67c:	4413      	add	r3, r2
 800b67e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	00da      	lsls	r2, r3, #3
 800b690:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b694:	4413      	add	r3, r2
 800b696:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b69a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b69e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6a2:	b29a      	uxth	r2, r3
 800b6a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800b6a8:	801a      	strh	r2, [r3, #0]
 800b6aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b6b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	785b      	ldrb	r3, [r3, #1]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f040 8085 	bne.w	800b7d4 <USB_EPStartXfer+0x1688>
 800b6ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b6d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b6ee:	4413      	add	r3, r2
 800b6f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b6f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	00da      	lsls	r2, r3, #3
 800b702:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b706:	4413      	add	r3, r2
 800b708:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b70c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b710:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b714:	881b      	ldrh	r3, [r3, #0]
 800b716:	b29b      	uxth	r3, r3
 800b718:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b71c:	b29a      	uxth	r2, r3
 800b71e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b722:	801a      	strh	r2, [r3, #0]
 800b724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b728:	2b3e      	cmp	r3, #62	@ 0x3e
 800b72a:	d923      	bls.n	800b774 <USB_EPStartXfer+0x1628>
 800b72c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b730:	095b      	lsrs	r3, r3, #5
 800b732:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b73a:	f003 031f 	and.w	r3, r3, #31
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d104      	bne.n	800b74c <USB_EPStartXfer+0x1600>
 800b742:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b746:	3b01      	subs	r3, #1
 800b748:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b74c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b750:	881b      	ldrh	r3, [r3, #0]
 800b752:	b29a      	uxth	r2, r3
 800b754:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b758:	b29b      	uxth	r3, r3
 800b75a:	029b      	lsls	r3, r3, #10
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	4313      	orrs	r3, r2
 800b760:	b29b      	uxth	r3, r3
 800b762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b76a:	b29a      	uxth	r2, r3
 800b76c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b770:	801a      	strh	r2, [r3, #0]
 800b772:	e05c      	b.n	800b82e <USB_EPStartXfer+0x16e2>
 800b774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d10c      	bne.n	800b796 <USB_EPStartXfer+0x164a>
 800b77c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b780:	881b      	ldrh	r3, [r3, #0]
 800b782:	b29b      	uxth	r3, r3
 800b784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b78c:	b29a      	uxth	r2, r3
 800b78e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b792:	801a      	strh	r2, [r3, #0]
 800b794:	e04b      	b.n	800b82e <USB_EPStartXfer+0x16e2>
 800b796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b79a:	085b      	lsrs	r3, r3, #1
 800b79c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b7a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7a4:	f003 0301 	and.w	r3, r3, #1
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d004      	beq.n	800b7b6 <USB_EPStartXfer+0x166a>
 800b7ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b7b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b7ba:	881b      	ldrh	r3, [r3, #0]
 800b7bc:	b29a      	uxth	r2, r3
 800b7be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	029b      	lsls	r3, r3, #10
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	b29a      	uxth	r2, r3
 800b7cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b7d0:	801a      	strh	r2, [r3, #0]
 800b7d2:	e02c      	b.n	800b82e <USB_EPStartXfer+0x16e2>
 800b7d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	785b      	ldrb	r3, [r3, #1]
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d124      	bne.n	800b82e <USB_EPStartXfer+0x16e2>
 800b7e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b7fa:	4413      	add	r3, r2
 800b7fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b804:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	00da      	lsls	r2, r3, #3
 800b80e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b812:	4413      	add	r3, r2
 800b814:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b818:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b81c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b820:	b29a      	uxth	r2, r3
 800b822:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b826:	801a      	strh	r2, [r3, #0]
 800b828:	e001      	b.n	800b82e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800b82a:	2301      	movs	r3, #1
 800b82c:	e03a      	b.n	800b8a4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b82e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b832:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b836:	681a      	ldr	r2, [r3, #0]
 800b838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b83c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	009b      	lsls	r3, r3, #2
 800b846:	4413      	add	r3, r2
 800b848:	881b      	ldrh	r3, [r3, #0]
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b850:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b854:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b858:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b85c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b860:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b864:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b868:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b86c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b874:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b87e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	009b      	lsls	r3, r3, #2
 800b888:	441a      	add	r2, r3
 800b88a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b88e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b892:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b896:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b89a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b8a2:	2300      	movs	r3, #0
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b8ae:	b480      	push	{r7}
 800b8b0:	b083      	sub	sp, #12
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b8ba:	78fb      	ldrb	r3, [r7, #3]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d103      	bne.n	800b8c8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2280      	movs	r2, #128	@ 0x80
 800b8c4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800b8c8:	2300      	movs	r3, #0
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	370c      	adds	r7, #12
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d4:	4770      	bx	lr

0800b8d6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b8d6:	b480      	push	{r7}
 800b8d8:	b085      	sub	sp, #20
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3714      	adds	r7, #20
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f4:	4770      	bx	lr

0800b8f6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b8f6:	b480      	push	{r7}
 800b8f8:	b08b      	sub	sp, #44	@ 0x2c
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	60f8      	str	r0, [r7, #12]
 800b8fe:	60b9      	str	r1, [r7, #8]
 800b900:	4611      	mov	r1, r2
 800b902:	461a      	mov	r2, r3
 800b904:	460b      	mov	r3, r1
 800b906:	80fb      	strh	r3, [r7, #6]
 800b908:	4613      	mov	r3, r2
 800b90a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b90c:	88bb      	ldrh	r3, [r7, #4]
 800b90e:	3301      	adds	r3, #1
 800b910:	085b      	lsrs	r3, r3, #1
 800b912:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b91c:	88fa      	ldrh	r2, [r7, #6]
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	4413      	add	r3, r2
 800b922:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b926:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b928:	69bb      	ldr	r3, [r7, #24]
 800b92a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b92c:	e01b      	b.n	800b966 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	3301      	adds	r3, #1
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	021b      	lsls	r3, r3, #8
 800b93c:	b21a      	sxth	r2, r3
 800b93e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b942:	4313      	orrs	r3, r2
 800b944:	b21b      	sxth	r3, r3
 800b946:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b948:	6a3b      	ldr	r3, [r7, #32]
 800b94a:	8a7a      	ldrh	r2, [r7, #18]
 800b94c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b94e:	6a3b      	ldr	r3, [r7, #32]
 800b950:	3302      	adds	r3, #2
 800b952:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	3301      	adds	r3, #1
 800b958:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b95a:	69fb      	ldr	r3, [r7, #28]
 800b95c:	3301      	adds	r3, #1
 800b95e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b962:	3b01      	subs	r3, #1
 800b964:	627b      	str	r3, [r7, #36]	@ 0x24
 800b966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d1e0      	bne.n	800b92e <USB_WritePMA+0x38>
  }
}
 800b96c:	bf00      	nop
 800b96e:	bf00      	nop
 800b970:	372c      	adds	r7, #44	@ 0x2c
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr

0800b97a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b97a:	b480      	push	{r7}
 800b97c:	b08b      	sub	sp, #44	@ 0x2c
 800b97e:	af00      	add	r7, sp, #0
 800b980:	60f8      	str	r0, [r7, #12]
 800b982:	60b9      	str	r1, [r7, #8]
 800b984:	4611      	mov	r1, r2
 800b986:	461a      	mov	r2, r3
 800b988:	460b      	mov	r3, r1
 800b98a:	80fb      	strh	r3, [r7, #6]
 800b98c:	4613      	mov	r3, r2
 800b98e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b990:	88bb      	ldrh	r3, [r7, #4]
 800b992:	085b      	lsrs	r3, r3, #1
 800b994:	b29b      	uxth	r3, r3
 800b996:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b9a0:	88fa      	ldrh	r2, [r7, #6]
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	4413      	add	r3, r2
 800b9a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b9aa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b9ac:	69bb      	ldr	r3, [r7, #24]
 800b9ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9b0:	e018      	b.n	800b9e4 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b9b2:	6a3b      	ldr	r3, [r7, #32]
 800b9b4:	881b      	ldrh	r3, [r3, #0]
 800b9b6:	b29b      	uxth	r3, r3
 800b9b8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b9ba:	6a3b      	ldr	r3, [r7, #32]
 800b9bc:	3302      	adds	r3, #2
 800b9be:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	b2da      	uxtb	r2, r3
 800b9c4:	69fb      	ldr	r3, [r7, #28]
 800b9c6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b9c8:	69fb      	ldr	r3, [r7, #28]
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	0a1b      	lsrs	r3, r3, #8
 800b9d2:	b2da      	uxtb	r2, r3
 800b9d4:	69fb      	ldr	r3, [r7, #28]
 800b9d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b9d8:	69fb      	ldr	r3, [r7, #28]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9e0:	3b01      	subs	r3, #1
 800b9e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d1e3      	bne.n	800b9b2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b9ea:	88bb      	ldrh	r3, [r7, #4]
 800b9ec:	f003 0301 	and.w	r3, r3, #1
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d007      	beq.n	800ba06 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800b9f6:	6a3b      	ldr	r3, [r7, #32]
 800b9f8:	881b      	ldrh	r3, [r3, #0]
 800b9fa:	b29b      	uxth	r3, r3
 800b9fc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	b2da      	uxtb	r2, r3
 800ba02:	69fb      	ldr	r3, [r7, #28]
 800ba04:	701a      	strb	r2, [r3, #0]
  }
}
 800ba06:	bf00      	nop
 800ba08:	372c      	adds	r7, #44	@ 0x2c
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr

0800ba12 <memset>:
 800ba12:	4402      	add	r2, r0
 800ba14:	4603      	mov	r3, r0
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d100      	bne.n	800ba1c <memset+0xa>
 800ba1a:	4770      	bx	lr
 800ba1c:	f803 1b01 	strb.w	r1, [r3], #1
 800ba20:	e7f9      	b.n	800ba16 <memset+0x4>
	...

0800ba24 <__libc_init_array>:
 800ba24:	b570      	push	{r4, r5, r6, lr}
 800ba26:	4d0d      	ldr	r5, [pc, #52]	@ (800ba5c <__libc_init_array+0x38>)
 800ba28:	4c0d      	ldr	r4, [pc, #52]	@ (800ba60 <__libc_init_array+0x3c>)
 800ba2a:	1b64      	subs	r4, r4, r5
 800ba2c:	10a4      	asrs	r4, r4, #2
 800ba2e:	2600      	movs	r6, #0
 800ba30:	42a6      	cmp	r6, r4
 800ba32:	d109      	bne.n	800ba48 <__libc_init_array+0x24>
 800ba34:	4d0b      	ldr	r5, [pc, #44]	@ (800ba64 <__libc_init_array+0x40>)
 800ba36:	4c0c      	ldr	r4, [pc, #48]	@ (800ba68 <__libc_init_array+0x44>)
 800ba38:	f000 f818 	bl	800ba6c <_init>
 800ba3c:	1b64      	subs	r4, r4, r5
 800ba3e:	10a4      	asrs	r4, r4, #2
 800ba40:	2600      	movs	r6, #0
 800ba42:	42a6      	cmp	r6, r4
 800ba44:	d105      	bne.n	800ba52 <__libc_init_array+0x2e>
 800ba46:	bd70      	pop	{r4, r5, r6, pc}
 800ba48:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba4c:	4798      	blx	r3
 800ba4e:	3601      	adds	r6, #1
 800ba50:	e7ee      	b.n	800ba30 <__libc_init_array+0xc>
 800ba52:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba56:	4798      	blx	r3
 800ba58:	3601      	adds	r6, #1
 800ba5a:	e7f2      	b.n	800ba42 <__libc_init_array+0x1e>
 800ba5c:	0800bacc 	.word	0x0800bacc
 800ba60:	0800bacc 	.word	0x0800bacc
 800ba64:	0800bacc 	.word	0x0800bacc
 800ba68:	0800bad0 	.word	0x0800bad0

0800ba6c <_init>:
 800ba6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba6e:	bf00      	nop
 800ba70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba72:	bc08      	pop	{r3}
 800ba74:	469e      	mov	lr, r3
 800ba76:	4770      	bx	lr

0800ba78 <_fini>:
 800ba78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba7a:	bf00      	nop
 800ba7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba7e:	bc08      	pop	{r3}
 800ba80:	469e      	mov	lr, r3
 800ba82:	4770      	bx	lr
